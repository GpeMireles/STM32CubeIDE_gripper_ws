
Free_RTOS_rosserial.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005560  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000118  08005700  08005700  00015700  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005818  08005818  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08005818  08005818  00015818  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005820  08005820  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005820  08005820  00015820  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005824  08005824  00015824  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08005828  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004adc  20000074  0800589c  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004b50  0800589c  00024b50  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001555d  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002d95  00000000  00000000  00035601  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011c0  00000000  00000000  00038398  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001098  00000000  00000000  00039558  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002d1e  00000000  00000000  0003a5f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000122e2  00000000  00000000  0003d30e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009473a  00000000  00000000  0004f5f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e3d2a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004d90  00000000  00000000  000e3d7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000074 	.word	0x20000074
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080056e8 	.word	0x080056e8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000078 	.word	0x20000078
 80001dc:	080056e8 	.word	0x080056e8

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b974 	b.w	80004e0 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	4604      	mov	r4, r0
 8000218:	468e      	mov	lr, r1
 800021a:	2b00      	cmp	r3, #0
 800021c:	d14d      	bne.n	80002ba <__udivmoddi4+0xaa>
 800021e:	428a      	cmp	r2, r1
 8000220:	4694      	mov	ip, r2
 8000222:	d969      	bls.n	80002f8 <__udivmoddi4+0xe8>
 8000224:	fab2 f282 	clz	r2, r2
 8000228:	b152      	cbz	r2, 8000240 <__udivmoddi4+0x30>
 800022a:	fa01 f302 	lsl.w	r3, r1, r2
 800022e:	f1c2 0120 	rsb	r1, r2, #32
 8000232:	fa20 f101 	lsr.w	r1, r0, r1
 8000236:	fa0c fc02 	lsl.w	ip, ip, r2
 800023a:	ea41 0e03 	orr.w	lr, r1, r3
 800023e:	4094      	lsls	r4, r2
 8000240:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000244:	0c21      	lsrs	r1, r4, #16
 8000246:	fbbe f6f8 	udiv	r6, lr, r8
 800024a:	fa1f f78c 	uxth.w	r7, ip
 800024e:	fb08 e316 	mls	r3, r8, r6, lr
 8000252:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000256:	fb06 f107 	mul.w	r1, r6, r7
 800025a:	4299      	cmp	r1, r3
 800025c:	d90a      	bls.n	8000274 <__udivmoddi4+0x64>
 800025e:	eb1c 0303 	adds.w	r3, ip, r3
 8000262:	f106 30ff 	add.w	r0, r6, #4294967295
 8000266:	f080 811f 	bcs.w	80004a8 <__udivmoddi4+0x298>
 800026a:	4299      	cmp	r1, r3
 800026c:	f240 811c 	bls.w	80004a8 <__udivmoddi4+0x298>
 8000270:	3e02      	subs	r6, #2
 8000272:	4463      	add	r3, ip
 8000274:	1a5b      	subs	r3, r3, r1
 8000276:	b2a4      	uxth	r4, r4
 8000278:	fbb3 f0f8 	udiv	r0, r3, r8
 800027c:	fb08 3310 	mls	r3, r8, r0, r3
 8000280:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000284:	fb00 f707 	mul.w	r7, r0, r7
 8000288:	42a7      	cmp	r7, r4
 800028a:	d90a      	bls.n	80002a2 <__udivmoddi4+0x92>
 800028c:	eb1c 0404 	adds.w	r4, ip, r4
 8000290:	f100 33ff 	add.w	r3, r0, #4294967295
 8000294:	f080 810a 	bcs.w	80004ac <__udivmoddi4+0x29c>
 8000298:	42a7      	cmp	r7, r4
 800029a:	f240 8107 	bls.w	80004ac <__udivmoddi4+0x29c>
 800029e:	4464      	add	r4, ip
 80002a0:	3802      	subs	r0, #2
 80002a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002a6:	1be4      	subs	r4, r4, r7
 80002a8:	2600      	movs	r6, #0
 80002aa:	b11d      	cbz	r5, 80002b4 <__udivmoddi4+0xa4>
 80002ac:	40d4      	lsrs	r4, r2
 80002ae:	2300      	movs	r3, #0
 80002b0:	e9c5 4300 	strd	r4, r3, [r5]
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d909      	bls.n	80002d2 <__udivmoddi4+0xc2>
 80002be:	2d00      	cmp	r5, #0
 80002c0:	f000 80ef 	beq.w	80004a2 <__udivmoddi4+0x292>
 80002c4:	2600      	movs	r6, #0
 80002c6:	e9c5 0100 	strd	r0, r1, [r5]
 80002ca:	4630      	mov	r0, r6
 80002cc:	4631      	mov	r1, r6
 80002ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d2:	fab3 f683 	clz	r6, r3
 80002d6:	2e00      	cmp	r6, #0
 80002d8:	d14a      	bne.n	8000370 <__udivmoddi4+0x160>
 80002da:	428b      	cmp	r3, r1
 80002dc:	d302      	bcc.n	80002e4 <__udivmoddi4+0xd4>
 80002de:	4282      	cmp	r2, r0
 80002e0:	f200 80f9 	bhi.w	80004d6 <__udivmoddi4+0x2c6>
 80002e4:	1a84      	subs	r4, r0, r2
 80002e6:	eb61 0303 	sbc.w	r3, r1, r3
 80002ea:	2001      	movs	r0, #1
 80002ec:	469e      	mov	lr, r3
 80002ee:	2d00      	cmp	r5, #0
 80002f0:	d0e0      	beq.n	80002b4 <__udivmoddi4+0xa4>
 80002f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80002f6:	e7dd      	b.n	80002b4 <__udivmoddi4+0xa4>
 80002f8:	b902      	cbnz	r2, 80002fc <__udivmoddi4+0xec>
 80002fa:	deff      	udf	#255	; 0xff
 80002fc:	fab2 f282 	clz	r2, r2
 8000300:	2a00      	cmp	r2, #0
 8000302:	f040 8092 	bne.w	800042a <__udivmoddi4+0x21a>
 8000306:	eba1 010c 	sub.w	r1, r1, ip
 800030a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800030e:	fa1f fe8c 	uxth.w	lr, ip
 8000312:	2601      	movs	r6, #1
 8000314:	0c20      	lsrs	r0, r4, #16
 8000316:	fbb1 f3f7 	udiv	r3, r1, r7
 800031a:	fb07 1113 	mls	r1, r7, r3, r1
 800031e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000322:	fb0e f003 	mul.w	r0, lr, r3
 8000326:	4288      	cmp	r0, r1
 8000328:	d908      	bls.n	800033c <__udivmoddi4+0x12c>
 800032a:	eb1c 0101 	adds.w	r1, ip, r1
 800032e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x12a>
 8000334:	4288      	cmp	r0, r1
 8000336:	f200 80cb 	bhi.w	80004d0 <__udivmoddi4+0x2c0>
 800033a:	4643      	mov	r3, r8
 800033c:	1a09      	subs	r1, r1, r0
 800033e:	b2a4      	uxth	r4, r4
 8000340:	fbb1 f0f7 	udiv	r0, r1, r7
 8000344:	fb07 1110 	mls	r1, r7, r0, r1
 8000348:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800034c:	fb0e fe00 	mul.w	lr, lr, r0
 8000350:	45a6      	cmp	lr, r4
 8000352:	d908      	bls.n	8000366 <__udivmoddi4+0x156>
 8000354:	eb1c 0404 	adds.w	r4, ip, r4
 8000358:	f100 31ff 	add.w	r1, r0, #4294967295
 800035c:	d202      	bcs.n	8000364 <__udivmoddi4+0x154>
 800035e:	45a6      	cmp	lr, r4
 8000360:	f200 80bb 	bhi.w	80004da <__udivmoddi4+0x2ca>
 8000364:	4608      	mov	r0, r1
 8000366:	eba4 040e 	sub.w	r4, r4, lr
 800036a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800036e:	e79c      	b.n	80002aa <__udivmoddi4+0x9a>
 8000370:	f1c6 0720 	rsb	r7, r6, #32
 8000374:	40b3      	lsls	r3, r6
 8000376:	fa22 fc07 	lsr.w	ip, r2, r7
 800037a:	ea4c 0c03 	orr.w	ip, ip, r3
 800037e:	fa20 f407 	lsr.w	r4, r0, r7
 8000382:	fa01 f306 	lsl.w	r3, r1, r6
 8000386:	431c      	orrs	r4, r3
 8000388:	40f9      	lsrs	r1, r7
 800038a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800038e:	fa00 f306 	lsl.w	r3, r0, r6
 8000392:	fbb1 f8f9 	udiv	r8, r1, r9
 8000396:	0c20      	lsrs	r0, r4, #16
 8000398:	fa1f fe8c 	uxth.w	lr, ip
 800039c:	fb09 1118 	mls	r1, r9, r8, r1
 80003a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003a4:	fb08 f00e 	mul.w	r0, r8, lr
 80003a8:	4288      	cmp	r0, r1
 80003aa:	fa02 f206 	lsl.w	r2, r2, r6
 80003ae:	d90b      	bls.n	80003c8 <__udivmoddi4+0x1b8>
 80003b0:	eb1c 0101 	adds.w	r1, ip, r1
 80003b4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b8:	f080 8088 	bcs.w	80004cc <__udivmoddi4+0x2bc>
 80003bc:	4288      	cmp	r0, r1
 80003be:	f240 8085 	bls.w	80004cc <__udivmoddi4+0x2bc>
 80003c2:	f1a8 0802 	sub.w	r8, r8, #2
 80003c6:	4461      	add	r1, ip
 80003c8:	1a09      	subs	r1, r1, r0
 80003ca:	b2a4      	uxth	r4, r4
 80003cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003d0:	fb09 1110 	mls	r1, r9, r0, r1
 80003d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003dc:	458e      	cmp	lr, r1
 80003de:	d908      	bls.n	80003f2 <__udivmoddi4+0x1e2>
 80003e0:	eb1c 0101 	adds.w	r1, ip, r1
 80003e4:	f100 34ff 	add.w	r4, r0, #4294967295
 80003e8:	d26c      	bcs.n	80004c4 <__udivmoddi4+0x2b4>
 80003ea:	458e      	cmp	lr, r1
 80003ec:	d96a      	bls.n	80004c4 <__udivmoddi4+0x2b4>
 80003ee:	3802      	subs	r0, #2
 80003f0:	4461      	add	r1, ip
 80003f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003f6:	fba0 9402 	umull	r9, r4, r0, r2
 80003fa:	eba1 010e 	sub.w	r1, r1, lr
 80003fe:	42a1      	cmp	r1, r4
 8000400:	46c8      	mov	r8, r9
 8000402:	46a6      	mov	lr, r4
 8000404:	d356      	bcc.n	80004b4 <__udivmoddi4+0x2a4>
 8000406:	d053      	beq.n	80004b0 <__udivmoddi4+0x2a0>
 8000408:	b15d      	cbz	r5, 8000422 <__udivmoddi4+0x212>
 800040a:	ebb3 0208 	subs.w	r2, r3, r8
 800040e:	eb61 010e 	sbc.w	r1, r1, lr
 8000412:	fa01 f707 	lsl.w	r7, r1, r7
 8000416:	fa22 f306 	lsr.w	r3, r2, r6
 800041a:	40f1      	lsrs	r1, r6
 800041c:	431f      	orrs	r7, r3
 800041e:	e9c5 7100 	strd	r7, r1, [r5]
 8000422:	2600      	movs	r6, #0
 8000424:	4631      	mov	r1, r6
 8000426:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800042a:	f1c2 0320 	rsb	r3, r2, #32
 800042e:	40d8      	lsrs	r0, r3
 8000430:	fa0c fc02 	lsl.w	ip, ip, r2
 8000434:	fa21 f303 	lsr.w	r3, r1, r3
 8000438:	4091      	lsls	r1, r2
 800043a:	4301      	orrs	r1, r0
 800043c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000440:	fa1f fe8c 	uxth.w	lr, ip
 8000444:	fbb3 f0f7 	udiv	r0, r3, r7
 8000448:	fb07 3610 	mls	r6, r7, r0, r3
 800044c:	0c0b      	lsrs	r3, r1, #16
 800044e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000452:	fb00 f60e 	mul.w	r6, r0, lr
 8000456:	429e      	cmp	r6, r3
 8000458:	fa04 f402 	lsl.w	r4, r4, r2
 800045c:	d908      	bls.n	8000470 <__udivmoddi4+0x260>
 800045e:	eb1c 0303 	adds.w	r3, ip, r3
 8000462:	f100 38ff 	add.w	r8, r0, #4294967295
 8000466:	d22f      	bcs.n	80004c8 <__udivmoddi4+0x2b8>
 8000468:	429e      	cmp	r6, r3
 800046a:	d92d      	bls.n	80004c8 <__udivmoddi4+0x2b8>
 800046c:	3802      	subs	r0, #2
 800046e:	4463      	add	r3, ip
 8000470:	1b9b      	subs	r3, r3, r6
 8000472:	b289      	uxth	r1, r1
 8000474:	fbb3 f6f7 	udiv	r6, r3, r7
 8000478:	fb07 3316 	mls	r3, r7, r6, r3
 800047c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000480:	fb06 f30e 	mul.w	r3, r6, lr
 8000484:	428b      	cmp	r3, r1
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x28a>
 8000488:	eb1c 0101 	adds.w	r1, ip, r1
 800048c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000490:	d216      	bcs.n	80004c0 <__udivmoddi4+0x2b0>
 8000492:	428b      	cmp	r3, r1
 8000494:	d914      	bls.n	80004c0 <__udivmoddi4+0x2b0>
 8000496:	3e02      	subs	r6, #2
 8000498:	4461      	add	r1, ip
 800049a:	1ac9      	subs	r1, r1, r3
 800049c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004a0:	e738      	b.n	8000314 <__udivmoddi4+0x104>
 80004a2:	462e      	mov	r6, r5
 80004a4:	4628      	mov	r0, r5
 80004a6:	e705      	b.n	80002b4 <__udivmoddi4+0xa4>
 80004a8:	4606      	mov	r6, r0
 80004aa:	e6e3      	b.n	8000274 <__udivmoddi4+0x64>
 80004ac:	4618      	mov	r0, r3
 80004ae:	e6f8      	b.n	80002a2 <__udivmoddi4+0x92>
 80004b0:	454b      	cmp	r3, r9
 80004b2:	d2a9      	bcs.n	8000408 <__udivmoddi4+0x1f8>
 80004b4:	ebb9 0802 	subs.w	r8, r9, r2
 80004b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004bc:	3801      	subs	r0, #1
 80004be:	e7a3      	b.n	8000408 <__udivmoddi4+0x1f8>
 80004c0:	4646      	mov	r6, r8
 80004c2:	e7ea      	b.n	800049a <__udivmoddi4+0x28a>
 80004c4:	4620      	mov	r0, r4
 80004c6:	e794      	b.n	80003f2 <__udivmoddi4+0x1e2>
 80004c8:	4640      	mov	r0, r8
 80004ca:	e7d1      	b.n	8000470 <__udivmoddi4+0x260>
 80004cc:	46d0      	mov	r8, sl
 80004ce:	e77b      	b.n	80003c8 <__udivmoddi4+0x1b8>
 80004d0:	3b02      	subs	r3, #2
 80004d2:	4461      	add	r1, ip
 80004d4:	e732      	b.n	800033c <__udivmoddi4+0x12c>
 80004d6:	4630      	mov	r0, r6
 80004d8:	e709      	b.n	80002ee <__udivmoddi4+0xde>
 80004da:	4464      	add	r4, ip
 80004dc:	3802      	subs	r0, #2
 80004de:	e742      	b.n	8000366 <__udivmoddi4+0x156>

080004e0 <__aeabi_idiv0>:
 80004e0:	4770      	bx	lr
 80004e2:	bf00      	nop

080004e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004e8:	f000 fb46 	bl	8000b78 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004ec:	f000 f846 	bl	800057c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004f0:	f000 f924 	bl	800073c <MX_GPIO_Init>
  MX_TIM2_Init();
 80004f4:	f000 f8a2 	bl	800063c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80004f8:	2100      	movs	r1, #0
 80004fa:	4816      	ldr	r0, [pc, #88]	; (8000554 <main+0x70>)
 80004fc:	f001 fb80 	bl	8001c00 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8000500:	2104      	movs	r1, #4
 8000502:	4814      	ldr	r0, [pc, #80]	; (8000554 <main+0x70>)
 8000504:	f001 fb7c 	bl	8001c00 <HAL_TIM_PWM_Start>
  TIM2->CCR1 = 60;
 8000508:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800050c:	223c      	movs	r2, #60	; 0x3c
 800050e:	635a      	str	r2, [r3, #52]	; 0x34
  TIM2->CCR2 = 60;
 8000510:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000514:	223c      	movs	r2, #60	; 0x3c
 8000516:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000518:	f002 fa6e 	bl	80029f8 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Servo01 */
  Servo01Handle = osThreadNew(StartServo01, NULL, &Servo01_attributes);
 800051c:	4a0e      	ldr	r2, [pc, #56]	; (8000558 <main+0x74>)
 800051e:	2100      	movs	r1, #0
 8000520:	480e      	ldr	r0, [pc, #56]	; (800055c <main+0x78>)
 8000522:	f002 fab3 	bl	8002a8c <osThreadNew>
 8000526:	4603      	mov	r3, r0
 8000528:	4a0d      	ldr	r2, [pc, #52]	; (8000560 <main+0x7c>)
 800052a:	6013      	str	r3, [r2, #0]

  /* creation of Servo02 */
  Servo02Handle = osThreadNew(StartServo02, NULL, &Servo02_attributes);
 800052c:	4a0d      	ldr	r2, [pc, #52]	; (8000564 <main+0x80>)
 800052e:	2100      	movs	r1, #0
 8000530:	480d      	ldr	r0, [pc, #52]	; (8000568 <main+0x84>)
 8000532:	f002 faab 	bl	8002a8c <osThreadNew>
 8000536:	4603      	mov	r3, r0
 8000538:	4a0c      	ldr	r2, [pc, #48]	; (800056c <main+0x88>)
 800053a:	6013      	str	r3, [r2, #0]

  /* creation of StopServos */
  StopServosHandle = osThreadNew(StartStopServos, NULL, &StopServos_attributes);
 800053c:	4a0c      	ldr	r2, [pc, #48]	; (8000570 <main+0x8c>)
 800053e:	2100      	movs	r1, #0
 8000540:	480c      	ldr	r0, [pc, #48]	; (8000574 <main+0x90>)
 8000542:	f002 faa3 	bl	8002a8c <osThreadNew>
 8000546:	4603      	mov	r3, r0
 8000548:	4a0b      	ldr	r2, [pc, #44]	; (8000578 <main+0x94>)
 800054a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800054c:	f002 fa78 	bl	8002a40 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000550:	e7fe      	b.n	8000550 <main+0x6c>
 8000552:	bf00      	nop
 8000554:	20000090 	.word	0x20000090
 8000558:	08005734 	.word	0x08005734
 800055c:	08000805 	.word	0x08000805
 8000560:	200000d8 	.word	0x200000d8
 8000564:	08005758 	.word	0x08005758
 8000568:	08000829 	.word	0x08000829
 800056c:	200000dc 	.word	0x200000dc
 8000570:	0800577c 	.word	0x0800577c
 8000574:	08000859 	.word	0x08000859
 8000578:	200000e0 	.word	0x200000e0

0800057c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b094      	sub	sp, #80	; 0x50
 8000580:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000582:	f107 0320 	add.w	r3, r7, #32
 8000586:	2230      	movs	r2, #48	; 0x30
 8000588:	2100      	movs	r1, #0
 800058a:	4618      	mov	r0, r3
 800058c:	f004 ffe2 	bl	8005554 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000590:	f107 030c 	add.w	r3, r7, #12
 8000594:	2200      	movs	r2, #0
 8000596:	601a      	str	r2, [r3, #0]
 8000598:	605a      	str	r2, [r3, #4]
 800059a:	609a      	str	r2, [r3, #8]
 800059c:	60da      	str	r2, [r3, #12]
 800059e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005a0:	2300      	movs	r3, #0
 80005a2:	60bb      	str	r3, [r7, #8]
 80005a4:	4b23      	ldr	r3, [pc, #140]	; (8000634 <SystemClock_Config+0xb8>)
 80005a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005a8:	4a22      	ldr	r2, [pc, #136]	; (8000634 <SystemClock_Config+0xb8>)
 80005aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005ae:	6413      	str	r3, [r2, #64]	; 0x40
 80005b0:	4b20      	ldr	r3, [pc, #128]	; (8000634 <SystemClock_Config+0xb8>)
 80005b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005b8:	60bb      	str	r3, [r7, #8]
 80005ba:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80005bc:	2300      	movs	r3, #0
 80005be:	607b      	str	r3, [r7, #4]
 80005c0:	4b1d      	ldr	r3, [pc, #116]	; (8000638 <SystemClock_Config+0xbc>)
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80005c8:	4a1b      	ldr	r2, [pc, #108]	; (8000638 <SystemClock_Config+0xbc>)
 80005ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80005ce:	6013      	str	r3, [r2, #0]
 80005d0:	4b19      	ldr	r3, [pc, #100]	; (8000638 <SystemClock_Config+0xbc>)
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005d8:	607b      	str	r3, [r7, #4]
 80005da:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005dc:	2302      	movs	r3, #2
 80005de:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005e0:	2301      	movs	r3, #1
 80005e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005e4:	2310      	movs	r3, #16
 80005e6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80005e8:	2300      	movs	r3, #0
 80005ea:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005ec:	f107 0320 	add.w	r3, r7, #32
 80005f0:	4618      	mov	r0, r3
 80005f2:	f000 fd83 	bl	80010fc <HAL_RCC_OscConfig>
 80005f6:	4603      	mov	r3, r0
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d001      	beq.n	8000600 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80005fc:	f000 f95a 	bl	80008b4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000600:	230f      	movs	r3, #15
 8000602:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000604:	2300      	movs	r3, #0
 8000606:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000608:	2300      	movs	r3, #0
 800060a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800060c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000610:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000612:	2300      	movs	r3, #0
 8000614:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000616:	f107 030c 	add.w	r3, r7, #12
 800061a:	2100      	movs	r1, #0
 800061c:	4618      	mov	r0, r3
 800061e:	f000 ffe5 	bl	80015ec <HAL_RCC_ClockConfig>
 8000622:	4603      	mov	r3, r0
 8000624:	2b00      	cmp	r3, #0
 8000626:	d001      	beq.n	800062c <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8000628:	f000 f944 	bl	80008b4 <Error_Handler>
  }
}
 800062c:	bf00      	nop
 800062e:	3750      	adds	r7, #80	; 0x50
 8000630:	46bd      	mov	sp, r7
 8000632:	bd80      	pop	{r7, pc}
 8000634:	40023800 	.word	0x40023800
 8000638:	40007000 	.word	0x40007000

0800063c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b08e      	sub	sp, #56	; 0x38
 8000640:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000642:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000646:	2200      	movs	r2, #0
 8000648:	601a      	str	r2, [r3, #0]
 800064a:	605a      	str	r2, [r3, #4]
 800064c:	609a      	str	r2, [r3, #8]
 800064e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000650:	f107 0320 	add.w	r3, r7, #32
 8000654:	2200      	movs	r2, #0
 8000656:	601a      	str	r2, [r3, #0]
 8000658:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800065a:	1d3b      	adds	r3, r7, #4
 800065c:	2200      	movs	r2, #0
 800065e:	601a      	str	r2, [r3, #0]
 8000660:	605a      	str	r2, [r3, #4]
 8000662:	609a      	str	r2, [r3, #8]
 8000664:	60da      	str	r2, [r3, #12]
 8000666:	611a      	str	r2, [r3, #16]
 8000668:	615a      	str	r2, [r3, #20]
 800066a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800066c:	4b32      	ldr	r3, [pc, #200]	; (8000738 <MX_TIM2_Init+0xfc>)
 800066e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000672:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 64;
 8000674:	4b30      	ldr	r3, [pc, #192]	; (8000738 <MX_TIM2_Init+0xfc>)
 8000676:	2240      	movs	r2, #64	; 0x40
 8000678:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800067a:	4b2f      	ldr	r3, [pc, #188]	; (8000738 <MX_TIM2_Init+0xfc>)
 800067c:	2200      	movs	r2, #0
 800067e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2499;
 8000680:	4b2d      	ldr	r3, [pc, #180]	; (8000738 <MX_TIM2_Init+0xfc>)
 8000682:	f640 12c3 	movw	r2, #2499	; 0x9c3
 8000686:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000688:	4b2b      	ldr	r3, [pc, #172]	; (8000738 <MX_TIM2_Init+0xfc>)
 800068a:	2200      	movs	r2, #0
 800068c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800068e:	4b2a      	ldr	r3, [pc, #168]	; (8000738 <MX_TIM2_Init+0xfc>)
 8000690:	2200      	movs	r2, #0
 8000692:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000694:	4828      	ldr	r0, [pc, #160]	; (8000738 <MX_TIM2_Init+0xfc>)
 8000696:	f001 f9a7 	bl	80019e8 <HAL_TIM_Base_Init>
 800069a:	4603      	mov	r3, r0
 800069c:	2b00      	cmp	r3, #0
 800069e:	d001      	beq.n	80006a4 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80006a0:	f000 f908 	bl	80008b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80006a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006a8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80006aa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80006ae:	4619      	mov	r1, r3
 80006b0:	4821      	ldr	r0, [pc, #132]	; (8000738 <MX_TIM2_Init+0xfc>)
 80006b2:	f001 fd1f 	bl	80020f4 <HAL_TIM_ConfigClockSource>
 80006b6:	4603      	mov	r3, r0
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d001      	beq.n	80006c0 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80006bc:	f000 f8fa 	bl	80008b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80006c0:	481d      	ldr	r0, [pc, #116]	; (8000738 <MX_TIM2_Init+0xfc>)
 80006c2:	f001 fa43 	bl	8001b4c <HAL_TIM_PWM_Init>
 80006c6:	4603      	mov	r3, r0
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d001      	beq.n	80006d0 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80006cc:	f000 f8f2 	bl	80008b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006d0:	2300      	movs	r3, #0
 80006d2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006d4:	2300      	movs	r3, #0
 80006d6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80006d8:	f107 0320 	add.w	r3, r7, #32
 80006dc:	4619      	mov	r1, r3
 80006de:	4816      	ldr	r0, [pc, #88]	; (8000738 <MX_TIM2_Init+0xfc>)
 80006e0:	f002 f8c4 	bl	800286c <HAL_TIMEx_MasterConfigSynchronization>
 80006e4:	4603      	mov	r3, r0
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d001      	beq.n	80006ee <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 80006ea:	f000 f8e3 	bl	80008b4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80006ee:	2360      	movs	r3, #96	; 0x60
 80006f0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80006f2:	2300      	movs	r3, #0
 80006f4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80006f6:	2300      	movs	r3, #0
 80006f8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80006fa:	2300      	movs	r3, #0
 80006fc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80006fe:	1d3b      	adds	r3, r7, #4
 8000700:	2200      	movs	r2, #0
 8000702:	4619      	mov	r1, r3
 8000704:	480c      	ldr	r0, [pc, #48]	; (8000738 <MX_TIM2_Init+0xfc>)
 8000706:	f001 fc33 	bl	8001f70 <HAL_TIM_PWM_ConfigChannel>
 800070a:	4603      	mov	r3, r0
 800070c:	2b00      	cmp	r3, #0
 800070e:	d001      	beq.n	8000714 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8000710:	f000 f8d0 	bl	80008b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000714:	1d3b      	adds	r3, r7, #4
 8000716:	2204      	movs	r2, #4
 8000718:	4619      	mov	r1, r3
 800071a:	4807      	ldr	r0, [pc, #28]	; (8000738 <MX_TIM2_Init+0xfc>)
 800071c:	f001 fc28 	bl	8001f70 <HAL_TIM_PWM_ConfigChannel>
 8000720:	4603      	mov	r3, r0
 8000722:	2b00      	cmp	r3, #0
 8000724:	d001      	beq.n	800072a <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 8000726:	f000 f8c5 	bl	80008b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800072a:	4803      	ldr	r0, [pc, #12]	; (8000738 <MX_TIM2_Init+0xfc>)
 800072c:	f000 f914 	bl	8000958 <HAL_TIM_MspPostInit>

}
 8000730:	bf00      	nop
 8000732:	3738      	adds	r7, #56	; 0x38
 8000734:	46bd      	mov	sp, r7
 8000736:	bd80      	pop	{r7, pc}
 8000738:	20000090 	.word	0x20000090

0800073c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b088      	sub	sp, #32
 8000740:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000742:	f107 030c 	add.w	r3, r7, #12
 8000746:	2200      	movs	r2, #0
 8000748:	601a      	str	r2, [r3, #0]
 800074a:	605a      	str	r2, [r3, #4]
 800074c:	609a      	str	r2, [r3, #8]
 800074e:	60da      	str	r2, [r3, #12]
 8000750:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000752:	2300      	movs	r3, #0
 8000754:	60bb      	str	r3, [r7, #8]
 8000756:	4b19      	ldr	r3, [pc, #100]	; (80007bc <MX_GPIO_Init+0x80>)
 8000758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075a:	4a18      	ldr	r2, [pc, #96]	; (80007bc <MX_GPIO_Init+0x80>)
 800075c:	f043 0304 	orr.w	r3, r3, #4
 8000760:	6313      	str	r3, [r2, #48]	; 0x30
 8000762:	4b16      	ldr	r3, [pc, #88]	; (80007bc <MX_GPIO_Init+0x80>)
 8000764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000766:	f003 0304 	and.w	r3, r3, #4
 800076a:	60bb      	str	r3, [r7, #8]
 800076c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800076e:	2300      	movs	r3, #0
 8000770:	607b      	str	r3, [r7, #4]
 8000772:	4b12      	ldr	r3, [pc, #72]	; (80007bc <MX_GPIO_Init+0x80>)
 8000774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000776:	4a11      	ldr	r2, [pc, #68]	; (80007bc <MX_GPIO_Init+0x80>)
 8000778:	f043 0301 	orr.w	r3, r3, #1
 800077c:	6313      	str	r3, [r2, #48]	; 0x30
 800077e:	4b0f      	ldr	r3, [pc, #60]	; (80007bc <MX_GPIO_Init+0x80>)
 8000780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000782:	f003 0301 	and.w	r3, r3, #1
 8000786:	607b      	str	r3, [r7, #4]
 8000788:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800078a:	2200      	movs	r2, #0
 800078c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000790:	480b      	ldr	r0, [pc, #44]	; (80007c0 <MX_GPIO_Init+0x84>)
 8000792:	f000 fc99 	bl	80010c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000796:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800079a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800079c:	2301      	movs	r3, #1
 800079e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a0:	2300      	movs	r3, #0
 80007a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007a4:	2300      	movs	r3, #0
 80007a6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80007a8:	f107 030c 	add.w	r3, r7, #12
 80007ac:	4619      	mov	r1, r3
 80007ae:	4804      	ldr	r0, [pc, #16]	; (80007c0 <MX_GPIO_Init+0x84>)
 80007b0:	f000 fb06 	bl	8000dc0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007b4:	bf00      	nop
 80007b6:	3720      	adds	r7, #32
 80007b8:	46bd      	mov	sp, r7
 80007ba:	bd80      	pop	{r7, pc}
 80007bc:	40023800 	.word	0x40023800
 80007c0:	40020800 	.word	0x40020800

080007c4 <move_servo_fw>:
	}
	else if(n == 2){
		TIM2->CCR2 = pwm;
	}
}
void move_servo_fw(int n){
 80007c4:	b480      	push	{r7}
 80007c6:	b083      	sub	sp, #12
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
	if (n == 1){
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	2b01      	cmp	r3, #1
 80007d0:	d107      	bne.n	80007e2 <move_servo_fw+0x1e>
		TIM2->CCR1 += 1;
 80007d2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80007d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80007d8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80007dc:	3301      	adds	r3, #1
 80007de:	6353      	str	r3, [r2, #52]	; 0x34
	}
	else if(n == 2){
		TIM2->CCR2 += 1;
	}
}
 80007e0:	e009      	b.n	80007f6 <move_servo_fw+0x32>
	else if(n == 2){
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	2b02      	cmp	r3, #2
 80007e6:	d106      	bne.n	80007f6 <move_servo_fw+0x32>
		TIM2->CCR2 += 1;
 80007e8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80007ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80007ee:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80007f2:	3301      	adds	r3, #1
 80007f4:	6393      	str	r3, [r2, #56]	; 0x38
}
 80007f6:	bf00      	nop
 80007f8:	370c      	adds	r7, #12
 80007fa:	46bd      	mov	sp, r7
 80007fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000800:	4770      	bx	lr
	...

08000804 <StartServo01>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartServo01 */
void StartServo01(void *argument)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b082      	sub	sp, #8
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  if (servo_1_stop == 0){
 800080c:	4b05      	ldr	r3, [pc, #20]	; (8000824 <StartServo01+0x20>)
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	2b00      	cmp	r3, #0
 8000812:	d102      	bne.n	800081a <StartServo01+0x16>
		  move_servo_fw(1);
 8000814:	2001      	movs	r0, #1
 8000816:	f7ff ffd5 	bl	80007c4 <move_servo_fw>
	  }
	  osDelay(100);
 800081a:	2064      	movs	r0, #100	; 0x64
 800081c:	f002 f9c8 	bl	8002bb0 <osDelay>
	  if (servo_1_stop == 0){
 8000820:	e7f4      	b.n	800080c <StartServo01+0x8>
 8000822:	bf00      	nop
 8000824:	200000e4 	.word	0x200000e4

08000828 <StartServo02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartServo02 */
void StartServo02(void *argument)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b082      	sub	sp, #8
 800082c:	af00      	add	r7, sp, #0
 800082e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartServo02 */
  /* Infinite loop */
  for(;;)
  {
	  if (servo_1_stop != 0 && servo_2_stop == 0){
 8000830:	4b07      	ldr	r3, [pc, #28]	; (8000850 <StartServo02+0x28>)
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	2b00      	cmp	r3, #0
 8000836:	d006      	beq.n	8000846 <StartServo02+0x1e>
 8000838:	4b06      	ldr	r3, [pc, #24]	; (8000854 <StartServo02+0x2c>)
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	2b00      	cmp	r3, #0
 800083e:	d102      	bne.n	8000846 <StartServo02+0x1e>
		  move_servo_fw(2);
 8000840:	2002      	movs	r0, #2
 8000842:	f7ff ffbf 	bl	80007c4 <move_servo_fw>
	  }
	  osDelay(100);
 8000846:	2064      	movs	r0, #100	; 0x64
 8000848:	f002 f9b2 	bl	8002bb0 <osDelay>
	  if (servo_1_stop != 0 && servo_2_stop == 0){
 800084c:	e7f0      	b.n	8000830 <StartServo02+0x8>
 800084e:	bf00      	nop
 8000850:	200000e4 	.word	0x200000e4
 8000854:	200000e8 	.word	0x200000e8

08000858 <StartStopServos>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartStopServos */
void StartStopServos(void *argument)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b082      	sub	sp, #8
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartStopServos */
  /* Infinite loop */
  for(;;)
  {
	  if(TIM2->CCR1 > 200){
 8000860:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000864:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000866:	2bc8      	cmp	r3, #200	; 0xc8
 8000868:	d902      	bls.n	8000870 <StartStopServos+0x18>
		  servo_1_stop = 1;
 800086a:	4b07      	ldr	r3, [pc, #28]	; (8000888 <StartStopServos+0x30>)
 800086c:	2201      	movs	r2, #1
 800086e:	601a      	str	r2, [r3, #0]
	  }
	  if(TIM2->CCR2 > 180){
 8000870:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000874:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000876:	2bb4      	cmp	r3, #180	; 0xb4
 8000878:	d902      	bls.n	8000880 <StartStopServos+0x28>
	  		servo_2_stop = 1;
 800087a:	4b04      	ldr	r3, [pc, #16]	; (800088c <StartStopServos+0x34>)
 800087c:	2201      	movs	r2, #1
 800087e:	601a      	str	r2, [r3, #0]
	  }
	  osDelay(100);
 8000880:	2064      	movs	r0, #100	; 0x64
 8000882:	f002 f995 	bl	8002bb0 <osDelay>
	  if(TIM2->CCR1 > 200){
 8000886:	e7eb      	b.n	8000860 <StartStopServos+0x8>
 8000888:	200000e4 	.word	0x200000e4
 800088c:	200000e8 	.word	0x200000e8

08000890 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b082      	sub	sp, #8
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5) {
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	4a04      	ldr	r2, [pc, #16]	; (80008b0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800089e:	4293      	cmp	r3, r2
 80008a0:	d101      	bne.n	80008a6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80008a2:	f000 f98b 	bl	8000bbc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80008a6:	bf00      	nop
 80008a8:	3708      	adds	r7, #8
 80008aa:	46bd      	mov	sp, r7
 80008ac:	bd80      	pop	{r7, pc}
 80008ae:	bf00      	nop
 80008b0:	40000c00 	.word	0x40000c00

080008b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008b4:	b480      	push	{r7}
 80008b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008b8:	b672      	cpsid	i
}
 80008ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008bc:	e7fe      	b.n	80008bc <Error_Handler+0x8>
	...

080008c0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b082      	sub	sp, #8
 80008c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008c6:	2300      	movs	r3, #0
 80008c8:	607b      	str	r3, [r7, #4]
 80008ca:	4b12      	ldr	r3, [pc, #72]	; (8000914 <HAL_MspInit+0x54>)
 80008cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008ce:	4a11      	ldr	r2, [pc, #68]	; (8000914 <HAL_MspInit+0x54>)
 80008d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008d4:	6453      	str	r3, [r2, #68]	; 0x44
 80008d6:	4b0f      	ldr	r3, [pc, #60]	; (8000914 <HAL_MspInit+0x54>)
 80008d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008de:	607b      	str	r3, [r7, #4]
 80008e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008e2:	2300      	movs	r3, #0
 80008e4:	603b      	str	r3, [r7, #0]
 80008e6:	4b0b      	ldr	r3, [pc, #44]	; (8000914 <HAL_MspInit+0x54>)
 80008e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008ea:	4a0a      	ldr	r2, [pc, #40]	; (8000914 <HAL_MspInit+0x54>)
 80008ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008f0:	6413      	str	r3, [r2, #64]	; 0x40
 80008f2:	4b08      	ldr	r3, [pc, #32]	; (8000914 <HAL_MspInit+0x54>)
 80008f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008fa:	603b      	str	r3, [r7, #0]
 80008fc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80008fe:	2200      	movs	r2, #0
 8000900:	210f      	movs	r1, #15
 8000902:	f06f 0001 	mvn.w	r0, #1
 8000906:	f000 fa31 	bl	8000d6c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800090a:	bf00      	nop
 800090c:	3708      	adds	r7, #8
 800090e:	46bd      	mov	sp, r7
 8000910:	bd80      	pop	{r7, pc}
 8000912:	bf00      	nop
 8000914:	40023800 	.word	0x40023800

08000918 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000918:	b480      	push	{r7}
 800091a:	b085      	sub	sp, #20
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000928:	d10d      	bne.n	8000946 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800092a:	2300      	movs	r3, #0
 800092c:	60fb      	str	r3, [r7, #12]
 800092e:	4b09      	ldr	r3, [pc, #36]	; (8000954 <HAL_TIM_Base_MspInit+0x3c>)
 8000930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000932:	4a08      	ldr	r2, [pc, #32]	; (8000954 <HAL_TIM_Base_MspInit+0x3c>)
 8000934:	f043 0301 	orr.w	r3, r3, #1
 8000938:	6413      	str	r3, [r2, #64]	; 0x40
 800093a:	4b06      	ldr	r3, [pc, #24]	; (8000954 <HAL_TIM_Base_MspInit+0x3c>)
 800093c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800093e:	f003 0301 	and.w	r3, r3, #1
 8000942:	60fb      	str	r3, [r7, #12]
 8000944:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000946:	bf00      	nop
 8000948:	3714      	adds	r7, #20
 800094a:	46bd      	mov	sp, r7
 800094c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000950:	4770      	bx	lr
 8000952:	bf00      	nop
 8000954:	40023800 	.word	0x40023800

08000958 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b088      	sub	sp, #32
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000960:	f107 030c 	add.w	r3, r7, #12
 8000964:	2200      	movs	r2, #0
 8000966:	601a      	str	r2, [r3, #0]
 8000968:	605a      	str	r2, [r3, #4]
 800096a:	609a      	str	r2, [r3, #8]
 800096c:	60da      	str	r2, [r3, #12]
 800096e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000978:	d11d      	bne.n	80009b6 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800097a:	2300      	movs	r3, #0
 800097c:	60bb      	str	r3, [r7, #8]
 800097e:	4b10      	ldr	r3, [pc, #64]	; (80009c0 <HAL_TIM_MspPostInit+0x68>)
 8000980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000982:	4a0f      	ldr	r2, [pc, #60]	; (80009c0 <HAL_TIM_MspPostInit+0x68>)
 8000984:	f043 0301 	orr.w	r3, r3, #1
 8000988:	6313      	str	r3, [r2, #48]	; 0x30
 800098a:	4b0d      	ldr	r3, [pc, #52]	; (80009c0 <HAL_TIM_MspPostInit+0x68>)
 800098c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800098e:	f003 0301 	and.w	r3, r3, #1
 8000992:	60bb      	str	r3, [r7, #8]
 8000994:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000996:	2303      	movs	r3, #3
 8000998:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800099a:	2302      	movs	r3, #2
 800099c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099e:	2300      	movs	r3, #0
 80009a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009a2:	2300      	movs	r3, #0
 80009a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80009a6:	2301      	movs	r3, #1
 80009a8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009aa:	f107 030c 	add.w	r3, r7, #12
 80009ae:	4619      	mov	r1, r3
 80009b0:	4804      	ldr	r0, [pc, #16]	; (80009c4 <HAL_TIM_MspPostInit+0x6c>)
 80009b2:	f000 fa05 	bl	8000dc0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80009b6:	bf00      	nop
 80009b8:	3720      	adds	r7, #32
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bd80      	pop	{r7, pc}
 80009be:	bf00      	nop
 80009c0:	40023800 	.word	0x40023800
 80009c4:	40020000 	.word	0x40020000

080009c8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b08e      	sub	sp, #56	; 0x38
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80009d0:	2300      	movs	r3, #0
 80009d2:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80009d4:	2300      	movs	r3, #0
 80009d6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 80009d8:	2300      	movs	r3, #0
 80009da:	60fb      	str	r3, [r7, #12]
 80009dc:	4b33      	ldr	r3, [pc, #204]	; (8000aac <HAL_InitTick+0xe4>)
 80009de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009e0:	4a32      	ldr	r2, [pc, #200]	; (8000aac <HAL_InitTick+0xe4>)
 80009e2:	f043 0308 	orr.w	r3, r3, #8
 80009e6:	6413      	str	r3, [r2, #64]	; 0x40
 80009e8:	4b30      	ldr	r3, [pc, #192]	; (8000aac <HAL_InitTick+0xe4>)
 80009ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ec:	f003 0308 	and.w	r3, r3, #8
 80009f0:	60fb      	str	r3, [r7, #12]
 80009f2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80009f4:	f107 0210 	add.w	r2, r7, #16
 80009f8:	f107 0314 	add.w	r3, r7, #20
 80009fc:	4611      	mov	r1, r2
 80009fe:	4618      	mov	r0, r3
 8000a00:	f000 ffc0 	bl	8001984 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000a04:	6a3b      	ldr	r3, [r7, #32]
 8000a06:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM5 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000a08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d103      	bne.n	8000a16 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000a0e:	f000 ffa5 	bl	800195c <HAL_RCC_GetPCLK1Freq>
 8000a12:	6378      	str	r0, [r7, #52]	; 0x34
 8000a14:	e004      	b.n	8000a20 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000a16:	f000 ffa1 	bl	800195c <HAL_RCC_GetPCLK1Freq>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	005b      	lsls	r3, r3, #1
 8000a1e:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000a20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a22:	4a23      	ldr	r2, [pc, #140]	; (8000ab0 <HAL_InitTick+0xe8>)
 8000a24:	fba2 2303 	umull	r2, r3, r2, r3
 8000a28:	0c9b      	lsrs	r3, r3, #18
 8000a2a:	3b01      	subs	r3, #1
 8000a2c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 8000a2e:	4b21      	ldr	r3, [pc, #132]	; (8000ab4 <HAL_InitTick+0xec>)
 8000a30:	4a21      	ldr	r2, [pc, #132]	; (8000ab8 <HAL_InitTick+0xf0>)
 8000a32:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000U / 1000U) - 1U;
 8000a34:	4b1f      	ldr	r3, [pc, #124]	; (8000ab4 <HAL_InitTick+0xec>)
 8000a36:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000a3a:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 8000a3c:	4a1d      	ldr	r2, [pc, #116]	; (8000ab4 <HAL_InitTick+0xec>)
 8000a3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a40:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 8000a42:	4b1c      	ldr	r3, [pc, #112]	; (8000ab4 <HAL_InitTick+0xec>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a48:	4b1a      	ldr	r3, [pc, #104]	; (8000ab4 <HAL_InitTick+0xec>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	609a      	str	r2, [r3, #8]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a4e:	4b19      	ldr	r3, [pc, #100]	; (8000ab4 <HAL_InitTick+0xec>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim5);
 8000a54:	4817      	ldr	r0, [pc, #92]	; (8000ab4 <HAL_InitTick+0xec>)
 8000a56:	f000 ffc7 	bl	80019e8 <HAL_TIM_Base_Init>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000a60:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d11b      	bne.n	8000aa0 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim5);
 8000a68:	4812      	ldr	r0, [pc, #72]	; (8000ab4 <HAL_InitTick+0xec>)
 8000a6a:	f001 f80d 	bl	8001a88 <HAL_TIM_Base_Start_IT>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000a74:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d111      	bne.n	8000aa0 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM5 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8000a7c:	2032      	movs	r0, #50	; 0x32
 8000a7e:	f000 f991 	bl	8000da4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	2b0f      	cmp	r3, #15
 8000a86:	d808      	bhi.n	8000a9a <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority, 0U);
 8000a88:	2200      	movs	r2, #0
 8000a8a:	6879      	ldr	r1, [r7, #4]
 8000a8c:	2032      	movs	r0, #50	; 0x32
 8000a8e:	f000 f96d 	bl	8000d6c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a92:	4a0a      	ldr	r2, [pc, #40]	; (8000abc <HAL_InitTick+0xf4>)
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	6013      	str	r3, [r2, #0]
 8000a98:	e002      	b.n	8000aa0 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000a9a:	2301      	movs	r3, #1
 8000a9c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000aa0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	3738      	adds	r7, #56	; 0x38
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	bd80      	pop	{r7, pc}
 8000aac:	40023800 	.word	0x40023800
 8000ab0:	431bde83 	.word	0x431bde83
 8000ab4:	200000ec 	.word	0x200000ec
 8000ab8:	40000c00 	.word	0x40000c00
 8000abc:	20000004 	.word	0x20000004

08000ac0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ac4:	e7fe      	b.n	8000ac4 <NMI_Handler+0x4>

08000ac6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ac6:	b480      	push	{r7}
 8000ac8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000aca:	e7fe      	b.n	8000aca <HardFault_Handler+0x4>

08000acc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000acc:	b480      	push	{r7}
 8000ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ad0:	e7fe      	b.n	8000ad0 <MemManage_Handler+0x4>

08000ad2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ad2:	b480      	push	{r7}
 8000ad4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ad6:	e7fe      	b.n	8000ad6 <BusFault_Handler+0x4>

08000ad8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000adc:	e7fe      	b.n	8000adc <UsageFault_Handler+0x4>

08000ade <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ade:	b480      	push	{r7}
 8000ae0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ae2:	bf00      	nop
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aea:	4770      	bx	lr

08000aec <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8000af0:	4802      	ldr	r0, [pc, #8]	; (8000afc <TIM5_IRQHandler+0x10>)
 8000af2:	f001 f935 	bl	8001d60 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8000af6:	bf00      	nop
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	bf00      	nop
 8000afc:	200000ec 	.word	0x200000ec

08000b00 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b00:	b480      	push	{r7}
 8000b02:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b04:	4b06      	ldr	r3, [pc, #24]	; (8000b20 <SystemInit+0x20>)
 8000b06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b0a:	4a05      	ldr	r2, [pc, #20]	; (8000b20 <SystemInit+0x20>)
 8000b0c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b10:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b14:	bf00      	nop
 8000b16:	46bd      	mov	sp, r7
 8000b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1c:	4770      	bx	lr
 8000b1e:	bf00      	nop
 8000b20:	e000ed00 	.word	0xe000ed00

08000b24 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000b24:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b5c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b28:	480d      	ldr	r0, [pc, #52]	; (8000b60 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000b2a:	490e      	ldr	r1, [pc, #56]	; (8000b64 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000b2c:	4a0e      	ldr	r2, [pc, #56]	; (8000b68 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000b2e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b30:	e002      	b.n	8000b38 <LoopCopyDataInit>

08000b32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b36:	3304      	adds	r3, #4

08000b38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b3c:	d3f9      	bcc.n	8000b32 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b3e:	4a0b      	ldr	r2, [pc, #44]	; (8000b6c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000b40:	4c0b      	ldr	r4, [pc, #44]	; (8000b70 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000b42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b44:	e001      	b.n	8000b4a <LoopFillZerobss>

08000b46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b48:	3204      	adds	r2, #4

08000b4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b4c:	d3fb      	bcc.n	8000b46 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000b4e:	f7ff ffd7 	bl	8000b00 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b52:	f004 fccb 	bl	80054ec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b56:	f7ff fcc5 	bl	80004e4 <main>
  bx  lr    
 8000b5a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000b5c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000b60:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b64:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000b68:	08005828 	.word	0x08005828
  ldr r2, =_sbss
 8000b6c:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000b70:	20004b50 	.word	0x20004b50

08000b74 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b74:	e7fe      	b.n	8000b74 <ADC_IRQHandler>
	...

08000b78 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b7c:	4b0e      	ldr	r3, [pc, #56]	; (8000bb8 <HAL_Init+0x40>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	4a0d      	ldr	r2, [pc, #52]	; (8000bb8 <HAL_Init+0x40>)
 8000b82:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b86:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b88:	4b0b      	ldr	r3, [pc, #44]	; (8000bb8 <HAL_Init+0x40>)
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	4a0a      	ldr	r2, [pc, #40]	; (8000bb8 <HAL_Init+0x40>)
 8000b8e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b92:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b94:	4b08      	ldr	r3, [pc, #32]	; (8000bb8 <HAL_Init+0x40>)
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	4a07      	ldr	r2, [pc, #28]	; (8000bb8 <HAL_Init+0x40>)
 8000b9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b9e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ba0:	2003      	movs	r0, #3
 8000ba2:	f000 f8d8 	bl	8000d56 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ba6:	200f      	movs	r0, #15
 8000ba8:	f7ff ff0e 	bl	80009c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000bac:	f7ff fe88 	bl	80008c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000bb0:	2300      	movs	r3, #0
}
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	bd80      	pop	{r7, pc}
 8000bb6:	bf00      	nop
 8000bb8:	40023c00 	.word	0x40023c00

08000bbc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bc0:	4b06      	ldr	r3, [pc, #24]	; (8000bdc <HAL_IncTick+0x20>)
 8000bc2:	781b      	ldrb	r3, [r3, #0]
 8000bc4:	461a      	mov	r2, r3
 8000bc6:	4b06      	ldr	r3, [pc, #24]	; (8000be0 <HAL_IncTick+0x24>)
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	4413      	add	r3, r2
 8000bcc:	4a04      	ldr	r2, [pc, #16]	; (8000be0 <HAL_IncTick+0x24>)
 8000bce:	6013      	str	r3, [r2, #0]
}
 8000bd0:	bf00      	nop
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd8:	4770      	bx	lr
 8000bda:	bf00      	nop
 8000bdc:	20000008 	.word	0x20000008
 8000be0:	20000134 	.word	0x20000134

08000be4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	af00      	add	r7, sp, #0
  return uwTick;
 8000be8:	4b03      	ldr	r3, [pc, #12]	; (8000bf8 <HAL_GetTick+0x14>)
 8000bea:	681b      	ldr	r3, [r3, #0]
}
 8000bec:	4618      	mov	r0, r3
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop
 8000bf8:	20000134 	.word	0x20000134

08000bfc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	b085      	sub	sp, #20
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	f003 0307 	and.w	r3, r3, #7
 8000c0a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c0c:	4b0c      	ldr	r3, [pc, #48]	; (8000c40 <__NVIC_SetPriorityGrouping+0x44>)
 8000c0e:	68db      	ldr	r3, [r3, #12]
 8000c10:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c12:	68ba      	ldr	r2, [r7, #8]
 8000c14:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c18:	4013      	ands	r3, r2
 8000c1a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c1c:	68fb      	ldr	r3, [r7, #12]
 8000c1e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c20:	68bb      	ldr	r3, [r7, #8]
 8000c22:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c24:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c2c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c2e:	4a04      	ldr	r2, [pc, #16]	; (8000c40 <__NVIC_SetPriorityGrouping+0x44>)
 8000c30:	68bb      	ldr	r3, [r7, #8]
 8000c32:	60d3      	str	r3, [r2, #12]
}
 8000c34:	bf00      	nop
 8000c36:	3714      	adds	r7, #20
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3e:	4770      	bx	lr
 8000c40:	e000ed00 	.word	0xe000ed00

08000c44 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c44:	b480      	push	{r7}
 8000c46:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c48:	4b04      	ldr	r3, [pc, #16]	; (8000c5c <__NVIC_GetPriorityGrouping+0x18>)
 8000c4a:	68db      	ldr	r3, [r3, #12]
 8000c4c:	0a1b      	lsrs	r3, r3, #8
 8000c4e:	f003 0307 	and.w	r3, r3, #7
}
 8000c52:	4618      	mov	r0, r3
 8000c54:	46bd      	mov	sp, r7
 8000c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5a:	4770      	bx	lr
 8000c5c:	e000ed00 	.word	0xe000ed00

08000c60 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c60:	b480      	push	{r7}
 8000c62:	b083      	sub	sp, #12
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	4603      	mov	r3, r0
 8000c68:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	db0b      	blt.n	8000c8a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c72:	79fb      	ldrb	r3, [r7, #7]
 8000c74:	f003 021f 	and.w	r2, r3, #31
 8000c78:	4907      	ldr	r1, [pc, #28]	; (8000c98 <__NVIC_EnableIRQ+0x38>)
 8000c7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c7e:	095b      	lsrs	r3, r3, #5
 8000c80:	2001      	movs	r0, #1
 8000c82:	fa00 f202 	lsl.w	r2, r0, r2
 8000c86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c8a:	bf00      	nop
 8000c8c:	370c      	adds	r7, #12
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop
 8000c98:	e000e100 	.word	0xe000e100

08000c9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	b083      	sub	sp, #12
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	6039      	str	r1, [r7, #0]
 8000ca6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ca8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	db0a      	blt.n	8000cc6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cb0:	683b      	ldr	r3, [r7, #0]
 8000cb2:	b2da      	uxtb	r2, r3
 8000cb4:	490c      	ldr	r1, [pc, #48]	; (8000ce8 <__NVIC_SetPriority+0x4c>)
 8000cb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cba:	0112      	lsls	r2, r2, #4
 8000cbc:	b2d2      	uxtb	r2, r2
 8000cbe:	440b      	add	r3, r1
 8000cc0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cc4:	e00a      	b.n	8000cdc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cc6:	683b      	ldr	r3, [r7, #0]
 8000cc8:	b2da      	uxtb	r2, r3
 8000cca:	4908      	ldr	r1, [pc, #32]	; (8000cec <__NVIC_SetPriority+0x50>)
 8000ccc:	79fb      	ldrb	r3, [r7, #7]
 8000cce:	f003 030f 	and.w	r3, r3, #15
 8000cd2:	3b04      	subs	r3, #4
 8000cd4:	0112      	lsls	r2, r2, #4
 8000cd6:	b2d2      	uxtb	r2, r2
 8000cd8:	440b      	add	r3, r1
 8000cda:	761a      	strb	r2, [r3, #24]
}
 8000cdc:	bf00      	nop
 8000cde:	370c      	adds	r7, #12
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce6:	4770      	bx	lr
 8000ce8:	e000e100 	.word	0xe000e100
 8000cec:	e000ed00 	.word	0xe000ed00

08000cf0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	b089      	sub	sp, #36	; 0x24
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	60f8      	str	r0, [r7, #12]
 8000cf8:	60b9      	str	r1, [r7, #8]
 8000cfa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cfc:	68fb      	ldr	r3, [r7, #12]
 8000cfe:	f003 0307 	and.w	r3, r3, #7
 8000d02:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d04:	69fb      	ldr	r3, [r7, #28]
 8000d06:	f1c3 0307 	rsb	r3, r3, #7
 8000d0a:	2b04      	cmp	r3, #4
 8000d0c:	bf28      	it	cs
 8000d0e:	2304      	movcs	r3, #4
 8000d10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d12:	69fb      	ldr	r3, [r7, #28]
 8000d14:	3304      	adds	r3, #4
 8000d16:	2b06      	cmp	r3, #6
 8000d18:	d902      	bls.n	8000d20 <NVIC_EncodePriority+0x30>
 8000d1a:	69fb      	ldr	r3, [r7, #28]
 8000d1c:	3b03      	subs	r3, #3
 8000d1e:	e000      	b.n	8000d22 <NVIC_EncodePriority+0x32>
 8000d20:	2300      	movs	r3, #0
 8000d22:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d24:	f04f 32ff 	mov.w	r2, #4294967295
 8000d28:	69bb      	ldr	r3, [r7, #24]
 8000d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d2e:	43da      	mvns	r2, r3
 8000d30:	68bb      	ldr	r3, [r7, #8]
 8000d32:	401a      	ands	r2, r3
 8000d34:	697b      	ldr	r3, [r7, #20]
 8000d36:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d38:	f04f 31ff 	mov.w	r1, #4294967295
 8000d3c:	697b      	ldr	r3, [r7, #20]
 8000d3e:	fa01 f303 	lsl.w	r3, r1, r3
 8000d42:	43d9      	mvns	r1, r3
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d48:	4313      	orrs	r3, r2
         );
}
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	3724      	adds	r7, #36	; 0x24
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d54:	4770      	bx	lr

08000d56 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d56:	b580      	push	{r7, lr}
 8000d58:	b082      	sub	sp, #8
 8000d5a:	af00      	add	r7, sp, #0
 8000d5c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d5e:	6878      	ldr	r0, [r7, #4]
 8000d60:	f7ff ff4c 	bl	8000bfc <__NVIC_SetPriorityGrouping>
}
 8000d64:	bf00      	nop
 8000d66:	3708      	adds	r7, #8
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bd80      	pop	{r7, pc}

08000d6c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b086      	sub	sp, #24
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	4603      	mov	r3, r0
 8000d74:	60b9      	str	r1, [r7, #8]
 8000d76:	607a      	str	r2, [r7, #4]
 8000d78:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d7e:	f7ff ff61 	bl	8000c44 <__NVIC_GetPriorityGrouping>
 8000d82:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d84:	687a      	ldr	r2, [r7, #4]
 8000d86:	68b9      	ldr	r1, [r7, #8]
 8000d88:	6978      	ldr	r0, [r7, #20]
 8000d8a:	f7ff ffb1 	bl	8000cf0 <NVIC_EncodePriority>
 8000d8e:	4602      	mov	r2, r0
 8000d90:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d94:	4611      	mov	r1, r2
 8000d96:	4618      	mov	r0, r3
 8000d98:	f7ff ff80 	bl	8000c9c <__NVIC_SetPriority>
}
 8000d9c:	bf00      	nop
 8000d9e:	3718      	adds	r7, #24
 8000da0:	46bd      	mov	sp, r7
 8000da2:	bd80      	pop	{r7, pc}

08000da4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b082      	sub	sp, #8
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	4603      	mov	r3, r0
 8000dac:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000dae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000db2:	4618      	mov	r0, r3
 8000db4:	f7ff ff54 	bl	8000c60 <__NVIC_EnableIRQ>
}
 8000db8:	bf00      	nop
 8000dba:	3708      	adds	r7, #8
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	bd80      	pop	{r7, pc}

08000dc0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	b089      	sub	sp, #36	; 0x24
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
 8000dc8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	61fb      	str	r3, [r7, #28]
 8000dda:	e159      	b.n	8001090 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000ddc:	2201      	movs	r2, #1
 8000dde:	69fb      	ldr	r3, [r7, #28]
 8000de0:	fa02 f303 	lsl.w	r3, r2, r3
 8000de4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000de6:	683b      	ldr	r3, [r7, #0]
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	697a      	ldr	r2, [r7, #20]
 8000dec:	4013      	ands	r3, r2
 8000dee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000df0:	693a      	ldr	r2, [r7, #16]
 8000df2:	697b      	ldr	r3, [r7, #20]
 8000df4:	429a      	cmp	r2, r3
 8000df6:	f040 8148 	bne.w	800108a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000dfa:	683b      	ldr	r3, [r7, #0]
 8000dfc:	685b      	ldr	r3, [r3, #4]
 8000dfe:	f003 0303 	and.w	r3, r3, #3
 8000e02:	2b01      	cmp	r3, #1
 8000e04:	d005      	beq.n	8000e12 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e06:	683b      	ldr	r3, [r7, #0]
 8000e08:	685b      	ldr	r3, [r3, #4]
 8000e0a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e0e:	2b02      	cmp	r3, #2
 8000e10:	d130      	bne.n	8000e74 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	689b      	ldr	r3, [r3, #8]
 8000e16:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000e18:	69fb      	ldr	r3, [r7, #28]
 8000e1a:	005b      	lsls	r3, r3, #1
 8000e1c:	2203      	movs	r2, #3
 8000e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e22:	43db      	mvns	r3, r3
 8000e24:	69ba      	ldr	r2, [r7, #24]
 8000e26:	4013      	ands	r3, r2
 8000e28:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e2a:	683b      	ldr	r3, [r7, #0]
 8000e2c:	68da      	ldr	r2, [r3, #12]
 8000e2e:	69fb      	ldr	r3, [r7, #28]
 8000e30:	005b      	lsls	r3, r3, #1
 8000e32:	fa02 f303 	lsl.w	r3, r2, r3
 8000e36:	69ba      	ldr	r2, [r7, #24]
 8000e38:	4313      	orrs	r3, r2
 8000e3a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	69ba      	ldr	r2, [r7, #24]
 8000e40:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	685b      	ldr	r3, [r3, #4]
 8000e46:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e48:	2201      	movs	r2, #1
 8000e4a:	69fb      	ldr	r3, [r7, #28]
 8000e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e50:	43db      	mvns	r3, r3
 8000e52:	69ba      	ldr	r2, [r7, #24]
 8000e54:	4013      	ands	r3, r2
 8000e56:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e58:	683b      	ldr	r3, [r7, #0]
 8000e5a:	685b      	ldr	r3, [r3, #4]
 8000e5c:	091b      	lsrs	r3, r3, #4
 8000e5e:	f003 0201 	and.w	r2, r3, #1
 8000e62:	69fb      	ldr	r3, [r7, #28]
 8000e64:	fa02 f303 	lsl.w	r3, r2, r3
 8000e68:	69ba      	ldr	r2, [r7, #24]
 8000e6a:	4313      	orrs	r3, r2
 8000e6c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	69ba      	ldr	r2, [r7, #24]
 8000e72:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e74:	683b      	ldr	r3, [r7, #0]
 8000e76:	685b      	ldr	r3, [r3, #4]
 8000e78:	f003 0303 	and.w	r3, r3, #3
 8000e7c:	2b03      	cmp	r3, #3
 8000e7e:	d017      	beq.n	8000eb0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	68db      	ldr	r3, [r3, #12]
 8000e84:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000e86:	69fb      	ldr	r3, [r7, #28]
 8000e88:	005b      	lsls	r3, r3, #1
 8000e8a:	2203      	movs	r2, #3
 8000e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e90:	43db      	mvns	r3, r3
 8000e92:	69ba      	ldr	r2, [r7, #24]
 8000e94:	4013      	ands	r3, r2
 8000e96:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e98:	683b      	ldr	r3, [r7, #0]
 8000e9a:	689a      	ldr	r2, [r3, #8]
 8000e9c:	69fb      	ldr	r3, [r7, #28]
 8000e9e:	005b      	lsls	r3, r3, #1
 8000ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea4:	69ba      	ldr	r2, [r7, #24]
 8000ea6:	4313      	orrs	r3, r2
 8000ea8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	69ba      	ldr	r2, [r7, #24]
 8000eae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000eb0:	683b      	ldr	r3, [r7, #0]
 8000eb2:	685b      	ldr	r3, [r3, #4]
 8000eb4:	f003 0303 	and.w	r3, r3, #3
 8000eb8:	2b02      	cmp	r3, #2
 8000eba:	d123      	bne.n	8000f04 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000ebc:	69fb      	ldr	r3, [r7, #28]
 8000ebe:	08da      	lsrs	r2, r3, #3
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	3208      	adds	r2, #8
 8000ec4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ec8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000eca:	69fb      	ldr	r3, [r7, #28]
 8000ecc:	f003 0307 	and.w	r3, r3, #7
 8000ed0:	009b      	lsls	r3, r3, #2
 8000ed2:	220f      	movs	r2, #15
 8000ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed8:	43db      	mvns	r3, r3
 8000eda:	69ba      	ldr	r2, [r7, #24]
 8000edc:	4013      	ands	r3, r2
 8000ede:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000ee0:	683b      	ldr	r3, [r7, #0]
 8000ee2:	691a      	ldr	r2, [r3, #16]
 8000ee4:	69fb      	ldr	r3, [r7, #28]
 8000ee6:	f003 0307 	and.w	r3, r3, #7
 8000eea:	009b      	lsls	r3, r3, #2
 8000eec:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef0:	69ba      	ldr	r2, [r7, #24]
 8000ef2:	4313      	orrs	r3, r2
 8000ef4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000ef6:	69fb      	ldr	r3, [r7, #28]
 8000ef8:	08da      	lsrs	r2, r3, #3
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	3208      	adds	r2, #8
 8000efe:	69b9      	ldr	r1, [r7, #24]
 8000f00:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f0a:	69fb      	ldr	r3, [r7, #28]
 8000f0c:	005b      	lsls	r3, r3, #1
 8000f0e:	2203      	movs	r2, #3
 8000f10:	fa02 f303 	lsl.w	r3, r2, r3
 8000f14:	43db      	mvns	r3, r3
 8000f16:	69ba      	ldr	r2, [r7, #24]
 8000f18:	4013      	ands	r3, r2
 8000f1a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f1c:	683b      	ldr	r3, [r7, #0]
 8000f1e:	685b      	ldr	r3, [r3, #4]
 8000f20:	f003 0203 	and.w	r2, r3, #3
 8000f24:	69fb      	ldr	r3, [r7, #28]
 8000f26:	005b      	lsls	r3, r3, #1
 8000f28:	fa02 f303 	lsl.w	r3, r2, r3
 8000f2c:	69ba      	ldr	r2, [r7, #24]
 8000f2e:	4313      	orrs	r3, r2
 8000f30:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	69ba      	ldr	r2, [r7, #24]
 8000f36:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000f38:	683b      	ldr	r3, [r7, #0]
 8000f3a:	685b      	ldr	r3, [r3, #4]
 8000f3c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	f000 80a2 	beq.w	800108a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f46:	2300      	movs	r3, #0
 8000f48:	60fb      	str	r3, [r7, #12]
 8000f4a:	4b57      	ldr	r3, [pc, #348]	; (80010a8 <HAL_GPIO_Init+0x2e8>)
 8000f4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f4e:	4a56      	ldr	r2, [pc, #344]	; (80010a8 <HAL_GPIO_Init+0x2e8>)
 8000f50:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f54:	6453      	str	r3, [r2, #68]	; 0x44
 8000f56:	4b54      	ldr	r3, [pc, #336]	; (80010a8 <HAL_GPIO_Init+0x2e8>)
 8000f58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f5e:	60fb      	str	r3, [r7, #12]
 8000f60:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f62:	4a52      	ldr	r2, [pc, #328]	; (80010ac <HAL_GPIO_Init+0x2ec>)
 8000f64:	69fb      	ldr	r3, [r7, #28]
 8000f66:	089b      	lsrs	r3, r3, #2
 8000f68:	3302      	adds	r3, #2
 8000f6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f70:	69fb      	ldr	r3, [r7, #28]
 8000f72:	f003 0303 	and.w	r3, r3, #3
 8000f76:	009b      	lsls	r3, r3, #2
 8000f78:	220f      	movs	r2, #15
 8000f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7e:	43db      	mvns	r3, r3
 8000f80:	69ba      	ldr	r2, [r7, #24]
 8000f82:	4013      	ands	r3, r2
 8000f84:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	4a49      	ldr	r2, [pc, #292]	; (80010b0 <HAL_GPIO_Init+0x2f0>)
 8000f8a:	4293      	cmp	r3, r2
 8000f8c:	d019      	beq.n	8000fc2 <HAL_GPIO_Init+0x202>
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	4a48      	ldr	r2, [pc, #288]	; (80010b4 <HAL_GPIO_Init+0x2f4>)
 8000f92:	4293      	cmp	r3, r2
 8000f94:	d013      	beq.n	8000fbe <HAL_GPIO_Init+0x1fe>
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	4a47      	ldr	r2, [pc, #284]	; (80010b8 <HAL_GPIO_Init+0x2f8>)
 8000f9a:	4293      	cmp	r3, r2
 8000f9c:	d00d      	beq.n	8000fba <HAL_GPIO_Init+0x1fa>
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	4a46      	ldr	r2, [pc, #280]	; (80010bc <HAL_GPIO_Init+0x2fc>)
 8000fa2:	4293      	cmp	r3, r2
 8000fa4:	d007      	beq.n	8000fb6 <HAL_GPIO_Init+0x1f6>
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	4a45      	ldr	r2, [pc, #276]	; (80010c0 <HAL_GPIO_Init+0x300>)
 8000faa:	4293      	cmp	r3, r2
 8000fac:	d101      	bne.n	8000fb2 <HAL_GPIO_Init+0x1f2>
 8000fae:	2304      	movs	r3, #4
 8000fb0:	e008      	b.n	8000fc4 <HAL_GPIO_Init+0x204>
 8000fb2:	2307      	movs	r3, #7
 8000fb4:	e006      	b.n	8000fc4 <HAL_GPIO_Init+0x204>
 8000fb6:	2303      	movs	r3, #3
 8000fb8:	e004      	b.n	8000fc4 <HAL_GPIO_Init+0x204>
 8000fba:	2302      	movs	r3, #2
 8000fbc:	e002      	b.n	8000fc4 <HAL_GPIO_Init+0x204>
 8000fbe:	2301      	movs	r3, #1
 8000fc0:	e000      	b.n	8000fc4 <HAL_GPIO_Init+0x204>
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	69fa      	ldr	r2, [r7, #28]
 8000fc6:	f002 0203 	and.w	r2, r2, #3
 8000fca:	0092      	lsls	r2, r2, #2
 8000fcc:	4093      	lsls	r3, r2
 8000fce:	69ba      	ldr	r2, [r7, #24]
 8000fd0:	4313      	orrs	r3, r2
 8000fd2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000fd4:	4935      	ldr	r1, [pc, #212]	; (80010ac <HAL_GPIO_Init+0x2ec>)
 8000fd6:	69fb      	ldr	r3, [r7, #28]
 8000fd8:	089b      	lsrs	r3, r3, #2
 8000fda:	3302      	adds	r3, #2
 8000fdc:	69ba      	ldr	r2, [r7, #24]
 8000fde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000fe2:	4b38      	ldr	r3, [pc, #224]	; (80010c4 <HAL_GPIO_Init+0x304>)
 8000fe4:	689b      	ldr	r3, [r3, #8]
 8000fe6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fe8:	693b      	ldr	r3, [r7, #16]
 8000fea:	43db      	mvns	r3, r3
 8000fec:	69ba      	ldr	r2, [r7, #24]
 8000fee:	4013      	ands	r3, r2
 8000ff0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000ff2:	683b      	ldr	r3, [r7, #0]
 8000ff4:	685b      	ldr	r3, [r3, #4]
 8000ff6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d003      	beq.n	8001006 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000ffe:	69ba      	ldr	r2, [r7, #24]
 8001000:	693b      	ldr	r3, [r7, #16]
 8001002:	4313      	orrs	r3, r2
 8001004:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001006:	4a2f      	ldr	r2, [pc, #188]	; (80010c4 <HAL_GPIO_Init+0x304>)
 8001008:	69bb      	ldr	r3, [r7, #24]
 800100a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800100c:	4b2d      	ldr	r3, [pc, #180]	; (80010c4 <HAL_GPIO_Init+0x304>)
 800100e:	68db      	ldr	r3, [r3, #12]
 8001010:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001012:	693b      	ldr	r3, [r7, #16]
 8001014:	43db      	mvns	r3, r3
 8001016:	69ba      	ldr	r2, [r7, #24]
 8001018:	4013      	ands	r3, r2
 800101a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	685b      	ldr	r3, [r3, #4]
 8001020:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001024:	2b00      	cmp	r3, #0
 8001026:	d003      	beq.n	8001030 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001028:	69ba      	ldr	r2, [r7, #24]
 800102a:	693b      	ldr	r3, [r7, #16]
 800102c:	4313      	orrs	r3, r2
 800102e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001030:	4a24      	ldr	r2, [pc, #144]	; (80010c4 <HAL_GPIO_Init+0x304>)
 8001032:	69bb      	ldr	r3, [r7, #24]
 8001034:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001036:	4b23      	ldr	r3, [pc, #140]	; (80010c4 <HAL_GPIO_Init+0x304>)
 8001038:	685b      	ldr	r3, [r3, #4]
 800103a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800103c:	693b      	ldr	r3, [r7, #16]
 800103e:	43db      	mvns	r3, r3
 8001040:	69ba      	ldr	r2, [r7, #24]
 8001042:	4013      	ands	r3, r2
 8001044:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001046:	683b      	ldr	r3, [r7, #0]
 8001048:	685b      	ldr	r3, [r3, #4]
 800104a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800104e:	2b00      	cmp	r3, #0
 8001050:	d003      	beq.n	800105a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001052:	69ba      	ldr	r2, [r7, #24]
 8001054:	693b      	ldr	r3, [r7, #16]
 8001056:	4313      	orrs	r3, r2
 8001058:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800105a:	4a1a      	ldr	r2, [pc, #104]	; (80010c4 <HAL_GPIO_Init+0x304>)
 800105c:	69bb      	ldr	r3, [r7, #24]
 800105e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001060:	4b18      	ldr	r3, [pc, #96]	; (80010c4 <HAL_GPIO_Init+0x304>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001066:	693b      	ldr	r3, [r7, #16]
 8001068:	43db      	mvns	r3, r3
 800106a:	69ba      	ldr	r2, [r7, #24]
 800106c:	4013      	ands	r3, r2
 800106e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	685b      	ldr	r3, [r3, #4]
 8001074:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001078:	2b00      	cmp	r3, #0
 800107a:	d003      	beq.n	8001084 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800107c:	69ba      	ldr	r2, [r7, #24]
 800107e:	693b      	ldr	r3, [r7, #16]
 8001080:	4313      	orrs	r3, r2
 8001082:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001084:	4a0f      	ldr	r2, [pc, #60]	; (80010c4 <HAL_GPIO_Init+0x304>)
 8001086:	69bb      	ldr	r3, [r7, #24]
 8001088:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800108a:	69fb      	ldr	r3, [r7, #28]
 800108c:	3301      	adds	r3, #1
 800108e:	61fb      	str	r3, [r7, #28]
 8001090:	69fb      	ldr	r3, [r7, #28]
 8001092:	2b0f      	cmp	r3, #15
 8001094:	f67f aea2 	bls.w	8000ddc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001098:	bf00      	nop
 800109a:	bf00      	nop
 800109c:	3724      	adds	r7, #36	; 0x24
 800109e:	46bd      	mov	sp, r7
 80010a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a4:	4770      	bx	lr
 80010a6:	bf00      	nop
 80010a8:	40023800 	.word	0x40023800
 80010ac:	40013800 	.word	0x40013800
 80010b0:	40020000 	.word	0x40020000
 80010b4:	40020400 	.word	0x40020400
 80010b8:	40020800 	.word	0x40020800
 80010bc:	40020c00 	.word	0x40020c00
 80010c0:	40021000 	.word	0x40021000
 80010c4:	40013c00 	.word	0x40013c00

080010c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010c8:	b480      	push	{r7}
 80010ca:	b083      	sub	sp, #12
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
 80010d0:	460b      	mov	r3, r1
 80010d2:	807b      	strh	r3, [r7, #2]
 80010d4:	4613      	mov	r3, r2
 80010d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80010d8:	787b      	ldrb	r3, [r7, #1]
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d003      	beq.n	80010e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80010de:	887a      	ldrh	r2, [r7, #2]
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80010e4:	e003      	b.n	80010ee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80010e6:	887b      	ldrh	r3, [r7, #2]
 80010e8:	041a      	lsls	r2, r3, #16
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	619a      	str	r2, [r3, #24]
}
 80010ee:	bf00      	nop
 80010f0:	370c      	adds	r7, #12
 80010f2:	46bd      	mov	sp, r7
 80010f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f8:	4770      	bx	lr
	...

080010fc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b086      	sub	sp, #24
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	2b00      	cmp	r3, #0
 8001108:	d101      	bne.n	800110e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800110a:	2301      	movs	r3, #1
 800110c:	e267      	b.n	80015de <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	f003 0301 	and.w	r3, r3, #1
 8001116:	2b00      	cmp	r3, #0
 8001118:	d075      	beq.n	8001206 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800111a:	4b88      	ldr	r3, [pc, #544]	; (800133c <HAL_RCC_OscConfig+0x240>)
 800111c:	689b      	ldr	r3, [r3, #8]
 800111e:	f003 030c 	and.w	r3, r3, #12
 8001122:	2b04      	cmp	r3, #4
 8001124:	d00c      	beq.n	8001140 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001126:	4b85      	ldr	r3, [pc, #532]	; (800133c <HAL_RCC_OscConfig+0x240>)
 8001128:	689b      	ldr	r3, [r3, #8]
 800112a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800112e:	2b08      	cmp	r3, #8
 8001130:	d112      	bne.n	8001158 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001132:	4b82      	ldr	r3, [pc, #520]	; (800133c <HAL_RCC_OscConfig+0x240>)
 8001134:	685b      	ldr	r3, [r3, #4]
 8001136:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800113a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800113e:	d10b      	bne.n	8001158 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001140:	4b7e      	ldr	r3, [pc, #504]	; (800133c <HAL_RCC_OscConfig+0x240>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001148:	2b00      	cmp	r3, #0
 800114a:	d05b      	beq.n	8001204 <HAL_RCC_OscConfig+0x108>
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	685b      	ldr	r3, [r3, #4]
 8001150:	2b00      	cmp	r3, #0
 8001152:	d157      	bne.n	8001204 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001154:	2301      	movs	r3, #1
 8001156:	e242      	b.n	80015de <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	685b      	ldr	r3, [r3, #4]
 800115c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001160:	d106      	bne.n	8001170 <HAL_RCC_OscConfig+0x74>
 8001162:	4b76      	ldr	r3, [pc, #472]	; (800133c <HAL_RCC_OscConfig+0x240>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	4a75      	ldr	r2, [pc, #468]	; (800133c <HAL_RCC_OscConfig+0x240>)
 8001168:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800116c:	6013      	str	r3, [r2, #0]
 800116e:	e01d      	b.n	80011ac <HAL_RCC_OscConfig+0xb0>
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	685b      	ldr	r3, [r3, #4]
 8001174:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001178:	d10c      	bne.n	8001194 <HAL_RCC_OscConfig+0x98>
 800117a:	4b70      	ldr	r3, [pc, #448]	; (800133c <HAL_RCC_OscConfig+0x240>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	4a6f      	ldr	r2, [pc, #444]	; (800133c <HAL_RCC_OscConfig+0x240>)
 8001180:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001184:	6013      	str	r3, [r2, #0]
 8001186:	4b6d      	ldr	r3, [pc, #436]	; (800133c <HAL_RCC_OscConfig+0x240>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	4a6c      	ldr	r2, [pc, #432]	; (800133c <HAL_RCC_OscConfig+0x240>)
 800118c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001190:	6013      	str	r3, [r2, #0]
 8001192:	e00b      	b.n	80011ac <HAL_RCC_OscConfig+0xb0>
 8001194:	4b69      	ldr	r3, [pc, #420]	; (800133c <HAL_RCC_OscConfig+0x240>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	4a68      	ldr	r2, [pc, #416]	; (800133c <HAL_RCC_OscConfig+0x240>)
 800119a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800119e:	6013      	str	r3, [r2, #0]
 80011a0:	4b66      	ldr	r3, [pc, #408]	; (800133c <HAL_RCC_OscConfig+0x240>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	4a65      	ldr	r2, [pc, #404]	; (800133c <HAL_RCC_OscConfig+0x240>)
 80011a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	685b      	ldr	r3, [r3, #4]
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d013      	beq.n	80011dc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011b4:	f7ff fd16 	bl	8000be4 <HAL_GetTick>
 80011b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011ba:	e008      	b.n	80011ce <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80011bc:	f7ff fd12 	bl	8000be4 <HAL_GetTick>
 80011c0:	4602      	mov	r2, r0
 80011c2:	693b      	ldr	r3, [r7, #16]
 80011c4:	1ad3      	subs	r3, r2, r3
 80011c6:	2b64      	cmp	r3, #100	; 0x64
 80011c8:	d901      	bls.n	80011ce <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80011ca:	2303      	movs	r3, #3
 80011cc:	e207      	b.n	80015de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011ce:	4b5b      	ldr	r3, [pc, #364]	; (800133c <HAL_RCC_OscConfig+0x240>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d0f0      	beq.n	80011bc <HAL_RCC_OscConfig+0xc0>
 80011da:	e014      	b.n	8001206 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011dc:	f7ff fd02 	bl	8000be4 <HAL_GetTick>
 80011e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011e2:	e008      	b.n	80011f6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80011e4:	f7ff fcfe 	bl	8000be4 <HAL_GetTick>
 80011e8:	4602      	mov	r2, r0
 80011ea:	693b      	ldr	r3, [r7, #16]
 80011ec:	1ad3      	subs	r3, r2, r3
 80011ee:	2b64      	cmp	r3, #100	; 0x64
 80011f0:	d901      	bls.n	80011f6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80011f2:	2303      	movs	r3, #3
 80011f4:	e1f3      	b.n	80015de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011f6:	4b51      	ldr	r3, [pc, #324]	; (800133c <HAL_RCC_OscConfig+0x240>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d1f0      	bne.n	80011e4 <HAL_RCC_OscConfig+0xe8>
 8001202:	e000      	b.n	8001206 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001204:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	f003 0302 	and.w	r3, r3, #2
 800120e:	2b00      	cmp	r3, #0
 8001210:	d063      	beq.n	80012da <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001212:	4b4a      	ldr	r3, [pc, #296]	; (800133c <HAL_RCC_OscConfig+0x240>)
 8001214:	689b      	ldr	r3, [r3, #8]
 8001216:	f003 030c 	and.w	r3, r3, #12
 800121a:	2b00      	cmp	r3, #0
 800121c:	d00b      	beq.n	8001236 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800121e:	4b47      	ldr	r3, [pc, #284]	; (800133c <HAL_RCC_OscConfig+0x240>)
 8001220:	689b      	ldr	r3, [r3, #8]
 8001222:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001226:	2b08      	cmp	r3, #8
 8001228:	d11c      	bne.n	8001264 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800122a:	4b44      	ldr	r3, [pc, #272]	; (800133c <HAL_RCC_OscConfig+0x240>)
 800122c:	685b      	ldr	r3, [r3, #4]
 800122e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001232:	2b00      	cmp	r3, #0
 8001234:	d116      	bne.n	8001264 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001236:	4b41      	ldr	r3, [pc, #260]	; (800133c <HAL_RCC_OscConfig+0x240>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	f003 0302 	and.w	r3, r3, #2
 800123e:	2b00      	cmp	r3, #0
 8001240:	d005      	beq.n	800124e <HAL_RCC_OscConfig+0x152>
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	68db      	ldr	r3, [r3, #12]
 8001246:	2b01      	cmp	r3, #1
 8001248:	d001      	beq.n	800124e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800124a:	2301      	movs	r3, #1
 800124c:	e1c7      	b.n	80015de <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800124e:	4b3b      	ldr	r3, [pc, #236]	; (800133c <HAL_RCC_OscConfig+0x240>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	691b      	ldr	r3, [r3, #16]
 800125a:	00db      	lsls	r3, r3, #3
 800125c:	4937      	ldr	r1, [pc, #220]	; (800133c <HAL_RCC_OscConfig+0x240>)
 800125e:	4313      	orrs	r3, r2
 8001260:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001262:	e03a      	b.n	80012da <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	68db      	ldr	r3, [r3, #12]
 8001268:	2b00      	cmp	r3, #0
 800126a:	d020      	beq.n	80012ae <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800126c:	4b34      	ldr	r3, [pc, #208]	; (8001340 <HAL_RCC_OscConfig+0x244>)
 800126e:	2201      	movs	r2, #1
 8001270:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001272:	f7ff fcb7 	bl	8000be4 <HAL_GetTick>
 8001276:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001278:	e008      	b.n	800128c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800127a:	f7ff fcb3 	bl	8000be4 <HAL_GetTick>
 800127e:	4602      	mov	r2, r0
 8001280:	693b      	ldr	r3, [r7, #16]
 8001282:	1ad3      	subs	r3, r2, r3
 8001284:	2b02      	cmp	r3, #2
 8001286:	d901      	bls.n	800128c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001288:	2303      	movs	r3, #3
 800128a:	e1a8      	b.n	80015de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800128c:	4b2b      	ldr	r3, [pc, #172]	; (800133c <HAL_RCC_OscConfig+0x240>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	f003 0302 	and.w	r3, r3, #2
 8001294:	2b00      	cmp	r3, #0
 8001296:	d0f0      	beq.n	800127a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001298:	4b28      	ldr	r3, [pc, #160]	; (800133c <HAL_RCC_OscConfig+0x240>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	691b      	ldr	r3, [r3, #16]
 80012a4:	00db      	lsls	r3, r3, #3
 80012a6:	4925      	ldr	r1, [pc, #148]	; (800133c <HAL_RCC_OscConfig+0x240>)
 80012a8:	4313      	orrs	r3, r2
 80012aa:	600b      	str	r3, [r1, #0]
 80012ac:	e015      	b.n	80012da <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80012ae:	4b24      	ldr	r3, [pc, #144]	; (8001340 <HAL_RCC_OscConfig+0x244>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012b4:	f7ff fc96 	bl	8000be4 <HAL_GetTick>
 80012b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012ba:	e008      	b.n	80012ce <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80012bc:	f7ff fc92 	bl	8000be4 <HAL_GetTick>
 80012c0:	4602      	mov	r2, r0
 80012c2:	693b      	ldr	r3, [r7, #16]
 80012c4:	1ad3      	subs	r3, r2, r3
 80012c6:	2b02      	cmp	r3, #2
 80012c8:	d901      	bls.n	80012ce <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80012ca:	2303      	movs	r3, #3
 80012cc:	e187      	b.n	80015de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012ce:	4b1b      	ldr	r3, [pc, #108]	; (800133c <HAL_RCC_OscConfig+0x240>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	f003 0302 	and.w	r3, r3, #2
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d1f0      	bne.n	80012bc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f003 0308 	and.w	r3, r3, #8
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d036      	beq.n	8001354 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	695b      	ldr	r3, [r3, #20]
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d016      	beq.n	800131c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80012ee:	4b15      	ldr	r3, [pc, #84]	; (8001344 <HAL_RCC_OscConfig+0x248>)
 80012f0:	2201      	movs	r2, #1
 80012f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012f4:	f7ff fc76 	bl	8000be4 <HAL_GetTick>
 80012f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012fa:	e008      	b.n	800130e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80012fc:	f7ff fc72 	bl	8000be4 <HAL_GetTick>
 8001300:	4602      	mov	r2, r0
 8001302:	693b      	ldr	r3, [r7, #16]
 8001304:	1ad3      	subs	r3, r2, r3
 8001306:	2b02      	cmp	r3, #2
 8001308:	d901      	bls.n	800130e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800130a:	2303      	movs	r3, #3
 800130c:	e167      	b.n	80015de <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800130e:	4b0b      	ldr	r3, [pc, #44]	; (800133c <HAL_RCC_OscConfig+0x240>)
 8001310:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001312:	f003 0302 	and.w	r3, r3, #2
 8001316:	2b00      	cmp	r3, #0
 8001318:	d0f0      	beq.n	80012fc <HAL_RCC_OscConfig+0x200>
 800131a:	e01b      	b.n	8001354 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800131c:	4b09      	ldr	r3, [pc, #36]	; (8001344 <HAL_RCC_OscConfig+0x248>)
 800131e:	2200      	movs	r2, #0
 8001320:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001322:	f7ff fc5f 	bl	8000be4 <HAL_GetTick>
 8001326:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001328:	e00e      	b.n	8001348 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800132a:	f7ff fc5b 	bl	8000be4 <HAL_GetTick>
 800132e:	4602      	mov	r2, r0
 8001330:	693b      	ldr	r3, [r7, #16]
 8001332:	1ad3      	subs	r3, r2, r3
 8001334:	2b02      	cmp	r3, #2
 8001336:	d907      	bls.n	8001348 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001338:	2303      	movs	r3, #3
 800133a:	e150      	b.n	80015de <HAL_RCC_OscConfig+0x4e2>
 800133c:	40023800 	.word	0x40023800
 8001340:	42470000 	.word	0x42470000
 8001344:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001348:	4b88      	ldr	r3, [pc, #544]	; (800156c <HAL_RCC_OscConfig+0x470>)
 800134a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800134c:	f003 0302 	and.w	r3, r3, #2
 8001350:	2b00      	cmp	r3, #0
 8001352:	d1ea      	bne.n	800132a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	f003 0304 	and.w	r3, r3, #4
 800135c:	2b00      	cmp	r3, #0
 800135e:	f000 8097 	beq.w	8001490 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001362:	2300      	movs	r3, #0
 8001364:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001366:	4b81      	ldr	r3, [pc, #516]	; (800156c <HAL_RCC_OscConfig+0x470>)
 8001368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800136a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800136e:	2b00      	cmp	r3, #0
 8001370:	d10f      	bne.n	8001392 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001372:	2300      	movs	r3, #0
 8001374:	60bb      	str	r3, [r7, #8]
 8001376:	4b7d      	ldr	r3, [pc, #500]	; (800156c <HAL_RCC_OscConfig+0x470>)
 8001378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800137a:	4a7c      	ldr	r2, [pc, #496]	; (800156c <HAL_RCC_OscConfig+0x470>)
 800137c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001380:	6413      	str	r3, [r2, #64]	; 0x40
 8001382:	4b7a      	ldr	r3, [pc, #488]	; (800156c <HAL_RCC_OscConfig+0x470>)
 8001384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001386:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800138a:	60bb      	str	r3, [r7, #8]
 800138c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800138e:	2301      	movs	r3, #1
 8001390:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001392:	4b77      	ldr	r3, [pc, #476]	; (8001570 <HAL_RCC_OscConfig+0x474>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800139a:	2b00      	cmp	r3, #0
 800139c:	d118      	bne.n	80013d0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800139e:	4b74      	ldr	r3, [pc, #464]	; (8001570 <HAL_RCC_OscConfig+0x474>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	4a73      	ldr	r2, [pc, #460]	; (8001570 <HAL_RCC_OscConfig+0x474>)
 80013a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80013aa:	f7ff fc1b 	bl	8000be4 <HAL_GetTick>
 80013ae:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013b0:	e008      	b.n	80013c4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80013b2:	f7ff fc17 	bl	8000be4 <HAL_GetTick>
 80013b6:	4602      	mov	r2, r0
 80013b8:	693b      	ldr	r3, [r7, #16]
 80013ba:	1ad3      	subs	r3, r2, r3
 80013bc:	2b02      	cmp	r3, #2
 80013be:	d901      	bls.n	80013c4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80013c0:	2303      	movs	r3, #3
 80013c2:	e10c      	b.n	80015de <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013c4:	4b6a      	ldr	r3, [pc, #424]	; (8001570 <HAL_RCC_OscConfig+0x474>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d0f0      	beq.n	80013b2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	689b      	ldr	r3, [r3, #8]
 80013d4:	2b01      	cmp	r3, #1
 80013d6:	d106      	bne.n	80013e6 <HAL_RCC_OscConfig+0x2ea>
 80013d8:	4b64      	ldr	r3, [pc, #400]	; (800156c <HAL_RCC_OscConfig+0x470>)
 80013da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013dc:	4a63      	ldr	r2, [pc, #396]	; (800156c <HAL_RCC_OscConfig+0x470>)
 80013de:	f043 0301 	orr.w	r3, r3, #1
 80013e2:	6713      	str	r3, [r2, #112]	; 0x70
 80013e4:	e01c      	b.n	8001420 <HAL_RCC_OscConfig+0x324>
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	689b      	ldr	r3, [r3, #8]
 80013ea:	2b05      	cmp	r3, #5
 80013ec:	d10c      	bne.n	8001408 <HAL_RCC_OscConfig+0x30c>
 80013ee:	4b5f      	ldr	r3, [pc, #380]	; (800156c <HAL_RCC_OscConfig+0x470>)
 80013f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013f2:	4a5e      	ldr	r2, [pc, #376]	; (800156c <HAL_RCC_OscConfig+0x470>)
 80013f4:	f043 0304 	orr.w	r3, r3, #4
 80013f8:	6713      	str	r3, [r2, #112]	; 0x70
 80013fa:	4b5c      	ldr	r3, [pc, #368]	; (800156c <HAL_RCC_OscConfig+0x470>)
 80013fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013fe:	4a5b      	ldr	r2, [pc, #364]	; (800156c <HAL_RCC_OscConfig+0x470>)
 8001400:	f043 0301 	orr.w	r3, r3, #1
 8001404:	6713      	str	r3, [r2, #112]	; 0x70
 8001406:	e00b      	b.n	8001420 <HAL_RCC_OscConfig+0x324>
 8001408:	4b58      	ldr	r3, [pc, #352]	; (800156c <HAL_RCC_OscConfig+0x470>)
 800140a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800140c:	4a57      	ldr	r2, [pc, #348]	; (800156c <HAL_RCC_OscConfig+0x470>)
 800140e:	f023 0301 	bic.w	r3, r3, #1
 8001412:	6713      	str	r3, [r2, #112]	; 0x70
 8001414:	4b55      	ldr	r3, [pc, #340]	; (800156c <HAL_RCC_OscConfig+0x470>)
 8001416:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001418:	4a54      	ldr	r2, [pc, #336]	; (800156c <HAL_RCC_OscConfig+0x470>)
 800141a:	f023 0304 	bic.w	r3, r3, #4
 800141e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	689b      	ldr	r3, [r3, #8]
 8001424:	2b00      	cmp	r3, #0
 8001426:	d015      	beq.n	8001454 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001428:	f7ff fbdc 	bl	8000be4 <HAL_GetTick>
 800142c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800142e:	e00a      	b.n	8001446 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001430:	f7ff fbd8 	bl	8000be4 <HAL_GetTick>
 8001434:	4602      	mov	r2, r0
 8001436:	693b      	ldr	r3, [r7, #16]
 8001438:	1ad3      	subs	r3, r2, r3
 800143a:	f241 3288 	movw	r2, #5000	; 0x1388
 800143e:	4293      	cmp	r3, r2
 8001440:	d901      	bls.n	8001446 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001442:	2303      	movs	r3, #3
 8001444:	e0cb      	b.n	80015de <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001446:	4b49      	ldr	r3, [pc, #292]	; (800156c <HAL_RCC_OscConfig+0x470>)
 8001448:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800144a:	f003 0302 	and.w	r3, r3, #2
 800144e:	2b00      	cmp	r3, #0
 8001450:	d0ee      	beq.n	8001430 <HAL_RCC_OscConfig+0x334>
 8001452:	e014      	b.n	800147e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001454:	f7ff fbc6 	bl	8000be4 <HAL_GetTick>
 8001458:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800145a:	e00a      	b.n	8001472 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800145c:	f7ff fbc2 	bl	8000be4 <HAL_GetTick>
 8001460:	4602      	mov	r2, r0
 8001462:	693b      	ldr	r3, [r7, #16]
 8001464:	1ad3      	subs	r3, r2, r3
 8001466:	f241 3288 	movw	r2, #5000	; 0x1388
 800146a:	4293      	cmp	r3, r2
 800146c:	d901      	bls.n	8001472 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800146e:	2303      	movs	r3, #3
 8001470:	e0b5      	b.n	80015de <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001472:	4b3e      	ldr	r3, [pc, #248]	; (800156c <HAL_RCC_OscConfig+0x470>)
 8001474:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001476:	f003 0302 	and.w	r3, r3, #2
 800147a:	2b00      	cmp	r3, #0
 800147c:	d1ee      	bne.n	800145c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800147e:	7dfb      	ldrb	r3, [r7, #23]
 8001480:	2b01      	cmp	r3, #1
 8001482:	d105      	bne.n	8001490 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001484:	4b39      	ldr	r3, [pc, #228]	; (800156c <HAL_RCC_OscConfig+0x470>)
 8001486:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001488:	4a38      	ldr	r2, [pc, #224]	; (800156c <HAL_RCC_OscConfig+0x470>)
 800148a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800148e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	699b      	ldr	r3, [r3, #24]
 8001494:	2b00      	cmp	r3, #0
 8001496:	f000 80a1 	beq.w	80015dc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800149a:	4b34      	ldr	r3, [pc, #208]	; (800156c <HAL_RCC_OscConfig+0x470>)
 800149c:	689b      	ldr	r3, [r3, #8]
 800149e:	f003 030c 	and.w	r3, r3, #12
 80014a2:	2b08      	cmp	r3, #8
 80014a4:	d05c      	beq.n	8001560 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	699b      	ldr	r3, [r3, #24]
 80014aa:	2b02      	cmp	r3, #2
 80014ac:	d141      	bne.n	8001532 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014ae:	4b31      	ldr	r3, [pc, #196]	; (8001574 <HAL_RCC_OscConfig+0x478>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014b4:	f7ff fb96 	bl	8000be4 <HAL_GetTick>
 80014b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014ba:	e008      	b.n	80014ce <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014bc:	f7ff fb92 	bl	8000be4 <HAL_GetTick>
 80014c0:	4602      	mov	r2, r0
 80014c2:	693b      	ldr	r3, [r7, #16]
 80014c4:	1ad3      	subs	r3, r2, r3
 80014c6:	2b02      	cmp	r3, #2
 80014c8:	d901      	bls.n	80014ce <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80014ca:	2303      	movs	r3, #3
 80014cc:	e087      	b.n	80015de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014ce:	4b27      	ldr	r3, [pc, #156]	; (800156c <HAL_RCC_OscConfig+0x470>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d1f0      	bne.n	80014bc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	69da      	ldr	r2, [r3, #28]
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	6a1b      	ldr	r3, [r3, #32]
 80014e2:	431a      	orrs	r2, r3
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014e8:	019b      	lsls	r3, r3, #6
 80014ea:	431a      	orrs	r2, r3
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014f0:	085b      	lsrs	r3, r3, #1
 80014f2:	3b01      	subs	r3, #1
 80014f4:	041b      	lsls	r3, r3, #16
 80014f6:	431a      	orrs	r2, r3
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014fc:	061b      	lsls	r3, r3, #24
 80014fe:	491b      	ldr	r1, [pc, #108]	; (800156c <HAL_RCC_OscConfig+0x470>)
 8001500:	4313      	orrs	r3, r2
 8001502:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001504:	4b1b      	ldr	r3, [pc, #108]	; (8001574 <HAL_RCC_OscConfig+0x478>)
 8001506:	2201      	movs	r2, #1
 8001508:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800150a:	f7ff fb6b 	bl	8000be4 <HAL_GetTick>
 800150e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001510:	e008      	b.n	8001524 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001512:	f7ff fb67 	bl	8000be4 <HAL_GetTick>
 8001516:	4602      	mov	r2, r0
 8001518:	693b      	ldr	r3, [r7, #16]
 800151a:	1ad3      	subs	r3, r2, r3
 800151c:	2b02      	cmp	r3, #2
 800151e:	d901      	bls.n	8001524 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001520:	2303      	movs	r3, #3
 8001522:	e05c      	b.n	80015de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001524:	4b11      	ldr	r3, [pc, #68]	; (800156c <HAL_RCC_OscConfig+0x470>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800152c:	2b00      	cmp	r3, #0
 800152e:	d0f0      	beq.n	8001512 <HAL_RCC_OscConfig+0x416>
 8001530:	e054      	b.n	80015dc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001532:	4b10      	ldr	r3, [pc, #64]	; (8001574 <HAL_RCC_OscConfig+0x478>)
 8001534:	2200      	movs	r2, #0
 8001536:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001538:	f7ff fb54 	bl	8000be4 <HAL_GetTick>
 800153c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800153e:	e008      	b.n	8001552 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001540:	f7ff fb50 	bl	8000be4 <HAL_GetTick>
 8001544:	4602      	mov	r2, r0
 8001546:	693b      	ldr	r3, [r7, #16]
 8001548:	1ad3      	subs	r3, r2, r3
 800154a:	2b02      	cmp	r3, #2
 800154c:	d901      	bls.n	8001552 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800154e:	2303      	movs	r3, #3
 8001550:	e045      	b.n	80015de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001552:	4b06      	ldr	r3, [pc, #24]	; (800156c <HAL_RCC_OscConfig+0x470>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800155a:	2b00      	cmp	r3, #0
 800155c:	d1f0      	bne.n	8001540 <HAL_RCC_OscConfig+0x444>
 800155e:	e03d      	b.n	80015dc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	699b      	ldr	r3, [r3, #24]
 8001564:	2b01      	cmp	r3, #1
 8001566:	d107      	bne.n	8001578 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001568:	2301      	movs	r3, #1
 800156a:	e038      	b.n	80015de <HAL_RCC_OscConfig+0x4e2>
 800156c:	40023800 	.word	0x40023800
 8001570:	40007000 	.word	0x40007000
 8001574:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001578:	4b1b      	ldr	r3, [pc, #108]	; (80015e8 <HAL_RCC_OscConfig+0x4ec>)
 800157a:	685b      	ldr	r3, [r3, #4]
 800157c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	699b      	ldr	r3, [r3, #24]
 8001582:	2b01      	cmp	r3, #1
 8001584:	d028      	beq.n	80015d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001590:	429a      	cmp	r2, r3
 8001592:	d121      	bne.n	80015d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800159e:	429a      	cmp	r2, r3
 80015a0:	d11a      	bne.n	80015d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80015a2:	68fa      	ldr	r2, [r7, #12]
 80015a4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80015a8:	4013      	ands	r3, r2
 80015aa:	687a      	ldr	r2, [r7, #4]
 80015ac:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80015ae:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80015b0:	4293      	cmp	r3, r2
 80015b2:	d111      	bne.n	80015d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015be:	085b      	lsrs	r3, r3, #1
 80015c0:	3b01      	subs	r3, #1
 80015c2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80015c4:	429a      	cmp	r2, r3
 80015c6:	d107      	bne.n	80015d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015d2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80015d4:	429a      	cmp	r2, r3
 80015d6:	d001      	beq.n	80015dc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80015d8:	2301      	movs	r3, #1
 80015da:	e000      	b.n	80015de <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80015dc:	2300      	movs	r3, #0
}
 80015de:	4618      	mov	r0, r3
 80015e0:	3718      	adds	r7, #24
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}
 80015e6:	bf00      	nop
 80015e8:	40023800 	.word	0x40023800

080015ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b084      	sub	sp, #16
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
 80015f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d101      	bne.n	8001600 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80015fc:	2301      	movs	r3, #1
 80015fe:	e0cc      	b.n	800179a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001600:	4b68      	ldr	r3, [pc, #416]	; (80017a4 <HAL_RCC_ClockConfig+0x1b8>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f003 0307 	and.w	r3, r3, #7
 8001608:	683a      	ldr	r2, [r7, #0]
 800160a:	429a      	cmp	r2, r3
 800160c:	d90c      	bls.n	8001628 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800160e:	4b65      	ldr	r3, [pc, #404]	; (80017a4 <HAL_RCC_ClockConfig+0x1b8>)
 8001610:	683a      	ldr	r2, [r7, #0]
 8001612:	b2d2      	uxtb	r2, r2
 8001614:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001616:	4b63      	ldr	r3, [pc, #396]	; (80017a4 <HAL_RCC_ClockConfig+0x1b8>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f003 0307 	and.w	r3, r3, #7
 800161e:	683a      	ldr	r2, [r7, #0]
 8001620:	429a      	cmp	r2, r3
 8001622:	d001      	beq.n	8001628 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001624:	2301      	movs	r3, #1
 8001626:	e0b8      	b.n	800179a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f003 0302 	and.w	r3, r3, #2
 8001630:	2b00      	cmp	r3, #0
 8001632:	d020      	beq.n	8001676 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f003 0304 	and.w	r3, r3, #4
 800163c:	2b00      	cmp	r3, #0
 800163e:	d005      	beq.n	800164c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001640:	4b59      	ldr	r3, [pc, #356]	; (80017a8 <HAL_RCC_ClockConfig+0x1bc>)
 8001642:	689b      	ldr	r3, [r3, #8]
 8001644:	4a58      	ldr	r2, [pc, #352]	; (80017a8 <HAL_RCC_ClockConfig+0x1bc>)
 8001646:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800164a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f003 0308 	and.w	r3, r3, #8
 8001654:	2b00      	cmp	r3, #0
 8001656:	d005      	beq.n	8001664 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001658:	4b53      	ldr	r3, [pc, #332]	; (80017a8 <HAL_RCC_ClockConfig+0x1bc>)
 800165a:	689b      	ldr	r3, [r3, #8]
 800165c:	4a52      	ldr	r2, [pc, #328]	; (80017a8 <HAL_RCC_ClockConfig+0x1bc>)
 800165e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001662:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001664:	4b50      	ldr	r3, [pc, #320]	; (80017a8 <HAL_RCC_ClockConfig+0x1bc>)
 8001666:	689b      	ldr	r3, [r3, #8]
 8001668:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	689b      	ldr	r3, [r3, #8]
 8001670:	494d      	ldr	r1, [pc, #308]	; (80017a8 <HAL_RCC_ClockConfig+0x1bc>)
 8001672:	4313      	orrs	r3, r2
 8001674:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f003 0301 	and.w	r3, r3, #1
 800167e:	2b00      	cmp	r3, #0
 8001680:	d044      	beq.n	800170c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	685b      	ldr	r3, [r3, #4]
 8001686:	2b01      	cmp	r3, #1
 8001688:	d107      	bne.n	800169a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800168a:	4b47      	ldr	r3, [pc, #284]	; (80017a8 <HAL_RCC_ClockConfig+0x1bc>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001692:	2b00      	cmp	r3, #0
 8001694:	d119      	bne.n	80016ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001696:	2301      	movs	r3, #1
 8001698:	e07f      	b.n	800179a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	685b      	ldr	r3, [r3, #4]
 800169e:	2b02      	cmp	r3, #2
 80016a0:	d003      	beq.n	80016aa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80016a6:	2b03      	cmp	r3, #3
 80016a8:	d107      	bne.n	80016ba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016aa:	4b3f      	ldr	r3, [pc, #252]	; (80017a8 <HAL_RCC_ClockConfig+0x1bc>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d109      	bne.n	80016ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016b6:	2301      	movs	r3, #1
 80016b8:	e06f      	b.n	800179a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016ba:	4b3b      	ldr	r3, [pc, #236]	; (80017a8 <HAL_RCC_ClockConfig+0x1bc>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f003 0302 	and.w	r3, r3, #2
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d101      	bne.n	80016ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016c6:	2301      	movs	r3, #1
 80016c8:	e067      	b.n	800179a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80016ca:	4b37      	ldr	r3, [pc, #220]	; (80017a8 <HAL_RCC_ClockConfig+0x1bc>)
 80016cc:	689b      	ldr	r3, [r3, #8]
 80016ce:	f023 0203 	bic.w	r2, r3, #3
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	685b      	ldr	r3, [r3, #4]
 80016d6:	4934      	ldr	r1, [pc, #208]	; (80017a8 <HAL_RCC_ClockConfig+0x1bc>)
 80016d8:	4313      	orrs	r3, r2
 80016da:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80016dc:	f7ff fa82 	bl	8000be4 <HAL_GetTick>
 80016e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016e2:	e00a      	b.n	80016fa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016e4:	f7ff fa7e 	bl	8000be4 <HAL_GetTick>
 80016e8:	4602      	mov	r2, r0
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	1ad3      	subs	r3, r2, r3
 80016ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80016f2:	4293      	cmp	r3, r2
 80016f4:	d901      	bls.n	80016fa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80016f6:	2303      	movs	r3, #3
 80016f8:	e04f      	b.n	800179a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016fa:	4b2b      	ldr	r3, [pc, #172]	; (80017a8 <HAL_RCC_ClockConfig+0x1bc>)
 80016fc:	689b      	ldr	r3, [r3, #8]
 80016fe:	f003 020c 	and.w	r2, r3, #12
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	685b      	ldr	r3, [r3, #4]
 8001706:	009b      	lsls	r3, r3, #2
 8001708:	429a      	cmp	r2, r3
 800170a:	d1eb      	bne.n	80016e4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800170c:	4b25      	ldr	r3, [pc, #148]	; (80017a4 <HAL_RCC_ClockConfig+0x1b8>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f003 0307 	and.w	r3, r3, #7
 8001714:	683a      	ldr	r2, [r7, #0]
 8001716:	429a      	cmp	r2, r3
 8001718:	d20c      	bcs.n	8001734 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800171a:	4b22      	ldr	r3, [pc, #136]	; (80017a4 <HAL_RCC_ClockConfig+0x1b8>)
 800171c:	683a      	ldr	r2, [r7, #0]
 800171e:	b2d2      	uxtb	r2, r2
 8001720:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001722:	4b20      	ldr	r3, [pc, #128]	; (80017a4 <HAL_RCC_ClockConfig+0x1b8>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f003 0307 	and.w	r3, r3, #7
 800172a:	683a      	ldr	r2, [r7, #0]
 800172c:	429a      	cmp	r2, r3
 800172e:	d001      	beq.n	8001734 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001730:	2301      	movs	r3, #1
 8001732:	e032      	b.n	800179a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f003 0304 	and.w	r3, r3, #4
 800173c:	2b00      	cmp	r3, #0
 800173e:	d008      	beq.n	8001752 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001740:	4b19      	ldr	r3, [pc, #100]	; (80017a8 <HAL_RCC_ClockConfig+0x1bc>)
 8001742:	689b      	ldr	r3, [r3, #8]
 8001744:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	68db      	ldr	r3, [r3, #12]
 800174c:	4916      	ldr	r1, [pc, #88]	; (80017a8 <HAL_RCC_ClockConfig+0x1bc>)
 800174e:	4313      	orrs	r3, r2
 8001750:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f003 0308 	and.w	r3, r3, #8
 800175a:	2b00      	cmp	r3, #0
 800175c:	d009      	beq.n	8001772 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800175e:	4b12      	ldr	r3, [pc, #72]	; (80017a8 <HAL_RCC_ClockConfig+0x1bc>)
 8001760:	689b      	ldr	r3, [r3, #8]
 8001762:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	691b      	ldr	r3, [r3, #16]
 800176a:	00db      	lsls	r3, r3, #3
 800176c:	490e      	ldr	r1, [pc, #56]	; (80017a8 <HAL_RCC_ClockConfig+0x1bc>)
 800176e:	4313      	orrs	r3, r2
 8001770:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001772:	f000 f821 	bl	80017b8 <HAL_RCC_GetSysClockFreq>
 8001776:	4602      	mov	r2, r0
 8001778:	4b0b      	ldr	r3, [pc, #44]	; (80017a8 <HAL_RCC_ClockConfig+0x1bc>)
 800177a:	689b      	ldr	r3, [r3, #8]
 800177c:	091b      	lsrs	r3, r3, #4
 800177e:	f003 030f 	and.w	r3, r3, #15
 8001782:	490a      	ldr	r1, [pc, #40]	; (80017ac <HAL_RCC_ClockConfig+0x1c0>)
 8001784:	5ccb      	ldrb	r3, [r1, r3]
 8001786:	fa22 f303 	lsr.w	r3, r2, r3
 800178a:	4a09      	ldr	r2, [pc, #36]	; (80017b0 <HAL_RCC_ClockConfig+0x1c4>)
 800178c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800178e:	4b09      	ldr	r3, [pc, #36]	; (80017b4 <HAL_RCC_ClockConfig+0x1c8>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	4618      	mov	r0, r3
 8001794:	f7ff f918 	bl	80009c8 <HAL_InitTick>

  return HAL_OK;
 8001798:	2300      	movs	r3, #0
}
 800179a:	4618      	mov	r0, r3
 800179c:	3710      	adds	r7, #16
 800179e:	46bd      	mov	sp, r7
 80017a0:	bd80      	pop	{r7, pc}
 80017a2:	bf00      	nop
 80017a4:	40023c00 	.word	0x40023c00
 80017a8:	40023800 	.word	0x40023800
 80017ac:	080057a0 	.word	0x080057a0
 80017b0:	20000000 	.word	0x20000000
 80017b4:	20000004 	.word	0x20000004

080017b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80017b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80017bc:	b090      	sub	sp, #64	; 0x40
 80017be:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80017c0:	2300      	movs	r3, #0
 80017c2:	637b      	str	r3, [r7, #52]	; 0x34
 80017c4:	2300      	movs	r3, #0
 80017c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80017c8:	2300      	movs	r3, #0
 80017ca:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80017cc:	2300      	movs	r3, #0
 80017ce:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80017d0:	4b59      	ldr	r3, [pc, #356]	; (8001938 <HAL_RCC_GetSysClockFreq+0x180>)
 80017d2:	689b      	ldr	r3, [r3, #8]
 80017d4:	f003 030c 	and.w	r3, r3, #12
 80017d8:	2b08      	cmp	r3, #8
 80017da:	d00d      	beq.n	80017f8 <HAL_RCC_GetSysClockFreq+0x40>
 80017dc:	2b08      	cmp	r3, #8
 80017de:	f200 80a1 	bhi.w	8001924 <HAL_RCC_GetSysClockFreq+0x16c>
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d002      	beq.n	80017ec <HAL_RCC_GetSysClockFreq+0x34>
 80017e6:	2b04      	cmp	r3, #4
 80017e8:	d003      	beq.n	80017f2 <HAL_RCC_GetSysClockFreq+0x3a>
 80017ea:	e09b      	b.n	8001924 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80017ec:	4b53      	ldr	r3, [pc, #332]	; (800193c <HAL_RCC_GetSysClockFreq+0x184>)
 80017ee:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80017f0:	e09b      	b.n	800192a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80017f2:	4b53      	ldr	r3, [pc, #332]	; (8001940 <HAL_RCC_GetSysClockFreq+0x188>)
 80017f4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80017f6:	e098      	b.n	800192a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80017f8:	4b4f      	ldr	r3, [pc, #316]	; (8001938 <HAL_RCC_GetSysClockFreq+0x180>)
 80017fa:	685b      	ldr	r3, [r3, #4]
 80017fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001800:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001802:	4b4d      	ldr	r3, [pc, #308]	; (8001938 <HAL_RCC_GetSysClockFreq+0x180>)
 8001804:	685b      	ldr	r3, [r3, #4]
 8001806:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800180a:	2b00      	cmp	r3, #0
 800180c:	d028      	beq.n	8001860 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800180e:	4b4a      	ldr	r3, [pc, #296]	; (8001938 <HAL_RCC_GetSysClockFreq+0x180>)
 8001810:	685b      	ldr	r3, [r3, #4]
 8001812:	099b      	lsrs	r3, r3, #6
 8001814:	2200      	movs	r2, #0
 8001816:	623b      	str	r3, [r7, #32]
 8001818:	627a      	str	r2, [r7, #36]	; 0x24
 800181a:	6a3b      	ldr	r3, [r7, #32]
 800181c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001820:	2100      	movs	r1, #0
 8001822:	4b47      	ldr	r3, [pc, #284]	; (8001940 <HAL_RCC_GetSysClockFreq+0x188>)
 8001824:	fb03 f201 	mul.w	r2, r3, r1
 8001828:	2300      	movs	r3, #0
 800182a:	fb00 f303 	mul.w	r3, r0, r3
 800182e:	4413      	add	r3, r2
 8001830:	4a43      	ldr	r2, [pc, #268]	; (8001940 <HAL_RCC_GetSysClockFreq+0x188>)
 8001832:	fba0 1202 	umull	r1, r2, r0, r2
 8001836:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001838:	460a      	mov	r2, r1
 800183a:	62ba      	str	r2, [r7, #40]	; 0x28
 800183c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800183e:	4413      	add	r3, r2
 8001840:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001842:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001844:	2200      	movs	r2, #0
 8001846:	61bb      	str	r3, [r7, #24]
 8001848:	61fa      	str	r2, [r7, #28]
 800184a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800184e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001852:	f7fe fcc5 	bl	80001e0 <__aeabi_uldivmod>
 8001856:	4602      	mov	r2, r0
 8001858:	460b      	mov	r3, r1
 800185a:	4613      	mov	r3, r2
 800185c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800185e:	e053      	b.n	8001908 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001860:	4b35      	ldr	r3, [pc, #212]	; (8001938 <HAL_RCC_GetSysClockFreq+0x180>)
 8001862:	685b      	ldr	r3, [r3, #4]
 8001864:	099b      	lsrs	r3, r3, #6
 8001866:	2200      	movs	r2, #0
 8001868:	613b      	str	r3, [r7, #16]
 800186a:	617a      	str	r2, [r7, #20]
 800186c:	693b      	ldr	r3, [r7, #16]
 800186e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001872:	f04f 0b00 	mov.w	fp, #0
 8001876:	4652      	mov	r2, sl
 8001878:	465b      	mov	r3, fp
 800187a:	f04f 0000 	mov.w	r0, #0
 800187e:	f04f 0100 	mov.w	r1, #0
 8001882:	0159      	lsls	r1, r3, #5
 8001884:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001888:	0150      	lsls	r0, r2, #5
 800188a:	4602      	mov	r2, r0
 800188c:	460b      	mov	r3, r1
 800188e:	ebb2 080a 	subs.w	r8, r2, sl
 8001892:	eb63 090b 	sbc.w	r9, r3, fp
 8001896:	f04f 0200 	mov.w	r2, #0
 800189a:	f04f 0300 	mov.w	r3, #0
 800189e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80018a2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80018a6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80018aa:	ebb2 0408 	subs.w	r4, r2, r8
 80018ae:	eb63 0509 	sbc.w	r5, r3, r9
 80018b2:	f04f 0200 	mov.w	r2, #0
 80018b6:	f04f 0300 	mov.w	r3, #0
 80018ba:	00eb      	lsls	r3, r5, #3
 80018bc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80018c0:	00e2      	lsls	r2, r4, #3
 80018c2:	4614      	mov	r4, r2
 80018c4:	461d      	mov	r5, r3
 80018c6:	eb14 030a 	adds.w	r3, r4, sl
 80018ca:	603b      	str	r3, [r7, #0]
 80018cc:	eb45 030b 	adc.w	r3, r5, fp
 80018d0:	607b      	str	r3, [r7, #4]
 80018d2:	f04f 0200 	mov.w	r2, #0
 80018d6:	f04f 0300 	mov.w	r3, #0
 80018da:	e9d7 4500 	ldrd	r4, r5, [r7]
 80018de:	4629      	mov	r1, r5
 80018e0:	028b      	lsls	r3, r1, #10
 80018e2:	4621      	mov	r1, r4
 80018e4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80018e8:	4621      	mov	r1, r4
 80018ea:	028a      	lsls	r2, r1, #10
 80018ec:	4610      	mov	r0, r2
 80018ee:	4619      	mov	r1, r3
 80018f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80018f2:	2200      	movs	r2, #0
 80018f4:	60bb      	str	r3, [r7, #8]
 80018f6:	60fa      	str	r2, [r7, #12]
 80018f8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80018fc:	f7fe fc70 	bl	80001e0 <__aeabi_uldivmod>
 8001900:	4602      	mov	r2, r0
 8001902:	460b      	mov	r3, r1
 8001904:	4613      	mov	r3, r2
 8001906:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001908:	4b0b      	ldr	r3, [pc, #44]	; (8001938 <HAL_RCC_GetSysClockFreq+0x180>)
 800190a:	685b      	ldr	r3, [r3, #4]
 800190c:	0c1b      	lsrs	r3, r3, #16
 800190e:	f003 0303 	and.w	r3, r3, #3
 8001912:	3301      	adds	r3, #1
 8001914:	005b      	lsls	r3, r3, #1
 8001916:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8001918:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800191a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800191c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001920:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001922:	e002      	b.n	800192a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001924:	4b05      	ldr	r3, [pc, #20]	; (800193c <HAL_RCC_GetSysClockFreq+0x184>)
 8001926:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001928:	bf00      	nop
    }
  }
  return sysclockfreq;
 800192a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800192c:	4618      	mov	r0, r3
 800192e:	3740      	adds	r7, #64	; 0x40
 8001930:	46bd      	mov	sp, r7
 8001932:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001936:	bf00      	nop
 8001938:	40023800 	.word	0x40023800
 800193c:	00f42400 	.word	0x00f42400
 8001940:	017d7840 	.word	0x017d7840

08001944 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001944:	b480      	push	{r7}
 8001946:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001948:	4b03      	ldr	r3, [pc, #12]	; (8001958 <HAL_RCC_GetHCLKFreq+0x14>)
 800194a:	681b      	ldr	r3, [r3, #0]
}
 800194c:	4618      	mov	r0, r3
 800194e:	46bd      	mov	sp, r7
 8001950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001954:	4770      	bx	lr
 8001956:	bf00      	nop
 8001958:	20000000 	.word	0x20000000

0800195c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001960:	f7ff fff0 	bl	8001944 <HAL_RCC_GetHCLKFreq>
 8001964:	4602      	mov	r2, r0
 8001966:	4b05      	ldr	r3, [pc, #20]	; (800197c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001968:	689b      	ldr	r3, [r3, #8]
 800196a:	0a9b      	lsrs	r3, r3, #10
 800196c:	f003 0307 	and.w	r3, r3, #7
 8001970:	4903      	ldr	r1, [pc, #12]	; (8001980 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001972:	5ccb      	ldrb	r3, [r1, r3]
 8001974:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001978:	4618      	mov	r0, r3
 800197a:	bd80      	pop	{r7, pc}
 800197c:	40023800 	.word	0x40023800
 8001980:	080057b0 	.word	0x080057b0

08001984 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001984:	b480      	push	{r7}
 8001986:	b083      	sub	sp, #12
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
 800198c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	220f      	movs	r2, #15
 8001992:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001994:	4b12      	ldr	r3, [pc, #72]	; (80019e0 <HAL_RCC_GetClockConfig+0x5c>)
 8001996:	689b      	ldr	r3, [r3, #8]
 8001998:	f003 0203 	and.w	r2, r3, #3
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80019a0:	4b0f      	ldr	r3, [pc, #60]	; (80019e0 <HAL_RCC_GetClockConfig+0x5c>)
 80019a2:	689b      	ldr	r3, [r3, #8]
 80019a4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80019ac:	4b0c      	ldr	r3, [pc, #48]	; (80019e0 <HAL_RCC_GetClockConfig+0x5c>)
 80019ae:	689b      	ldr	r3, [r3, #8]
 80019b0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80019b8:	4b09      	ldr	r3, [pc, #36]	; (80019e0 <HAL_RCC_GetClockConfig+0x5c>)
 80019ba:	689b      	ldr	r3, [r3, #8]
 80019bc:	08db      	lsrs	r3, r3, #3
 80019be:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80019c6:	4b07      	ldr	r3, [pc, #28]	; (80019e4 <HAL_RCC_GetClockConfig+0x60>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f003 0207 	and.w	r2, r3, #7
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	601a      	str	r2, [r3, #0]
}
 80019d2:	bf00      	nop
 80019d4:	370c      	adds	r7, #12
 80019d6:	46bd      	mov	sp, r7
 80019d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019dc:	4770      	bx	lr
 80019de:	bf00      	nop
 80019e0:	40023800 	.word	0x40023800
 80019e4:	40023c00 	.word	0x40023c00

080019e8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b082      	sub	sp, #8
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d101      	bne.n	80019fa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80019f6:	2301      	movs	r3, #1
 80019f8:	e041      	b.n	8001a7e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a00:	b2db      	uxtb	r3, r3
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d106      	bne.n	8001a14 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	2200      	movs	r2, #0
 8001a0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001a0e:	6878      	ldr	r0, [r7, #4]
 8001a10:	f7fe ff82 	bl	8000918 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	2202      	movs	r2, #2
 8001a18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681a      	ldr	r2, [r3, #0]
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	3304      	adds	r3, #4
 8001a24:	4619      	mov	r1, r3
 8001a26:	4610      	mov	r0, r2
 8001a28:	f000 fc54 	bl	80022d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	2201      	movs	r2, #1
 8001a30:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	2201      	movs	r2, #1
 8001a38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	2201      	movs	r2, #1
 8001a40:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	2201      	movs	r2, #1
 8001a48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	2201      	movs	r2, #1
 8001a50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	2201      	movs	r2, #1
 8001a58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	2201      	movs	r2, #1
 8001a60:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	2201      	movs	r2, #1
 8001a68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	2201      	movs	r2, #1
 8001a70:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	2201      	movs	r2, #1
 8001a78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001a7c:	2300      	movs	r3, #0
}
 8001a7e:	4618      	mov	r0, r3
 8001a80:	3708      	adds	r7, #8
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bd80      	pop	{r7, pc}
	...

08001a88 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	b085      	sub	sp, #20
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a96:	b2db      	uxtb	r3, r3
 8001a98:	2b01      	cmp	r3, #1
 8001a9a:	d001      	beq.n	8001aa0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001a9c:	2301      	movs	r3, #1
 8001a9e:	e044      	b.n	8001b2a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	2202      	movs	r2, #2
 8001aa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	68da      	ldr	r2, [r3, #12]
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f042 0201 	orr.w	r2, r2, #1
 8001ab6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	4a1e      	ldr	r2, [pc, #120]	; (8001b38 <HAL_TIM_Base_Start_IT+0xb0>)
 8001abe:	4293      	cmp	r3, r2
 8001ac0:	d018      	beq.n	8001af4 <HAL_TIM_Base_Start_IT+0x6c>
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001aca:	d013      	beq.n	8001af4 <HAL_TIM_Base_Start_IT+0x6c>
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	4a1a      	ldr	r2, [pc, #104]	; (8001b3c <HAL_TIM_Base_Start_IT+0xb4>)
 8001ad2:	4293      	cmp	r3, r2
 8001ad4:	d00e      	beq.n	8001af4 <HAL_TIM_Base_Start_IT+0x6c>
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	4a19      	ldr	r2, [pc, #100]	; (8001b40 <HAL_TIM_Base_Start_IT+0xb8>)
 8001adc:	4293      	cmp	r3, r2
 8001ade:	d009      	beq.n	8001af4 <HAL_TIM_Base_Start_IT+0x6c>
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	4a17      	ldr	r2, [pc, #92]	; (8001b44 <HAL_TIM_Base_Start_IT+0xbc>)
 8001ae6:	4293      	cmp	r3, r2
 8001ae8:	d004      	beq.n	8001af4 <HAL_TIM_Base_Start_IT+0x6c>
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	4a16      	ldr	r2, [pc, #88]	; (8001b48 <HAL_TIM_Base_Start_IT+0xc0>)
 8001af0:	4293      	cmp	r3, r2
 8001af2:	d111      	bne.n	8001b18 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	689b      	ldr	r3, [r3, #8]
 8001afa:	f003 0307 	and.w	r3, r3, #7
 8001afe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	2b06      	cmp	r3, #6
 8001b04:	d010      	beq.n	8001b28 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	681a      	ldr	r2, [r3, #0]
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f042 0201 	orr.w	r2, r2, #1
 8001b14:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001b16:	e007      	b.n	8001b28 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	681a      	ldr	r2, [r3, #0]
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f042 0201 	orr.w	r2, r2, #1
 8001b26:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001b28:	2300      	movs	r3, #0
}
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	3714      	adds	r7, #20
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b34:	4770      	bx	lr
 8001b36:	bf00      	nop
 8001b38:	40010000 	.word	0x40010000
 8001b3c:	40000400 	.word	0x40000400
 8001b40:	40000800 	.word	0x40000800
 8001b44:	40000c00 	.word	0x40000c00
 8001b48:	40014000 	.word	0x40014000

08001b4c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b082      	sub	sp, #8
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d101      	bne.n	8001b5e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	e041      	b.n	8001be2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b64:	b2db      	uxtb	r3, r3
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d106      	bne.n	8001b78 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001b72:	6878      	ldr	r0, [r7, #4]
 8001b74:	f000 f839 	bl	8001bea <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	2202      	movs	r2, #2
 8001b7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681a      	ldr	r2, [r3, #0]
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	3304      	adds	r3, #4
 8001b88:	4619      	mov	r1, r3
 8001b8a:	4610      	mov	r0, r2
 8001b8c:	f000 fba2 	bl	80022d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	2201      	movs	r2, #1
 8001b94:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	2201      	movs	r2, #1
 8001b9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	2201      	movs	r2, #1
 8001ba4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	2201      	movs	r2, #1
 8001bac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	2201      	movs	r2, #1
 8001bb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	2201      	movs	r2, #1
 8001bbc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	2201      	movs	r2, #1
 8001bc4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	2201      	movs	r2, #1
 8001bcc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	2201      	movs	r2, #1
 8001bd4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	2201      	movs	r2, #1
 8001bdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001be0:	2300      	movs	r3, #0
}
 8001be2:	4618      	mov	r0, r3
 8001be4:	3708      	adds	r7, #8
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}

08001bea <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001bea:	b480      	push	{r7}
 8001bec:	b083      	sub	sp, #12
 8001bee:	af00      	add	r7, sp, #0
 8001bf0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001bf2:	bf00      	nop
 8001bf4:	370c      	adds	r7, #12
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfc:	4770      	bx	lr
	...

08001c00 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b084      	sub	sp, #16
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
 8001c08:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d109      	bne.n	8001c24 <HAL_TIM_PWM_Start+0x24>
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001c16:	b2db      	uxtb	r3, r3
 8001c18:	2b01      	cmp	r3, #1
 8001c1a:	bf14      	ite	ne
 8001c1c:	2301      	movne	r3, #1
 8001c1e:	2300      	moveq	r3, #0
 8001c20:	b2db      	uxtb	r3, r3
 8001c22:	e022      	b.n	8001c6a <HAL_TIM_PWM_Start+0x6a>
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	2b04      	cmp	r3, #4
 8001c28:	d109      	bne.n	8001c3e <HAL_TIM_PWM_Start+0x3e>
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001c30:	b2db      	uxtb	r3, r3
 8001c32:	2b01      	cmp	r3, #1
 8001c34:	bf14      	ite	ne
 8001c36:	2301      	movne	r3, #1
 8001c38:	2300      	moveq	r3, #0
 8001c3a:	b2db      	uxtb	r3, r3
 8001c3c:	e015      	b.n	8001c6a <HAL_TIM_PWM_Start+0x6a>
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	2b08      	cmp	r3, #8
 8001c42:	d109      	bne.n	8001c58 <HAL_TIM_PWM_Start+0x58>
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001c4a:	b2db      	uxtb	r3, r3
 8001c4c:	2b01      	cmp	r3, #1
 8001c4e:	bf14      	ite	ne
 8001c50:	2301      	movne	r3, #1
 8001c52:	2300      	moveq	r3, #0
 8001c54:	b2db      	uxtb	r3, r3
 8001c56:	e008      	b.n	8001c6a <HAL_TIM_PWM_Start+0x6a>
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001c5e:	b2db      	uxtb	r3, r3
 8001c60:	2b01      	cmp	r3, #1
 8001c62:	bf14      	ite	ne
 8001c64:	2301      	movne	r3, #1
 8001c66:	2300      	moveq	r3, #0
 8001c68:	b2db      	uxtb	r3, r3
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d001      	beq.n	8001c72 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8001c6e:	2301      	movs	r3, #1
 8001c70:	e068      	b.n	8001d44 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d104      	bne.n	8001c82 <HAL_TIM_PWM_Start+0x82>
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2202      	movs	r2, #2
 8001c7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001c80:	e013      	b.n	8001caa <HAL_TIM_PWM_Start+0xaa>
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	2b04      	cmp	r3, #4
 8001c86:	d104      	bne.n	8001c92 <HAL_TIM_PWM_Start+0x92>
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	2202      	movs	r2, #2
 8001c8c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001c90:	e00b      	b.n	8001caa <HAL_TIM_PWM_Start+0xaa>
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	2b08      	cmp	r3, #8
 8001c96:	d104      	bne.n	8001ca2 <HAL_TIM_PWM_Start+0xa2>
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	2202      	movs	r2, #2
 8001c9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001ca0:	e003      	b.n	8001caa <HAL_TIM_PWM_Start+0xaa>
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	2202      	movs	r2, #2
 8001ca6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	2201      	movs	r2, #1
 8001cb0:	6839      	ldr	r1, [r7, #0]
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	f000 fdb4 	bl	8002820 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4a23      	ldr	r2, [pc, #140]	; (8001d4c <HAL_TIM_PWM_Start+0x14c>)
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d107      	bne.n	8001cd2 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001cd0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	4a1d      	ldr	r2, [pc, #116]	; (8001d4c <HAL_TIM_PWM_Start+0x14c>)
 8001cd8:	4293      	cmp	r3, r2
 8001cda:	d018      	beq.n	8001d0e <HAL_TIM_PWM_Start+0x10e>
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ce4:	d013      	beq.n	8001d0e <HAL_TIM_PWM_Start+0x10e>
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	4a19      	ldr	r2, [pc, #100]	; (8001d50 <HAL_TIM_PWM_Start+0x150>)
 8001cec:	4293      	cmp	r3, r2
 8001cee:	d00e      	beq.n	8001d0e <HAL_TIM_PWM_Start+0x10e>
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	4a17      	ldr	r2, [pc, #92]	; (8001d54 <HAL_TIM_PWM_Start+0x154>)
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d009      	beq.n	8001d0e <HAL_TIM_PWM_Start+0x10e>
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	4a16      	ldr	r2, [pc, #88]	; (8001d58 <HAL_TIM_PWM_Start+0x158>)
 8001d00:	4293      	cmp	r3, r2
 8001d02:	d004      	beq.n	8001d0e <HAL_TIM_PWM_Start+0x10e>
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4a14      	ldr	r2, [pc, #80]	; (8001d5c <HAL_TIM_PWM_Start+0x15c>)
 8001d0a:	4293      	cmp	r3, r2
 8001d0c:	d111      	bne.n	8001d32 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	689b      	ldr	r3, [r3, #8]
 8001d14:	f003 0307 	and.w	r3, r3, #7
 8001d18:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	2b06      	cmp	r3, #6
 8001d1e:	d010      	beq.n	8001d42 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	681a      	ldr	r2, [r3, #0]
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f042 0201 	orr.w	r2, r2, #1
 8001d2e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d30:	e007      	b.n	8001d42 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	681a      	ldr	r2, [r3, #0]
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f042 0201 	orr.w	r2, r2, #1
 8001d40:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001d42:	2300      	movs	r3, #0
}
 8001d44:	4618      	mov	r0, r3
 8001d46:	3710      	adds	r7, #16
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	bd80      	pop	{r7, pc}
 8001d4c:	40010000 	.word	0x40010000
 8001d50:	40000400 	.word	0x40000400
 8001d54:	40000800 	.word	0x40000800
 8001d58:	40000c00 	.word	0x40000c00
 8001d5c:	40014000 	.word	0x40014000

08001d60 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b082      	sub	sp, #8
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	691b      	ldr	r3, [r3, #16]
 8001d6e:	f003 0302 	and.w	r3, r3, #2
 8001d72:	2b02      	cmp	r3, #2
 8001d74:	d122      	bne.n	8001dbc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	68db      	ldr	r3, [r3, #12]
 8001d7c:	f003 0302 	and.w	r3, r3, #2
 8001d80:	2b02      	cmp	r3, #2
 8001d82:	d11b      	bne.n	8001dbc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f06f 0202 	mvn.w	r2, #2
 8001d8c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	2201      	movs	r2, #1
 8001d92:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	699b      	ldr	r3, [r3, #24]
 8001d9a:	f003 0303 	and.w	r3, r3, #3
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d003      	beq.n	8001daa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001da2:	6878      	ldr	r0, [r7, #4]
 8001da4:	f000 fa77 	bl	8002296 <HAL_TIM_IC_CaptureCallback>
 8001da8:	e005      	b.n	8001db6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001daa:	6878      	ldr	r0, [r7, #4]
 8001dac:	f000 fa69 	bl	8002282 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001db0:	6878      	ldr	r0, [r7, #4]
 8001db2:	f000 fa7a 	bl	80022aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	2200      	movs	r2, #0
 8001dba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	691b      	ldr	r3, [r3, #16]
 8001dc2:	f003 0304 	and.w	r3, r3, #4
 8001dc6:	2b04      	cmp	r3, #4
 8001dc8:	d122      	bne.n	8001e10 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	68db      	ldr	r3, [r3, #12]
 8001dd0:	f003 0304 	and.w	r3, r3, #4
 8001dd4:	2b04      	cmp	r3, #4
 8001dd6:	d11b      	bne.n	8001e10 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f06f 0204 	mvn.w	r2, #4
 8001de0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	2202      	movs	r2, #2
 8001de6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	699b      	ldr	r3, [r3, #24]
 8001dee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d003      	beq.n	8001dfe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001df6:	6878      	ldr	r0, [r7, #4]
 8001df8:	f000 fa4d 	bl	8002296 <HAL_TIM_IC_CaptureCallback>
 8001dfc:	e005      	b.n	8001e0a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001dfe:	6878      	ldr	r0, [r7, #4]
 8001e00:	f000 fa3f 	bl	8002282 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e04:	6878      	ldr	r0, [r7, #4]
 8001e06:	f000 fa50 	bl	80022aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	691b      	ldr	r3, [r3, #16]
 8001e16:	f003 0308 	and.w	r3, r3, #8
 8001e1a:	2b08      	cmp	r3, #8
 8001e1c:	d122      	bne.n	8001e64 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	68db      	ldr	r3, [r3, #12]
 8001e24:	f003 0308 	and.w	r3, r3, #8
 8001e28:	2b08      	cmp	r3, #8
 8001e2a:	d11b      	bne.n	8001e64 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f06f 0208 	mvn.w	r2, #8
 8001e34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	2204      	movs	r2, #4
 8001e3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	69db      	ldr	r3, [r3, #28]
 8001e42:	f003 0303 	and.w	r3, r3, #3
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d003      	beq.n	8001e52 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e4a:	6878      	ldr	r0, [r7, #4]
 8001e4c:	f000 fa23 	bl	8002296 <HAL_TIM_IC_CaptureCallback>
 8001e50:	e005      	b.n	8001e5e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e52:	6878      	ldr	r0, [r7, #4]
 8001e54:	f000 fa15 	bl	8002282 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e58:	6878      	ldr	r0, [r7, #4]
 8001e5a:	f000 fa26 	bl	80022aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	2200      	movs	r2, #0
 8001e62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	691b      	ldr	r3, [r3, #16]
 8001e6a:	f003 0310 	and.w	r3, r3, #16
 8001e6e:	2b10      	cmp	r3, #16
 8001e70:	d122      	bne.n	8001eb8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	68db      	ldr	r3, [r3, #12]
 8001e78:	f003 0310 	and.w	r3, r3, #16
 8001e7c:	2b10      	cmp	r3, #16
 8001e7e:	d11b      	bne.n	8001eb8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f06f 0210 	mvn.w	r2, #16
 8001e88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	2208      	movs	r2, #8
 8001e8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	69db      	ldr	r3, [r3, #28]
 8001e96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d003      	beq.n	8001ea6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e9e:	6878      	ldr	r0, [r7, #4]
 8001ea0:	f000 f9f9 	bl	8002296 <HAL_TIM_IC_CaptureCallback>
 8001ea4:	e005      	b.n	8001eb2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ea6:	6878      	ldr	r0, [r7, #4]
 8001ea8:	f000 f9eb 	bl	8002282 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001eac:	6878      	ldr	r0, [r7, #4]
 8001eae:	f000 f9fc 	bl	80022aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	691b      	ldr	r3, [r3, #16]
 8001ebe:	f003 0301 	and.w	r3, r3, #1
 8001ec2:	2b01      	cmp	r3, #1
 8001ec4:	d10e      	bne.n	8001ee4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	68db      	ldr	r3, [r3, #12]
 8001ecc:	f003 0301 	and.w	r3, r3, #1
 8001ed0:	2b01      	cmp	r3, #1
 8001ed2:	d107      	bne.n	8001ee4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f06f 0201 	mvn.w	r2, #1
 8001edc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001ede:	6878      	ldr	r0, [r7, #4]
 8001ee0:	f7fe fcd6 	bl	8000890 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	691b      	ldr	r3, [r3, #16]
 8001eea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001eee:	2b80      	cmp	r3, #128	; 0x80
 8001ef0:	d10e      	bne.n	8001f10 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	68db      	ldr	r3, [r3, #12]
 8001ef8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001efc:	2b80      	cmp	r3, #128	; 0x80
 8001efe:	d107      	bne.n	8001f10 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001f08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001f0a:	6878      	ldr	r0, [r7, #4]
 8001f0c:	f000 fd26 	bl	800295c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	691b      	ldr	r3, [r3, #16]
 8001f16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f1a:	2b40      	cmp	r3, #64	; 0x40
 8001f1c:	d10e      	bne.n	8001f3c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	68db      	ldr	r3, [r3, #12]
 8001f24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f28:	2b40      	cmp	r3, #64	; 0x40
 8001f2a:	d107      	bne.n	8001f3c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001f34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001f36:	6878      	ldr	r0, [r7, #4]
 8001f38:	f000 f9c1 	bl	80022be <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	691b      	ldr	r3, [r3, #16]
 8001f42:	f003 0320 	and.w	r3, r3, #32
 8001f46:	2b20      	cmp	r3, #32
 8001f48:	d10e      	bne.n	8001f68 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	68db      	ldr	r3, [r3, #12]
 8001f50:	f003 0320 	and.w	r3, r3, #32
 8001f54:	2b20      	cmp	r3, #32
 8001f56:	d107      	bne.n	8001f68 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f06f 0220 	mvn.w	r2, #32
 8001f60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001f62:	6878      	ldr	r0, [r7, #4]
 8001f64:	f000 fcf0 	bl	8002948 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001f68:	bf00      	nop
 8001f6a:	3708      	adds	r7, #8
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	bd80      	pop	{r7, pc}

08001f70 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b086      	sub	sp, #24
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	60f8      	str	r0, [r7, #12]
 8001f78:	60b9      	str	r1, [r7, #8]
 8001f7a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f86:	2b01      	cmp	r3, #1
 8001f88:	d101      	bne.n	8001f8e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8001f8a:	2302      	movs	r3, #2
 8001f8c:	e0ae      	b.n	80020ec <HAL_TIM_PWM_ConfigChannel+0x17c>
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	2201      	movs	r2, #1
 8001f92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	2b0c      	cmp	r3, #12
 8001f9a:	f200 809f 	bhi.w	80020dc <HAL_TIM_PWM_ConfigChannel+0x16c>
 8001f9e:	a201      	add	r2, pc, #4	; (adr r2, 8001fa4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8001fa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fa4:	08001fd9 	.word	0x08001fd9
 8001fa8:	080020dd 	.word	0x080020dd
 8001fac:	080020dd 	.word	0x080020dd
 8001fb0:	080020dd 	.word	0x080020dd
 8001fb4:	08002019 	.word	0x08002019
 8001fb8:	080020dd 	.word	0x080020dd
 8001fbc:	080020dd 	.word	0x080020dd
 8001fc0:	080020dd 	.word	0x080020dd
 8001fc4:	0800205b 	.word	0x0800205b
 8001fc8:	080020dd 	.word	0x080020dd
 8001fcc:	080020dd 	.word	0x080020dd
 8001fd0:	080020dd 	.word	0x080020dd
 8001fd4:	0800209b 	.word	0x0800209b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	68b9      	ldr	r1, [r7, #8]
 8001fde:	4618      	mov	r0, r3
 8001fe0:	f000 f9f8 	bl	80023d4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	699a      	ldr	r2, [r3, #24]
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f042 0208 	orr.w	r2, r2, #8
 8001ff2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	699a      	ldr	r2, [r3, #24]
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f022 0204 	bic.w	r2, r2, #4
 8002002:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	6999      	ldr	r1, [r3, #24]
 800200a:	68bb      	ldr	r3, [r7, #8]
 800200c:	691a      	ldr	r2, [r3, #16]
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	430a      	orrs	r2, r1
 8002014:	619a      	str	r2, [r3, #24]
      break;
 8002016:	e064      	b.n	80020e2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	68b9      	ldr	r1, [r7, #8]
 800201e:	4618      	mov	r0, r3
 8002020:	f000 fa3e 	bl	80024a0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	699a      	ldr	r2, [r3, #24]
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002032:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	699a      	ldr	r2, [r3, #24]
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002042:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	6999      	ldr	r1, [r3, #24]
 800204a:	68bb      	ldr	r3, [r7, #8]
 800204c:	691b      	ldr	r3, [r3, #16]
 800204e:	021a      	lsls	r2, r3, #8
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	430a      	orrs	r2, r1
 8002056:	619a      	str	r2, [r3, #24]
      break;
 8002058:	e043      	b.n	80020e2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	68b9      	ldr	r1, [r7, #8]
 8002060:	4618      	mov	r0, r3
 8002062:	f000 fa89 	bl	8002578 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	69da      	ldr	r2, [r3, #28]
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f042 0208 	orr.w	r2, r2, #8
 8002074:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	69da      	ldr	r2, [r3, #28]
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f022 0204 	bic.w	r2, r2, #4
 8002084:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	69d9      	ldr	r1, [r3, #28]
 800208c:	68bb      	ldr	r3, [r7, #8]
 800208e:	691a      	ldr	r2, [r3, #16]
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	430a      	orrs	r2, r1
 8002096:	61da      	str	r2, [r3, #28]
      break;
 8002098:	e023      	b.n	80020e2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	68b9      	ldr	r1, [r7, #8]
 80020a0:	4618      	mov	r0, r3
 80020a2:	f000 fad3 	bl	800264c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	69da      	ldr	r2, [r3, #28]
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80020b4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	69da      	ldr	r2, [r3, #28]
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80020c4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	69d9      	ldr	r1, [r3, #28]
 80020cc:	68bb      	ldr	r3, [r7, #8]
 80020ce:	691b      	ldr	r3, [r3, #16]
 80020d0:	021a      	lsls	r2, r3, #8
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	430a      	orrs	r2, r1
 80020d8:	61da      	str	r2, [r3, #28]
      break;
 80020da:	e002      	b.n	80020e2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80020dc:	2301      	movs	r3, #1
 80020de:	75fb      	strb	r3, [r7, #23]
      break;
 80020e0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	2200      	movs	r2, #0
 80020e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80020ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80020ec:	4618      	mov	r0, r3
 80020ee:	3718      	adds	r7, #24
 80020f0:	46bd      	mov	sp, r7
 80020f2:	bd80      	pop	{r7, pc}

080020f4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b084      	sub	sp, #16
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
 80020fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80020fe:	2300      	movs	r3, #0
 8002100:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002108:	2b01      	cmp	r3, #1
 800210a:	d101      	bne.n	8002110 <HAL_TIM_ConfigClockSource+0x1c>
 800210c:	2302      	movs	r3, #2
 800210e:	e0b4      	b.n	800227a <HAL_TIM_ConfigClockSource+0x186>
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	2201      	movs	r2, #1
 8002114:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2202      	movs	r2, #2
 800211c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	689b      	ldr	r3, [r3, #8]
 8002126:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002128:	68bb      	ldr	r3, [r7, #8]
 800212a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800212e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002130:	68bb      	ldr	r3, [r7, #8]
 8002132:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002136:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	68ba      	ldr	r2, [r7, #8]
 800213e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002148:	d03e      	beq.n	80021c8 <HAL_TIM_ConfigClockSource+0xd4>
 800214a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800214e:	f200 8087 	bhi.w	8002260 <HAL_TIM_ConfigClockSource+0x16c>
 8002152:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002156:	f000 8086 	beq.w	8002266 <HAL_TIM_ConfigClockSource+0x172>
 800215a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800215e:	d87f      	bhi.n	8002260 <HAL_TIM_ConfigClockSource+0x16c>
 8002160:	2b70      	cmp	r3, #112	; 0x70
 8002162:	d01a      	beq.n	800219a <HAL_TIM_ConfigClockSource+0xa6>
 8002164:	2b70      	cmp	r3, #112	; 0x70
 8002166:	d87b      	bhi.n	8002260 <HAL_TIM_ConfigClockSource+0x16c>
 8002168:	2b60      	cmp	r3, #96	; 0x60
 800216a:	d050      	beq.n	800220e <HAL_TIM_ConfigClockSource+0x11a>
 800216c:	2b60      	cmp	r3, #96	; 0x60
 800216e:	d877      	bhi.n	8002260 <HAL_TIM_ConfigClockSource+0x16c>
 8002170:	2b50      	cmp	r3, #80	; 0x50
 8002172:	d03c      	beq.n	80021ee <HAL_TIM_ConfigClockSource+0xfa>
 8002174:	2b50      	cmp	r3, #80	; 0x50
 8002176:	d873      	bhi.n	8002260 <HAL_TIM_ConfigClockSource+0x16c>
 8002178:	2b40      	cmp	r3, #64	; 0x40
 800217a:	d058      	beq.n	800222e <HAL_TIM_ConfigClockSource+0x13a>
 800217c:	2b40      	cmp	r3, #64	; 0x40
 800217e:	d86f      	bhi.n	8002260 <HAL_TIM_ConfigClockSource+0x16c>
 8002180:	2b30      	cmp	r3, #48	; 0x30
 8002182:	d064      	beq.n	800224e <HAL_TIM_ConfigClockSource+0x15a>
 8002184:	2b30      	cmp	r3, #48	; 0x30
 8002186:	d86b      	bhi.n	8002260 <HAL_TIM_ConfigClockSource+0x16c>
 8002188:	2b20      	cmp	r3, #32
 800218a:	d060      	beq.n	800224e <HAL_TIM_ConfigClockSource+0x15a>
 800218c:	2b20      	cmp	r3, #32
 800218e:	d867      	bhi.n	8002260 <HAL_TIM_ConfigClockSource+0x16c>
 8002190:	2b00      	cmp	r3, #0
 8002192:	d05c      	beq.n	800224e <HAL_TIM_ConfigClockSource+0x15a>
 8002194:	2b10      	cmp	r3, #16
 8002196:	d05a      	beq.n	800224e <HAL_TIM_ConfigClockSource+0x15a>
 8002198:	e062      	b.n	8002260 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6818      	ldr	r0, [r3, #0]
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	6899      	ldr	r1, [r3, #8]
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	685a      	ldr	r2, [r3, #4]
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	68db      	ldr	r3, [r3, #12]
 80021aa:	f000 fb19 	bl	80027e0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	689b      	ldr	r3, [r3, #8]
 80021b4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80021b6:	68bb      	ldr	r3, [r7, #8]
 80021b8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80021bc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	68ba      	ldr	r2, [r7, #8]
 80021c4:	609a      	str	r2, [r3, #8]
      break;
 80021c6:	e04f      	b.n	8002268 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6818      	ldr	r0, [r3, #0]
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	6899      	ldr	r1, [r3, #8]
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	685a      	ldr	r2, [r3, #4]
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	68db      	ldr	r3, [r3, #12]
 80021d8:	f000 fb02 	bl	80027e0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	689a      	ldr	r2, [r3, #8]
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80021ea:	609a      	str	r2, [r3, #8]
      break;
 80021ec:	e03c      	b.n	8002268 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6818      	ldr	r0, [r3, #0]
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	6859      	ldr	r1, [r3, #4]
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	68db      	ldr	r3, [r3, #12]
 80021fa:	461a      	mov	r2, r3
 80021fc:	f000 fa76 	bl	80026ec <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	2150      	movs	r1, #80	; 0x50
 8002206:	4618      	mov	r0, r3
 8002208:	f000 facf 	bl	80027aa <TIM_ITRx_SetConfig>
      break;
 800220c:	e02c      	b.n	8002268 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6818      	ldr	r0, [r3, #0]
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	6859      	ldr	r1, [r3, #4]
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	68db      	ldr	r3, [r3, #12]
 800221a:	461a      	mov	r2, r3
 800221c:	f000 fa95 	bl	800274a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	2160      	movs	r1, #96	; 0x60
 8002226:	4618      	mov	r0, r3
 8002228:	f000 fabf 	bl	80027aa <TIM_ITRx_SetConfig>
      break;
 800222c:	e01c      	b.n	8002268 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6818      	ldr	r0, [r3, #0]
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	6859      	ldr	r1, [r3, #4]
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	68db      	ldr	r3, [r3, #12]
 800223a:	461a      	mov	r2, r3
 800223c:	f000 fa56 	bl	80026ec <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	2140      	movs	r1, #64	; 0x40
 8002246:	4618      	mov	r0, r3
 8002248:	f000 faaf 	bl	80027aa <TIM_ITRx_SetConfig>
      break;
 800224c:	e00c      	b.n	8002268 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681a      	ldr	r2, [r3, #0]
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	4619      	mov	r1, r3
 8002258:	4610      	mov	r0, r2
 800225a:	f000 faa6 	bl	80027aa <TIM_ITRx_SetConfig>
      break;
 800225e:	e003      	b.n	8002268 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002260:	2301      	movs	r3, #1
 8002262:	73fb      	strb	r3, [r7, #15]
      break;
 8002264:	e000      	b.n	8002268 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002266:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	2201      	movs	r2, #1
 800226c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2200      	movs	r2, #0
 8002274:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002278:	7bfb      	ldrb	r3, [r7, #15]
}
 800227a:	4618      	mov	r0, r3
 800227c:	3710      	adds	r7, #16
 800227e:	46bd      	mov	sp, r7
 8002280:	bd80      	pop	{r7, pc}

08002282 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002282:	b480      	push	{r7}
 8002284:	b083      	sub	sp, #12
 8002286:	af00      	add	r7, sp, #0
 8002288:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800228a:	bf00      	nop
 800228c:	370c      	adds	r7, #12
 800228e:	46bd      	mov	sp, r7
 8002290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002294:	4770      	bx	lr

08002296 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002296:	b480      	push	{r7}
 8002298:	b083      	sub	sp, #12
 800229a:	af00      	add	r7, sp, #0
 800229c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800229e:	bf00      	nop
 80022a0:	370c      	adds	r7, #12
 80022a2:	46bd      	mov	sp, r7
 80022a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a8:	4770      	bx	lr

080022aa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80022aa:	b480      	push	{r7}
 80022ac:	b083      	sub	sp, #12
 80022ae:	af00      	add	r7, sp, #0
 80022b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80022b2:	bf00      	nop
 80022b4:	370c      	adds	r7, #12
 80022b6:	46bd      	mov	sp, r7
 80022b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022bc:	4770      	bx	lr

080022be <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80022be:	b480      	push	{r7}
 80022c0:	b083      	sub	sp, #12
 80022c2:	af00      	add	r7, sp, #0
 80022c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80022c6:	bf00      	nop
 80022c8:	370c      	adds	r7, #12
 80022ca:	46bd      	mov	sp, r7
 80022cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d0:	4770      	bx	lr
	...

080022d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80022d4:	b480      	push	{r7}
 80022d6:	b085      	sub	sp, #20
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
 80022dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	4a34      	ldr	r2, [pc, #208]	; (80023b8 <TIM_Base_SetConfig+0xe4>)
 80022e8:	4293      	cmp	r3, r2
 80022ea:	d00f      	beq.n	800230c <TIM_Base_SetConfig+0x38>
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022f2:	d00b      	beq.n	800230c <TIM_Base_SetConfig+0x38>
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	4a31      	ldr	r2, [pc, #196]	; (80023bc <TIM_Base_SetConfig+0xe8>)
 80022f8:	4293      	cmp	r3, r2
 80022fa:	d007      	beq.n	800230c <TIM_Base_SetConfig+0x38>
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	4a30      	ldr	r2, [pc, #192]	; (80023c0 <TIM_Base_SetConfig+0xec>)
 8002300:	4293      	cmp	r3, r2
 8002302:	d003      	beq.n	800230c <TIM_Base_SetConfig+0x38>
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	4a2f      	ldr	r2, [pc, #188]	; (80023c4 <TIM_Base_SetConfig+0xf0>)
 8002308:	4293      	cmp	r3, r2
 800230a:	d108      	bne.n	800231e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002312:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	685b      	ldr	r3, [r3, #4]
 8002318:	68fa      	ldr	r2, [r7, #12]
 800231a:	4313      	orrs	r3, r2
 800231c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	4a25      	ldr	r2, [pc, #148]	; (80023b8 <TIM_Base_SetConfig+0xe4>)
 8002322:	4293      	cmp	r3, r2
 8002324:	d01b      	beq.n	800235e <TIM_Base_SetConfig+0x8a>
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800232c:	d017      	beq.n	800235e <TIM_Base_SetConfig+0x8a>
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	4a22      	ldr	r2, [pc, #136]	; (80023bc <TIM_Base_SetConfig+0xe8>)
 8002332:	4293      	cmp	r3, r2
 8002334:	d013      	beq.n	800235e <TIM_Base_SetConfig+0x8a>
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	4a21      	ldr	r2, [pc, #132]	; (80023c0 <TIM_Base_SetConfig+0xec>)
 800233a:	4293      	cmp	r3, r2
 800233c:	d00f      	beq.n	800235e <TIM_Base_SetConfig+0x8a>
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	4a20      	ldr	r2, [pc, #128]	; (80023c4 <TIM_Base_SetConfig+0xf0>)
 8002342:	4293      	cmp	r3, r2
 8002344:	d00b      	beq.n	800235e <TIM_Base_SetConfig+0x8a>
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	4a1f      	ldr	r2, [pc, #124]	; (80023c8 <TIM_Base_SetConfig+0xf4>)
 800234a:	4293      	cmp	r3, r2
 800234c:	d007      	beq.n	800235e <TIM_Base_SetConfig+0x8a>
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	4a1e      	ldr	r2, [pc, #120]	; (80023cc <TIM_Base_SetConfig+0xf8>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d003      	beq.n	800235e <TIM_Base_SetConfig+0x8a>
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	4a1d      	ldr	r2, [pc, #116]	; (80023d0 <TIM_Base_SetConfig+0xfc>)
 800235a:	4293      	cmp	r3, r2
 800235c:	d108      	bne.n	8002370 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002364:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	68db      	ldr	r3, [r3, #12]
 800236a:	68fa      	ldr	r2, [r7, #12]
 800236c:	4313      	orrs	r3, r2
 800236e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	695b      	ldr	r3, [r3, #20]
 800237a:	4313      	orrs	r3, r2
 800237c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	68fa      	ldr	r2, [r7, #12]
 8002382:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	689a      	ldr	r2, [r3, #8]
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	681a      	ldr	r2, [r3, #0]
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	4a08      	ldr	r2, [pc, #32]	; (80023b8 <TIM_Base_SetConfig+0xe4>)
 8002398:	4293      	cmp	r3, r2
 800239a:	d103      	bne.n	80023a4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	691a      	ldr	r2, [r3, #16]
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2201      	movs	r2, #1
 80023a8:	615a      	str	r2, [r3, #20]
}
 80023aa:	bf00      	nop
 80023ac:	3714      	adds	r7, #20
 80023ae:	46bd      	mov	sp, r7
 80023b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b4:	4770      	bx	lr
 80023b6:	bf00      	nop
 80023b8:	40010000 	.word	0x40010000
 80023bc:	40000400 	.word	0x40000400
 80023c0:	40000800 	.word	0x40000800
 80023c4:	40000c00 	.word	0x40000c00
 80023c8:	40014000 	.word	0x40014000
 80023cc:	40014400 	.word	0x40014400
 80023d0:	40014800 	.word	0x40014800

080023d4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80023d4:	b480      	push	{r7}
 80023d6:	b087      	sub	sp, #28
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
 80023dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6a1b      	ldr	r3, [r3, #32]
 80023e2:	f023 0201 	bic.w	r2, r3, #1
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6a1b      	ldr	r3, [r3, #32]
 80023ee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	685b      	ldr	r3, [r3, #4]
 80023f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	699b      	ldr	r3, [r3, #24]
 80023fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002402:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	f023 0303 	bic.w	r3, r3, #3
 800240a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	68fa      	ldr	r2, [r7, #12]
 8002412:	4313      	orrs	r3, r2
 8002414:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002416:	697b      	ldr	r3, [r7, #20]
 8002418:	f023 0302 	bic.w	r3, r3, #2
 800241c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	689b      	ldr	r3, [r3, #8]
 8002422:	697a      	ldr	r2, [r7, #20]
 8002424:	4313      	orrs	r3, r2
 8002426:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	4a1c      	ldr	r2, [pc, #112]	; (800249c <TIM_OC1_SetConfig+0xc8>)
 800242c:	4293      	cmp	r3, r2
 800242e:	d10c      	bne.n	800244a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002430:	697b      	ldr	r3, [r7, #20]
 8002432:	f023 0308 	bic.w	r3, r3, #8
 8002436:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	68db      	ldr	r3, [r3, #12]
 800243c:	697a      	ldr	r2, [r7, #20]
 800243e:	4313      	orrs	r3, r2
 8002440:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002442:	697b      	ldr	r3, [r7, #20]
 8002444:	f023 0304 	bic.w	r3, r3, #4
 8002448:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	4a13      	ldr	r2, [pc, #76]	; (800249c <TIM_OC1_SetConfig+0xc8>)
 800244e:	4293      	cmp	r3, r2
 8002450:	d111      	bne.n	8002476 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002452:	693b      	ldr	r3, [r7, #16]
 8002454:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002458:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800245a:	693b      	ldr	r3, [r7, #16]
 800245c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002460:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	695b      	ldr	r3, [r3, #20]
 8002466:	693a      	ldr	r2, [r7, #16]
 8002468:	4313      	orrs	r3, r2
 800246a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	699b      	ldr	r3, [r3, #24]
 8002470:	693a      	ldr	r2, [r7, #16]
 8002472:	4313      	orrs	r3, r2
 8002474:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	693a      	ldr	r2, [r7, #16]
 800247a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	68fa      	ldr	r2, [r7, #12]
 8002480:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	685a      	ldr	r2, [r3, #4]
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	697a      	ldr	r2, [r7, #20]
 800248e:	621a      	str	r2, [r3, #32]
}
 8002490:	bf00      	nop
 8002492:	371c      	adds	r7, #28
 8002494:	46bd      	mov	sp, r7
 8002496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249a:	4770      	bx	lr
 800249c:	40010000 	.word	0x40010000

080024a0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80024a0:	b480      	push	{r7}
 80024a2:	b087      	sub	sp, #28
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
 80024a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6a1b      	ldr	r3, [r3, #32]
 80024ae:	f023 0210 	bic.w	r2, r3, #16
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6a1b      	ldr	r3, [r3, #32]
 80024ba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	685b      	ldr	r3, [r3, #4]
 80024c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	699b      	ldr	r3, [r3, #24]
 80024c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80024ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80024d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	021b      	lsls	r3, r3, #8
 80024de:	68fa      	ldr	r2, [r7, #12]
 80024e0:	4313      	orrs	r3, r2
 80024e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80024e4:	697b      	ldr	r3, [r7, #20]
 80024e6:	f023 0320 	bic.w	r3, r3, #32
 80024ea:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	689b      	ldr	r3, [r3, #8]
 80024f0:	011b      	lsls	r3, r3, #4
 80024f2:	697a      	ldr	r2, [r7, #20]
 80024f4:	4313      	orrs	r3, r2
 80024f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	4a1e      	ldr	r2, [pc, #120]	; (8002574 <TIM_OC2_SetConfig+0xd4>)
 80024fc:	4293      	cmp	r3, r2
 80024fe:	d10d      	bne.n	800251c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002500:	697b      	ldr	r3, [r7, #20]
 8002502:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002506:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	68db      	ldr	r3, [r3, #12]
 800250c:	011b      	lsls	r3, r3, #4
 800250e:	697a      	ldr	r2, [r7, #20]
 8002510:	4313      	orrs	r3, r2
 8002512:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002514:	697b      	ldr	r3, [r7, #20]
 8002516:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800251a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	4a15      	ldr	r2, [pc, #84]	; (8002574 <TIM_OC2_SetConfig+0xd4>)
 8002520:	4293      	cmp	r3, r2
 8002522:	d113      	bne.n	800254c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002524:	693b      	ldr	r3, [r7, #16]
 8002526:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800252a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800252c:	693b      	ldr	r3, [r7, #16]
 800252e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002532:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	695b      	ldr	r3, [r3, #20]
 8002538:	009b      	lsls	r3, r3, #2
 800253a:	693a      	ldr	r2, [r7, #16]
 800253c:	4313      	orrs	r3, r2
 800253e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	699b      	ldr	r3, [r3, #24]
 8002544:	009b      	lsls	r3, r3, #2
 8002546:	693a      	ldr	r2, [r7, #16]
 8002548:	4313      	orrs	r3, r2
 800254a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	693a      	ldr	r2, [r7, #16]
 8002550:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	68fa      	ldr	r2, [r7, #12]
 8002556:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	685a      	ldr	r2, [r3, #4]
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	697a      	ldr	r2, [r7, #20]
 8002564:	621a      	str	r2, [r3, #32]
}
 8002566:	bf00      	nop
 8002568:	371c      	adds	r7, #28
 800256a:	46bd      	mov	sp, r7
 800256c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002570:	4770      	bx	lr
 8002572:	bf00      	nop
 8002574:	40010000 	.word	0x40010000

08002578 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002578:	b480      	push	{r7}
 800257a:	b087      	sub	sp, #28
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
 8002580:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6a1b      	ldr	r3, [r3, #32]
 8002586:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6a1b      	ldr	r3, [r3, #32]
 8002592:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	69db      	ldr	r3, [r3, #28]
 800259e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	f023 0303 	bic.w	r3, r3, #3
 80025ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	68fa      	ldr	r2, [r7, #12]
 80025b6:	4313      	orrs	r3, r2
 80025b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80025ba:	697b      	ldr	r3, [r7, #20]
 80025bc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80025c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	689b      	ldr	r3, [r3, #8]
 80025c6:	021b      	lsls	r3, r3, #8
 80025c8:	697a      	ldr	r2, [r7, #20]
 80025ca:	4313      	orrs	r3, r2
 80025cc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	4a1d      	ldr	r2, [pc, #116]	; (8002648 <TIM_OC3_SetConfig+0xd0>)
 80025d2:	4293      	cmp	r3, r2
 80025d4:	d10d      	bne.n	80025f2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80025d6:	697b      	ldr	r3, [r7, #20]
 80025d8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80025dc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	68db      	ldr	r3, [r3, #12]
 80025e2:	021b      	lsls	r3, r3, #8
 80025e4:	697a      	ldr	r2, [r7, #20]
 80025e6:	4313      	orrs	r3, r2
 80025e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80025ea:	697b      	ldr	r3, [r7, #20]
 80025ec:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80025f0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	4a14      	ldr	r2, [pc, #80]	; (8002648 <TIM_OC3_SetConfig+0xd0>)
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d113      	bne.n	8002622 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80025fa:	693b      	ldr	r3, [r7, #16]
 80025fc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002600:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002602:	693b      	ldr	r3, [r7, #16]
 8002604:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002608:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	695b      	ldr	r3, [r3, #20]
 800260e:	011b      	lsls	r3, r3, #4
 8002610:	693a      	ldr	r2, [r7, #16]
 8002612:	4313      	orrs	r3, r2
 8002614:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	699b      	ldr	r3, [r3, #24]
 800261a:	011b      	lsls	r3, r3, #4
 800261c:	693a      	ldr	r2, [r7, #16]
 800261e:	4313      	orrs	r3, r2
 8002620:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	693a      	ldr	r2, [r7, #16]
 8002626:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	68fa      	ldr	r2, [r7, #12]
 800262c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	685a      	ldr	r2, [r3, #4]
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	697a      	ldr	r2, [r7, #20]
 800263a:	621a      	str	r2, [r3, #32]
}
 800263c:	bf00      	nop
 800263e:	371c      	adds	r7, #28
 8002640:	46bd      	mov	sp, r7
 8002642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002646:	4770      	bx	lr
 8002648:	40010000 	.word	0x40010000

0800264c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800264c:	b480      	push	{r7}
 800264e:	b087      	sub	sp, #28
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
 8002654:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6a1b      	ldr	r3, [r3, #32]
 800265a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6a1b      	ldr	r3, [r3, #32]
 8002666:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	685b      	ldr	r3, [r3, #4]
 800266c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	69db      	ldr	r3, [r3, #28]
 8002672:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800267a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002682:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	021b      	lsls	r3, r3, #8
 800268a:	68fa      	ldr	r2, [r7, #12]
 800268c:	4313      	orrs	r3, r2
 800268e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002690:	693b      	ldr	r3, [r7, #16]
 8002692:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002696:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	689b      	ldr	r3, [r3, #8]
 800269c:	031b      	lsls	r3, r3, #12
 800269e:	693a      	ldr	r2, [r7, #16]
 80026a0:	4313      	orrs	r3, r2
 80026a2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	4a10      	ldr	r2, [pc, #64]	; (80026e8 <TIM_OC4_SetConfig+0x9c>)
 80026a8:	4293      	cmp	r3, r2
 80026aa:	d109      	bne.n	80026c0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80026ac:	697b      	ldr	r3, [r7, #20]
 80026ae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80026b2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	695b      	ldr	r3, [r3, #20]
 80026b8:	019b      	lsls	r3, r3, #6
 80026ba:	697a      	ldr	r2, [r7, #20]
 80026bc:	4313      	orrs	r3, r2
 80026be:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	697a      	ldr	r2, [r7, #20]
 80026c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	68fa      	ldr	r2, [r7, #12]
 80026ca:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	685a      	ldr	r2, [r3, #4]
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	693a      	ldr	r2, [r7, #16]
 80026d8:	621a      	str	r2, [r3, #32]
}
 80026da:	bf00      	nop
 80026dc:	371c      	adds	r7, #28
 80026de:	46bd      	mov	sp, r7
 80026e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e4:	4770      	bx	lr
 80026e6:	bf00      	nop
 80026e8:	40010000 	.word	0x40010000

080026ec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80026ec:	b480      	push	{r7}
 80026ee:	b087      	sub	sp, #28
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	60f8      	str	r0, [r7, #12]
 80026f4:	60b9      	str	r1, [r7, #8]
 80026f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	6a1b      	ldr	r3, [r3, #32]
 80026fc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	6a1b      	ldr	r3, [r3, #32]
 8002702:	f023 0201 	bic.w	r2, r3, #1
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	699b      	ldr	r3, [r3, #24]
 800270e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002710:	693b      	ldr	r3, [r7, #16]
 8002712:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002716:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	011b      	lsls	r3, r3, #4
 800271c:	693a      	ldr	r2, [r7, #16]
 800271e:	4313      	orrs	r3, r2
 8002720:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002722:	697b      	ldr	r3, [r7, #20]
 8002724:	f023 030a 	bic.w	r3, r3, #10
 8002728:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800272a:	697a      	ldr	r2, [r7, #20]
 800272c:	68bb      	ldr	r3, [r7, #8]
 800272e:	4313      	orrs	r3, r2
 8002730:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	693a      	ldr	r2, [r7, #16]
 8002736:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	697a      	ldr	r2, [r7, #20]
 800273c:	621a      	str	r2, [r3, #32]
}
 800273e:	bf00      	nop
 8002740:	371c      	adds	r7, #28
 8002742:	46bd      	mov	sp, r7
 8002744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002748:	4770      	bx	lr

0800274a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800274a:	b480      	push	{r7}
 800274c:	b087      	sub	sp, #28
 800274e:	af00      	add	r7, sp, #0
 8002750:	60f8      	str	r0, [r7, #12]
 8002752:	60b9      	str	r1, [r7, #8]
 8002754:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	6a1b      	ldr	r3, [r3, #32]
 800275a:	f023 0210 	bic.w	r2, r3, #16
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	699b      	ldr	r3, [r3, #24]
 8002766:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	6a1b      	ldr	r3, [r3, #32]
 800276c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800276e:	697b      	ldr	r3, [r7, #20]
 8002770:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002774:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	031b      	lsls	r3, r3, #12
 800277a:	697a      	ldr	r2, [r7, #20]
 800277c:	4313      	orrs	r3, r2
 800277e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002780:	693b      	ldr	r3, [r7, #16]
 8002782:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002786:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002788:	68bb      	ldr	r3, [r7, #8]
 800278a:	011b      	lsls	r3, r3, #4
 800278c:	693a      	ldr	r2, [r7, #16]
 800278e:	4313      	orrs	r3, r2
 8002790:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	697a      	ldr	r2, [r7, #20]
 8002796:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	693a      	ldr	r2, [r7, #16]
 800279c:	621a      	str	r2, [r3, #32]
}
 800279e:	bf00      	nop
 80027a0:	371c      	adds	r7, #28
 80027a2:	46bd      	mov	sp, r7
 80027a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a8:	4770      	bx	lr

080027aa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80027aa:	b480      	push	{r7}
 80027ac:	b085      	sub	sp, #20
 80027ae:	af00      	add	r7, sp, #0
 80027b0:	6078      	str	r0, [r7, #4]
 80027b2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	689b      	ldr	r3, [r3, #8]
 80027b8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027c0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80027c2:	683a      	ldr	r2, [r7, #0]
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	4313      	orrs	r3, r2
 80027c8:	f043 0307 	orr.w	r3, r3, #7
 80027cc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	68fa      	ldr	r2, [r7, #12]
 80027d2:	609a      	str	r2, [r3, #8]
}
 80027d4:	bf00      	nop
 80027d6:	3714      	adds	r7, #20
 80027d8:	46bd      	mov	sp, r7
 80027da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027de:	4770      	bx	lr

080027e0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80027e0:	b480      	push	{r7}
 80027e2:	b087      	sub	sp, #28
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	60f8      	str	r0, [r7, #12]
 80027e8:	60b9      	str	r1, [r7, #8]
 80027ea:	607a      	str	r2, [r7, #4]
 80027ec:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	689b      	ldr	r3, [r3, #8]
 80027f2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80027f4:	697b      	ldr	r3, [r7, #20]
 80027f6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80027fa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	021a      	lsls	r2, r3, #8
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	431a      	orrs	r2, r3
 8002804:	68bb      	ldr	r3, [r7, #8]
 8002806:	4313      	orrs	r3, r2
 8002808:	697a      	ldr	r2, [r7, #20]
 800280a:	4313      	orrs	r3, r2
 800280c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	697a      	ldr	r2, [r7, #20]
 8002812:	609a      	str	r2, [r3, #8]
}
 8002814:	bf00      	nop
 8002816:	371c      	adds	r7, #28
 8002818:	46bd      	mov	sp, r7
 800281a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281e:	4770      	bx	lr

08002820 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002820:	b480      	push	{r7}
 8002822:	b087      	sub	sp, #28
 8002824:	af00      	add	r7, sp, #0
 8002826:	60f8      	str	r0, [r7, #12]
 8002828:	60b9      	str	r1, [r7, #8]
 800282a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800282c:	68bb      	ldr	r3, [r7, #8]
 800282e:	f003 031f 	and.w	r3, r3, #31
 8002832:	2201      	movs	r2, #1
 8002834:	fa02 f303 	lsl.w	r3, r2, r3
 8002838:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	6a1a      	ldr	r2, [r3, #32]
 800283e:	697b      	ldr	r3, [r7, #20]
 8002840:	43db      	mvns	r3, r3
 8002842:	401a      	ands	r2, r3
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	6a1a      	ldr	r2, [r3, #32]
 800284c:	68bb      	ldr	r3, [r7, #8]
 800284e:	f003 031f 	and.w	r3, r3, #31
 8002852:	6879      	ldr	r1, [r7, #4]
 8002854:	fa01 f303 	lsl.w	r3, r1, r3
 8002858:	431a      	orrs	r2, r3
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	621a      	str	r2, [r3, #32]
}
 800285e:	bf00      	nop
 8002860:	371c      	adds	r7, #28
 8002862:	46bd      	mov	sp, r7
 8002864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002868:	4770      	bx	lr
	...

0800286c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800286c:	b480      	push	{r7}
 800286e:	b085      	sub	sp, #20
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
 8002874:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800287c:	2b01      	cmp	r3, #1
 800287e:	d101      	bne.n	8002884 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002880:	2302      	movs	r3, #2
 8002882:	e050      	b.n	8002926 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2201      	movs	r2, #1
 8002888:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2202      	movs	r2, #2
 8002890:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	689b      	ldr	r3, [r3, #8]
 80028a2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028aa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	68fa      	ldr	r2, [r7, #12]
 80028b2:	4313      	orrs	r3, r2
 80028b4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	68fa      	ldr	r2, [r7, #12]
 80028bc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	4a1c      	ldr	r2, [pc, #112]	; (8002934 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80028c4:	4293      	cmp	r3, r2
 80028c6:	d018      	beq.n	80028fa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028d0:	d013      	beq.n	80028fa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	4a18      	ldr	r2, [pc, #96]	; (8002938 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80028d8:	4293      	cmp	r3, r2
 80028da:	d00e      	beq.n	80028fa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4a16      	ldr	r2, [pc, #88]	; (800293c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d009      	beq.n	80028fa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	4a15      	ldr	r2, [pc, #84]	; (8002940 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80028ec:	4293      	cmp	r3, r2
 80028ee:	d004      	beq.n	80028fa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	4a13      	ldr	r2, [pc, #76]	; (8002944 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80028f6:	4293      	cmp	r3, r2
 80028f8:	d10c      	bne.n	8002914 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80028fa:	68bb      	ldr	r3, [r7, #8]
 80028fc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002900:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	685b      	ldr	r3, [r3, #4]
 8002906:	68ba      	ldr	r2, [r7, #8]
 8002908:	4313      	orrs	r3, r2
 800290a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	68ba      	ldr	r2, [r7, #8]
 8002912:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2201      	movs	r2, #1
 8002918:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2200      	movs	r2, #0
 8002920:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002924:	2300      	movs	r3, #0
}
 8002926:	4618      	mov	r0, r3
 8002928:	3714      	adds	r7, #20
 800292a:	46bd      	mov	sp, r7
 800292c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002930:	4770      	bx	lr
 8002932:	bf00      	nop
 8002934:	40010000 	.word	0x40010000
 8002938:	40000400 	.word	0x40000400
 800293c:	40000800 	.word	0x40000800
 8002940:	40000c00 	.word	0x40000c00
 8002944:	40014000 	.word	0x40014000

08002948 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002948:	b480      	push	{r7}
 800294a:	b083      	sub	sp, #12
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002950:	bf00      	nop
 8002952:	370c      	adds	r7, #12
 8002954:	46bd      	mov	sp, r7
 8002956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295a:	4770      	bx	lr

0800295c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800295c:	b480      	push	{r7}
 800295e:	b083      	sub	sp, #12
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002964:	bf00      	nop
 8002966:	370c      	adds	r7, #12
 8002968:	46bd      	mov	sp, r7
 800296a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296e:	4770      	bx	lr

08002970 <__NVIC_SetPriority>:
{
 8002970:	b480      	push	{r7}
 8002972:	b083      	sub	sp, #12
 8002974:	af00      	add	r7, sp, #0
 8002976:	4603      	mov	r3, r0
 8002978:	6039      	str	r1, [r7, #0]
 800297a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800297c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002980:	2b00      	cmp	r3, #0
 8002982:	db0a      	blt.n	800299a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	b2da      	uxtb	r2, r3
 8002988:	490c      	ldr	r1, [pc, #48]	; (80029bc <__NVIC_SetPriority+0x4c>)
 800298a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800298e:	0112      	lsls	r2, r2, #4
 8002990:	b2d2      	uxtb	r2, r2
 8002992:	440b      	add	r3, r1
 8002994:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002998:	e00a      	b.n	80029b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	b2da      	uxtb	r2, r3
 800299e:	4908      	ldr	r1, [pc, #32]	; (80029c0 <__NVIC_SetPriority+0x50>)
 80029a0:	79fb      	ldrb	r3, [r7, #7]
 80029a2:	f003 030f 	and.w	r3, r3, #15
 80029a6:	3b04      	subs	r3, #4
 80029a8:	0112      	lsls	r2, r2, #4
 80029aa:	b2d2      	uxtb	r2, r2
 80029ac:	440b      	add	r3, r1
 80029ae:	761a      	strb	r2, [r3, #24]
}
 80029b0:	bf00      	nop
 80029b2:	370c      	adds	r7, #12
 80029b4:	46bd      	mov	sp, r7
 80029b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ba:	4770      	bx	lr
 80029bc:	e000e100 	.word	0xe000e100
 80029c0:	e000ed00 	.word	0xe000ed00

080029c4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80029c4:	b580      	push	{r7, lr}
 80029c6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80029c8:	4b05      	ldr	r3, [pc, #20]	; (80029e0 <SysTick_Handler+0x1c>)
 80029ca:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80029cc:	f001 fd28 	bl	8004420 <xTaskGetSchedulerState>
 80029d0:	4603      	mov	r3, r0
 80029d2:	2b01      	cmp	r3, #1
 80029d4:	d001      	beq.n	80029da <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80029d6:	f002 fb0f 	bl	8004ff8 <xPortSysTickHandler>
  }
}
 80029da:	bf00      	nop
 80029dc:	bd80      	pop	{r7, pc}
 80029de:	bf00      	nop
 80029e0:	e000e010 	.word	0xe000e010

080029e4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80029e4:	b580      	push	{r7, lr}
 80029e6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80029e8:	2100      	movs	r1, #0
 80029ea:	f06f 0004 	mvn.w	r0, #4
 80029ee:	f7ff ffbf 	bl	8002970 <__NVIC_SetPriority>
#endif
}
 80029f2:	bf00      	nop
 80029f4:	bd80      	pop	{r7, pc}
	...

080029f8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80029f8:	b480      	push	{r7}
 80029fa:	b083      	sub	sp, #12
 80029fc:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80029fe:	f3ef 8305 	mrs	r3, IPSR
 8002a02:	603b      	str	r3, [r7, #0]
  return(result);
 8002a04:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d003      	beq.n	8002a12 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8002a0a:	f06f 0305 	mvn.w	r3, #5
 8002a0e:	607b      	str	r3, [r7, #4]
 8002a10:	e00c      	b.n	8002a2c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8002a12:	4b0a      	ldr	r3, [pc, #40]	; (8002a3c <osKernelInitialize+0x44>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d105      	bne.n	8002a26 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8002a1a:	4b08      	ldr	r3, [pc, #32]	; (8002a3c <osKernelInitialize+0x44>)
 8002a1c:	2201      	movs	r2, #1
 8002a1e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8002a20:	2300      	movs	r3, #0
 8002a22:	607b      	str	r3, [r7, #4]
 8002a24:	e002      	b.n	8002a2c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8002a26:	f04f 33ff 	mov.w	r3, #4294967295
 8002a2a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002a2c:	687b      	ldr	r3, [r7, #4]
}
 8002a2e:	4618      	mov	r0, r3
 8002a30:	370c      	adds	r7, #12
 8002a32:	46bd      	mov	sp, r7
 8002a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a38:	4770      	bx	lr
 8002a3a:	bf00      	nop
 8002a3c:	20000138 	.word	0x20000138

08002a40 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b082      	sub	sp, #8
 8002a44:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002a46:	f3ef 8305 	mrs	r3, IPSR
 8002a4a:	603b      	str	r3, [r7, #0]
  return(result);
 8002a4c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d003      	beq.n	8002a5a <osKernelStart+0x1a>
    stat = osErrorISR;
 8002a52:	f06f 0305 	mvn.w	r3, #5
 8002a56:	607b      	str	r3, [r7, #4]
 8002a58:	e010      	b.n	8002a7c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8002a5a:	4b0b      	ldr	r3, [pc, #44]	; (8002a88 <osKernelStart+0x48>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	2b01      	cmp	r3, #1
 8002a60:	d109      	bne.n	8002a76 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8002a62:	f7ff ffbf 	bl	80029e4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8002a66:	4b08      	ldr	r3, [pc, #32]	; (8002a88 <osKernelStart+0x48>)
 8002a68:	2202      	movs	r2, #2
 8002a6a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8002a6c:	f001 f87c 	bl	8003b68 <vTaskStartScheduler>
      stat = osOK;
 8002a70:	2300      	movs	r3, #0
 8002a72:	607b      	str	r3, [r7, #4]
 8002a74:	e002      	b.n	8002a7c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8002a76:	f04f 33ff 	mov.w	r3, #4294967295
 8002a7a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002a7c:	687b      	ldr	r3, [r7, #4]
}
 8002a7e:	4618      	mov	r0, r3
 8002a80:	3708      	adds	r7, #8
 8002a82:	46bd      	mov	sp, r7
 8002a84:	bd80      	pop	{r7, pc}
 8002a86:	bf00      	nop
 8002a88:	20000138 	.word	0x20000138

08002a8c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b08e      	sub	sp, #56	; 0x38
 8002a90:	af04      	add	r7, sp, #16
 8002a92:	60f8      	str	r0, [r7, #12]
 8002a94:	60b9      	str	r1, [r7, #8]
 8002a96:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8002a98:	2300      	movs	r3, #0
 8002a9a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002a9c:	f3ef 8305 	mrs	r3, IPSR
 8002aa0:	617b      	str	r3, [r7, #20]
  return(result);
 8002aa2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d17e      	bne.n	8002ba6 <osThreadNew+0x11a>
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d07b      	beq.n	8002ba6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8002aae:	2380      	movs	r3, #128	; 0x80
 8002ab0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8002ab2:	2318      	movs	r3, #24
 8002ab4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8002aba:	f04f 33ff 	mov.w	r3, #4294967295
 8002abe:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d045      	beq.n	8002b52 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d002      	beq.n	8002ad4 <osThreadNew+0x48>
        name = attr->name;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	699b      	ldr	r3, [r3, #24]
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d002      	beq.n	8002ae2 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	699b      	ldr	r3, [r3, #24]
 8002ae0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8002ae2:	69fb      	ldr	r3, [r7, #28]
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d008      	beq.n	8002afa <osThreadNew+0x6e>
 8002ae8:	69fb      	ldr	r3, [r7, #28]
 8002aea:	2b38      	cmp	r3, #56	; 0x38
 8002aec:	d805      	bhi.n	8002afa <osThreadNew+0x6e>
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	685b      	ldr	r3, [r3, #4]
 8002af2:	f003 0301 	and.w	r3, r3, #1
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d001      	beq.n	8002afe <osThreadNew+0x72>
        return (NULL);
 8002afa:	2300      	movs	r3, #0
 8002afc:	e054      	b.n	8002ba8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	695b      	ldr	r3, [r3, #20]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d003      	beq.n	8002b0e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	695b      	ldr	r3, [r3, #20]
 8002b0a:	089b      	lsrs	r3, r3, #2
 8002b0c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	689b      	ldr	r3, [r3, #8]
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d00e      	beq.n	8002b34 <osThreadNew+0xa8>
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	68db      	ldr	r3, [r3, #12]
 8002b1a:	2bbb      	cmp	r3, #187	; 0xbb
 8002b1c:	d90a      	bls.n	8002b34 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d006      	beq.n	8002b34 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	695b      	ldr	r3, [r3, #20]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d002      	beq.n	8002b34 <osThreadNew+0xa8>
        mem = 1;
 8002b2e:	2301      	movs	r3, #1
 8002b30:	61bb      	str	r3, [r7, #24]
 8002b32:	e010      	b.n	8002b56 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	689b      	ldr	r3, [r3, #8]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d10c      	bne.n	8002b56 <osThreadNew+0xca>
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	68db      	ldr	r3, [r3, #12]
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d108      	bne.n	8002b56 <osThreadNew+0xca>
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	691b      	ldr	r3, [r3, #16]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d104      	bne.n	8002b56 <osThreadNew+0xca>
          mem = 0;
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	61bb      	str	r3, [r7, #24]
 8002b50:	e001      	b.n	8002b56 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8002b52:	2300      	movs	r3, #0
 8002b54:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8002b56:	69bb      	ldr	r3, [r7, #24]
 8002b58:	2b01      	cmp	r3, #1
 8002b5a:	d110      	bne.n	8002b7e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8002b60:	687a      	ldr	r2, [r7, #4]
 8002b62:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002b64:	9202      	str	r2, [sp, #8]
 8002b66:	9301      	str	r3, [sp, #4]
 8002b68:	69fb      	ldr	r3, [r7, #28]
 8002b6a:	9300      	str	r3, [sp, #0]
 8002b6c:	68bb      	ldr	r3, [r7, #8]
 8002b6e:	6a3a      	ldr	r2, [r7, #32]
 8002b70:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002b72:	68f8      	ldr	r0, [r7, #12]
 8002b74:	f000 fe0c 	bl	8003790 <xTaskCreateStatic>
 8002b78:	4603      	mov	r3, r0
 8002b7a:	613b      	str	r3, [r7, #16]
 8002b7c:	e013      	b.n	8002ba6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8002b7e:	69bb      	ldr	r3, [r7, #24]
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d110      	bne.n	8002ba6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8002b84:	6a3b      	ldr	r3, [r7, #32]
 8002b86:	b29a      	uxth	r2, r3
 8002b88:	f107 0310 	add.w	r3, r7, #16
 8002b8c:	9301      	str	r3, [sp, #4]
 8002b8e:	69fb      	ldr	r3, [r7, #28]
 8002b90:	9300      	str	r3, [sp, #0]
 8002b92:	68bb      	ldr	r3, [r7, #8]
 8002b94:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002b96:	68f8      	ldr	r0, [r7, #12]
 8002b98:	f000 fe57 	bl	800384a <xTaskCreate>
 8002b9c:	4603      	mov	r3, r0
 8002b9e:	2b01      	cmp	r3, #1
 8002ba0:	d001      	beq.n	8002ba6 <osThreadNew+0x11a>
            hTask = NULL;
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8002ba6:	693b      	ldr	r3, [r7, #16]
}
 8002ba8:	4618      	mov	r0, r3
 8002baa:	3728      	adds	r7, #40	; 0x28
 8002bac:	46bd      	mov	sp, r7
 8002bae:	bd80      	pop	{r7, pc}

08002bb0 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b084      	sub	sp, #16
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002bb8:	f3ef 8305 	mrs	r3, IPSR
 8002bbc:	60bb      	str	r3, [r7, #8]
  return(result);
 8002bbe:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d003      	beq.n	8002bcc <osDelay+0x1c>
    stat = osErrorISR;
 8002bc4:	f06f 0305 	mvn.w	r3, #5
 8002bc8:	60fb      	str	r3, [r7, #12]
 8002bca:	e007      	b.n	8002bdc <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8002bcc:	2300      	movs	r3, #0
 8002bce:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d002      	beq.n	8002bdc <osDelay+0x2c>
      vTaskDelay(ticks);
 8002bd6:	6878      	ldr	r0, [r7, #4]
 8002bd8:	f000 ff92 	bl	8003b00 <vTaskDelay>
    }
  }

  return (stat);
 8002bdc:	68fb      	ldr	r3, [r7, #12]
}
 8002bde:	4618      	mov	r0, r3
 8002be0:	3710      	adds	r7, #16
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bd80      	pop	{r7, pc}
	...

08002be8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002be8:	b480      	push	{r7}
 8002bea:	b085      	sub	sp, #20
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	60f8      	str	r0, [r7, #12]
 8002bf0:	60b9      	str	r1, [r7, #8]
 8002bf2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	4a07      	ldr	r2, [pc, #28]	; (8002c14 <vApplicationGetIdleTaskMemory+0x2c>)
 8002bf8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8002bfa:	68bb      	ldr	r3, [r7, #8]
 8002bfc:	4a06      	ldr	r2, [pc, #24]	; (8002c18 <vApplicationGetIdleTaskMemory+0x30>)
 8002bfe:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2280      	movs	r2, #128	; 0x80
 8002c04:	601a      	str	r2, [r3, #0]
}
 8002c06:	bf00      	nop
 8002c08:	3714      	adds	r7, #20
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c10:	4770      	bx	lr
 8002c12:	bf00      	nop
 8002c14:	2000013c 	.word	0x2000013c
 8002c18:	200001f8 	.word	0x200001f8

08002c1c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002c1c:	b480      	push	{r7}
 8002c1e:	b085      	sub	sp, #20
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	60f8      	str	r0, [r7, #12]
 8002c24:	60b9      	str	r1, [r7, #8]
 8002c26:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	4a07      	ldr	r2, [pc, #28]	; (8002c48 <vApplicationGetTimerTaskMemory+0x2c>)
 8002c2c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8002c2e:	68bb      	ldr	r3, [r7, #8]
 8002c30:	4a06      	ldr	r2, [pc, #24]	; (8002c4c <vApplicationGetTimerTaskMemory+0x30>)
 8002c32:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002c3a:	601a      	str	r2, [r3, #0]
}
 8002c3c:	bf00      	nop
 8002c3e:	3714      	adds	r7, #20
 8002c40:	46bd      	mov	sp, r7
 8002c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c46:	4770      	bx	lr
 8002c48:	200003f8 	.word	0x200003f8
 8002c4c:	200004b4 	.word	0x200004b4

08002c50 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002c50:	b480      	push	{r7}
 8002c52:	b083      	sub	sp, #12
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	f103 0208 	add.w	r2, r3, #8
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	f04f 32ff 	mov.w	r2, #4294967295
 8002c68:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	f103 0208 	add.w	r2, r3, #8
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	f103 0208 	add.w	r2, r3, #8
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	2200      	movs	r2, #0
 8002c82:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002c84:	bf00      	nop
 8002c86:	370c      	adds	r7, #12
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8e:	4770      	bx	lr

08002c90 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002c90:	b480      	push	{r7}
 8002c92:	b083      	sub	sp, #12
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002c9e:	bf00      	nop
 8002ca0:	370c      	adds	r7, #12
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca8:	4770      	bx	lr

08002caa <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002caa:	b480      	push	{r7}
 8002cac:	b085      	sub	sp, #20
 8002cae:	af00      	add	r7, sp, #0
 8002cb0:	6078      	str	r0, [r7, #4]
 8002cb2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	685b      	ldr	r3, [r3, #4]
 8002cb8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	68fa      	ldr	r2, [r7, #12]
 8002cbe:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	689a      	ldr	r2, [r3, #8]
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	689b      	ldr	r3, [r3, #8]
 8002ccc:	683a      	ldr	r2, [r7, #0]
 8002cce:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	683a      	ldr	r2, [r7, #0]
 8002cd4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	687a      	ldr	r2, [r7, #4]
 8002cda:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	1c5a      	adds	r2, r3, #1
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	601a      	str	r2, [r3, #0]
}
 8002ce6:	bf00      	nop
 8002ce8:	3714      	adds	r7, #20
 8002cea:	46bd      	mov	sp, r7
 8002cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf0:	4770      	bx	lr

08002cf2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002cf2:	b480      	push	{r7}
 8002cf4:	b085      	sub	sp, #20
 8002cf6:	af00      	add	r7, sp, #0
 8002cf8:	6078      	str	r0, [r7, #4]
 8002cfa:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002d02:	68bb      	ldr	r3, [r7, #8]
 8002d04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d08:	d103      	bne.n	8002d12 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	691b      	ldr	r3, [r3, #16]
 8002d0e:	60fb      	str	r3, [r7, #12]
 8002d10:	e00c      	b.n	8002d2c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	3308      	adds	r3, #8
 8002d16:	60fb      	str	r3, [r7, #12]
 8002d18:	e002      	b.n	8002d20 <vListInsert+0x2e>
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	685b      	ldr	r3, [r3, #4]
 8002d1e:	60fb      	str	r3, [r7, #12]
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	685b      	ldr	r3, [r3, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	68ba      	ldr	r2, [r7, #8]
 8002d28:	429a      	cmp	r2, r3
 8002d2a:	d2f6      	bcs.n	8002d1a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	685a      	ldr	r2, [r3, #4]
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	685b      	ldr	r3, [r3, #4]
 8002d38:	683a      	ldr	r2, [r7, #0]
 8002d3a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	68fa      	ldr	r2, [r7, #12]
 8002d40:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	683a      	ldr	r2, [r7, #0]
 8002d46:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	687a      	ldr	r2, [r7, #4]
 8002d4c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	1c5a      	adds	r2, r3, #1
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	601a      	str	r2, [r3, #0]
}
 8002d58:	bf00      	nop
 8002d5a:	3714      	adds	r7, #20
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d62:	4770      	bx	lr

08002d64 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002d64:	b480      	push	{r7}
 8002d66:	b085      	sub	sp, #20
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	691b      	ldr	r3, [r3, #16]
 8002d70:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	685b      	ldr	r3, [r3, #4]
 8002d76:	687a      	ldr	r2, [r7, #4]
 8002d78:	6892      	ldr	r2, [r2, #8]
 8002d7a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	689b      	ldr	r3, [r3, #8]
 8002d80:	687a      	ldr	r2, [r7, #4]
 8002d82:	6852      	ldr	r2, [r2, #4]
 8002d84:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	685b      	ldr	r3, [r3, #4]
 8002d8a:	687a      	ldr	r2, [r7, #4]
 8002d8c:	429a      	cmp	r2, r3
 8002d8e:	d103      	bne.n	8002d98 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	689a      	ldr	r2, [r3, #8]
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	1e5a      	subs	r2, r3, #1
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	681b      	ldr	r3, [r3, #0]
}
 8002dac:	4618      	mov	r0, r3
 8002dae:	3714      	adds	r7, #20
 8002db0:	46bd      	mov	sp, r7
 8002db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db6:	4770      	bx	lr

08002db8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b084      	sub	sp, #16
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
 8002dc0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d10a      	bne.n	8002de2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002dcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dd0:	f383 8811 	msr	BASEPRI, r3
 8002dd4:	f3bf 8f6f 	isb	sy
 8002dd8:	f3bf 8f4f 	dsb	sy
 8002ddc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002dde:	bf00      	nop
 8002de0:	e7fe      	b.n	8002de0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002de2:	f002 f877 	bl	8004ed4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	681a      	ldr	r2, [r3, #0]
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dee:	68f9      	ldr	r1, [r7, #12]
 8002df0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002df2:	fb01 f303 	mul.w	r3, r1, r3
 8002df6:	441a      	add	r2, r3
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	2200      	movs	r2, #0
 8002e00:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	681a      	ldr	r2, [r3, #0]
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	681a      	ldr	r2, [r3, #0]
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e12:	3b01      	subs	r3, #1
 8002e14:	68f9      	ldr	r1, [r7, #12]
 8002e16:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002e18:	fb01 f303 	mul.w	r3, r1, r3
 8002e1c:	441a      	add	r2, r3
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	22ff      	movs	r2, #255	; 0xff
 8002e26:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	22ff      	movs	r2, #255	; 0xff
 8002e2e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d114      	bne.n	8002e62 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	691b      	ldr	r3, [r3, #16]
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d01a      	beq.n	8002e76 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	3310      	adds	r3, #16
 8002e44:	4618      	mov	r0, r3
 8002e46:	f001 f929 	bl	800409c <xTaskRemoveFromEventList>
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d012      	beq.n	8002e76 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002e50:	4b0c      	ldr	r3, [pc, #48]	; (8002e84 <xQueueGenericReset+0xcc>)
 8002e52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e56:	601a      	str	r2, [r3, #0]
 8002e58:	f3bf 8f4f 	dsb	sy
 8002e5c:	f3bf 8f6f 	isb	sy
 8002e60:	e009      	b.n	8002e76 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	3310      	adds	r3, #16
 8002e66:	4618      	mov	r0, r3
 8002e68:	f7ff fef2 	bl	8002c50 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	3324      	adds	r3, #36	; 0x24
 8002e70:	4618      	mov	r0, r3
 8002e72:	f7ff feed 	bl	8002c50 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002e76:	f002 f85d 	bl	8004f34 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002e7a:	2301      	movs	r3, #1
}
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	3710      	adds	r7, #16
 8002e80:	46bd      	mov	sp, r7
 8002e82:	bd80      	pop	{r7, pc}
 8002e84:	e000ed04 	.word	0xe000ed04

08002e88 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b08e      	sub	sp, #56	; 0x38
 8002e8c:	af02      	add	r7, sp, #8
 8002e8e:	60f8      	str	r0, [r7, #12]
 8002e90:	60b9      	str	r1, [r7, #8]
 8002e92:	607a      	str	r2, [r7, #4]
 8002e94:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d10a      	bne.n	8002eb2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8002e9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ea0:	f383 8811 	msr	BASEPRI, r3
 8002ea4:	f3bf 8f6f 	isb	sy
 8002ea8:	f3bf 8f4f 	dsb	sy
 8002eac:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002eae:	bf00      	nop
 8002eb0:	e7fe      	b.n	8002eb0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d10a      	bne.n	8002ece <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8002eb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ebc:	f383 8811 	msr	BASEPRI, r3
 8002ec0:	f3bf 8f6f 	isb	sy
 8002ec4:	f3bf 8f4f 	dsb	sy
 8002ec8:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002eca:	bf00      	nop
 8002ecc:	e7fe      	b.n	8002ecc <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d002      	beq.n	8002eda <xQueueGenericCreateStatic+0x52>
 8002ed4:	68bb      	ldr	r3, [r7, #8]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d001      	beq.n	8002ede <xQueueGenericCreateStatic+0x56>
 8002eda:	2301      	movs	r3, #1
 8002edc:	e000      	b.n	8002ee0 <xQueueGenericCreateStatic+0x58>
 8002ede:	2300      	movs	r3, #0
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d10a      	bne.n	8002efa <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8002ee4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ee8:	f383 8811 	msr	BASEPRI, r3
 8002eec:	f3bf 8f6f 	isb	sy
 8002ef0:	f3bf 8f4f 	dsb	sy
 8002ef4:	623b      	str	r3, [r7, #32]
}
 8002ef6:	bf00      	nop
 8002ef8:	e7fe      	b.n	8002ef8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d102      	bne.n	8002f06 <xQueueGenericCreateStatic+0x7e>
 8002f00:	68bb      	ldr	r3, [r7, #8]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d101      	bne.n	8002f0a <xQueueGenericCreateStatic+0x82>
 8002f06:	2301      	movs	r3, #1
 8002f08:	e000      	b.n	8002f0c <xQueueGenericCreateStatic+0x84>
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d10a      	bne.n	8002f26 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8002f10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f14:	f383 8811 	msr	BASEPRI, r3
 8002f18:	f3bf 8f6f 	isb	sy
 8002f1c:	f3bf 8f4f 	dsb	sy
 8002f20:	61fb      	str	r3, [r7, #28]
}
 8002f22:	bf00      	nop
 8002f24:	e7fe      	b.n	8002f24 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002f26:	2350      	movs	r3, #80	; 0x50
 8002f28:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002f2a:	697b      	ldr	r3, [r7, #20]
 8002f2c:	2b50      	cmp	r3, #80	; 0x50
 8002f2e:	d00a      	beq.n	8002f46 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8002f30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f34:	f383 8811 	msr	BASEPRI, r3
 8002f38:	f3bf 8f6f 	isb	sy
 8002f3c:	f3bf 8f4f 	dsb	sy
 8002f40:	61bb      	str	r3, [r7, #24]
}
 8002f42:	bf00      	nop
 8002f44:	e7fe      	b.n	8002f44 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8002f46:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8002f4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d00d      	beq.n	8002f6e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002f52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f54:	2201      	movs	r2, #1
 8002f56:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002f5a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8002f5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f60:	9300      	str	r3, [sp, #0]
 8002f62:	4613      	mov	r3, r2
 8002f64:	687a      	ldr	r2, [r7, #4]
 8002f66:	68b9      	ldr	r1, [r7, #8]
 8002f68:	68f8      	ldr	r0, [r7, #12]
 8002f6a:	f000 f805 	bl	8002f78 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002f6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8002f70:	4618      	mov	r0, r3
 8002f72:	3730      	adds	r7, #48	; 0x30
 8002f74:	46bd      	mov	sp, r7
 8002f76:	bd80      	pop	{r7, pc}

08002f78 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b084      	sub	sp, #16
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	60f8      	str	r0, [r7, #12]
 8002f80:	60b9      	str	r1, [r7, #8]
 8002f82:	607a      	str	r2, [r7, #4]
 8002f84:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002f86:	68bb      	ldr	r3, [r7, #8]
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d103      	bne.n	8002f94 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002f8c:	69bb      	ldr	r3, [r7, #24]
 8002f8e:	69ba      	ldr	r2, [r7, #24]
 8002f90:	601a      	str	r2, [r3, #0]
 8002f92:	e002      	b.n	8002f9a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002f94:	69bb      	ldr	r3, [r7, #24]
 8002f96:	687a      	ldr	r2, [r7, #4]
 8002f98:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002f9a:	69bb      	ldr	r3, [r7, #24]
 8002f9c:	68fa      	ldr	r2, [r7, #12]
 8002f9e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002fa0:	69bb      	ldr	r3, [r7, #24]
 8002fa2:	68ba      	ldr	r2, [r7, #8]
 8002fa4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002fa6:	2101      	movs	r1, #1
 8002fa8:	69b8      	ldr	r0, [r7, #24]
 8002faa:	f7ff ff05 	bl	8002db8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002fae:	69bb      	ldr	r3, [r7, #24]
 8002fb0:	78fa      	ldrb	r2, [r7, #3]
 8002fb2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002fb6:	bf00      	nop
 8002fb8:	3710      	adds	r7, #16
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	bd80      	pop	{r7, pc}
	...

08002fc0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b08e      	sub	sp, #56	; 0x38
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	60f8      	str	r0, [r7, #12]
 8002fc8:	60b9      	str	r1, [r7, #8]
 8002fca:	607a      	str	r2, [r7, #4]
 8002fcc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002fce:	2300      	movs	r3, #0
 8002fd0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002fd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d10a      	bne.n	8002ff2 <xQueueGenericSend+0x32>
	__asm volatile
 8002fdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fe0:	f383 8811 	msr	BASEPRI, r3
 8002fe4:	f3bf 8f6f 	isb	sy
 8002fe8:	f3bf 8f4f 	dsb	sy
 8002fec:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002fee:	bf00      	nop
 8002ff0:	e7fe      	b.n	8002ff0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002ff2:	68bb      	ldr	r3, [r7, #8]
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d103      	bne.n	8003000 <xQueueGenericSend+0x40>
 8002ff8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ffa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d101      	bne.n	8003004 <xQueueGenericSend+0x44>
 8003000:	2301      	movs	r3, #1
 8003002:	e000      	b.n	8003006 <xQueueGenericSend+0x46>
 8003004:	2300      	movs	r3, #0
 8003006:	2b00      	cmp	r3, #0
 8003008:	d10a      	bne.n	8003020 <xQueueGenericSend+0x60>
	__asm volatile
 800300a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800300e:	f383 8811 	msr	BASEPRI, r3
 8003012:	f3bf 8f6f 	isb	sy
 8003016:	f3bf 8f4f 	dsb	sy
 800301a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800301c:	bf00      	nop
 800301e:	e7fe      	b.n	800301e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	2b02      	cmp	r3, #2
 8003024:	d103      	bne.n	800302e <xQueueGenericSend+0x6e>
 8003026:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003028:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800302a:	2b01      	cmp	r3, #1
 800302c:	d101      	bne.n	8003032 <xQueueGenericSend+0x72>
 800302e:	2301      	movs	r3, #1
 8003030:	e000      	b.n	8003034 <xQueueGenericSend+0x74>
 8003032:	2300      	movs	r3, #0
 8003034:	2b00      	cmp	r3, #0
 8003036:	d10a      	bne.n	800304e <xQueueGenericSend+0x8e>
	__asm volatile
 8003038:	f04f 0350 	mov.w	r3, #80	; 0x50
 800303c:	f383 8811 	msr	BASEPRI, r3
 8003040:	f3bf 8f6f 	isb	sy
 8003044:	f3bf 8f4f 	dsb	sy
 8003048:	623b      	str	r3, [r7, #32]
}
 800304a:	bf00      	nop
 800304c:	e7fe      	b.n	800304c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800304e:	f001 f9e7 	bl	8004420 <xTaskGetSchedulerState>
 8003052:	4603      	mov	r3, r0
 8003054:	2b00      	cmp	r3, #0
 8003056:	d102      	bne.n	800305e <xQueueGenericSend+0x9e>
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2b00      	cmp	r3, #0
 800305c:	d101      	bne.n	8003062 <xQueueGenericSend+0xa2>
 800305e:	2301      	movs	r3, #1
 8003060:	e000      	b.n	8003064 <xQueueGenericSend+0xa4>
 8003062:	2300      	movs	r3, #0
 8003064:	2b00      	cmp	r3, #0
 8003066:	d10a      	bne.n	800307e <xQueueGenericSend+0xbe>
	__asm volatile
 8003068:	f04f 0350 	mov.w	r3, #80	; 0x50
 800306c:	f383 8811 	msr	BASEPRI, r3
 8003070:	f3bf 8f6f 	isb	sy
 8003074:	f3bf 8f4f 	dsb	sy
 8003078:	61fb      	str	r3, [r7, #28]
}
 800307a:	bf00      	nop
 800307c:	e7fe      	b.n	800307c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800307e:	f001 ff29 	bl	8004ed4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003082:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003084:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003086:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003088:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800308a:	429a      	cmp	r2, r3
 800308c:	d302      	bcc.n	8003094 <xQueueGenericSend+0xd4>
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	2b02      	cmp	r3, #2
 8003092:	d129      	bne.n	80030e8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003094:	683a      	ldr	r2, [r7, #0]
 8003096:	68b9      	ldr	r1, [r7, #8]
 8003098:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800309a:	f000 fa0b 	bl	80034b4 <prvCopyDataToQueue>
 800309e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80030a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d010      	beq.n	80030ca <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80030a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030aa:	3324      	adds	r3, #36	; 0x24
 80030ac:	4618      	mov	r0, r3
 80030ae:	f000 fff5 	bl	800409c <xTaskRemoveFromEventList>
 80030b2:	4603      	mov	r3, r0
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d013      	beq.n	80030e0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80030b8:	4b3f      	ldr	r3, [pc, #252]	; (80031b8 <xQueueGenericSend+0x1f8>)
 80030ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80030be:	601a      	str	r2, [r3, #0]
 80030c0:	f3bf 8f4f 	dsb	sy
 80030c4:	f3bf 8f6f 	isb	sy
 80030c8:	e00a      	b.n	80030e0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80030ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d007      	beq.n	80030e0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80030d0:	4b39      	ldr	r3, [pc, #228]	; (80031b8 <xQueueGenericSend+0x1f8>)
 80030d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80030d6:	601a      	str	r2, [r3, #0]
 80030d8:	f3bf 8f4f 	dsb	sy
 80030dc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80030e0:	f001 ff28 	bl	8004f34 <vPortExitCritical>
				return pdPASS;
 80030e4:	2301      	movs	r3, #1
 80030e6:	e063      	b.n	80031b0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d103      	bne.n	80030f6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80030ee:	f001 ff21 	bl	8004f34 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80030f2:	2300      	movs	r3, #0
 80030f4:	e05c      	b.n	80031b0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80030f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d106      	bne.n	800310a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80030fc:	f107 0314 	add.w	r3, r7, #20
 8003100:	4618      	mov	r0, r3
 8003102:	f001 f82f 	bl	8004164 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003106:	2301      	movs	r3, #1
 8003108:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800310a:	f001 ff13 	bl	8004f34 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800310e:	f000 fd9b 	bl	8003c48 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003112:	f001 fedf 	bl	8004ed4 <vPortEnterCritical>
 8003116:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003118:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800311c:	b25b      	sxtb	r3, r3
 800311e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003122:	d103      	bne.n	800312c <xQueueGenericSend+0x16c>
 8003124:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003126:	2200      	movs	r2, #0
 8003128:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800312c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800312e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003132:	b25b      	sxtb	r3, r3
 8003134:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003138:	d103      	bne.n	8003142 <xQueueGenericSend+0x182>
 800313a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800313c:	2200      	movs	r2, #0
 800313e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003142:	f001 fef7 	bl	8004f34 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003146:	1d3a      	adds	r2, r7, #4
 8003148:	f107 0314 	add.w	r3, r7, #20
 800314c:	4611      	mov	r1, r2
 800314e:	4618      	mov	r0, r3
 8003150:	f001 f81e 	bl	8004190 <xTaskCheckForTimeOut>
 8003154:	4603      	mov	r3, r0
 8003156:	2b00      	cmp	r3, #0
 8003158:	d124      	bne.n	80031a4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800315a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800315c:	f000 faa2 	bl	80036a4 <prvIsQueueFull>
 8003160:	4603      	mov	r3, r0
 8003162:	2b00      	cmp	r3, #0
 8003164:	d018      	beq.n	8003198 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003166:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003168:	3310      	adds	r3, #16
 800316a:	687a      	ldr	r2, [r7, #4]
 800316c:	4611      	mov	r1, r2
 800316e:	4618      	mov	r0, r3
 8003170:	f000 ff44 	bl	8003ffc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003174:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003176:	f000 fa2d 	bl	80035d4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800317a:	f000 fd73 	bl	8003c64 <xTaskResumeAll>
 800317e:	4603      	mov	r3, r0
 8003180:	2b00      	cmp	r3, #0
 8003182:	f47f af7c 	bne.w	800307e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8003186:	4b0c      	ldr	r3, [pc, #48]	; (80031b8 <xQueueGenericSend+0x1f8>)
 8003188:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800318c:	601a      	str	r2, [r3, #0]
 800318e:	f3bf 8f4f 	dsb	sy
 8003192:	f3bf 8f6f 	isb	sy
 8003196:	e772      	b.n	800307e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003198:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800319a:	f000 fa1b 	bl	80035d4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800319e:	f000 fd61 	bl	8003c64 <xTaskResumeAll>
 80031a2:	e76c      	b.n	800307e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80031a4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80031a6:	f000 fa15 	bl	80035d4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80031aa:	f000 fd5b 	bl	8003c64 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80031ae:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80031b0:	4618      	mov	r0, r3
 80031b2:	3738      	adds	r7, #56	; 0x38
 80031b4:	46bd      	mov	sp, r7
 80031b6:	bd80      	pop	{r7, pc}
 80031b8:	e000ed04 	.word	0xe000ed04

080031bc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b090      	sub	sp, #64	; 0x40
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	60f8      	str	r0, [r7, #12]
 80031c4:	60b9      	str	r1, [r7, #8]
 80031c6:	607a      	str	r2, [r7, #4]
 80031c8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80031ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d10a      	bne.n	80031ea <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80031d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031d8:	f383 8811 	msr	BASEPRI, r3
 80031dc:	f3bf 8f6f 	isb	sy
 80031e0:	f3bf 8f4f 	dsb	sy
 80031e4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80031e6:	bf00      	nop
 80031e8:	e7fe      	b.n	80031e8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80031ea:	68bb      	ldr	r3, [r7, #8]
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d103      	bne.n	80031f8 <xQueueGenericSendFromISR+0x3c>
 80031f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d101      	bne.n	80031fc <xQueueGenericSendFromISR+0x40>
 80031f8:	2301      	movs	r3, #1
 80031fa:	e000      	b.n	80031fe <xQueueGenericSendFromISR+0x42>
 80031fc:	2300      	movs	r3, #0
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d10a      	bne.n	8003218 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8003202:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003206:	f383 8811 	msr	BASEPRI, r3
 800320a:	f3bf 8f6f 	isb	sy
 800320e:	f3bf 8f4f 	dsb	sy
 8003212:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003214:	bf00      	nop
 8003216:	e7fe      	b.n	8003216 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	2b02      	cmp	r3, #2
 800321c:	d103      	bne.n	8003226 <xQueueGenericSendFromISR+0x6a>
 800321e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003220:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003222:	2b01      	cmp	r3, #1
 8003224:	d101      	bne.n	800322a <xQueueGenericSendFromISR+0x6e>
 8003226:	2301      	movs	r3, #1
 8003228:	e000      	b.n	800322c <xQueueGenericSendFromISR+0x70>
 800322a:	2300      	movs	r3, #0
 800322c:	2b00      	cmp	r3, #0
 800322e:	d10a      	bne.n	8003246 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8003230:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003234:	f383 8811 	msr	BASEPRI, r3
 8003238:	f3bf 8f6f 	isb	sy
 800323c:	f3bf 8f4f 	dsb	sy
 8003240:	623b      	str	r3, [r7, #32]
}
 8003242:	bf00      	nop
 8003244:	e7fe      	b.n	8003244 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003246:	f001 ff27 	bl	8005098 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800324a:	f3ef 8211 	mrs	r2, BASEPRI
 800324e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003252:	f383 8811 	msr	BASEPRI, r3
 8003256:	f3bf 8f6f 	isb	sy
 800325a:	f3bf 8f4f 	dsb	sy
 800325e:	61fa      	str	r2, [r7, #28]
 8003260:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003262:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003264:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003266:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003268:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800326a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800326c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800326e:	429a      	cmp	r2, r3
 8003270:	d302      	bcc.n	8003278 <xQueueGenericSendFromISR+0xbc>
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	2b02      	cmp	r3, #2
 8003276:	d12f      	bne.n	80032d8 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003278:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800327a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800327e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003282:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003284:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003286:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003288:	683a      	ldr	r2, [r7, #0]
 800328a:	68b9      	ldr	r1, [r7, #8]
 800328c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800328e:	f000 f911 	bl	80034b4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003292:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8003296:	f1b3 3fff 	cmp.w	r3, #4294967295
 800329a:	d112      	bne.n	80032c2 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800329c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800329e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d016      	beq.n	80032d2 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80032a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032a6:	3324      	adds	r3, #36	; 0x24
 80032a8:	4618      	mov	r0, r3
 80032aa:	f000 fef7 	bl	800409c <xTaskRemoveFromEventList>
 80032ae:	4603      	mov	r3, r0
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d00e      	beq.n	80032d2 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d00b      	beq.n	80032d2 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	2201      	movs	r2, #1
 80032be:	601a      	str	r2, [r3, #0]
 80032c0:	e007      	b.n	80032d2 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80032c2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80032c6:	3301      	adds	r3, #1
 80032c8:	b2db      	uxtb	r3, r3
 80032ca:	b25a      	sxtb	r2, r3
 80032cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80032d2:	2301      	movs	r3, #1
 80032d4:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80032d6:	e001      	b.n	80032dc <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80032d8:	2300      	movs	r3, #0
 80032da:	63fb      	str	r3, [r7, #60]	; 0x3c
 80032dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032de:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80032e0:	697b      	ldr	r3, [r7, #20]
 80032e2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80032e6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80032e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80032ea:	4618      	mov	r0, r3
 80032ec:	3740      	adds	r7, #64	; 0x40
 80032ee:	46bd      	mov	sp, r7
 80032f0:	bd80      	pop	{r7, pc}
	...

080032f4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b08c      	sub	sp, #48	; 0x30
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	60f8      	str	r0, [r7, #12]
 80032fc:	60b9      	str	r1, [r7, #8]
 80032fe:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003300:	2300      	movs	r3, #0
 8003302:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003308:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800330a:	2b00      	cmp	r3, #0
 800330c:	d10a      	bne.n	8003324 <xQueueReceive+0x30>
	__asm volatile
 800330e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003312:	f383 8811 	msr	BASEPRI, r3
 8003316:	f3bf 8f6f 	isb	sy
 800331a:	f3bf 8f4f 	dsb	sy
 800331e:	623b      	str	r3, [r7, #32]
}
 8003320:	bf00      	nop
 8003322:	e7fe      	b.n	8003322 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003324:	68bb      	ldr	r3, [r7, #8]
 8003326:	2b00      	cmp	r3, #0
 8003328:	d103      	bne.n	8003332 <xQueueReceive+0x3e>
 800332a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800332c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800332e:	2b00      	cmp	r3, #0
 8003330:	d101      	bne.n	8003336 <xQueueReceive+0x42>
 8003332:	2301      	movs	r3, #1
 8003334:	e000      	b.n	8003338 <xQueueReceive+0x44>
 8003336:	2300      	movs	r3, #0
 8003338:	2b00      	cmp	r3, #0
 800333a:	d10a      	bne.n	8003352 <xQueueReceive+0x5e>
	__asm volatile
 800333c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003340:	f383 8811 	msr	BASEPRI, r3
 8003344:	f3bf 8f6f 	isb	sy
 8003348:	f3bf 8f4f 	dsb	sy
 800334c:	61fb      	str	r3, [r7, #28]
}
 800334e:	bf00      	nop
 8003350:	e7fe      	b.n	8003350 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003352:	f001 f865 	bl	8004420 <xTaskGetSchedulerState>
 8003356:	4603      	mov	r3, r0
 8003358:	2b00      	cmp	r3, #0
 800335a:	d102      	bne.n	8003362 <xQueueReceive+0x6e>
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2b00      	cmp	r3, #0
 8003360:	d101      	bne.n	8003366 <xQueueReceive+0x72>
 8003362:	2301      	movs	r3, #1
 8003364:	e000      	b.n	8003368 <xQueueReceive+0x74>
 8003366:	2300      	movs	r3, #0
 8003368:	2b00      	cmp	r3, #0
 800336a:	d10a      	bne.n	8003382 <xQueueReceive+0x8e>
	__asm volatile
 800336c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003370:	f383 8811 	msr	BASEPRI, r3
 8003374:	f3bf 8f6f 	isb	sy
 8003378:	f3bf 8f4f 	dsb	sy
 800337c:	61bb      	str	r3, [r7, #24]
}
 800337e:	bf00      	nop
 8003380:	e7fe      	b.n	8003380 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003382:	f001 fda7 	bl	8004ed4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003386:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003388:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800338a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800338c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800338e:	2b00      	cmp	r3, #0
 8003390:	d01f      	beq.n	80033d2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003392:	68b9      	ldr	r1, [r7, #8]
 8003394:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003396:	f000 f8f7 	bl	8003588 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800339a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800339c:	1e5a      	subs	r2, r3, #1
 800339e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033a0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80033a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033a4:	691b      	ldr	r3, [r3, #16]
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d00f      	beq.n	80033ca <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80033aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033ac:	3310      	adds	r3, #16
 80033ae:	4618      	mov	r0, r3
 80033b0:	f000 fe74 	bl	800409c <xTaskRemoveFromEventList>
 80033b4:	4603      	mov	r3, r0
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d007      	beq.n	80033ca <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80033ba:	4b3d      	ldr	r3, [pc, #244]	; (80034b0 <xQueueReceive+0x1bc>)
 80033bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80033c0:	601a      	str	r2, [r3, #0]
 80033c2:	f3bf 8f4f 	dsb	sy
 80033c6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80033ca:	f001 fdb3 	bl	8004f34 <vPortExitCritical>
				return pdPASS;
 80033ce:	2301      	movs	r3, #1
 80033d0:	e069      	b.n	80034a6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d103      	bne.n	80033e0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80033d8:	f001 fdac 	bl	8004f34 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80033dc:	2300      	movs	r3, #0
 80033de:	e062      	b.n	80034a6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80033e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d106      	bne.n	80033f4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80033e6:	f107 0310 	add.w	r3, r7, #16
 80033ea:	4618      	mov	r0, r3
 80033ec:	f000 feba 	bl	8004164 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80033f0:	2301      	movs	r3, #1
 80033f2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80033f4:	f001 fd9e 	bl	8004f34 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80033f8:	f000 fc26 	bl	8003c48 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80033fc:	f001 fd6a 	bl	8004ed4 <vPortEnterCritical>
 8003400:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003402:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003406:	b25b      	sxtb	r3, r3
 8003408:	f1b3 3fff 	cmp.w	r3, #4294967295
 800340c:	d103      	bne.n	8003416 <xQueueReceive+0x122>
 800340e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003410:	2200      	movs	r2, #0
 8003412:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003416:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003418:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800341c:	b25b      	sxtb	r3, r3
 800341e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003422:	d103      	bne.n	800342c <xQueueReceive+0x138>
 8003424:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003426:	2200      	movs	r2, #0
 8003428:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800342c:	f001 fd82 	bl	8004f34 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003430:	1d3a      	adds	r2, r7, #4
 8003432:	f107 0310 	add.w	r3, r7, #16
 8003436:	4611      	mov	r1, r2
 8003438:	4618      	mov	r0, r3
 800343a:	f000 fea9 	bl	8004190 <xTaskCheckForTimeOut>
 800343e:	4603      	mov	r3, r0
 8003440:	2b00      	cmp	r3, #0
 8003442:	d123      	bne.n	800348c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003444:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003446:	f000 f917 	bl	8003678 <prvIsQueueEmpty>
 800344a:	4603      	mov	r3, r0
 800344c:	2b00      	cmp	r3, #0
 800344e:	d017      	beq.n	8003480 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003450:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003452:	3324      	adds	r3, #36	; 0x24
 8003454:	687a      	ldr	r2, [r7, #4]
 8003456:	4611      	mov	r1, r2
 8003458:	4618      	mov	r0, r3
 800345a:	f000 fdcf 	bl	8003ffc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800345e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003460:	f000 f8b8 	bl	80035d4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003464:	f000 fbfe 	bl	8003c64 <xTaskResumeAll>
 8003468:	4603      	mov	r3, r0
 800346a:	2b00      	cmp	r3, #0
 800346c:	d189      	bne.n	8003382 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800346e:	4b10      	ldr	r3, [pc, #64]	; (80034b0 <xQueueReceive+0x1bc>)
 8003470:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003474:	601a      	str	r2, [r3, #0]
 8003476:	f3bf 8f4f 	dsb	sy
 800347a:	f3bf 8f6f 	isb	sy
 800347e:	e780      	b.n	8003382 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003480:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003482:	f000 f8a7 	bl	80035d4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003486:	f000 fbed 	bl	8003c64 <xTaskResumeAll>
 800348a:	e77a      	b.n	8003382 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800348c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800348e:	f000 f8a1 	bl	80035d4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003492:	f000 fbe7 	bl	8003c64 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003496:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003498:	f000 f8ee 	bl	8003678 <prvIsQueueEmpty>
 800349c:	4603      	mov	r3, r0
 800349e:	2b00      	cmp	r3, #0
 80034a0:	f43f af6f 	beq.w	8003382 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80034a4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80034a6:	4618      	mov	r0, r3
 80034a8:	3730      	adds	r7, #48	; 0x30
 80034aa:	46bd      	mov	sp, r7
 80034ac:	bd80      	pop	{r7, pc}
 80034ae:	bf00      	nop
 80034b0:	e000ed04 	.word	0xe000ed04

080034b4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b086      	sub	sp, #24
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	60f8      	str	r0, [r7, #12]
 80034bc:	60b9      	str	r1, [r7, #8]
 80034be:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80034c0:	2300      	movs	r3, #0
 80034c2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034c8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d10d      	bne.n	80034ee <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d14d      	bne.n	8003576 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	689b      	ldr	r3, [r3, #8]
 80034de:	4618      	mov	r0, r3
 80034e0:	f000 ffbc 	bl	800445c <xTaskPriorityDisinherit>
 80034e4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	2200      	movs	r2, #0
 80034ea:	609a      	str	r2, [r3, #8]
 80034ec:	e043      	b.n	8003576 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d119      	bne.n	8003528 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	6858      	ldr	r0, [r3, #4]
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034fc:	461a      	mov	r2, r3
 80034fe:	68b9      	ldr	r1, [r7, #8]
 8003500:	f002 f81a 	bl	8005538 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	685a      	ldr	r2, [r3, #4]
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800350c:	441a      	add	r2, r3
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	685a      	ldr	r2, [r3, #4]
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	689b      	ldr	r3, [r3, #8]
 800351a:	429a      	cmp	r2, r3
 800351c:	d32b      	bcc.n	8003576 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	681a      	ldr	r2, [r3, #0]
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	605a      	str	r2, [r3, #4]
 8003526:	e026      	b.n	8003576 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	68d8      	ldr	r0, [r3, #12]
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003530:	461a      	mov	r2, r3
 8003532:	68b9      	ldr	r1, [r7, #8]
 8003534:	f002 f800 	bl	8005538 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	68da      	ldr	r2, [r3, #12]
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003540:	425b      	negs	r3, r3
 8003542:	441a      	add	r2, r3
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	68da      	ldr	r2, [r3, #12]
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	429a      	cmp	r2, r3
 8003552:	d207      	bcs.n	8003564 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	689a      	ldr	r2, [r3, #8]
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800355c:	425b      	negs	r3, r3
 800355e:	441a      	add	r2, r3
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2b02      	cmp	r3, #2
 8003568:	d105      	bne.n	8003576 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800356a:	693b      	ldr	r3, [r7, #16]
 800356c:	2b00      	cmp	r3, #0
 800356e:	d002      	beq.n	8003576 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003570:	693b      	ldr	r3, [r7, #16]
 8003572:	3b01      	subs	r3, #1
 8003574:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003576:	693b      	ldr	r3, [r7, #16]
 8003578:	1c5a      	adds	r2, r3, #1
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800357e:	697b      	ldr	r3, [r7, #20]
}
 8003580:	4618      	mov	r0, r3
 8003582:	3718      	adds	r7, #24
 8003584:	46bd      	mov	sp, r7
 8003586:	bd80      	pop	{r7, pc}

08003588 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b082      	sub	sp, #8
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
 8003590:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003596:	2b00      	cmp	r3, #0
 8003598:	d018      	beq.n	80035cc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	68da      	ldr	r2, [r3, #12]
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035a2:	441a      	add	r2, r3
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	68da      	ldr	r2, [r3, #12]
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	689b      	ldr	r3, [r3, #8]
 80035b0:	429a      	cmp	r2, r3
 80035b2:	d303      	bcc.n	80035bc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681a      	ldr	r2, [r3, #0]
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	68d9      	ldr	r1, [r3, #12]
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035c4:	461a      	mov	r2, r3
 80035c6:	6838      	ldr	r0, [r7, #0]
 80035c8:	f001 ffb6 	bl	8005538 <memcpy>
	}
}
 80035cc:	bf00      	nop
 80035ce:	3708      	adds	r7, #8
 80035d0:	46bd      	mov	sp, r7
 80035d2:	bd80      	pop	{r7, pc}

080035d4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b084      	sub	sp, #16
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80035dc:	f001 fc7a 	bl	8004ed4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80035e6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80035e8:	e011      	b.n	800360e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d012      	beq.n	8003618 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	3324      	adds	r3, #36	; 0x24
 80035f6:	4618      	mov	r0, r3
 80035f8:	f000 fd50 	bl	800409c <xTaskRemoveFromEventList>
 80035fc:	4603      	mov	r3, r0
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d001      	beq.n	8003606 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003602:	f000 fe27 	bl	8004254 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003606:	7bfb      	ldrb	r3, [r7, #15]
 8003608:	3b01      	subs	r3, #1
 800360a:	b2db      	uxtb	r3, r3
 800360c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800360e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003612:	2b00      	cmp	r3, #0
 8003614:	dce9      	bgt.n	80035ea <prvUnlockQueue+0x16>
 8003616:	e000      	b.n	800361a <prvUnlockQueue+0x46>
					break;
 8003618:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	22ff      	movs	r2, #255	; 0xff
 800361e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003622:	f001 fc87 	bl	8004f34 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003626:	f001 fc55 	bl	8004ed4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003630:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003632:	e011      	b.n	8003658 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	691b      	ldr	r3, [r3, #16]
 8003638:	2b00      	cmp	r3, #0
 800363a:	d012      	beq.n	8003662 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	3310      	adds	r3, #16
 8003640:	4618      	mov	r0, r3
 8003642:	f000 fd2b 	bl	800409c <xTaskRemoveFromEventList>
 8003646:	4603      	mov	r3, r0
 8003648:	2b00      	cmp	r3, #0
 800364a:	d001      	beq.n	8003650 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800364c:	f000 fe02 	bl	8004254 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003650:	7bbb      	ldrb	r3, [r7, #14]
 8003652:	3b01      	subs	r3, #1
 8003654:	b2db      	uxtb	r3, r3
 8003656:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003658:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800365c:	2b00      	cmp	r3, #0
 800365e:	dce9      	bgt.n	8003634 <prvUnlockQueue+0x60>
 8003660:	e000      	b.n	8003664 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003662:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	22ff      	movs	r2, #255	; 0xff
 8003668:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800366c:	f001 fc62 	bl	8004f34 <vPortExitCritical>
}
 8003670:	bf00      	nop
 8003672:	3710      	adds	r7, #16
 8003674:	46bd      	mov	sp, r7
 8003676:	bd80      	pop	{r7, pc}

08003678 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003678:	b580      	push	{r7, lr}
 800367a:	b084      	sub	sp, #16
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003680:	f001 fc28 	bl	8004ed4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003688:	2b00      	cmp	r3, #0
 800368a:	d102      	bne.n	8003692 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800368c:	2301      	movs	r3, #1
 800368e:	60fb      	str	r3, [r7, #12]
 8003690:	e001      	b.n	8003696 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003692:	2300      	movs	r3, #0
 8003694:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003696:	f001 fc4d 	bl	8004f34 <vPortExitCritical>

	return xReturn;
 800369a:	68fb      	ldr	r3, [r7, #12]
}
 800369c:	4618      	mov	r0, r3
 800369e:	3710      	adds	r7, #16
 80036a0:	46bd      	mov	sp, r7
 80036a2:	bd80      	pop	{r7, pc}

080036a4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b084      	sub	sp, #16
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80036ac:	f001 fc12 	bl	8004ed4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036b8:	429a      	cmp	r2, r3
 80036ba:	d102      	bne.n	80036c2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80036bc:	2301      	movs	r3, #1
 80036be:	60fb      	str	r3, [r7, #12]
 80036c0:	e001      	b.n	80036c6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80036c2:	2300      	movs	r3, #0
 80036c4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80036c6:	f001 fc35 	bl	8004f34 <vPortExitCritical>

	return xReturn;
 80036ca:	68fb      	ldr	r3, [r7, #12]
}
 80036cc:	4618      	mov	r0, r3
 80036ce:	3710      	adds	r7, #16
 80036d0:	46bd      	mov	sp, r7
 80036d2:	bd80      	pop	{r7, pc}

080036d4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80036d4:	b480      	push	{r7}
 80036d6:	b085      	sub	sp, #20
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
 80036dc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80036de:	2300      	movs	r3, #0
 80036e0:	60fb      	str	r3, [r7, #12]
 80036e2:	e014      	b.n	800370e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80036e4:	4a0f      	ldr	r2, [pc, #60]	; (8003724 <vQueueAddToRegistry+0x50>)
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d10b      	bne.n	8003708 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80036f0:	490c      	ldr	r1, [pc, #48]	; (8003724 <vQueueAddToRegistry+0x50>)
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	683a      	ldr	r2, [r7, #0]
 80036f6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80036fa:	4a0a      	ldr	r2, [pc, #40]	; (8003724 <vQueueAddToRegistry+0x50>)
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	00db      	lsls	r3, r3, #3
 8003700:	4413      	add	r3, r2
 8003702:	687a      	ldr	r2, [r7, #4]
 8003704:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003706:	e006      	b.n	8003716 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	3301      	adds	r3, #1
 800370c:	60fb      	str	r3, [r7, #12]
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	2b07      	cmp	r3, #7
 8003712:	d9e7      	bls.n	80036e4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003714:	bf00      	nop
 8003716:	bf00      	nop
 8003718:	3714      	adds	r7, #20
 800371a:	46bd      	mov	sp, r7
 800371c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003720:	4770      	bx	lr
 8003722:	bf00      	nop
 8003724:	200008b4 	.word	0x200008b4

08003728 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003728:	b580      	push	{r7, lr}
 800372a:	b086      	sub	sp, #24
 800372c:	af00      	add	r7, sp, #0
 800372e:	60f8      	str	r0, [r7, #12]
 8003730:	60b9      	str	r1, [r7, #8]
 8003732:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003738:	f001 fbcc 	bl	8004ed4 <vPortEnterCritical>
 800373c:	697b      	ldr	r3, [r7, #20]
 800373e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003742:	b25b      	sxtb	r3, r3
 8003744:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003748:	d103      	bne.n	8003752 <vQueueWaitForMessageRestricted+0x2a>
 800374a:	697b      	ldr	r3, [r7, #20]
 800374c:	2200      	movs	r2, #0
 800374e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003752:	697b      	ldr	r3, [r7, #20]
 8003754:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003758:	b25b      	sxtb	r3, r3
 800375a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800375e:	d103      	bne.n	8003768 <vQueueWaitForMessageRestricted+0x40>
 8003760:	697b      	ldr	r3, [r7, #20]
 8003762:	2200      	movs	r2, #0
 8003764:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003768:	f001 fbe4 	bl	8004f34 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800376c:	697b      	ldr	r3, [r7, #20]
 800376e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003770:	2b00      	cmp	r3, #0
 8003772:	d106      	bne.n	8003782 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003774:	697b      	ldr	r3, [r7, #20]
 8003776:	3324      	adds	r3, #36	; 0x24
 8003778:	687a      	ldr	r2, [r7, #4]
 800377a:	68b9      	ldr	r1, [r7, #8]
 800377c:	4618      	mov	r0, r3
 800377e:	f000 fc61 	bl	8004044 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003782:	6978      	ldr	r0, [r7, #20]
 8003784:	f7ff ff26 	bl	80035d4 <prvUnlockQueue>
	}
 8003788:	bf00      	nop
 800378a:	3718      	adds	r7, #24
 800378c:	46bd      	mov	sp, r7
 800378e:	bd80      	pop	{r7, pc}

08003790 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003790:	b580      	push	{r7, lr}
 8003792:	b08e      	sub	sp, #56	; 0x38
 8003794:	af04      	add	r7, sp, #16
 8003796:	60f8      	str	r0, [r7, #12]
 8003798:	60b9      	str	r1, [r7, #8]
 800379a:	607a      	str	r2, [r7, #4]
 800379c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800379e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d10a      	bne.n	80037ba <xTaskCreateStatic+0x2a>
	__asm volatile
 80037a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037a8:	f383 8811 	msr	BASEPRI, r3
 80037ac:	f3bf 8f6f 	isb	sy
 80037b0:	f3bf 8f4f 	dsb	sy
 80037b4:	623b      	str	r3, [r7, #32]
}
 80037b6:	bf00      	nop
 80037b8:	e7fe      	b.n	80037b8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80037ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d10a      	bne.n	80037d6 <xTaskCreateStatic+0x46>
	__asm volatile
 80037c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037c4:	f383 8811 	msr	BASEPRI, r3
 80037c8:	f3bf 8f6f 	isb	sy
 80037cc:	f3bf 8f4f 	dsb	sy
 80037d0:	61fb      	str	r3, [r7, #28]
}
 80037d2:	bf00      	nop
 80037d4:	e7fe      	b.n	80037d4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80037d6:	23bc      	movs	r3, #188	; 0xbc
 80037d8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80037da:	693b      	ldr	r3, [r7, #16]
 80037dc:	2bbc      	cmp	r3, #188	; 0xbc
 80037de:	d00a      	beq.n	80037f6 <xTaskCreateStatic+0x66>
	__asm volatile
 80037e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037e4:	f383 8811 	msr	BASEPRI, r3
 80037e8:	f3bf 8f6f 	isb	sy
 80037ec:	f3bf 8f4f 	dsb	sy
 80037f0:	61bb      	str	r3, [r7, #24]
}
 80037f2:	bf00      	nop
 80037f4:	e7fe      	b.n	80037f4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80037f6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80037f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d01e      	beq.n	800383c <xTaskCreateStatic+0xac>
 80037fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003800:	2b00      	cmp	r3, #0
 8003802:	d01b      	beq.n	800383c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003804:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003806:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800380a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800380c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800380e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003810:	2202      	movs	r2, #2
 8003812:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003816:	2300      	movs	r3, #0
 8003818:	9303      	str	r3, [sp, #12]
 800381a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800381c:	9302      	str	r3, [sp, #8]
 800381e:	f107 0314 	add.w	r3, r7, #20
 8003822:	9301      	str	r3, [sp, #4]
 8003824:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003826:	9300      	str	r3, [sp, #0]
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	687a      	ldr	r2, [r7, #4]
 800382c:	68b9      	ldr	r1, [r7, #8]
 800382e:	68f8      	ldr	r0, [r7, #12]
 8003830:	f000 f850 	bl	80038d4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003834:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003836:	f000 f8f3 	bl	8003a20 <prvAddNewTaskToReadyList>
 800383a:	e001      	b.n	8003840 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800383c:	2300      	movs	r3, #0
 800383e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003840:	697b      	ldr	r3, [r7, #20]
	}
 8003842:	4618      	mov	r0, r3
 8003844:	3728      	adds	r7, #40	; 0x28
 8003846:	46bd      	mov	sp, r7
 8003848:	bd80      	pop	{r7, pc}

0800384a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800384a:	b580      	push	{r7, lr}
 800384c:	b08c      	sub	sp, #48	; 0x30
 800384e:	af04      	add	r7, sp, #16
 8003850:	60f8      	str	r0, [r7, #12]
 8003852:	60b9      	str	r1, [r7, #8]
 8003854:	603b      	str	r3, [r7, #0]
 8003856:	4613      	mov	r3, r2
 8003858:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800385a:	88fb      	ldrh	r3, [r7, #6]
 800385c:	009b      	lsls	r3, r3, #2
 800385e:	4618      	mov	r0, r3
 8003860:	f001 fc5a 	bl	8005118 <pvPortMalloc>
 8003864:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003866:	697b      	ldr	r3, [r7, #20]
 8003868:	2b00      	cmp	r3, #0
 800386a:	d00e      	beq.n	800388a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800386c:	20bc      	movs	r0, #188	; 0xbc
 800386e:	f001 fc53 	bl	8005118 <pvPortMalloc>
 8003872:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003874:	69fb      	ldr	r3, [r7, #28]
 8003876:	2b00      	cmp	r3, #0
 8003878:	d003      	beq.n	8003882 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800387a:	69fb      	ldr	r3, [r7, #28]
 800387c:	697a      	ldr	r2, [r7, #20]
 800387e:	631a      	str	r2, [r3, #48]	; 0x30
 8003880:	e005      	b.n	800388e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003882:	6978      	ldr	r0, [r7, #20]
 8003884:	f001 fd14 	bl	80052b0 <vPortFree>
 8003888:	e001      	b.n	800388e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800388a:	2300      	movs	r3, #0
 800388c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800388e:	69fb      	ldr	r3, [r7, #28]
 8003890:	2b00      	cmp	r3, #0
 8003892:	d017      	beq.n	80038c4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003894:	69fb      	ldr	r3, [r7, #28]
 8003896:	2200      	movs	r2, #0
 8003898:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800389c:	88fa      	ldrh	r2, [r7, #6]
 800389e:	2300      	movs	r3, #0
 80038a0:	9303      	str	r3, [sp, #12]
 80038a2:	69fb      	ldr	r3, [r7, #28]
 80038a4:	9302      	str	r3, [sp, #8]
 80038a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038a8:	9301      	str	r3, [sp, #4]
 80038aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038ac:	9300      	str	r3, [sp, #0]
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	68b9      	ldr	r1, [r7, #8]
 80038b2:	68f8      	ldr	r0, [r7, #12]
 80038b4:	f000 f80e 	bl	80038d4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80038b8:	69f8      	ldr	r0, [r7, #28]
 80038ba:	f000 f8b1 	bl	8003a20 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80038be:	2301      	movs	r3, #1
 80038c0:	61bb      	str	r3, [r7, #24]
 80038c2:	e002      	b.n	80038ca <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80038c4:	f04f 33ff 	mov.w	r3, #4294967295
 80038c8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80038ca:	69bb      	ldr	r3, [r7, #24]
	}
 80038cc:	4618      	mov	r0, r3
 80038ce:	3720      	adds	r7, #32
 80038d0:	46bd      	mov	sp, r7
 80038d2:	bd80      	pop	{r7, pc}

080038d4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b088      	sub	sp, #32
 80038d8:	af00      	add	r7, sp, #0
 80038da:	60f8      	str	r0, [r7, #12]
 80038dc:	60b9      	str	r1, [r7, #8]
 80038de:	607a      	str	r2, [r7, #4]
 80038e0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80038e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038e4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	009b      	lsls	r3, r3, #2
 80038ea:	461a      	mov	r2, r3
 80038ec:	21a5      	movs	r1, #165	; 0xa5
 80038ee:	f001 fe31 	bl	8005554 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80038f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80038fc:	3b01      	subs	r3, #1
 80038fe:	009b      	lsls	r3, r3, #2
 8003900:	4413      	add	r3, r2
 8003902:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003904:	69bb      	ldr	r3, [r7, #24]
 8003906:	f023 0307 	bic.w	r3, r3, #7
 800390a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800390c:	69bb      	ldr	r3, [r7, #24]
 800390e:	f003 0307 	and.w	r3, r3, #7
 8003912:	2b00      	cmp	r3, #0
 8003914:	d00a      	beq.n	800392c <prvInitialiseNewTask+0x58>
	__asm volatile
 8003916:	f04f 0350 	mov.w	r3, #80	; 0x50
 800391a:	f383 8811 	msr	BASEPRI, r3
 800391e:	f3bf 8f6f 	isb	sy
 8003922:	f3bf 8f4f 	dsb	sy
 8003926:	617b      	str	r3, [r7, #20]
}
 8003928:	bf00      	nop
 800392a:	e7fe      	b.n	800392a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800392c:	68bb      	ldr	r3, [r7, #8]
 800392e:	2b00      	cmp	r3, #0
 8003930:	d01f      	beq.n	8003972 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003932:	2300      	movs	r3, #0
 8003934:	61fb      	str	r3, [r7, #28]
 8003936:	e012      	b.n	800395e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003938:	68ba      	ldr	r2, [r7, #8]
 800393a:	69fb      	ldr	r3, [r7, #28]
 800393c:	4413      	add	r3, r2
 800393e:	7819      	ldrb	r1, [r3, #0]
 8003940:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003942:	69fb      	ldr	r3, [r7, #28]
 8003944:	4413      	add	r3, r2
 8003946:	3334      	adds	r3, #52	; 0x34
 8003948:	460a      	mov	r2, r1
 800394a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800394c:	68ba      	ldr	r2, [r7, #8]
 800394e:	69fb      	ldr	r3, [r7, #28]
 8003950:	4413      	add	r3, r2
 8003952:	781b      	ldrb	r3, [r3, #0]
 8003954:	2b00      	cmp	r3, #0
 8003956:	d006      	beq.n	8003966 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003958:	69fb      	ldr	r3, [r7, #28]
 800395a:	3301      	adds	r3, #1
 800395c:	61fb      	str	r3, [r7, #28]
 800395e:	69fb      	ldr	r3, [r7, #28]
 8003960:	2b0f      	cmp	r3, #15
 8003962:	d9e9      	bls.n	8003938 <prvInitialiseNewTask+0x64>
 8003964:	e000      	b.n	8003968 <prvInitialiseNewTask+0x94>
			{
				break;
 8003966:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003968:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800396a:	2200      	movs	r2, #0
 800396c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003970:	e003      	b.n	800397a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003972:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003974:	2200      	movs	r2, #0
 8003976:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800397a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800397c:	2b37      	cmp	r3, #55	; 0x37
 800397e:	d901      	bls.n	8003984 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003980:	2337      	movs	r3, #55	; 0x37
 8003982:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003984:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003986:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003988:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800398a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800398c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800398e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003990:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003992:	2200      	movs	r2, #0
 8003994:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003996:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003998:	3304      	adds	r3, #4
 800399a:	4618      	mov	r0, r3
 800399c:	f7ff f978 	bl	8002c90 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80039a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039a2:	3318      	adds	r3, #24
 80039a4:	4618      	mov	r0, r3
 80039a6:	f7ff f973 	bl	8002c90 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80039aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80039ae:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80039b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039b2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80039b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039b8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80039ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80039be:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80039c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039c2:	2200      	movs	r2, #0
 80039c4:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80039c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039ca:	2200      	movs	r2, #0
 80039cc:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80039d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039d2:	3354      	adds	r3, #84	; 0x54
 80039d4:	2260      	movs	r2, #96	; 0x60
 80039d6:	2100      	movs	r1, #0
 80039d8:	4618      	mov	r0, r3
 80039da:	f001 fdbb 	bl	8005554 <memset>
 80039de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039e0:	4a0c      	ldr	r2, [pc, #48]	; (8003a14 <prvInitialiseNewTask+0x140>)
 80039e2:	659a      	str	r2, [r3, #88]	; 0x58
 80039e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039e6:	4a0c      	ldr	r2, [pc, #48]	; (8003a18 <prvInitialiseNewTask+0x144>)
 80039e8:	65da      	str	r2, [r3, #92]	; 0x5c
 80039ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039ec:	4a0b      	ldr	r2, [pc, #44]	; (8003a1c <prvInitialiseNewTask+0x148>)
 80039ee:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80039f0:	683a      	ldr	r2, [r7, #0]
 80039f2:	68f9      	ldr	r1, [r7, #12]
 80039f4:	69b8      	ldr	r0, [r7, #24]
 80039f6:	f001 f941 	bl	8004c7c <pxPortInitialiseStack>
 80039fa:	4602      	mov	r2, r0
 80039fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039fe:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003a00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d002      	beq.n	8003a0c <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003a06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a08:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a0a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003a0c:	bf00      	nop
 8003a0e:	3720      	adds	r7, #32
 8003a10:	46bd      	mov	sp, r7
 8003a12:	bd80      	pop	{r7, pc}
 8003a14:	080057d8 	.word	0x080057d8
 8003a18:	080057f8 	.word	0x080057f8
 8003a1c:	080057b8 	.word	0x080057b8

08003a20 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b082      	sub	sp, #8
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003a28:	f001 fa54 	bl	8004ed4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003a2c:	4b2d      	ldr	r3, [pc, #180]	; (8003ae4 <prvAddNewTaskToReadyList+0xc4>)
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	3301      	adds	r3, #1
 8003a32:	4a2c      	ldr	r2, [pc, #176]	; (8003ae4 <prvAddNewTaskToReadyList+0xc4>)
 8003a34:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003a36:	4b2c      	ldr	r3, [pc, #176]	; (8003ae8 <prvAddNewTaskToReadyList+0xc8>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d109      	bne.n	8003a52 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003a3e:	4a2a      	ldr	r2, [pc, #168]	; (8003ae8 <prvAddNewTaskToReadyList+0xc8>)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003a44:	4b27      	ldr	r3, [pc, #156]	; (8003ae4 <prvAddNewTaskToReadyList+0xc4>)
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	2b01      	cmp	r3, #1
 8003a4a:	d110      	bne.n	8003a6e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003a4c:	f000 fc26 	bl	800429c <prvInitialiseTaskLists>
 8003a50:	e00d      	b.n	8003a6e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003a52:	4b26      	ldr	r3, [pc, #152]	; (8003aec <prvAddNewTaskToReadyList+0xcc>)
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d109      	bne.n	8003a6e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003a5a:	4b23      	ldr	r3, [pc, #140]	; (8003ae8 <prvAddNewTaskToReadyList+0xc8>)
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a64:	429a      	cmp	r2, r3
 8003a66:	d802      	bhi.n	8003a6e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003a68:	4a1f      	ldr	r2, [pc, #124]	; (8003ae8 <prvAddNewTaskToReadyList+0xc8>)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003a6e:	4b20      	ldr	r3, [pc, #128]	; (8003af0 <prvAddNewTaskToReadyList+0xd0>)
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	3301      	adds	r3, #1
 8003a74:	4a1e      	ldr	r2, [pc, #120]	; (8003af0 <prvAddNewTaskToReadyList+0xd0>)
 8003a76:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003a78:	4b1d      	ldr	r3, [pc, #116]	; (8003af0 <prvAddNewTaskToReadyList+0xd0>)
 8003a7a:	681a      	ldr	r2, [r3, #0]
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a84:	4b1b      	ldr	r3, [pc, #108]	; (8003af4 <prvAddNewTaskToReadyList+0xd4>)
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	429a      	cmp	r2, r3
 8003a8a:	d903      	bls.n	8003a94 <prvAddNewTaskToReadyList+0x74>
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a90:	4a18      	ldr	r2, [pc, #96]	; (8003af4 <prvAddNewTaskToReadyList+0xd4>)
 8003a92:	6013      	str	r3, [r2, #0]
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a98:	4613      	mov	r3, r2
 8003a9a:	009b      	lsls	r3, r3, #2
 8003a9c:	4413      	add	r3, r2
 8003a9e:	009b      	lsls	r3, r3, #2
 8003aa0:	4a15      	ldr	r2, [pc, #84]	; (8003af8 <prvAddNewTaskToReadyList+0xd8>)
 8003aa2:	441a      	add	r2, r3
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	3304      	adds	r3, #4
 8003aa8:	4619      	mov	r1, r3
 8003aaa:	4610      	mov	r0, r2
 8003aac:	f7ff f8fd 	bl	8002caa <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003ab0:	f001 fa40 	bl	8004f34 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003ab4:	4b0d      	ldr	r3, [pc, #52]	; (8003aec <prvAddNewTaskToReadyList+0xcc>)
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d00e      	beq.n	8003ada <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003abc:	4b0a      	ldr	r3, [pc, #40]	; (8003ae8 <prvAddNewTaskToReadyList+0xc8>)
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ac6:	429a      	cmp	r2, r3
 8003ac8:	d207      	bcs.n	8003ada <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003aca:	4b0c      	ldr	r3, [pc, #48]	; (8003afc <prvAddNewTaskToReadyList+0xdc>)
 8003acc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ad0:	601a      	str	r2, [r3, #0]
 8003ad2:	f3bf 8f4f 	dsb	sy
 8003ad6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003ada:	bf00      	nop
 8003adc:	3708      	adds	r7, #8
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	bd80      	pop	{r7, pc}
 8003ae2:	bf00      	nop
 8003ae4:	20000dc8 	.word	0x20000dc8
 8003ae8:	200008f4 	.word	0x200008f4
 8003aec:	20000dd4 	.word	0x20000dd4
 8003af0:	20000de4 	.word	0x20000de4
 8003af4:	20000dd0 	.word	0x20000dd0
 8003af8:	200008f8 	.word	0x200008f8
 8003afc:	e000ed04 	.word	0xe000ed04

08003b00 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b084      	sub	sp, #16
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003b08:	2300      	movs	r3, #0
 8003b0a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d017      	beq.n	8003b42 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003b12:	4b13      	ldr	r3, [pc, #76]	; (8003b60 <vTaskDelay+0x60>)
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d00a      	beq.n	8003b30 <vTaskDelay+0x30>
	__asm volatile
 8003b1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b1e:	f383 8811 	msr	BASEPRI, r3
 8003b22:	f3bf 8f6f 	isb	sy
 8003b26:	f3bf 8f4f 	dsb	sy
 8003b2a:	60bb      	str	r3, [r7, #8]
}
 8003b2c:	bf00      	nop
 8003b2e:	e7fe      	b.n	8003b2e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003b30:	f000 f88a 	bl	8003c48 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003b34:	2100      	movs	r1, #0
 8003b36:	6878      	ldr	r0, [r7, #4]
 8003b38:	f000 fcfe 	bl	8004538 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003b3c:	f000 f892 	bl	8003c64 <xTaskResumeAll>
 8003b40:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d107      	bne.n	8003b58 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8003b48:	4b06      	ldr	r3, [pc, #24]	; (8003b64 <vTaskDelay+0x64>)
 8003b4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b4e:	601a      	str	r2, [r3, #0]
 8003b50:	f3bf 8f4f 	dsb	sy
 8003b54:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003b58:	bf00      	nop
 8003b5a:	3710      	adds	r7, #16
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	bd80      	pop	{r7, pc}
 8003b60:	20000df0 	.word	0x20000df0
 8003b64:	e000ed04 	.word	0xe000ed04

08003b68 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	b08a      	sub	sp, #40	; 0x28
 8003b6c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003b6e:	2300      	movs	r3, #0
 8003b70:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003b72:	2300      	movs	r3, #0
 8003b74:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003b76:	463a      	mov	r2, r7
 8003b78:	1d39      	adds	r1, r7, #4
 8003b7a:	f107 0308 	add.w	r3, r7, #8
 8003b7e:	4618      	mov	r0, r3
 8003b80:	f7ff f832 	bl	8002be8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003b84:	6839      	ldr	r1, [r7, #0]
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	68ba      	ldr	r2, [r7, #8]
 8003b8a:	9202      	str	r2, [sp, #8]
 8003b8c:	9301      	str	r3, [sp, #4]
 8003b8e:	2300      	movs	r3, #0
 8003b90:	9300      	str	r3, [sp, #0]
 8003b92:	2300      	movs	r3, #0
 8003b94:	460a      	mov	r2, r1
 8003b96:	4924      	ldr	r1, [pc, #144]	; (8003c28 <vTaskStartScheduler+0xc0>)
 8003b98:	4824      	ldr	r0, [pc, #144]	; (8003c2c <vTaskStartScheduler+0xc4>)
 8003b9a:	f7ff fdf9 	bl	8003790 <xTaskCreateStatic>
 8003b9e:	4603      	mov	r3, r0
 8003ba0:	4a23      	ldr	r2, [pc, #140]	; (8003c30 <vTaskStartScheduler+0xc8>)
 8003ba2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003ba4:	4b22      	ldr	r3, [pc, #136]	; (8003c30 <vTaskStartScheduler+0xc8>)
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d002      	beq.n	8003bb2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003bac:	2301      	movs	r3, #1
 8003bae:	617b      	str	r3, [r7, #20]
 8003bb0:	e001      	b.n	8003bb6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003bb6:	697b      	ldr	r3, [r7, #20]
 8003bb8:	2b01      	cmp	r3, #1
 8003bba:	d102      	bne.n	8003bc2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003bbc:	f000 fd10 	bl	80045e0 <xTimerCreateTimerTask>
 8003bc0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003bc2:	697b      	ldr	r3, [r7, #20]
 8003bc4:	2b01      	cmp	r3, #1
 8003bc6:	d11b      	bne.n	8003c00 <vTaskStartScheduler+0x98>
	__asm volatile
 8003bc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bcc:	f383 8811 	msr	BASEPRI, r3
 8003bd0:	f3bf 8f6f 	isb	sy
 8003bd4:	f3bf 8f4f 	dsb	sy
 8003bd8:	613b      	str	r3, [r7, #16]
}
 8003bda:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003bdc:	4b15      	ldr	r3, [pc, #84]	; (8003c34 <vTaskStartScheduler+0xcc>)
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	3354      	adds	r3, #84	; 0x54
 8003be2:	4a15      	ldr	r2, [pc, #84]	; (8003c38 <vTaskStartScheduler+0xd0>)
 8003be4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003be6:	4b15      	ldr	r3, [pc, #84]	; (8003c3c <vTaskStartScheduler+0xd4>)
 8003be8:	f04f 32ff 	mov.w	r2, #4294967295
 8003bec:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003bee:	4b14      	ldr	r3, [pc, #80]	; (8003c40 <vTaskStartScheduler+0xd8>)
 8003bf0:	2201      	movs	r2, #1
 8003bf2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003bf4:	4b13      	ldr	r3, [pc, #76]	; (8003c44 <vTaskStartScheduler+0xdc>)
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003bfa:	f001 f8c9 	bl	8004d90 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003bfe:	e00e      	b.n	8003c1e <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003c00:	697b      	ldr	r3, [r7, #20]
 8003c02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c06:	d10a      	bne.n	8003c1e <vTaskStartScheduler+0xb6>
	__asm volatile
 8003c08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c0c:	f383 8811 	msr	BASEPRI, r3
 8003c10:	f3bf 8f6f 	isb	sy
 8003c14:	f3bf 8f4f 	dsb	sy
 8003c18:	60fb      	str	r3, [r7, #12]
}
 8003c1a:	bf00      	nop
 8003c1c:	e7fe      	b.n	8003c1c <vTaskStartScheduler+0xb4>
}
 8003c1e:	bf00      	nop
 8003c20:	3718      	adds	r7, #24
 8003c22:	46bd      	mov	sp, r7
 8003c24:	bd80      	pop	{r7, pc}
 8003c26:	bf00      	nop
 8003c28:	0800571c 	.word	0x0800571c
 8003c2c:	0800426d 	.word	0x0800426d
 8003c30:	20000dec 	.word	0x20000dec
 8003c34:	200008f4 	.word	0x200008f4
 8003c38:	20000010 	.word	0x20000010
 8003c3c:	20000de8 	.word	0x20000de8
 8003c40:	20000dd4 	.word	0x20000dd4
 8003c44:	20000dcc 	.word	0x20000dcc

08003c48 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003c48:	b480      	push	{r7}
 8003c4a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003c4c:	4b04      	ldr	r3, [pc, #16]	; (8003c60 <vTaskSuspendAll+0x18>)
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	3301      	adds	r3, #1
 8003c52:	4a03      	ldr	r2, [pc, #12]	; (8003c60 <vTaskSuspendAll+0x18>)
 8003c54:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8003c56:	bf00      	nop
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5e:	4770      	bx	lr
 8003c60:	20000df0 	.word	0x20000df0

08003c64 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	b084      	sub	sp, #16
 8003c68:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003c6a:	2300      	movs	r3, #0
 8003c6c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003c6e:	2300      	movs	r3, #0
 8003c70:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003c72:	4b42      	ldr	r3, [pc, #264]	; (8003d7c <xTaskResumeAll+0x118>)
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d10a      	bne.n	8003c90 <xTaskResumeAll+0x2c>
	__asm volatile
 8003c7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c7e:	f383 8811 	msr	BASEPRI, r3
 8003c82:	f3bf 8f6f 	isb	sy
 8003c86:	f3bf 8f4f 	dsb	sy
 8003c8a:	603b      	str	r3, [r7, #0]
}
 8003c8c:	bf00      	nop
 8003c8e:	e7fe      	b.n	8003c8e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003c90:	f001 f920 	bl	8004ed4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003c94:	4b39      	ldr	r3, [pc, #228]	; (8003d7c <xTaskResumeAll+0x118>)
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	3b01      	subs	r3, #1
 8003c9a:	4a38      	ldr	r2, [pc, #224]	; (8003d7c <xTaskResumeAll+0x118>)
 8003c9c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003c9e:	4b37      	ldr	r3, [pc, #220]	; (8003d7c <xTaskResumeAll+0x118>)
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d162      	bne.n	8003d6c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003ca6:	4b36      	ldr	r3, [pc, #216]	; (8003d80 <xTaskResumeAll+0x11c>)
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d05e      	beq.n	8003d6c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003cae:	e02f      	b.n	8003d10 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003cb0:	4b34      	ldr	r3, [pc, #208]	; (8003d84 <xTaskResumeAll+0x120>)
 8003cb2:	68db      	ldr	r3, [r3, #12]
 8003cb4:	68db      	ldr	r3, [r3, #12]
 8003cb6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	3318      	adds	r3, #24
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	f7ff f851 	bl	8002d64 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	3304      	adds	r3, #4
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	f7ff f84c 	bl	8002d64 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cd0:	4b2d      	ldr	r3, [pc, #180]	; (8003d88 <xTaskResumeAll+0x124>)
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	429a      	cmp	r2, r3
 8003cd6:	d903      	bls.n	8003ce0 <xTaskResumeAll+0x7c>
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cdc:	4a2a      	ldr	r2, [pc, #168]	; (8003d88 <xTaskResumeAll+0x124>)
 8003cde:	6013      	str	r3, [r2, #0]
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ce4:	4613      	mov	r3, r2
 8003ce6:	009b      	lsls	r3, r3, #2
 8003ce8:	4413      	add	r3, r2
 8003cea:	009b      	lsls	r3, r3, #2
 8003cec:	4a27      	ldr	r2, [pc, #156]	; (8003d8c <xTaskResumeAll+0x128>)
 8003cee:	441a      	add	r2, r3
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	3304      	adds	r3, #4
 8003cf4:	4619      	mov	r1, r3
 8003cf6:	4610      	mov	r0, r2
 8003cf8:	f7fe ffd7 	bl	8002caa <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d00:	4b23      	ldr	r3, [pc, #140]	; (8003d90 <xTaskResumeAll+0x12c>)
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d06:	429a      	cmp	r2, r3
 8003d08:	d302      	bcc.n	8003d10 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8003d0a:	4b22      	ldr	r3, [pc, #136]	; (8003d94 <xTaskResumeAll+0x130>)
 8003d0c:	2201      	movs	r2, #1
 8003d0e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003d10:	4b1c      	ldr	r3, [pc, #112]	; (8003d84 <xTaskResumeAll+0x120>)
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d1cb      	bne.n	8003cb0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d001      	beq.n	8003d22 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003d1e:	f000 fb5f 	bl	80043e0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003d22:	4b1d      	ldr	r3, [pc, #116]	; (8003d98 <xTaskResumeAll+0x134>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d010      	beq.n	8003d50 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003d2e:	f000 f847 	bl	8003dc0 <xTaskIncrementTick>
 8003d32:	4603      	mov	r3, r0
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d002      	beq.n	8003d3e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8003d38:	4b16      	ldr	r3, [pc, #88]	; (8003d94 <xTaskResumeAll+0x130>)
 8003d3a:	2201      	movs	r2, #1
 8003d3c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	3b01      	subs	r3, #1
 8003d42:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d1f1      	bne.n	8003d2e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8003d4a:	4b13      	ldr	r3, [pc, #76]	; (8003d98 <xTaskResumeAll+0x134>)
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003d50:	4b10      	ldr	r3, [pc, #64]	; (8003d94 <xTaskResumeAll+0x130>)
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d009      	beq.n	8003d6c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003d58:	2301      	movs	r3, #1
 8003d5a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003d5c:	4b0f      	ldr	r3, [pc, #60]	; (8003d9c <xTaskResumeAll+0x138>)
 8003d5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d62:	601a      	str	r2, [r3, #0]
 8003d64:	f3bf 8f4f 	dsb	sy
 8003d68:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003d6c:	f001 f8e2 	bl	8004f34 <vPortExitCritical>

	return xAlreadyYielded;
 8003d70:	68bb      	ldr	r3, [r7, #8]
}
 8003d72:	4618      	mov	r0, r3
 8003d74:	3710      	adds	r7, #16
 8003d76:	46bd      	mov	sp, r7
 8003d78:	bd80      	pop	{r7, pc}
 8003d7a:	bf00      	nop
 8003d7c:	20000df0 	.word	0x20000df0
 8003d80:	20000dc8 	.word	0x20000dc8
 8003d84:	20000d88 	.word	0x20000d88
 8003d88:	20000dd0 	.word	0x20000dd0
 8003d8c:	200008f8 	.word	0x200008f8
 8003d90:	200008f4 	.word	0x200008f4
 8003d94:	20000ddc 	.word	0x20000ddc
 8003d98:	20000dd8 	.word	0x20000dd8
 8003d9c:	e000ed04 	.word	0xe000ed04

08003da0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003da0:	b480      	push	{r7}
 8003da2:	b083      	sub	sp, #12
 8003da4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003da6:	4b05      	ldr	r3, [pc, #20]	; (8003dbc <xTaskGetTickCount+0x1c>)
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003dac:	687b      	ldr	r3, [r7, #4]
}
 8003dae:	4618      	mov	r0, r3
 8003db0:	370c      	adds	r7, #12
 8003db2:	46bd      	mov	sp, r7
 8003db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db8:	4770      	bx	lr
 8003dba:	bf00      	nop
 8003dbc:	20000dcc 	.word	0x20000dcc

08003dc0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b086      	sub	sp, #24
 8003dc4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003dca:	4b4f      	ldr	r3, [pc, #316]	; (8003f08 <xTaskIncrementTick+0x148>)
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	f040 808f 	bne.w	8003ef2 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003dd4:	4b4d      	ldr	r3, [pc, #308]	; (8003f0c <xTaskIncrementTick+0x14c>)
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	3301      	adds	r3, #1
 8003dda:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003ddc:	4a4b      	ldr	r2, [pc, #300]	; (8003f0c <xTaskIncrementTick+0x14c>)
 8003dde:	693b      	ldr	r3, [r7, #16]
 8003de0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003de2:	693b      	ldr	r3, [r7, #16]
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d120      	bne.n	8003e2a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003de8:	4b49      	ldr	r3, [pc, #292]	; (8003f10 <xTaskIncrementTick+0x150>)
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d00a      	beq.n	8003e08 <xTaskIncrementTick+0x48>
	__asm volatile
 8003df2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003df6:	f383 8811 	msr	BASEPRI, r3
 8003dfa:	f3bf 8f6f 	isb	sy
 8003dfe:	f3bf 8f4f 	dsb	sy
 8003e02:	603b      	str	r3, [r7, #0]
}
 8003e04:	bf00      	nop
 8003e06:	e7fe      	b.n	8003e06 <xTaskIncrementTick+0x46>
 8003e08:	4b41      	ldr	r3, [pc, #260]	; (8003f10 <xTaskIncrementTick+0x150>)
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	60fb      	str	r3, [r7, #12]
 8003e0e:	4b41      	ldr	r3, [pc, #260]	; (8003f14 <xTaskIncrementTick+0x154>)
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	4a3f      	ldr	r2, [pc, #252]	; (8003f10 <xTaskIncrementTick+0x150>)
 8003e14:	6013      	str	r3, [r2, #0]
 8003e16:	4a3f      	ldr	r2, [pc, #252]	; (8003f14 <xTaskIncrementTick+0x154>)
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	6013      	str	r3, [r2, #0]
 8003e1c:	4b3e      	ldr	r3, [pc, #248]	; (8003f18 <xTaskIncrementTick+0x158>)
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	3301      	adds	r3, #1
 8003e22:	4a3d      	ldr	r2, [pc, #244]	; (8003f18 <xTaskIncrementTick+0x158>)
 8003e24:	6013      	str	r3, [r2, #0]
 8003e26:	f000 fadb 	bl	80043e0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003e2a:	4b3c      	ldr	r3, [pc, #240]	; (8003f1c <xTaskIncrementTick+0x15c>)
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	693a      	ldr	r2, [r7, #16]
 8003e30:	429a      	cmp	r2, r3
 8003e32:	d349      	bcc.n	8003ec8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003e34:	4b36      	ldr	r3, [pc, #216]	; (8003f10 <xTaskIncrementTick+0x150>)
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d104      	bne.n	8003e48 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003e3e:	4b37      	ldr	r3, [pc, #220]	; (8003f1c <xTaskIncrementTick+0x15c>)
 8003e40:	f04f 32ff 	mov.w	r2, #4294967295
 8003e44:	601a      	str	r2, [r3, #0]
					break;
 8003e46:	e03f      	b.n	8003ec8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003e48:	4b31      	ldr	r3, [pc, #196]	; (8003f10 <xTaskIncrementTick+0x150>)
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	68db      	ldr	r3, [r3, #12]
 8003e4e:	68db      	ldr	r3, [r3, #12]
 8003e50:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003e52:	68bb      	ldr	r3, [r7, #8]
 8003e54:	685b      	ldr	r3, [r3, #4]
 8003e56:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003e58:	693a      	ldr	r2, [r7, #16]
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	429a      	cmp	r2, r3
 8003e5e:	d203      	bcs.n	8003e68 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003e60:	4a2e      	ldr	r2, [pc, #184]	; (8003f1c <xTaskIncrementTick+0x15c>)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003e66:	e02f      	b.n	8003ec8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003e68:	68bb      	ldr	r3, [r7, #8]
 8003e6a:	3304      	adds	r3, #4
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	f7fe ff79 	bl	8002d64 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003e72:	68bb      	ldr	r3, [r7, #8]
 8003e74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d004      	beq.n	8003e84 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003e7a:	68bb      	ldr	r3, [r7, #8]
 8003e7c:	3318      	adds	r3, #24
 8003e7e:	4618      	mov	r0, r3
 8003e80:	f7fe ff70 	bl	8002d64 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003e84:	68bb      	ldr	r3, [r7, #8]
 8003e86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e88:	4b25      	ldr	r3, [pc, #148]	; (8003f20 <xTaskIncrementTick+0x160>)
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	429a      	cmp	r2, r3
 8003e8e:	d903      	bls.n	8003e98 <xTaskIncrementTick+0xd8>
 8003e90:	68bb      	ldr	r3, [r7, #8]
 8003e92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e94:	4a22      	ldr	r2, [pc, #136]	; (8003f20 <xTaskIncrementTick+0x160>)
 8003e96:	6013      	str	r3, [r2, #0]
 8003e98:	68bb      	ldr	r3, [r7, #8]
 8003e9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e9c:	4613      	mov	r3, r2
 8003e9e:	009b      	lsls	r3, r3, #2
 8003ea0:	4413      	add	r3, r2
 8003ea2:	009b      	lsls	r3, r3, #2
 8003ea4:	4a1f      	ldr	r2, [pc, #124]	; (8003f24 <xTaskIncrementTick+0x164>)
 8003ea6:	441a      	add	r2, r3
 8003ea8:	68bb      	ldr	r3, [r7, #8]
 8003eaa:	3304      	adds	r3, #4
 8003eac:	4619      	mov	r1, r3
 8003eae:	4610      	mov	r0, r2
 8003eb0:	f7fe fefb 	bl	8002caa <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003eb4:	68bb      	ldr	r3, [r7, #8]
 8003eb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003eb8:	4b1b      	ldr	r3, [pc, #108]	; (8003f28 <xTaskIncrementTick+0x168>)
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ebe:	429a      	cmp	r2, r3
 8003ec0:	d3b8      	bcc.n	8003e34 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8003ec2:	2301      	movs	r3, #1
 8003ec4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003ec6:	e7b5      	b.n	8003e34 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003ec8:	4b17      	ldr	r3, [pc, #92]	; (8003f28 <xTaskIncrementTick+0x168>)
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ece:	4915      	ldr	r1, [pc, #84]	; (8003f24 <xTaskIncrementTick+0x164>)
 8003ed0:	4613      	mov	r3, r2
 8003ed2:	009b      	lsls	r3, r3, #2
 8003ed4:	4413      	add	r3, r2
 8003ed6:	009b      	lsls	r3, r3, #2
 8003ed8:	440b      	add	r3, r1
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	2b01      	cmp	r3, #1
 8003ede:	d901      	bls.n	8003ee4 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8003ee0:	2301      	movs	r3, #1
 8003ee2:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003ee4:	4b11      	ldr	r3, [pc, #68]	; (8003f2c <xTaskIncrementTick+0x16c>)
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d007      	beq.n	8003efc <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8003eec:	2301      	movs	r3, #1
 8003eee:	617b      	str	r3, [r7, #20]
 8003ef0:	e004      	b.n	8003efc <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003ef2:	4b0f      	ldr	r3, [pc, #60]	; (8003f30 <xTaskIncrementTick+0x170>)
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	3301      	adds	r3, #1
 8003ef8:	4a0d      	ldr	r2, [pc, #52]	; (8003f30 <xTaskIncrementTick+0x170>)
 8003efa:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8003efc:	697b      	ldr	r3, [r7, #20]
}
 8003efe:	4618      	mov	r0, r3
 8003f00:	3718      	adds	r7, #24
 8003f02:	46bd      	mov	sp, r7
 8003f04:	bd80      	pop	{r7, pc}
 8003f06:	bf00      	nop
 8003f08:	20000df0 	.word	0x20000df0
 8003f0c:	20000dcc 	.word	0x20000dcc
 8003f10:	20000d80 	.word	0x20000d80
 8003f14:	20000d84 	.word	0x20000d84
 8003f18:	20000de0 	.word	0x20000de0
 8003f1c:	20000de8 	.word	0x20000de8
 8003f20:	20000dd0 	.word	0x20000dd0
 8003f24:	200008f8 	.word	0x200008f8
 8003f28:	200008f4 	.word	0x200008f4
 8003f2c:	20000ddc 	.word	0x20000ddc
 8003f30:	20000dd8 	.word	0x20000dd8

08003f34 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003f34:	b480      	push	{r7}
 8003f36:	b085      	sub	sp, #20
 8003f38:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003f3a:	4b2a      	ldr	r3, [pc, #168]	; (8003fe4 <vTaskSwitchContext+0xb0>)
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d003      	beq.n	8003f4a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003f42:	4b29      	ldr	r3, [pc, #164]	; (8003fe8 <vTaskSwitchContext+0xb4>)
 8003f44:	2201      	movs	r2, #1
 8003f46:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003f48:	e046      	b.n	8003fd8 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8003f4a:	4b27      	ldr	r3, [pc, #156]	; (8003fe8 <vTaskSwitchContext+0xb4>)
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003f50:	4b26      	ldr	r3, [pc, #152]	; (8003fec <vTaskSwitchContext+0xb8>)
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	60fb      	str	r3, [r7, #12]
 8003f56:	e010      	b.n	8003f7a <vTaskSwitchContext+0x46>
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d10a      	bne.n	8003f74 <vTaskSwitchContext+0x40>
	__asm volatile
 8003f5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f62:	f383 8811 	msr	BASEPRI, r3
 8003f66:	f3bf 8f6f 	isb	sy
 8003f6a:	f3bf 8f4f 	dsb	sy
 8003f6e:	607b      	str	r3, [r7, #4]
}
 8003f70:	bf00      	nop
 8003f72:	e7fe      	b.n	8003f72 <vTaskSwitchContext+0x3e>
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	3b01      	subs	r3, #1
 8003f78:	60fb      	str	r3, [r7, #12]
 8003f7a:	491d      	ldr	r1, [pc, #116]	; (8003ff0 <vTaskSwitchContext+0xbc>)
 8003f7c:	68fa      	ldr	r2, [r7, #12]
 8003f7e:	4613      	mov	r3, r2
 8003f80:	009b      	lsls	r3, r3, #2
 8003f82:	4413      	add	r3, r2
 8003f84:	009b      	lsls	r3, r3, #2
 8003f86:	440b      	add	r3, r1
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d0e4      	beq.n	8003f58 <vTaskSwitchContext+0x24>
 8003f8e:	68fa      	ldr	r2, [r7, #12]
 8003f90:	4613      	mov	r3, r2
 8003f92:	009b      	lsls	r3, r3, #2
 8003f94:	4413      	add	r3, r2
 8003f96:	009b      	lsls	r3, r3, #2
 8003f98:	4a15      	ldr	r2, [pc, #84]	; (8003ff0 <vTaskSwitchContext+0xbc>)
 8003f9a:	4413      	add	r3, r2
 8003f9c:	60bb      	str	r3, [r7, #8]
 8003f9e:	68bb      	ldr	r3, [r7, #8]
 8003fa0:	685b      	ldr	r3, [r3, #4]
 8003fa2:	685a      	ldr	r2, [r3, #4]
 8003fa4:	68bb      	ldr	r3, [r7, #8]
 8003fa6:	605a      	str	r2, [r3, #4]
 8003fa8:	68bb      	ldr	r3, [r7, #8]
 8003faa:	685a      	ldr	r2, [r3, #4]
 8003fac:	68bb      	ldr	r3, [r7, #8]
 8003fae:	3308      	adds	r3, #8
 8003fb0:	429a      	cmp	r2, r3
 8003fb2:	d104      	bne.n	8003fbe <vTaskSwitchContext+0x8a>
 8003fb4:	68bb      	ldr	r3, [r7, #8]
 8003fb6:	685b      	ldr	r3, [r3, #4]
 8003fb8:	685a      	ldr	r2, [r3, #4]
 8003fba:	68bb      	ldr	r3, [r7, #8]
 8003fbc:	605a      	str	r2, [r3, #4]
 8003fbe:	68bb      	ldr	r3, [r7, #8]
 8003fc0:	685b      	ldr	r3, [r3, #4]
 8003fc2:	68db      	ldr	r3, [r3, #12]
 8003fc4:	4a0b      	ldr	r2, [pc, #44]	; (8003ff4 <vTaskSwitchContext+0xc0>)
 8003fc6:	6013      	str	r3, [r2, #0]
 8003fc8:	4a08      	ldr	r2, [pc, #32]	; (8003fec <vTaskSwitchContext+0xb8>)
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003fce:	4b09      	ldr	r3, [pc, #36]	; (8003ff4 <vTaskSwitchContext+0xc0>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	3354      	adds	r3, #84	; 0x54
 8003fd4:	4a08      	ldr	r2, [pc, #32]	; (8003ff8 <vTaskSwitchContext+0xc4>)
 8003fd6:	6013      	str	r3, [r2, #0]
}
 8003fd8:	bf00      	nop
 8003fda:	3714      	adds	r7, #20
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe2:	4770      	bx	lr
 8003fe4:	20000df0 	.word	0x20000df0
 8003fe8:	20000ddc 	.word	0x20000ddc
 8003fec:	20000dd0 	.word	0x20000dd0
 8003ff0:	200008f8 	.word	0x200008f8
 8003ff4:	200008f4 	.word	0x200008f4
 8003ff8:	20000010 	.word	0x20000010

08003ffc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b084      	sub	sp, #16
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
 8004004:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	2b00      	cmp	r3, #0
 800400a:	d10a      	bne.n	8004022 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800400c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004010:	f383 8811 	msr	BASEPRI, r3
 8004014:	f3bf 8f6f 	isb	sy
 8004018:	f3bf 8f4f 	dsb	sy
 800401c:	60fb      	str	r3, [r7, #12]
}
 800401e:	bf00      	nop
 8004020:	e7fe      	b.n	8004020 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004022:	4b07      	ldr	r3, [pc, #28]	; (8004040 <vTaskPlaceOnEventList+0x44>)
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	3318      	adds	r3, #24
 8004028:	4619      	mov	r1, r3
 800402a:	6878      	ldr	r0, [r7, #4]
 800402c:	f7fe fe61 	bl	8002cf2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004030:	2101      	movs	r1, #1
 8004032:	6838      	ldr	r0, [r7, #0]
 8004034:	f000 fa80 	bl	8004538 <prvAddCurrentTaskToDelayedList>
}
 8004038:	bf00      	nop
 800403a:	3710      	adds	r7, #16
 800403c:	46bd      	mov	sp, r7
 800403e:	bd80      	pop	{r7, pc}
 8004040:	200008f4 	.word	0x200008f4

08004044 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004044:	b580      	push	{r7, lr}
 8004046:	b086      	sub	sp, #24
 8004048:	af00      	add	r7, sp, #0
 800404a:	60f8      	str	r0, [r7, #12]
 800404c:	60b9      	str	r1, [r7, #8]
 800404e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	2b00      	cmp	r3, #0
 8004054:	d10a      	bne.n	800406c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8004056:	f04f 0350 	mov.w	r3, #80	; 0x50
 800405a:	f383 8811 	msr	BASEPRI, r3
 800405e:	f3bf 8f6f 	isb	sy
 8004062:	f3bf 8f4f 	dsb	sy
 8004066:	617b      	str	r3, [r7, #20]
}
 8004068:	bf00      	nop
 800406a:	e7fe      	b.n	800406a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800406c:	4b0a      	ldr	r3, [pc, #40]	; (8004098 <vTaskPlaceOnEventListRestricted+0x54>)
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	3318      	adds	r3, #24
 8004072:	4619      	mov	r1, r3
 8004074:	68f8      	ldr	r0, [r7, #12]
 8004076:	f7fe fe18 	bl	8002caa <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	2b00      	cmp	r3, #0
 800407e:	d002      	beq.n	8004086 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8004080:	f04f 33ff 	mov.w	r3, #4294967295
 8004084:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004086:	6879      	ldr	r1, [r7, #4]
 8004088:	68b8      	ldr	r0, [r7, #8]
 800408a:	f000 fa55 	bl	8004538 <prvAddCurrentTaskToDelayedList>
	}
 800408e:	bf00      	nop
 8004090:	3718      	adds	r7, #24
 8004092:	46bd      	mov	sp, r7
 8004094:	bd80      	pop	{r7, pc}
 8004096:	bf00      	nop
 8004098:	200008f4 	.word	0x200008f4

0800409c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800409c:	b580      	push	{r7, lr}
 800409e:	b086      	sub	sp, #24
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	68db      	ldr	r3, [r3, #12]
 80040a8:	68db      	ldr	r3, [r3, #12]
 80040aa:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80040ac:	693b      	ldr	r3, [r7, #16]
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d10a      	bne.n	80040c8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80040b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040b6:	f383 8811 	msr	BASEPRI, r3
 80040ba:	f3bf 8f6f 	isb	sy
 80040be:	f3bf 8f4f 	dsb	sy
 80040c2:	60fb      	str	r3, [r7, #12]
}
 80040c4:	bf00      	nop
 80040c6:	e7fe      	b.n	80040c6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80040c8:	693b      	ldr	r3, [r7, #16]
 80040ca:	3318      	adds	r3, #24
 80040cc:	4618      	mov	r0, r3
 80040ce:	f7fe fe49 	bl	8002d64 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80040d2:	4b1e      	ldr	r3, [pc, #120]	; (800414c <xTaskRemoveFromEventList+0xb0>)
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d11d      	bne.n	8004116 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80040da:	693b      	ldr	r3, [r7, #16]
 80040dc:	3304      	adds	r3, #4
 80040de:	4618      	mov	r0, r3
 80040e0:	f7fe fe40 	bl	8002d64 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80040e4:	693b      	ldr	r3, [r7, #16]
 80040e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040e8:	4b19      	ldr	r3, [pc, #100]	; (8004150 <xTaskRemoveFromEventList+0xb4>)
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	429a      	cmp	r2, r3
 80040ee:	d903      	bls.n	80040f8 <xTaskRemoveFromEventList+0x5c>
 80040f0:	693b      	ldr	r3, [r7, #16]
 80040f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040f4:	4a16      	ldr	r2, [pc, #88]	; (8004150 <xTaskRemoveFromEventList+0xb4>)
 80040f6:	6013      	str	r3, [r2, #0]
 80040f8:	693b      	ldr	r3, [r7, #16]
 80040fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040fc:	4613      	mov	r3, r2
 80040fe:	009b      	lsls	r3, r3, #2
 8004100:	4413      	add	r3, r2
 8004102:	009b      	lsls	r3, r3, #2
 8004104:	4a13      	ldr	r2, [pc, #76]	; (8004154 <xTaskRemoveFromEventList+0xb8>)
 8004106:	441a      	add	r2, r3
 8004108:	693b      	ldr	r3, [r7, #16]
 800410a:	3304      	adds	r3, #4
 800410c:	4619      	mov	r1, r3
 800410e:	4610      	mov	r0, r2
 8004110:	f7fe fdcb 	bl	8002caa <vListInsertEnd>
 8004114:	e005      	b.n	8004122 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004116:	693b      	ldr	r3, [r7, #16]
 8004118:	3318      	adds	r3, #24
 800411a:	4619      	mov	r1, r3
 800411c:	480e      	ldr	r0, [pc, #56]	; (8004158 <xTaskRemoveFromEventList+0xbc>)
 800411e:	f7fe fdc4 	bl	8002caa <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004122:	693b      	ldr	r3, [r7, #16]
 8004124:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004126:	4b0d      	ldr	r3, [pc, #52]	; (800415c <xTaskRemoveFromEventList+0xc0>)
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800412c:	429a      	cmp	r2, r3
 800412e:	d905      	bls.n	800413c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004130:	2301      	movs	r3, #1
 8004132:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004134:	4b0a      	ldr	r3, [pc, #40]	; (8004160 <xTaskRemoveFromEventList+0xc4>)
 8004136:	2201      	movs	r2, #1
 8004138:	601a      	str	r2, [r3, #0]
 800413a:	e001      	b.n	8004140 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800413c:	2300      	movs	r3, #0
 800413e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004140:	697b      	ldr	r3, [r7, #20]
}
 8004142:	4618      	mov	r0, r3
 8004144:	3718      	adds	r7, #24
 8004146:	46bd      	mov	sp, r7
 8004148:	bd80      	pop	{r7, pc}
 800414a:	bf00      	nop
 800414c:	20000df0 	.word	0x20000df0
 8004150:	20000dd0 	.word	0x20000dd0
 8004154:	200008f8 	.word	0x200008f8
 8004158:	20000d88 	.word	0x20000d88
 800415c:	200008f4 	.word	0x200008f4
 8004160:	20000ddc 	.word	0x20000ddc

08004164 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004164:	b480      	push	{r7}
 8004166:	b083      	sub	sp, #12
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800416c:	4b06      	ldr	r3, [pc, #24]	; (8004188 <vTaskInternalSetTimeOutState+0x24>)
 800416e:	681a      	ldr	r2, [r3, #0]
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004174:	4b05      	ldr	r3, [pc, #20]	; (800418c <vTaskInternalSetTimeOutState+0x28>)
 8004176:	681a      	ldr	r2, [r3, #0]
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	605a      	str	r2, [r3, #4]
}
 800417c:	bf00      	nop
 800417e:	370c      	adds	r7, #12
 8004180:	46bd      	mov	sp, r7
 8004182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004186:	4770      	bx	lr
 8004188:	20000de0 	.word	0x20000de0
 800418c:	20000dcc 	.word	0x20000dcc

08004190 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004190:	b580      	push	{r7, lr}
 8004192:	b088      	sub	sp, #32
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
 8004198:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	2b00      	cmp	r3, #0
 800419e:	d10a      	bne.n	80041b6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80041a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041a4:	f383 8811 	msr	BASEPRI, r3
 80041a8:	f3bf 8f6f 	isb	sy
 80041ac:	f3bf 8f4f 	dsb	sy
 80041b0:	613b      	str	r3, [r7, #16]
}
 80041b2:	bf00      	nop
 80041b4:	e7fe      	b.n	80041b4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80041b6:	683b      	ldr	r3, [r7, #0]
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d10a      	bne.n	80041d2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80041bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041c0:	f383 8811 	msr	BASEPRI, r3
 80041c4:	f3bf 8f6f 	isb	sy
 80041c8:	f3bf 8f4f 	dsb	sy
 80041cc:	60fb      	str	r3, [r7, #12]
}
 80041ce:	bf00      	nop
 80041d0:	e7fe      	b.n	80041d0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80041d2:	f000 fe7f 	bl	8004ed4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80041d6:	4b1d      	ldr	r3, [pc, #116]	; (800424c <xTaskCheckForTimeOut+0xbc>)
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	685b      	ldr	r3, [r3, #4]
 80041e0:	69ba      	ldr	r2, [r7, #24]
 80041e2:	1ad3      	subs	r3, r2, r3
 80041e4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80041e6:	683b      	ldr	r3, [r7, #0]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041ee:	d102      	bne.n	80041f6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80041f0:	2300      	movs	r3, #0
 80041f2:	61fb      	str	r3, [r7, #28]
 80041f4:	e023      	b.n	800423e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681a      	ldr	r2, [r3, #0]
 80041fa:	4b15      	ldr	r3, [pc, #84]	; (8004250 <xTaskCheckForTimeOut+0xc0>)
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	429a      	cmp	r2, r3
 8004200:	d007      	beq.n	8004212 <xTaskCheckForTimeOut+0x82>
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	685b      	ldr	r3, [r3, #4]
 8004206:	69ba      	ldr	r2, [r7, #24]
 8004208:	429a      	cmp	r2, r3
 800420a:	d302      	bcc.n	8004212 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800420c:	2301      	movs	r3, #1
 800420e:	61fb      	str	r3, [r7, #28]
 8004210:	e015      	b.n	800423e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004212:	683b      	ldr	r3, [r7, #0]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	697a      	ldr	r2, [r7, #20]
 8004218:	429a      	cmp	r2, r3
 800421a:	d20b      	bcs.n	8004234 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	681a      	ldr	r2, [r3, #0]
 8004220:	697b      	ldr	r3, [r7, #20]
 8004222:	1ad2      	subs	r2, r2, r3
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004228:	6878      	ldr	r0, [r7, #4]
 800422a:	f7ff ff9b 	bl	8004164 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800422e:	2300      	movs	r3, #0
 8004230:	61fb      	str	r3, [r7, #28]
 8004232:	e004      	b.n	800423e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8004234:	683b      	ldr	r3, [r7, #0]
 8004236:	2200      	movs	r2, #0
 8004238:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800423a:	2301      	movs	r3, #1
 800423c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800423e:	f000 fe79 	bl	8004f34 <vPortExitCritical>

	return xReturn;
 8004242:	69fb      	ldr	r3, [r7, #28]
}
 8004244:	4618      	mov	r0, r3
 8004246:	3720      	adds	r7, #32
 8004248:	46bd      	mov	sp, r7
 800424a:	bd80      	pop	{r7, pc}
 800424c:	20000dcc 	.word	0x20000dcc
 8004250:	20000de0 	.word	0x20000de0

08004254 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004254:	b480      	push	{r7}
 8004256:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004258:	4b03      	ldr	r3, [pc, #12]	; (8004268 <vTaskMissedYield+0x14>)
 800425a:	2201      	movs	r2, #1
 800425c:	601a      	str	r2, [r3, #0]
}
 800425e:	bf00      	nop
 8004260:	46bd      	mov	sp, r7
 8004262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004266:	4770      	bx	lr
 8004268:	20000ddc 	.word	0x20000ddc

0800426c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800426c:	b580      	push	{r7, lr}
 800426e:	b082      	sub	sp, #8
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004274:	f000 f852 	bl	800431c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004278:	4b06      	ldr	r3, [pc, #24]	; (8004294 <prvIdleTask+0x28>)
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	2b01      	cmp	r3, #1
 800427e:	d9f9      	bls.n	8004274 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004280:	4b05      	ldr	r3, [pc, #20]	; (8004298 <prvIdleTask+0x2c>)
 8004282:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004286:	601a      	str	r2, [r3, #0]
 8004288:	f3bf 8f4f 	dsb	sy
 800428c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004290:	e7f0      	b.n	8004274 <prvIdleTask+0x8>
 8004292:	bf00      	nop
 8004294:	200008f8 	.word	0x200008f8
 8004298:	e000ed04 	.word	0xe000ed04

0800429c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800429c:	b580      	push	{r7, lr}
 800429e:	b082      	sub	sp, #8
 80042a0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80042a2:	2300      	movs	r3, #0
 80042a4:	607b      	str	r3, [r7, #4]
 80042a6:	e00c      	b.n	80042c2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80042a8:	687a      	ldr	r2, [r7, #4]
 80042aa:	4613      	mov	r3, r2
 80042ac:	009b      	lsls	r3, r3, #2
 80042ae:	4413      	add	r3, r2
 80042b0:	009b      	lsls	r3, r3, #2
 80042b2:	4a12      	ldr	r2, [pc, #72]	; (80042fc <prvInitialiseTaskLists+0x60>)
 80042b4:	4413      	add	r3, r2
 80042b6:	4618      	mov	r0, r3
 80042b8:	f7fe fcca 	bl	8002c50 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	3301      	adds	r3, #1
 80042c0:	607b      	str	r3, [r7, #4]
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	2b37      	cmp	r3, #55	; 0x37
 80042c6:	d9ef      	bls.n	80042a8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80042c8:	480d      	ldr	r0, [pc, #52]	; (8004300 <prvInitialiseTaskLists+0x64>)
 80042ca:	f7fe fcc1 	bl	8002c50 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80042ce:	480d      	ldr	r0, [pc, #52]	; (8004304 <prvInitialiseTaskLists+0x68>)
 80042d0:	f7fe fcbe 	bl	8002c50 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80042d4:	480c      	ldr	r0, [pc, #48]	; (8004308 <prvInitialiseTaskLists+0x6c>)
 80042d6:	f7fe fcbb 	bl	8002c50 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80042da:	480c      	ldr	r0, [pc, #48]	; (800430c <prvInitialiseTaskLists+0x70>)
 80042dc:	f7fe fcb8 	bl	8002c50 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80042e0:	480b      	ldr	r0, [pc, #44]	; (8004310 <prvInitialiseTaskLists+0x74>)
 80042e2:	f7fe fcb5 	bl	8002c50 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80042e6:	4b0b      	ldr	r3, [pc, #44]	; (8004314 <prvInitialiseTaskLists+0x78>)
 80042e8:	4a05      	ldr	r2, [pc, #20]	; (8004300 <prvInitialiseTaskLists+0x64>)
 80042ea:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80042ec:	4b0a      	ldr	r3, [pc, #40]	; (8004318 <prvInitialiseTaskLists+0x7c>)
 80042ee:	4a05      	ldr	r2, [pc, #20]	; (8004304 <prvInitialiseTaskLists+0x68>)
 80042f0:	601a      	str	r2, [r3, #0]
}
 80042f2:	bf00      	nop
 80042f4:	3708      	adds	r7, #8
 80042f6:	46bd      	mov	sp, r7
 80042f8:	bd80      	pop	{r7, pc}
 80042fa:	bf00      	nop
 80042fc:	200008f8 	.word	0x200008f8
 8004300:	20000d58 	.word	0x20000d58
 8004304:	20000d6c 	.word	0x20000d6c
 8004308:	20000d88 	.word	0x20000d88
 800430c:	20000d9c 	.word	0x20000d9c
 8004310:	20000db4 	.word	0x20000db4
 8004314:	20000d80 	.word	0x20000d80
 8004318:	20000d84 	.word	0x20000d84

0800431c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800431c:	b580      	push	{r7, lr}
 800431e:	b082      	sub	sp, #8
 8004320:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004322:	e019      	b.n	8004358 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004324:	f000 fdd6 	bl	8004ed4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004328:	4b10      	ldr	r3, [pc, #64]	; (800436c <prvCheckTasksWaitingTermination+0x50>)
 800432a:	68db      	ldr	r3, [r3, #12]
 800432c:	68db      	ldr	r3, [r3, #12]
 800432e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	3304      	adds	r3, #4
 8004334:	4618      	mov	r0, r3
 8004336:	f7fe fd15 	bl	8002d64 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800433a:	4b0d      	ldr	r3, [pc, #52]	; (8004370 <prvCheckTasksWaitingTermination+0x54>)
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	3b01      	subs	r3, #1
 8004340:	4a0b      	ldr	r2, [pc, #44]	; (8004370 <prvCheckTasksWaitingTermination+0x54>)
 8004342:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004344:	4b0b      	ldr	r3, [pc, #44]	; (8004374 <prvCheckTasksWaitingTermination+0x58>)
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	3b01      	subs	r3, #1
 800434a:	4a0a      	ldr	r2, [pc, #40]	; (8004374 <prvCheckTasksWaitingTermination+0x58>)
 800434c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800434e:	f000 fdf1 	bl	8004f34 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004352:	6878      	ldr	r0, [r7, #4]
 8004354:	f000 f810 	bl	8004378 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004358:	4b06      	ldr	r3, [pc, #24]	; (8004374 <prvCheckTasksWaitingTermination+0x58>)
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	2b00      	cmp	r3, #0
 800435e:	d1e1      	bne.n	8004324 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004360:	bf00      	nop
 8004362:	bf00      	nop
 8004364:	3708      	adds	r7, #8
 8004366:	46bd      	mov	sp, r7
 8004368:	bd80      	pop	{r7, pc}
 800436a:	bf00      	nop
 800436c:	20000d9c 	.word	0x20000d9c
 8004370:	20000dc8 	.word	0x20000dc8
 8004374:	20000db0 	.word	0x20000db0

08004378 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004378:	b580      	push	{r7, lr}
 800437a:	b084      	sub	sp, #16
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	3354      	adds	r3, #84	; 0x54
 8004384:	4618      	mov	r0, r3
 8004386:	f001 f8fb 	bl	8005580 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8004390:	2b00      	cmp	r3, #0
 8004392:	d108      	bne.n	80043a6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004398:	4618      	mov	r0, r3
 800439a:	f000 ff89 	bl	80052b0 <vPortFree>
				vPortFree( pxTCB );
 800439e:	6878      	ldr	r0, [r7, #4]
 80043a0:	f000 ff86 	bl	80052b0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80043a4:	e018      	b.n	80043d8 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80043ac:	2b01      	cmp	r3, #1
 80043ae:	d103      	bne.n	80043b8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80043b0:	6878      	ldr	r0, [r7, #4]
 80043b2:	f000 ff7d 	bl	80052b0 <vPortFree>
	}
 80043b6:	e00f      	b.n	80043d8 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80043be:	2b02      	cmp	r3, #2
 80043c0:	d00a      	beq.n	80043d8 <prvDeleteTCB+0x60>
	__asm volatile
 80043c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043c6:	f383 8811 	msr	BASEPRI, r3
 80043ca:	f3bf 8f6f 	isb	sy
 80043ce:	f3bf 8f4f 	dsb	sy
 80043d2:	60fb      	str	r3, [r7, #12]
}
 80043d4:	bf00      	nop
 80043d6:	e7fe      	b.n	80043d6 <prvDeleteTCB+0x5e>
	}
 80043d8:	bf00      	nop
 80043da:	3710      	adds	r7, #16
 80043dc:	46bd      	mov	sp, r7
 80043de:	bd80      	pop	{r7, pc}

080043e0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80043e0:	b480      	push	{r7}
 80043e2:	b083      	sub	sp, #12
 80043e4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80043e6:	4b0c      	ldr	r3, [pc, #48]	; (8004418 <prvResetNextTaskUnblockTime+0x38>)
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d104      	bne.n	80043fa <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80043f0:	4b0a      	ldr	r3, [pc, #40]	; (800441c <prvResetNextTaskUnblockTime+0x3c>)
 80043f2:	f04f 32ff 	mov.w	r2, #4294967295
 80043f6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80043f8:	e008      	b.n	800440c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80043fa:	4b07      	ldr	r3, [pc, #28]	; (8004418 <prvResetNextTaskUnblockTime+0x38>)
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	68db      	ldr	r3, [r3, #12]
 8004400:	68db      	ldr	r3, [r3, #12]
 8004402:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	685b      	ldr	r3, [r3, #4]
 8004408:	4a04      	ldr	r2, [pc, #16]	; (800441c <prvResetNextTaskUnblockTime+0x3c>)
 800440a:	6013      	str	r3, [r2, #0]
}
 800440c:	bf00      	nop
 800440e:	370c      	adds	r7, #12
 8004410:	46bd      	mov	sp, r7
 8004412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004416:	4770      	bx	lr
 8004418:	20000d80 	.word	0x20000d80
 800441c:	20000de8 	.word	0x20000de8

08004420 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004420:	b480      	push	{r7}
 8004422:	b083      	sub	sp, #12
 8004424:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004426:	4b0b      	ldr	r3, [pc, #44]	; (8004454 <xTaskGetSchedulerState+0x34>)
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	2b00      	cmp	r3, #0
 800442c:	d102      	bne.n	8004434 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800442e:	2301      	movs	r3, #1
 8004430:	607b      	str	r3, [r7, #4]
 8004432:	e008      	b.n	8004446 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004434:	4b08      	ldr	r3, [pc, #32]	; (8004458 <xTaskGetSchedulerState+0x38>)
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	2b00      	cmp	r3, #0
 800443a:	d102      	bne.n	8004442 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800443c:	2302      	movs	r3, #2
 800443e:	607b      	str	r3, [r7, #4]
 8004440:	e001      	b.n	8004446 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004442:	2300      	movs	r3, #0
 8004444:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004446:	687b      	ldr	r3, [r7, #4]
	}
 8004448:	4618      	mov	r0, r3
 800444a:	370c      	adds	r7, #12
 800444c:	46bd      	mov	sp, r7
 800444e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004452:	4770      	bx	lr
 8004454:	20000dd4 	.word	0x20000dd4
 8004458:	20000df0 	.word	0x20000df0

0800445c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800445c:	b580      	push	{r7, lr}
 800445e:	b086      	sub	sp, #24
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004468:	2300      	movs	r3, #0
 800446a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2b00      	cmp	r3, #0
 8004470:	d056      	beq.n	8004520 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004472:	4b2e      	ldr	r3, [pc, #184]	; (800452c <xTaskPriorityDisinherit+0xd0>)
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	693a      	ldr	r2, [r7, #16]
 8004478:	429a      	cmp	r2, r3
 800447a:	d00a      	beq.n	8004492 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800447c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004480:	f383 8811 	msr	BASEPRI, r3
 8004484:	f3bf 8f6f 	isb	sy
 8004488:	f3bf 8f4f 	dsb	sy
 800448c:	60fb      	str	r3, [r7, #12]
}
 800448e:	bf00      	nop
 8004490:	e7fe      	b.n	8004490 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004492:	693b      	ldr	r3, [r7, #16]
 8004494:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004496:	2b00      	cmp	r3, #0
 8004498:	d10a      	bne.n	80044b0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800449a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800449e:	f383 8811 	msr	BASEPRI, r3
 80044a2:	f3bf 8f6f 	isb	sy
 80044a6:	f3bf 8f4f 	dsb	sy
 80044aa:	60bb      	str	r3, [r7, #8]
}
 80044ac:	bf00      	nop
 80044ae:	e7fe      	b.n	80044ae <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80044b0:	693b      	ldr	r3, [r7, #16]
 80044b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044b4:	1e5a      	subs	r2, r3, #1
 80044b6:	693b      	ldr	r3, [r7, #16]
 80044b8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80044ba:	693b      	ldr	r3, [r7, #16]
 80044bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044be:	693b      	ldr	r3, [r7, #16]
 80044c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044c2:	429a      	cmp	r2, r3
 80044c4:	d02c      	beq.n	8004520 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80044c6:	693b      	ldr	r3, [r7, #16]
 80044c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d128      	bne.n	8004520 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80044ce:	693b      	ldr	r3, [r7, #16]
 80044d0:	3304      	adds	r3, #4
 80044d2:	4618      	mov	r0, r3
 80044d4:	f7fe fc46 	bl	8002d64 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80044d8:	693b      	ldr	r3, [r7, #16]
 80044da:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80044dc:	693b      	ldr	r3, [r7, #16]
 80044de:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80044e0:	693b      	ldr	r3, [r7, #16]
 80044e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044e4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80044e8:	693b      	ldr	r3, [r7, #16]
 80044ea:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80044ec:	693b      	ldr	r3, [r7, #16]
 80044ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044f0:	4b0f      	ldr	r3, [pc, #60]	; (8004530 <xTaskPriorityDisinherit+0xd4>)
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	429a      	cmp	r2, r3
 80044f6:	d903      	bls.n	8004500 <xTaskPriorityDisinherit+0xa4>
 80044f8:	693b      	ldr	r3, [r7, #16]
 80044fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044fc:	4a0c      	ldr	r2, [pc, #48]	; (8004530 <xTaskPriorityDisinherit+0xd4>)
 80044fe:	6013      	str	r3, [r2, #0]
 8004500:	693b      	ldr	r3, [r7, #16]
 8004502:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004504:	4613      	mov	r3, r2
 8004506:	009b      	lsls	r3, r3, #2
 8004508:	4413      	add	r3, r2
 800450a:	009b      	lsls	r3, r3, #2
 800450c:	4a09      	ldr	r2, [pc, #36]	; (8004534 <xTaskPriorityDisinherit+0xd8>)
 800450e:	441a      	add	r2, r3
 8004510:	693b      	ldr	r3, [r7, #16]
 8004512:	3304      	adds	r3, #4
 8004514:	4619      	mov	r1, r3
 8004516:	4610      	mov	r0, r2
 8004518:	f7fe fbc7 	bl	8002caa <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800451c:	2301      	movs	r3, #1
 800451e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004520:	697b      	ldr	r3, [r7, #20]
	}
 8004522:	4618      	mov	r0, r3
 8004524:	3718      	adds	r7, #24
 8004526:	46bd      	mov	sp, r7
 8004528:	bd80      	pop	{r7, pc}
 800452a:	bf00      	nop
 800452c:	200008f4 	.word	0x200008f4
 8004530:	20000dd0 	.word	0x20000dd0
 8004534:	200008f8 	.word	0x200008f8

08004538 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004538:	b580      	push	{r7, lr}
 800453a:	b084      	sub	sp, #16
 800453c:	af00      	add	r7, sp, #0
 800453e:	6078      	str	r0, [r7, #4]
 8004540:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004542:	4b21      	ldr	r3, [pc, #132]	; (80045c8 <prvAddCurrentTaskToDelayedList+0x90>)
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004548:	4b20      	ldr	r3, [pc, #128]	; (80045cc <prvAddCurrentTaskToDelayedList+0x94>)
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	3304      	adds	r3, #4
 800454e:	4618      	mov	r0, r3
 8004550:	f7fe fc08 	bl	8002d64 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	f1b3 3fff 	cmp.w	r3, #4294967295
 800455a:	d10a      	bne.n	8004572 <prvAddCurrentTaskToDelayedList+0x3a>
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	2b00      	cmp	r3, #0
 8004560:	d007      	beq.n	8004572 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004562:	4b1a      	ldr	r3, [pc, #104]	; (80045cc <prvAddCurrentTaskToDelayedList+0x94>)
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	3304      	adds	r3, #4
 8004568:	4619      	mov	r1, r3
 800456a:	4819      	ldr	r0, [pc, #100]	; (80045d0 <prvAddCurrentTaskToDelayedList+0x98>)
 800456c:	f7fe fb9d 	bl	8002caa <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004570:	e026      	b.n	80045c0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004572:	68fa      	ldr	r2, [r7, #12]
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	4413      	add	r3, r2
 8004578:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800457a:	4b14      	ldr	r3, [pc, #80]	; (80045cc <prvAddCurrentTaskToDelayedList+0x94>)
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	68ba      	ldr	r2, [r7, #8]
 8004580:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004582:	68ba      	ldr	r2, [r7, #8]
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	429a      	cmp	r2, r3
 8004588:	d209      	bcs.n	800459e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800458a:	4b12      	ldr	r3, [pc, #72]	; (80045d4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800458c:	681a      	ldr	r2, [r3, #0]
 800458e:	4b0f      	ldr	r3, [pc, #60]	; (80045cc <prvAddCurrentTaskToDelayedList+0x94>)
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	3304      	adds	r3, #4
 8004594:	4619      	mov	r1, r3
 8004596:	4610      	mov	r0, r2
 8004598:	f7fe fbab 	bl	8002cf2 <vListInsert>
}
 800459c:	e010      	b.n	80045c0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800459e:	4b0e      	ldr	r3, [pc, #56]	; (80045d8 <prvAddCurrentTaskToDelayedList+0xa0>)
 80045a0:	681a      	ldr	r2, [r3, #0]
 80045a2:	4b0a      	ldr	r3, [pc, #40]	; (80045cc <prvAddCurrentTaskToDelayedList+0x94>)
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	3304      	adds	r3, #4
 80045a8:	4619      	mov	r1, r3
 80045aa:	4610      	mov	r0, r2
 80045ac:	f7fe fba1 	bl	8002cf2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80045b0:	4b0a      	ldr	r3, [pc, #40]	; (80045dc <prvAddCurrentTaskToDelayedList+0xa4>)
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	68ba      	ldr	r2, [r7, #8]
 80045b6:	429a      	cmp	r2, r3
 80045b8:	d202      	bcs.n	80045c0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80045ba:	4a08      	ldr	r2, [pc, #32]	; (80045dc <prvAddCurrentTaskToDelayedList+0xa4>)
 80045bc:	68bb      	ldr	r3, [r7, #8]
 80045be:	6013      	str	r3, [r2, #0]
}
 80045c0:	bf00      	nop
 80045c2:	3710      	adds	r7, #16
 80045c4:	46bd      	mov	sp, r7
 80045c6:	bd80      	pop	{r7, pc}
 80045c8:	20000dcc 	.word	0x20000dcc
 80045cc:	200008f4 	.word	0x200008f4
 80045d0:	20000db4 	.word	0x20000db4
 80045d4:	20000d84 	.word	0x20000d84
 80045d8:	20000d80 	.word	0x20000d80
 80045dc:	20000de8 	.word	0x20000de8

080045e0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80045e0:	b580      	push	{r7, lr}
 80045e2:	b08a      	sub	sp, #40	; 0x28
 80045e4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80045e6:	2300      	movs	r3, #0
 80045e8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80045ea:	f000 fb07 	bl	8004bfc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80045ee:	4b1c      	ldr	r3, [pc, #112]	; (8004660 <xTimerCreateTimerTask+0x80>)
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d021      	beq.n	800463a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80045f6:	2300      	movs	r3, #0
 80045f8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80045fa:	2300      	movs	r3, #0
 80045fc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80045fe:	1d3a      	adds	r2, r7, #4
 8004600:	f107 0108 	add.w	r1, r7, #8
 8004604:	f107 030c 	add.w	r3, r7, #12
 8004608:	4618      	mov	r0, r3
 800460a:	f7fe fb07 	bl	8002c1c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800460e:	6879      	ldr	r1, [r7, #4]
 8004610:	68bb      	ldr	r3, [r7, #8]
 8004612:	68fa      	ldr	r2, [r7, #12]
 8004614:	9202      	str	r2, [sp, #8]
 8004616:	9301      	str	r3, [sp, #4]
 8004618:	2302      	movs	r3, #2
 800461a:	9300      	str	r3, [sp, #0]
 800461c:	2300      	movs	r3, #0
 800461e:	460a      	mov	r2, r1
 8004620:	4910      	ldr	r1, [pc, #64]	; (8004664 <xTimerCreateTimerTask+0x84>)
 8004622:	4811      	ldr	r0, [pc, #68]	; (8004668 <xTimerCreateTimerTask+0x88>)
 8004624:	f7ff f8b4 	bl	8003790 <xTaskCreateStatic>
 8004628:	4603      	mov	r3, r0
 800462a:	4a10      	ldr	r2, [pc, #64]	; (800466c <xTimerCreateTimerTask+0x8c>)
 800462c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800462e:	4b0f      	ldr	r3, [pc, #60]	; (800466c <xTimerCreateTimerTask+0x8c>)
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	2b00      	cmp	r3, #0
 8004634:	d001      	beq.n	800463a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8004636:	2301      	movs	r3, #1
 8004638:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800463a:	697b      	ldr	r3, [r7, #20]
 800463c:	2b00      	cmp	r3, #0
 800463e:	d10a      	bne.n	8004656 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8004640:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004644:	f383 8811 	msr	BASEPRI, r3
 8004648:	f3bf 8f6f 	isb	sy
 800464c:	f3bf 8f4f 	dsb	sy
 8004650:	613b      	str	r3, [r7, #16]
}
 8004652:	bf00      	nop
 8004654:	e7fe      	b.n	8004654 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8004656:	697b      	ldr	r3, [r7, #20]
}
 8004658:	4618      	mov	r0, r3
 800465a:	3718      	adds	r7, #24
 800465c:	46bd      	mov	sp, r7
 800465e:	bd80      	pop	{r7, pc}
 8004660:	20000e24 	.word	0x20000e24
 8004664:	08005724 	.word	0x08005724
 8004668:	080047a5 	.word	0x080047a5
 800466c:	20000e28 	.word	0x20000e28

08004670 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004670:	b580      	push	{r7, lr}
 8004672:	b08a      	sub	sp, #40	; 0x28
 8004674:	af00      	add	r7, sp, #0
 8004676:	60f8      	str	r0, [r7, #12]
 8004678:	60b9      	str	r1, [r7, #8]
 800467a:	607a      	str	r2, [r7, #4]
 800467c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800467e:	2300      	movs	r3, #0
 8004680:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	2b00      	cmp	r3, #0
 8004686:	d10a      	bne.n	800469e <xTimerGenericCommand+0x2e>
	__asm volatile
 8004688:	f04f 0350 	mov.w	r3, #80	; 0x50
 800468c:	f383 8811 	msr	BASEPRI, r3
 8004690:	f3bf 8f6f 	isb	sy
 8004694:	f3bf 8f4f 	dsb	sy
 8004698:	623b      	str	r3, [r7, #32]
}
 800469a:	bf00      	nop
 800469c:	e7fe      	b.n	800469c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800469e:	4b1a      	ldr	r3, [pc, #104]	; (8004708 <xTimerGenericCommand+0x98>)
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d02a      	beq.n	80046fc <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80046a6:	68bb      	ldr	r3, [r7, #8]
 80046a8:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80046b2:	68bb      	ldr	r3, [r7, #8]
 80046b4:	2b05      	cmp	r3, #5
 80046b6:	dc18      	bgt.n	80046ea <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80046b8:	f7ff feb2 	bl	8004420 <xTaskGetSchedulerState>
 80046bc:	4603      	mov	r3, r0
 80046be:	2b02      	cmp	r3, #2
 80046c0:	d109      	bne.n	80046d6 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80046c2:	4b11      	ldr	r3, [pc, #68]	; (8004708 <xTimerGenericCommand+0x98>)
 80046c4:	6818      	ldr	r0, [r3, #0]
 80046c6:	f107 0110 	add.w	r1, r7, #16
 80046ca:	2300      	movs	r3, #0
 80046cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80046ce:	f7fe fc77 	bl	8002fc0 <xQueueGenericSend>
 80046d2:	6278      	str	r0, [r7, #36]	; 0x24
 80046d4:	e012      	b.n	80046fc <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80046d6:	4b0c      	ldr	r3, [pc, #48]	; (8004708 <xTimerGenericCommand+0x98>)
 80046d8:	6818      	ldr	r0, [r3, #0]
 80046da:	f107 0110 	add.w	r1, r7, #16
 80046de:	2300      	movs	r3, #0
 80046e0:	2200      	movs	r2, #0
 80046e2:	f7fe fc6d 	bl	8002fc0 <xQueueGenericSend>
 80046e6:	6278      	str	r0, [r7, #36]	; 0x24
 80046e8:	e008      	b.n	80046fc <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80046ea:	4b07      	ldr	r3, [pc, #28]	; (8004708 <xTimerGenericCommand+0x98>)
 80046ec:	6818      	ldr	r0, [r3, #0]
 80046ee:	f107 0110 	add.w	r1, r7, #16
 80046f2:	2300      	movs	r3, #0
 80046f4:	683a      	ldr	r2, [r7, #0]
 80046f6:	f7fe fd61 	bl	80031bc <xQueueGenericSendFromISR>
 80046fa:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80046fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80046fe:	4618      	mov	r0, r3
 8004700:	3728      	adds	r7, #40	; 0x28
 8004702:	46bd      	mov	sp, r7
 8004704:	bd80      	pop	{r7, pc}
 8004706:	bf00      	nop
 8004708:	20000e24 	.word	0x20000e24

0800470c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800470c:	b580      	push	{r7, lr}
 800470e:	b088      	sub	sp, #32
 8004710:	af02      	add	r7, sp, #8
 8004712:	6078      	str	r0, [r7, #4]
 8004714:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004716:	4b22      	ldr	r3, [pc, #136]	; (80047a0 <prvProcessExpiredTimer+0x94>)
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	68db      	ldr	r3, [r3, #12]
 800471c:	68db      	ldr	r3, [r3, #12]
 800471e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004720:	697b      	ldr	r3, [r7, #20]
 8004722:	3304      	adds	r3, #4
 8004724:	4618      	mov	r0, r3
 8004726:	f7fe fb1d 	bl	8002d64 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800472a:	697b      	ldr	r3, [r7, #20]
 800472c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004730:	f003 0304 	and.w	r3, r3, #4
 8004734:	2b00      	cmp	r3, #0
 8004736:	d022      	beq.n	800477e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004738:	697b      	ldr	r3, [r7, #20]
 800473a:	699a      	ldr	r2, [r3, #24]
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	18d1      	adds	r1, r2, r3
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	683a      	ldr	r2, [r7, #0]
 8004744:	6978      	ldr	r0, [r7, #20]
 8004746:	f000 f8d1 	bl	80048ec <prvInsertTimerInActiveList>
 800474a:	4603      	mov	r3, r0
 800474c:	2b00      	cmp	r3, #0
 800474e:	d01f      	beq.n	8004790 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004750:	2300      	movs	r3, #0
 8004752:	9300      	str	r3, [sp, #0]
 8004754:	2300      	movs	r3, #0
 8004756:	687a      	ldr	r2, [r7, #4]
 8004758:	2100      	movs	r1, #0
 800475a:	6978      	ldr	r0, [r7, #20]
 800475c:	f7ff ff88 	bl	8004670 <xTimerGenericCommand>
 8004760:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004762:	693b      	ldr	r3, [r7, #16]
 8004764:	2b00      	cmp	r3, #0
 8004766:	d113      	bne.n	8004790 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8004768:	f04f 0350 	mov.w	r3, #80	; 0x50
 800476c:	f383 8811 	msr	BASEPRI, r3
 8004770:	f3bf 8f6f 	isb	sy
 8004774:	f3bf 8f4f 	dsb	sy
 8004778:	60fb      	str	r3, [r7, #12]
}
 800477a:	bf00      	nop
 800477c:	e7fe      	b.n	800477c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800477e:	697b      	ldr	r3, [r7, #20]
 8004780:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004784:	f023 0301 	bic.w	r3, r3, #1
 8004788:	b2da      	uxtb	r2, r3
 800478a:	697b      	ldr	r3, [r7, #20]
 800478c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004790:	697b      	ldr	r3, [r7, #20]
 8004792:	6a1b      	ldr	r3, [r3, #32]
 8004794:	6978      	ldr	r0, [r7, #20]
 8004796:	4798      	blx	r3
}
 8004798:	bf00      	nop
 800479a:	3718      	adds	r7, #24
 800479c:	46bd      	mov	sp, r7
 800479e:	bd80      	pop	{r7, pc}
 80047a0:	20000e1c 	.word	0x20000e1c

080047a4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80047a4:	b580      	push	{r7, lr}
 80047a6:	b084      	sub	sp, #16
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80047ac:	f107 0308 	add.w	r3, r7, #8
 80047b0:	4618      	mov	r0, r3
 80047b2:	f000 f857 	bl	8004864 <prvGetNextExpireTime>
 80047b6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80047b8:	68bb      	ldr	r3, [r7, #8]
 80047ba:	4619      	mov	r1, r3
 80047bc:	68f8      	ldr	r0, [r7, #12]
 80047be:	f000 f803 	bl	80047c8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80047c2:	f000 f8d5 	bl	8004970 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80047c6:	e7f1      	b.n	80047ac <prvTimerTask+0x8>

080047c8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80047c8:	b580      	push	{r7, lr}
 80047ca:	b084      	sub	sp, #16
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	6078      	str	r0, [r7, #4]
 80047d0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80047d2:	f7ff fa39 	bl	8003c48 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80047d6:	f107 0308 	add.w	r3, r7, #8
 80047da:	4618      	mov	r0, r3
 80047dc:	f000 f866 	bl	80048ac <prvSampleTimeNow>
 80047e0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80047e2:	68bb      	ldr	r3, [r7, #8]
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d130      	bne.n	800484a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80047e8:	683b      	ldr	r3, [r7, #0]
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d10a      	bne.n	8004804 <prvProcessTimerOrBlockTask+0x3c>
 80047ee:	687a      	ldr	r2, [r7, #4]
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	429a      	cmp	r2, r3
 80047f4:	d806      	bhi.n	8004804 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80047f6:	f7ff fa35 	bl	8003c64 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80047fa:	68f9      	ldr	r1, [r7, #12]
 80047fc:	6878      	ldr	r0, [r7, #4]
 80047fe:	f7ff ff85 	bl	800470c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004802:	e024      	b.n	800484e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004804:	683b      	ldr	r3, [r7, #0]
 8004806:	2b00      	cmp	r3, #0
 8004808:	d008      	beq.n	800481c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800480a:	4b13      	ldr	r3, [pc, #76]	; (8004858 <prvProcessTimerOrBlockTask+0x90>)
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	2b00      	cmp	r3, #0
 8004812:	d101      	bne.n	8004818 <prvProcessTimerOrBlockTask+0x50>
 8004814:	2301      	movs	r3, #1
 8004816:	e000      	b.n	800481a <prvProcessTimerOrBlockTask+0x52>
 8004818:	2300      	movs	r3, #0
 800481a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800481c:	4b0f      	ldr	r3, [pc, #60]	; (800485c <prvProcessTimerOrBlockTask+0x94>)
 800481e:	6818      	ldr	r0, [r3, #0]
 8004820:	687a      	ldr	r2, [r7, #4]
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	1ad3      	subs	r3, r2, r3
 8004826:	683a      	ldr	r2, [r7, #0]
 8004828:	4619      	mov	r1, r3
 800482a:	f7fe ff7d 	bl	8003728 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800482e:	f7ff fa19 	bl	8003c64 <xTaskResumeAll>
 8004832:	4603      	mov	r3, r0
 8004834:	2b00      	cmp	r3, #0
 8004836:	d10a      	bne.n	800484e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004838:	4b09      	ldr	r3, [pc, #36]	; (8004860 <prvProcessTimerOrBlockTask+0x98>)
 800483a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800483e:	601a      	str	r2, [r3, #0]
 8004840:	f3bf 8f4f 	dsb	sy
 8004844:	f3bf 8f6f 	isb	sy
}
 8004848:	e001      	b.n	800484e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800484a:	f7ff fa0b 	bl	8003c64 <xTaskResumeAll>
}
 800484e:	bf00      	nop
 8004850:	3710      	adds	r7, #16
 8004852:	46bd      	mov	sp, r7
 8004854:	bd80      	pop	{r7, pc}
 8004856:	bf00      	nop
 8004858:	20000e20 	.word	0x20000e20
 800485c:	20000e24 	.word	0x20000e24
 8004860:	e000ed04 	.word	0xe000ed04

08004864 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004864:	b480      	push	{r7}
 8004866:	b085      	sub	sp, #20
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800486c:	4b0e      	ldr	r3, [pc, #56]	; (80048a8 <prvGetNextExpireTime+0x44>)
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	2b00      	cmp	r3, #0
 8004874:	d101      	bne.n	800487a <prvGetNextExpireTime+0x16>
 8004876:	2201      	movs	r2, #1
 8004878:	e000      	b.n	800487c <prvGetNextExpireTime+0x18>
 800487a:	2200      	movs	r2, #0
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	2b00      	cmp	r3, #0
 8004886:	d105      	bne.n	8004894 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004888:	4b07      	ldr	r3, [pc, #28]	; (80048a8 <prvGetNextExpireTime+0x44>)
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	68db      	ldr	r3, [r3, #12]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	60fb      	str	r3, [r7, #12]
 8004892:	e001      	b.n	8004898 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004894:	2300      	movs	r3, #0
 8004896:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004898:	68fb      	ldr	r3, [r7, #12]
}
 800489a:	4618      	mov	r0, r3
 800489c:	3714      	adds	r7, #20
 800489e:	46bd      	mov	sp, r7
 80048a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a4:	4770      	bx	lr
 80048a6:	bf00      	nop
 80048a8:	20000e1c 	.word	0x20000e1c

080048ac <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80048ac:	b580      	push	{r7, lr}
 80048ae:	b084      	sub	sp, #16
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80048b4:	f7ff fa74 	bl	8003da0 <xTaskGetTickCount>
 80048b8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80048ba:	4b0b      	ldr	r3, [pc, #44]	; (80048e8 <prvSampleTimeNow+0x3c>)
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	68fa      	ldr	r2, [r7, #12]
 80048c0:	429a      	cmp	r2, r3
 80048c2:	d205      	bcs.n	80048d0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80048c4:	f000 f936 	bl	8004b34 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2201      	movs	r2, #1
 80048cc:	601a      	str	r2, [r3, #0]
 80048ce:	e002      	b.n	80048d6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2200      	movs	r2, #0
 80048d4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80048d6:	4a04      	ldr	r2, [pc, #16]	; (80048e8 <prvSampleTimeNow+0x3c>)
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80048dc:	68fb      	ldr	r3, [r7, #12]
}
 80048de:	4618      	mov	r0, r3
 80048e0:	3710      	adds	r7, #16
 80048e2:	46bd      	mov	sp, r7
 80048e4:	bd80      	pop	{r7, pc}
 80048e6:	bf00      	nop
 80048e8:	20000e2c 	.word	0x20000e2c

080048ec <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80048ec:	b580      	push	{r7, lr}
 80048ee:	b086      	sub	sp, #24
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	60f8      	str	r0, [r7, #12]
 80048f4:	60b9      	str	r1, [r7, #8]
 80048f6:	607a      	str	r2, [r7, #4]
 80048f8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80048fa:	2300      	movs	r3, #0
 80048fc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	68ba      	ldr	r2, [r7, #8]
 8004902:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	68fa      	ldr	r2, [r7, #12]
 8004908:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800490a:	68ba      	ldr	r2, [r7, #8]
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	429a      	cmp	r2, r3
 8004910:	d812      	bhi.n	8004938 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004912:	687a      	ldr	r2, [r7, #4]
 8004914:	683b      	ldr	r3, [r7, #0]
 8004916:	1ad2      	subs	r2, r2, r3
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	699b      	ldr	r3, [r3, #24]
 800491c:	429a      	cmp	r2, r3
 800491e:	d302      	bcc.n	8004926 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004920:	2301      	movs	r3, #1
 8004922:	617b      	str	r3, [r7, #20]
 8004924:	e01b      	b.n	800495e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004926:	4b10      	ldr	r3, [pc, #64]	; (8004968 <prvInsertTimerInActiveList+0x7c>)
 8004928:	681a      	ldr	r2, [r3, #0]
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	3304      	adds	r3, #4
 800492e:	4619      	mov	r1, r3
 8004930:	4610      	mov	r0, r2
 8004932:	f7fe f9de 	bl	8002cf2 <vListInsert>
 8004936:	e012      	b.n	800495e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004938:	687a      	ldr	r2, [r7, #4]
 800493a:	683b      	ldr	r3, [r7, #0]
 800493c:	429a      	cmp	r2, r3
 800493e:	d206      	bcs.n	800494e <prvInsertTimerInActiveList+0x62>
 8004940:	68ba      	ldr	r2, [r7, #8]
 8004942:	683b      	ldr	r3, [r7, #0]
 8004944:	429a      	cmp	r2, r3
 8004946:	d302      	bcc.n	800494e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004948:	2301      	movs	r3, #1
 800494a:	617b      	str	r3, [r7, #20]
 800494c:	e007      	b.n	800495e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800494e:	4b07      	ldr	r3, [pc, #28]	; (800496c <prvInsertTimerInActiveList+0x80>)
 8004950:	681a      	ldr	r2, [r3, #0]
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	3304      	adds	r3, #4
 8004956:	4619      	mov	r1, r3
 8004958:	4610      	mov	r0, r2
 800495a:	f7fe f9ca 	bl	8002cf2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800495e:	697b      	ldr	r3, [r7, #20]
}
 8004960:	4618      	mov	r0, r3
 8004962:	3718      	adds	r7, #24
 8004964:	46bd      	mov	sp, r7
 8004966:	bd80      	pop	{r7, pc}
 8004968:	20000e20 	.word	0x20000e20
 800496c:	20000e1c 	.word	0x20000e1c

08004970 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004970:	b580      	push	{r7, lr}
 8004972:	b08e      	sub	sp, #56	; 0x38
 8004974:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004976:	e0ca      	b.n	8004b0e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2b00      	cmp	r3, #0
 800497c:	da18      	bge.n	80049b0 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800497e:	1d3b      	adds	r3, r7, #4
 8004980:	3304      	adds	r3, #4
 8004982:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004984:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004986:	2b00      	cmp	r3, #0
 8004988:	d10a      	bne.n	80049a0 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800498a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800498e:	f383 8811 	msr	BASEPRI, r3
 8004992:	f3bf 8f6f 	isb	sy
 8004996:	f3bf 8f4f 	dsb	sy
 800499a:	61fb      	str	r3, [r7, #28]
}
 800499c:	bf00      	nop
 800499e:	e7fe      	b.n	800499e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80049a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80049a6:	6850      	ldr	r0, [r2, #4]
 80049a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80049aa:	6892      	ldr	r2, [r2, #8]
 80049ac:	4611      	mov	r1, r2
 80049ae:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	f2c0 80aa 	blt.w	8004b0c <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80049bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049be:	695b      	ldr	r3, [r3, #20]
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d004      	beq.n	80049ce <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80049c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049c6:	3304      	adds	r3, #4
 80049c8:	4618      	mov	r0, r3
 80049ca:	f7fe f9cb 	bl	8002d64 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80049ce:	463b      	mov	r3, r7
 80049d0:	4618      	mov	r0, r3
 80049d2:	f7ff ff6b 	bl	80048ac <prvSampleTimeNow>
 80049d6:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2b09      	cmp	r3, #9
 80049dc:	f200 8097 	bhi.w	8004b0e <prvProcessReceivedCommands+0x19e>
 80049e0:	a201      	add	r2, pc, #4	; (adr r2, 80049e8 <prvProcessReceivedCommands+0x78>)
 80049e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049e6:	bf00      	nop
 80049e8:	08004a11 	.word	0x08004a11
 80049ec:	08004a11 	.word	0x08004a11
 80049f0:	08004a11 	.word	0x08004a11
 80049f4:	08004a85 	.word	0x08004a85
 80049f8:	08004a99 	.word	0x08004a99
 80049fc:	08004ae3 	.word	0x08004ae3
 8004a00:	08004a11 	.word	0x08004a11
 8004a04:	08004a11 	.word	0x08004a11
 8004a08:	08004a85 	.word	0x08004a85
 8004a0c:	08004a99 	.word	0x08004a99
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004a10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a12:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004a16:	f043 0301 	orr.w	r3, r3, #1
 8004a1a:	b2da      	uxtb	r2, r3
 8004a1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a1e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004a22:	68ba      	ldr	r2, [r7, #8]
 8004a24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a26:	699b      	ldr	r3, [r3, #24]
 8004a28:	18d1      	adds	r1, r2, r3
 8004a2a:	68bb      	ldr	r3, [r7, #8]
 8004a2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a2e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004a30:	f7ff ff5c 	bl	80048ec <prvInsertTimerInActiveList>
 8004a34:	4603      	mov	r3, r0
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d069      	beq.n	8004b0e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004a3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a3c:	6a1b      	ldr	r3, [r3, #32]
 8004a3e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004a40:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004a42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a44:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004a48:	f003 0304 	and.w	r3, r3, #4
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d05e      	beq.n	8004b0e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004a50:	68ba      	ldr	r2, [r7, #8]
 8004a52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a54:	699b      	ldr	r3, [r3, #24]
 8004a56:	441a      	add	r2, r3
 8004a58:	2300      	movs	r3, #0
 8004a5a:	9300      	str	r3, [sp, #0]
 8004a5c:	2300      	movs	r3, #0
 8004a5e:	2100      	movs	r1, #0
 8004a60:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004a62:	f7ff fe05 	bl	8004670 <xTimerGenericCommand>
 8004a66:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004a68:	6a3b      	ldr	r3, [r7, #32]
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d14f      	bne.n	8004b0e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8004a6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a72:	f383 8811 	msr	BASEPRI, r3
 8004a76:	f3bf 8f6f 	isb	sy
 8004a7a:	f3bf 8f4f 	dsb	sy
 8004a7e:	61bb      	str	r3, [r7, #24]
}
 8004a80:	bf00      	nop
 8004a82:	e7fe      	b.n	8004a82 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004a84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a86:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004a8a:	f023 0301 	bic.w	r3, r3, #1
 8004a8e:	b2da      	uxtb	r2, r3
 8004a90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a92:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8004a96:	e03a      	b.n	8004b0e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004a98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a9a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004a9e:	f043 0301 	orr.w	r3, r3, #1
 8004aa2:	b2da      	uxtb	r2, r3
 8004aa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004aa6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004aaa:	68ba      	ldr	r2, [r7, #8]
 8004aac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004aae:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004ab0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ab2:	699b      	ldr	r3, [r3, #24]
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d10a      	bne.n	8004ace <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8004ab8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004abc:	f383 8811 	msr	BASEPRI, r3
 8004ac0:	f3bf 8f6f 	isb	sy
 8004ac4:	f3bf 8f4f 	dsb	sy
 8004ac8:	617b      	str	r3, [r7, #20]
}
 8004aca:	bf00      	nop
 8004acc:	e7fe      	b.n	8004acc <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004ace:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ad0:	699a      	ldr	r2, [r3, #24]
 8004ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ad4:	18d1      	adds	r1, r2, r3
 8004ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ad8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ada:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004adc:	f7ff ff06 	bl	80048ec <prvInsertTimerInActiveList>
					break;
 8004ae0:	e015      	b.n	8004b0e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004ae2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ae4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004ae8:	f003 0302 	and.w	r3, r3, #2
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d103      	bne.n	8004af8 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8004af0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004af2:	f000 fbdd 	bl	80052b0 <vPortFree>
 8004af6:	e00a      	b.n	8004b0e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004af8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004afa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004afe:	f023 0301 	bic.w	r3, r3, #1
 8004b02:	b2da      	uxtb	r2, r3
 8004b04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b06:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004b0a:	e000      	b.n	8004b0e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8004b0c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004b0e:	4b08      	ldr	r3, [pc, #32]	; (8004b30 <prvProcessReceivedCommands+0x1c0>)
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	1d39      	adds	r1, r7, #4
 8004b14:	2200      	movs	r2, #0
 8004b16:	4618      	mov	r0, r3
 8004b18:	f7fe fbec 	bl	80032f4 <xQueueReceive>
 8004b1c:	4603      	mov	r3, r0
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	f47f af2a 	bne.w	8004978 <prvProcessReceivedCommands+0x8>
	}
}
 8004b24:	bf00      	nop
 8004b26:	bf00      	nop
 8004b28:	3730      	adds	r7, #48	; 0x30
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	bd80      	pop	{r7, pc}
 8004b2e:	bf00      	nop
 8004b30:	20000e24 	.word	0x20000e24

08004b34 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004b34:	b580      	push	{r7, lr}
 8004b36:	b088      	sub	sp, #32
 8004b38:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004b3a:	e048      	b.n	8004bce <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004b3c:	4b2d      	ldr	r3, [pc, #180]	; (8004bf4 <prvSwitchTimerLists+0xc0>)
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	68db      	ldr	r3, [r3, #12]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004b46:	4b2b      	ldr	r3, [pc, #172]	; (8004bf4 <prvSwitchTimerLists+0xc0>)
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	68db      	ldr	r3, [r3, #12]
 8004b4c:	68db      	ldr	r3, [r3, #12]
 8004b4e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	3304      	adds	r3, #4
 8004b54:	4618      	mov	r0, r3
 8004b56:	f7fe f905 	bl	8002d64 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	6a1b      	ldr	r3, [r3, #32]
 8004b5e:	68f8      	ldr	r0, [r7, #12]
 8004b60:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004b68:	f003 0304 	and.w	r3, r3, #4
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d02e      	beq.n	8004bce <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	699b      	ldr	r3, [r3, #24]
 8004b74:	693a      	ldr	r2, [r7, #16]
 8004b76:	4413      	add	r3, r2
 8004b78:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004b7a:	68ba      	ldr	r2, [r7, #8]
 8004b7c:	693b      	ldr	r3, [r7, #16]
 8004b7e:	429a      	cmp	r2, r3
 8004b80:	d90e      	bls.n	8004ba0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	68ba      	ldr	r2, [r7, #8]
 8004b86:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	68fa      	ldr	r2, [r7, #12]
 8004b8c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004b8e:	4b19      	ldr	r3, [pc, #100]	; (8004bf4 <prvSwitchTimerLists+0xc0>)
 8004b90:	681a      	ldr	r2, [r3, #0]
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	3304      	adds	r3, #4
 8004b96:	4619      	mov	r1, r3
 8004b98:	4610      	mov	r0, r2
 8004b9a:	f7fe f8aa 	bl	8002cf2 <vListInsert>
 8004b9e:	e016      	b.n	8004bce <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004ba0:	2300      	movs	r3, #0
 8004ba2:	9300      	str	r3, [sp, #0]
 8004ba4:	2300      	movs	r3, #0
 8004ba6:	693a      	ldr	r2, [r7, #16]
 8004ba8:	2100      	movs	r1, #0
 8004baa:	68f8      	ldr	r0, [r7, #12]
 8004bac:	f7ff fd60 	bl	8004670 <xTimerGenericCommand>
 8004bb0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d10a      	bne.n	8004bce <prvSwitchTimerLists+0x9a>
	__asm volatile
 8004bb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bbc:	f383 8811 	msr	BASEPRI, r3
 8004bc0:	f3bf 8f6f 	isb	sy
 8004bc4:	f3bf 8f4f 	dsb	sy
 8004bc8:	603b      	str	r3, [r7, #0]
}
 8004bca:	bf00      	nop
 8004bcc:	e7fe      	b.n	8004bcc <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004bce:	4b09      	ldr	r3, [pc, #36]	; (8004bf4 <prvSwitchTimerLists+0xc0>)
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d1b1      	bne.n	8004b3c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004bd8:	4b06      	ldr	r3, [pc, #24]	; (8004bf4 <prvSwitchTimerLists+0xc0>)
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004bde:	4b06      	ldr	r3, [pc, #24]	; (8004bf8 <prvSwitchTimerLists+0xc4>)
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	4a04      	ldr	r2, [pc, #16]	; (8004bf4 <prvSwitchTimerLists+0xc0>)
 8004be4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004be6:	4a04      	ldr	r2, [pc, #16]	; (8004bf8 <prvSwitchTimerLists+0xc4>)
 8004be8:	697b      	ldr	r3, [r7, #20]
 8004bea:	6013      	str	r3, [r2, #0]
}
 8004bec:	bf00      	nop
 8004bee:	3718      	adds	r7, #24
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	bd80      	pop	{r7, pc}
 8004bf4:	20000e1c 	.word	0x20000e1c
 8004bf8:	20000e20 	.word	0x20000e20

08004bfc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004bfc:	b580      	push	{r7, lr}
 8004bfe:	b082      	sub	sp, #8
 8004c00:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004c02:	f000 f967 	bl	8004ed4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004c06:	4b15      	ldr	r3, [pc, #84]	; (8004c5c <prvCheckForValidListAndQueue+0x60>)
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d120      	bne.n	8004c50 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8004c0e:	4814      	ldr	r0, [pc, #80]	; (8004c60 <prvCheckForValidListAndQueue+0x64>)
 8004c10:	f7fe f81e 	bl	8002c50 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004c14:	4813      	ldr	r0, [pc, #76]	; (8004c64 <prvCheckForValidListAndQueue+0x68>)
 8004c16:	f7fe f81b 	bl	8002c50 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004c1a:	4b13      	ldr	r3, [pc, #76]	; (8004c68 <prvCheckForValidListAndQueue+0x6c>)
 8004c1c:	4a10      	ldr	r2, [pc, #64]	; (8004c60 <prvCheckForValidListAndQueue+0x64>)
 8004c1e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004c20:	4b12      	ldr	r3, [pc, #72]	; (8004c6c <prvCheckForValidListAndQueue+0x70>)
 8004c22:	4a10      	ldr	r2, [pc, #64]	; (8004c64 <prvCheckForValidListAndQueue+0x68>)
 8004c24:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004c26:	2300      	movs	r3, #0
 8004c28:	9300      	str	r3, [sp, #0]
 8004c2a:	4b11      	ldr	r3, [pc, #68]	; (8004c70 <prvCheckForValidListAndQueue+0x74>)
 8004c2c:	4a11      	ldr	r2, [pc, #68]	; (8004c74 <prvCheckForValidListAndQueue+0x78>)
 8004c2e:	2110      	movs	r1, #16
 8004c30:	200a      	movs	r0, #10
 8004c32:	f7fe f929 	bl	8002e88 <xQueueGenericCreateStatic>
 8004c36:	4603      	mov	r3, r0
 8004c38:	4a08      	ldr	r2, [pc, #32]	; (8004c5c <prvCheckForValidListAndQueue+0x60>)
 8004c3a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004c3c:	4b07      	ldr	r3, [pc, #28]	; (8004c5c <prvCheckForValidListAndQueue+0x60>)
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d005      	beq.n	8004c50 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004c44:	4b05      	ldr	r3, [pc, #20]	; (8004c5c <prvCheckForValidListAndQueue+0x60>)
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	490b      	ldr	r1, [pc, #44]	; (8004c78 <prvCheckForValidListAndQueue+0x7c>)
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	f7fe fd42 	bl	80036d4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004c50:	f000 f970 	bl	8004f34 <vPortExitCritical>
}
 8004c54:	bf00      	nop
 8004c56:	46bd      	mov	sp, r7
 8004c58:	bd80      	pop	{r7, pc}
 8004c5a:	bf00      	nop
 8004c5c:	20000e24 	.word	0x20000e24
 8004c60:	20000df4 	.word	0x20000df4
 8004c64:	20000e08 	.word	0x20000e08
 8004c68:	20000e1c 	.word	0x20000e1c
 8004c6c:	20000e20 	.word	0x20000e20
 8004c70:	20000ed0 	.word	0x20000ed0
 8004c74:	20000e30 	.word	0x20000e30
 8004c78:	0800572c 	.word	0x0800572c

08004c7c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004c7c:	b480      	push	{r7}
 8004c7e:	b085      	sub	sp, #20
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	60f8      	str	r0, [r7, #12]
 8004c84:	60b9      	str	r1, [r7, #8]
 8004c86:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	3b04      	subs	r3, #4
 8004c8c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004c94:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	3b04      	subs	r3, #4
 8004c9a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004c9c:	68bb      	ldr	r3, [r7, #8]
 8004c9e:	f023 0201 	bic.w	r2, r3, #1
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	3b04      	subs	r3, #4
 8004caa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004cac:	4a0c      	ldr	r2, [pc, #48]	; (8004ce0 <pxPortInitialiseStack+0x64>)
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	3b14      	subs	r3, #20
 8004cb6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004cb8:	687a      	ldr	r2, [r7, #4]
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	3b04      	subs	r3, #4
 8004cc2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	f06f 0202 	mvn.w	r2, #2
 8004cca:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	3b20      	subs	r3, #32
 8004cd0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004cd2:	68fb      	ldr	r3, [r7, #12]
}
 8004cd4:	4618      	mov	r0, r3
 8004cd6:	3714      	adds	r7, #20
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cde:	4770      	bx	lr
 8004ce0:	08004ce5 	.word	0x08004ce5

08004ce4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004ce4:	b480      	push	{r7}
 8004ce6:	b085      	sub	sp, #20
 8004ce8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004cea:	2300      	movs	r3, #0
 8004cec:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004cee:	4b12      	ldr	r3, [pc, #72]	; (8004d38 <prvTaskExitError+0x54>)
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cf6:	d00a      	beq.n	8004d0e <prvTaskExitError+0x2a>
	__asm volatile
 8004cf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cfc:	f383 8811 	msr	BASEPRI, r3
 8004d00:	f3bf 8f6f 	isb	sy
 8004d04:	f3bf 8f4f 	dsb	sy
 8004d08:	60fb      	str	r3, [r7, #12]
}
 8004d0a:	bf00      	nop
 8004d0c:	e7fe      	b.n	8004d0c <prvTaskExitError+0x28>
	__asm volatile
 8004d0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d12:	f383 8811 	msr	BASEPRI, r3
 8004d16:	f3bf 8f6f 	isb	sy
 8004d1a:	f3bf 8f4f 	dsb	sy
 8004d1e:	60bb      	str	r3, [r7, #8]
}
 8004d20:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004d22:	bf00      	nop
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d0fc      	beq.n	8004d24 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004d2a:	bf00      	nop
 8004d2c:	bf00      	nop
 8004d2e:	3714      	adds	r7, #20
 8004d30:	46bd      	mov	sp, r7
 8004d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d36:	4770      	bx	lr
 8004d38:	2000000c 	.word	0x2000000c
 8004d3c:	00000000 	.word	0x00000000

08004d40 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004d40:	4b07      	ldr	r3, [pc, #28]	; (8004d60 <pxCurrentTCBConst2>)
 8004d42:	6819      	ldr	r1, [r3, #0]
 8004d44:	6808      	ldr	r0, [r1, #0]
 8004d46:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d4a:	f380 8809 	msr	PSP, r0
 8004d4e:	f3bf 8f6f 	isb	sy
 8004d52:	f04f 0000 	mov.w	r0, #0
 8004d56:	f380 8811 	msr	BASEPRI, r0
 8004d5a:	4770      	bx	lr
 8004d5c:	f3af 8000 	nop.w

08004d60 <pxCurrentTCBConst2>:
 8004d60:	200008f4 	.word	0x200008f4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004d64:	bf00      	nop
 8004d66:	bf00      	nop

08004d68 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004d68:	4808      	ldr	r0, [pc, #32]	; (8004d8c <prvPortStartFirstTask+0x24>)
 8004d6a:	6800      	ldr	r0, [r0, #0]
 8004d6c:	6800      	ldr	r0, [r0, #0]
 8004d6e:	f380 8808 	msr	MSP, r0
 8004d72:	f04f 0000 	mov.w	r0, #0
 8004d76:	f380 8814 	msr	CONTROL, r0
 8004d7a:	b662      	cpsie	i
 8004d7c:	b661      	cpsie	f
 8004d7e:	f3bf 8f4f 	dsb	sy
 8004d82:	f3bf 8f6f 	isb	sy
 8004d86:	df00      	svc	0
 8004d88:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004d8a:	bf00      	nop
 8004d8c:	e000ed08 	.word	0xe000ed08

08004d90 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004d90:	b580      	push	{r7, lr}
 8004d92:	b086      	sub	sp, #24
 8004d94:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004d96:	4b46      	ldr	r3, [pc, #280]	; (8004eb0 <xPortStartScheduler+0x120>)
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	4a46      	ldr	r2, [pc, #280]	; (8004eb4 <xPortStartScheduler+0x124>)
 8004d9c:	4293      	cmp	r3, r2
 8004d9e:	d10a      	bne.n	8004db6 <xPortStartScheduler+0x26>
	__asm volatile
 8004da0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004da4:	f383 8811 	msr	BASEPRI, r3
 8004da8:	f3bf 8f6f 	isb	sy
 8004dac:	f3bf 8f4f 	dsb	sy
 8004db0:	613b      	str	r3, [r7, #16]
}
 8004db2:	bf00      	nop
 8004db4:	e7fe      	b.n	8004db4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004db6:	4b3e      	ldr	r3, [pc, #248]	; (8004eb0 <xPortStartScheduler+0x120>)
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	4a3f      	ldr	r2, [pc, #252]	; (8004eb8 <xPortStartScheduler+0x128>)
 8004dbc:	4293      	cmp	r3, r2
 8004dbe:	d10a      	bne.n	8004dd6 <xPortStartScheduler+0x46>
	__asm volatile
 8004dc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dc4:	f383 8811 	msr	BASEPRI, r3
 8004dc8:	f3bf 8f6f 	isb	sy
 8004dcc:	f3bf 8f4f 	dsb	sy
 8004dd0:	60fb      	str	r3, [r7, #12]
}
 8004dd2:	bf00      	nop
 8004dd4:	e7fe      	b.n	8004dd4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004dd6:	4b39      	ldr	r3, [pc, #228]	; (8004ebc <xPortStartScheduler+0x12c>)
 8004dd8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004dda:	697b      	ldr	r3, [r7, #20]
 8004ddc:	781b      	ldrb	r3, [r3, #0]
 8004dde:	b2db      	uxtb	r3, r3
 8004de0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004de2:	697b      	ldr	r3, [r7, #20]
 8004de4:	22ff      	movs	r2, #255	; 0xff
 8004de6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004de8:	697b      	ldr	r3, [r7, #20]
 8004dea:	781b      	ldrb	r3, [r3, #0]
 8004dec:	b2db      	uxtb	r3, r3
 8004dee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004df0:	78fb      	ldrb	r3, [r7, #3]
 8004df2:	b2db      	uxtb	r3, r3
 8004df4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004df8:	b2da      	uxtb	r2, r3
 8004dfa:	4b31      	ldr	r3, [pc, #196]	; (8004ec0 <xPortStartScheduler+0x130>)
 8004dfc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004dfe:	4b31      	ldr	r3, [pc, #196]	; (8004ec4 <xPortStartScheduler+0x134>)
 8004e00:	2207      	movs	r2, #7
 8004e02:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004e04:	e009      	b.n	8004e1a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8004e06:	4b2f      	ldr	r3, [pc, #188]	; (8004ec4 <xPortStartScheduler+0x134>)
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	3b01      	subs	r3, #1
 8004e0c:	4a2d      	ldr	r2, [pc, #180]	; (8004ec4 <xPortStartScheduler+0x134>)
 8004e0e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004e10:	78fb      	ldrb	r3, [r7, #3]
 8004e12:	b2db      	uxtb	r3, r3
 8004e14:	005b      	lsls	r3, r3, #1
 8004e16:	b2db      	uxtb	r3, r3
 8004e18:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004e1a:	78fb      	ldrb	r3, [r7, #3]
 8004e1c:	b2db      	uxtb	r3, r3
 8004e1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e22:	2b80      	cmp	r3, #128	; 0x80
 8004e24:	d0ef      	beq.n	8004e06 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004e26:	4b27      	ldr	r3, [pc, #156]	; (8004ec4 <xPortStartScheduler+0x134>)
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f1c3 0307 	rsb	r3, r3, #7
 8004e2e:	2b04      	cmp	r3, #4
 8004e30:	d00a      	beq.n	8004e48 <xPortStartScheduler+0xb8>
	__asm volatile
 8004e32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e36:	f383 8811 	msr	BASEPRI, r3
 8004e3a:	f3bf 8f6f 	isb	sy
 8004e3e:	f3bf 8f4f 	dsb	sy
 8004e42:	60bb      	str	r3, [r7, #8]
}
 8004e44:	bf00      	nop
 8004e46:	e7fe      	b.n	8004e46 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004e48:	4b1e      	ldr	r3, [pc, #120]	; (8004ec4 <xPortStartScheduler+0x134>)
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	021b      	lsls	r3, r3, #8
 8004e4e:	4a1d      	ldr	r2, [pc, #116]	; (8004ec4 <xPortStartScheduler+0x134>)
 8004e50:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004e52:	4b1c      	ldr	r3, [pc, #112]	; (8004ec4 <xPortStartScheduler+0x134>)
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004e5a:	4a1a      	ldr	r2, [pc, #104]	; (8004ec4 <xPortStartScheduler+0x134>)
 8004e5c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	b2da      	uxtb	r2, r3
 8004e62:	697b      	ldr	r3, [r7, #20]
 8004e64:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004e66:	4b18      	ldr	r3, [pc, #96]	; (8004ec8 <xPortStartScheduler+0x138>)
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	4a17      	ldr	r2, [pc, #92]	; (8004ec8 <xPortStartScheduler+0x138>)
 8004e6c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004e70:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004e72:	4b15      	ldr	r3, [pc, #84]	; (8004ec8 <xPortStartScheduler+0x138>)
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	4a14      	ldr	r2, [pc, #80]	; (8004ec8 <xPortStartScheduler+0x138>)
 8004e78:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004e7c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004e7e:	f000 f8dd 	bl	800503c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004e82:	4b12      	ldr	r3, [pc, #72]	; (8004ecc <xPortStartScheduler+0x13c>)
 8004e84:	2200      	movs	r2, #0
 8004e86:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004e88:	f000 f8fc 	bl	8005084 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004e8c:	4b10      	ldr	r3, [pc, #64]	; (8004ed0 <xPortStartScheduler+0x140>)
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	4a0f      	ldr	r2, [pc, #60]	; (8004ed0 <xPortStartScheduler+0x140>)
 8004e92:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004e96:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004e98:	f7ff ff66 	bl	8004d68 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004e9c:	f7ff f84a 	bl	8003f34 <vTaskSwitchContext>
	prvTaskExitError();
 8004ea0:	f7ff ff20 	bl	8004ce4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004ea4:	2300      	movs	r3, #0
}
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	3718      	adds	r7, #24
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	bd80      	pop	{r7, pc}
 8004eae:	bf00      	nop
 8004eb0:	e000ed00 	.word	0xe000ed00
 8004eb4:	410fc271 	.word	0x410fc271
 8004eb8:	410fc270 	.word	0x410fc270
 8004ebc:	e000e400 	.word	0xe000e400
 8004ec0:	20000f20 	.word	0x20000f20
 8004ec4:	20000f24 	.word	0x20000f24
 8004ec8:	e000ed20 	.word	0xe000ed20
 8004ecc:	2000000c 	.word	0x2000000c
 8004ed0:	e000ef34 	.word	0xe000ef34

08004ed4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004ed4:	b480      	push	{r7}
 8004ed6:	b083      	sub	sp, #12
 8004ed8:	af00      	add	r7, sp, #0
	__asm volatile
 8004eda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ede:	f383 8811 	msr	BASEPRI, r3
 8004ee2:	f3bf 8f6f 	isb	sy
 8004ee6:	f3bf 8f4f 	dsb	sy
 8004eea:	607b      	str	r3, [r7, #4]
}
 8004eec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004eee:	4b0f      	ldr	r3, [pc, #60]	; (8004f2c <vPortEnterCritical+0x58>)
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	3301      	adds	r3, #1
 8004ef4:	4a0d      	ldr	r2, [pc, #52]	; (8004f2c <vPortEnterCritical+0x58>)
 8004ef6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004ef8:	4b0c      	ldr	r3, [pc, #48]	; (8004f2c <vPortEnterCritical+0x58>)
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	2b01      	cmp	r3, #1
 8004efe:	d10f      	bne.n	8004f20 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004f00:	4b0b      	ldr	r3, [pc, #44]	; (8004f30 <vPortEnterCritical+0x5c>)
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	b2db      	uxtb	r3, r3
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d00a      	beq.n	8004f20 <vPortEnterCritical+0x4c>
	__asm volatile
 8004f0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f0e:	f383 8811 	msr	BASEPRI, r3
 8004f12:	f3bf 8f6f 	isb	sy
 8004f16:	f3bf 8f4f 	dsb	sy
 8004f1a:	603b      	str	r3, [r7, #0]
}
 8004f1c:	bf00      	nop
 8004f1e:	e7fe      	b.n	8004f1e <vPortEnterCritical+0x4a>
	}
}
 8004f20:	bf00      	nop
 8004f22:	370c      	adds	r7, #12
 8004f24:	46bd      	mov	sp, r7
 8004f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2a:	4770      	bx	lr
 8004f2c:	2000000c 	.word	0x2000000c
 8004f30:	e000ed04 	.word	0xe000ed04

08004f34 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004f34:	b480      	push	{r7}
 8004f36:	b083      	sub	sp, #12
 8004f38:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004f3a:	4b12      	ldr	r3, [pc, #72]	; (8004f84 <vPortExitCritical+0x50>)
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d10a      	bne.n	8004f58 <vPortExitCritical+0x24>
	__asm volatile
 8004f42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f46:	f383 8811 	msr	BASEPRI, r3
 8004f4a:	f3bf 8f6f 	isb	sy
 8004f4e:	f3bf 8f4f 	dsb	sy
 8004f52:	607b      	str	r3, [r7, #4]
}
 8004f54:	bf00      	nop
 8004f56:	e7fe      	b.n	8004f56 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004f58:	4b0a      	ldr	r3, [pc, #40]	; (8004f84 <vPortExitCritical+0x50>)
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	3b01      	subs	r3, #1
 8004f5e:	4a09      	ldr	r2, [pc, #36]	; (8004f84 <vPortExitCritical+0x50>)
 8004f60:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004f62:	4b08      	ldr	r3, [pc, #32]	; (8004f84 <vPortExitCritical+0x50>)
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d105      	bne.n	8004f76 <vPortExitCritical+0x42>
 8004f6a:	2300      	movs	r3, #0
 8004f6c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004f6e:	683b      	ldr	r3, [r7, #0]
 8004f70:	f383 8811 	msr	BASEPRI, r3
}
 8004f74:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004f76:	bf00      	nop
 8004f78:	370c      	adds	r7, #12
 8004f7a:	46bd      	mov	sp, r7
 8004f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f80:	4770      	bx	lr
 8004f82:	bf00      	nop
 8004f84:	2000000c 	.word	0x2000000c
	...

08004f90 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004f90:	f3ef 8009 	mrs	r0, PSP
 8004f94:	f3bf 8f6f 	isb	sy
 8004f98:	4b15      	ldr	r3, [pc, #84]	; (8004ff0 <pxCurrentTCBConst>)
 8004f9a:	681a      	ldr	r2, [r3, #0]
 8004f9c:	f01e 0f10 	tst.w	lr, #16
 8004fa0:	bf08      	it	eq
 8004fa2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004fa6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004faa:	6010      	str	r0, [r2, #0]
 8004fac:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004fb0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004fb4:	f380 8811 	msr	BASEPRI, r0
 8004fb8:	f3bf 8f4f 	dsb	sy
 8004fbc:	f3bf 8f6f 	isb	sy
 8004fc0:	f7fe ffb8 	bl	8003f34 <vTaskSwitchContext>
 8004fc4:	f04f 0000 	mov.w	r0, #0
 8004fc8:	f380 8811 	msr	BASEPRI, r0
 8004fcc:	bc09      	pop	{r0, r3}
 8004fce:	6819      	ldr	r1, [r3, #0]
 8004fd0:	6808      	ldr	r0, [r1, #0]
 8004fd2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004fd6:	f01e 0f10 	tst.w	lr, #16
 8004fda:	bf08      	it	eq
 8004fdc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004fe0:	f380 8809 	msr	PSP, r0
 8004fe4:	f3bf 8f6f 	isb	sy
 8004fe8:	4770      	bx	lr
 8004fea:	bf00      	nop
 8004fec:	f3af 8000 	nop.w

08004ff0 <pxCurrentTCBConst>:
 8004ff0:	200008f4 	.word	0x200008f4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004ff4:	bf00      	nop
 8004ff6:	bf00      	nop

08004ff8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004ff8:	b580      	push	{r7, lr}
 8004ffa:	b082      	sub	sp, #8
 8004ffc:	af00      	add	r7, sp, #0
	__asm volatile
 8004ffe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005002:	f383 8811 	msr	BASEPRI, r3
 8005006:	f3bf 8f6f 	isb	sy
 800500a:	f3bf 8f4f 	dsb	sy
 800500e:	607b      	str	r3, [r7, #4]
}
 8005010:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005012:	f7fe fed5 	bl	8003dc0 <xTaskIncrementTick>
 8005016:	4603      	mov	r3, r0
 8005018:	2b00      	cmp	r3, #0
 800501a:	d003      	beq.n	8005024 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800501c:	4b06      	ldr	r3, [pc, #24]	; (8005038 <xPortSysTickHandler+0x40>)
 800501e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005022:	601a      	str	r2, [r3, #0]
 8005024:	2300      	movs	r3, #0
 8005026:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005028:	683b      	ldr	r3, [r7, #0]
 800502a:	f383 8811 	msr	BASEPRI, r3
}
 800502e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005030:	bf00      	nop
 8005032:	3708      	adds	r7, #8
 8005034:	46bd      	mov	sp, r7
 8005036:	bd80      	pop	{r7, pc}
 8005038:	e000ed04 	.word	0xe000ed04

0800503c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800503c:	b480      	push	{r7}
 800503e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005040:	4b0b      	ldr	r3, [pc, #44]	; (8005070 <vPortSetupTimerInterrupt+0x34>)
 8005042:	2200      	movs	r2, #0
 8005044:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005046:	4b0b      	ldr	r3, [pc, #44]	; (8005074 <vPortSetupTimerInterrupt+0x38>)
 8005048:	2200      	movs	r2, #0
 800504a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800504c:	4b0a      	ldr	r3, [pc, #40]	; (8005078 <vPortSetupTimerInterrupt+0x3c>)
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	4a0a      	ldr	r2, [pc, #40]	; (800507c <vPortSetupTimerInterrupt+0x40>)
 8005052:	fba2 2303 	umull	r2, r3, r2, r3
 8005056:	099b      	lsrs	r3, r3, #6
 8005058:	4a09      	ldr	r2, [pc, #36]	; (8005080 <vPortSetupTimerInterrupt+0x44>)
 800505a:	3b01      	subs	r3, #1
 800505c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800505e:	4b04      	ldr	r3, [pc, #16]	; (8005070 <vPortSetupTimerInterrupt+0x34>)
 8005060:	2207      	movs	r2, #7
 8005062:	601a      	str	r2, [r3, #0]
}
 8005064:	bf00      	nop
 8005066:	46bd      	mov	sp, r7
 8005068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506c:	4770      	bx	lr
 800506e:	bf00      	nop
 8005070:	e000e010 	.word	0xe000e010
 8005074:	e000e018 	.word	0xe000e018
 8005078:	20000000 	.word	0x20000000
 800507c:	10624dd3 	.word	0x10624dd3
 8005080:	e000e014 	.word	0xe000e014

08005084 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005084:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005094 <vPortEnableVFP+0x10>
 8005088:	6801      	ldr	r1, [r0, #0]
 800508a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800508e:	6001      	str	r1, [r0, #0]
 8005090:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005092:	bf00      	nop
 8005094:	e000ed88 	.word	0xe000ed88

08005098 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005098:	b480      	push	{r7}
 800509a:	b085      	sub	sp, #20
 800509c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800509e:	f3ef 8305 	mrs	r3, IPSR
 80050a2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	2b0f      	cmp	r3, #15
 80050a8:	d914      	bls.n	80050d4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80050aa:	4a17      	ldr	r2, [pc, #92]	; (8005108 <vPortValidateInterruptPriority+0x70>)
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	4413      	add	r3, r2
 80050b0:	781b      	ldrb	r3, [r3, #0]
 80050b2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80050b4:	4b15      	ldr	r3, [pc, #84]	; (800510c <vPortValidateInterruptPriority+0x74>)
 80050b6:	781b      	ldrb	r3, [r3, #0]
 80050b8:	7afa      	ldrb	r2, [r7, #11]
 80050ba:	429a      	cmp	r2, r3
 80050bc:	d20a      	bcs.n	80050d4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80050be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050c2:	f383 8811 	msr	BASEPRI, r3
 80050c6:	f3bf 8f6f 	isb	sy
 80050ca:	f3bf 8f4f 	dsb	sy
 80050ce:	607b      	str	r3, [r7, #4]
}
 80050d0:	bf00      	nop
 80050d2:	e7fe      	b.n	80050d2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80050d4:	4b0e      	ldr	r3, [pc, #56]	; (8005110 <vPortValidateInterruptPriority+0x78>)
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80050dc:	4b0d      	ldr	r3, [pc, #52]	; (8005114 <vPortValidateInterruptPriority+0x7c>)
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	429a      	cmp	r2, r3
 80050e2:	d90a      	bls.n	80050fa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80050e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050e8:	f383 8811 	msr	BASEPRI, r3
 80050ec:	f3bf 8f6f 	isb	sy
 80050f0:	f3bf 8f4f 	dsb	sy
 80050f4:	603b      	str	r3, [r7, #0]
}
 80050f6:	bf00      	nop
 80050f8:	e7fe      	b.n	80050f8 <vPortValidateInterruptPriority+0x60>
	}
 80050fa:	bf00      	nop
 80050fc:	3714      	adds	r7, #20
 80050fe:	46bd      	mov	sp, r7
 8005100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005104:	4770      	bx	lr
 8005106:	bf00      	nop
 8005108:	e000e3f0 	.word	0xe000e3f0
 800510c:	20000f20 	.word	0x20000f20
 8005110:	e000ed0c 	.word	0xe000ed0c
 8005114:	20000f24 	.word	0x20000f24

08005118 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005118:	b580      	push	{r7, lr}
 800511a:	b08a      	sub	sp, #40	; 0x28
 800511c:	af00      	add	r7, sp, #0
 800511e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005120:	2300      	movs	r3, #0
 8005122:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005124:	f7fe fd90 	bl	8003c48 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005128:	4b5b      	ldr	r3, [pc, #364]	; (8005298 <pvPortMalloc+0x180>)
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	2b00      	cmp	r3, #0
 800512e:	d101      	bne.n	8005134 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005130:	f000 f920 	bl	8005374 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005134:	4b59      	ldr	r3, [pc, #356]	; (800529c <pvPortMalloc+0x184>)
 8005136:	681a      	ldr	r2, [r3, #0]
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	4013      	ands	r3, r2
 800513c:	2b00      	cmp	r3, #0
 800513e:	f040 8093 	bne.w	8005268 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	2b00      	cmp	r3, #0
 8005146:	d01d      	beq.n	8005184 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8005148:	2208      	movs	r2, #8
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	4413      	add	r3, r2
 800514e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	f003 0307 	and.w	r3, r3, #7
 8005156:	2b00      	cmp	r3, #0
 8005158:	d014      	beq.n	8005184 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	f023 0307 	bic.w	r3, r3, #7
 8005160:	3308      	adds	r3, #8
 8005162:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	f003 0307 	and.w	r3, r3, #7
 800516a:	2b00      	cmp	r3, #0
 800516c:	d00a      	beq.n	8005184 <pvPortMalloc+0x6c>
	__asm volatile
 800516e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005172:	f383 8811 	msr	BASEPRI, r3
 8005176:	f3bf 8f6f 	isb	sy
 800517a:	f3bf 8f4f 	dsb	sy
 800517e:	617b      	str	r3, [r7, #20]
}
 8005180:	bf00      	nop
 8005182:	e7fe      	b.n	8005182 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2b00      	cmp	r3, #0
 8005188:	d06e      	beq.n	8005268 <pvPortMalloc+0x150>
 800518a:	4b45      	ldr	r3, [pc, #276]	; (80052a0 <pvPortMalloc+0x188>)
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	687a      	ldr	r2, [r7, #4]
 8005190:	429a      	cmp	r2, r3
 8005192:	d869      	bhi.n	8005268 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005194:	4b43      	ldr	r3, [pc, #268]	; (80052a4 <pvPortMalloc+0x18c>)
 8005196:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005198:	4b42      	ldr	r3, [pc, #264]	; (80052a4 <pvPortMalloc+0x18c>)
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800519e:	e004      	b.n	80051aa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80051a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051a2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80051a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80051aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ac:	685b      	ldr	r3, [r3, #4]
 80051ae:	687a      	ldr	r2, [r7, #4]
 80051b0:	429a      	cmp	r2, r3
 80051b2:	d903      	bls.n	80051bc <pvPortMalloc+0xa4>
 80051b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d1f1      	bne.n	80051a0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80051bc:	4b36      	ldr	r3, [pc, #216]	; (8005298 <pvPortMalloc+0x180>)
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051c2:	429a      	cmp	r2, r3
 80051c4:	d050      	beq.n	8005268 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80051c6:	6a3b      	ldr	r3, [r7, #32]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	2208      	movs	r2, #8
 80051cc:	4413      	add	r3, r2
 80051ce:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80051d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051d2:	681a      	ldr	r2, [r3, #0]
 80051d4:	6a3b      	ldr	r3, [r7, #32]
 80051d6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80051d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051da:	685a      	ldr	r2, [r3, #4]
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	1ad2      	subs	r2, r2, r3
 80051e0:	2308      	movs	r3, #8
 80051e2:	005b      	lsls	r3, r3, #1
 80051e4:	429a      	cmp	r2, r3
 80051e6:	d91f      	bls.n	8005228 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80051e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	4413      	add	r3, r2
 80051ee:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80051f0:	69bb      	ldr	r3, [r7, #24]
 80051f2:	f003 0307 	and.w	r3, r3, #7
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d00a      	beq.n	8005210 <pvPortMalloc+0xf8>
	__asm volatile
 80051fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051fe:	f383 8811 	msr	BASEPRI, r3
 8005202:	f3bf 8f6f 	isb	sy
 8005206:	f3bf 8f4f 	dsb	sy
 800520a:	613b      	str	r3, [r7, #16]
}
 800520c:	bf00      	nop
 800520e:	e7fe      	b.n	800520e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005212:	685a      	ldr	r2, [r3, #4]
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	1ad2      	subs	r2, r2, r3
 8005218:	69bb      	ldr	r3, [r7, #24]
 800521a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800521c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800521e:	687a      	ldr	r2, [r7, #4]
 8005220:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005222:	69b8      	ldr	r0, [r7, #24]
 8005224:	f000 f908 	bl	8005438 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005228:	4b1d      	ldr	r3, [pc, #116]	; (80052a0 <pvPortMalloc+0x188>)
 800522a:	681a      	ldr	r2, [r3, #0]
 800522c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800522e:	685b      	ldr	r3, [r3, #4]
 8005230:	1ad3      	subs	r3, r2, r3
 8005232:	4a1b      	ldr	r2, [pc, #108]	; (80052a0 <pvPortMalloc+0x188>)
 8005234:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005236:	4b1a      	ldr	r3, [pc, #104]	; (80052a0 <pvPortMalloc+0x188>)
 8005238:	681a      	ldr	r2, [r3, #0]
 800523a:	4b1b      	ldr	r3, [pc, #108]	; (80052a8 <pvPortMalloc+0x190>)
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	429a      	cmp	r2, r3
 8005240:	d203      	bcs.n	800524a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005242:	4b17      	ldr	r3, [pc, #92]	; (80052a0 <pvPortMalloc+0x188>)
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	4a18      	ldr	r2, [pc, #96]	; (80052a8 <pvPortMalloc+0x190>)
 8005248:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800524a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800524c:	685a      	ldr	r2, [r3, #4]
 800524e:	4b13      	ldr	r3, [pc, #76]	; (800529c <pvPortMalloc+0x184>)
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	431a      	orrs	r2, r3
 8005254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005256:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800525a:	2200      	movs	r2, #0
 800525c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800525e:	4b13      	ldr	r3, [pc, #76]	; (80052ac <pvPortMalloc+0x194>)
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	3301      	adds	r3, #1
 8005264:	4a11      	ldr	r2, [pc, #68]	; (80052ac <pvPortMalloc+0x194>)
 8005266:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005268:	f7fe fcfc 	bl	8003c64 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800526c:	69fb      	ldr	r3, [r7, #28]
 800526e:	f003 0307 	and.w	r3, r3, #7
 8005272:	2b00      	cmp	r3, #0
 8005274:	d00a      	beq.n	800528c <pvPortMalloc+0x174>
	__asm volatile
 8005276:	f04f 0350 	mov.w	r3, #80	; 0x50
 800527a:	f383 8811 	msr	BASEPRI, r3
 800527e:	f3bf 8f6f 	isb	sy
 8005282:	f3bf 8f4f 	dsb	sy
 8005286:	60fb      	str	r3, [r7, #12]
}
 8005288:	bf00      	nop
 800528a:	e7fe      	b.n	800528a <pvPortMalloc+0x172>
	return pvReturn;
 800528c:	69fb      	ldr	r3, [r7, #28]
}
 800528e:	4618      	mov	r0, r3
 8005290:	3728      	adds	r7, #40	; 0x28
 8005292:	46bd      	mov	sp, r7
 8005294:	bd80      	pop	{r7, pc}
 8005296:	bf00      	nop
 8005298:	20004b30 	.word	0x20004b30
 800529c:	20004b44 	.word	0x20004b44
 80052a0:	20004b34 	.word	0x20004b34
 80052a4:	20004b28 	.word	0x20004b28
 80052a8:	20004b38 	.word	0x20004b38
 80052ac:	20004b3c 	.word	0x20004b3c

080052b0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80052b0:	b580      	push	{r7, lr}
 80052b2:	b086      	sub	sp, #24
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d04d      	beq.n	800535e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80052c2:	2308      	movs	r3, #8
 80052c4:	425b      	negs	r3, r3
 80052c6:	697a      	ldr	r2, [r7, #20]
 80052c8:	4413      	add	r3, r2
 80052ca:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80052cc:	697b      	ldr	r3, [r7, #20]
 80052ce:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80052d0:	693b      	ldr	r3, [r7, #16]
 80052d2:	685a      	ldr	r2, [r3, #4]
 80052d4:	4b24      	ldr	r3, [pc, #144]	; (8005368 <vPortFree+0xb8>)
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	4013      	ands	r3, r2
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d10a      	bne.n	80052f4 <vPortFree+0x44>
	__asm volatile
 80052de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052e2:	f383 8811 	msr	BASEPRI, r3
 80052e6:	f3bf 8f6f 	isb	sy
 80052ea:	f3bf 8f4f 	dsb	sy
 80052ee:	60fb      	str	r3, [r7, #12]
}
 80052f0:	bf00      	nop
 80052f2:	e7fe      	b.n	80052f2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80052f4:	693b      	ldr	r3, [r7, #16]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d00a      	beq.n	8005312 <vPortFree+0x62>
	__asm volatile
 80052fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005300:	f383 8811 	msr	BASEPRI, r3
 8005304:	f3bf 8f6f 	isb	sy
 8005308:	f3bf 8f4f 	dsb	sy
 800530c:	60bb      	str	r3, [r7, #8]
}
 800530e:	bf00      	nop
 8005310:	e7fe      	b.n	8005310 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005312:	693b      	ldr	r3, [r7, #16]
 8005314:	685a      	ldr	r2, [r3, #4]
 8005316:	4b14      	ldr	r3, [pc, #80]	; (8005368 <vPortFree+0xb8>)
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	4013      	ands	r3, r2
 800531c:	2b00      	cmp	r3, #0
 800531e:	d01e      	beq.n	800535e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005320:	693b      	ldr	r3, [r7, #16]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	2b00      	cmp	r3, #0
 8005326:	d11a      	bne.n	800535e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005328:	693b      	ldr	r3, [r7, #16]
 800532a:	685a      	ldr	r2, [r3, #4]
 800532c:	4b0e      	ldr	r3, [pc, #56]	; (8005368 <vPortFree+0xb8>)
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	43db      	mvns	r3, r3
 8005332:	401a      	ands	r2, r3
 8005334:	693b      	ldr	r3, [r7, #16]
 8005336:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005338:	f7fe fc86 	bl	8003c48 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800533c:	693b      	ldr	r3, [r7, #16]
 800533e:	685a      	ldr	r2, [r3, #4]
 8005340:	4b0a      	ldr	r3, [pc, #40]	; (800536c <vPortFree+0xbc>)
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	4413      	add	r3, r2
 8005346:	4a09      	ldr	r2, [pc, #36]	; (800536c <vPortFree+0xbc>)
 8005348:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800534a:	6938      	ldr	r0, [r7, #16]
 800534c:	f000 f874 	bl	8005438 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005350:	4b07      	ldr	r3, [pc, #28]	; (8005370 <vPortFree+0xc0>)
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	3301      	adds	r3, #1
 8005356:	4a06      	ldr	r2, [pc, #24]	; (8005370 <vPortFree+0xc0>)
 8005358:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800535a:	f7fe fc83 	bl	8003c64 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800535e:	bf00      	nop
 8005360:	3718      	adds	r7, #24
 8005362:	46bd      	mov	sp, r7
 8005364:	bd80      	pop	{r7, pc}
 8005366:	bf00      	nop
 8005368:	20004b44 	.word	0x20004b44
 800536c:	20004b34 	.word	0x20004b34
 8005370:	20004b40 	.word	0x20004b40

08005374 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005374:	b480      	push	{r7}
 8005376:	b085      	sub	sp, #20
 8005378:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800537a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800537e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005380:	4b27      	ldr	r3, [pc, #156]	; (8005420 <prvHeapInit+0xac>)
 8005382:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	f003 0307 	and.w	r3, r3, #7
 800538a:	2b00      	cmp	r3, #0
 800538c:	d00c      	beq.n	80053a8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	3307      	adds	r3, #7
 8005392:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	f023 0307 	bic.w	r3, r3, #7
 800539a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800539c:	68ba      	ldr	r2, [r7, #8]
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	1ad3      	subs	r3, r2, r3
 80053a2:	4a1f      	ldr	r2, [pc, #124]	; (8005420 <prvHeapInit+0xac>)
 80053a4:	4413      	add	r3, r2
 80053a6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80053ac:	4a1d      	ldr	r2, [pc, #116]	; (8005424 <prvHeapInit+0xb0>)
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80053b2:	4b1c      	ldr	r3, [pc, #112]	; (8005424 <prvHeapInit+0xb0>)
 80053b4:	2200      	movs	r2, #0
 80053b6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	68ba      	ldr	r2, [r7, #8]
 80053bc:	4413      	add	r3, r2
 80053be:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80053c0:	2208      	movs	r2, #8
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	1a9b      	subs	r3, r3, r2
 80053c6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	f023 0307 	bic.w	r3, r3, #7
 80053ce:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	4a15      	ldr	r2, [pc, #84]	; (8005428 <prvHeapInit+0xb4>)
 80053d4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80053d6:	4b14      	ldr	r3, [pc, #80]	; (8005428 <prvHeapInit+0xb4>)
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	2200      	movs	r2, #0
 80053dc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80053de:	4b12      	ldr	r3, [pc, #72]	; (8005428 <prvHeapInit+0xb4>)
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	2200      	movs	r2, #0
 80053e4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80053ea:	683b      	ldr	r3, [r7, #0]
 80053ec:	68fa      	ldr	r2, [r7, #12]
 80053ee:	1ad2      	subs	r2, r2, r3
 80053f0:	683b      	ldr	r3, [r7, #0]
 80053f2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80053f4:	4b0c      	ldr	r3, [pc, #48]	; (8005428 <prvHeapInit+0xb4>)
 80053f6:	681a      	ldr	r2, [r3, #0]
 80053f8:	683b      	ldr	r3, [r7, #0]
 80053fa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80053fc:	683b      	ldr	r3, [r7, #0]
 80053fe:	685b      	ldr	r3, [r3, #4]
 8005400:	4a0a      	ldr	r2, [pc, #40]	; (800542c <prvHeapInit+0xb8>)
 8005402:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005404:	683b      	ldr	r3, [r7, #0]
 8005406:	685b      	ldr	r3, [r3, #4]
 8005408:	4a09      	ldr	r2, [pc, #36]	; (8005430 <prvHeapInit+0xbc>)
 800540a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800540c:	4b09      	ldr	r3, [pc, #36]	; (8005434 <prvHeapInit+0xc0>)
 800540e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005412:	601a      	str	r2, [r3, #0]
}
 8005414:	bf00      	nop
 8005416:	3714      	adds	r7, #20
 8005418:	46bd      	mov	sp, r7
 800541a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541e:	4770      	bx	lr
 8005420:	20000f28 	.word	0x20000f28
 8005424:	20004b28 	.word	0x20004b28
 8005428:	20004b30 	.word	0x20004b30
 800542c:	20004b38 	.word	0x20004b38
 8005430:	20004b34 	.word	0x20004b34
 8005434:	20004b44 	.word	0x20004b44

08005438 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005438:	b480      	push	{r7}
 800543a:	b085      	sub	sp, #20
 800543c:	af00      	add	r7, sp, #0
 800543e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005440:	4b28      	ldr	r3, [pc, #160]	; (80054e4 <prvInsertBlockIntoFreeList+0xac>)
 8005442:	60fb      	str	r3, [r7, #12]
 8005444:	e002      	b.n	800544c <prvInsertBlockIntoFreeList+0x14>
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	60fb      	str	r3, [r7, #12]
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	687a      	ldr	r2, [r7, #4]
 8005452:	429a      	cmp	r2, r3
 8005454:	d8f7      	bhi.n	8005446 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	685b      	ldr	r3, [r3, #4]
 800545e:	68ba      	ldr	r2, [r7, #8]
 8005460:	4413      	add	r3, r2
 8005462:	687a      	ldr	r2, [r7, #4]
 8005464:	429a      	cmp	r2, r3
 8005466:	d108      	bne.n	800547a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	685a      	ldr	r2, [r3, #4]
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	685b      	ldr	r3, [r3, #4]
 8005470:	441a      	add	r2, r3
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	685b      	ldr	r3, [r3, #4]
 8005482:	68ba      	ldr	r2, [r7, #8]
 8005484:	441a      	add	r2, r3
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	429a      	cmp	r2, r3
 800548c:	d118      	bne.n	80054c0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	681a      	ldr	r2, [r3, #0]
 8005492:	4b15      	ldr	r3, [pc, #84]	; (80054e8 <prvInsertBlockIntoFreeList+0xb0>)
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	429a      	cmp	r2, r3
 8005498:	d00d      	beq.n	80054b6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	685a      	ldr	r2, [r3, #4]
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	685b      	ldr	r3, [r3, #4]
 80054a4:	441a      	add	r2, r3
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	681a      	ldr	r2, [r3, #0]
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	601a      	str	r2, [r3, #0]
 80054b4:	e008      	b.n	80054c8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80054b6:	4b0c      	ldr	r3, [pc, #48]	; (80054e8 <prvInsertBlockIntoFreeList+0xb0>)
 80054b8:	681a      	ldr	r2, [r3, #0]
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	601a      	str	r2, [r3, #0]
 80054be:	e003      	b.n	80054c8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	681a      	ldr	r2, [r3, #0]
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80054c8:	68fa      	ldr	r2, [r7, #12]
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	429a      	cmp	r2, r3
 80054ce:	d002      	beq.n	80054d6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	687a      	ldr	r2, [r7, #4]
 80054d4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80054d6:	bf00      	nop
 80054d8:	3714      	adds	r7, #20
 80054da:	46bd      	mov	sp, r7
 80054dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e0:	4770      	bx	lr
 80054e2:	bf00      	nop
 80054e4:	20004b28 	.word	0x20004b28
 80054e8:	20004b30 	.word	0x20004b30

080054ec <__libc_init_array>:
 80054ec:	b570      	push	{r4, r5, r6, lr}
 80054ee:	4d0d      	ldr	r5, [pc, #52]	; (8005524 <__libc_init_array+0x38>)
 80054f0:	4c0d      	ldr	r4, [pc, #52]	; (8005528 <__libc_init_array+0x3c>)
 80054f2:	1b64      	subs	r4, r4, r5
 80054f4:	10a4      	asrs	r4, r4, #2
 80054f6:	2600      	movs	r6, #0
 80054f8:	42a6      	cmp	r6, r4
 80054fa:	d109      	bne.n	8005510 <__libc_init_array+0x24>
 80054fc:	4d0b      	ldr	r5, [pc, #44]	; (800552c <__libc_init_array+0x40>)
 80054fe:	4c0c      	ldr	r4, [pc, #48]	; (8005530 <__libc_init_array+0x44>)
 8005500:	f000 f8f2 	bl	80056e8 <_init>
 8005504:	1b64      	subs	r4, r4, r5
 8005506:	10a4      	asrs	r4, r4, #2
 8005508:	2600      	movs	r6, #0
 800550a:	42a6      	cmp	r6, r4
 800550c:	d105      	bne.n	800551a <__libc_init_array+0x2e>
 800550e:	bd70      	pop	{r4, r5, r6, pc}
 8005510:	f855 3b04 	ldr.w	r3, [r5], #4
 8005514:	4798      	blx	r3
 8005516:	3601      	adds	r6, #1
 8005518:	e7ee      	b.n	80054f8 <__libc_init_array+0xc>
 800551a:	f855 3b04 	ldr.w	r3, [r5], #4
 800551e:	4798      	blx	r3
 8005520:	3601      	adds	r6, #1
 8005522:	e7f2      	b.n	800550a <__libc_init_array+0x1e>
 8005524:	08005820 	.word	0x08005820
 8005528:	08005820 	.word	0x08005820
 800552c:	08005820 	.word	0x08005820
 8005530:	08005824 	.word	0x08005824

08005534 <__retarget_lock_acquire_recursive>:
 8005534:	4770      	bx	lr

08005536 <__retarget_lock_release_recursive>:
 8005536:	4770      	bx	lr

08005538 <memcpy>:
 8005538:	440a      	add	r2, r1
 800553a:	4291      	cmp	r1, r2
 800553c:	f100 33ff 	add.w	r3, r0, #4294967295
 8005540:	d100      	bne.n	8005544 <memcpy+0xc>
 8005542:	4770      	bx	lr
 8005544:	b510      	push	{r4, lr}
 8005546:	f811 4b01 	ldrb.w	r4, [r1], #1
 800554a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800554e:	4291      	cmp	r1, r2
 8005550:	d1f9      	bne.n	8005546 <memcpy+0xe>
 8005552:	bd10      	pop	{r4, pc}

08005554 <memset>:
 8005554:	4402      	add	r2, r0
 8005556:	4603      	mov	r3, r0
 8005558:	4293      	cmp	r3, r2
 800555a:	d100      	bne.n	800555e <memset+0xa>
 800555c:	4770      	bx	lr
 800555e:	f803 1b01 	strb.w	r1, [r3], #1
 8005562:	e7f9      	b.n	8005558 <memset+0x4>

08005564 <cleanup_glue>:
 8005564:	b538      	push	{r3, r4, r5, lr}
 8005566:	460c      	mov	r4, r1
 8005568:	6809      	ldr	r1, [r1, #0]
 800556a:	4605      	mov	r5, r0
 800556c:	b109      	cbz	r1, 8005572 <cleanup_glue+0xe>
 800556e:	f7ff fff9 	bl	8005564 <cleanup_glue>
 8005572:	4621      	mov	r1, r4
 8005574:	4628      	mov	r0, r5
 8005576:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800557a:	f000 b869 	b.w	8005650 <_free_r>
	...

08005580 <_reclaim_reent>:
 8005580:	4b2c      	ldr	r3, [pc, #176]	; (8005634 <_reclaim_reent+0xb4>)
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	4283      	cmp	r3, r0
 8005586:	b570      	push	{r4, r5, r6, lr}
 8005588:	4604      	mov	r4, r0
 800558a:	d051      	beq.n	8005630 <_reclaim_reent+0xb0>
 800558c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800558e:	b143      	cbz	r3, 80055a2 <_reclaim_reent+0x22>
 8005590:	68db      	ldr	r3, [r3, #12]
 8005592:	2b00      	cmp	r3, #0
 8005594:	d14a      	bne.n	800562c <_reclaim_reent+0xac>
 8005596:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005598:	6819      	ldr	r1, [r3, #0]
 800559a:	b111      	cbz	r1, 80055a2 <_reclaim_reent+0x22>
 800559c:	4620      	mov	r0, r4
 800559e:	f000 f857 	bl	8005650 <_free_r>
 80055a2:	6961      	ldr	r1, [r4, #20]
 80055a4:	b111      	cbz	r1, 80055ac <_reclaim_reent+0x2c>
 80055a6:	4620      	mov	r0, r4
 80055a8:	f000 f852 	bl	8005650 <_free_r>
 80055ac:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80055ae:	b111      	cbz	r1, 80055b6 <_reclaim_reent+0x36>
 80055b0:	4620      	mov	r0, r4
 80055b2:	f000 f84d 	bl	8005650 <_free_r>
 80055b6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80055b8:	b111      	cbz	r1, 80055c0 <_reclaim_reent+0x40>
 80055ba:	4620      	mov	r0, r4
 80055bc:	f000 f848 	bl	8005650 <_free_r>
 80055c0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80055c2:	b111      	cbz	r1, 80055ca <_reclaim_reent+0x4a>
 80055c4:	4620      	mov	r0, r4
 80055c6:	f000 f843 	bl	8005650 <_free_r>
 80055ca:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80055cc:	b111      	cbz	r1, 80055d4 <_reclaim_reent+0x54>
 80055ce:	4620      	mov	r0, r4
 80055d0:	f000 f83e 	bl	8005650 <_free_r>
 80055d4:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80055d6:	b111      	cbz	r1, 80055de <_reclaim_reent+0x5e>
 80055d8:	4620      	mov	r0, r4
 80055da:	f000 f839 	bl	8005650 <_free_r>
 80055de:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80055e0:	b111      	cbz	r1, 80055e8 <_reclaim_reent+0x68>
 80055e2:	4620      	mov	r0, r4
 80055e4:	f000 f834 	bl	8005650 <_free_r>
 80055e8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80055ea:	b111      	cbz	r1, 80055f2 <_reclaim_reent+0x72>
 80055ec:	4620      	mov	r0, r4
 80055ee:	f000 f82f 	bl	8005650 <_free_r>
 80055f2:	69a3      	ldr	r3, [r4, #24]
 80055f4:	b1e3      	cbz	r3, 8005630 <_reclaim_reent+0xb0>
 80055f6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80055f8:	4620      	mov	r0, r4
 80055fa:	4798      	blx	r3
 80055fc:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80055fe:	b1b9      	cbz	r1, 8005630 <_reclaim_reent+0xb0>
 8005600:	4620      	mov	r0, r4
 8005602:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8005606:	f7ff bfad 	b.w	8005564 <cleanup_glue>
 800560a:	5949      	ldr	r1, [r1, r5]
 800560c:	b941      	cbnz	r1, 8005620 <_reclaim_reent+0xa0>
 800560e:	3504      	adds	r5, #4
 8005610:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005612:	2d80      	cmp	r5, #128	; 0x80
 8005614:	68d9      	ldr	r1, [r3, #12]
 8005616:	d1f8      	bne.n	800560a <_reclaim_reent+0x8a>
 8005618:	4620      	mov	r0, r4
 800561a:	f000 f819 	bl	8005650 <_free_r>
 800561e:	e7ba      	b.n	8005596 <_reclaim_reent+0x16>
 8005620:	680e      	ldr	r6, [r1, #0]
 8005622:	4620      	mov	r0, r4
 8005624:	f000 f814 	bl	8005650 <_free_r>
 8005628:	4631      	mov	r1, r6
 800562a:	e7ef      	b.n	800560c <_reclaim_reent+0x8c>
 800562c:	2500      	movs	r5, #0
 800562e:	e7ef      	b.n	8005610 <_reclaim_reent+0x90>
 8005630:	bd70      	pop	{r4, r5, r6, pc}
 8005632:	bf00      	nop
 8005634:	20000010 	.word	0x20000010

08005638 <__malloc_lock>:
 8005638:	4801      	ldr	r0, [pc, #4]	; (8005640 <__malloc_lock+0x8>)
 800563a:	f7ff bf7b 	b.w	8005534 <__retarget_lock_acquire_recursive>
 800563e:	bf00      	nop
 8005640:	20004b48 	.word	0x20004b48

08005644 <__malloc_unlock>:
 8005644:	4801      	ldr	r0, [pc, #4]	; (800564c <__malloc_unlock+0x8>)
 8005646:	f7ff bf76 	b.w	8005536 <__retarget_lock_release_recursive>
 800564a:	bf00      	nop
 800564c:	20004b48 	.word	0x20004b48

08005650 <_free_r>:
 8005650:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005652:	2900      	cmp	r1, #0
 8005654:	d044      	beq.n	80056e0 <_free_r+0x90>
 8005656:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800565a:	9001      	str	r0, [sp, #4]
 800565c:	2b00      	cmp	r3, #0
 800565e:	f1a1 0404 	sub.w	r4, r1, #4
 8005662:	bfb8      	it	lt
 8005664:	18e4      	addlt	r4, r4, r3
 8005666:	f7ff ffe7 	bl	8005638 <__malloc_lock>
 800566a:	4a1e      	ldr	r2, [pc, #120]	; (80056e4 <_free_r+0x94>)
 800566c:	9801      	ldr	r0, [sp, #4]
 800566e:	6813      	ldr	r3, [r2, #0]
 8005670:	b933      	cbnz	r3, 8005680 <_free_r+0x30>
 8005672:	6063      	str	r3, [r4, #4]
 8005674:	6014      	str	r4, [r2, #0]
 8005676:	b003      	add	sp, #12
 8005678:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800567c:	f7ff bfe2 	b.w	8005644 <__malloc_unlock>
 8005680:	42a3      	cmp	r3, r4
 8005682:	d908      	bls.n	8005696 <_free_r+0x46>
 8005684:	6825      	ldr	r5, [r4, #0]
 8005686:	1961      	adds	r1, r4, r5
 8005688:	428b      	cmp	r3, r1
 800568a:	bf01      	itttt	eq
 800568c:	6819      	ldreq	r1, [r3, #0]
 800568e:	685b      	ldreq	r3, [r3, #4]
 8005690:	1949      	addeq	r1, r1, r5
 8005692:	6021      	streq	r1, [r4, #0]
 8005694:	e7ed      	b.n	8005672 <_free_r+0x22>
 8005696:	461a      	mov	r2, r3
 8005698:	685b      	ldr	r3, [r3, #4]
 800569a:	b10b      	cbz	r3, 80056a0 <_free_r+0x50>
 800569c:	42a3      	cmp	r3, r4
 800569e:	d9fa      	bls.n	8005696 <_free_r+0x46>
 80056a0:	6811      	ldr	r1, [r2, #0]
 80056a2:	1855      	adds	r5, r2, r1
 80056a4:	42a5      	cmp	r5, r4
 80056a6:	d10b      	bne.n	80056c0 <_free_r+0x70>
 80056a8:	6824      	ldr	r4, [r4, #0]
 80056aa:	4421      	add	r1, r4
 80056ac:	1854      	adds	r4, r2, r1
 80056ae:	42a3      	cmp	r3, r4
 80056b0:	6011      	str	r1, [r2, #0]
 80056b2:	d1e0      	bne.n	8005676 <_free_r+0x26>
 80056b4:	681c      	ldr	r4, [r3, #0]
 80056b6:	685b      	ldr	r3, [r3, #4]
 80056b8:	6053      	str	r3, [r2, #4]
 80056ba:	4421      	add	r1, r4
 80056bc:	6011      	str	r1, [r2, #0]
 80056be:	e7da      	b.n	8005676 <_free_r+0x26>
 80056c0:	d902      	bls.n	80056c8 <_free_r+0x78>
 80056c2:	230c      	movs	r3, #12
 80056c4:	6003      	str	r3, [r0, #0]
 80056c6:	e7d6      	b.n	8005676 <_free_r+0x26>
 80056c8:	6825      	ldr	r5, [r4, #0]
 80056ca:	1961      	adds	r1, r4, r5
 80056cc:	428b      	cmp	r3, r1
 80056ce:	bf04      	itt	eq
 80056d0:	6819      	ldreq	r1, [r3, #0]
 80056d2:	685b      	ldreq	r3, [r3, #4]
 80056d4:	6063      	str	r3, [r4, #4]
 80056d6:	bf04      	itt	eq
 80056d8:	1949      	addeq	r1, r1, r5
 80056da:	6021      	streq	r1, [r4, #0]
 80056dc:	6054      	str	r4, [r2, #4]
 80056de:	e7ca      	b.n	8005676 <_free_r+0x26>
 80056e0:	b003      	add	sp, #12
 80056e2:	bd30      	pop	{r4, r5, pc}
 80056e4:	20004b4c 	.word	0x20004b4c

080056e8 <_init>:
 80056e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056ea:	bf00      	nop
 80056ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80056ee:	bc08      	pop	{r3}
 80056f0:	469e      	mov	lr, r3
 80056f2:	4770      	bx	lr

080056f4 <_fini>:
 80056f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056f6:	bf00      	nop
 80056f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80056fa:	bc08      	pop	{r3}
 80056fc:	469e      	mov	lr, r3
 80056fe:	4770      	bx	lr
