
Free_RTOS_Servos.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005c90  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000118  08005e30  08005e30  00015e30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005f48  08005f48  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08005f48  08005f48  00015f48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005f50  08005f50  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005f50  08005f50  00015f50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005f54  08005f54  00015f54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08005f58  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004ae4  20000074  08005fcc  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004b58  08005fcc  00024b58  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   000155b0  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002dc6  00000000  00000000  00035654  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011c8  00000000  00000000  00038420  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000010a0  00000000  00000000  000395e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002d1e  00000000  00000000  0003a688  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012324  00000000  00000000  0003d3a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00094742  00000000  00000000  0004f6ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e3e0c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004eb4  00000000  00000000  000e3e5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000074 	.word	0x20000074
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005e18 	.word	0x08005e18

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000078 	.word	0x20000078
 80001dc:	08005e18 	.word	0x08005e18

080001e0 <__aeabi_dmul>:
 80001e0:	b570      	push	{r4, r5, r6, lr}
 80001e2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80001e6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80001ea:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80001ee:	bf1d      	ittte	ne
 80001f0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80001f4:	ea94 0f0c 	teqne	r4, ip
 80001f8:	ea95 0f0c 	teqne	r5, ip
 80001fc:	f000 f8de 	bleq	80003bc <__aeabi_dmul+0x1dc>
 8000200:	442c      	add	r4, r5
 8000202:	ea81 0603 	eor.w	r6, r1, r3
 8000206:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800020a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800020e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000212:	bf18      	it	ne
 8000214:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000218:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800021c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000220:	d038      	beq.n	8000294 <__aeabi_dmul+0xb4>
 8000222:	fba0 ce02 	umull	ip, lr, r0, r2
 8000226:	f04f 0500 	mov.w	r5, #0
 800022a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800022e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000232:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000236:	f04f 0600 	mov.w	r6, #0
 800023a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800023e:	f09c 0f00 	teq	ip, #0
 8000242:	bf18      	it	ne
 8000244:	f04e 0e01 	orrne.w	lr, lr, #1
 8000248:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800024c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000250:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000254:	d204      	bcs.n	8000260 <__aeabi_dmul+0x80>
 8000256:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800025a:	416d      	adcs	r5, r5
 800025c:	eb46 0606 	adc.w	r6, r6, r6
 8000260:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000264:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000268:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800026c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000270:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000274:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000278:	bf88      	it	hi
 800027a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800027e:	d81e      	bhi.n	80002be <__aeabi_dmul+0xde>
 8000280:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000284:	bf08      	it	eq
 8000286:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800028a:	f150 0000 	adcs.w	r0, r0, #0
 800028e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000292:	bd70      	pop	{r4, r5, r6, pc}
 8000294:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000298:	ea46 0101 	orr.w	r1, r6, r1
 800029c:	ea40 0002 	orr.w	r0, r0, r2
 80002a0:	ea81 0103 	eor.w	r1, r1, r3
 80002a4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002a8:	bfc2      	ittt	gt
 80002aa:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002ae:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002b2:	bd70      	popgt	{r4, r5, r6, pc}
 80002b4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002b8:	f04f 0e00 	mov.w	lr, #0
 80002bc:	3c01      	subs	r4, #1
 80002be:	f300 80ab 	bgt.w	8000418 <__aeabi_dmul+0x238>
 80002c2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80002c6:	bfde      	ittt	le
 80002c8:	2000      	movle	r0, #0
 80002ca:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80002ce:	bd70      	pople	{r4, r5, r6, pc}
 80002d0:	f1c4 0400 	rsb	r4, r4, #0
 80002d4:	3c20      	subs	r4, #32
 80002d6:	da35      	bge.n	8000344 <__aeabi_dmul+0x164>
 80002d8:	340c      	adds	r4, #12
 80002da:	dc1b      	bgt.n	8000314 <__aeabi_dmul+0x134>
 80002dc:	f104 0414 	add.w	r4, r4, #20
 80002e0:	f1c4 0520 	rsb	r5, r4, #32
 80002e4:	fa00 f305 	lsl.w	r3, r0, r5
 80002e8:	fa20 f004 	lsr.w	r0, r0, r4
 80002ec:	fa01 f205 	lsl.w	r2, r1, r5
 80002f0:	ea40 0002 	orr.w	r0, r0, r2
 80002f4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80002f8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80002fc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000300:	fa21 f604 	lsr.w	r6, r1, r4
 8000304:	eb42 0106 	adc.w	r1, r2, r6
 8000308:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800030c:	bf08      	it	eq
 800030e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000312:	bd70      	pop	{r4, r5, r6, pc}
 8000314:	f1c4 040c 	rsb	r4, r4, #12
 8000318:	f1c4 0520 	rsb	r5, r4, #32
 800031c:	fa00 f304 	lsl.w	r3, r0, r4
 8000320:	fa20 f005 	lsr.w	r0, r0, r5
 8000324:	fa01 f204 	lsl.w	r2, r1, r4
 8000328:	ea40 0002 	orr.w	r0, r0, r2
 800032c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000330:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000334:	f141 0100 	adc.w	r1, r1, #0
 8000338:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800033c:	bf08      	it	eq
 800033e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000342:	bd70      	pop	{r4, r5, r6, pc}
 8000344:	f1c4 0520 	rsb	r5, r4, #32
 8000348:	fa00 f205 	lsl.w	r2, r0, r5
 800034c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000350:	fa20 f304 	lsr.w	r3, r0, r4
 8000354:	fa01 f205 	lsl.w	r2, r1, r5
 8000358:	ea43 0302 	orr.w	r3, r3, r2
 800035c:	fa21 f004 	lsr.w	r0, r1, r4
 8000360:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000364:	fa21 f204 	lsr.w	r2, r1, r4
 8000368:	ea20 0002 	bic.w	r0, r0, r2
 800036c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000370:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000374:	bf08      	it	eq
 8000376:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800037a:	bd70      	pop	{r4, r5, r6, pc}
 800037c:	f094 0f00 	teq	r4, #0
 8000380:	d10f      	bne.n	80003a2 <__aeabi_dmul+0x1c2>
 8000382:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000386:	0040      	lsls	r0, r0, #1
 8000388:	eb41 0101 	adc.w	r1, r1, r1
 800038c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000390:	bf08      	it	eq
 8000392:	3c01      	subeq	r4, #1
 8000394:	d0f7      	beq.n	8000386 <__aeabi_dmul+0x1a6>
 8000396:	ea41 0106 	orr.w	r1, r1, r6
 800039a:	f095 0f00 	teq	r5, #0
 800039e:	bf18      	it	ne
 80003a0:	4770      	bxne	lr
 80003a2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80003a6:	0052      	lsls	r2, r2, #1
 80003a8:	eb43 0303 	adc.w	r3, r3, r3
 80003ac:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80003b0:	bf08      	it	eq
 80003b2:	3d01      	subeq	r5, #1
 80003b4:	d0f7      	beq.n	80003a6 <__aeabi_dmul+0x1c6>
 80003b6:	ea43 0306 	orr.w	r3, r3, r6
 80003ba:	4770      	bx	lr
 80003bc:	ea94 0f0c 	teq	r4, ip
 80003c0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003c4:	bf18      	it	ne
 80003c6:	ea95 0f0c 	teqne	r5, ip
 80003ca:	d00c      	beq.n	80003e6 <__aeabi_dmul+0x206>
 80003cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003d0:	bf18      	it	ne
 80003d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003d6:	d1d1      	bne.n	800037c <__aeabi_dmul+0x19c>
 80003d8:	ea81 0103 	eor.w	r1, r1, r3
 80003dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003e0:	f04f 0000 	mov.w	r0, #0
 80003e4:	bd70      	pop	{r4, r5, r6, pc}
 80003e6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003ea:	bf06      	itte	eq
 80003ec:	4610      	moveq	r0, r2
 80003ee:	4619      	moveq	r1, r3
 80003f0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003f4:	d019      	beq.n	800042a <__aeabi_dmul+0x24a>
 80003f6:	ea94 0f0c 	teq	r4, ip
 80003fa:	d102      	bne.n	8000402 <__aeabi_dmul+0x222>
 80003fc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000400:	d113      	bne.n	800042a <__aeabi_dmul+0x24a>
 8000402:	ea95 0f0c 	teq	r5, ip
 8000406:	d105      	bne.n	8000414 <__aeabi_dmul+0x234>
 8000408:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800040c:	bf1c      	itt	ne
 800040e:	4610      	movne	r0, r2
 8000410:	4619      	movne	r1, r3
 8000412:	d10a      	bne.n	800042a <__aeabi_dmul+0x24a>
 8000414:	ea81 0103 	eor.w	r1, r1, r3
 8000418:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800041c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000420:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000424:	f04f 0000 	mov.w	r0, #0
 8000428:	bd70      	pop	{r4, r5, r6, pc}
 800042a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800042e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000432:	bd70      	pop	{r4, r5, r6, pc}

08000434 <__aeabi_drsub>:
 8000434:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000438:	e002      	b.n	8000440 <__adddf3>
 800043a:	bf00      	nop

0800043c <__aeabi_dsub>:
 800043c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000440 <__adddf3>:
 8000440:	b530      	push	{r4, r5, lr}
 8000442:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000446:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800044a:	ea94 0f05 	teq	r4, r5
 800044e:	bf08      	it	eq
 8000450:	ea90 0f02 	teqeq	r0, r2
 8000454:	bf1f      	itttt	ne
 8000456:	ea54 0c00 	orrsne.w	ip, r4, r0
 800045a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800045e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000462:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000466:	f000 80e2 	beq.w	800062e <__adddf3+0x1ee>
 800046a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800046e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000472:	bfb8      	it	lt
 8000474:	426d      	neglt	r5, r5
 8000476:	dd0c      	ble.n	8000492 <__adddf3+0x52>
 8000478:	442c      	add	r4, r5
 800047a:	ea80 0202 	eor.w	r2, r0, r2
 800047e:	ea81 0303 	eor.w	r3, r1, r3
 8000482:	ea82 0000 	eor.w	r0, r2, r0
 8000486:	ea83 0101 	eor.w	r1, r3, r1
 800048a:	ea80 0202 	eor.w	r2, r0, r2
 800048e:	ea81 0303 	eor.w	r3, r1, r3
 8000492:	2d36      	cmp	r5, #54	; 0x36
 8000494:	bf88      	it	hi
 8000496:	bd30      	pophi	{r4, r5, pc}
 8000498:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800049c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80004a0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80004a4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004a8:	d002      	beq.n	80004b0 <__adddf3+0x70>
 80004aa:	4240      	negs	r0, r0
 80004ac:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004b0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80004b4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004b8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004bc:	d002      	beq.n	80004c4 <__adddf3+0x84>
 80004be:	4252      	negs	r2, r2
 80004c0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004c4:	ea94 0f05 	teq	r4, r5
 80004c8:	f000 80a7 	beq.w	800061a <__adddf3+0x1da>
 80004cc:	f1a4 0401 	sub.w	r4, r4, #1
 80004d0:	f1d5 0e20 	rsbs	lr, r5, #32
 80004d4:	db0d      	blt.n	80004f2 <__adddf3+0xb2>
 80004d6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004da:	fa22 f205 	lsr.w	r2, r2, r5
 80004de:	1880      	adds	r0, r0, r2
 80004e0:	f141 0100 	adc.w	r1, r1, #0
 80004e4:	fa03 f20e 	lsl.w	r2, r3, lr
 80004e8:	1880      	adds	r0, r0, r2
 80004ea:	fa43 f305 	asr.w	r3, r3, r5
 80004ee:	4159      	adcs	r1, r3
 80004f0:	e00e      	b.n	8000510 <__adddf3+0xd0>
 80004f2:	f1a5 0520 	sub.w	r5, r5, #32
 80004f6:	f10e 0e20 	add.w	lr, lr, #32
 80004fa:	2a01      	cmp	r2, #1
 80004fc:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000500:	bf28      	it	cs
 8000502:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000506:	fa43 f305 	asr.w	r3, r3, r5
 800050a:	18c0      	adds	r0, r0, r3
 800050c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000510:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000514:	d507      	bpl.n	8000526 <__adddf3+0xe6>
 8000516:	f04f 0e00 	mov.w	lr, #0
 800051a:	f1dc 0c00 	rsbs	ip, ip, #0
 800051e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000522:	eb6e 0101 	sbc.w	r1, lr, r1
 8000526:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800052a:	d31b      	bcc.n	8000564 <__adddf3+0x124>
 800052c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000530:	d30c      	bcc.n	800054c <__adddf3+0x10c>
 8000532:	0849      	lsrs	r1, r1, #1
 8000534:	ea5f 0030 	movs.w	r0, r0, rrx
 8000538:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800053c:	f104 0401 	add.w	r4, r4, #1
 8000540:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000544:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000548:	f080 809a 	bcs.w	8000680 <__adddf3+0x240>
 800054c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000550:	bf08      	it	eq
 8000552:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000556:	f150 0000 	adcs.w	r0, r0, #0
 800055a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800055e:	ea41 0105 	orr.w	r1, r1, r5
 8000562:	bd30      	pop	{r4, r5, pc}
 8000564:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000568:	4140      	adcs	r0, r0
 800056a:	eb41 0101 	adc.w	r1, r1, r1
 800056e:	3c01      	subs	r4, #1
 8000570:	bf28      	it	cs
 8000572:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000576:	d2e9      	bcs.n	800054c <__adddf3+0x10c>
 8000578:	f091 0f00 	teq	r1, #0
 800057c:	bf04      	itt	eq
 800057e:	4601      	moveq	r1, r0
 8000580:	2000      	moveq	r0, #0
 8000582:	fab1 f381 	clz	r3, r1
 8000586:	bf08      	it	eq
 8000588:	3320      	addeq	r3, #32
 800058a:	f1a3 030b 	sub.w	r3, r3, #11
 800058e:	f1b3 0220 	subs.w	r2, r3, #32
 8000592:	da0c      	bge.n	80005ae <__adddf3+0x16e>
 8000594:	320c      	adds	r2, #12
 8000596:	dd08      	ble.n	80005aa <__adddf3+0x16a>
 8000598:	f102 0c14 	add.w	ip, r2, #20
 800059c:	f1c2 020c 	rsb	r2, r2, #12
 80005a0:	fa01 f00c 	lsl.w	r0, r1, ip
 80005a4:	fa21 f102 	lsr.w	r1, r1, r2
 80005a8:	e00c      	b.n	80005c4 <__adddf3+0x184>
 80005aa:	f102 0214 	add.w	r2, r2, #20
 80005ae:	bfd8      	it	le
 80005b0:	f1c2 0c20 	rsble	ip, r2, #32
 80005b4:	fa01 f102 	lsl.w	r1, r1, r2
 80005b8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005bc:	bfdc      	itt	le
 80005be:	ea41 010c 	orrle.w	r1, r1, ip
 80005c2:	4090      	lslle	r0, r2
 80005c4:	1ae4      	subs	r4, r4, r3
 80005c6:	bfa2      	ittt	ge
 80005c8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005cc:	4329      	orrge	r1, r5
 80005ce:	bd30      	popge	{r4, r5, pc}
 80005d0:	ea6f 0404 	mvn.w	r4, r4
 80005d4:	3c1f      	subs	r4, #31
 80005d6:	da1c      	bge.n	8000612 <__adddf3+0x1d2>
 80005d8:	340c      	adds	r4, #12
 80005da:	dc0e      	bgt.n	80005fa <__adddf3+0x1ba>
 80005dc:	f104 0414 	add.w	r4, r4, #20
 80005e0:	f1c4 0220 	rsb	r2, r4, #32
 80005e4:	fa20 f004 	lsr.w	r0, r0, r4
 80005e8:	fa01 f302 	lsl.w	r3, r1, r2
 80005ec:	ea40 0003 	orr.w	r0, r0, r3
 80005f0:	fa21 f304 	lsr.w	r3, r1, r4
 80005f4:	ea45 0103 	orr.w	r1, r5, r3
 80005f8:	bd30      	pop	{r4, r5, pc}
 80005fa:	f1c4 040c 	rsb	r4, r4, #12
 80005fe:	f1c4 0220 	rsb	r2, r4, #32
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 f304 	lsl.w	r3, r1, r4
 800060a:	ea40 0003 	orr.w	r0, r0, r3
 800060e:	4629      	mov	r1, r5
 8000610:	bd30      	pop	{r4, r5, pc}
 8000612:	fa21 f004 	lsr.w	r0, r1, r4
 8000616:	4629      	mov	r1, r5
 8000618:	bd30      	pop	{r4, r5, pc}
 800061a:	f094 0f00 	teq	r4, #0
 800061e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000622:	bf06      	itte	eq
 8000624:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000628:	3401      	addeq	r4, #1
 800062a:	3d01      	subne	r5, #1
 800062c:	e74e      	b.n	80004cc <__adddf3+0x8c>
 800062e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000632:	bf18      	it	ne
 8000634:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000638:	d029      	beq.n	800068e <__adddf3+0x24e>
 800063a:	ea94 0f05 	teq	r4, r5
 800063e:	bf08      	it	eq
 8000640:	ea90 0f02 	teqeq	r0, r2
 8000644:	d005      	beq.n	8000652 <__adddf3+0x212>
 8000646:	ea54 0c00 	orrs.w	ip, r4, r0
 800064a:	bf04      	itt	eq
 800064c:	4619      	moveq	r1, r3
 800064e:	4610      	moveq	r0, r2
 8000650:	bd30      	pop	{r4, r5, pc}
 8000652:	ea91 0f03 	teq	r1, r3
 8000656:	bf1e      	ittt	ne
 8000658:	2100      	movne	r1, #0
 800065a:	2000      	movne	r0, #0
 800065c:	bd30      	popne	{r4, r5, pc}
 800065e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000662:	d105      	bne.n	8000670 <__adddf3+0x230>
 8000664:	0040      	lsls	r0, r0, #1
 8000666:	4149      	adcs	r1, r1
 8000668:	bf28      	it	cs
 800066a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800066e:	bd30      	pop	{r4, r5, pc}
 8000670:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000674:	bf3c      	itt	cc
 8000676:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800067a:	bd30      	popcc	{r4, r5, pc}
 800067c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000680:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000684:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000688:	f04f 0000 	mov.w	r0, #0
 800068c:	bd30      	pop	{r4, r5, pc}
 800068e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000692:	bf1a      	itte	ne
 8000694:	4619      	movne	r1, r3
 8000696:	4610      	movne	r0, r2
 8000698:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800069c:	bf1c      	itt	ne
 800069e:	460b      	movne	r3, r1
 80006a0:	4602      	movne	r2, r0
 80006a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80006a6:	bf06      	itte	eq
 80006a8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006ac:	ea91 0f03 	teqeq	r1, r3
 80006b0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80006b4:	bd30      	pop	{r4, r5, pc}
 80006b6:	bf00      	nop

080006b8 <__aeabi_ui2d>:
 80006b8:	f090 0f00 	teq	r0, #0
 80006bc:	bf04      	itt	eq
 80006be:	2100      	moveq	r1, #0
 80006c0:	4770      	bxeq	lr
 80006c2:	b530      	push	{r4, r5, lr}
 80006c4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006c8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006cc:	f04f 0500 	mov.w	r5, #0
 80006d0:	f04f 0100 	mov.w	r1, #0
 80006d4:	e750      	b.n	8000578 <__adddf3+0x138>
 80006d6:	bf00      	nop

080006d8 <__aeabi_i2d>:
 80006d8:	f090 0f00 	teq	r0, #0
 80006dc:	bf04      	itt	eq
 80006de:	2100      	moveq	r1, #0
 80006e0:	4770      	bxeq	lr
 80006e2:	b530      	push	{r4, r5, lr}
 80006e4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006e8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006ec:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80006f0:	bf48      	it	mi
 80006f2:	4240      	negmi	r0, r0
 80006f4:	f04f 0100 	mov.w	r1, #0
 80006f8:	e73e      	b.n	8000578 <__adddf3+0x138>
 80006fa:	bf00      	nop

080006fc <__aeabi_f2d>:
 80006fc:	0042      	lsls	r2, r0, #1
 80006fe:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000702:	ea4f 0131 	mov.w	r1, r1, rrx
 8000706:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800070a:	bf1f      	itttt	ne
 800070c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000710:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000714:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000718:	4770      	bxne	lr
 800071a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800071e:	bf08      	it	eq
 8000720:	4770      	bxeq	lr
 8000722:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000726:	bf04      	itt	eq
 8000728:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800072c:	4770      	bxeq	lr
 800072e:	b530      	push	{r4, r5, lr}
 8000730:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000734:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000738:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800073c:	e71c      	b.n	8000578 <__adddf3+0x138>
 800073e:	bf00      	nop

08000740 <__aeabi_ul2d>:
 8000740:	ea50 0201 	orrs.w	r2, r0, r1
 8000744:	bf08      	it	eq
 8000746:	4770      	bxeq	lr
 8000748:	b530      	push	{r4, r5, lr}
 800074a:	f04f 0500 	mov.w	r5, #0
 800074e:	e00a      	b.n	8000766 <__aeabi_l2d+0x16>

08000750 <__aeabi_l2d>:
 8000750:	ea50 0201 	orrs.w	r2, r0, r1
 8000754:	bf08      	it	eq
 8000756:	4770      	bxeq	lr
 8000758:	b530      	push	{r4, r5, lr}
 800075a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800075e:	d502      	bpl.n	8000766 <__aeabi_l2d+0x16>
 8000760:	4240      	negs	r0, r0
 8000762:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000766:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800076a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800076e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000772:	f43f aed8 	beq.w	8000526 <__adddf3+0xe6>
 8000776:	f04f 0203 	mov.w	r2, #3
 800077a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800077e:	bf18      	it	ne
 8000780:	3203      	addne	r2, #3
 8000782:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000786:	bf18      	it	ne
 8000788:	3203      	addne	r2, #3
 800078a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800078e:	f1c2 0320 	rsb	r3, r2, #32
 8000792:	fa00 fc03 	lsl.w	ip, r0, r3
 8000796:	fa20 f002 	lsr.w	r0, r0, r2
 800079a:	fa01 fe03 	lsl.w	lr, r1, r3
 800079e:	ea40 000e 	orr.w	r0, r0, lr
 80007a2:	fa21 f102 	lsr.w	r1, r1, r2
 80007a6:	4414      	add	r4, r2
 80007a8:	e6bd      	b.n	8000526 <__adddf3+0xe6>
 80007aa:	bf00      	nop

080007ac <__aeabi_d2f>:
 80007ac:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80007b0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80007b4:	bf24      	itt	cs
 80007b6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80007ba:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80007be:	d90d      	bls.n	80007dc <__aeabi_d2f+0x30>
 80007c0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80007c4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80007c8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80007cc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80007d0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80007d4:	bf08      	it	eq
 80007d6:	f020 0001 	biceq.w	r0, r0, #1
 80007da:	4770      	bx	lr
 80007dc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80007e0:	d121      	bne.n	8000826 <__aeabi_d2f+0x7a>
 80007e2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80007e6:	bfbc      	itt	lt
 80007e8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80007ec:	4770      	bxlt	lr
 80007ee:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80007f2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80007f6:	f1c2 0218 	rsb	r2, r2, #24
 80007fa:	f1c2 0c20 	rsb	ip, r2, #32
 80007fe:	fa10 f30c 	lsls.w	r3, r0, ip
 8000802:	fa20 f002 	lsr.w	r0, r0, r2
 8000806:	bf18      	it	ne
 8000808:	f040 0001 	orrne.w	r0, r0, #1
 800080c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000810:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000814:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000818:	ea40 000c 	orr.w	r0, r0, ip
 800081c:	fa23 f302 	lsr.w	r3, r3, r2
 8000820:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000824:	e7cc      	b.n	80007c0 <__aeabi_d2f+0x14>
 8000826:	ea7f 5362 	mvns.w	r3, r2, asr #21
 800082a:	d107      	bne.n	800083c <__aeabi_d2f+0x90>
 800082c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000830:	bf1e      	ittt	ne
 8000832:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000836:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 800083a:	4770      	bxne	lr
 800083c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000840:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000844:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000848:	4770      	bx	lr
 800084a:	bf00      	nop

0800084c <__aeabi_uldivmod>:
 800084c:	b953      	cbnz	r3, 8000864 <__aeabi_uldivmod+0x18>
 800084e:	b94a      	cbnz	r2, 8000864 <__aeabi_uldivmod+0x18>
 8000850:	2900      	cmp	r1, #0
 8000852:	bf08      	it	eq
 8000854:	2800      	cmpeq	r0, #0
 8000856:	bf1c      	itt	ne
 8000858:	f04f 31ff 	movne.w	r1, #4294967295
 800085c:	f04f 30ff 	movne.w	r0, #4294967295
 8000860:	f000 b974 	b.w	8000b4c <__aeabi_idiv0>
 8000864:	f1ad 0c08 	sub.w	ip, sp, #8
 8000868:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800086c:	f000 f806 	bl	800087c <__udivmoddi4>
 8000870:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000874:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000878:	b004      	add	sp, #16
 800087a:	4770      	bx	lr

0800087c <__udivmoddi4>:
 800087c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000880:	9d08      	ldr	r5, [sp, #32]
 8000882:	4604      	mov	r4, r0
 8000884:	468e      	mov	lr, r1
 8000886:	2b00      	cmp	r3, #0
 8000888:	d14d      	bne.n	8000926 <__udivmoddi4+0xaa>
 800088a:	428a      	cmp	r2, r1
 800088c:	4694      	mov	ip, r2
 800088e:	d969      	bls.n	8000964 <__udivmoddi4+0xe8>
 8000890:	fab2 f282 	clz	r2, r2
 8000894:	b152      	cbz	r2, 80008ac <__udivmoddi4+0x30>
 8000896:	fa01 f302 	lsl.w	r3, r1, r2
 800089a:	f1c2 0120 	rsb	r1, r2, #32
 800089e:	fa20 f101 	lsr.w	r1, r0, r1
 80008a2:	fa0c fc02 	lsl.w	ip, ip, r2
 80008a6:	ea41 0e03 	orr.w	lr, r1, r3
 80008aa:	4094      	lsls	r4, r2
 80008ac:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80008b0:	0c21      	lsrs	r1, r4, #16
 80008b2:	fbbe f6f8 	udiv	r6, lr, r8
 80008b6:	fa1f f78c 	uxth.w	r7, ip
 80008ba:	fb08 e316 	mls	r3, r8, r6, lr
 80008be:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80008c2:	fb06 f107 	mul.w	r1, r6, r7
 80008c6:	4299      	cmp	r1, r3
 80008c8:	d90a      	bls.n	80008e0 <__udivmoddi4+0x64>
 80008ca:	eb1c 0303 	adds.w	r3, ip, r3
 80008ce:	f106 30ff 	add.w	r0, r6, #4294967295
 80008d2:	f080 811f 	bcs.w	8000b14 <__udivmoddi4+0x298>
 80008d6:	4299      	cmp	r1, r3
 80008d8:	f240 811c 	bls.w	8000b14 <__udivmoddi4+0x298>
 80008dc:	3e02      	subs	r6, #2
 80008de:	4463      	add	r3, ip
 80008e0:	1a5b      	subs	r3, r3, r1
 80008e2:	b2a4      	uxth	r4, r4
 80008e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80008e8:	fb08 3310 	mls	r3, r8, r0, r3
 80008ec:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80008f0:	fb00 f707 	mul.w	r7, r0, r7
 80008f4:	42a7      	cmp	r7, r4
 80008f6:	d90a      	bls.n	800090e <__udivmoddi4+0x92>
 80008f8:	eb1c 0404 	adds.w	r4, ip, r4
 80008fc:	f100 33ff 	add.w	r3, r0, #4294967295
 8000900:	f080 810a 	bcs.w	8000b18 <__udivmoddi4+0x29c>
 8000904:	42a7      	cmp	r7, r4
 8000906:	f240 8107 	bls.w	8000b18 <__udivmoddi4+0x29c>
 800090a:	4464      	add	r4, ip
 800090c:	3802      	subs	r0, #2
 800090e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000912:	1be4      	subs	r4, r4, r7
 8000914:	2600      	movs	r6, #0
 8000916:	b11d      	cbz	r5, 8000920 <__udivmoddi4+0xa4>
 8000918:	40d4      	lsrs	r4, r2
 800091a:	2300      	movs	r3, #0
 800091c:	e9c5 4300 	strd	r4, r3, [r5]
 8000920:	4631      	mov	r1, r6
 8000922:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000926:	428b      	cmp	r3, r1
 8000928:	d909      	bls.n	800093e <__udivmoddi4+0xc2>
 800092a:	2d00      	cmp	r5, #0
 800092c:	f000 80ef 	beq.w	8000b0e <__udivmoddi4+0x292>
 8000930:	2600      	movs	r6, #0
 8000932:	e9c5 0100 	strd	r0, r1, [r5]
 8000936:	4630      	mov	r0, r6
 8000938:	4631      	mov	r1, r6
 800093a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800093e:	fab3 f683 	clz	r6, r3
 8000942:	2e00      	cmp	r6, #0
 8000944:	d14a      	bne.n	80009dc <__udivmoddi4+0x160>
 8000946:	428b      	cmp	r3, r1
 8000948:	d302      	bcc.n	8000950 <__udivmoddi4+0xd4>
 800094a:	4282      	cmp	r2, r0
 800094c:	f200 80f9 	bhi.w	8000b42 <__udivmoddi4+0x2c6>
 8000950:	1a84      	subs	r4, r0, r2
 8000952:	eb61 0303 	sbc.w	r3, r1, r3
 8000956:	2001      	movs	r0, #1
 8000958:	469e      	mov	lr, r3
 800095a:	2d00      	cmp	r5, #0
 800095c:	d0e0      	beq.n	8000920 <__udivmoddi4+0xa4>
 800095e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000962:	e7dd      	b.n	8000920 <__udivmoddi4+0xa4>
 8000964:	b902      	cbnz	r2, 8000968 <__udivmoddi4+0xec>
 8000966:	deff      	udf	#255	; 0xff
 8000968:	fab2 f282 	clz	r2, r2
 800096c:	2a00      	cmp	r2, #0
 800096e:	f040 8092 	bne.w	8000a96 <__udivmoddi4+0x21a>
 8000972:	eba1 010c 	sub.w	r1, r1, ip
 8000976:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800097a:	fa1f fe8c 	uxth.w	lr, ip
 800097e:	2601      	movs	r6, #1
 8000980:	0c20      	lsrs	r0, r4, #16
 8000982:	fbb1 f3f7 	udiv	r3, r1, r7
 8000986:	fb07 1113 	mls	r1, r7, r3, r1
 800098a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800098e:	fb0e f003 	mul.w	r0, lr, r3
 8000992:	4288      	cmp	r0, r1
 8000994:	d908      	bls.n	80009a8 <__udivmoddi4+0x12c>
 8000996:	eb1c 0101 	adds.w	r1, ip, r1
 800099a:	f103 38ff 	add.w	r8, r3, #4294967295
 800099e:	d202      	bcs.n	80009a6 <__udivmoddi4+0x12a>
 80009a0:	4288      	cmp	r0, r1
 80009a2:	f200 80cb 	bhi.w	8000b3c <__udivmoddi4+0x2c0>
 80009a6:	4643      	mov	r3, r8
 80009a8:	1a09      	subs	r1, r1, r0
 80009aa:	b2a4      	uxth	r4, r4
 80009ac:	fbb1 f0f7 	udiv	r0, r1, r7
 80009b0:	fb07 1110 	mls	r1, r7, r0, r1
 80009b4:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80009b8:	fb0e fe00 	mul.w	lr, lr, r0
 80009bc:	45a6      	cmp	lr, r4
 80009be:	d908      	bls.n	80009d2 <__udivmoddi4+0x156>
 80009c0:	eb1c 0404 	adds.w	r4, ip, r4
 80009c4:	f100 31ff 	add.w	r1, r0, #4294967295
 80009c8:	d202      	bcs.n	80009d0 <__udivmoddi4+0x154>
 80009ca:	45a6      	cmp	lr, r4
 80009cc:	f200 80bb 	bhi.w	8000b46 <__udivmoddi4+0x2ca>
 80009d0:	4608      	mov	r0, r1
 80009d2:	eba4 040e 	sub.w	r4, r4, lr
 80009d6:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80009da:	e79c      	b.n	8000916 <__udivmoddi4+0x9a>
 80009dc:	f1c6 0720 	rsb	r7, r6, #32
 80009e0:	40b3      	lsls	r3, r6
 80009e2:	fa22 fc07 	lsr.w	ip, r2, r7
 80009e6:	ea4c 0c03 	orr.w	ip, ip, r3
 80009ea:	fa20 f407 	lsr.w	r4, r0, r7
 80009ee:	fa01 f306 	lsl.w	r3, r1, r6
 80009f2:	431c      	orrs	r4, r3
 80009f4:	40f9      	lsrs	r1, r7
 80009f6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80009fa:	fa00 f306 	lsl.w	r3, r0, r6
 80009fe:	fbb1 f8f9 	udiv	r8, r1, r9
 8000a02:	0c20      	lsrs	r0, r4, #16
 8000a04:	fa1f fe8c 	uxth.w	lr, ip
 8000a08:	fb09 1118 	mls	r1, r9, r8, r1
 8000a0c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000a10:	fb08 f00e 	mul.w	r0, r8, lr
 8000a14:	4288      	cmp	r0, r1
 8000a16:	fa02 f206 	lsl.w	r2, r2, r6
 8000a1a:	d90b      	bls.n	8000a34 <__udivmoddi4+0x1b8>
 8000a1c:	eb1c 0101 	adds.w	r1, ip, r1
 8000a20:	f108 3aff 	add.w	sl, r8, #4294967295
 8000a24:	f080 8088 	bcs.w	8000b38 <__udivmoddi4+0x2bc>
 8000a28:	4288      	cmp	r0, r1
 8000a2a:	f240 8085 	bls.w	8000b38 <__udivmoddi4+0x2bc>
 8000a2e:	f1a8 0802 	sub.w	r8, r8, #2
 8000a32:	4461      	add	r1, ip
 8000a34:	1a09      	subs	r1, r1, r0
 8000a36:	b2a4      	uxth	r4, r4
 8000a38:	fbb1 f0f9 	udiv	r0, r1, r9
 8000a3c:	fb09 1110 	mls	r1, r9, r0, r1
 8000a40:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000a44:	fb00 fe0e 	mul.w	lr, r0, lr
 8000a48:	458e      	cmp	lr, r1
 8000a4a:	d908      	bls.n	8000a5e <__udivmoddi4+0x1e2>
 8000a4c:	eb1c 0101 	adds.w	r1, ip, r1
 8000a50:	f100 34ff 	add.w	r4, r0, #4294967295
 8000a54:	d26c      	bcs.n	8000b30 <__udivmoddi4+0x2b4>
 8000a56:	458e      	cmp	lr, r1
 8000a58:	d96a      	bls.n	8000b30 <__udivmoddi4+0x2b4>
 8000a5a:	3802      	subs	r0, #2
 8000a5c:	4461      	add	r1, ip
 8000a5e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000a62:	fba0 9402 	umull	r9, r4, r0, r2
 8000a66:	eba1 010e 	sub.w	r1, r1, lr
 8000a6a:	42a1      	cmp	r1, r4
 8000a6c:	46c8      	mov	r8, r9
 8000a6e:	46a6      	mov	lr, r4
 8000a70:	d356      	bcc.n	8000b20 <__udivmoddi4+0x2a4>
 8000a72:	d053      	beq.n	8000b1c <__udivmoddi4+0x2a0>
 8000a74:	b15d      	cbz	r5, 8000a8e <__udivmoddi4+0x212>
 8000a76:	ebb3 0208 	subs.w	r2, r3, r8
 8000a7a:	eb61 010e 	sbc.w	r1, r1, lr
 8000a7e:	fa01 f707 	lsl.w	r7, r1, r7
 8000a82:	fa22 f306 	lsr.w	r3, r2, r6
 8000a86:	40f1      	lsrs	r1, r6
 8000a88:	431f      	orrs	r7, r3
 8000a8a:	e9c5 7100 	strd	r7, r1, [r5]
 8000a8e:	2600      	movs	r6, #0
 8000a90:	4631      	mov	r1, r6
 8000a92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a96:	f1c2 0320 	rsb	r3, r2, #32
 8000a9a:	40d8      	lsrs	r0, r3
 8000a9c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000aa0:	fa21 f303 	lsr.w	r3, r1, r3
 8000aa4:	4091      	lsls	r1, r2
 8000aa6:	4301      	orrs	r1, r0
 8000aa8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000aac:	fa1f fe8c 	uxth.w	lr, ip
 8000ab0:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ab4:	fb07 3610 	mls	r6, r7, r0, r3
 8000ab8:	0c0b      	lsrs	r3, r1, #16
 8000aba:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000abe:	fb00 f60e 	mul.w	r6, r0, lr
 8000ac2:	429e      	cmp	r6, r3
 8000ac4:	fa04 f402 	lsl.w	r4, r4, r2
 8000ac8:	d908      	bls.n	8000adc <__udivmoddi4+0x260>
 8000aca:	eb1c 0303 	adds.w	r3, ip, r3
 8000ace:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ad2:	d22f      	bcs.n	8000b34 <__udivmoddi4+0x2b8>
 8000ad4:	429e      	cmp	r6, r3
 8000ad6:	d92d      	bls.n	8000b34 <__udivmoddi4+0x2b8>
 8000ad8:	3802      	subs	r0, #2
 8000ada:	4463      	add	r3, ip
 8000adc:	1b9b      	subs	r3, r3, r6
 8000ade:	b289      	uxth	r1, r1
 8000ae0:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ae4:	fb07 3316 	mls	r3, r7, r6, r3
 8000ae8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000aec:	fb06 f30e 	mul.w	r3, r6, lr
 8000af0:	428b      	cmp	r3, r1
 8000af2:	d908      	bls.n	8000b06 <__udivmoddi4+0x28a>
 8000af4:	eb1c 0101 	adds.w	r1, ip, r1
 8000af8:	f106 38ff 	add.w	r8, r6, #4294967295
 8000afc:	d216      	bcs.n	8000b2c <__udivmoddi4+0x2b0>
 8000afe:	428b      	cmp	r3, r1
 8000b00:	d914      	bls.n	8000b2c <__udivmoddi4+0x2b0>
 8000b02:	3e02      	subs	r6, #2
 8000b04:	4461      	add	r1, ip
 8000b06:	1ac9      	subs	r1, r1, r3
 8000b08:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000b0c:	e738      	b.n	8000980 <__udivmoddi4+0x104>
 8000b0e:	462e      	mov	r6, r5
 8000b10:	4628      	mov	r0, r5
 8000b12:	e705      	b.n	8000920 <__udivmoddi4+0xa4>
 8000b14:	4606      	mov	r6, r0
 8000b16:	e6e3      	b.n	80008e0 <__udivmoddi4+0x64>
 8000b18:	4618      	mov	r0, r3
 8000b1a:	e6f8      	b.n	800090e <__udivmoddi4+0x92>
 8000b1c:	454b      	cmp	r3, r9
 8000b1e:	d2a9      	bcs.n	8000a74 <__udivmoddi4+0x1f8>
 8000b20:	ebb9 0802 	subs.w	r8, r9, r2
 8000b24:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000b28:	3801      	subs	r0, #1
 8000b2a:	e7a3      	b.n	8000a74 <__udivmoddi4+0x1f8>
 8000b2c:	4646      	mov	r6, r8
 8000b2e:	e7ea      	b.n	8000b06 <__udivmoddi4+0x28a>
 8000b30:	4620      	mov	r0, r4
 8000b32:	e794      	b.n	8000a5e <__udivmoddi4+0x1e2>
 8000b34:	4640      	mov	r0, r8
 8000b36:	e7d1      	b.n	8000adc <__udivmoddi4+0x260>
 8000b38:	46d0      	mov	r8, sl
 8000b3a:	e77b      	b.n	8000a34 <__udivmoddi4+0x1b8>
 8000b3c:	3b02      	subs	r3, #2
 8000b3e:	4461      	add	r1, ip
 8000b40:	e732      	b.n	80009a8 <__udivmoddi4+0x12c>
 8000b42:	4630      	mov	r0, r6
 8000b44:	e709      	b.n	800095a <__udivmoddi4+0xde>
 8000b46:	4464      	add	r4, ip
 8000b48:	3802      	subs	r0, #2
 8000b4a:	e742      	b.n	80009d2 <__udivmoddi4+0x156>

08000b4c <__aeabi_idiv0>:
 8000b4c:	4770      	bx	lr
 8000b4e:	bf00      	nop

08000b50 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b54:	f000 fbaa 	bl	80012ac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b58:	f000 f846 	bl	8000be8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b5c:	f000 f924 	bl	8000da8 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000b60:	f000 f8a2 	bl	8000ca8 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000b64:	2100      	movs	r1, #0
 8000b66:	4816      	ldr	r0, [pc, #88]	; (8000bc0 <main+0x70>)
 8000b68:	f001 fbe4 	bl	8002334 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8000b6c:	2104      	movs	r1, #4
 8000b6e:	4814      	ldr	r0, [pc, #80]	; (8000bc0 <main+0x70>)
 8000b70:	f001 fbe0 	bl	8002334 <HAL_TIM_PWM_Start>
  TIM2->CCR1 = 60;
 8000b74:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000b78:	223c      	movs	r2, #60	; 0x3c
 8000b7a:	635a      	str	r2, [r3, #52]	; 0x34
  TIM2->CCR2 = 60;
 8000b7c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000b80:	223c      	movs	r2, #60	; 0x3c
 8000b82:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000b84:	f002 fad2 	bl	800312c <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Servo01 */
  Servo01Handle = osThreadNew(StartServo01, NULL, &Servo01_attributes);
 8000b88:	4a0e      	ldr	r2, [pc, #56]	; (8000bc4 <main+0x74>)
 8000b8a:	2100      	movs	r1, #0
 8000b8c:	480e      	ldr	r0, [pc, #56]	; (8000bc8 <main+0x78>)
 8000b8e:	f002 fb17 	bl	80031c0 <osThreadNew>
 8000b92:	4603      	mov	r3, r0
 8000b94:	4a0d      	ldr	r2, [pc, #52]	; (8000bcc <main+0x7c>)
 8000b96:	6013      	str	r3, [r2, #0]

  /* creation of Servo02 */
  Servo02Handle = osThreadNew(StartServo02, NULL, &Servo02_attributes);
 8000b98:	4a0d      	ldr	r2, [pc, #52]	; (8000bd0 <main+0x80>)
 8000b9a:	2100      	movs	r1, #0
 8000b9c:	480d      	ldr	r0, [pc, #52]	; (8000bd4 <main+0x84>)
 8000b9e:	f002 fb0f 	bl	80031c0 <osThreadNew>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	4a0c      	ldr	r2, [pc, #48]	; (8000bd8 <main+0x88>)
 8000ba6:	6013      	str	r3, [r2, #0]

  /* creation of StopServos */
  StopServosHandle = osThreadNew(StartStopServos, NULL, &StopServos_attributes);
 8000ba8:	4a0c      	ldr	r2, [pc, #48]	; (8000bdc <main+0x8c>)
 8000baa:	2100      	movs	r1, #0
 8000bac:	480c      	ldr	r0, [pc, #48]	; (8000be0 <main+0x90>)
 8000bae:	f002 fb07 	bl	80031c0 <osThreadNew>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	4a0b      	ldr	r2, [pc, #44]	; (8000be4 <main+0x94>)
 8000bb6:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000bb8:	f002 fadc 	bl	8003174 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000bbc:	e7fe      	b.n	8000bbc <main+0x6c>
 8000bbe:	bf00      	nop
 8000bc0:	20000090 	.word	0x20000090
 8000bc4:	08005e64 	.word	0x08005e64
 8000bc8:	08000f11 	.word	0x08000f11
 8000bcc:	200000d8 	.word	0x200000d8
 8000bd0:	08005e88 	.word	0x08005e88
 8000bd4:	08000f49 	.word	0x08000f49
 8000bd8:	200000dc 	.word	0x200000dc
 8000bdc:	08005eac 	.word	0x08005eac
 8000be0:	08000f8d 	.word	0x08000f8d
 8000be4:	200000e0 	.word	0x200000e0

08000be8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b094      	sub	sp, #80	; 0x50
 8000bec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bee:	f107 0320 	add.w	r3, r7, #32
 8000bf2:	2230      	movs	r2, #48	; 0x30
 8000bf4:	2100      	movs	r1, #0
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	f005 f844 	bl	8005c84 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bfc:	f107 030c 	add.w	r3, r7, #12
 8000c00:	2200      	movs	r2, #0
 8000c02:	601a      	str	r2, [r3, #0]
 8000c04:	605a      	str	r2, [r3, #4]
 8000c06:	609a      	str	r2, [r3, #8]
 8000c08:	60da      	str	r2, [r3, #12]
 8000c0a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	60bb      	str	r3, [r7, #8]
 8000c10:	4b23      	ldr	r3, [pc, #140]	; (8000ca0 <SystemClock_Config+0xb8>)
 8000c12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c14:	4a22      	ldr	r2, [pc, #136]	; (8000ca0 <SystemClock_Config+0xb8>)
 8000c16:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c1a:	6413      	str	r3, [r2, #64]	; 0x40
 8000c1c:	4b20      	ldr	r3, [pc, #128]	; (8000ca0 <SystemClock_Config+0xb8>)
 8000c1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c24:	60bb      	str	r3, [r7, #8]
 8000c26:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000c28:	2300      	movs	r3, #0
 8000c2a:	607b      	str	r3, [r7, #4]
 8000c2c:	4b1d      	ldr	r3, [pc, #116]	; (8000ca4 <SystemClock_Config+0xbc>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000c34:	4a1b      	ldr	r2, [pc, #108]	; (8000ca4 <SystemClock_Config+0xbc>)
 8000c36:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000c3a:	6013      	str	r3, [r2, #0]
 8000c3c:	4b19      	ldr	r3, [pc, #100]	; (8000ca4 <SystemClock_Config+0xbc>)
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000c44:	607b      	str	r3, [r7, #4]
 8000c46:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c48:	2302      	movs	r3, #2
 8000c4a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c4c:	2301      	movs	r3, #1
 8000c4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c50:	2310      	movs	r3, #16
 8000c52:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000c54:	2300      	movs	r3, #0
 8000c56:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c58:	f107 0320 	add.w	r3, r7, #32
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	f000 fde7 	bl	8001830 <HAL_RCC_OscConfig>
 8000c62:	4603      	mov	r3, r0
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d001      	beq.n	8000c6c <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000c68:	f000 f9be 	bl	8000fe8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c6c:	230f      	movs	r3, #15
 8000c6e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000c70:	2300      	movs	r3, #0
 8000c72:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c74:	2300      	movs	r3, #0
 8000c76:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000c78:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000c7c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000c82:	f107 030c 	add.w	r3, r7, #12
 8000c86:	2100      	movs	r1, #0
 8000c88:	4618      	mov	r0, r3
 8000c8a:	f001 f849 	bl	8001d20 <HAL_RCC_ClockConfig>
 8000c8e:	4603      	mov	r3, r0
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d001      	beq.n	8000c98 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8000c94:	f000 f9a8 	bl	8000fe8 <Error_Handler>
  }
}
 8000c98:	bf00      	nop
 8000c9a:	3750      	adds	r7, #80	; 0x50
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	bd80      	pop	{r7, pc}
 8000ca0:	40023800 	.word	0x40023800
 8000ca4:	40007000 	.word	0x40007000

08000ca8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b08e      	sub	sp, #56	; 0x38
 8000cac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000cae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	601a      	str	r2, [r3, #0]
 8000cb6:	605a      	str	r2, [r3, #4]
 8000cb8:	609a      	str	r2, [r3, #8]
 8000cba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cbc:	f107 0320 	add.w	r3, r7, #32
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	601a      	str	r2, [r3, #0]
 8000cc4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000cc6:	1d3b      	adds	r3, r7, #4
 8000cc8:	2200      	movs	r2, #0
 8000cca:	601a      	str	r2, [r3, #0]
 8000ccc:	605a      	str	r2, [r3, #4]
 8000cce:	609a      	str	r2, [r3, #8]
 8000cd0:	60da      	str	r2, [r3, #12]
 8000cd2:	611a      	str	r2, [r3, #16]
 8000cd4:	615a      	str	r2, [r3, #20]
 8000cd6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000cd8:	4b32      	ldr	r3, [pc, #200]	; (8000da4 <MX_TIM2_Init+0xfc>)
 8000cda:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000cde:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 64;
 8000ce0:	4b30      	ldr	r3, [pc, #192]	; (8000da4 <MX_TIM2_Init+0xfc>)
 8000ce2:	2240      	movs	r2, #64	; 0x40
 8000ce4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ce6:	4b2f      	ldr	r3, [pc, #188]	; (8000da4 <MX_TIM2_Init+0xfc>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2499;
 8000cec:	4b2d      	ldr	r3, [pc, #180]	; (8000da4 <MX_TIM2_Init+0xfc>)
 8000cee:	f640 12c3 	movw	r2, #2499	; 0x9c3
 8000cf2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cf4:	4b2b      	ldr	r3, [pc, #172]	; (8000da4 <MX_TIM2_Init+0xfc>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cfa:	4b2a      	ldr	r3, [pc, #168]	; (8000da4 <MX_TIM2_Init+0xfc>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000d00:	4828      	ldr	r0, [pc, #160]	; (8000da4 <MX_TIM2_Init+0xfc>)
 8000d02:	f001 fa0b 	bl	800211c <HAL_TIM_Base_Init>
 8000d06:	4603      	mov	r3, r0
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d001      	beq.n	8000d10 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8000d0c:	f000 f96c 	bl	8000fe8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d10:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d14:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000d16:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d1a:	4619      	mov	r1, r3
 8000d1c:	4821      	ldr	r0, [pc, #132]	; (8000da4 <MX_TIM2_Init+0xfc>)
 8000d1e:	f001 fd83 	bl	8002828 <HAL_TIM_ConfigClockSource>
 8000d22:	4603      	mov	r3, r0
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d001      	beq.n	8000d2c <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8000d28:	f000 f95e 	bl	8000fe8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000d2c:	481d      	ldr	r0, [pc, #116]	; (8000da4 <MX_TIM2_Init+0xfc>)
 8000d2e:	f001 faa7 	bl	8002280 <HAL_TIM_PWM_Init>
 8000d32:	4603      	mov	r3, r0
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d001      	beq.n	8000d3c <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8000d38:	f000 f956 	bl	8000fe8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d40:	2300      	movs	r3, #0
 8000d42:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000d44:	f107 0320 	add.w	r3, r7, #32
 8000d48:	4619      	mov	r1, r3
 8000d4a:	4816      	ldr	r0, [pc, #88]	; (8000da4 <MX_TIM2_Init+0xfc>)
 8000d4c:	f002 f928 	bl	8002fa0 <HAL_TIMEx_MasterConfigSynchronization>
 8000d50:	4603      	mov	r3, r0
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d001      	beq.n	8000d5a <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8000d56:	f000 f947 	bl	8000fe8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d5a:	2360      	movs	r3, #96	; 0x60
 8000d5c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d62:	2300      	movs	r3, #0
 8000d64:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d66:	2300      	movs	r3, #0
 8000d68:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d6a:	1d3b      	adds	r3, r7, #4
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	4619      	mov	r1, r3
 8000d70:	480c      	ldr	r0, [pc, #48]	; (8000da4 <MX_TIM2_Init+0xfc>)
 8000d72:	f001 fc97 	bl	80026a4 <HAL_TIM_PWM_ConfigChannel>
 8000d76:	4603      	mov	r3, r0
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d001      	beq.n	8000d80 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8000d7c:	f000 f934 	bl	8000fe8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000d80:	1d3b      	adds	r3, r7, #4
 8000d82:	2204      	movs	r2, #4
 8000d84:	4619      	mov	r1, r3
 8000d86:	4807      	ldr	r0, [pc, #28]	; (8000da4 <MX_TIM2_Init+0xfc>)
 8000d88:	f001 fc8c 	bl	80026a4 <HAL_TIM_PWM_ConfigChannel>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d001      	beq.n	8000d96 <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 8000d92:	f000 f929 	bl	8000fe8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000d96:	4803      	ldr	r0, [pc, #12]	; (8000da4 <MX_TIM2_Init+0xfc>)
 8000d98:	f000 f978 	bl	800108c <HAL_TIM_MspPostInit>

}
 8000d9c:	bf00      	nop
 8000d9e:	3738      	adds	r7, #56	; 0x38
 8000da0:	46bd      	mov	sp, r7
 8000da2:	bd80      	pop	{r7, pc}
 8000da4:	20000090 	.word	0x20000090

08000da8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b088      	sub	sp, #32
 8000dac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dae:	f107 030c 	add.w	r3, r7, #12
 8000db2:	2200      	movs	r2, #0
 8000db4:	601a      	str	r2, [r3, #0]
 8000db6:	605a      	str	r2, [r3, #4]
 8000db8:	609a      	str	r2, [r3, #8]
 8000dba:	60da      	str	r2, [r3, #12]
 8000dbc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	60bb      	str	r3, [r7, #8]
 8000dc2:	4b19      	ldr	r3, [pc, #100]	; (8000e28 <MX_GPIO_Init+0x80>)
 8000dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dc6:	4a18      	ldr	r2, [pc, #96]	; (8000e28 <MX_GPIO_Init+0x80>)
 8000dc8:	f043 0304 	orr.w	r3, r3, #4
 8000dcc:	6313      	str	r3, [r2, #48]	; 0x30
 8000dce:	4b16      	ldr	r3, [pc, #88]	; (8000e28 <MX_GPIO_Init+0x80>)
 8000dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dd2:	f003 0304 	and.w	r3, r3, #4
 8000dd6:	60bb      	str	r3, [r7, #8]
 8000dd8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dda:	2300      	movs	r3, #0
 8000ddc:	607b      	str	r3, [r7, #4]
 8000dde:	4b12      	ldr	r3, [pc, #72]	; (8000e28 <MX_GPIO_Init+0x80>)
 8000de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000de2:	4a11      	ldr	r2, [pc, #68]	; (8000e28 <MX_GPIO_Init+0x80>)
 8000de4:	f043 0301 	orr.w	r3, r3, #1
 8000de8:	6313      	str	r3, [r2, #48]	; 0x30
 8000dea:	4b0f      	ldr	r3, [pc, #60]	; (8000e28 <MX_GPIO_Init+0x80>)
 8000dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dee:	f003 0301 	and.w	r3, r3, #1
 8000df2:	607b      	str	r3, [r7, #4]
 8000df4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000df6:	2200      	movs	r2, #0
 8000df8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000dfc:	480b      	ldr	r0, [pc, #44]	; (8000e2c <MX_GPIO_Init+0x84>)
 8000dfe:	f000 fcfd 	bl	80017fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000e02:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e06:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e08:	2301      	movs	r3, #1
 8000e0a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e10:	2300      	movs	r3, #0
 8000e12:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000e14:	f107 030c 	add.w	r3, r7, #12
 8000e18:	4619      	mov	r1, r3
 8000e1a:	4804      	ldr	r0, [pc, #16]	; (8000e2c <MX_GPIO_Init+0x84>)
 8000e1c:	f000 fb6a 	bl	80014f4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000e20:	bf00      	nop
 8000e22:	3720      	adds	r7, #32
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bd80      	pop	{r7, pc}
 8000e28:	40023800 	.word	0x40023800
 8000e2c:	40020800 	.word	0x40020800

08000e30 <pwm_to_ang>:

/* USER CODE BEGIN 4 */
int funct_aux(){
	return TIM2->CCR1;
}
float pwm_to_ang(int n){
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b082      	sub	sp, #8
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
	if (n == 1){
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	2b01      	cmp	r3, #1
 8000e3c:	d11b      	bne.n	8000e76 <pwm_to_ang+0x46>
		return (180.0/240.0)*((float)TIM2->CCR1 - 60);
 8000e3e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000e42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e44:	ee07 3a90 	vmov	s15, r3
 8000e48:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000e4c:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8000ec4 <pwm_to_ang+0x94>
 8000e50:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000e54:	ee17 0a90 	vmov	r0, s15
 8000e58:	f7ff fc50 	bl	80006fc <__aeabi_f2d>
 8000e5c:	f04f 0200 	mov.w	r2, #0
 8000e60:	4b19      	ldr	r3, [pc, #100]	; (8000ec8 <pwm_to_ang+0x98>)
 8000e62:	f7ff f9bd 	bl	80001e0 <__aeabi_dmul>
 8000e66:	4602      	mov	r2, r0
 8000e68:	460b      	mov	r3, r1
 8000e6a:	4610      	mov	r0, r2
 8000e6c:	4619      	mov	r1, r3
 8000e6e:	f7ff fc9d 	bl	80007ac <__aeabi_d2f>
 8000e72:	4603      	mov	r3, r0
 8000e74:	e01f      	b.n	8000eb6 <pwm_to_ang+0x86>
	}
	if(n == 2){
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	2b02      	cmp	r3, #2
 8000e7a:	d11b      	bne.n	8000eb4 <pwm_to_ang+0x84>
		return (180.0/240.0)*((float)TIM2->CCR2 - 60);
 8000e7c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000e80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000e82:	ee07 3a90 	vmov	s15, r3
 8000e86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000e8a:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8000ec4 <pwm_to_ang+0x94>
 8000e8e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000e92:	ee17 0a90 	vmov	r0, s15
 8000e96:	f7ff fc31 	bl	80006fc <__aeabi_f2d>
 8000e9a:	f04f 0200 	mov.w	r2, #0
 8000e9e:	4b0a      	ldr	r3, [pc, #40]	; (8000ec8 <pwm_to_ang+0x98>)
 8000ea0:	f7ff f99e 	bl	80001e0 <__aeabi_dmul>
 8000ea4:	4602      	mov	r2, r0
 8000ea6:	460b      	mov	r3, r1
 8000ea8:	4610      	mov	r0, r2
 8000eaa:	4619      	mov	r1, r3
 8000eac:	f7ff fc7e 	bl	80007ac <__aeabi_d2f>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	e000      	b.n	8000eb6 <pwm_to_ang+0x86>
	}
	return -1;
 8000eb4:	4b05      	ldr	r3, [pc, #20]	; (8000ecc <pwm_to_ang+0x9c>)
}
 8000eb6:	ee07 3a90 	vmov	s15, r3
 8000eba:	eeb0 0a67 	vmov.f32	s0, s15
 8000ebe:	3708      	adds	r7, #8
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bd80      	pop	{r7, pc}
 8000ec4:	42700000 	.word	0x42700000
 8000ec8:	3fe80000 	.word	0x3fe80000
 8000ecc:	bf800000 	.word	0xbf800000

08000ed0 <move_servo_fw>:
	}
	else if(n == 2){
		TIM2->CCR2 = pwm;
	}
}
void move_servo_fw(int n){
 8000ed0:	b480      	push	{r7}
 8000ed2:	b083      	sub	sp, #12
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
	if (n == 1){
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	2b01      	cmp	r3, #1
 8000edc:	d107      	bne.n	8000eee <move_servo_fw+0x1e>
		TIM2->CCR1 += 1;
 8000ede:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000ee2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ee4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000ee8:	3301      	adds	r3, #1
 8000eea:	6353      	str	r3, [r2, #52]	; 0x34
	}
	else if(n == 2){
		TIM2->CCR2 += 1;
	}
}
 8000eec:	e009      	b.n	8000f02 <move_servo_fw+0x32>
	else if(n == 2){
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	2b02      	cmp	r3, #2
 8000ef2:	d106      	bne.n	8000f02 <move_servo_fw+0x32>
		TIM2->CCR2 += 1;
 8000ef4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000ef8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000efa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000efe:	3301      	adds	r3, #1
 8000f00:	6393      	str	r3, [r2, #56]	; 0x38
}
 8000f02:	bf00      	nop
 8000f04:	370c      	adds	r7, #12
 8000f06:	46bd      	mov	sp, r7
 8000f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0c:	4770      	bx	lr
	...

08000f10 <StartServo01>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartServo01 */
void StartServo01(void *argument)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b082      	sub	sp, #8
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  if (servo_1_stop == 0){
 8000f18:	4b09      	ldr	r3, [pc, #36]	; (8000f40 <StartServo01+0x30>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d10a      	bne.n	8000f36 <StartServo01+0x26>
		  move_servo_fw(1);
 8000f20:	2001      	movs	r0, #1
 8000f22:	f7ff ffd5 	bl	8000ed0 <move_servo_fw>
		  ang[0] = pwm_to_ang(1);
 8000f26:	2001      	movs	r0, #1
 8000f28:	f7ff ff82 	bl	8000e30 <pwm_to_ang>
 8000f2c:	eef0 7a40 	vmov.f32	s15, s0
 8000f30:	4b04      	ldr	r3, [pc, #16]	; (8000f44 <StartServo01+0x34>)
 8000f32:	edc3 7a00 	vstr	s15, [r3]
	  }
	  osDelay(100);
 8000f36:	2064      	movs	r0, #100	; 0x64
 8000f38:	f002 f9d4 	bl	80032e4 <osDelay>
	  if (servo_1_stop == 0){
 8000f3c:	e7ec      	b.n	8000f18 <StartServo01+0x8>
 8000f3e:	bf00      	nop
 8000f40:	200000e4 	.word	0x200000e4
 8000f44:	200000ec 	.word	0x200000ec

08000f48 <StartServo02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartServo02 */
void StartServo02(void *argument)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b082      	sub	sp, #8
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartServo02 */
  /* Infinite loop */
  for(;;)
  {
	  if (servo_1_stop != 0 && servo_2_stop == 0){
 8000f50:	4b0b      	ldr	r3, [pc, #44]	; (8000f80 <StartServo02+0x38>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d00e      	beq.n	8000f76 <StartServo02+0x2e>
 8000f58:	4b0a      	ldr	r3, [pc, #40]	; (8000f84 <StartServo02+0x3c>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d10a      	bne.n	8000f76 <StartServo02+0x2e>
		  move_servo_fw(2);
 8000f60:	2002      	movs	r0, #2
 8000f62:	f7ff ffb5 	bl	8000ed0 <move_servo_fw>
		  ang[1] = pwm_to_ang(2);
 8000f66:	2002      	movs	r0, #2
 8000f68:	f7ff ff62 	bl	8000e30 <pwm_to_ang>
 8000f6c:	eef0 7a40 	vmov.f32	s15, s0
 8000f70:	4b05      	ldr	r3, [pc, #20]	; (8000f88 <StartServo02+0x40>)
 8000f72:	edc3 7a01 	vstr	s15, [r3, #4]
	  }
	  osDelay(100);
 8000f76:	2064      	movs	r0, #100	; 0x64
 8000f78:	f002 f9b4 	bl	80032e4 <osDelay>
	  if (servo_1_stop != 0 && servo_2_stop == 0){
 8000f7c:	e7e8      	b.n	8000f50 <StartServo02+0x8>
 8000f7e:	bf00      	nop
 8000f80:	200000e4 	.word	0x200000e4
 8000f84:	200000e8 	.word	0x200000e8
 8000f88:	200000ec 	.word	0x200000ec

08000f8c <StartStopServos>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartStopServos */
void StartStopServos(void *argument)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b082      	sub	sp, #8
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartStopServos */
  /* Infinite loop */
  for(;;)
  {
	  if(TIM2->CCR1 > 200){
 8000f94:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000f98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f9a:	2bc8      	cmp	r3, #200	; 0xc8
 8000f9c:	d902      	bls.n	8000fa4 <StartStopServos+0x18>
		  servo_1_stop = 1;
 8000f9e:	4b07      	ldr	r3, [pc, #28]	; (8000fbc <StartStopServos+0x30>)
 8000fa0:	2201      	movs	r2, #1
 8000fa2:	601a      	str	r2, [r3, #0]
	  }
	  if(TIM2->CCR2 > 180){
 8000fa4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000fa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000faa:	2bb4      	cmp	r3, #180	; 0xb4
 8000fac:	d902      	bls.n	8000fb4 <StartStopServos+0x28>
	  		servo_2_stop = 1;
 8000fae:	4b04      	ldr	r3, [pc, #16]	; (8000fc0 <StartStopServos+0x34>)
 8000fb0:	2201      	movs	r2, #1
 8000fb2:	601a      	str	r2, [r3, #0]
	  }
	  osDelay(100);
 8000fb4:	2064      	movs	r0, #100	; 0x64
 8000fb6:	f002 f995 	bl	80032e4 <osDelay>
	  if(TIM2->CCR1 > 200){
 8000fba:	e7eb      	b.n	8000f94 <StartStopServos+0x8>
 8000fbc:	200000e4 	.word	0x200000e4
 8000fc0:	200000e8 	.word	0x200000e8

08000fc4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b082      	sub	sp, #8
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5) {
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	4a04      	ldr	r2, [pc, #16]	; (8000fe4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000fd2:	4293      	cmp	r3, r2
 8000fd4:	d101      	bne.n	8000fda <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000fd6:	f000 f98b 	bl	80012f0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000fda:	bf00      	nop
 8000fdc:	3708      	adds	r7, #8
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	40000c00 	.word	0x40000c00

08000fe8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fec:	b672      	cpsid	i
}
 8000fee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ff0:	e7fe      	b.n	8000ff0 <Error_Handler+0x8>
	...

08000ff4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b082      	sub	sp, #8
 8000ff8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	607b      	str	r3, [r7, #4]
 8000ffe:	4b12      	ldr	r3, [pc, #72]	; (8001048 <HAL_MspInit+0x54>)
 8001000:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001002:	4a11      	ldr	r2, [pc, #68]	; (8001048 <HAL_MspInit+0x54>)
 8001004:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001008:	6453      	str	r3, [r2, #68]	; 0x44
 800100a:	4b0f      	ldr	r3, [pc, #60]	; (8001048 <HAL_MspInit+0x54>)
 800100c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800100e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001012:	607b      	str	r3, [r7, #4]
 8001014:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001016:	2300      	movs	r3, #0
 8001018:	603b      	str	r3, [r7, #0]
 800101a:	4b0b      	ldr	r3, [pc, #44]	; (8001048 <HAL_MspInit+0x54>)
 800101c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800101e:	4a0a      	ldr	r2, [pc, #40]	; (8001048 <HAL_MspInit+0x54>)
 8001020:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001024:	6413      	str	r3, [r2, #64]	; 0x40
 8001026:	4b08      	ldr	r3, [pc, #32]	; (8001048 <HAL_MspInit+0x54>)
 8001028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800102a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800102e:	603b      	str	r3, [r7, #0]
 8001030:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001032:	2200      	movs	r2, #0
 8001034:	210f      	movs	r1, #15
 8001036:	f06f 0001 	mvn.w	r0, #1
 800103a:	f000 fa31 	bl	80014a0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800103e:	bf00      	nop
 8001040:	3708      	adds	r7, #8
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	40023800 	.word	0x40023800

0800104c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800104c:	b480      	push	{r7}
 800104e:	b085      	sub	sp, #20
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800105c:	d10d      	bne.n	800107a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800105e:	2300      	movs	r3, #0
 8001060:	60fb      	str	r3, [r7, #12]
 8001062:	4b09      	ldr	r3, [pc, #36]	; (8001088 <HAL_TIM_Base_MspInit+0x3c>)
 8001064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001066:	4a08      	ldr	r2, [pc, #32]	; (8001088 <HAL_TIM_Base_MspInit+0x3c>)
 8001068:	f043 0301 	orr.w	r3, r3, #1
 800106c:	6413      	str	r3, [r2, #64]	; 0x40
 800106e:	4b06      	ldr	r3, [pc, #24]	; (8001088 <HAL_TIM_Base_MspInit+0x3c>)
 8001070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001072:	f003 0301 	and.w	r3, r3, #1
 8001076:	60fb      	str	r3, [r7, #12]
 8001078:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800107a:	bf00      	nop
 800107c:	3714      	adds	r7, #20
 800107e:	46bd      	mov	sp, r7
 8001080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001084:	4770      	bx	lr
 8001086:	bf00      	nop
 8001088:	40023800 	.word	0x40023800

0800108c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b088      	sub	sp, #32
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001094:	f107 030c 	add.w	r3, r7, #12
 8001098:	2200      	movs	r2, #0
 800109a:	601a      	str	r2, [r3, #0]
 800109c:	605a      	str	r2, [r3, #4]
 800109e:	609a      	str	r2, [r3, #8]
 80010a0:	60da      	str	r2, [r3, #12]
 80010a2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80010ac:	d11d      	bne.n	80010ea <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010ae:	2300      	movs	r3, #0
 80010b0:	60bb      	str	r3, [r7, #8]
 80010b2:	4b10      	ldr	r3, [pc, #64]	; (80010f4 <HAL_TIM_MspPostInit+0x68>)
 80010b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010b6:	4a0f      	ldr	r2, [pc, #60]	; (80010f4 <HAL_TIM_MspPostInit+0x68>)
 80010b8:	f043 0301 	orr.w	r3, r3, #1
 80010bc:	6313      	str	r3, [r2, #48]	; 0x30
 80010be:	4b0d      	ldr	r3, [pc, #52]	; (80010f4 <HAL_TIM_MspPostInit+0x68>)
 80010c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010c2:	f003 0301 	and.w	r3, r3, #1
 80010c6:	60bb      	str	r3, [r7, #8]
 80010c8:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80010ca:	2303      	movs	r3, #3
 80010cc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ce:	2302      	movs	r3, #2
 80010d0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d2:	2300      	movs	r3, #0
 80010d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010d6:	2300      	movs	r3, #0
 80010d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80010da:	2301      	movs	r3, #1
 80010dc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010de:	f107 030c 	add.w	r3, r7, #12
 80010e2:	4619      	mov	r1, r3
 80010e4:	4804      	ldr	r0, [pc, #16]	; (80010f8 <HAL_TIM_MspPostInit+0x6c>)
 80010e6:	f000 fa05 	bl	80014f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80010ea:	bf00      	nop
 80010ec:	3720      	adds	r7, #32
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	bf00      	nop
 80010f4:	40023800 	.word	0x40023800
 80010f8:	40020000 	.word	0x40020000

080010fc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b08e      	sub	sp, #56	; 0x38
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001104:	2300      	movs	r3, #0
 8001106:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001108:	2300      	movs	r3, #0
 800110a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 800110c:	2300      	movs	r3, #0
 800110e:	60fb      	str	r3, [r7, #12]
 8001110:	4b33      	ldr	r3, [pc, #204]	; (80011e0 <HAL_InitTick+0xe4>)
 8001112:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001114:	4a32      	ldr	r2, [pc, #200]	; (80011e0 <HAL_InitTick+0xe4>)
 8001116:	f043 0308 	orr.w	r3, r3, #8
 800111a:	6413      	str	r3, [r2, #64]	; 0x40
 800111c:	4b30      	ldr	r3, [pc, #192]	; (80011e0 <HAL_InitTick+0xe4>)
 800111e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001120:	f003 0308 	and.w	r3, r3, #8
 8001124:	60fb      	str	r3, [r7, #12]
 8001126:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001128:	f107 0210 	add.w	r2, r7, #16
 800112c:	f107 0314 	add.w	r3, r7, #20
 8001130:	4611      	mov	r1, r2
 8001132:	4618      	mov	r0, r3
 8001134:	f000 ffc0 	bl	80020b8 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001138:	6a3b      	ldr	r3, [r7, #32]
 800113a:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM5 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800113c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800113e:	2b00      	cmp	r3, #0
 8001140:	d103      	bne.n	800114a <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001142:	f000 ffa5 	bl	8002090 <HAL_RCC_GetPCLK1Freq>
 8001146:	6378      	str	r0, [r7, #52]	; 0x34
 8001148:	e004      	b.n	8001154 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800114a:	f000 ffa1 	bl	8002090 <HAL_RCC_GetPCLK1Freq>
 800114e:	4603      	mov	r3, r0
 8001150:	005b      	lsls	r3, r3, #1
 8001152:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001154:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001156:	4a23      	ldr	r2, [pc, #140]	; (80011e4 <HAL_InitTick+0xe8>)
 8001158:	fba2 2303 	umull	r2, r3, r2, r3
 800115c:	0c9b      	lsrs	r3, r3, #18
 800115e:	3b01      	subs	r3, #1
 8001160:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 8001162:	4b21      	ldr	r3, [pc, #132]	; (80011e8 <HAL_InitTick+0xec>)
 8001164:	4a21      	ldr	r2, [pc, #132]	; (80011ec <HAL_InitTick+0xf0>)
 8001166:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000U / 1000U) - 1U;
 8001168:	4b1f      	ldr	r3, [pc, #124]	; (80011e8 <HAL_InitTick+0xec>)
 800116a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800116e:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 8001170:	4a1d      	ldr	r2, [pc, #116]	; (80011e8 <HAL_InitTick+0xec>)
 8001172:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001174:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 8001176:	4b1c      	ldr	r3, [pc, #112]	; (80011e8 <HAL_InitTick+0xec>)
 8001178:	2200      	movs	r2, #0
 800117a:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800117c:	4b1a      	ldr	r3, [pc, #104]	; (80011e8 <HAL_InitTick+0xec>)
 800117e:	2200      	movs	r2, #0
 8001180:	609a      	str	r2, [r3, #8]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001182:	4b19      	ldr	r3, [pc, #100]	; (80011e8 <HAL_InitTick+0xec>)
 8001184:	2200      	movs	r2, #0
 8001186:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim5);
 8001188:	4817      	ldr	r0, [pc, #92]	; (80011e8 <HAL_InitTick+0xec>)
 800118a:	f000 ffc7 	bl	800211c <HAL_TIM_Base_Init>
 800118e:	4603      	mov	r3, r0
 8001190:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001194:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001198:	2b00      	cmp	r3, #0
 800119a:	d11b      	bne.n	80011d4 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim5);
 800119c:	4812      	ldr	r0, [pc, #72]	; (80011e8 <HAL_InitTick+0xec>)
 800119e:	f001 f80d 	bl	80021bc <HAL_TIM_Base_Start_IT>
 80011a2:	4603      	mov	r3, r0
 80011a4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80011a8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d111      	bne.n	80011d4 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM5 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80011b0:	2032      	movs	r0, #50	; 0x32
 80011b2:	f000 f991 	bl	80014d8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	2b0f      	cmp	r3, #15
 80011ba:	d808      	bhi.n	80011ce <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority, 0U);
 80011bc:	2200      	movs	r2, #0
 80011be:	6879      	ldr	r1, [r7, #4]
 80011c0:	2032      	movs	r0, #50	; 0x32
 80011c2:	f000 f96d 	bl	80014a0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80011c6:	4a0a      	ldr	r2, [pc, #40]	; (80011f0 <HAL_InitTick+0xf4>)
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	6013      	str	r3, [r2, #0]
 80011cc:	e002      	b.n	80011d4 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 80011ce:	2301      	movs	r3, #1
 80011d0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80011d4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80011d8:	4618      	mov	r0, r3
 80011da:	3738      	adds	r7, #56	; 0x38
 80011dc:	46bd      	mov	sp, r7
 80011de:	bd80      	pop	{r7, pc}
 80011e0:	40023800 	.word	0x40023800
 80011e4:	431bde83 	.word	0x431bde83
 80011e8:	200000f4 	.word	0x200000f4
 80011ec:	40000c00 	.word	0x40000c00
 80011f0:	20000004 	.word	0x20000004

080011f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011f4:	b480      	push	{r7}
 80011f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80011f8:	e7fe      	b.n	80011f8 <NMI_Handler+0x4>

080011fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011fa:	b480      	push	{r7}
 80011fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011fe:	e7fe      	b.n	80011fe <HardFault_Handler+0x4>

08001200 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001200:	b480      	push	{r7}
 8001202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001204:	e7fe      	b.n	8001204 <MemManage_Handler+0x4>

08001206 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001206:	b480      	push	{r7}
 8001208:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800120a:	e7fe      	b.n	800120a <BusFault_Handler+0x4>

0800120c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800120c:	b480      	push	{r7}
 800120e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001210:	e7fe      	b.n	8001210 <UsageFault_Handler+0x4>

08001212 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001212:	b480      	push	{r7}
 8001214:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001216:	bf00      	nop
 8001218:	46bd      	mov	sp, r7
 800121a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121e:	4770      	bx	lr

08001220 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8001224:	4802      	ldr	r0, [pc, #8]	; (8001230 <TIM5_IRQHandler+0x10>)
 8001226:	f001 f935 	bl	8002494 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 800122a:	bf00      	nop
 800122c:	bd80      	pop	{r7, pc}
 800122e:	bf00      	nop
 8001230:	200000f4 	.word	0x200000f4

08001234 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001234:	b480      	push	{r7}
 8001236:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001238:	4b06      	ldr	r3, [pc, #24]	; (8001254 <SystemInit+0x20>)
 800123a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800123e:	4a05      	ldr	r2, [pc, #20]	; (8001254 <SystemInit+0x20>)
 8001240:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001244:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001248:	bf00      	nop
 800124a:	46bd      	mov	sp, r7
 800124c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001250:	4770      	bx	lr
 8001252:	bf00      	nop
 8001254:	e000ed00 	.word	0xe000ed00

08001258 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001258:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001290 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800125c:	480d      	ldr	r0, [pc, #52]	; (8001294 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800125e:	490e      	ldr	r1, [pc, #56]	; (8001298 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001260:	4a0e      	ldr	r2, [pc, #56]	; (800129c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001262:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001264:	e002      	b.n	800126c <LoopCopyDataInit>

08001266 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001266:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001268:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800126a:	3304      	adds	r3, #4

0800126c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800126c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800126e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001270:	d3f9      	bcc.n	8001266 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001272:	4a0b      	ldr	r2, [pc, #44]	; (80012a0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001274:	4c0b      	ldr	r4, [pc, #44]	; (80012a4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001276:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001278:	e001      	b.n	800127e <LoopFillZerobss>

0800127a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800127a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800127c:	3204      	adds	r2, #4

0800127e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800127e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001280:	d3fb      	bcc.n	800127a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001282:	f7ff ffd7 	bl	8001234 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001286:	f004 fcc9 	bl	8005c1c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800128a:	f7ff fc61 	bl	8000b50 <main>
  bx  lr    
 800128e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001290:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001294:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001298:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 800129c:	08005f58 	.word	0x08005f58
  ldr r2, =_sbss
 80012a0:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 80012a4:	20004b58 	.word	0x20004b58

080012a8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80012a8:	e7fe      	b.n	80012a8 <ADC_IRQHandler>
	...

080012ac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80012b0:	4b0e      	ldr	r3, [pc, #56]	; (80012ec <HAL_Init+0x40>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	4a0d      	ldr	r2, [pc, #52]	; (80012ec <HAL_Init+0x40>)
 80012b6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80012ba:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80012bc:	4b0b      	ldr	r3, [pc, #44]	; (80012ec <HAL_Init+0x40>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	4a0a      	ldr	r2, [pc, #40]	; (80012ec <HAL_Init+0x40>)
 80012c2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80012c6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012c8:	4b08      	ldr	r3, [pc, #32]	; (80012ec <HAL_Init+0x40>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	4a07      	ldr	r2, [pc, #28]	; (80012ec <HAL_Init+0x40>)
 80012ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012d2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012d4:	2003      	movs	r0, #3
 80012d6:	f000 f8d8 	bl	800148a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012da:	200f      	movs	r0, #15
 80012dc:	f7ff ff0e 	bl	80010fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80012e0:	f7ff fe88 	bl	8000ff4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012e4:	2300      	movs	r3, #0
}
 80012e6:	4618      	mov	r0, r3
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	bf00      	nop
 80012ec:	40023c00 	.word	0x40023c00

080012f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012f0:	b480      	push	{r7}
 80012f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012f4:	4b06      	ldr	r3, [pc, #24]	; (8001310 <HAL_IncTick+0x20>)
 80012f6:	781b      	ldrb	r3, [r3, #0]
 80012f8:	461a      	mov	r2, r3
 80012fa:	4b06      	ldr	r3, [pc, #24]	; (8001314 <HAL_IncTick+0x24>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	4413      	add	r3, r2
 8001300:	4a04      	ldr	r2, [pc, #16]	; (8001314 <HAL_IncTick+0x24>)
 8001302:	6013      	str	r3, [r2, #0]
}
 8001304:	bf00      	nop
 8001306:	46bd      	mov	sp, r7
 8001308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130c:	4770      	bx	lr
 800130e:	bf00      	nop
 8001310:	20000008 	.word	0x20000008
 8001314:	2000013c 	.word	0x2000013c

08001318 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001318:	b480      	push	{r7}
 800131a:	af00      	add	r7, sp, #0
  return uwTick;
 800131c:	4b03      	ldr	r3, [pc, #12]	; (800132c <HAL_GetTick+0x14>)
 800131e:	681b      	ldr	r3, [r3, #0]
}
 8001320:	4618      	mov	r0, r3
 8001322:	46bd      	mov	sp, r7
 8001324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001328:	4770      	bx	lr
 800132a:	bf00      	nop
 800132c:	2000013c 	.word	0x2000013c

08001330 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001330:	b480      	push	{r7}
 8001332:	b085      	sub	sp, #20
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	f003 0307 	and.w	r3, r3, #7
 800133e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001340:	4b0c      	ldr	r3, [pc, #48]	; (8001374 <__NVIC_SetPriorityGrouping+0x44>)
 8001342:	68db      	ldr	r3, [r3, #12]
 8001344:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001346:	68ba      	ldr	r2, [r7, #8]
 8001348:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800134c:	4013      	ands	r3, r2
 800134e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001354:	68bb      	ldr	r3, [r7, #8]
 8001356:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001358:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800135c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001360:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001362:	4a04      	ldr	r2, [pc, #16]	; (8001374 <__NVIC_SetPriorityGrouping+0x44>)
 8001364:	68bb      	ldr	r3, [r7, #8]
 8001366:	60d3      	str	r3, [r2, #12]
}
 8001368:	bf00      	nop
 800136a:	3714      	adds	r7, #20
 800136c:	46bd      	mov	sp, r7
 800136e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001372:	4770      	bx	lr
 8001374:	e000ed00 	.word	0xe000ed00

08001378 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001378:	b480      	push	{r7}
 800137a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800137c:	4b04      	ldr	r3, [pc, #16]	; (8001390 <__NVIC_GetPriorityGrouping+0x18>)
 800137e:	68db      	ldr	r3, [r3, #12]
 8001380:	0a1b      	lsrs	r3, r3, #8
 8001382:	f003 0307 	and.w	r3, r3, #7
}
 8001386:	4618      	mov	r0, r3
 8001388:	46bd      	mov	sp, r7
 800138a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138e:	4770      	bx	lr
 8001390:	e000ed00 	.word	0xe000ed00

08001394 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001394:	b480      	push	{r7}
 8001396:	b083      	sub	sp, #12
 8001398:	af00      	add	r7, sp, #0
 800139a:	4603      	mov	r3, r0
 800139c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800139e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	db0b      	blt.n	80013be <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013a6:	79fb      	ldrb	r3, [r7, #7]
 80013a8:	f003 021f 	and.w	r2, r3, #31
 80013ac:	4907      	ldr	r1, [pc, #28]	; (80013cc <__NVIC_EnableIRQ+0x38>)
 80013ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013b2:	095b      	lsrs	r3, r3, #5
 80013b4:	2001      	movs	r0, #1
 80013b6:	fa00 f202 	lsl.w	r2, r0, r2
 80013ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80013be:	bf00      	nop
 80013c0:	370c      	adds	r7, #12
 80013c2:	46bd      	mov	sp, r7
 80013c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c8:	4770      	bx	lr
 80013ca:	bf00      	nop
 80013cc:	e000e100 	.word	0xe000e100

080013d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013d0:	b480      	push	{r7}
 80013d2:	b083      	sub	sp, #12
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	4603      	mov	r3, r0
 80013d8:	6039      	str	r1, [r7, #0]
 80013da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	db0a      	blt.n	80013fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	b2da      	uxtb	r2, r3
 80013e8:	490c      	ldr	r1, [pc, #48]	; (800141c <__NVIC_SetPriority+0x4c>)
 80013ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ee:	0112      	lsls	r2, r2, #4
 80013f0:	b2d2      	uxtb	r2, r2
 80013f2:	440b      	add	r3, r1
 80013f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013f8:	e00a      	b.n	8001410 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013fa:	683b      	ldr	r3, [r7, #0]
 80013fc:	b2da      	uxtb	r2, r3
 80013fe:	4908      	ldr	r1, [pc, #32]	; (8001420 <__NVIC_SetPriority+0x50>)
 8001400:	79fb      	ldrb	r3, [r7, #7]
 8001402:	f003 030f 	and.w	r3, r3, #15
 8001406:	3b04      	subs	r3, #4
 8001408:	0112      	lsls	r2, r2, #4
 800140a:	b2d2      	uxtb	r2, r2
 800140c:	440b      	add	r3, r1
 800140e:	761a      	strb	r2, [r3, #24]
}
 8001410:	bf00      	nop
 8001412:	370c      	adds	r7, #12
 8001414:	46bd      	mov	sp, r7
 8001416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141a:	4770      	bx	lr
 800141c:	e000e100 	.word	0xe000e100
 8001420:	e000ed00 	.word	0xe000ed00

08001424 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001424:	b480      	push	{r7}
 8001426:	b089      	sub	sp, #36	; 0x24
 8001428:	af00      	add	r7, sp, #0
 800142a:	60f8      	str	r0, [r7, #12]
 800142c:	60b9      	str	r1, [r7, #8]
 800142e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	f003 0307 	and.w	r3, r3, #7
 8001436:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001438:	69fb      	ldr	r3, [r7, #28]
 800143a:	f1c3 0307 	rsb	r3, r3, #7
 800143e:	2b04      	cmp	r3, #4
 8001440:	bf28      	it	cs
 8001442:	2304      	movcs	r3, #4
 8001444:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001446:	69fb      	ldr	r3, [r7, #28]
 8001448:	3304      	adds	r3, #4
 800144a:	2b06      	cmp	r3, #6
 800144c:	d902      	bls.n	8001454 <NVIC_EncodePriority+0x30>
 800144e:	69fb      	ldr	r3, [r7, #28]
 8001450:	3b03      	subs	r3, #3
 8001452:	e000      	b.n	8001456 <NVIC_EncodePriority+0x32>
 8001454:	2300      	movs	r3, #0
 8001456:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001458:	f04f 32ff 	mov.w	r2, #4294967295
 800145c:	69bb      	ldr	r3, [r7, #24]
 800145e:	fa02 f303 	lsl.w	r3, r2, r3
 8001462:	43da      	mvns	r2, r3
 8001464:	68bb      	ldr	r3, [r7, #8]
 8001466:	401a      	ands	r2, r3
 8001468:	697b      	ldr	r3, [r7, #20]
 800146a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800146c:	f04f 31ff 	mov.w	r1, #4294967295
 8001470:	697b      	ldr	r3, [r7, #20]
 8001472:	fa01 f303 	lsl.w	r3, r1, r3
 8001476:	43d9      	mvns	r1, r3
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800147c:	4313      	orrs	r3, r2
         );
}
 800147e:	4618      	mov	r0, r3
 8001480:	3724      	adds	r7, #36	; 0x24
 8001482:	46bd      	mov	sp, r7
 8001484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001488:	4770      	bx	lr

0800148a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800148a:	b580      	push	{r7, lr}
 800148c:	b082      	sub	sp, #8
 800148e:	af00      	add	r7, sp, #0
 8001490:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001492:	6878      	ldr	r0, [r7, #4]
 8001494:	f7ff ff4c 	bl	8001330 <__NVIC_SetPriorityGrouping>
}
 8001498:	bf00      	nop
 800149a:	3708      	adds	r7, #8
 800149c:	46bd      	mov	sp, r7
 800149e:	bd80      	pop	{r7, pc}

080014a0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b086      	sub	sp, #24
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	4603      	mov	r3, r0
 80014a8:	60b9      	str	r1, [r7, #8]
 80014aa:	607a      	str	r2, [r7, #4]
 80014ac:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80014ae:	2300      	movs	r3, #0
 80014b0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80014b2:	f7ff ff61 	bl	8001378 <__NVIC_GetPriorityGrouping>
 80014b6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014b8:	687a      	ldr	r2, [r7, #4]
 80014ba:	68b9      	ldr	r1, [r7, #8]
 80014bc:	6978      	ldr	r0, [r7, #20]
 80014be:	f7ff ffb1 	bl	8001424 <NVIC_EncodePriority>
 80014c2:	4602      	mov	r2, r0
 80014c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014c8:	4611      	mov	r1, r2
 80014ca:	4618      	mov	r0, r3
 80014cc:	f7ff ff80 	bl	80013d0 <__NVIC_SetPriority>
}
 80014d0:	bf00      	nop
 80014d2:	3718      	adds	r7, #24
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bd80      	pop	{r7, pc}

080014d8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b082      	sub	sp, #8
 80014dc:	af00      	add	r7, sp, #0
 80014de:	4603      	mov	r3, r0
 80014e0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014e6:	4618      	mov	r0, r3
 80014e8:	f7ff ff54 	bl	8001394 <__NVIC_EnableIRQ>
}
 80014ec:	bf00      	nop
 80014ee:	3708      	adds	r7, #8
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bd80      	pop	{r7, pc}

080014f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014f4:	b480      	push	{r7}
 80014f6:	b089      	sub	sp, #36	; 0x24
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
 80014fc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80014fe:	2300      	movs	r3, #0
 8001500:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001502:	2300      	movs	r3, #0
 8001504:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001506:	2300      	movs	r3, #0
 8001508:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800150a:	2300      	movs	r3, #0
 800150c:	61fb      	str	r3, [r7, #28]
 800150e:	e159      	b.n	80017c4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001510:	2201      	movs	r2, #1
 8001512:	69fb      	ldr	r3, [r7, #28]
 8001514:	fa02 f303 	lsl.w	r3, r2, r3
 8001518:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	697a      	ldr	r2, [r7, #20]
 8001520:	4013      	ands	r3, r2
 8001522:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001524:	693a      	ldr	r2, [r7, #16]
 8001526:	697b      	ldr	r3, [r7, #20]
 8001528:	429a      	cmp	r2, r3
 800152a:	f040 8148 	bne.w	80017be <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800152e:	683b      	ldr	r3, [r7, #0]
 8001530:	685b      	ldr	r3, [r3, #4]
 8001532:	f003 0303 	and.w	r3, r3, #3
 8001536:	2b01      	cmp	r3, #1
 8001538:	d005      	beq.n	8001546 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	685b      	ldr	r3, [r3, #4]
 800153e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001542:	2b02      	cmp	r3, #2
 8001544:	d130      	bne.n	80015a8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	689b      	ldr	r3, [r3, #8]
 800154a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800154c:	69fb      	ldr	r3, [r7, #28]
 800154e:	005b      	lsls	r3, r3, #1
 8001550:	2203      	movs	r2, #3
 8001552:	fa02 f303 	lsl.w	r3, r2, r3
 8001556:	43db      	mvns	r3, r3
 8001558:	69ba      	ldr	r2, [r7, #24]
 800155a:	4013      	ands	r3, r2
 800155c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800155e:	683b      	ldr	r3, [r7, #0]
 8001560:	68da      	ldr	r2, [r3, #12]
 8001562:	69fb      	ldr	r3, [r7, #28]
 8001564:	005b      	lsls	r3, r3, #1
 8001566:	fa02 f303 	lsl.w	r3, r2, r3
 800156a:	69ba      	ldr	r2, [r7, #24]
 800156c:	4313      	orrs	r3, r2
 800156e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	69ba      	ldr	r2, [r7, #24]
 8001574:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	685b      	ldr	r3, [r3, #4]
 800157a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800157c:	2201      	movs	r2, #1
 800157e:	69fb      	ldr	r3, [r7, #28]
 8001580:	fa02 f303 	lsl.w	r3, r2, r3
 8001584:	43db      	mvns	r3, r3
 8001586:	69ba      	ldr	r2, [r7, #24]
 8001588:	4013      	ands	r3, r2
 800158a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	685b      	ldr	r3, [r3, #4]
 8001590:	091b      	lsrs	r3, r3, #4
 8001592:	f003 0201 	and.w	r2, r3, #1
 8001596:	69fb      	ldr	r3, [r7, #28]
 8001598:	fa02 f303 	lsl.w	r3, r2, r3
 800159c:	69ba      	ldr	r2, [r7, #24]
 800159e:	4313      	orrs	r3, r2
 80015a0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	69ba      	ldr	r2, [r7, #24]
 80015a6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	685b      	ldr	r3, [r3, #4]
 80015ac:	f003 0303 	and.w	r3, r3, #3
 80015b0:	2b03      	cmp	r3, #3
 80015b2:	d017      	beq.n	80015e4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	68db      	ldr	r3, [r3, #12]
 80015b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80015ba:	69fb      	ldr	r3, [r7, #28]
 80015bc:	005b      	lsls	r3, r3, #1
 80015be:	2203      	movs	r2, #3
 80015c0:	fa02 f303 	lsl.w	r3, r2, r3
 80015c4:	43db      	mvns	r3, r3
 80015c6:	69ba      	ldr	r2, [r7, #24]
 80015c8:	4013      	ands	r3, r2
 80015ca:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	689a      	ldr	r2, [r3, #8]
 80015d0:	69fb      	ldr	r3, [r7, #28]
 80015d2:	005b      	lsls	r3, r3, #1
 80015d4:	fa02 f303 	lsl.w	r3, r2, r3
 80015d8:	69ba      	ldr	r2, [r7, #24]
 80015da:	4313      	orrs	r3, r2
 80015dc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	69ba      	ldr	r2, [r7, #24]
 80015e2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	685b      	ldr	r3, [r3, #4]
 80015e8:	f003 0303 	and.w	r3, r3, #3
 80015ec:	2b02      	cmp	r3, #2
 80015ee:	d123      	bne.n	8001638 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80015f0:	69fb      	ldr	r3, [r7, #28]
 80015f2:	08da      	lsrs	r2, r3, #3
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	3208      	adds	r2, #8
 80015f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80015fe:	69fb      	ldr	r3, [r7, #28]
 8001600:	f003 0307 	and.w	r3, r3, #7
 8001604:	009b      	lsls	r3, r3, #2
 8001606:	220f      	movs	r2, #15
 8001608:	fa02 f303 	lsl.w	r3, r2, r3
 800160c:	43db      	mvns	r3, r3
 800160e:	69ba      	ldr	r2, [r7, #24]
 8001610:	4013      	ands	r3, r2
 8001612:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	691a      	ldr	r2, [r3, #16]
 8001618:	69fb      	ldr	r3, [r7, #28]
 800161a:	f003 0307 	and.w	r3, r3, #7
 800161e:	009b      	lsls	r3, r3, #2
 8001620:	fa02 f303 	lsl.w	r3, r2, r3
 8001624:	69ba      	ldr	r2, [r7, #24]
 8001626:	4313      	orrs	r3, r2
 8001628:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800162a:	69fb      	ldr	r3, [r7, #28]
 800162c:	08da      	lsrs	r2, r3, #3
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	3208      	adds	r2, #8
 8001632:	69b9      	ldr	r1, [r7, #24]
 8001634:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800163e:	69fb      	ldr	r3, [r7, #28]
 8001640:	005b      	lsls	r3, r3, #1
 8001642:	2203      	movs	r2, #3
 8001644:	fa02 f303 	lsl.w	r3, r2, r3
 8001648:	43db      	mvns	r3, r3
 800164a:	69ba      	ldr	r2, [r7, #24]
 800164c:	4013      	ands	r3, r2
 800164e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001650:	683b      	ldr	r3, [r7, #0]
 8001652:	685b      	ldr	r3, [r3, #4]
 8001654:	f003 0203 	and.w	r2, r3, #3
 8001658:	69fb      	ldr	r3, [r7, #28]
 800165a:	005b      	lsls	r3, r3, #1
 800165c:	fa02 f303 	lsl.w	r3, r2, r3
 8001660:	69ba      	ldr	r2, [r7, #24]
 8001662:	4313      	orrs	r3, r2
 8001664:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	69ba      	ldr	r2, [r7, #24]
 800166a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	685b      	ldr	r3, [r3, #4]
 8001670:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001674:	2b00      	cmp	r3, #0
 8001676:	f000 80a2 	beq.w	80017be <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800167a:	2300      	movs	r3, #0
 800167c:	60fb      	str	r3, [r7, #12]
 800167e:	4b57      	ldr	r3, [pc, #348]	; (80017dc <HAL_GPIO_Init+0x2e8>)
 8001680:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001682:	4a56      	ldr	r2, [pc, #344]	; (80017dc <HAL_GPIO_Init+0x2e8>)
 8001684:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001688:	6453      	str	r3, [r2, #68]	; 0x44
 800168a:	4b54      	ldr	r3, [pc, #336]	; (80017dc <HAL_GPIO_Init+0x2e8>)
 800168c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800168e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001692:	60fb      	str	r3, [r7, #12]
 8001694:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001696:	4a52      	ldr	r2, [pc, #328]	; (80017e0 <HAL_GPIO_Init+0x2ec>)
 8001698:	69fb      	ldr	r3, [r7, #28]
 800169a:	089b      	lsrs	r3, r3, #2
 800169c:	3302      	adds	r3, #2
 800169e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80016a4:	69fb      	ldr	r3, [r7, #28]
 80016a6:	f003 0303 	and.w	r3, r3, #3
 80016aa:	009b      	lsls	r3, r3, #2
 80016ac:	220f      	movs	r2, #15
 80016ae:	fa02 f303 	lsl.w	r3, r2, r3
 80016b2:	43db      	mvns	r3, r3
 80016b4:	69ba      	ldr	r2, [r7, #24]
 80016b6:	4013      	ands	r3, r2
 80016b8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	4a49      	ldr	r2, [pc, #292]	; (80017e4 <HAL_GPIO_Init+0x2f0>)
 80016be:	4293      	cmp	r3, r2
 80016c0:	d019      	beq.n	80016f6 <HAL_GPIO_Init+0x202>
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	4a48      	ldr	r2, [pc, #288]	; (80017e8 <HAL_GPIO_Init+0x2f4>)
 80016c6:	4293      	cmp	r3, r2
 80016c8:	d013      	beq.n	80016f2 <HAL_GPIO_Init+0x1fe>
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	4a47      	ldr	r2, [pc, #284]	; (80017ec <HAL_GPIO_Init+0x2f8>)
 80016ce:	4293      	cmp	r3, r2
 80016d0:	d00d      	beq.n	80016ee <HAL_GPIO_Init+0x1fa>
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	4a46      	ldr	r2, [pc, #280]	; (80017f0 <HAL_GPIO_Init+0x2fc>)
 80016d6:	4293      	cmp	r3, r2
 80016d8:	d007      	beq.n	80016ea <HAL_GPIO_Init+0x1f6>
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	4a45      	ldr	r2, [pc, #276]	; (80017f4 <HAL_GPIO_Init+0x300>)
 80016de:	4293      	cmp	r3, r2
 80016e0:	d101      	bne.n	80016e6 <HAL_GPIO_Init+0x1f2>
 80016e2:	2304      	movs	r3, #4
 80016e4:	e008      	b.n	80016f8 <HAL_GPIO_Init+0x204>
 80016e6:	2307      	movs	r3, #7
 80016e8:	e006      	b.n	80016f8 <HAL_GPIO_Init+0x204>
 80016ea:	2303      	movs	r3, #3
 80016ec:	e004      	b.n	80016f8 <HAL_GPIO_Init+0x204>
 80016ee:	2302      	movs	r3, #2
 80016f0:	e002      	b.n	80016f8 <HAL_GPIO_Init+0x204>
 80016f2:	2301      	movs	r3, #1
 80016f4:	e000      	b.n	80016f8 <HAL_GPIO_Init+0x204>
 80016f6:	2300      	movs	r3, #0
 80016f8:	69fa      	ldr	r2, [r7, #28]
 80016fa:	f002 0203 	and.w	r2, r2, #3
 80016fe:	0092      	lsls	r2, r2, #2
 8001700:	4093      	lsls	r3, r2
 8001702:	69ba      	ldr	r2, [r7, #24]
 8001704:	4313      	orrs	r3, r2
 8001706:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001708:	4935      	ldr	r1, [pc, #212]	; (80017e0 <HAL_GPIO_Init+0x2ec>)
 800170a:	69fb      	ldr	r3, [r7, #28]
 800170c:	089b      	lsrs	r3, r3, #2
 800170e:	3302      	adds	r3, #2
 8001710:	69ba      	ldr	r2, [r7, #24]
 8001712:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001716:	4b38      	ldr	r3, [pc, #224]	; (80017f8 <HAL_GPIO_Init+0x304>)
 8001718:	689b      	ldr	r3, [r3, #8]
 800171a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800171c:	693b      	ldr	r3, [r7, #16]
 800171e:	43db      	mvns	r3, r3
 8001720:	69ba      	ldr	r2, [r7, #24]
 8001722:	4013      	ands	r3, r2
 8001724:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001726:	683b      	ldr	r3, [r7, #0]
 8001728:	685b      	ldr	r3, [r3, #4]
 800172a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800172e:	2b00      	cmp	r3, #0
 8001730:	d003      	beq.n	800173a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001732:	69ba      	ldr	r2, [r7, #24]
 8001734:	693b      	ldr	r3, [r7, #16]
 8001736:	4313      	orrs	r3, r2
 8001738:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800173a:	4a2f      	ldr	r2, [pc, #188]	; (80017f8 <HAL_GPIO_Init+0x304>)
 800173c:	69bb      	ldr	r3, [r7, #24]
 800173e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001740:	4b2d      	ldr	r3, [pc, #180]	; (80017f8 <HAL_GPIO_Init+0x304>)
 8001742:	68db      	ldr	r3, [r3, #12]
 8001744:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001746:	693b      	ldr	r3, [r7, #16]
 8001748:	43db      	mvns	r3, r3
 800174a:	69ba      	ldr	r2, [r7, #24]
 800174c:	4013      	ands	r3, r2
 800174e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	685b      	ldr	r3, [r3, #4]
 8001754:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001758:	2b00      	cmp	r3, #0
 800175a:	d003      	beq.n	8001764 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800175c:	69ba      	ldr	r2, [r7, #24]
 800175e:	693b      	ldr	r3, [r7, #16]
 8001760:	4313      	orrs	r3, r2
 8001762:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001764:	4a24      	ldr	r2, [pc, #144]	; (80017f8 <HAL_GPIO_Init+0x304>)
 8001766:	69bb      	ldr	r3, [r7, #24]
 8001768:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800176a:	4b23      	ldr	r3, [pc, #140]	; (80017f8 <HAL_GPIO_Init+0x304>)
 800176c:	685b      	ldr	r3, [r3, #4]
 800176e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001770:	693b      	ldr	r3, [r7, #16]
 8001772:	43db      	mvns	r3, r3
 8001774:	69ba      	ldr	r2, [r7, #24]
 8001776:	4013      	ands	r3, r2
 8001778:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800177a:	683b      	ldr	r3, [r7, #0]
 800177c:	685b      	ldr	r3, [r3, #4]
 800177e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001782:	2b00      	cmp	r3, #0
 8001784:	d003      	beq.n	800178e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001786:	69ba      	ldr	r2, [r7, #24]
 8001788:	693b      	ldr	r3, [r7, #16]
 800178a:	4313      	orrs	r3, r2
 800178c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800178e:	4a1a      	ldr	r2, [pc, #104]	; (80017f8 <HAL_GPIO_Init+0x304>)
 8001790:	69bb      	ldr	r3, [r7, #24]
 8001792:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001794:	4b18      	ldr	r3, [pc, #96]	; (80017f8 <HAL_GPIO_Init+0x304>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800179a:	693b      	ldr	r3, [r7, #16]
 800179c:	43db      	mvns	r3, r3
 800179e:	69ba      	ldr	r2, [r7, #24]
 80017a0:	4013      	ands	r3, r2
 80017a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	685b      	ldr	r3, [r3, #4]
 80017a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d003      	beq.n	80017b8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80017b0:	69ba      	ldr	r2, [r7, #24]
 80017b2:	693b      	ldr	r3, [r7, #16]
 80017b4:	4313      	orrs	r3, r2
 80017b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80017b8:	4a0f      	ldr	r2, [pc, #60]	; (80017f8 <HAL_GPIO_Init+0x304>)
 80017ba:	69bb      	ldr	r3, [r7, #24]
 80017bc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80017be:	69fb      	ldr	r3, [r7, #28]
 80017c0:	3301      	adds	r3, #1
 80017c2:	61fb      	str	r3, [r7, #28]
 80017c4:	69fb      	ldr	r3, [r7, #28]
 80017c6:	2b0f      	cmp	r3, #15
 80017c8:	f67f aea2 	bls.w	8001510 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80017cc:	bf00      	nop
 80017ce:	bf00      	nop
 80017d0:	3724      	adds	r7, #36	; 0x24
 80017d2:	46bd      	mov	sp, r7
 80017d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d8:	4770      	bx	lr
 80017da:	bf00      	nop
 80017dc:	40023800 	.word	0x40023800
 80017e0:	40013800 	.word	0x40013800
 80017e4:	40020000 	.word	0x40020000
 80017e8:	40020400 	.word	0x40020400
 80017ec:	40020800 	.word	0x40020800
 80017f0:	40020c00 	.word	0x40020c00
 80017f4:	40021000 	.word	0x40021000
 80017f8:	40013c00 	.word	0x40013c00

080017fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80017fc:	b480      	push	{r7}
 80017fe:	b083      	sub	sp, #12
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
 8001804:	460b      	mov	r3, r1
 8001806:	807b      	strh	r3, [r7, #2]
 8001808:	4613      	mov	r3, r2
 800180a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800180c:	787b      	ldrb	r3, [r7, #1]
 800180e:	2b00      	cmp	r3, #0
 8001810:	d003      	beq.n	800181a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001812:	887a      	ldrh	r2, [r7, #2]
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001818:	e003      	b.n	8001822 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800181a:	887b      	ldrh	r3, [r7, #2]
 800181c:	041a      	lsls	r2, r3, #16
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	619a      	str	r2, [r3, #24]
}
 8001822:	bf00      	nop
 8001824:	370c      	adds	r7, #12
 8001826:	46bd      	mov	sp, r7
 8001828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182c:	4770      	bx	lr
	...

08001830 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b086      	sub	sp, #24
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	2b00      	cmp	r3, #0
 800183c:	d101      	bne.n	8001842 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800183e:	2301      	movs	r3, #1
 8001840:	e267      	b.n	8001d12 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f003 0301 	and.w	r3, r3, #1
 800184a:	2b00      	cmp	r3, #0
 800184c:	d075      	beq.n	800193a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800184e:	4b88      	ldr	r3, [pc, #544]	; (8001a70 <HAL_RCC_OscConfig+0x240>)
 8001850:	689b      	ldr	r3, [r3, #8]
 8001852:	f003 030c 	and.w	r3, r3, #12
 8001856:	2b04      	cmp	r3, #4
 8001858:	d00c      	beq.n	8001874 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800185a:	4b85      	ldr	r3, [pc, #532]	; (8001a70 <HAL_RCC_OscConfig+0x240>)
 800185c:	689b      	ldr	r3, [r3, #8]
 800185e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001862:	2b08      	cmp	r3, #8
 8001864:	d112      	bne.n	800188c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001866:	4b82      	ldr	r3, [pc, #520]	; (8001a70 <HAL_RCC_OscConfig+0x240>)
 8001868:	685b      	ldr	r3, [r3, #4]
 800186a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800186e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001872:	d10b      	bne.n	800188c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001874:	4b7e      	ldr	r3, [pc, #504]	; (8001a70 <HAL_RCC_OscConfig+0x240>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800187c:	2b00      	cmp	r3, #0
 800187e:	d05b      	beq.n	8001938 <HAL_RCC_OscConfig+0x108>
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	685b      	ldr	r3, [r3, #4]
 8001884:	2b00      	cmp	r3, #0
 8001886:	d157      	bne.n	8001938 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001888:	2301      	movs	r3, #1
 800188a:	e242      	b.n	8001d12 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	685b      	ldr	r3, [r3, #4]
 8001890:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001894:	d106      	bne.n	80018a4 <HAL_RCC_OscConfig+0x74>
 8001896:	4b76      	ldr	r3, [pc, #472]	; (8001a70 <HAL_RCC_OscConfig+0x240>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	4a75      	ldr	r2, [pc, #468]	; (8001a70 <HAL_RCC_OscConfig+0x240>)
 800189c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018a0:	6013      	str	r3, [r2, #0]
 80018a2:	e01d      	b.n	80018e0 <HAL_RCC_OscConfig+0xb0>
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	685b      	ldr	r3, [r3, #4]
 80018a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80018ac:	d10c      	bne.n	80018c8 <HAL_RCC_OscConfig+0x98>
 80018ae:	4b70      	ldr	r3, [pc, #448]	; (8001a70 <HAL_RCC_OscConfig+0x240>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	4a6f      	ldr	r2, [pc, #444]	; (8001a70 <HAL_RCC_OscConfig+0x240>)
 80018b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018b8:	6013      	str	r3, [r2, #0]
 80018ba:	4b6d      	ldr	r3, [pc, #436]	; (8001a70 <HAL_RCC_OscConfig+0x240>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	4a6c      	ldr	r2, [pc, #432]	; (8001a70 <HAL_RCC_OscConfig+0x240>)
 80018c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018c4:	6013      	str	r3, [r2, #0]
 80018c6:	e00b      	b.n	80018e0 <HAL_RCC_OscConfig+0xb0>
 80018c8:	4b69      	ldr	r3, [pc, #420]	; (8001a70 <HAL_RCC_OscConfig+0x240>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	4a68      	ldr	r2, [pc, #416]	; (8001a70 <HAL_RCC_OscConfig+0x240>)
 80018ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018d2:	6013      	str	r3, [r2, #0]
 80018d4:	4b66      	ldr	r3, [pc, #408]	; (8001a70 <HAL_RCC_OscConfig+0x240>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	4a65      	ldr	r2, [pc, #404]	; (8001a70 <HAL_RCC_OscConfig+0x240>)
 80018da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	685b      	ldr	r3, [r3, #4]
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d013      	beq.n	8001910 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018e8:	f7ff fd16 	bl	8001318 <HAL_GetTick>
 80018ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018ee:	e008      	b.n	8001902 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80018f0:	f7ff fd12 	bl	8001318 <HAL_GetTick>
 80018f4:	4602      	mov	r2, r0
 80018f6:	693b      	ldr	r3, [r7, #16]
 80018f8:	1ad3      	subs	r3, r2, r3
 80018fa:	2b64      	cmp	r3, #100	; 0x64
 80018fc:	d901      	bls.n	8001902 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80018fe:	2303      	movs	r3, #3
 8001900:	e207      	b.n	8001d12 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001902:	4b5b      	ldr	r3, [pc, #364]	; (8001a70 <HAL_RCC_OscConfig+0x240>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800190a:	2b00      	cmp	r3, #0
 800190c:	d0f0      	beq.n	80018f0 <HAL_RCC_OscConfig+0xc0>
 800190e:	e014      	b.n	800193a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001910:	f7ff fd02 	bl	8001318 <HAL_GetTick>
 8001914:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001916:	e008      	b.n	800192a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001918:	f7ff fcfe 	bl	8001318 <HAL_GetTick>
 800191c:	4602      	mov	r2, r0
 800191e:	693b      	ldr	r3, [r7, #16]
 8001920:	1ad3      	subs	r3, r2, r3
 8001922:	2b64      	cmp	r3, #100	; 0x64
 8001924:	d901      	bls.n	800192a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001926:	2303      	movs	r3, #3
 8001928:	e1f3      	b.n	8001d12 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800192a:	4b51      	ldr	r3, [pc, #324]	; (8001a70 <HAL_RCC_OscConfig+0x240>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001932:	2b00      	cmp	r3, #0
 8001934:	d1f0      	bne.n	8001918 <HAL_RCC_OscConfig+0xe8>
 8001936:	e000      	b.n	800193a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001938:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f003 0302 	and.w	r3, r3, #2
 8001942:	2b00      	cmp	r3, #0
 8001944:	d063      	beq.n	8001a0e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001946:	4b4a      	ldr	r3, [pc, #296]	; (8001a70 <HAL_RCC_OscConfig+0x240>)
 8001948:	689b      	ldr	r3, [r3, #8]
 800194a:	f003 030c 	and.w	r3, r3, #12
 800194e:	2b00      	cmp	r3, #0
 8001950:	d00b      	beq.n	800196a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001952:	4b47      	ldr	r3, [pc, #284]	; (8001a70 <HAL_RCC_OscConfig+0x240>)
 8001954:	689b      	ldr	r3, [r3, #8]
 8001956:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800195a:	2b08      	cmp	r3, #8
 800195c:	d11c      	bne.n	8001998 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800195e:	4b44      	ldr	r3, [pc, #272]	; (8001a70 <HAL_RCC_OscConfig+0x240>)
 8001960:	685b      	ldr	r3, [r3, #4]
 8001962:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001966:	2b00      	cmp	r3, #0
 8001968:	d116      	bne.n	8001998 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800196a:	4b41      	ldr	r3, [pc, #260]	; (8001a70 <HAL_RCC_OscConfig+0x240>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f003 0302 	and.w	r3, r3, #2
 8001972:	2b00      	cmp	r3, #0
 8001974:	d005      	beq.n	8001982 <HAL_RCC_OscConfig+0x152>
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	68db      	ldr	r3, [r3, #12]
 800197a:	2b01      	cmp	r3, #1
 800197c:	d001      	beq.n	8001982 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800197e:	2301      	movs	r3, #1
 8001980:	e1c7      	b.n	8001d12 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001982:	4b3b      	ldr	r3, [pc, #236]	; (8001a70 <HAL_RCC_OscConfig+0x240>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	691b      	ldr	r3, [r3, #16]
 800198e:	00db      	lsls	r3, r3, #3
 8001990:	4937      	ldr	r1, [pc, #220]	; (8001a70 <HAL_RCC_OscConfig+0x240>)
 8001992:	4313      	orrs	r3, r2
 8001994:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001996:	e03a      	b.n	8001a0e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	68db      	ldr	r3, [r3, #12]
 800199c:	2b00      	cmp	r3, #0
 800199e:	d020      	beq.n	80019e2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80019a0:	4b34      	ldr	r3, [pc, #208]	; (8001a74 <HAL_RCC_OscConfig+0x244>)
 80019a2:	2201      	movs	r2, #1
 80019a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019a6:	f7ff fcb7 	bl	8001318 <HAL_GetTick>
 80019aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019ac:	e008      	b.n	80019c0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80019ae:	f7ff fcb3 	bl	8001318 <HAL_GetTick>
 80019b2:	4602      	mov	r2, r0
 80019b4:	693b      	ldr	r3, [r7, #16]
 80019b6:	1ad3      	subs	r3, r2, r3
 80019b8:	2b02      	cmp	r3, #2
 80019ba:	d901      	bls.n	80019c0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80019bc:	2303      	movs	r3, #3
 80019be:	e1a8      	b.n	8001d12 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019c0:	4b2b      	ldr	r3, [pc, #172]	; (8001a70 <HAL_RCC_OscConfig+0x240>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f003 0302 	and.w	r3, r3, #2
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d0f0      	beq.n	80019ae <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019cc:	4b28      	ldr	r3, [pc, #160]	; (8001a70 <HAL_RCC_OscConfig+0x240>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	691b      	ldr	r3, [r3, #16]
 80019d8:	00db      	lsls	r3, r3, #3
 80019da:	4925      	ldr	r1, [pc, #148]	; (8001a70 <HAL_RCC_OscConfig+0x240>)
 80019dc:	4313      	orrs	r3, r2
 80019de:	600b      	str	r3, [r1, #0]
 80019e0:	e015      	b.n	8001a0e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80019e2:	4b24      	ldr	r3, [pc, #144]	; (8001a74 <HAL_RCC_OscConfig+0x244>)
 80019e4:	2200      	movs	r2, #0
 80019e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019e8:	f7ff fc96 	bl	8001318 <HAL_GetTick>
 80019ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019ee:	e008      	b.n	8001a02 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80019f0:	f7ff fc92 	bl	8001318 <HAL_GetTick>
 80019f4:	4602      	mov	r2, r0
 80019f6:	693b      	ldr	r3, [r7, #16]
 80019f8:	1ad3      	subs	r3, r2, r3
 80019fa:	2b02      	cmp	r3, #2
 80019fc:	d901      	bls.n	8001a02 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80019fe:	2303      	movs	r3, #3
 8001a00:	e187      	b.n	8001d12 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a02:	4b1b      	ldr	r3, [pc, #108]	; (8001a70 <HAL_RCC_OscConfig+0x240>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f003 0302 	and.w	r3, r3, #2
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d1f0      	bne.n	80019f0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f003 0308 	and.w	r3, r3, #8
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d036      	beq.n	8001a88 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	695b      	ldr	r3, [r3, #20]
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d016      	beq.n	8001a50 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a22:	4b15      	ldr	r3, [pc, #84]	; (8001a78 <HAL_RCC_OscConfig+0x248>)
 8001a24:	2201      	movs	r2, #1
 8001a26:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a28:	f7ff fc76 	bl	8001318 <HAL_GetTick>
 8001a2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a2e:	e008      	b.n	8001a42 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a30:	f7ff fc72 	bl	8001318 <HAL_GetTick>
 8001a34:	4602      	mov	r2, r0
 8001a36:	693b      	ldr	r3, [r7, #16]
 8001a38:	1ad3      	subs	r3, r2, r3
 8001a3a:	2b02      	cmp	r3, #2
 8001a3c:	d901      	bls.n	8001a42 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001a3e:	2303      	movs	r3, #3
 8001a40:	e167      	b.n	8001d12 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a42:	4b0b      	ldr	r3, [pc, #44]	; (8001a70 <HAL_RCC_OscConfig+0x240>)
 8001a44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a46:	f003 0302 	and.w	r3, r3, #2
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d0f0      	beq.n	8001a30 <HAL_RCC_OscConfig+0x200>
 8001a4e:	e01b      	b.n	8001a88 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a50:	4b09      	ldr	r3, [pc, #36]	; (8001a78 <HAL_RCC_OscConfig+0x248>)
 8001a52:	2200      	movs	r2, #0
 8001a54:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a56:	f7ff fc5f 	bl	8001318 <HAL_GetTick>
 8001a5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a5c:	e00e      	b.n	8001a7c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a5e:	f7ff fc5b 	bl	8001318 <HAL_GetTick>
 8001a62:	4602      	mov	r2, r0
 8001a64:	693b      	ldr	r3, [r7, #16]
 8001a66:	1ad3      	subs	r3, r2, r3
 8001a68:	2b02      	cmp	r3, #2
 8001a6a:	d907      	bls.n	8001a7c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001a6c:	2303      	movs	r3, #3
 8001a6e:	e150      	b.n	8001d12 <HAL_RCC_OscConfig+0x4e2>
 8001a70:	40023800 	.word	0x40023800
 8001a74:	42470000 	.word	0x42470000
 8001a78:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a7c:	4b88      	ldr	r3, [pc, #544]	; (8001ca0 <HAL_RCC_OscConfig+0x470>)
 8001a7e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a80:	f003 0302 	and.w	r3, r3, #2
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d1ea      	bne.n	8001a5e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f003 0304 	and.w	r3, r3, #4
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	f000 8097 	beq.w	8001bc4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a96:	2300      	movs	r3, #0
 8001a98:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a9a:	4b81      	ldr	r3, [pc, #516]	; (8001ca0 <HAL_RCC_OscConfig+0x470>)
 8001a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d10f      	bne.n	8001ac6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	60bb      	str	r3, [r7, #8]
 8001aaa:	4b7d      	ldr	r3, [pc, #500]	; (8001ca0 <HAL_RCC_OscConfig+0x470>)
 8001aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aae:	4a7c      	ldr	r2, [pc, #496]	; (8001ca0 <HAL_RCC_OscConfig+0x470>)
 8001ab0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ab4:	6413      	str	r3, [r2, #64]	; 0x40
 8001ab6:	4b7a      	ldr	r3, [pc, #488]	; (8001ca0 <HAL_RCC_OscConfig+0x470>)
 8001ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001abe:	60bb      	str	r3, [r7, #8]
 8001ac0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ac6:	4b77      	ldr	r3, [pc, #476]	; (8001ca4 <HAL_RCC_OscConfig+0x474>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d118      	bne.n	8001b04 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ad2:	4b74      	ldr	r3, [pc, #464]	; (8001ca4 <HAL_RCC_OscConfig+0x474>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	4a73      	ldr	r2, [pc, #460]	; (8001ca4 <HAL_RCC_OscConfig+0x474>)
 8001ad8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001adc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ade:	f7ff fc1b 	bl	8001318 <HAL_GetTick>
 8001ae2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ae4:	e008      	b.n	8001af8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ae6:	f7ff fc17 	bl	8001318 <HAL_GetTick>
 8001aea:	4602      	mov	r2, r0
 8001aec:	693b      	ldr	r3, [r7, #16]
 8001aee:	1ad3      	subs	r3, r2, r3
 8001af0:	2b02      	cmp	r3, #2
 8001af2:	d901      	bls.n	8001af8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001af4:	2303      	movs	r3, #3
 8001af6:	e10c      	b.n	8001d12 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001af8:	4b6a      	ldr	r3, [pc, #424]	; (8001ca4 <HAL_RCC_OscConfig+0x474>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d0f0      	beq.n	8001ae6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	689b      	ldr	r3, [r3, #8]
 8001b08:	2b01      	cmp	r3, #1
 8001b0a:	d106      	bne.n	8001b1a <HAL_RCC_OscConfig+0x2ea>
 8001b0c:	4b64      	ldr	r3, [pc, #400]	; (8001ca0 <HAL_RCC_OscConfig+0x470>)
 8001b0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b10:	4a63      	ldr	r2, [pc, #396]	; (8001ca0 <HAL_RCC_OscConfig+0x470>)
 8001b12:	f043 0301 	orr.w	r3, r3, #1
 8001b16:	6713      	str	r3, [r2, #112]	; 0x70
 8001b18:	e01c      	b.n	8001b54 <HAL_RCC_OscConfig+0x324>
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	689b      	ldr	r3, [r3, #8]
 8001b1e:	2b05      	cmp	r3, #5
 8001b20:	d10c      	bne.n	8001b3c <HAL_RCC_OscConfig+0x30c>
 8001b22:	4b5f      	ldr	r3, [pc, #380]	; (8001ca0 <HAL_RCC_OscConfig+0x470>)
 8001b24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b26:	4a5e      	ldr	r2, [pc, #376]	; (8001ca0 <HAL_RCC_OscConfig+0x470>)
 8001b28:	f043 0304 	orr.w	r3, r3, #4
 8001b2c:	6713      	str	r3, [r2, #112]	; 0x70
 8001b2e:	4b5c      	ldr	r3, [pc, #368]	; (8001ca0 <HAL_RCC_OscConfig+0x470>)
 8001b30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b32:	4a5b      	ldr	r2, [pc, #364]	; (8001ca0 <HAL_RCC_OscConfig+0x470>)
 8001b34:	f043 0301 	orr.w	r3, r3, #1
 8001b38:	6713      	str	r3, [r2, #112]	; 0x70
 8001b3a:	e00b      	b.n	8001b54 <HAL_RCC_OscConfig+0x324>
 8001b3c:	4b58      	ldr	r3, [pc, #352]	; (8001ca0 <HAL_RCC_OscConfig+0x470>)
 8001b3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b40:	4a57      	ldr	r2, [pc, #348]	; (8001ca0 <HAL_RCC_OscConfig+0x470>)
 8001b42:	f023 0301 	bic.w	r3, r3, #1
 8001b46:	6713      	str	r3, [r2, #112]	; 0x70
 8001b48:	4b55      	ldr	r3, [pc, #340]	; (8001ca0 <HAL_RCC_OscConfig+0x470>)
 8001b4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b4c:	4a54      	ldr	r2, [pc, #336]	; (8001ca0 <HAL_RCC_OscConfig+0x470>)
 8001b4e:	f023 0304 	bic.w	r3, r3, #4
 8001b52:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	689b      	ldr	r3, [r3, #8]
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d015      	beq.n	8001b88 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b5c:	f7ff fbdc 	bl	8001318 <HAL_GetTick>
 8001b60:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b62:	e00a      	b.n	8001b7a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b64:	f7ff fbd8 	bl	8001318 <HAL_GetTick>
 8001b68:	4602      	mov	r2, r0
 8001b6a:	693b      	ldr	r3, [r7, #16]
 8001b6c:	1ad3      	subs	r3, r2, r3
 8001b6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b72:	4293      	cmp	r3, r2
 8001b74:	d901      	bls.n	8001b7a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001b76:	2303      	movs	r3, #3
 8001b78:	e0cb      	b.n	8001d12 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b7a:	4b49      	ldr	r3, [pc, #292]	; (8001ca0 <HAL_RCC_OscConfig+0x470>)
 8001b7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b7e:	f003 0302 	and.w	r3, r3, #2
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d0ee      	beq.n	8001b64 <HAL_RCC_OscConfig+0x334>
 8001b86:	e014      	b.n	8001bb2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b88:	f7ff fbc6 	bl	8001318 <HAL_GetTick>
 8001b8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b8e:	e00a      	b.n	8001ba6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b90:	f7ff fbc2 	bl	8001318 <HAL_GetTick>
 8001b94:	4602      	mov	r2, r0
 8001b96:	693b      	ldr	r3, [r7, #16]
 8001b98:	1ad3      	subs	r3, r2, r3
 8001b9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	d901      	bls.n	8001ba6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001ba2:	2303      	movs	r3, #3
 8001ba4:	e0b5      	b.n	8001d12 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ba6:	4b3e      	ldr	r3, [pc, #248]	; (8001ca0 <HAL_RCC_OscConfig+0x470>)
 8001ba8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001baa:	f003 0302 	and.w	r3, r3, #2
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d1ee      	bne.n	8001b90 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001bb2:	7dfb      	ldrb	r3, [r7, #23]
 8001bb4:	2b01      	cmp	r3, #1
 8001bb6:	d105      	bne.n	8001bc4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001bb8:	4b39      	ldr	r3, [pc, #228]	; (8001ca0 <HAL_RCC_OscConfig+0x470>)
 8001bba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bbc:	4a38      	ldr	r2, [pc, #224]	; (8001ca0 <HAL_RCC_OscConfig+0x470>)
 8001bbe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001bc2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	699b      	ldr	r3, [r3, #24]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	f000 80a1 	beq.w	8001d10 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001bce:	4b34      	ldr	r3, [pc, #208]	; (8001ca0 <HAL_RCC_OscConfig+0x470>)
 8001bd0:	689b      	ldr	r3, [r3, #8]
 8001bd2:	f003 030c 	and.w	r3, r3, #12
 8001bd6:	2b08      	cmp	r3, #8
 8001bd8:	d05c      	beq.n	8001c94 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	699b      	ldr	r3, [r3, #24]
 8001bde:	2b02      	cmp	r3, #2
 8001be0:	d141      	bne.n	8001c66 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001be2:	4b31      	ldr	r3, [pc, #196]	; (8001ca8 <HAL_RCC_OscConfig+0x478>)
 8001be4:	2200      	movs	r2, #0
 8001be6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001be8:	f7ff fb96 	bl	8001318 <HAL_GetTick>
 8001bec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001bee:	e008      	b.n	8001c02 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001bf0:	f7ff fb92 	bl	8001318 <HAL_GetTick>
 8001bf4:	4602      	mov	r2, r0
 8001bf6:	693b      	ldr	r3, [r7, #16]
 8001bf8:	1ad3      	subs	r3, r2, r3
 8001bfa:	2b02      	cmp	r3, #2
 8001bfc:	d901      	bls.n	8001c02 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001bfe:	2303      	movs	r3, #3
 8001c00:	e087      	b.n	8001d12 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c02:	4b27      	ldr	r3, [pc, #156]	; (8001ca0 <HAL_RCC_OscConfig+0x470>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d1f0      	bne.n	8001bf0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	69da      	ldr	r2, [r3, #28]
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	6a1b      	ldr	r3, [r3, #32]
 8001c16:	431a      	orrs	r2, r3
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c1c:	019b      	lsls	r3, r3, #6
 8001c1e:	431a      	orrs	r2, r3
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c24:	085b      	lsrs	r3, r3, #1
 8001c26:	3b01      	subs	r3, #1
 8001c28:	041b      	lsls	r3, r3, #16
 8001c2a:	431a      	orrs	r2, r3
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c30:	061b      	lsls	r3, r3, #24
 8001c32:	491b      	ldr	r1, [pc, #108]	; (8001ca0 <HAL_RCC_OscConfig+0x470>)
 8001c34:	4313      	orrs	r3, r2
 8001c36:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c38:	4b1b      	ldr	r3, [pc, #108]	; (8001ca8 <HAL_RCC_OscConfig+0x478>)
 8001c3a:	2201      	movs	r2, #1
 8001c3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c3e:	f7ff fb6b 	bl	8001318 <HAL_GetTick>
 8001c42:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c44:	e008      	b.n	8001c58 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c46:	f7ff fb67 	bl	8001318 <HAL_GetTick>
 8001c4a:	4602      	mov	r2, r0
 8001c4c:	693b      	ldr	r3, [r7, #16]
 8001c4e:	1ad3      	subs	r3, r2, r3
 8001c50:	2b02      	cmp	r3, #2
 8001c52:	d901      	bls.n	8001c58 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001c54:	2303      	movs	r3, #3
 8001c56:	e05c      	b.n	8001d12 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c58:	4b11      	ldr	r3, [pc, #68]	; (8001ca0 <HAL_RCC_OscConfig+0x470>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d0f0      	beq.n	8001c46 <HAL_RCC_OscConfig+0x416>
 8001c64:	e054      	b.n	8001d10 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c66:	4b10      	ldr	r3, [pc, #64]	; (8001ca8 <HAL_RCC_OscConfig+0x478>)
 8001c68:	2200      	movs	r2, #0
 8001c6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c6c:	f7ff fb54 	bl	8001318 <HAL_GetTick>
 8001c70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c72:	e008      	b.n	8001c86 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c74:	f7ff fb50 	bl	8001318 <HAL_GetTick>
 8001c78:	4602      	mov	r2, r0
 8001c7a:	693b      	ldr	r3, [r7, #16]
 8001c7c:	1ad3      	subs	r3, r2, r3
 8001c7e:	2b02      	cmp	r3, #2
 8001c80:	d901      	bls.n	8001c86 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001c82:	2303      	movs	r3, #3
 8001c84:	e045      	b.n	8001d12 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c86:	4b06      	ldr	r3, [pc, #24]	; (8001ca0 <HAL_RCC_OscConfig+0x470>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d1f0      	bne.n	8001c74 <HAL_RCC_OscConfig+0x444>
 8001c92:	e03d      	b.n	8001d10 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	699b      	ldr	r3, [r3, #24]
 8001c98:	2b01      	cmp	r3, #1
 8001c9a:	d107      	bne.n	8001cac <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001c9c:	2301      	movs	r3, #1
 8001c9e:	e038      	b.n	8001d12 <HAL_RCC_OscConfig+0x4e2>
 8001ca0:	40023800 	.word	0x40023800
 8001ca4:	40007000 	.word	0x40007000
 8001ca8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001cac:	4b1b      	ldr	r3, [pc, #108]	; (8001d1c <HAL_RCC_OscConfig+0x4ec>)
 8001cae:	685b      	ldr	r3, [r3, #4]
 8001cb0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	699b      	ldr	r3, [r3, #24]
 8001cb6:	2b01      	cmp	r3, #1
 8001cb8:	d028      	beq.n	8001d0c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001cc4:	429a      	cmp	r2, r3
 8001cc6:	d121      	bne.n	8001d0c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cd2:	429a      	cmp	r2, r3
 8001cd4:	d11a      	bne.n	8001d0c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001cd6:	68fa      	ldr	r2, [r7, #12]
 8001cd8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001cdc:	4013      	ands	r3, r2
 8001cde:	687a      	ldr	r2, [r7, #4]
 8001ce0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001ce2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001ce4:	4293      	cmp	r3, r2
 8001ce6:	d111      	bne.n	8001d0c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cf2:	085b      	lsrs	r3, r3, #1
 8001cf4:	3b01      	subs	r3, #1
 8001cf6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001cf8:	429a      	cmp	r2, r3
 8001cfa:	d107      	bne.n	8001d0c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d06:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001d08:	429a      	cmp	r2, r3
 8001d0a:	d001      	beq.n	8001d10 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001d0c:	2301      	movs	r3, #1
 8001d0e:	e000      	b.n	8001d12 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001d10:	2300      	movs	r3, #0
}
 8001d12:	4618      	mov	r0, r3
 8001d14:	3718      	adds	r7, #24
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd80      	pop	{r7, pc}
 8001d1a:	bf00      	nop
 8001d1c:	40023800 	.word	0x40023800

08001d20 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b084      	sub	sp, #16
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
 8001d28:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d101      	bne.n	8001d34 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d30:	2301      	movs	r3, #1
 8001d32:	e0cc      	b.n	8001ece <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001d34:	4b68      	ldr	r3, [pc, #416]	; (8001ed8 <HAL_RCC_ClockConfig+0x1b8>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f003 0307 	and.w	r3, r3, #7
 8001d3c:	683a      	ldr	r2, [r7, #0]
 8001d3e:	429a      	cmp	r2, r3
 8001d40:	d90c      	bls.n	8001d5c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d42:	4b65      	ldr	r3, [pc, #404]	; (8001ed8 <HAL_RCC_ClockConfig+0x1b8>)
 8001d44:	683a      	ldr	r2, [r7, #0]
 8001d46:	b2d2      	uxtb	r2, r2
 8001d48:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d4a:	4b63      	ldr	r3, [pc, #396]	; (8001ed8 <HAL_RCC_ClockConfig+0x1b8>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f003 0307 	and.w	r3, r3, #7
 8001d52:	683a      	ldr	r2, [r7, #0]
 8001d54:	429a      	cmp	r2, r3
 8001d56:	d001      	beq.n	8001d5c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001d58:	2301      	movs	r3, #1
 8001d5a:	e0b8      	b.n	8001ece <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f003 0302 	and.w	r3, r3, #2
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d020      	beq.n	8001daa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f003 0304 	and.w	r3, r3, #4
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d005      	beq.n	8001d80 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001d74:	4b59      	ldr	r3, [pc, #356]	; (8001edc <HAL_RCC_ClockConfig+0x1bc>)
 8001d76:	689b      	ldr	r3, [r3, #8]
 8001d78:	4a58      	ldr	r2, [pc, #352]	; (8001edc <HAL_RCC_ClockConfig+0x1bc>)
 8001d7a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001d7e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f003 0308 	and.w	r3, r3, #8
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d005      	beq.n	8001d98 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001d8c:	4b53      	ldr	r3, [pc, #332]	; (8001edc <HAL_RCC_ClockConfig+0x1bc>)
 8001d8e:	689b      	ldr	r3, [r3, #8]
 8001d90:	4a52      	ldr	r2, [pc, #328]	; (8001edc <HAL_RCC_ClockConfig+0x1bc>)
 8001d92:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001d96:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d98:	4b50      	ldr	r3, [pc, #320]	; (8001edc <HAL_RCC_ClockConfig+0x1bc>)
 8001d9a:	689b      	ldr	r3, [r3, #8]
 8001d9c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	689b      	ldr	r3, [r3, #8]
 8001da4:	494d      	ldr	r1, [pc, #308]	; (8001edc <HAL_RCC_ClockConfig+0x1bc>)
 8001da6:	4313      	orrs	r3, r2
 8001da8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f003 0301 	and.w	r3, r3, #1
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d044      	beq.n	8001e40 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	685b      	ldr	r3, [r3, #4]
 8001dba:	2b01      	cmp	r3, #1
 8001dbc:	d107      	bne.n	8001dce <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dbe:	4b47      	ldr	r3, [pc, #284]	; (8001edc <HAL_RCC_ClockConfig+0x1bc>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d119      	bne.n	8001dfe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001dca:	2301      	movs	r3, #1
 8001dcc:	e07f      	b.n	8001ece <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	685b      	ldr	r3, [r3, #4]
 8001dd2:	2b02      	cmp	r3, #2
 8001dd4:	d003      	beq.n	8001dde <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001dda:	2b03      	cmp	r3, #3
 8001ddc:	d107      	bne.n	8001dee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001dde:	4b3f      	ldr	r3, [pc, #252]	; (8001edc <HAL_RCC_ClockConfig+0x1bc>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d109      	bne.n	8001dfe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001dea:	2301      	movs	r3, #1
 8001dec:	e06f      	b.n	8001ece <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dee:	4b3b      	ldr	r3, [pc, #236]	; (8001edc <HAL_RCC_ClockConfig+0x1bc>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f003 0302 	and.w	r3, r3, #2
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d101      	bne.n	8001dfe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	e067      	b.n	8001ece <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001dfe:	4b37      	ldr	r3, [pc, #220]	; (8001edc <HAL_RCC_ClockConfig+0x1bc>)
 8001e00:	689b      	ldr	r3, [r3, #8]
 8001e02:	f023 0203 	bic.w	r2, r3, #3
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	685b      	ldr	r3, [r3, #4]
 8001e0a:	4934      	ldr	r1, [pc, #208]	; (8001edc <HAL_RCC_ClockConfig+0x1bc>)
 8001e0c:	4313      	orrs	r3, r2
 8001e0e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001e10:	f7ff fa82 	bl	8001318 <HAL_GetTick>
 8001e14:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e16:	e00a      	b.n	8001e2e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e18:	f7ff fa7e 	bl	8001318 <HAL_GetTick>
 8001e1c:	4602      	mov	r2, r0
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	1ad3      	subs	r3, r2, r3
 8001e22:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e26:	4293      	cmp	r3, r2
 8001e28:	d901      	bls.n	8001e2e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001e2a:	2303      	movs	r3, #3
 8001e2c:	e04f      	b.n	8001ece <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e2e:	4b2b      	ldr	r3, [pc, #172]	; (8001edc <HAL_RCC_ClockConfig+0x1bc>)
 8001e30:	689b      	ldr	r3, [r3, #8]
 8001e32:	f003 020c 	and.w	r2, r3, #12
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	685b      	ldr	r3, [r3, #4]
 8001e3a:	009b      	lsls	r3, r3, #2
 8001e3c:	429a      	cmp	r2, r3
 8001e3e:	d1eb      	bne.n	8001e18 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001e40:	4b25      	ldr	r3, [pc, #148]	; (8001ed8 <HAL_RCC_ClockConfig+0x1b8>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f003 0307 	and.w	r3, r3, #7
 8001e48:	683a      	ldr	r2, [r7, #0]
 8001e4a:	429a      	cmp	r2, r3
 8001e4c:	d20c      	bcs.n	8001e68 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e4e:	4b22      	ldr	r3, [pc, #136]	; (8001ed8 <HAL_RCC_ClockConfig+0x1b8>)
 8001e50:	683a      	ldr	r2, [r7, #0]
 8001e52:	b2d2      	uxtb	r2, r2
 8001e54:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e56:	4b20      	ldr	r3, [pc, #128]	; (8001ed8 <HAL_RCC_ClockConfig+0x1b8>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f003 0307 	and.w	r3, r3, #7
 8001e5e:	683a      	ldr	r2, [r7, #0]
 8001e60:	429a      	cmp	r2, r3
 8001e62:	d001      	beq.n	8001e68 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001e64:	2301      	movs	r3, #1
 8001e66:	e032      	b.n	8001ece <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f003 0304 	and.w	r3, r3, #4
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d008      	beq.n	8001e86 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e74:	4b19      	ldr	r3, [pc, #100]	; (8001edc <HAL_RCC_ClockConfig+0x1bc>)
 8001e76:	689b      	ldr	r3, [r3, #8]
 8001e78:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	68db      	ldr	r3, [r3, #12]
 8001e80:	4916      	ldr	r1, [pc, #88]	; (8001edc <HAL_RCC_ClockConfig+0x1bc>)
 8001e82:	4313      	orrs	r3, r2
 8001e84:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f003 0308 	and.w	r3, r3, #8
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d009      	beq.n	8001ea6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001e92:	4b12      	ldr	r3, [pc, #72]	; (8001edc <HAL_RCC_ClockConfig+0x1bc>)
 8001e94:	689b      	ldr	r3, [r3, #8]
 8001e96:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	691b      	ldr	r3, [r3, #16]
 8001e9e:	00db      	lsls	r3, r3, #3
 8001ea0:	490e      	ldr	r1, [pc, #56]	; (8001edc <HAL_RCC_ClockConfig+0x1bc>)
 8001ea2:	4313      	orrs	r3, r2
 8001ea4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001ea6:	f000 f821 	bl	8001eec <HAL_RCC_GetSysClockFreq>
 8001eaa:	4602      	mov	r2, r0
 8001eac:	4b0b      	ldr	r3, [pc, #44]	; (8001edc <HAL_RCC_ClockConfig+0x1bc>)
 8001eae:	689b      	ldr	r3, [r3, #8]
 8001eb0:	091b      	lsrs	r3, r3, #4
 8001eb2:	f003 030f 	and.w	r3, r3, #15
 8001eb6:	490a      	ldr	r1, [pc, #40]	; (8001ee0 <HAL_RCC_ClockConfig+0x1c0>)
 8001eb8:	5ccb      	ldrb	r3, [r1, r3]
 8001eba:	fa22 f303 	lsr.w	r3, r2, r3
 8001ebe:	4a09      	ldr	r2, [pc, #36]	; (8001ee4 <HAL_RCC_ClockConfig+0x1c4>)
 8001ec0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001ec2:	4b09      	ldr	r3, [pc, #36]	; (8001ee8 <HAL_RCC_ClockConfig+0x1c8>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	f7ff f918 	bl	80010fc <HAL_InitTick>

  return HAL_OK;
 8001ecc:	2300      	movs	r3, #0
}
 8001ece:	4618      	mov	r0, r3
 8001ed0:	3710      	adds	r7, #16
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bd80      	pop	{r7, pc}
 8001ed6:	bf00      	nop
 8001ed8:	40023c00 	.word	0x40023c00
 8001edc:	40023800 	.word	0x40023800
 8001ee0:	08005ed0 	.word	0x08005ed0
 8001ee4:	20000000 	.word	0x20000000
 8001ee8:	20000004 	.word	0x20000004

08001eec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001eec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001ef0:	b090      	sub	sp, #64	; 0x40
 8001ef2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	637b      	str	r3, [r7, #52]	; 0x34
 8001ef8:	2300      	movs	r3, #0
 8001efa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001efc:	2300      	movs	r3, #0
 8001efe:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8001f00:	2300      	movs	r3, #0
 8001f02:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001f04:	4b59      	ldr	r3, [pc, #356]	; (800206c <HAL_RCC_GetSysClockFreq+0x180>)
 8001f06:	689b      	ldr	r3, [r3, #8]
 8001f08:	f003 030c 	and.w	r3, r3, #12
 8001f0c:	2b08      	cmp	r3, #8
 8001f0e:	d00d      	beq.n	8001f2c <HAL_RCC_GetSysClockFreq+0x40>
 8001f10:	2b08      	cmp	r3, #8
 8001f12:	f200 80a1 	bhi.w	8002058 <HAL_RCC_GetSysClockFreq+0x16c>
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d002      	beq.n	8001f20 <HAL_RCC_GetSysClockFreq+0x34>
 8001f1a:	2b04      	cmp	r3, #4
 8001f1c:	d003      	beq.n	8001f26 <HAL_RCC_GetSysClockFreq+0x3a>
 8001f1e:	e09b      	b.n	8002058 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001f20:	4b53      	ldr	r3, [pc, #332]	; (8002070 <HAL_RCC_GetSysClockFreq+0x184>)
 8001f22:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8001f24:	e09b      	b.n	800205e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001f26:	4b53      	ldr	r3, [pc, #332]	; (8002074 <HAL_RCC_GetSysClockFreq+0x188>)
 8001f28:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001f2a:	e098      	b.n	800205e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001f2c:	4b4f      	ldr	r3, [pc, #316]	; (800206c <HAL_RCC_GetSysClockFreq+0x180>)
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001f34:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001f36:	4b4d      	ldr	r3, [pc, #308]	; (800206c <HAL_RCC_GetSysClockFreq+0x180>)
 8001f38:	685b      	ldr	r3, [r3, #4]
 8001f3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d028      	beq.n	8001f94 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f42:	4b4a      	ldr	r3, [pc, #296]	; (800206c <HAL_RCC_GetSysClockFreq+0x180>)
 8001f44:	685b      	ldr	r3, [r3, #4]
 8001f46:	099b      	lsrs	r3, r3, #6
 8001f48:	2200      	movs	r2, #0
 8001f4a:	623b      	str	r3, [r7, #32]
 8001f4c:	627a      	str	r2, [r7, #36]	; 0x24
 8001f4e:	6a3b      	ldr	r3, [r7, #32]
 8001f50:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001f54:	2100      	movs	r1, #0
 8001f56:	4b47      	ldr	r3, [pc, #284]	; (8002074 <HAL_RCC_GetSysClockFreq+0x188>)
 8001f58:	fb03 f201 	mul.w	r2, r3, r1
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	fb00 f303 	mul.w	r3, r0, r3
 8001f62:	4413      	add	r3, r2
 8001f64:	4a43      	ldr	r2, [pc, #268]	; (8002074 <HAL_RCC_GetSysClockFreq+0x188>)
 8001f66:	fba0 1202 	umull	r1, r2, r0, r2
 8001f6a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001f6c:	460a      	mov	r2, r1
 8001f6e:	62ba      	str	r2, [r7, #40]	; 0x28
 8001f70:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001f72:	4413      	add	r3, r2
 8001f74:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001f76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f78:	2200      	movs	r2, #0
 8001f7a:	61bb      	str	r3, [r7, #24]
 8001f7c:	61fa      	str	r2, [r7, #28]
 8001f7e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001f82:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001f86:	f7fe fc61 	bl	800084c <__aeabi_uldivmod>
 8001f8a:	4602      	mov	r2, r0
 8001f8c:	460b      	mov	r3, r1
 8001f8e:	4613      	mov	r3, r2
 8001f90:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001f92:	e053      	b.n	800203c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f94:	4b35      	ldr	r3, [pc, #212]	; (800206c <HAL_RCC_GetSysClockFreq+0x180>)
 8001f96:	685b      	ldr	r3, [r3, #4]
 8001f98:	099b      	lsrs	r3, r3, #6
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	613b      	str	r3, [r7, #16]
 8001f9e:	617a      	str	r2, [r7, #20]
 8001fa0:	693b      	ldr	r3, [r7, #16]
 8001fa2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001fa6:	f04f 0b00 	mov.w	fp, #0
 8001faa:	4652      	mov	r2, sl
 8001fac:	465b      	mov	r3, fp
 8001fae:	f04f 0000 	mov.w	r0, #0
 8001fb2:	f04f 0100 	mov.w	r1, #0
 8001fb6:	0159      	lsls	r1, r3, #5
 8001fb8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001fbc:	0150      	lsls	r0, r2, #5
 8001fbe:	4602      	mov	r2, r0
 8001fc0:	460b      	mov	r3, r1
 8001fc2:	ebb2 080a 	subs.w	r8, r2, sl
 8001fc6:	eb63 090b 	sbc.w	r9, r3, fp
 8001fca:	f04f 0200 	mov.w	r2, #0
 8001fce:	f04f 0300 	mov.w	r3, #0
 8001fd2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001fd6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001fda:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001fde:	ebb2 0408 	subs.w	r4, r2, r8
 8001fe2:	eb63 0509 	sbc.w	r5, r3, r9
 8001fe6:	f04f 0200 	mov.w	r2, #0
 8001fea:	f04f 0300 	mov.w	r3, #0
 8001fee:	00eb      	lsls	r3, r5, #3
 8001ff0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001ff4:	00e2      	lsls	r2, r4, #3
 8001ff6:	4614      	mov	r4, r2
 8001ff8:	461d      	mov	r5, r3
 8001ffa:	eb14 030a 	adds.w	r3, r4, sl
 8001ffe:	603b      	str	r3, [r7, #0]
 8002000:	eb45 030b 	adc.w	r3, r5, fp
 8002004:	607b      	str	r3, [r7, #4]
 8002006:	f04f 0200 	mov.w	r2, #0
 800200a:	f04f 0300 	mov.w	r3, #0
 800200e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002012:	4629      	mov	r1, r5
 8002014:	028b      	lsls	r3, r1, #10
 8002016:	4621      	mov	r1, r4
 8002018:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800201c:	4621      	mov	r1, r4
 800201e:	028a      	lsls	r2, r1, #10
 8002020:	4610      	mov	r0, r2
 8002022:	4619      	mov	r1, r3
 8002024:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002026:	2200      	movs	r2, #0
 8002028:	60bb      	str	r3, [r7, #8]
 800202a:	60fa      	str	r2, [r7, #12]
 800202c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002030:	f7fe fc0c 	bl	800084c <__aeabi_uldivmod>
 8002034:	4602      	mov	r2, r0
 8002036:	460b      	mov	r3, r1
 8002038:	4613      	mov	r3, r2
 800203a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800203c:	4b0b      	ldr	r3, [pc, #44]	; (800206c <HAL_RCC_GetSysClockFreq+0x180>)
 800203e:	685b      	ldr	r3, [r3, #4]
 8002040:	0c1b      	lsrs	r3, r3, #16
 8002042:	f003 0303 	and.w	r3, r3, #3
 8002046:	3301      	adds	r3, #1
 8002048:	005b      	lsls	r3, r3, #1
 800204a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 800204c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800204e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002050:	fbb2 f3f3 	udiv	r3, r2, r3
 8002054:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002056:	e002      	b.n	800205e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002058:	4b05      	ldr	r3, [pc, #20]	; (8002070 <HAL_RCC_GetSysClockFreq+0x184>)
 800205a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800205c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800205e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002060:	4618      	mov	r0, r3
 8002062:	3740      	adds	r7, #64	; 0x40
 8002064:	46bd      	mov	sp, r7
 8002066:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800206a:	bf00      	nop
 800206c:	40023800 	.word	0x40023800
 8002070:	00f42400 	.word	0x00f42400
 8002074:	017d7840 	.word	0x017d7840

08002078 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002078:	b480      	push	{r7}
 800207a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800207c:	4b03      	ldr	r3, [pc, #12]	; (800208c <HAL_RCC_GetHCLKFreq+0x14>)
 800207e:	681b      	ldr	r3, [r3, #0]
}
 8002080:	4618      	mov	r0, r3
 8002082:	46bd      	mov	sp, r7
 8002084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002088:	4770      	bx	lr
 800208a:	bf00      	nop
 800208c:	20000000 	.word	0x20000000

08002090 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002094:	f7ff fff0 	bl	8002078 <HAL_RCC_GetHCLKFreq>
 8002098:	4602      	mov	r2, r0
 800209a:	4b05      	ldr	r3, [pc, #20]	; (80020b0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800209c:	689b      	ldr	r3, [r3, #8]
 800209e:	0a9b      	lsrs	r3, r3, #10
 80020a0:	f003 0307 	and.w	r3, r3, #7
 80020a4:	4903      	ldr	r1, [pc, #12]	; (80020b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80020a6:	5ccb      	ldrb	r3, [r1, r3]
 80020a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80020ac:	4618      	mov	r0, r3
 80020ae:	bd80      	pop	{r7, pc}
 80020b0:	40023800 	.word	0x40023800
 80020b4:	08005ee0 	.word	0x08005ee0

080020b8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80020b8:	b480      	push	{r7}
 80020ba:	b083      	sub	sp, #12
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
 80020c0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	220f      	movs	r2, #15
 80020c6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80020c8:	4b12      	ldr	r3, [pc, #72]	; (8002114 <HAL_RCC_GetClockConfig+0x5c>)
 80020ca:	689b      	ldr	r3, [r3, #8]
 80020cc:	f003 0203 	and.w	r2, r3, #3
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80020d4:	4b0f      	ldr	r3, [pc, #60]	; (8002114 <HAL_RCC_GetClockConfig+0x5c>)
 80020d6:	689b      	ldr	r3, [r3, #8]
 80020d8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80020e0:	4b0c      	ldr	r3, [pc, #48]	; (8002114 <HAL_RCC_GetClockConfig+0x5c>)
 80020e2:	689b      	ldr	r3, [r3, #8]
 80020e4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80020ec:	4b09      	ldr	r3, [pc, #36]	; (8002114 <HAL_RCC_GetClockConfig+0x5c>)
 80020ee:	689b      	ldr	r3, [r3, #8]
 80020f0:	08db      	lsrs	r3, r3, #3
 80020f2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80020fa:	4b07      	ldr	r3, [pc, #28]	; (8002118 <HAL_RCC_GetClockConfig+0x60>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f003 0207 	and.w	r2, r3, #7
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	601a      	str	r2, [r3, #0]
}
 8002106:	bf00      	nop
 8002108:	370c      	adds	r7, #12
 800210a:	46bd      	mov	sp, r7
 800210c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002110:	4770      	bx	lr
 8002112:	bf00      	nop
 8002114:	40023800 	.word	0x40023800
 8002118:	40023c00 	.word	0x40023c00

0800211c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b082      	sub	sp, #8
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	2b00      	cmp	r3, #0
 8002128:	d101      	bne.n	800212e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800212a:	2301      	movs	r3, #1
 800212c:	e041      	b.n	80021b2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002134:	b2db      	uxtb	r3, r3
 8002136:	2b00      	cmp	r3, #0
 8002138:	d106      	bne.n	8002148 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	2200      	movs	r2, #0
 800213e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002142:	6878      	ldr	r0, [r7, #4]
 8002144:	f7fe ff82 	bl	800104c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2202      	movs	r2, #2
 800214c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681a      	ldr	r2, [r3, #0]
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	3304      	adds	r3, #4
 8002158:	4619      	mov	r1, r3
 800215a:	4610      	mov	r0, r2
 800215c:	f000 fc54 	bl	8002a08 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	2201      	movs	r2, #1
 8002164:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2201      	movs	r2, #1
 800216c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	2201      	movs	r2, #1
 8002174:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	2201      	movs	r2, #1
 800217c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	2201      	movs	r2, #1
 8002184:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2201      	movs	r2, #1
 800218c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2201      	movs	r2, #1
 8002194:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2201      	movs	r2, #1
 800219c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2201      	movs	r2, #1
 80021a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	2201      	movs	r2, #1
 80021ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80021b0:	2300      	movs	r3, #0
}
 80021b2:	4618      	mov	r0, r3
 80021b4:	3708      	adds	r7, #8
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bd80      	pop	{r7, pc}
	...

080021bc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80021bc:	b480      	push	{r7}
 80021be:	b085      	sub	sp, #20
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021ca:	b2db      	uxtb	r3, r3
 80021cc:	2b01      	cmp	r3, #1
 80021ce:	d001      	beq.n	80021d4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80021d0:	2301      	movs	r3, #1
 80021d2:	e044      	b.n	800225e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2202      	movs	r2, #2
 80021d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	68da      	ldr	r2, [r3, #12]
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f042 0201 	orr.w	r2, r2, #1
 80021ea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	4a1e      	ldr	r2, [pc, #120]	; (800226c <HAL_TIM_Base_Start_IT+0xb0>)
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d018      	beq.n	8002228 <HAL_TIM_Base_Start_IT+0x6c>
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021fe:	d013      	beq.n	8002228 <HAL_TIM_Base_Start_IT+0x6c>
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	4a1a      	ldr	r2, [pc, #104]	; (8002270 <HAL_TIM_Base_Start_IT+0xb4>)
 8002206:	4293      	cmp	r3, r2
 8002208:	d00e      	beq.n	8002228 <HAL_TIM_Base_Start_IT+0x6c>
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	4a19      	ldr	r2, [pc, #100]	; (8002274 <HAL_TIM_Base_Start_IT+0xb8>)
 8002210:	4293      	cmp	r3, r2
 8002212:	d009      	beq.n	8002228 <HAL_TIM_Base_Start_IT+0x6c>
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	4a17      	ldr	r2, [pc, #92]	; (8002278 <HAL_TIM_Base_Start_IT+0xbc>)
 800221a:	4293      	cmp	r3, r2
 800221c:	d004      	beq.n	8002228 <HAL_TIM_Base_Start_IT+0x6c>
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	4a16      	ldr	r2, [pc, #88]	; (800227c <HAL_TIM_Base_Start_IT+0xc0>)
 8002224:	4293      	cmp	r3, r2
 8002226:	d111      	bne.n	800224c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	689b      	ldr	r3, [r3, #8]
 800222e:	f003 0307 	and.w	r3, r3, #7
 8002232:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	2b06      	cmp	r3, #6
 8002238:	d010      	beq.n	800225c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	681a      	ldr	r2, [r3, #0]
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f042 0201 	orr.w	r2, r2, #1
 8002248:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800224a:	e007      	b.n	800225c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	681a      	ldr	r2, [r3, #0]
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f042 0201 	orr.w	r2, r2, #1
 800225a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800225c:	2300      	movs	r3, #0
}
 800225e:	4618      	mov	r0, r3
 8002260:	3714      	adds	r7, #20
 8002262:	46bd      	mov	sp, r7
 8002264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002268:	4770      	bx	lr
 800226a:	bf00      	nop
 800226c:	40010000 	.word	0x40010000
 8002270:	40000400 	.word	0x40000400
 8002274:	40000800 	.word	0x40000800
 8002278:	40000c00 	.word	0x40000c00
 800227c:	40014000 	.word	0x40014000

08002280 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b082      	sub	sp, #8
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2b00      	cmp	r3, #0
 800228c:	d101      	bne.n	8002292 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800228e:	2301      	movs	r3, #1
 8002290:	e041      	b.n	8002316 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002298:	b2db      	uxtb	r3, r3
 800229a:	2b00      	cmp	r3, #0
 800229c:	d106      	bne.n	80022ac <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	2200      	movs	r2, #0
 80022a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80022a6:	6878      	ldr	r0, [r7, #4]
 80022a8:	f000 f839 	bl	800231e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2202      	movs	r2, #2
 80022b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681a      	ldr	r2, [r3, #0]
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	3304      	adds	r3, #4
 80022bc:	4619      	mov	r1, r3
 80022be:	4610      	mov	r0, r2
 80022c0:	f000 fba2 	bl	8002a08 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2201      	movs	r2, #1
 80022c8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2201      	movs	r2, #1
 80022d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2201      	movs	r2, #1
 80022d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	2201      	movs	r2, #1
 80022e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2201      	movs	r2, #1
 80022e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2201      	movs	r2, #1
 80022f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2201      	movs	r2, #1
 80022f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	2201      	movs	r2, #1
 8002300:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2201      	movs	r2, #1
 8002308:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2201      	movs	r2, #1
 8002310:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002314:	2300      	movs	r3, #0
}
 8002316:	4618      	mov	r0, r3
 8002318:	3708      	adds	r7, #8
 800231a:	46bd      	mov	sp, r7
 800231c:	bd80      	pop	{r7, pc}

0800231e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800231e:	b480      	push	{r7}
 8002320:	b083      	sub	sp, #12
 8002322:	af00      	add	r7, sp, #0
 8002324:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002326:	bf00      	nop
 8002328:	370c      	adds	r7, #12
 800232a:	46bd      	mov	sp, r7
 800232c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002330:	4770      	bx	lr
	...

08002334 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b084      	sub	sp, #16
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
 800233c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	2b00      	cmp	r3, #0
 8002342:	d109      	bne.n	8002358 <HAL_TIM_PWM_Start+0x24>
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800234a:	b2db      	uxtb	r3, r3
 800234c:	2b01      	cmp	r3, #1
 800234e:	bf14      	ite	ne
 8002350:	2301      	movne	r3, #1
 8002352:	2300      	moveq	r3, #0
 8002354:	b2db      	uxtb	r3, r3
 8002356:	e022      	b.n	800239e <HAL_TIM_PWM_Start+0x6a>
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	2b04      	cmp	r3, #4
 800235c:	d109      	bne.n	8002372 <HAL_TIM_PWM_Start+0x3e>
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002364:	b2db      	uxtb	r3, r3
 8002366:	2b01      	cmp	r3, #1
 8002368:	bf14      	ite	ne
 800236a:	2301      	movne	r3, #1
 800236c:	2300      	moveq	r3, #0
 800236e:	b2db      	uxtb	r3, r3
 8002370:	e015      	b.n	800239e <HAL_TIM_PWM_Start+0x6a>
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	2b08      	cmp	r3, #8
 8002376:	d109      	bne.n	800238c <HAL_TIM_PWM_Start+0x58>
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800237e:	b2db      	uxtb	r3, r3
 8002380:	2b01      	cmp	r3, #1
 8002382:	bf14      	ite	ne
 8002384:	2301      	movne	r3, #1
 8002386:	2300      	moveq	r3, #0
 8002388:	b2db      	uxtb	r3, r3
 800238a:	e008      	b.n	800239e <HAL_TIM_PWM_Start+0x6a>
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002392:	b2db      	uxtb	r3, r3
 8002394:	2b01      	cmp	r3, #1
 8002396:	bf14      	ite	ne
 8002398:	2301      	movne	r3, #1
 800239a:	2300      	moveq	r3, #0
 800239c:	b2db      	uxtb	r3, r3
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d001      	beq.n	80023a6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80023a2:	2301      	movs	r3, #1
 80023a4:	e068      	b.n	8002478 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d104      	bne.n	80023b6 <HAL_TIM_PWM_Start+0x82>
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2202      	movs	r2, #2
 80023b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80023b4:	e013      	b.n	80023de <HAL_TIM_PWM_Start+0xaa>
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	2b04      	cmp	r3, #4
 80023ba:	d104      	bne.n	80023c6 <HAL_TIM_PWM_Start+0x92>
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2202      	movs	r2, #2
 80023c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80023c4:	e00b      	b.n	80023de <HAL_TIM_PWM_Start+0xaa>
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	2b08      	cmp	r3, #8
 80023ca:	d104      	bne.n	80023d6 <HAL_TIM_PWM_Start+0xa2>
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2202      	movs	r2, #2
 80023d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80023d4:	e003      	b.n	80023de <HAL_TIM_PWM_Start+0xaa>
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	2202      	movs	r2, #2
 80023da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	2201      	movs	r2, #1
 80023e4:	6839      	ldr	r1, [r7, #0]
 80023e6:	4618      	mov	r0, r3
 80023e8:	f000 fdb4 	bl	8002f54 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	4a23      	ldr	r2, [pc, #140]	; (8002480 <HAL_TIM_PWM_Start+0x14c>)
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d107      	bne.n	8002406 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002404:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	4a1d      	ldr	r2, [pc, #116]	; (8002480 <HAL_TIM_PWM_Start+0x14c>)
 800240c:	4293      	cmp	r3, r2
 800240e:	d018      	beq.n	8002442 <HAL_TIM_PWM_Start+0x10e>
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002418:	d013      	beq.n	8002442 <HAL_TIM_PWM_Start+0x10e>
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	4a19      	ldr	r2, [pc, #100]	; (8002484 <HAL_TIM_PWM_Start+0x150>)
 8002420:	4293      	cmp	r3, r2
 8002422:	d00e      	beq.n	8002442 <HAL_TIM_PWM_Start+0x10e>
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4a17      	ldr	r2, [pc, #92]	; (8002488 <HAL_TIM_PWM_Start+0x154>)
 800242a:	4293      	cmp	r3, r2
 800242c:	d009      	beq.n	8002442 <HAL_TIM_PWM_Start+0x10e>
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	4a16      	ldr	r2, [pc, #88]	; (800248c <HAL_TIM_PWM_Start+0x158>)
 8002434:	4293      	cmp	r3, r2
 8002436:	d004      	beq.n	8002442 <HAL_TIM_PWM_Start+0x10e>
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	4a14      	ldr	r2, [pc, #80]	; (8002490 <HAL_TIM_PWM_Start+0x15c>)
 800243e:	4293      	cmp	r3, r2
 8002440:	d111      	bne.n	8002466 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	689b      	ldr	r3, [r3, #8]
 8002448:	f003 0307 	and.w	r3, r3, #7
 800244c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	2b06      	cmp	r3, #6
 8002452:	d010      	beq.n	8002476 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	681a      	ldr	r2, [r3, #0]
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f042 0201 	orr.w	r2, r2, #1
 8002462:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002464:	e007      	b.n	8002476 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	681a      	ldr	r2, [r3, #0]
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f042 0201 	orr.w	r2, r2, #1
 8002474:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002476:	2300      	movs	r3, #0
}
 8002478:	4618      	mov	r0, r3
 800247a:	3710      	adds	r7, #16
 800247c:	46bd      	mov	sp, r7
 800247e:	bd80      	pop	{r7, pc}
 8002480:	40010000 	.word	0x40010000
 8002484:	40000400 	.word	0x40000400
 8002488:	40000800 	.word	0x40000800
 800248c:	40000c00 	.word	0x40000c00
 8002490:	40014000 	.word	0x40014000

08002494 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b082      	sub	sp, #8
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	691b      	ldr	r3, [r3, #16]
 80024a2:	f003 0302 	and.w	r3, r3, #2
 80024a6:	2b02      	cmp	r3, #2
 80024a8:	d122      	bne.n	80024f0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	68db      	ldr	r3, [r3, #12]
 80024b0:	f003 0302 	and.w	r3, r3, #2
 80024b4:	2b02      	cmp	r3, #2
 80024b6:	d11b      	bne.n	80024f0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f06f 0202 	mvn.w	r2, #2
 80024c0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	2201      	movs	r2, #1
 80024c6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	699b      	ldr	r3, [r3, #24]
 80024ce:	f003 0303 	and.w	r3, r3, #3
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d003      	beq.n	80024de <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80024d6:	6878      	ldr	r0, [r7, #4]
 80024d8:	f000 fa77 	bl	80029ca <HAL_TIM_IC_CaptureCallback>
 80024dc:	e005      	b.n	80024ea <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80024de:	6878      	ldr	r0, [r7, #4]
 80024e0:	f000 fa69 	bl	80029b6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024e4:	6878      	ldr	r0, [r7, #4]
 80024e6:	f000 fa7a 	bl	80029de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	2200      	movs	r2, #0
 80024ee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	691b      	ldr	r3, [r3, #16]
 80024f6:	f003 0304 	and.w	r3, r3, #4
 80024fa:	2b04      	cmp	r3, #4
 80024fc:	d122      	bne.n	8002544 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	68db      	ldr	r3, [r3, #12]
 8002504:	f003 0304 	and.w	r3, r3, #4
 8002508:	2b04      	cmp	r3, #4
 800250a:	d11b      	bne.n	8002544 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f06f 0204 	mvn.w	r2, #4
 8002514:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	2202      	movs	r2, #2
 800251a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	699b      	ldr	r3, [r3, #24]
 8002522:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002526:	2b00      	cmp	r3, #0
 8002528:	d003      	beq.n	8002532 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800252a:	6878      	ldr	r0, [r7, #4]
 800252c:	f000 fa4d 	bl	80029ca <HAL_TIM_IC_CaptureCallback>
 8002530:	e005      	b.n	800253e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002532:	6878      	ldr	r0, [r7, #4]
 8002534:	f000 fa3f 	bl	80029b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002538:	6878      	ldr	r0, [r7, #4]
 800253a:	f000 fa50 	bl	80029de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	2200      	movs	r2, #0
 8002542:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	691b      	ldr	r3, [r3, #16]
 800254a:	f003 0308 	and.w	r3, r3, #8
 800254e:	2b08      	cmp	r3, #8
 8002550:	d122      	bne.n	8002598 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	68db      	ldr	r3, [r3, #12]
 8002558:	f003 0308 	and.w	r3, r3, #8
 800255c:	2b08      	cmp	r3, #8
 800255e:	d11b      	bne.n	8002598 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f06f 0208 	mvn.w	r2, #8
 8002568:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	2204      	movs	r2, #4
 800256e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	69db      	ldr	r3, [r3, #28]
 8002576:	f003 0303 	and.w	r3, r3, #3
 800257a:	2b00      	cmp	r3, #0
 800257c:	d003      	beq.n	8002586 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800257e:	6878      	ldr	r0, [r7, #4]
 8002580:	f000 fa23 	bl	80029ca <HAL_TIM_IC_CaptureCallback>
 8002584:	e005      	b.n	8002592 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002586:	6878      	ldr	r0, [r7, #4]
 8002588:	f000 fa15 	bl	80029b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800258c:	6878      	ldr	r0, [r7, #4]
 800258e:	f000 fa26 	bl	80029de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	2200      	movs	r2, #0
 8002596:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	691b      	ldr	r3, [r3, #16]
 800259e:	f003 0310 	and.w	r3, r3, #16
 80025a2:	2b10      	cmp	r3, #16
 80025a4:	d122      	bne.n	80025ec <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	68db      	ldr	r3, [r3, #12]
 80025ac:	f003 0310 	and.w	r3, r3, #16
 80025b0:	2b10      	cmp	r3, #16
 80025b2:	d11b      	bne.n	80025ec <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f06f 0210 	mvn.w	r2, #16
 80025bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	2208      	movs	r2, #8
 80025c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	69db      	ldr	r3, [r3, #28]
 80025ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d003      	beq.n	80025da <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80025d2:	6878      	ldr	r0, [r7, #4]
 80025d4:	f000 f9f9 	bl	80029ca <HAL_TIM_IC_CaptureCallback>
 80025d8:	e005      	b.n	80025e6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80025da:	6878      	ldr	r0, [r7, #4]
 80025dc:	f000 f9eb 	bl	80029b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025e0:	6878      	ldr	r0, [r7, #4]
 80025e2:	f000 f9fc 	bl	80029de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	2200      	movs	r2, #0
 80025ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	691b      	ldr	r3, [r3, #16]
 80025f2:	f003 0301 	and.w	r3, r3, #1
 80025f6:	2b01      	cmp	r3, #1
 80025f8:	d10e      	bne.n	8002618 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	68db      	ldr	r3, [r3, #12]
 8002600:	f003 0301 	and.w	r3, r3, #1
 8002604:	2b01      	cmp	r3, #1
 8002606:	d107      	bne.n	8002618 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f06f 0201 	mvn.w	r2, #1
 8002610:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002612:	6878      	ldr	r0, [r7, #4]
 8002614:	f7fe fcd6 	bl	8000fc4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	691b      	ldr	r3, [r3, #16]
 800261e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002622:	2b80      	cmp	r3, #128	; 0x80
 8002624:	d10e      	bne.n	8002644 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	68db      	ldr	r3, [r3, #12]
 800262c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002630:	2b80      	cmp	r3, #128	; 0x80
 8002632:	d107      	bne.n	8002644 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800263c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800263e:	6878      	ldr	r0, [r7, #4]
 8002640:	f000 fd26 	bl	8003090 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	691b      	ldr	r3, [r3, #16]
 800264a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800264e:	2b40      	cmp	r3, #64	; 0x40
 8002650:	d10e      	bne.n	8002670 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	68db      	ldr	r3, [r3, #12]
 8002658:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800265c:	2b40      	cmp	r3, #64	; 0x40
 800265e:	d107      	bne.n	8002670 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002668:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800266a:	6878      	ldr	r0, [r7, #4]
 800266c:	f000 f9c1 	bl	80029f2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	691b      	ldr	r3, [r3, #16]
 8002676:	f003 0320 	and.w	r3, r3, #32
 800267a:	2b20      	cmp	r3, #32
 800267c:	d10e      	bne.n	800269c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	68db      	ldr	r3, [r3, #12]
 8002684:	f003 0320 	and.w	r3, r3, #32
 8002688:	2b20      	cmp	r3, #32
 800268a:	d107      	bne.n	800269c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f06f 0220 	mvn.w	r2, #32
 8002694:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002696:	6878      	ldr	r0, [r7, #4]
 8002698:	f000 fcf0 	bl	800307c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800269c:	bf00      	nop
 800269e:	3708      	adds	r7, #8
 80026a0:	46bd      	mov	sp, r7
 80026a2:	bd80      	pop	{r7, pc}

080026a4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b086      	sub	sp, #24
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	60f8      	str	r0, [r7, #12]
 80026ac:	60b9      	str	r1, [r7, #8]
 80026ae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80026b0:	2300      	movs	r3, #0
 80026b2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80026ba:	2b01      	cmp	r3, #1
 80026bc:	d101      	bne.n	80026c2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80026be:	2302      	movs	r3, #2
 80026c0:	e0ae      	b.n	8002820 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	2201      	movs	r2, #1
 80026c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	2b0c      	cmp	r3, #12
 80026ce:	f200 809f 	bhi.w	8002810 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80026d2:	a201      	add	r2, pc, #4	; (adr r2, 80026d8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80026d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026d8:	0800270d 	.word	0x0800270d
 80026dc:	08002811 	.word	0x08002811
 80026e0:	08002811 	.word	0x08002811
 80026e4:	08002811 	.word	0x08002811
 80026e8:	0800274d 	.word	0x0800274d
 80026ec:	08002811 	.word	0x08002811
 80026f0:	08002811 	.word	0x08002811
 80026f4:	08002811 	.word	0x08002811
 80026f8:	0800278f 	.word	0x0800278f
 80026fc:	08002811 	.word	0x08002811
 8002700:	08002811 	.word	0x08002811
 8002704:	08002811 	.word	0x08002811
 8002708:	080027cf 	.word	0x080027cf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	68b9      	ldr	r1, [r7, #8]
 8002712:	4618      	mov	r0, r3
 8002714:	f000 f9f8 	bl	8002b08 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	699a      	ldr	r2, [r3, #24]
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f042 0208 	orr.w	r2, r2, #8
 8002726:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	699a      	ldr	r2, [r3, #24]
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f022 0204 	bic.w	r2, r2, #4
 8002736:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	6999      	ldr	r1, [r3, #24]
 800273e:	68bb      	ldr	r3, [r7, #8]
 8002740:	691a      	ldr	r2, [r3, #16]
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	430a      	orrs	r2, r1
 8002748:	619a      	str	r2, [r3, #24]
      break;
 800274a:	e064      	b.n	8002816 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	68b9      	ldr	r1, [r7, #8]
 8002752:	4618      	mov	r0, r3
 8002754:	f000 fa3e 	bl	8002bd4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	699a      	ldr	r2, [r3, #24]
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002766:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	699a      	ldr	r2, [r3, #24]
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002776:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	6999      	ldr	r1, [r3, #24]
 800277e:	68bb      	ldr	r3, [r7, #8]
 8002780:	691b      	ldr	r3, [r3, #16]
 8002782:	021a      	lsls	r2, r3, #8
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	430a      	orrs	r2, r1
 800278a:	619a      	str	r2, [r3, #24]
      break;
 800278c:	e043      	b.n	8002816 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	68b9      	ldr	r1, [r7, #8]
 8002794:	4618      	mov	r0, r3
 8002796:	f000 fa89 	bl	8002cac <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	69da      	ldr	r2, [r3, #28]
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f042 0208 	orr.w	r2, r2, #8
 80027a8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	69da      	ldr	r2, [r3, #28]
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f022 0204 	bic.w	r2, r2, #4
 80027b8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	69d9      	ldr	r1, [r3, #28]
 80027c0:	68bb      	ldr	r3, [r7, #8]
 80027c2:	691a      	ldr	r2, [r3, #16]
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	430a      	orrs	r2, r1
 80027ca:	61da      	str	r2, [r3, #28]
      break;
 80027cc:	e023      	b.n	8002816 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	68b9      	ldr	r1, [r7, #8]
 80027d4:	4618      	mov	r0, r3
 80027d6:	f000 fad3 	bl	8002d80 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	69da      	ldr	r2, [r3, #28]
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80027e8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	69da      	ldr	r2, [r3, #28]
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80027f8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	69d9      	ldr	r1, [r3, #28]
 8002800:	68bb      	ldr	r3, [r7, #8]
 8002802:	691b      	ldr	r3, [r3, #16]
 8002804:	021a      	lsls	r2, r3, #8
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	430a      	orrs	r2, r1
 800280c:	61da      	str	r2, [r3, #28]
      break;
 800280e:	e002      	b.n	8002816 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002810:	2301      	movs	r3, #1
 8002812:	75fb      	strb	r3, [r7, #23]
      break;
 8002814:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	2200      	movs	r2, #0
 800281a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800281e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002820:	4618      	mov	r0, r3
 8002822:	3718      	adds	r7, #24
 8002824:	46bd      	mov	sp, r7
 8002826:	bd80      	pop	{r7, pc}

08002828 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b084      	sub	sp, #16
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
 8002830:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002832:	2300      	movs	r3, #0
 8002834:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800283c:	2b01      	cmp	r3, #1
 800283e:	d101      	bne.n	8002844 <HAL_TIM_ConfigClockSource+0x1c>
 8002840:	2302      	movs	r3, #2
 8002842:	e0b4      	b.n	80029ae <HAL_TIM_ConfigClockSource+0x186>
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2201      	movs	r2, #1
 8002848:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2202      	movs	r2, #2
 8002850:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	689b      	ldr	r3, [r3, #8]
 800285a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800285c:	68bb      	ldr	r3, [r7, #8]
 800285e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002862:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002864:	68bb      	ldr	r3, [r7, #8]
 8002866:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800286a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	68ba      	ldr	r2, [r7, #8]
 8002872:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800287c:	d03e      	beq.n	80028fc <HAL_TIM_ConfigClockSource+0xd4>
 800287e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002882:	f200 8087 	bhi.w	8002994 <HAL_TIM_ConfigClockSource+0x16c>
 8002886:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800288a:	f000 8086 	beq.w	800299a <HAL_TIM_ConfigClockSource+0x172>
 800288e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002892:	d87f      	bhi.n	8002994 <HAL_TIM_ConfigClockSource+0x16c>
 8002894:	2b70      	cmp	r3, #112	; 0x70
 8002896:	d01a      	beq.n	80028ce <HAL_TIM_ConfigClockSource+0xa6>
 8002898:	2b70      	cmp	r3, #112	; 0x70
 800289a:	d87b      	bhi.n	8002994 <HAL_TIM_ConfigClockSource+0x16c>
 800289c:	2b60      	cmp	r3, #96	; 0x60
 800289e:	d050      	beq.n	8002942 <HAL_TIM_ConfigClockSource+0x11a>
 80028a0:	2b60      	cmp	r3, #96	; 0x60
 80028a2:	d877      	bhi.n	8002994 <HAL_TIM_ConfigClockSource+0x16c>
 80028a4:	2b50      	cmp	r3, #80	; 0x50
 80028a6:	d03c      	beq.n	8002922 <HAL_TIM_ConfigClockSource+0xfa>
 80028a8:	2b50      	cmp	r3, #80	; 0x50
 80028aa:	d873      	bhi.n	8002994 <HAL_TIM_ConfigClockSource+0x16c>
 80028ac:	2b40      	cmp	r3, #64	; 0x40
 80028ae:	d058      	beq.n	8002962 <HAL_TIM_ConfigClockSource+0x13a>
 80028b0:	2b40      	cmp	r3, #64	; 0x40
 80028b2:	d86f      	bhi.n	8002994 <HAL_TIM_ConfigClockSource+0x16c>
 80028b4:	2b30      	cmp	r3, #48	; 0x30
 80028b6:	d064      	beq.n	8002982 <HAL_TIM_ConfigClockSource+0x15a>
 80028b8:	2b30      	cmp	r3, #48	; 0x30
 80028ba:	d86b      	bhi.n	8002994 <HAL_TIM_ConfigClockSource+0x16c>
 80028bc:	2b20      	cmp	r3, #32
 80028be:	d060      	beq.n	8002982 <HAL_TIM_ConfigClockSource+0x15a>
 80028c0:	2b20      	cmp	r3, #32
 80028c2:	d867      	bhi.n	8002994 <HAL_TIM_ConfigClockSource+0x16c>
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d05c      	beq.n	8002982 <HAL_TIM_ConfigClockSource+0x15a>
 80028c8:	2b10      	cmp	r3, #16
 80028ca:	d05a      	beq.n	8002982 <HAL_TIM_ConfigClockSource+0x15a>
 80028cc:	e062      	b.n	8002994 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6818      	ldr	r0, [r3, #0]
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	6899      	ldr	r1, [r3, #8]
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	685a      	ldr	r2, [r3, #4]
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	68db      	ldr	r3, [r3, #12]
 80028de:	f000 fb19 	bl	8002f14 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	689b      	ldr	r3, [r3, #8]
 80028e8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80028ea:	68bb      	ldr	r3, [r7, #8]
 80028ec:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80028f0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	68ba      	ldr	r2, [r7, #8]
 80028f8:	609a      	str	r2, [r3, #8]
      break;
 80028fa:	e04f      	b.n	800299c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6818      	ldr	r0, [r3, #0]
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	6899      	ldr	r1, [r3, #8]
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	685a      	ldr	r2, [r3, #4]
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	68db      	ldr	r3, [r3, #12]
 800290c:	f000 fb02 	bl	8002f14 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	689a      	ldr	r2, [r3, #8]
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800291e:	609a      	str	r2, [r3, #8]
      break;
 8002920:	e03c      	b.n	800299c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6818      	ldr	r0, [r3, #0]
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	6859      	ldr	r1, [r3, #4]
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	68db      	ldr	r3, [r3, #12]
 800292e:	461a      	mov	r2, r3
 8002930:	f000 fa76 	bl	8002e20 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	2150      	movs	r1, #80	; 0x50
 800293a:	4618      	mov	r0, r3
 800293c:	f000 facf 	bl	8002ede <TIM_ITRx_SetConfig>
      break;
 8002940:	e02c      	b.n	800299c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6818      	ldr	r0, [r3, #0]
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	6859      	ldr	r1, [r3, #4]
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	68db      	ldr	r3, [r3, #12]
 800294e:	461a      	mov	r2, r3
 8002950:	f000 fa95 	bl	8002e7e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	2160      	movs	r1, #96	; 0x60
 800295a:	4618      	mov	r0, r3
 800295c:	f000 fabf 	bl	8002ede <TIM_ITRx_SetConfig>
      break;
 8002960:	e01c      	b.n	800299c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6818      	ldr	r0, [r3, #0]
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	6859      	ldr	r1, [r3, #4]
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	68db      	ldr	r3, [r3, #12]
 800296e:	461a      	mov	r2, r3
 8002970:	f000 fa56 	bl	8002e20 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	2140      	movs	r1, #64	; 0x40
 800297a:	4618      	mov	r0, r3
 800297c:	f000 faaf 	bl	8002ede <TIM_ITRx_SetConfig>
      break;
 8002980:	e00c      	b.n	800299c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681a      	ldr	r2, [r3, #0]
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	4619      	mov	r1, r3
 800298c:	4610      	mov	r0, r2
 800298e:	f000 faa6 	bl	8002ede <TIM_ITRx_SetConfig>
      break;
 8002992:	e003      	b.n	800299c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002994:	2301      	movs	r3, #1
 8002996:	73fb      	strb	r3, [r7, #15]
      break;
 8002998:	e000      	b.n	800299c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800299a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2201      	movs	r2, #1
 80029a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2200      	movs	r2, #0
 80029a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80029ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80029ae:	4618      	mov	r0, r3
 80029b0:	3710      	adds	r7, #16
 80029b2:	46bd      	mov	sp, r7
 80029b4:	bd80      	pop	{r7, pc}

080029b6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80029b6:	b480      	push	{r7}
 80029b8:	b083      	sub	sp, #12
 80029ba:	af00      	add	r7, sp, #0
 80029bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80029be:	bf00      	nop
 80029c0:	370c      	adds	r7, #12
 80029c2:	46bd      	mov	sp, r7
 80029c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c8:	4770      	bx	lr

080029ca <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80029ca:	b480      	push	{r7}
 80029cc:	b083      	sub	sp, #12
 80029ce:	af00      	add	r7, sp, #0
 80029d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80029d2:	bf00      	nop
 80029d4:	370c      	adds	r7, #12
 80029d6:	46bd      	mov	sp, r7
 80029d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029dc:	4770      	bx	lr

080029de <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80029de:	b480      	push	{r7}
 80029e0:	b083      	sub	sp, #12
 80029e2:	af00      	add	r7, sp, #0
 80029e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80029e6:	bf00      	nop
 80029e8:	370c      	adds	r7, #12
 80029ea:	46bd      	mov	sp, r7
 80029ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f0:	4770      	bx	lr

080029f2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80029f2:	b480      	push	{r7}
 80029f4:	b083      	sub	sp, #12
 80029f6:	af00      	add	r7, sp, #0
 80029f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80029fa:	bf00      	nop
 80029fc:	370c      	adds	r7, #12
 80029fe:	46bd      	mov	sp, r7
 8002a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a04:	4770      	bx	lr
	...

08002a08 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002a08:	b480      	push	{r7}
 8002a0a:	b085      	sub	sp, #20
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
 8002a10:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	4a34      	ldr	r2, [pc, #208]	; (8002aec <TIM_Base_SetConfig+0xe4>)
 8002a1c:	4293      	cmp	r3, r2
 8002a1e:	d00f      	beq.n	8002a40 <TIM_Base_SetConfig+0x38>
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a26:	d00b      	beq.n	8002a40 <TIM_Base_SetConfig+0x38>
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	4a31      	ldr	r2, [pc, #196]	; (8002af0 <TIM_Base_SetConfig+0xe8>)
 8002a2c:	4293      	cmp	r3, r2
 8002a2e:	d007      	beq.n	8002a40 <TIM_Base_SetConfig+0x38>
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	4a30      	ldr	r2, [pc, #192]	; (8002af4 <TIM_Base_SetConfig+0xec>)
 8002a34:	4293      	cmp	r3, r2
 8002a36:	d003      	beq.n	8002a40 <TIM_Base_SetConfig+0x38>
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	4a2f      	ldr	r2, [pc, #188]	; (8002af8 <TIM_Base_SetConfig+0xf0>)
 8002a3c:	4293      	cmp	r3, r2
 8002a3e:	d108      	bne.n	8002a52 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a46:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	68fa      	ldr	r2, [r7, #12]
 8002a4e:	4313      	orrs	r3, r2
 8002a50:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	4a25      	ldr	r2, [pc, #148]	; (8002aec <TIM_Base_SetConfig+0xe4>)
 8002a56:	4293      	cmp	r3, r2
 8002a58:	d01b      	beq.n	8002a92 <TIM_Base_SetConfig+0x8a>
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a60:	d017      	beq.n	8002a92 <TIM_Base_SetConfig+0x8a>
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	4a22      	ldr	r2, [pc, #136]	; (8002af0 <TIM_Base_SetConfig+0xe8>)
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d013      	beq.n	8002a92 <TIM_Base_SetConfig+0x8a>
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	4a21      	ldr	r2, [pc, #132]	; (8002af4 <TIM_Base_SetConfig+0xec>)
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d00f      	beq.n	8002a92 <TIM_Base_SetConfig+0x8a>
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	4a20      	ldr	r2, [pc, #128]	; (8002af8 <TIM_Base_SetConfig+0xf0>)
 8002a76:	4293      	cmp	r3, r2
 8002a78:	d00b      	beq.n	8002a92 <TIM_Base_SetConfig+0x8a>
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	4a1f      	ldr	r2, [pc, #124]	; (8002afc <TIM_Base_SetConfig+0xf4>)
 8002a7e:	4293      	cmp	r3, r2
 8002a80:	d007      	beq.n	8002a92 <TIM_Base_SetConfig+0x8a>
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	4a1e      	ldr	r2, [pc, #120]	; (8002b00 <TIM_Base_SetConfig+0xf8>)
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d003      	beq.n	8002a92 <TIM_Base_SetConfig+0x8a>
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	4a1d      	ldr	r2, [pc, #116]	; (8002b04 <TIM_Base_SetConfig+0xfc>)
 8002a8e:	4293      	cmp	r3, r2
 8002a90:	d108      	bne.n	8002aa4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a98:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	68db      	ldr	r3, [r3, #12]
 8002a9e:	68fa      	ldr	r2, [r7, #12]
 8002aa0:	4313      	orrs	r3, r2
 8002aa2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	695b      	ldr	r3, [r3, #20]
 8002aae:	4313      	orrs	r3, r2
 8002ab0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	68fa      	ldr	r2, [r7, #12]
 8002ab6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	689a      	ldr	r2, [r3, #8]
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	681a      	ldr	r2, [r3, #0]
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	4a08      	ldr	r2, [pc, #32]	; (8002aec <TIM_Base_SetConfig+0xe4>)
 8002acc:	4293      	cmp	r3, r2
 8002ace:	d103      	bne.n	8002ad8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	691a      	ldr	r2, [r3, #16]
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2201      	movs	r2, #1
 8002adc:	615a      	str	r2, [r3, #20]
}
 8002ade:	bf00      	nop
 8002ae0:	3714      	adds	r7, #20
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae8:	4770      	bx	lr
 8002aea:	bf00      	nop
 8002aec:	40010000 	.word	0x40010000
 8002af0:	40000400 	.word	0x40000400
 8002af4:	40000800 	.word	0x40000800
 8002af8:	40000c00 	.word	0x40000c00
 8002afc:	40014000 	.word	0x40014000
 8002b00:	40014400 	.word	0x40014400
 8002b04:	40014800 	.word	0x40014800

08002b08 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002b08:	b480      	push	{r7}
 8002b0a:	b087      	sub	sp, #28
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
 8002b10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6a1b      	ldr	r3, [r3, #32]
 8002b16:	f023 0201 	bic.w	r2, r3, #1
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6a1b      	ldr	r3, [r3, #32]
 8002b22:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	685b      	ldr	r3, [r3, #4]
 8002b28:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	699b      	ldr	r3, [r3, #24]
 8002b2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	f023 0303 	bic.w	r3, r3, #3
 8002b3e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	68fa      	ldr	r2, [r7, #12]
 8002b46:	4313      	orrs	r3, r2
 8002b48:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002b4a:	697b      	ldr	r3, [r7, #20]
 8002b4c:	f023 0302 	bic.w	r3, r3, #2
 8002b50:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	689b      	ldr	r3, [r3, #8]
 8002b56:	697a      	ldr	r2, [r7, #20]
 8002b58:	4313      	orrs	r3, r2
 8002b5a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	4a1c      	ldr	r2, [pc, #112]	; (8002bd0 <TIM_OC1_SetConfig+0xc8>)
 8002b60:	4293      	cmp	r3, r2
 8002b62:	d10c      	bne.n	8002b7e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002b64:	697b      	ldr	r3, [r7, #20]
 8002b66:	f023 0308 	bic.w	r3, r3, #8
 8002b6a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	68db      	ldr	r3, [r3, #12]
 8002b70:	697a      	ldr	r2, [r7, #20]
 8002b72:	4313      	orrs	r3, r2
 8002b74:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002b76:	697b      	ldr	r3, [r7, #20]
 8002b78:	f023 0304 	bic.w	r3, r3, #4
 8002b7c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	4a13      	ldr	r2, [pc, #76]	; (8002bd0 <TIM_OC1_SetConfig+0xc8>)
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d111      	bne.n	8002baa <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002b86:	693b      	ldr	r3, [r7, #16]
 8002b88:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002b8c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002b8e:	693b      	ldr	r3, [r7, #16]
 8002b90:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002b94:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	695b      	ldr	r3, [r3, #20]
 8002b9a:	693a      	ldr	r2, [r7, #16]
 8002b9c:	4313      	orrs	r3, r2
 8002b9e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	699b      	ldr	r3, [r3, #24]
 8002ba4:	693a      	ldr	r2, [r7, #16]
 8002ba6:	4313      	orrs	r3, r2
 8002ba8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	693a      	ldr	r2, [r7, #16]
 8002bae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	68fa      	ldr	r2, [r7, #12]
 8002bb4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	685a      	ldr	r2, [r3, #4]
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	697a      	ldr	r2, [r7, #20]
 8002bc2:	621a      	str	r2, [r3, #32]
}
 8002bc4:	bf00      	nop
 8002bc6:	371c      	adds	r7, #28
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bce:	4770      	bx	lr
 8002bd0:	40010000 	.word	0x40010000

08002bd4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002bd4:	b480      	push	{r7}
 8002bd6:	b087      	sub	sp, #28
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
 8002bdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6a1b      	ldr	r3, [r3, #32]
 8002be2:	f023 0210 	bic.w	r2, r3, #16
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6a1b      	ldr	r3, [r3, #32]
 8002bee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	685b      	ldr	r3, [r3, #4]
 8002bf4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	699b      	ldr	r3, [r3, #24]
 8002bfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002c02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c0a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	021b      	lsls	r3, r3, #8
 8002c12:	68fa      	ldr	r2, [r7, #12]
 8002c14:	4313      	orrs	r3, r2
 8002c16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002c18:	697b      	ldr	r3, [r7, #20]
 8002c1a:	f023 0320 	bic.w	r3, r3, #32
 8002c1e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	689b      	ldr	r3, [r3, #8]
 8002c24:	011b      	lsls	r3, r3, #4
 8002c26:	697a      	ldr	r2, [r7, #20]
 8002c28:	4313      	orrs	r3, r2
 8002c2a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	4a1e      	ldr	r2, [pc, #120]	; (8002ca8 <TIM_OC2_SetConfig+0xd4>)
 8002c30:	4293      	cmp	r3, r2
 8002c32:	d10d      	bne.n	8002c50 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002c34:	697b      	ldr	r3, [r7, #20]
 8002c36:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002c3a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	68db      	ldr	r3, [r3, #12]
 8002c40:	011b      	lsls	r3, r3, #4
 8002c42:	697a      	ldr	r2, [r7, #20]
 8002c44:	4313      	orrs	r3, r2
 8002c46:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002c48:	697b      	ldr	r3, [r7, #20]
 8002c4a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002c4e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	4a15      	ldr	r2, [pc, #84]	; (8002ca8 <TIM_OC2_SetConfig+0xd4>)
 8002c54:	4293      	cmp	r3, r2
 8002c56:	d113      	bne.n	8002c80 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002c58:	693b      	ldr	r3, [r7, #16]
 8002c5a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002c5e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002c60:	693b      	ldr	r3, [r7, #16]
 8002c62:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002c66:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	695b      	ldr	r3, [r3, #20]
 8002c6c:	009b      	lsls	r3, r3, #2
 8002c6e:	693a      	ldr	r2, [r7, #16]
 8002c70:	4313      	orrs	r3, r2
 8002c72:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	699b      	ldr	r3, [r3, #24]
 8002c78:	009b      	lsls	r3, r3, #2
 8002c7a:	693a      	ldr	r2, [r7, #16]
 8002c7c:	4313      	orrs	r3, r2
 8002c7e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	693a      	ldr	r2, [r7, #16]
 8002c84:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	68fa      	ldr	r2, [r7, #12]
 8002c8a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	685a      	ldr	r2, [r3, #4]
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	697a      	ldr	r2, [r7, #20]
 8002c98:	621a      	str	r2, [r3, #32]
}
 8002c9a:	bf00      	nop
 8002c9c:	371c      	adds	r7, #28
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca4:	4770      	bx	lr
 8002ca6:	bf00      	nop
 8002ca8:	40010000 	.word	0x40010000

08002cac <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002cac:	b480      	push	{r7}
 8002cae:	b087      	sub	sp, #28
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
 8002cb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6a1b      	ldr	r3, [r3, #32]
 8002cba:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6a1b      	ldr	r3, [r3, #32]
 8002cc6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	685b      	ldr	r3, [r3, #4]
 8002ccc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	69db      	ldr	r3, [r3, #28]
 8002cd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002cda:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	f023 0303 	bic.w	r3, r3, #3
 8002ce2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	68fa      	ldr	r2, [r7, #12]
 8002cea:	4313      	orrs	r3, r2
 8002cec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002cee:	697b      	ldr	r3, [r7, #20]
 8002cf0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002cf4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	689b      	ldr	r3, [r3, #8]
 8002cfa:	021b      	lsls	r3, r3, #8
 8002cfc:	697a      	ldr	r2, [r7, #20]
 8002cfe:	4313      	orrs	r3, r2
 8002d00:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	4a1d      	ldr	r2, [pc, #116]	; (8002d7c <TIM_OC3_SetConfig+0xd0>)
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d10d      	bne.n	8002d26 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002d0a:	697b      	ldr	r3, [r7, #20]
 8002d0c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002d10:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	68db      	ldr	r3, [r3, #12]
 8002d16:	021b      	lsls	r3, r3, #8
 8002d18:	697a      	ldr	r2, [r7, #20]
 8002d1a:	4313      	orrs	r3, r2
 8002d1c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002d1e:	697b      	ldr	r3, [r7, #20]
 8002d20:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002d24:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	4a14      	ldr	r2, [pc, #80]	; (8002d7c <TIM_OC3_SetConfig+0xd0>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d113      	bne.n	8002d56 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002d2e:	693b      	ldr	r3, [r7, #16]
 8002d30:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002d34:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002d36:	693b      	ldr	r3, [r7, #16]
 8002d38:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002d3c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	695b      	ldr	r3, [r3, #20]
 8002d42:	011b      	lsls	r3, r3, #4
 8002d44:	693a      	ldr	r2, [r7, #16]
 8002d46:	4313      	orrs	r3, r2
 8002d48:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	699b      	ldr	r3, [r3, #24]
 8002d4e:	011b      	lsls	r3, r3, #4
 8002d50:	693a      	ldr	r2, [r7, #16]
 8002d52:	4313      	orrs	r3, r2
 8002d54:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	693a      	ldr	r2, [r7, #16]
 8002d5a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	68fa      	ldr	r2, [r7, #12]
 8002d60:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	685a      	ldr	r2, [r3, #4]
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	697a      	ldr	r2, [r7, #20]
 8002d6e:	621a      	str	r2, [r3, #32]
}
 8002d70:	bf00      	nop
 8002d72:	371c      	adds	r7, #28
 8002d74:	46bd      	mov	sp, r7
 8002d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7a:	4770      	bx	lr
 8002d7c:	40010000 	.word	0x40010000

08002d80 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002d80:	b480      	push	{r7}
 8002d82:	b087      	sub	sp, #28
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
 8002d88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6a1b      	ldr	r3, [r3, #32]
 8002d8e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6a1b      	ldr	r3, [r3, #32]
 8002d9a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	685b      	ldr	r3, [r3, #4]
 8002da0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	69db      	ldr	r3, [r3, #28]
 8002da6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002dae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002db6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	021b      	lsls	r3, r3, #8
 8002dbe:	68fa      	ldr	r2, [r7, #12]
 8002dc0:	4313      	orrs	r3, r2
 8002dc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002dc4:	693b      	ldr	r3, [r7, #16]
 8002dc6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002dca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	689b      	ldr	r3, [r3, #8]
 8002dd0:	031b      	lsls	r3, r3, #12
 8002dd2:	693a      	ldr	r2, [r7, #16]
 8002dd4:	4313      	orrs	r3, r2
 8002dd6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	4a10      	ldr	r2, [pc, #64]	; (8002e1c <TIM_OC4_SetConfig+0x9c>)
 8002ddc:	4293      	cmp	r3, r2
 8002dde:	d109      	bne.n	8002df4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002de0:	697b      	ldr	r3, [r7, #20]
 8002de2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002de6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	695b      	ldr	r3, [r3, #20]
 8002dec:	019b      	lsls	r3, r3, #6
 8002dee:	697a      	ldr	r2, [r7, #20]
 8002df0:	4313      	orrs	r3, r2
 8002df2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	697a      	ldr	r2, [r7, #20]
 8002df8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	68fa      	ldr	r2, [r7, #12]
 8002dfe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	685a      	ldr	r2, [r3, #4]
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	693a      	ldr	r2, [r7, #16]
 8002e0c:	621a      	str	r2, [r3, #32]
}
 8002e0e:	bf00      	nop
 8002e10:	371c      	adds	r7, #28
 8002e12:	46bd      	mov	sp, r7
 8002e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e18:	4770      	bx	lr
 8002e1a:	bf00      	nop
 8002e1c:	40010000 	.word	0x40010000

08002e20 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002e20:	b480      	push	{r7}
 8002e22:	b087      	sub	sp, #28
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	60f8      	str	r0, [r7, #12]
 8002e28:	60b9      	str	r1, [r7, #8]
 8002e2a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	6a1b      	ldr	r3, [r3, #32]
 8002e30:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	6a1b      	ldr	r3, [r3, #32]
 8002e36:	f023 0201 	bic.w	r2, r3, #1
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	699b      	ldr	r3, [r3, #24]
 8002e42:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002e44:	693b      	ldr	r3, [r7, #16]
 8002e46:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002e4a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	011b      	lsls	r3, r3, #4
 8002e50:	693a      	ldr	r2, [r7, #16]
 8002e52:	4313      	orrs	r3, r2
 8002e54:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002e56:	697b      	ldr	r3, [r7, #20]
 8002e58:	f023 030a 	bic.w	r3, r3, #10
 8002e5c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002e5e:	697a      	ldr	r2, [r7, #20]
 8002e60:	68bb      	ldr	r3, [r7, #8]
 8002e62:	4313      	orrs	r3, r2
 8002e64:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	693a      	ldr	r2, [r7, #16]
 8002e6a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	697a      	ldr	r2, [r7, #20]
 8002e70:	621a      	str	r2, [r3, #32]
}
 8002e72:	bf00      	nop
 8002e74:	371c      	adds	r7, #28
 8002e76:	46bd      	mov	sp, r7
 8002e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7c:	4770      	bx	lr

08002e7e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002e7e:	b480      	push	{r7}
 8002e80:	b087      	sub	sp, #28
 8002e82:	af00      	add	r7, sp, #0
 8002e84:	60f8      	str	r0, [r7, #12]
 8002e86:	60b9      	str	r1, [r7, #8]
 8002e88:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	6a1b      	ldr	r3, [r3, #32]
 8002e8e:	f023 0210 	bic.w	r2, r3, #16
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	699b      	ldr	r3, [r3, #24]
 8002e9a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	6a1b      	ldr	r3, [r3, #32]
 8002ea0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002ea2:	697b      	ldr	r3, [r7, #20]
 8002ea4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002ea8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	031b      	lsls	r3, r3, #12
 8002eae:	697a      	ldr	r2, [r7, #20]
 8002eb0:	4313      	orrs	r3, r2
 8002eb2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002eb4:	693b      	ldr	r3, [r7, #16]
 8002eb6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002eba:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002ebc:	68bb      	ldr	r3, [r7, #8]
 8002ebe:	011b      	lsls	r3, r3, #4
 8002ec0:	693a      	ldr	r2, [r7, #16]
 8002ec2:	4313      	orrs	r3, r2
 8002ec4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	697a      	ldr	r2, [r7, #20]
 8002eca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	693a      	ldr	r2, [r7, #16]
 8002ed0:	621a      	str	r2, [r3, #32]
}
 8002ed2:	bf00      	nop
 8002ed4:	371c      	adds	r7, #28
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002edc:	4770      	bx	lr

08002ede <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002ede:	b480      	push	{r7}
 8002ee0:	b085      	sub	sp, #20
 8002ee2:	af00      	add	r7, sp, #0
 8002ee4:	6078      	str	r0, [r7, #4]
 8002ee6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	689b      	ldr	r3, [r3, #8]
 8002eec:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ef4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002ef6:	683a      	ldr	r2, [r7, #0]
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	4313      	orrs	r3, r2
 8002efc:	f043 0307 	orr.w	r3, r3, #7
 8002f00:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	68fa      	ldr	r2, [r7, #12]
 8002f06:	609a      	str	r2, [r3, #8]
}
 8002f08:	bf00      	nop
 8002f0a:	3714      	adds	r7, #20
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f12:	4770      	bx	lr

08002f14 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002f14:	b480      	push	{r7}
 8002f16:	b087      	sub	sp, #28
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	60f8      	str	r0, [r7, #12]
 8002f1c:	60b9      	str	r1, [r7, #8]
 8002f1e:	607a      	str	r2, [r7, #4]
 8002f20:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	689b      	ldr	r3, [r3, #8]
 8002f26:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002f28:	697b      	ldr	r3, [r7, #20]
 8002f2a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002f2e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	021a      	lsls	r2, r3, #8
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	431a      	orrs	r2, r3
 8002f38:	68bb      	ldr	r3, [r7, #8]
 8002f3a:	4313      	orrs	r3, r2
 8002f3c:	697a      	ldr	r2, [r7, #20]
 8002f3e:	4313      	orrs	r3, r2
 8002f40:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	697a      	ldr	r2, [r7, #20]
 8002f46:	609a      	str	r2, [r3, #8]
}
 8002f48:	bf00      	nop
 8002f4a:	371c      	adds	r7, #28
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f52:	4770      	bx	lr

08002f54 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002f54:	b480      	push	{r7}
 8002f56:	b087      	sub	sp, #28
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	60f8      	str	r0, [r7, #12]
 8002f5c:	60b9      	str	r1, [r7, #8]
 8002f5e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002f60:	68bb      	ldr	r3, [r7, #8]
 8002f62:	f003 031f 	and.w	r3, r3, #31
 8002f66:	2201      	movs	r2, #1
 8002f68:	fa02 f303 	lsl.w	r3, r2, r3
 8002f6c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	6a1a      	ldr	r2, [r3, #32]
 8002f72:	697b      	ldr	r3, [r7, #20]
 8002f74:	43db      	mvns	r3, r3
 8002f76:	401a      	ands	r2, r3
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	6a1a      	ldr	r2, [r3, #32]
 8002f80:	68bb      	ldr	r3, [r7, #8]
 8002f82:	f003 031f 	and.w	r3, r3, #31
 8002f86:	6879      	ldr	r1, [r7, #4]
 8002f88:	fa01 f303 	lsl.w	r3, r1, r3
 8002f8c:	431a      	orrs	r2, r3
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	621a      	str	r2, [r3, #32]
}
 8002f92:	bf00      	nop
 8002f94:	371c      	adds	r7, #28
 8002f96:	46bd      	mov	sp, r7
 8002f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9c:	4770      	bx	lr
	...

08002fa0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002fa0:	b480      	push	{r7}
 8002fa2:	b085      	sub	sp, #20
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
 8002fa8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002fb0:	2b01      	cmp	r3, #1
 8002fb2:	d101      	bne.n	8002fb8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002fb4:	2302      	movs	r3, #2
 8002fb6:	e050      	b.n	800305a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2201      	movs	r2, #1
 8002fbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2202      	movs	r2, #2
 8002fc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	685b      	ldr	r3, [r3, #4]
 8002fce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	689b      	ldr	r3, [r3, #8]
 8002fd6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fde:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	68fa      	ldr	r2, [r7, #12]
 8002fe6:	4313      	orrs	r3, r2
 8002fe8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	68fa      	ldr	r2, [r7, #12]
 8002ff0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	4a1c      	ldr	r2, [pc, #112]	; (8003068 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8002ff8:	4293      	cmp	r3, r2
 8002ffa:	d018      	beq.n	800302e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003004:	d013      	beq.n	800302e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	4a18      	ldr	r2, [pc, #96]	; (800306c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800300c:	4293      	cmp	r3, r2
 800300e:	d00e      	beq.n	800302e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	4a16      	ldr	r2, [pc, #88]	; (8003070 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003016:	4293      	cmp	r3, r2
 8003018:	d009      	beq.n	800302e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	4a15      	ldr	r2, [pc, #84]	; (8003074 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003020:	4293      	cmp	r3, r2
 8003022:	d004      	beq.n	800302e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	4a13      	ldr	r2, [pc, #76]	; (8003078 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800302a:	4293      	cmp	r3, r2
 800302c:	d10c      	bne.n	8003048 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800302e:	68bb      	ldr	r3, [r7, #8]
 8003030:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003034:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	685b      	ldr	r3, [r3, #4]
 800303a:	68ba      	ldr	r2, [r7, #8]
 800303c:	4313      	orrs	r3, r2
 800303e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	68ba      	ldr	r2, [r7, #8]
 8003046:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2201      	movs	r2, #1
 800304c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2200      	movs	r2, #0
 8003054:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003058:	2300      	movs	r3, #0
}
 800305a:	4618      	mov	r0, r3
 800305c:	3714      	adds	r7, #20
 800305e:	46bd      	mov	sp, r7
 8003060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003064:	4770      	bx	lr
 8003066:	bf00      	nop
 8003068:	40010000 	.word	0x40010000
 800306c:	40000400 	.word	0x40000400
 8003070:	40000800 	.word	0x40000800
 8003074:	40000c00 	.word	0x40000c00
 8003078:	40014000 	.word	0x40014000

0800307c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800307c:	b480      	push	{r7}
 800307e:	b083      	sub	sp, #12
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003084:	bf00      	nop
 8003086:	370c      	adds	r7, #12
 8003088:	46bd      	mov	sp, r7
 800308a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308e:	4770      	bx	lr

08003090 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003090:	b480      	push	{r7}
 8003092:	b083      	sub	sp, #12
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003098:	bf00      	nop
 800309a:	370c      	adds	r7, #12
 800309c:	46bd      	mov	sp, r7
 800309e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a2:	4770      	bx	lr

080030a4 <__NVIC_SetPriority>:
{
 80030a4:	b480      	push	{r7}
 80030a6:	b083      	sub	sp, #12
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	4603      	mov	r3, r0
 80030ac:	6039      	str	r1, [r7, #0]
 80030ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	db0a      	blt.n	80030ce <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	b2da      	uxtb	r2, r3
 80030bc:	490c      	ldr	r1, [pc, #48]	; (80030f0 <__NVIC_SetPriority+0x4c>)
 80030be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030c2:	0112      	lsls	r2, r2, #4
 80030c4:	b2d2      	uxtb	r2, r2
 80030c6:	440b      	add	r3, r1
 80030c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80030cc:	e00a      	b.n	80030e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	b2da      	uxtb	r2, r3
 80030d2:	4908      	ldr	r1, [pc, #32]	; (80030f4 <__NVIC_SetPriority+0x50>)
 80030d4:	79fb      	ldrb	r3, [r7, #7]
 80030d6:	f003 030f 	and.w	r3, r3, #15
 80030da:	3b04      	subs	r3, #4
 80030dc:	0112      	lsls	r2, r2, #4
 80030de:	b2d2      	uxtb	r2, r2
 80030e0:	440b      	add	r3, r1
 80030e2:	761a      	strb	r2, [r3, #24]
}
 80030e4:	bf00      	nop
 80030e6:	370c      	adds	r7, #12
 80030e8:	46bd      	mov	sp, r7
 80030ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ee:	4770      	bx	lr
 80030f0:	e000e100 	.word	0xe000e100
 80030f4:	e000ed00 	.word	0xe000ed00

080030f8 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80030f8:	b580      	push	{r7, lr}
 80030fa:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80030fc:	4b05      	ldr	r3, [pc, #20]	; (8003114 <SysTick_Handler+0x1c>)
 80030fe:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8003100:	f001 fd28 	bl	8004b54 <xTaskGetSchedulerState>
 8003104:	4603      	mov	r3, r0
 8003106:	2b01      	cmp	r3, #1
 8003108:	d001      	beq.n	800310e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800310a:	f002 fb0d 	bl	8005728 <xPortSysTickHandler>
  }
}
 800310e:	bf00      	nop
 8003110:	bd80      	pop	{r7, pc}
 8003112:	bf00      	nop
 8003114:	e000e010 	.word	0xe000e010

08003118 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8003118:	b580      	push	{r7, lr}
 800311a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800311c:	2100      	movs	r1, #0
 800311e:	f06f 0004 	mvn.w	r0, #4
 8003122:	f7ff ffbf 	bl	80030a4 <__NVIC_SetPriority>
#endif
}
 8003126:	bf00      	nop
 8003128:	bd80      	pop	{r7, pc}
	...

0800312c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800312c:	b480      	push	{r7}
 800312e:	b083      	sub	sp, #12
 8003130:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003132:	f3ef 8305 	mrs	r3, IPSR
 8003136:	603b      	str	r3, [r7, #0]
  return(result);
 8003138:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800313a:	2b00      	cmp	r3, #0
 800313c:	d003      	beq.n	8003146 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800313e:	f06f 0305 	mvn.w	r3, #5
 8003142:	607b      	str	r3, [r7, #4]
 8003144:	e00c      	b.n	8003160 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8003146:	4b0a      	ldr	r3, [pc, #40]	; (8003170 <osKernelInitialize+0x44>)
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	2b00      	cmp	r3, #0
 800314c:	d105      	bne.n	800315a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800314e:	4b08      	ldr	r3, [pc, #32]	; (8003170 <osKernelInitialize+0x44>)
 8003150:	2201      	movs	r2, #1
 8003152:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003154:	2300      	movs	r3, #0
 8003156:	607b      	str	r3, [r7, #4]
 8003158:	e002      	b.n	8003160 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800315a:	f04f 33ff 	mov.w	r3, #4294967295
 800315e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003160:	687b      	ldr	r3, [r7, #4]
}
 8003162:	4618      	mov	r0, r3
 8003164:	370c      	adds	r7, #12
 8003166:	46bd      	mov	sp, r7
 8003168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316c:	4770      	bx	lr
 800316e:	bf00      	nop
 8003170:	20000140 	.word	0x20000140

08003174 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003174:	b580      	push	{r7, lr}
 8003176:	b082      	sub	sp, #8
 8003178:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800317a:	f3ef 8305 	mrs	r3, IPSR
 800317e:	603b      	str	r3, [r7, #0]
  return(result);
 8003180:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003182:	2b00      	cmp	r3, #0
 8003184:	d003      	beq.n	800318e <osKernelStart+0x1a>
    stat = osErrorISR;
 8003186:	f06f 0305 	mvn.w	r3, #5
 800318a:	607b      	str	r3, [r7, #4]
 800318c:	e010      	b.n	80031b0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800318e:	4b0b      	ldr	r3, [pc, #44]	; (80031bc <osKernelStart+0x48>)
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	2b01      	cmp	r3, #1
 8003194:	d109      	bne.n	80031aa <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8003196:	f7ff ffbf 	bl	8003118 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800319a:	4b08      	ldr	r3, [pc, #32]	; (80031bc <osKernelStart+0x48>)
 800319c:	2202      	movs	r2, #2
 800319e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80031a0:	f001 f87c 	bl	800429c <vTaskStartScheduler>
      stat = osOK;
 80031a4:	2300      	movs	r3, #0
 80031a6:	607b      	str	r3, [r7, #4]
 80031a8:	e002      	b.n	80031b0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80031aa:	f04f 33ff 	mov.w	r3, #4294967295
 80031ae:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80031b0:	687b      	ldr	r3, [r7, #4]
}
 80031b2:	4618      	mov	r0, r3
 80031b4:	3708      	adds	r7, #8
 80031b6:	46bd      	mov	sp, r7
 80031b8:	bd80      	pop	{r7, pc}
 80031ba:	bf00      	nop
 80031bc:	20000140 	.word	0x20000140

080031c0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b08e      	sub	sp, #56	; 0x38
 80031c4:	af04      	add	r7, sp, #16
 80031c6:	60f8      	str	r0, [r7, #12]
 80031c8:	60b9      	str	r1, [r7, #8]
 80031ca:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80031cc:	2300      	movs	r3, #0
 80031ce:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80031d0:	f3ef 8305 	mrs	r3, IPSR
 80031d4:	617b      	str	r3, [r7, #20]
  return(result);
 80031d6:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d17e      	bne.n	80032da <osThreadNew+0x11a>
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d07b      	beq.n	80032da <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80031e2:	2380      	movs	r3, #128	; 0x80
 80031e4:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80031e6:	2318      	movs	r3, #24
 80031e8:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80031ea:	2300      	movs	r3, #0
 80031ec:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80031ee:	f04f 33ff 	mov.w	r3, #4294967295
 80031f2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d045      	beq.n	8003286 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d002      	beq.n	8003208 <osThreadNew+0x48>
        name = attr->name;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	699b      	ldr	r3, [r3, #24]
 800320c:	2b00      	cmp	r3, #0
 800320e:	d002      	beq.n	8003216 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	699b      	ldr	r3, [r3, #24]
 8003214:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003216:	69fb      	ldr	r3, [r7, #28]
 8003218:	2b00      	cmp	r3, #0
 800321a:	d008      	beq.n	800322e <osThreadNew+0x6e>
 800321c:	69fb      	ldr	r3, [r7, #28]
 800321e:	2b38      	cmp	r3, #56	; 0x38
 8003220:	d805      	bhi.n	800322e <osThreadNew+0x6e>
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	685b      	ldr	r3, [r3, #4]
 8003226:	f003 0301 	and.w	r3, r3, #1
 800322a:	2b00      	cmp	r3, #0
 800322c:	d001      	beq.n	8003232 <osThreadNew+0x72>
        return (NULL);
 800322e:	2300      	movs	r3, #0
 8003230:	e054      	b.n	80032dc <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	695b      	ldr	r3, [r3, #20]
 8003236:	2b00      	cmp	r3, #0
 8003238:	d003      	beq.n	8003242 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	695b      	ldr	r3, [r3, #20]
 800323e:	089b      	lsrs	r3, r3, #2
 8003240:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	689b      	ldr	r3, [r3, #8]
 8003246:	2b00      	cmp	r3, #0
 8003248:	d00e      	beq.n	8003268 <osThreadNew+0xa8>
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	68db      	ldr	r3, [r3, #12]
 800324e:	2bbb      	cmp	r3, #187	; 0xbb
 8003250:	d90a      	bls.n	8003268 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003256:	2b00      	cmp	r3, #0
 8003258:	d006      	beq.n	8003268 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	695b      	ldr	r3, [r3, #20]
 800325e:	2b00      	cmp	r3, #0
 8003260:	d002      	beq.n	8003268 <osThreadNew+0xa8>
        mem = 1;
 8003262:	2301      	movs	r3, #1
 8003264:	61bb      	str	r3, [r7, #24]
 8003266:	e010      	b.n	800328a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	689b      	ldr	r3, [r3, #8]
 800326c:	2b00      	cmp	r3, #0
 800326e:	d10c      	bne.n	800328a <osThreadNew+0xca>
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	68db      	ldr	r3, [r3, #12]
 8003274:	2b00      	cmp	r3, #0
 8003276:	d108      	bne.n	800328a <osThreadNew+0xca>
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	691b      	ldr	r3, [r3, #16]
 800327c:	2b00      	cmp	r3, #0
 800327e:	d104      	bne.n	800328a <osThreadNew+0xca>
          mem = 0;
 8003280:	2300      	movs	r3, #0
 8003282:	61bb      	str	r3, [r7, #24]
 8003284:	e001      	b.n	800328a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8003286:	2300      	movs	r3, #0
 8003288:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800328a:	69bb      	ldr	r3, [r7, #24]
 800328c:	2b01      	cmp	r3, #1
 800328e:	d110      	bne.n	80032b2 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8003294:	687a      	ldr	r2, [r7, #4]
 8003296:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003298:	9202      	str	r2, [sp, #8]
 800329a:	9301      	str	r3, [sp, #4]
 800329c:	69fb      	ldr	r3, [r7, #28]
 800329e:	9300      	str	r3, [sp, #0]
 80032a0:	68bb      	ldr	r3, [r7, #8]
 80032a2:	6a3a      	ldr	r2, [r7, #32]
 80032a4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80032a6:	68f8      	ldr	r0, [r7, #12]
 80032a8:	f000 fe0c 	bl	8003ec4 <xTaskCreateStatic>
 80032ac:	4603      	mov	r3, r0
 80032ae:	613b      	str	r3, [r7, #16]
 80032b0:	e013      	b.n	80032da <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80032b2:	69bb      	ldr	r3, [r7, #24]
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d110      	bne.n	80032da <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80032b8:	6a3b      	ldr	r3, [r7, #32]
 80032ba:	b29a      	uxth	r2, r3
 80032bc:	f107 0310 	add.w	r3, r7, #16
 80032c0:	9301      	str	r3, [sp, #4]
 80032c2:	69fb      	ldr	r3, [r7, #28]
 80032c4:	9300      	str	r3, [sp, #0]
 80032c6:	68bb      	ldr	r3, [r7, #8]
 80032c8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80032ca:	68f8      	ldr	r0, [r7, #12]
 80032cc:	f000 fe57 	bl	8003f7e <xTaskCreate>
 80032d0:	4603      	mov	r3, r0
 80032d2:	2b01      	cmp	r3, #1
 80032d4:	d001      	beq.n	80032da <osThreadNew+0x11a>
            hTask = NULL;
 80032d6:	2300      	movs	r3, #0
 80032d8:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80032da:	693b      	ldr	r3, [r7, #16]
}
 80032dc:	4618      	mov	r0, r3
 80032de:	3728      	adds	r7, #40	; 0x28
 80032e0:	46bd      	mov	sp, r7
 80032e2:	bd80      	pop	{r7, pc}

080032e4 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b084      	sub	sp, #16
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80032ec:	f3ef 8305 	mrs	r3, IPSR
 80032f0:	60bb      	str	r3, [r7, #8]
  return(result);
 80032f2:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d003      	beq.n	8003300 <osDelay+0x1c>
    stat = osErrorISR;
 80032f8:	f06f 0305 	mvn.w	r3, #5
 80032fc:	60fb      	str	r3, [r7, #12]
 80032fe:	e007      	b.n	8003310 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8003300:	2300      	movs	r3, #0
 8003302:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2b00      	cmp	r3, #0
 8003308:	d002      	beq.n	8003310 <osDelay+0x2c>
      vTaskDelay(ticks);
 800330a:	6878      	ldr	r0, [r7, #4]
 800330c:	f000 ff92 	bl	8004234 <vTaskDelay>
    }
  }

  return (stat);
 8003310:	68fb      	ldr	r3, [r7, #12]
}
 8003312:	4618      	mov	r0, r3
 8003314:	3710      	adds	r7, #16
 8003316:	46bd      	mov	sp, r7
 8003318:	bd80      	pop	{r7, pc}
	...

0800331c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800331c:	b480      	push	{r7}
 800331e:	b085      	sub	sp, #20
 8003320:	af00      	add	r7, sp, #0
 8003322:	60f8      	str	r0, [r7, #12]
 8003324:	60b9      	str	r1, [r7, #8]
 8003326:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	4a07      	ldr	r2, [pc, #28]	; (8003348 <vApplicationGetIdleTaskMemory+0x2c>)
 800332c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800332e:	68bb      	ldr	r3, [r7, #8]
 8003330:	4a06      	ldr	r2, [pc, #24]	; (800334c <vApplicationGetIdleTaskMemory+0x30>)
 8003332:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2280      	movs	r2, #128	; 0x80
 8003338:	601a      	str	r2, [r3, #0]
}
 800333a:	bf00      	nop
 800333c:	3714      	adds	r7, #20
 800333e:	46bd      	mov	sp, r7
 8003340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003344:	4770      	bx	lr
 8003346:	bf00      	nop
 8003348:	20000144 	.word	0x20000144
 800334c:	20000200 	.word	0x20000200

08003350 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003350:	b480      	push	{r7}
 8003352:	b085      	sub	sp, #20
 8003354:	af00      	add	r7, sp, #0
 8003356:	60f8      	str	r0, [r7, #12]
 8003358:	60b9      	str	r1, [r7, #8]
 800335a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	4a07      	ldr	r2, [pc, #28]	; (800337c <vApplicationGetTimerTaskMemory+0x2c>)
 8003360:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003362:	68bb      	ldr	r3, [r7, #8]
 8003364:	4a06      	ldr	r2, [pc, #24]	; (8003380 <vApplicationGetTimerTaskMemory+0x30>)
 8003366:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800336e:	601a      	str	r2, [r3, #0]
}
 8003370:	bf00      	nop
 8003372:	3714      	adds	r7, #20
 8003374:	46bd      	mov	sp, r7
 8003376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337a:	4770      	bx	lr
 800337c:	20000400 	.word	0x20000400
 8003380:	200004bc 	.word	0x200004bc

08003384 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003384:	b480      	push	{r7}
 8003386:	b083      	sub	sp, #12
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	f103 0208 	add.w	r2, r3, #8
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	f04f 32ff 	mov.w	r2, #4294967295
 800339c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	f103 0208 	add.w	r2, r3, #8
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	f103 0208 	add.w	r2, r3, #8
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	2200      	movs	r2, #0
 80033b6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80033b8:	bf00      	nop
 80033ba:	370c      	adds	r7, #12
 80033bc:	46bd      	mov	sp, r7
 80033be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c2:	4770      	bx	lr

080033c4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80033c4:	b480      	push	{r7}
 80033c6:	b083      	sub	sp, #12
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2200      	movs	r2, #0
 80033d0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80033d2:	bf00      	nop
 80033d4:	370c      	adds	r7, #12
 80033d6:	46bd      	mov	sp, r7
 80033d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033dc:	4770      	bx	lr

080033de <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80033de:	b480      	push	{r7}
 80033e0:	b085      	sub	sp, #20
 80033e2:	af00      	add	r7, sp, #0
 80033e4:	6078      	str	r0, [r7, #4]
 80033e6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	685b      	ldr	r3, [r3, #4]
 80033ec:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	68fa      	ldr	r2, [r7, #12]
 80033f2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	689a      	ldr	r2, [r3, #8]
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	689b      	ldr	r3, [r3, #8]
 8003400:	683a      	ldr	r2, [r7, #0]
 8003402:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	683a      	ldr	r2, [r7, #0]
 8003408:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	687a      	ldr	r2, [r7, #4]
 800340e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	1c5a      	adds	r2, r3, #1
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	601a      	str	r2, [r3, #0]
}
 800341a:	bf00      	nop
 800341c:	3714      	adds	r7, #20
 800341e:	46bd      	mov	sp, r7
 8003420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003424:	4770      	bx	lr

08003426 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003426:	b480      	push	{r7}
 8003428:	b085      	sub	sp, #20
 800342a:	af00      	add	r7, sp, #0
 800342c:	6078      	str	r0, [r7, #4]
 800342e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003436:	68bb      	ldr	r3, [r7, #8]
 8003438:	f1b3 3fff 	cmp.w	r3, #4294967295
 800343c:	d103      	bne.n	8003446 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	691b      	ldr	r3, [r3, #16]
 8003442:	60fb      	str	r3, [r7, #12]
 8003444:	e00c      	b.n	8003460 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	3308      	adds	r3, #8
 800344a:	60fb      	str	r3, [r7, #12]
 800344c:	e002      	b.n	8003454 <vListInsert+0x2e>
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	685b      	ldr	r3, [r3, #4]
 8003452:	60fb      	str	r3, [r7, #12]
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	685b      	ldr	r3, [r3, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	68ba      	ldr	r2, [r7, #8]
 800345c:	429a      	cmp	r2, r3
 800345e:	d2f6      	bcs.n	800344e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	685a      	ldr	r2, [r3, #4]
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	685b      	ldr	r3, [r3, #4]
 800346c:	683a      	ldr	r2, [r7, #0]
 800346e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	68fa      	ldr	r2, [r7, #12]
 8003474:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	683a      	ldr	r2, [r7, #0]
 800347a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	687a      	ldr	r2, [r7, #4]
 8003480:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	1c5a      	adds	r2, r3, #1
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	601a      	str	r2, [r3, #0]
}
 800348c:	bf00      	nop
 800348e:	3714      	adds	r7, #20
 8003490:	46bd      	mov	sp, r7
 8003492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003496:	4770      	bx	lr

08003498 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003498:	b480      	push	{r7}
 800349a:	b085      	sub	sp, #20
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	691b      	ldr	r3, [r3, #16]
 80034a4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	685b      	ldr	r3, [r3, #4]
 80034aa:	687a      	ldr	r2, [r7, #4]
 80034ac:	6892      	ldr	r2, [r2, #8]
 80034ae:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	689b      	ldr	r3, [r3, #8]
 80034b4:	687a      	ldr	r2, [r7, #4]
 80034b6:	6852      	ldr	r2, [r2, #4]
 80034b8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	685b      	ldr	r3, [r3, #4]
 80034be:	687a      	ldr	r2, [r7, #4]
 80034c0:	429a      	cmp	r2, r3
 80034c2:	d103      	bne.n	80034cc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	689a      	ldr	r2, [r3, #8]
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2200      	movs	r2, #0
 80034d0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	1e5a      	subs	r2, r3, #1
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	681b      	ldr	r3, [r3, #0]
}
 80034e0:	4618      	mov	r0, r3
 80034e2:	3714      	adds	r7, #20
 80034e4:	46bd      	mov	sp, r7
 80034e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ea:	4770      	bx	lr

080034ec <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b084      	sub	sp, #16
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
 80034f4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d10a      	bne.n	8003516 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003500:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003504:	f383 8811 	msr	BASEPRI, r3
 8003508:	f3bf 8f6f 	isb	sy
 800350c:	f3bf 8f4f 	dsb	sy
 8003510:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003512:	bf00      	nop
 8003514:	e7fe      	b.n	8003514 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003516:	f002 f875 	bl	8005604 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	681a      	ldr	r2, [r3, #0]
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003522:	68f9      	ldr	r1, [r7, #12]
 8003524:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003526:	fb01 f303 	mul.w	r3, r1, r3
 800352a:	441a      	add	r2, r3
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	2200      	movs	r2, #0
 8003534:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	681a      	ldr	r2, [r3, #0]
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	681a      	ldr	r2, [r3, #0]
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003546:	3b01      	subs	r3, #1
 8003548:	68f9      	ldr	r1, [r7, #12]
 800354a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800354c:	fb01 f303 	mul.w	r3, r1, r3
 8003550:	441a      	add	r2, r3
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	22ff      	movs	r2, #255	; 0xff
 800355a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	22ff      	movs	r2, #255	; 0xff
 8003562:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003566:	683b      	ldr	r3, [r7, #0]
 8003568:	2b00      	cmp	r3, #0
 800356a:	d114      	bne.n	8003596 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	691b      	ldr	r3, [r3, #16]
 8003570:	2b00      	cmp	r3, #0
 8003572:	d01a      	beq.n	80035aa <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	3310      	adds	r3, #16
 8003578:	4618      	mov	r0, r3
 800357a:	f001 f929 	bl	80047d0 <xTaskRemoveFromEventList>
 800357e:	4603      	mov	r3, r0
 8003580:	2b00      	cmp	r3, #0
 8003582:	d012      	beq.n	80035aa <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003584:	4b0c      	ldr	r3, [pc, #48]	; (80035b8 <xQueueGenericReset+0xcc>)
 8003586:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800358a:	601a      	str	r2, [r3, #0]
 800358c:	f3bf 8f4f 	dsb	sy
 8003590:	f3bf 8f6f 	isb	sy
 8003594:	e009      	b.n	80035aa <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	3310      	adds	r3, #16
 800359a:	4618      	mov	r0, r3
 800359c:	f7ff fef2 	bl	8003384 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	3324      	adds	r3, #36	; 0x24
 80035a4:	4618      	mov	r0, r3
 80035a6:	f7ff feed 	bl	8003384 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80035aa:	f002 f85b 	bl	8005664 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80035ae:	2301      	movs	r3, #1
}
 80035b0:	4618      	mov	r0, r3
 80035b2:	3710      	adds	r7, #16
 80035b4:	46bd      	mov	sp, r7
 80035b6:	bd80      	pop	{r7, pc}
 80035b8:	e000ed04 	.word	0xe000ed04

080035bc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80035bc:	b580      	push	{r7, lr}
 80035be:	b08e      	sub	sp, #56	; 0x38
 80035c0:	af02      	add	r7, sp, #8
 80035c2:	60f8      	str	r0, [r7, #12]
 80035c4:	60b9      	str	r1, [r7, #8]
 80035c6:	607a      	str	r2, [r7, #4]
 80035c8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d10a      	bne.n	80035e6 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80035d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035d4:	f383 8811 	msr	BASEPRI, r3
 80035d8:	f3bf 8f6f 	isb	sy
 80035dc:	f3bf 8f4f 	dsb	sy
 80035e0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80035e2:	bf00      	nop
 80035e4:	e7fe      	b.n	80035e4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d10a      	bne.n	8003602 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80035ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035f0:	f383 8811 	msr	BASEPRI, r3
 80035f4:	f3bf 8f6f 	isb	sy
 80035f8:	f3bf 8f4f 	dsb	sy
 80035fc:	627b      	str	r3, [r7, #36]	; 0x24
}
 80035fe:	bf00      	nop
 8003600:	e7fe      	b.n	8003600 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2b00      	cmp	r3, #0
 8003606:	d002      	beq.n	800360e <xQueueGenericCreateStatic+0x52>
 8003608:	68bb      	ldr	r3, [r7, #8]
 800360a:	2b00      	cmp	r3, #0
 800360c:	d001      	beq.n	8003612 <xQueueGenericCreateStatic+0x56>
 800360e:	2301      	movs	r3, #1
 8003610:	e000      	b.n	8003614 <xQueueGenericCreateStatic+0x58>
 8003612:	2300      	movs	r3, #0
 8003614:	2b00      	cmp	r3, #0
 8003616:	d10a      	bne.n	800362e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8003618:	f04f 0350 	mov.w	r3, #80	; 0x50
 800361c:	f383 8811 	msr	BASEPRI, r3
 8003620:	f3bf 8f6f 	isb	sy
 8003624:	f3bf 8f4f 	dsb	sy
 8003628:	623b      	str	r3, [r7, #32]
}
 800362a:	bf00      	nop
 800362c:	e7fe      	b.n	800362c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	2b00      	cmp	r3, #0
 8003632:	d102      	bne.n	800363a <xQueueGenericCreateStatic+0x7e>
 8003634:	68bb      	ldr	r3, [r7, #8]
 8003636:	2b00      	cmp	r3, #0
 8003638:	d101      	bne.n	800363e <xQueueGenericCreateStatic+0x82>
 800363a:	2301      	movs	r3, #1
 800363c:	e000      	b.n	8003640 <xQueueGenericCreateStatic+0x84>
 800363e:	2300      	movs	r3, #0
 8003640:	2b00      	cmp	r3, #0
 8003642:	d10a      	bne.n	800365a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8003644:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003648:	f383 8811 	msr	BASEPRI, r3
 800364c:	f3bf 8f6f 	isb	sy
 8003650:	f3bf 8f4f 	dsb	sy
 8003654:	61fb      	str	r3, [r7, #28]
}
 8003656:	bf00      	nop
 8003658:	e7fe      	b.n	8003658 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800365a:	2350      	movs	r3, #80	; 0x50
 800365c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800365e:	697b      	ldr	r3, [r7, #20]
 8003660:	2b50      	cmp	r3, #80	; 0x50
 8003662:	d00a      	beq.n	800367a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8003664:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003668:	f383 8811 	msr	BASEPRI, r3
 800366c:	f3bf 8f6f 	isb	sy
 8003670:	f3bf 8f4f 	dsb	sy
 8003674:	61bb      	str	r3, [r7, #24]
}
 8003676:	bf00      	nop
 8003678:	e7fe      	b.n	8003678 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800367a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8003680:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003682:	2b00      	cmp	r3, #0
 8003684:	d00d      	beq.n	80036a2 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003686:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003688:	2201      	movs	r2, #1
 800368a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800368e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8003692:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003694:	9300      	str	r3, [sp, #0]
 8003696:	4613      	mov	r3, r2
 8003698:	687a      	ldr	r2, [r7, #4]
 800369a:	68b9      	ldr	r1, [r7, #8]
 800369c:	68f8      	ldr	r0, [r7, #12]
 800369e:	f000 f805 	bl	80036ac <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80036a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80036a4:	4618      	mov	r0, r3
 80036a6:	3730      	adds	r7, #48	; 0x30
 80036a8:	46bd      	mov	sp, r7
 80036aa:	bd80      	pop	{r7, pc}

080036ac <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b084      	sub	sp, #16
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	60f8      	str	r0, [r7, #12]
 80036b4:	60b9      	str	r1, [r7, #8]
 80036b6:	607a      	str	r2, [r7, #4]
 80036b8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80036ba:	68bb      	ldr	r3, [r7, #8]
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d103      	bne.n	80036c8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80036c0:	69bb      	ldr	r3, [r7, #24]
 80036c2:	69ba      	ldr	r2, [r7, #24]
 80036c4:	601a      	str	r2, [r3, #0]
 80036c6:	e002      	b.n	80036ce <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80036c8:	69bb      	ldr	r3, [r7, #24]
 80036ca:	687a      	ldr	r2, [r7, #4]
 80036cc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80036ce:	69bb      	ldr	r3, [r7, #24]
 80036d0:	68fa      	ldr	r2, [r7, #12]
 80036d2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80036d4:	69bb      	ldr	r3, [r7, #24]
 80036d6:	68ba      	ldr	r2, [r7, #8]
 80036d8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80036da:	2101      	movs	r1, #1
 80036dc:	69b8      	ldr	r0, [r7, #24]
 80036de:	f7ff ff05 	bl	80034ec <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80036e2:	69bb      	ldr	r3, [r7, #24]
 80036e4:	78fa      	ldrb	r2, [r7, #3]
 80036e6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80036ea:	bf00      	nop
 80036ec:	3710      	adds	r7, #16
 80036ee:	46bd      	mov	sp, r7
 80036f0:	bd80      	pop	{r7, pc}
	...

080036f4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b08e      	sub	sp, #56	; 0x38
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	60f8      	str	r0, [r7, #12]
 80036fc:	60b9      	str	r1, [r7, #8]
 80036fe:	607a      	str	r2, [r7, #4]
 8003700:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003702:	2300      	movs	r3, #0
 8003704:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800370a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800370c:	2b00      	cmp	r3, #0
 800370e:	d10a      	bne.n	8003726 <xQueueGenericSend+0x32>
	__asm volatile
 8003710:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003714:	f383 8811 	msr	BASEPRI, r3
 8003718:	f3bf 8f6f 	isb	sy
 800371c:	f3bf 8f4f 	dsb	sy
 8003720:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003722:	bf00      	nop
 8003724:	e7fe      	b.n	8003724 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003726:	68bb      	ldr	r3, [r7, #8]
 8003728:	2b00      	cmp	r3, #0
 800372a:	d103      	bne.n	8003734 <xQueueGenericSend+0x40>
 800372c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800372e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003730:	2b00      	cmp	r3, #0
 8003732:	d101      	bne.n	8003738 <xQueueGenericSend+0x44>
 8003734:	2301      	movs	r3, #1
 8003736:	e000      	b.n	800373a <xQueueGenericSend+0x46>
 8003738:	2300      	movs	r3, #0
 800373a:	2b00      	cmp	r3, #0
 800373c:	d10a      	bne.n	8003754 <xQueueGenericSend+0x60>
	__asm volatile
 800373e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003742:	f383 8811 	msr	BASEPRI, r3
 8003746:	f3bf 8f6f 	isb	sy
 800374a:	f3bf 8f4f 	dsb	sy
 800374e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003750:	bf00      	nop
 8003752:	e7fe      	b.n	8003752 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	2b02      	cmp	r3, #2
 8003758:	d103      	bne.n	8003762 <xQueueGenericSend+0x6e>
 800375a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800375c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800375e:	2b01      	cmp	r3, #1
 8003760:	d101      	bne.n	8003766 <xQueueGenericSend+0x72>
 8003762:	2301      	movs	r3, #1
 8003764:	e000      	b.n	8003768 <xQueueGenericSend+0x74>
 8003766:	2300      	movs	r3, #0
 8003768:	2b00      	cmp	r3, #0
 800376a:	d10a      	bne.n	8003782 <xQueueGenericSend+0x8e>
	__asm volatile
 800376c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003770:	f383 8811 	msr	BASEPRI, r3
 8003774:	f3bf 8f6f 	isb	sy
 8003778:	f3bf 8f4f 	dsb	sy
 800377c:	623b      	str	r3, [r7, #32]
}
 800377e:	bf00      	nop
 8003780:	e7fe      	b.n	8003780 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003782:	f001 f9e7 	bl	8004b54 <xTaskGetSchedulerState>
 8003786:	4603      	mov	r3, r0
 8003788:	2b00      	cmp	r3, #0
 800378a:	d102      	bne.n	8003792 <xQueueGenericSend+0x9e>
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2b00      	cmp	r3, #0
 8003790:	d101      	bne.n	8003796 <xQueueGenericSend+0xa2>
 8003792:	2301      	movs	r3, #1
 8003794:	e000      	b.n	8003798 <xQueueGenericSend+0xa4>
 8003796:	2300      	movs	r3, #0
 8003798:	2b00      	cmp	r3, #0
 800379a:	d10a      	bne.n	80037b2 <xQueueGenericSend+0xbe>
	__asm volatile
 800379c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037a0:	f383 8811 	msr	BASEPRI, r3
 80037a4:	f3bf 8f6f 	isb	sy
 80037a8:	f3bf 8f4f 	dsb	sy
 80037ac:	61fb      	str	r3, [r7, #28]
}
 80037ae:	bf00      	nop
 80037b0:	e7fe      	b.n	80037b0 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80037b2:	f001 ff27 	bl	8005604 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80037b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80037ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037be:	429a      	cmp	r2, r3
 80037c0:	d302      	bcc.n	80037c8 <xQueueGenericSend+0xd4>
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	2b02      	cmp	r3, #2
 80037c6:	d129      	bne.n	800381c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80037c8:	683a      	ldr	r2, [r7, #0]
 80037ca:	68b9      	ldr	r1, [r7, #8]
 80037cc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80037ce:	f000 fa0b 	bl	8003be8 <prvCopyDataToQueue>
 80037d2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80037d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d010      	beq.n	80037fe <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80037dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037de:	3324      	adds	r3, #36	; 0x24
 80037e0:	4618      	mov	r0, r3
 80037e2:	f000 fff5 	bl	80047d0 <xTaskRemoveFromEventList>
 80037e6:	4603      	mov	r3, r0
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d013      	beq.n	8003814 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80037ec:	4b3f      	ldr	r3, [pc, #252]	; (80038ec <xQueueGenericSend+0x1f8>)
 80037ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80037f2:	601a      	str	r2, [r3, #0]
 80037f4:	f3bf 8f4f 	dsb	sy
 80037f8:	f3bf 8f6f 	isb	sy
 80037fc:	e00a      	b.n	8003814 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80037fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003800:	2b00      	cmp	r3, #0
 8003802:	d007      	beq.n	8003814 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003804:	4b39      	ldr	r3, [pc, #228]	; (80038ec <xQueueGenericSend+0x1f8>)
 8003806:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800380a:	601a      	str	r2, [r3, #0]
 800380c:	f3bf 8f4f 	dsb	sy
 8003810:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003814:	f001 ff26 	bl	8005664 <vPortExitCritical>
				return pdPASS;
 8003818:	2301      	movs	r3, #1
 800381a:	e063      	b.n	80038e4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2b00      	cmp	r3, #0
 8003820:	d103      	bne.n	800382a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003822:	f001 ff1f 	bl	8005664 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003826:	2300      	movs	r3, #0
 8003828:	e05c      	b.n	80038e4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800382a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800382c:	2b00      	cmp	r3, #0
 800382e:	d106      	bne.n	800383e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003830:	f107 0314 	add.w	r3, r7, #20
 8003834:	4618      	mov	r0, r3
 8003836:	f001 f82f 	bl	8004898 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800383a:	2301      	movs	r3, #1
 800383c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800383e:	f001 ff11 	bl	8005664 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003842:	f000 fd9b 	bl	800437c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003846:	f001 fedd 	bl	8005604 <vPortEnterCritical>
 800384a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800384c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003850:	b25b      	sxtb	r3, r3
 8003852:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003856:	d103      	bne.n	8003860 <xQueueGenericSend+0x16c>
 8003858:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800385a:	2200      	movs	r2, #0
 800385c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003860:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003862:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003866:	b25b      	sxtb	r3, r3
 8003868:	f1b3 3fff 	cmp.w	r3, #4294967295
 800386c:	d103      	bne.n	8003876 <xQueueGenericSend+0x182>
 800386e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003870:	2200      	movs	r2, #0
 8003872:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003876:	f001 fef5 	bl	8005664 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800387a:	1d3a      	adds	r2, r7, #4
 800387c:	f107 0314 	add.w	r3, r7, #20
 8003880:	4611      	mov	r1, r2
 8003882:	4618      	mov	r0, r3
 8003884:	f001 f81e 	bl	80048c4 <xTaskCheckForTimeOut>
 8003888:	4603      	mov	r3, r0
 800388a:	2b00      	cmp	r3, #0
 800388c:	d124      	bne.n	80038d8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800388e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003890:	f000 faa2 	bl	8003dd8 <prvIsQueueFull>
 8003894:	4603      	mov	r3, r0
 8003896:	2b00      	cmp	r3, #0
 8003898:	d018      	beq.n	80038cc <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800389a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800389c:	3310      	adds	r3, #16
 800389e:	687a      	ldr	r2, [r7, #4]
 80038a0:	4611      	mov	r1, r2
 80038a2:	4618      	mov	r0, r3
 80038a4:	f000 ff44 	bl	8004730 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80038a8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80038aa:	f000 fa2d 	bl	8003d08 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80038ae:	f000 fd73 	bl	8004398 <xTaskResumeAll>
 80038b2:	4603      	mov	r3, r0
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	f47f af7c 	bne.w	80037b2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80038ba:	4b0c      	ldr	r3, [pc, #48]	; (80038ec <xQueueGenericSend+0x1f8>)
 80038bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80038c0:	601a      	str	r2, [r3, #0]
 80038c2:	f3bf 8f4f 	dsb	sy
 80038c6:	f3bf 8f6f 	isb	sy
 80038ca:	e772      	b.n	80037b2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80038cc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80038ce:	f000 fa1b 	bl	8003d08 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80038d2:	f000 fd61 	bl	8004398 <xTaskResumeAll>
 80038d6:	e76c      	b.n	80037b2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80038d8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80038da:	f000 fa15 	bl	8003d08 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80038de:	f000 fd5b 	bl	8004398 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80038e2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80038e4:	4618      	mov	r0, r3
 80038e6:	3738      	adds	r7, #56	; 0x38
 80038e8:	46bd      	mov	sp, r7
 80038ea:	bd80      	pop	{r7, pc}
 80038ec:	e000ed04 	.word	0xe000ed04

080038f0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b090      	sub	sp, #64	; 0x40
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	60f8      	str	r0, [r7, #12]
 80038f8:	60b9      	str	r1, [r7, #8]
 80038fa:	607a      	str	r2, [r7, #4]
 80038fc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8003902:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003904:	2b00      	cmp	r3, #0
 8003906:	d10a      	bne.n	800391e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8003908:	f04f 0350 	mov.w	r3, #80	; 0x50
 800390c:	f383 8811 	msr	BASEPRI, r3
 8003910:	f3bf 8f6f 	isb	sy
 8003914:	f3bf 8f4f 	dsb	sy
 8003918:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800391a:	bf00      	nop
 800391c:	e7fe      	b.n	800391c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800391e:	68bb      	ldr	r3, [r7, #8]
 8003920:	2b00      	cmp	r3, #0
 8003922:	d103      	bne.n	800392c <xQueueGenericSendFromISR+0x3c>
 8003924:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003926:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003928:	2b00      	cmp	r3, #0
 800392a:	d101      	bne.n	8003930 <xQueueGenericSendFromISR+0x40>
 800392c:	2301      	movs	r3, #1
 800392e:	e000      	b.n	8003932 <xQueueGenericSendFromISR+0x42>
 8003930:	2300      	movs	r3, #0
 8003932:	2b00      	cmp	r3, #0
 8003934:	d10a      	bne.n	800394c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8003936:	f04f 0350 	mov.w	r3, #80	; 0x50
 800393a:	f383 8811 	msr	BASEPRI, r3
 800393e:	f3bf 8f6f 	isb	sy
 8003942:	f3bf 8f4f 	dsb	sy
 8003946:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003948:	bf00      	nop
 800394a:	e7fe      	b.n	800394a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	2b02      	cmp	r3, #2
 8003950:	d103      	bne.n	800395a <xQueueGenericSendFromISR+0x6a>
 8003952:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003954:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003956:	2b01      	cmp	r3, #1
 8003958:	d101      	bne.n	800395e <xQueueGenericSendFromISR+0x6e>
 800395a:	2301      	movs	r3, #1
 800395c:	e000      	b.n	8003960 <xQueueGenericSendFromISR+0x70>
 800395e:	2300      	movs	r3, #0
 8003960:	2b00      	cmp	r3, #0
 8003962:	d10a      	bne.n	800397a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8003964:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003968:	f383 8811 	msr	BASEPRI, r3
 800396c:	f3bf 8f6f 	isb	sy
 8003970:	f3bf 8f4f 	dsb	sy
 8003974:	623b      	str	r3, [r7, #32]
}
 8003976:	bf00      	nop
 8003978:	e7fe      	b.n	8003978 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800397a:	f001 ff25 	bl	80057c8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800397e:	f3ef 8211 	mrs	r2, BASEPRI
 8003982:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003986:	f383 8811 	msr	BASEPRI, r3
 800398a:	f3bf 8f6f 	isb	sy
 800398e:	f3bf 8f4f 	dsb	sy
 8003992:	61fa      	str	r2, [r7, #28]
 8003994:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003996:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003998:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800399a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800399c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800399e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039a2:	429a      	cmp	r2, r3
 80039a4:	d302      	bcc.n	80039ac <xQueueGenericSendFromISR+0xbc>
 80039a6:	683b      	ldr	r3, [r7, #0]
 80039a8:	2b02      	cmp	r3, #2
 80039aa:	d12f      	bne.n	8003a0c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80039ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039ae:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80039b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80039b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039ba:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80039bc:	683a      	ldr	r2, [r7, #0]
 80039be:	68b9      	ldr	r1, [r7, #8]
 80039c0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80039c2:	f000 f911 	bl	8003be8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80039c6:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80039ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039ce:	d112      	bne.n	80039f6 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80039d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d016      	beq.n	8003a06 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80039d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039da:	3324      	adds	r3, #36	; 0x24
 80039dc:	4618      	mov	r0, r3
 80039de:	f000 fef7 	bl	80047d0 <xTaskRemoveFromEventList>
 80039e2:	4603      	mov	r3, r0
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d00e      	beq.n	8003a06 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d00b      	beq.n	8003a06 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	2201      	movs	r2, #1
 80039f2:	601a      	str	r2, [r3, #0]
 80039f4:	e007      	b.n	8003a06 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80039f6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80039fa:	3301      	adds	r3, #1
 80039fc:	b2db      	uxtb	r3, r3
 80039fe:	b25a      	sxtb	r2, r3
 8003a00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a02:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003a06:	2301      	movs	r3, #1
 8003a08:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8003a0a:	e001      	b.n	8003a10 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003a10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a12:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003a14:	697b      	ldr	r3, [r7, #20]
 8003a16:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003a1a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003a1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8003a1e:	4618      	mov	r0, r3
 8003a20:	3740      	adds	r7, #64	; 0x40
 8003a22:	46bd      	mov	sp, r7
 8003a24:	bd80      	pop	{r7, pc}
	...

08003a28 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	b08c      	sub	sp, #48	; 0x30
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	60f8      	str	r0, [r7, #12]
 8003a30:	60b9      	str	r1, [r7, #8]
 8003a32:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003a34:	2300      	movs	r3, #0
 8003a36:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003a3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d10a      	bne.n	8003a58 <xQueueReceive+0x30>
	__asm volatile
 8003a42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a46:	f383 8811 	msr	BASEPRI, r3
 8003a4a:	f3bf 8f6f 	isb	sy
 8003a4e:	f3bf 8f4f 	dsb	sy
 8003a52:	623b      	str	r3, [r7, #32]
}
 8003a54:	bf00      	nop
 8003a56:	e7fe      	b.n	8003a56 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003a58:	68bb      	ldr	r3, [r7, #8]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d103      	bne.n	8003a66 <xQueueReceive+0x3e>
 8003a5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d101      	bne.n	8003a6a <xQueueReceive+0x42>
 8003a66:	2301      	movs	r3, #1
 8003a68:	e000      	b.n	8003a6c <xQueueReceive+0x44>
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d10a      	bne.n	8003a86 <xQueueReceive+0x5e>
	__asm volatile
 8003a70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a74:	f383 8811 	msr	BASEPRI, r3
 8003a78:	f3bf 8f6f 	isb	sy
 8003a7c:	f3bf 8f4f 	dsb	sy
 8003a80:	61fb      	str	r3, [r7, #28]
}
 8003a82:	bf00      	nop
 8003a84:	e7fe      	b.n	8003a84 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003a86:	f001 f865 	bl	8004b54 <xTaskGetSchedulerState>
 8003a8a:	4603      	mov	r3, r0
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d102      	bne.n	8003a96 <xQueueReceive+0x6e>
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d101      	bne.n	8003a9a <xQueueReceive+0x72>
 8003a96:	2301      	movs	r3, #1
 8003a98:	e000      	b.n	8003a9c <xQueueReceive+0x74>
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d10a      	bne.n	8003ab6 <xQueueReceive+0x8e>
	__asm volatile
 8003aa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003aa4:	f383 8811 	msr	BASEPRI, r3
 8003aa8:	f3bf 8f6f 	isb	sy
 8003aac:	f3bf 8f4f 	dsb	sy
 8003ab0:	61bb      	str	r3, [r7, #24]
}
 8003ab2:	bf00      	nop
 8003ab4:	e7fe      	b.n	8003ab4 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003ab6:	f001 fda5 	bl	8005604 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003aba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003abc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003abe:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d01f      	beq.n	8003b06 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003ac6:	68b9      	ldr	r1, [r7, #8]
 8003ac8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003aca:	f000 f8f7 	bl	8003cbc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ad0:	1e5a      	subs	r2, r3, #1
 8003ad2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ad4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003ad6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ad8:	691b      	ldr	r3, [r3, #16]
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d00f      	beq.n	8003afe <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003ade:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ae0:	3310      	adds	r3, #16
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	f000 fe74 	bl	80047d0 <xTaskRemoveFromEventList>
 8003ae8:	4603      	mov	r3, r0
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d007      	beq.n	8003afe <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003aee:	4b3d      	ldr	r3, [pc, #244]	; (8003be4 <xQueueReceive+0x1bc>)
 8003af0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003af4:	601a      	str	r2, [r3, #0]
 8003af6:	f3bf 8f4f 	dsb	sy
 8003afa:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003afe:	f001 fdb1 	bl	8005664 <vPortExitCritical>
				return pdPASS;
 8003b02:	2301      	movs	r3, #1
 8003b04:	e069      	b.n	8003bda <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d103      	bne.n	8003b14 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003b0c:	f001 fdaa 	bl	8005664 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003b10:	2300      	movs	r3, #0
 8003b12:	e062      	b.n	8003bda <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003b14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d106      	bne.n	8003b28 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003b1a:	f107 0310 	add.w	r3, r7, #16
 8003b1e:	4618      	mov	r0, r3
 8003b20:	f000 feba 	bl	8004898 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003b24:	2301      	movs	r3, #1
 8003b26:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003b28:	f001 fd9c 	bl	8005664 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003b2c:	f000 fc26 	bl	800437c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003b30:	f001 fd68 	bl	8005604 <vPortEnterCritical>
 8003b34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b36:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003b3a:	b25b      	sxtb	r3, r3
 8003b3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b40:	d103      	bne.n	8003b4a <xQueueReceive+0x122>
 8003b42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b44:	2200      	movs	r2, #0
 8003b46:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003b4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b4c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003b50:	b25b      	sxtb	r3, r3
 8003b52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b56:	d103      	bne.n	8003b60 <xQueueReceive+0x138>
 8003b58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003b60:	f001 fd80 	bl	8005664 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003b64:	1d3a      	adds	r2, r7, #4
 8003b66:	f107 0310 	add.w	r3, r7, #16
 8003b6a:	4611      	mov	r1, r2
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	f000 fea9 	bl	80048c4 <xTaskCheckForTimeOut>
 8003b72:	4603      	mov	r3, r0
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d123      	bne.n	8003bc0 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003b78:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003b7a:	f000 f917 	bl	8003dac <prvIsQueueEmpty>
 8003b7e:	4603      	mov	r3, r0
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d017      	beq.n	8003bb4 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003b84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b86:	3324      	adds	r3, #36	; 0x24
 8003b88:	687a      	ldr	r2, [r7, #4]
 8003b8a:	4611      	mov	r1, r2
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	f000 fdcf 	bl	8004730 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003b92:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003b94:	f000 f8b8 	bl	8003d08 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003b98:	f000 fbfe 	bl	8004398 <xTaskResumeAll>
 8003b9c:	4603      	mov	r3, r0
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d189      	bne.n	8003ab6 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8003ba2:	4b10      	ldr	r3, [pc, #64]	; (8003be4 <xQueueReceive+0x1bc>)
 8003ba4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ba8:	601a      	str	r2, [r3, #0]
 8003baa:	f3bf 8f4f 	dsb	sy
 8003bae:	f3bf 8f6f 	isb	sy
 8003bb2:	e780      	b.n	8003ab6 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003bb4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003bb6:	f000 f8a7 	bl	8003d08 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003bba:	f000 fbed 	bl	8004398 <xTaskResumeAll>
 8003bbe:	e77a      	b.n	8003ab6 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003bc0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003bc2:	f000 f8a1 	bl	8003d08 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003bc6:	f000 fbe7 	bl	8004398 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003bca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003bcc:	f000 f8ee 	bl	8003dac <prvIsQueueEmpty>
 8003bd0:	4603      	mov	r3, r0
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	f43f af6f 	beq.w	8003ab6 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003bd8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003bda:	4618      	mov	r0, r3
 8003bdc:	3730      	adds	r7, #48	; 0x30
 8003bde:	46bd      	mov	sp, r7
 8003be0:	bd80      	pop	{r7, pc}
 8003be2:	bf00      	nop
 8003be4:	e000ed04 	.word	0xe000ed04

08003be8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b086      	sub	sp, #24
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	60f8      	str	r0, [r7, #12]
 8003bf0:	60b9      	str	r1, [r7, #8]
 8003bf2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003bf4:	2300      	movs	r3, #0
 8003bf6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bfc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d10d      	bne.n	8003c22 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d14d      	bne.n	8003caa <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	689b      	ldr	r3, [r3, #8]
 8003c12:	4618      	mov	r0, r3
 8003c14:	f000 ffbc 	bl	8004b90 <xTaskPriorityDisinherit>
 8003c18:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	609a      	str	r2, [r3, #8]
 8003c20:	e043      	b.n	8003caa <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d119      	bne.n	8003c5c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	6858      	ldr	r0, [r3, #4]
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c30:	461a      	mov	r2, r3
 8003c32:	68b9      	ldr	r1, [r7, #8]
 8003c34:	f002 f818 	bl	8005c68 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	685a      	ldr	r2, [r3, #4]
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c40:	441a      	add	r2, r3
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	685a      	ldr	r2, [r3, #4]
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	689b      	ldr	r3, [r3, #8]
 8003c4e:	429a      	cmp	r2, r3
 8003c50:	d32b      	bcc.n	8003caa <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	681a      	ldr	r2, [r3, #0]
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	605a      	str	r2, [r3, #4]
 8003c5a:	e026      	b.n	8003caa <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	68d8      	ldr	r0, [r3, #12]
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c64:	461a      	mov	r2, r3
 8003c66:	68b9      	ldr	r1, [r7, #8]
 8003c68:	f001 fffe 	bl	8005c68 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	68da      	ldr	r2, [r3, #12]
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c74:	425b      	negs	r3, r3
 8003c76:	441a      	add	r2, r3
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	68da      	ldr	r2, [r3, #12]
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	429a      	cmp	r2, r3
 8003c86:	d207      	bcs.n	8003c98 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	689a      	ldr	r2, [r3, #8]
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c90:	425b      	negs	r3, r3
 8003c92:	441a      	add	r2, r3
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2b02      	cmp	r3, #2
 8003c9c:	d105      	bne.n	8003caa <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003c9e:	693b      	ldr	r3, [r7, #16]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d002      	beq.n	8003caa <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003ca4:	693b      	ldr	r3, [r7, #16]
 8003ca6:	3b01      	subs	r3, #1
 8003ca8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003caa:	693b      	ldr	r3, [r7, #16]
 8003cac:	1c5a      	adds	r2, r3, #1
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003cb2:	697b      	ldr	r3, [r7, #20]
}
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	3718      	adds	r7, #24
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	bd80      	pop	{r7, pc}

08003cbc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b082      	sub	sp, #8
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
 8003cc4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d018      	beq.n	8003d00 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	68da      	ldr	r2, [r3, #12]
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cd6:	441a      	add	r2, r3
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	68da      	ldr	r2, [r3, #12]
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	689b      	ldr	r3, [r3, #8]
 8003ce4:	429a      	cmp	r2, r3
 8003ce6:	d303      	bcc.n	8003cf0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681a      	ldr	r2, [r3, #0]
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	68d9      	ldr	r1, [r3, #12]
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cf8:	461a      	mov	r2, r3
 8003cfa:	6838      	ldr	r0, [r7, #0]
 8003cfc:	f001 ffb4 	bl	8005c68 <memcpy>
	}
}
 8003d00:	bf00      	nop
 8003d02:	3708      	adds	r7, #8
 8003d04:	46bd      	mov	sp, r7
 8003d06:	bd80      	pop	{r7, pc}

08003d08 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b084      	sub	sp, #16
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003d10:	f001 fc78 	bl	8005604 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003d1a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003d1c:	e011      	b.n	8003d42 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d012      	beq.n	8003d4c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	3324      	adds	r3, #36	; 0x24
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	f000 fd50 	bl	80047d0 <xTaskRemoveFromEventList>
 8003d30:	4603      	mov	r3, r0
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d001      	beq.n	8003d3a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003d36:	f000 fe27 	bl	8004988 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003d3a:	7bfb      	ldrb	r3, [r7, #15]
 8003d3c:	3b01      	subs	r3, #1
 8003d3e:	b2db      	uxtb	r3, r3
 8003d40:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003d42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	dce9      	bgt.n	8003d1e <prvUnlockQueue+0x16>
 8003d4a:	e000      	b.n	8003d4e <prvUnlockQueue+0x46>
					break;
 8003d4c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	22ff      	movs	r2, #255	; 0xff
 8003d52:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003d56:	f001 fc85 	bl	8005664 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003d5a:	f001 fc53 	bl	8005604 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003d64:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003d66:	e011      	b.n	8003d8c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	691b      	ldr	r3, [r3, #16]
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d012      	beq.n	8003d96 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	3310      	adds	r3, #16
 8003d74:	4618      	mov	r0, r3
 8003d76:	f000 fd2b 	bl	80047d0 <xTaskRemoveFromEventList>
 8003d7a:	4603      	mov	r3, r0
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d001      	beq.n	8003d84 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003d80:	f000 fe02 	bl	8004988 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003d84:	7bbb      	ldrb	r3, [r7, #14]
 8003d86:	3b01      	subs	r3, #1
 8003d88:	b2db      	uxtb	r3, r3
 8003d8a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003d8c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	dce9      	bgt.n	8003d68 <prvUnlockQueue+0x60>
 8003d94:	e000      	b.n	8003d98 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003d96:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	22ff      	movs	r2, #255	; 0xff
 8003d9c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003da0:	f001 fc60 	bl	8005664 <vPortExitCritical>
}
 8003da4:	bf00      	nop
 8003da6:	3710      	adds	r7, #16
 8003da8:	46bd      	mov	sp, r7
 8003daa:	bd80      	pop	{r7, pc}

08003dac <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b084      	sub	sp, #16
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003db4:	f001 fc26 	bl	8005604 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d102      	bne.n	8003dc6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003dc0:	2301      	movs	r3, #1
 8003dc2:	60fb      	str	r3, [r7, #12]
 8003dc4:	e001      	b.n	8003dca <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003dca:	f001 fc4b 	bl	8005664 <vPortExitCritical>

	return xReturn;
 8003dce:	68fb      	ldr	r3, [r7, #12]
}
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	3710      	adds	r7, #16
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	bd80      	pop	{r7, pc}

08003dd8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	b084      	sub	sp, #16
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003de0:	f001 fc10 	bl	8005604 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dec:	429a      	cmp	r2, r3
 8003dee:	d102      	bne.n	8003df6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003df0:	2301      	movs	r3, #1
 8003df2:	60fb      	str	r3, [r7, #12]
 8003df4:	e001      	b.n	8003dfa <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003df6:	2300      	movs	r3, #0
 8003df8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003dfa:	f001 fc33 	bl	8005664 <vPortExitCritical>

	return xReturn;
 8003dfe:	68fb      	ldr	r3, [r7, #12]
}
 8003e00:	4618      	mov	r0, r3
 8003e02:	3710      	adds	r7, #16
 8003e04:	46bd      	mov	sp, r7
 8003e06:	bd80      	pop	{r7, pc}

08003e08 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003e08:	b480      	push	{r7}
 8003e0a:	b085      	sub	sp, #20
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
 8003e10:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003e12:	2300      	movs	r3, #0
 8003e14:	60fb      	str	r3, [r7, #12]
 8003e16:	e014      	b.n	8003e42 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003e18:	4a0f      	ldr	r2, [pc, #60]	; (8003e58 <vQueueAddToRegistry+0x50>)
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d10b      	bne.n	8003e3c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003e24:	490c      	ldr	r1, [pc, #48]	; (8003e58 <vQueueAddToRegistry+0x50>)
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	683a      	ldr	r2, [r7, #0]
 8003e2a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003e2e:	4a0a      	ldr	r2, [pc, #40]	; (8003e58 <vQueueAddToRegistry+0x50>)
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	00db      	lsls	r3, r3, #3
 8003e34:	4413      	add	r3, r2
 8003e36:	687a      	ldr	r2, [r7, #4]
 8003e38:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003e3a:	e006      	b.n	8003e4a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	3301      	adds	r3, #1
 8003e40:	60fb      	str	r3, [r7, #12]
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	2b07      	cmp	r3, #7
 8003e46:	d9e7      	bls.n	8003e18 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003e48:	bf00      	nop
 8003e4a:	bf00      	nop
 8003e4c:	3714      	adds	r7, #20
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e54:	4770      	bx	lr
 8003e56:	bf00      	nop
 8003e58:	200008bc 	.word	0x200008bc

08003e5c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	b086      	sub	sp, #24
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	60f8      	str	r0, [r7, #12]
 8003e64:	60b9      	str	r1, [r7, #8]
 8003e66:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003e6c:	f001 fbca 	bl	8005604 <vPortEnterCritical>
 8003e70:	697b      	ldr	r3, [r7, #20]
 8003e72:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003e76:	b25b      	sxtb	r3, r3
 8003e78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e7c:	d103      	bne.n	8003e86 <vQueueWaitForMessageRestricted+0x2a>
 8003e7e:	697b      	ldr	r3, [r7, #20]
 8003e80:	2200      	movs	r2, #0
 8003e82:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003e86:	697b      	ldr	r3, [r7, #20]
 8003e88:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003e8c:	b25b      	sxtb	r3, r3
 8003e8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e92:	d103      	bne.n	8003e9c <vQueueWaitForMessageRestricted+0x40>
 8003e94:	697b      	ldr	r3, [r7, #20]
 8003e96:	2200      	movs	r2, #0
 8003e98:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003e9c:	f001 fbe2 	bl	8005664 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003ea0:	697b      	ldr	r3, [r7, #20]
 8003ea2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d106      	bne.n	8003eb6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003ea8:	697b      	ldr	r3, [r7, #20]
 8003eaa:	3324      	adds	r3, #36	; 0x24
 8003eac:	687a      	ldr	r2, [r7, #4]
 8003eae:	68b9      	ldr	r1, [r7, #8]
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	f000 fc61 	bl	8004778 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003eb6:	6978      	ldr	r0, [r7, #20]
 8003eb8:	f7ff ff26 	bl	8003d08 <prvUnlockQueue>
	}
 8003ebc:	bf00      	nop
 8003ebe:	3718      	adds	r7, #24
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	bd80      	pop	{r7, pc}

08003ec4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	b08e      	sub	sp, #56	; 0x38
 8003ec8:	af04      	add	r7, sp, #16
 8003eca:	60f8      	str	r0, [r7, #12]
 8003ecc:	60b9      	str	r1, [r7, #8]
 8003ece:	607a      	str	r2, [r7, #4]
 8003ed0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003ed2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d10a      	bne.n	8003eee <xTaskCreateStatic+0x2a>
	__asm volatile
 8003ed8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003edc:	f383 8811 	msr	BASEPRI, r3
 8003ee0:	f3bf 8f6f 	isb	sy
 8003ee4:	f3bf 8f4f 	dsb	sy
 8003ee8:	623b      	str	r3, [r7, #32]
}
 8003eea:	bf00      	nop
 8003eec:	e7fe      	b.n	8003eec <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003eee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d10a      	bne.n	8003f0a <xTaskCreateStatic+0x46>
	__asm volatile
 8003ef4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ef8:	f383 8811 	msr	BASEPRI, r3
 8003efc:	f3bf 8f6f 	isb	sy
 8003f00:	f3bf 8f4f 	dsb	sy
 8003f04:	61fb      	str	r3, [r7, #28]
}
 8003f06:	bf00      	nop
 8003f08:	e7fe      	b.n	8003f08 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003f0a:	23bc      	movs	r3, #188	; 0xbc
 8003f0c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003f0e:	693b      	ldr	r3, [r7, #16]
 8003f10:	2bbc      	cmp	r3, #188	; 0xbc
 8003f12:	d00a      	beq.n	8003f2a <xTaskCreateStatic+0x66>
	__asm volatile
 8003f14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f18:	f383 8811 	msr	BASEPRI, r3
 8003f1c:	f3bf 8f6f 	isb	sy
 8003f20:	f3bf 8f4f 	dsb	sy
 8003f24:	61bb      	str	r3, [r7, #24]
}
 8003f26:	bf00      	nop
 8003f28:	e7fe      	b.n	8003f28 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003f2a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003f2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d01e      	beq.n	8003f70 <xTaskCreateStatic+0xac>
 8003f32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d01b      	beq.n	8003f70 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003f38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f3a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f3e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003f40:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f44:	2202      	movs	r2, #2
 8003f46:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	9303      	str	r3, [sp, #12]
 8003f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f50:	9302      	str	r3, [sp, #8]
 8003f52:	f107 0314 	add.w	r3, r7, #20
 8003f56:	9301      	str	r3, [sp, #4]
 8003f58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f5a:	9300      	str	r3, [sp, #0]
 8003f5c:	683b      	ldr	r3, [r7, #0]
 8003f5e:	687a      	ldr	r2, [r7, #4]
 8003f60:	68b9      	ldr	r1, [r7, #8]
 8003f62:	68f8      	ldr	r0, [r7, #12]
 8003f64:	f000 f850 	bl	8004008 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003f68:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003f6a:	f000 f8f3 	bl	8004154 <prvAddNewTaskToReadyList>
 8003f6e:	e001      	b.n	8003f74 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8003f70:	2300      	movs	r3, #0
 8003f72:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003f74:	697b      	ldr	r3, [r7, #20]
	}
 8003f76:	4618      	mov	r0, r3
 8003f78:	3728      	adds	r7, #40	; 0x28
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	bd80      	pop	{r7, pc}

08003f7e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003f7e:	b580      	push	{r7, lr}
 8003f80:	b08c      	sub	sp, #48	; 0x30
 8003f82:	af04      	add	r7, sp, #16
 8003f84:	60f8      	str	r0, [r7, #12]
 8003f86:	60b9      	str	r1, [r7, #8]
 8003f88:	603b      	str	r3, [r7, #0]
 8003f8a:	4613      	mov	r3, r2
 8003f8c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003f8e:	88fb      	ldrh	r3, [r7, #6]
 8003f90:	009b      	lsls	r3, r3, #2
 8003f92:	4618      	mov	r0, r3
 8003f94:	f001 fc58 	bl	8005848 <pvPortMalloc>
 8003f98:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003f9a:	697b      	ldr	r3, [r7, #20]
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d00e      	beq.n	8003fbe <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003fa0:	20bc      	movs	r0, #188	; 0xbc
 8003fa2:	f001 fc51 	bl	8005848 <pvPortMalloc>
 8003fa6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003fa8:	69fb      	ldr	r3, [r7, #28]
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d003      	beq.n	8003fb6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003fae:	69fb      	ldr	r3, [r7, #28]
 8003fb0:	697a      	ldr	r2, [r7, #20]
 8003fb2:	631a      	str	r2, [r3, #48]	; 0x30
 8003fb4:	e005      	b.n	8003fc2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003fb6:	6978      	ldr	r0, [r7, #20]
 8003fb8:	f001 fd12 	bl	80059e0 <vPortFree>
 8003fbc:	e001      	b.n	8003fc2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003fc2:	69fb      	ldr	r3, [r7, #28]
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d017      	beq.n	8003ff8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003fc8:	69fb      	ldr	r3, [r7, #28]
 8003fca:	2200      	movs	r2, #0
 8003fcc:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003fd0:	88fa      	ldrh	r2, [r7, #6]
 8003fd2:	2300      	movs	r3, #0
 8003fd4:	9303      	str	r3, [sp, #12]
 8003fd6:	69fb      	ldr	r3, [r7, #28]
 8003fd8:	9302      	str	r3, [sp, #8]
 8003fda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fdc:	9301      	str	r3, [sp, #4]
 8003fde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fe0:	9300      	str	r3, [sp, #0]
 8003fe2:	683b      	ldr	r3, [r7, #0]
 8003fe4:	68b9      	ldr	r1, [r7, #8]
 8003fe6:	68f8      	ldr	r0, [r7, #12]
 8003fe8:	f000 f80e 	bl	8004008 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003fec:	69f8      	ldr	r0, [r7, #28]
 8003fee:	f000 f8b1 	bl	8004154 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003ff2:	2301      	movs	r3, #1
 8003ff4:	61bb      	str	r3, [r7, #24]
 8003ff6:	e002      	b.n	8003ffe <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003ff8:	f04f 33ff 	mov.w	r3, #4294967295
 8003ffc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003ffe:	69bb      	ldr	r3, [r7, #24]
	}
 8004000:	4618      	mov	r0, r3
 8004002:	3720      	adds	r7, #32
 8004004:	46bd      	mov	sp, r7
 8004006:	bd80      	pop	{r7, pc}

08004008 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004008:	b580      	push	{r7, lr}
 800400a:	b088      	sub	sp, #32
 800400c:	af00      	add	r7, sp, #0
 800400e:	60f8      	str	r0, [r7, #12]
 8004010:	60b9      	str	r1, [r7, #8]
 8004012:	607a      	str	r2, [r7, #4]
 8004014:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004016:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004018:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	009b      	lsls	r3, r3, #2
 800401e:	461a      	mov	r2, r3
 8004020:	21a5      	movs	r1, #165	; 0xa5
 8004022:	f001 fe2f 	bl	8005c84 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004026:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004028:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004030:	3b01      	subs	r3, #1
 8004032:	009b      	lsls	r3, r3, #2
 8004034:	4413      	add	r3, r2
 8004036:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004038:	69bb      	ldr	r3, [r7, #24]
 800403a:	f023 0307 	bic.w	r3, r3, #7
 800403e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004040:	69bb      	ldr	r3, [r7, #24]
 8004042:	f003 0307 	and.w	r3, r3, #7
 8004046:	2b00      	cmp	r3, #0
 8004048:	d00a      	beq.n	8004060 <prvInitialiseNewTask+0x58>
	__asm volatile
 800404a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800404e:	f383 8811 	msr	BASEPRI, r3
 8004052:	f3bf 8f6f 	isb	sy
 8004056:	f3bf 8f4f 	dsb	sy
 800405a:	617b      	str	r3, [r7, #20]
}
 800405c:	bf00      	nop
 800405e:	e7fe      	b.n	800405e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004060:	68bb      	ldr	r3, [r7, #8]
 8004062:	2b00      	cmp	r3, #0
 8004064:	d01f      	beq.n	80040a6 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004066:	2300      	movs	r3, #0
 8004068:	61fb      	str	r3, [r7, #28]
 800406a:	e012      	b.n	8004092 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800406c:	68ba      	ldr	r2, [r7, #8]
 800406e:	69fb      	ldr	r3, [r7, #28]
 8004070:	4413      	add	r3, r2
 8004072:	7819      	ldrb	r1, [r3, #0]
 8004074:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004076:	69fb      	ldr	r3, [r7, #28]
 8004078:	4413      	add	r3, r2
 800407a:	3334      	adds	r3, #52	; 0x34
 800407c:	460a      	mov	r2, r1
 800407e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004080:	68ba      	ldr	r2, [r7, #8]
 8004082:	69fb      	ldr	r3, [r7, #28]
 8004084:	4413      	add	r3, r2
 8004086:	781b      	ldrb	r3, [r3, #0]
 8004088:	2b00      	cmp	r3, #0
 800408a:	d006      	beq.n	800409a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800408c:	69fb      	ldr	r3, [r7, #28]
 800408e:	3301      	adds	r3, #1
 8004090:	61fb      	str	r3, [r7, #28]
 8004092:	69fb      	ldr	r3, [r7, #28]
 8004094:	2b0f      	cmp	r3, #15
 8004096:	d9e9      	bls.n	800406c <prvInitialiseNewTask+0x64>
 8004098:	e000      	b.n	800409c <prvInitialiseNewTask+0x94>
			{
				break;
 800409a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800409c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800409e:	2200      	movs	r2, #0
 80040a0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80040a4:	e003      	b.n	80040ae <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80040a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040a8:	2200      	movs	r2, #0
 80040aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80040ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040b0:	2b37      	cmp	r3, #55	; 0x37
 80040b2:	d901      	bls.n	80040b8 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80040b4:	2337      	movs	r3, #55	; 0x37
 80040b6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80040b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80040bc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80040be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040c0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80040c2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80040c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040c6:	2200      	movs	r2, #0
 80040c8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80040ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040cc:	3304      	adds	r3, #4
 80040ce:	4618      	mov	r0, r3
 80040d0:	f7ff f978 	bl	80033c4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80040d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040d6:	3318      	adds	r3, #24
 80040d8:	4618      	mov	r0, r3
 80040da:	f7ff f973 	bl	80033c4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80040de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80040e2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80040e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040e6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80040ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040ec:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80040ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80040f2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80040f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040f6:	2200      	movs	r2, #0
 80040f8:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80040fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040fe:	2200      	movs	r2, #0
 8004100:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8004104:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004106:	3354      	adds	r3, #84	; 0x54
 8004108:	2260      	movs	r2, #96	; 0x60
 800410a:	2100      	movs	r1, #0
 800410c:	4618      	mov	r0, r3
 800410e:	f001 fdb9 	bl	8005c84 <memset>
 8004112:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004114:	4a0c      	ldr	r2, [pc, #48]	; (8004148 <prvInitialiseNewTask+0x140>)
 8004116:	659a      	str	r2, [r3, #88]	; 0x58
 8004118:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800411a:	4a0c      	ldr	r2, [pc, #48]	; (800414c <prvInitialiseNewTask+0x144>)
 800411c:	65da      	str	r2, [r3, #92]	; 0x5c
 800411e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004120:	4a0b      	ldr	r2, [pc, #44]	; (8004150 <prvInitialiseNewTask+0x148>)
 8004122:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004124:	683a      	ldr	r2, [r7, #0]
 8004126:	68f9      	ldr	r1, [r7, #12]
 8004128:	69b8      	ldr	r0, [r7, #24]
 800412a:	f001 f941 	bl	80053b0 <pxPortInitialiseStack>
 800412e:	4602      	mov	r2, r0
 8004130:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004132:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004134:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004136:	2b00      	cmp	r3, #0
 8004138:	d002      	beq.n	8004140 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800413a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800413c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800413e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004140:	bf00      	nop
 8004142:	3720      	adds	r7, #32
 8004144:	46bd      	mov	sp, r7
 8004146:	bd80      	pop	{r7, pc}
 8004148:	08005f08 	.word	0x08005f08
 800414c:	08005f28 	.word	0x08005f28
 8004150:	08005ee8 	.word	0x08005ee8

08004154 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004154:	b580      	push	{r7, lr}
 8004156:	b082      	sub	sp, #8
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800415c:	f001 fa52 	bl	8005604 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004160:	4b2d      	ldr	r3, [pc, #180]	; (8004218 <prvAddNewTaskToReadyList+0xc4>)
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	3301      	adds	r3, #1
 8004166:	4a2c      	ldr	r2, [pc, #176]	; (8004218 <prvAddNewTaskToReadyList+0xc4>)
 8004168:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800416a:	4b2c      	ldr	r3, [pc, #176]	; (800421c <prvAddNewTaskToReadyList+0xc8>)
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	2b00      	cmp	r3, #0
 8004170:	d109      	bne.n	8004186 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004172:	4a2a      	ldr	r2, [pc, #168]	; (800421c <prvAddNewTaskToReadyList+0xc8>)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004178:	4b27      	ldr	r3, [pc, #156]	; (8004218 <prvAddNewTaskToReadyList+0xc4>)
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	2b01      	cmp	r3, #1
 800417e:	d110      	bne.n	80041a2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004180:	f000 fc26 	bl	80049d0 <prvInitialiseTaskLists>
 8004184:	e00d      	b.n	80041a2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004186:	4b26      	ldr	r3, [pc, #152]	; (8004220 <prvAddNewTaskToReadyList+0xcc>)
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	2b00      	cmp	r3, #0
 800418c:	d109      	bne.n	80041a2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800418e:	4b23      	ldr	r3, [pc, #140]	; (800421c <prvAddNewTaskToReadyList+0xc8>)
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004198:	429a      	cmp	r2, r3
 800419a:	d802      	bhi.n	80041a2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800419c:	4a1f      	ldr	r2, [pc, #124]	; (800421c <prvAddNewTaskToReadyList+0xc8>)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80041a2:	4b20      	ldr	r3, [pc, #128]	; (8004224 <prvAddNewTaskToReadyList+0xd0>)
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	3301      	adds	r3, #1
 80041a8:	4a1e      	ldr	r2, [pc, #120]	; (8004224 <prvAddNewTaskToReadyList+0xd0>)
 80041aa:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80041ac:	4b1d      	ldr	r3, [pc, #116]	; (8004224 <prvAddNewTaskToReadyList+0xd0>)
 80041ae:	681a      	ldr	r2, [r3, #0]
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041b8:	4b1b      	ldr	r3, [pc, #108]	; (8004228 <prvAddNewTaskToReadyList+0xd4>)
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	429a      	cmp	r2, r3
 80041be:	d903      	bls.n	80041c8 <prvAddNewTaskToReadyList+0x74>
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041c4:	4a18      	ldr	r2, [pc, #96]	; (8004228 <prvAddNewTaskToReadyList+0xd4>)
 80041c6:	6013      	str	r3, [r2, #0]
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041cc:	4613      	mov	r3, r2
 80041ce:	009b      	lsls	r3, r3, #2
 80041d0:	4413      	add	r3, r2
 80041d2:	009b      	lsls	r3, r3, #2
 80041d4:	4a15      	ldr	r2, [pc, #84]	; (800422c <prvAddNewTaskToReadyList+0xd8>)
 80041d6:	441a      	add	r2, r3
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	3304      	adds	r3, #4
 80041dc:	4619      	mov	r1, r3
 80041de:	4610      	mov	r0, r2
 80041e0:	f7ff f8fd 	bl	80033de <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80041e4:	f001 fa3e 	bl	8005664 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80041e8:	4b0d      	ldr	r3, [pc, #52]	; (8004220 <prvAddNewTaskToReadyList+0xcc>)
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d00e      	beq.n	800420e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80041f0:	4b0a      	ldr	r3, [pc, #40]	; (800421c <prvAddNewTaskToReadyList+0xc8>)
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041fa:	429a      	cmp	r2, r3
 80041fc:	d207      	bcs.n	800420e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80041fe:	4b0c      	ldr	r3, [pc, #48]	; (8004230 <prvAddNewTaskToReadyList+0xdc>)
 8004200:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004204:	601a      	str	r2, [r3, #0]
 8004206:	f3bf 8f4f 	dsb	sy
 800420a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800420e:	bf00      	nop
 8004210:	3708      	adds	r7, #8
 8004212:	46bd      	mov	sp, r7
 8004214:	bd80      	pop	{r7, pc}
 8004216:	bf00      	nop
 8004218:	20000dd0 	.word	0x20000dd0
 800421c:	200008fc 	.word	0x200008fc
 8004220:	20000ddc 	.word	0x20000ddc
 8004224:	20000dec 	.word	0x20000dec
 8004228:	20000dd8 	.word	0x20000dd8
 800422c:	20000900 	.word	0x20000900
 8004230:	e000ed04 	.word	0xe000ed04

08004234 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004234:	b580      	push	{r7, lr}
 8004236:	b084      	sub	sp, #16
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800423c:	2300      	movs	r3, #0
 800423e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2b00      	cmp	r3, #0
 8004244:	d017      	beq.n	8004276 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004246:	4b13      	ldr	r3, [pc, #76]	; (8004294 <vTaskDelay+0x60>)
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	2b00      	cmp	r3, #0
 800424c:	d00a      	beq.n	8004264 <vTaskDelay+0x30>
	__asm volatile
 800424e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004252:	f383 8811 	msr	BASEPRI, r3
 8004256:	f3bf 8f6f 	isb	sy
 800425a:	f3bf 8f4f 	dsb	sy
 800425e:	60bb      	str	r3, [r7, #8]
}
 8004260:	bf00      	nop
 8004262:	e7fe      	b.n	8004262 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004264:	f000 f88a 	bl	800437c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004268:	2100      	movs	r1, #0
 800426a:	6878      	ldr	r0, [r7, #4]
 800426c:	f000 fcfe 	bl	8004c6c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004270:	f000 f892 	bl	8004398 <xTaskResumeAll>
 8004274:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	2b00      	cmp	r3, #0
 800427a:	d107      	bne.n	800428c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800427c:	4b06      	ldr	r3, [pc, #24]	; (8004298 <vTaskDelay+0x64>)
 800427e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004282:	601a      	str	r2, [r3, #0]
 8004284:	f3bf 8f4f 	dsb	sy
 8004288:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800428c:	bf00      	nop
 800428e:	3710      	adds	r7, #16
 8004290:	46bd      	mov	sp, r7
 8004292:	bd80      	pop	{r7, pc}
 8004294:	20000df8 	.word	0x20000df8
 8004298:	e000ed04 	.word	0xe000ed04

0800429c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800429c:	b580      	push	{r7, lr}
 800429e:	b08a      	sub	sp, #40	; 0x28
 80042a0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80042a2:	2300      	movs	r3, #0
 80042a4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80042a6:	2300      	movs	r3, #0
 80042a8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80042aa:	463a      	mov	r2, r7
 80042ac:	1d39      	adds	r1, r7, #4
 80042ae:	f107 0308 	add.w	r3, r7, #8
 80042b2:	4618      	mov	r0, r3
 80042b4:	f7ff f832 	bl	800331c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80042b8:	6839      	ldr	r1, [r7, #0]
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	68ba      	ldr	r2, [r7, #8]
 80042be:	9202      	str	r2, [sp, #8]
 80042c0:	9301      	str	r3, [sp, #4]
 80042c2:	2300      	movs	r3, #0
 80042c4:	9300      	str	r3, [sp, #0]
 80042c6:	2300      	movs	r3, #0
 80042c8:	460a      	mov	r2, r1
 80042ca:	4924      	ldr	r1, [pc, #144]	; (800435c <vTaskStartScheduler+0xc0>)
 80042cc:	4824      	ldr	r0, [pc, #144]	; (8004360 <vTaskStartScheduler+0xc4>)
 80042ce:	f7ff fdf9 	bl	8003ec4 <xTaskCreateStatic>
 80042d2:	4603      	mov	r3, r0
 80042d4:	4a23      	ldr	r2, [pc, #140]	; (8004364 <vTaskStartScheduler+0xc8>)
 80042d6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80042d8:	4b22      	ldr	r3, [pc, #136]	; (8004364 <vTaskStartScheduler+0xc8>)
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d002      	beq.n	80042e6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80042e0:	2301      	movs	r3, #1
 80042e2:	617b      	str	r3, [r7, #20]
 80042e4:	e001      	b.n	80042ea <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80042e6:	2300      	movs	r3, #0
 80042e8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80042ea:	697b      	ldr	r3, [r7, #20]
 80042ec:	2b01      	cmp	r3, #1
 80042ee:	d102      	bne.n	80042f6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80042f0:	f000 fd10 	bl	8004d14 <xTimerCreateTimerTask>
 80042f4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80042f6:	697b      	ldr	r3, [r7, #20]
 80042f8:	2b01      	cmp	r3, #1
 80042fa:	d11b      	bne.n	8004334 <vTaskStartScheduler+0x98>
	__asm volatile
 80042fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004300:	f383 8811 	msr	BASEPRI, r3
 8004304:	f3bf 8f6f 	isb	sy
 8004308:	f3bf 8f4f 	dsb	sy
 800430c:	613b      	str	r3, [r7, #16]
}
 800430e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004310:	4b15      	ldr	r3, [pc, #84]	; (8004368 <vTaskStartScheduler+0xcc>)
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	3354      	adds	r3, #84	; 0x54
 8004316:	4a15      	ldr	r2, [pc, #84]	; (800436c <vTaskStartScheduler+0xd0>)
 8004318:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800431a:	4b15      	ldr	r3, [pc, #84]	; (8004370 <vTaskStartScheduler+0xd4>)
 800431c:	f04f 32ff 	mov.w	r2, #4294967295
 8004320:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004322:	4b14      	ldr	r3, [pc, #80]	; (8004374 <vTaskStartScheduler+0xd8>)
 8004324:	2201      	movs	r2, #1
 8004326:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004328:	4b13      	ldr	r3, [pc, #76]	; (8004378 <vTaskStartScheduler+0xdc>)
 800432a:	2200      	movs	r2, #0
 800432c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800432e:	f001 f8c7 	bl	80054c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004332:	e00e      	b.n	8004352 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004334:	697b      	ldr	r3, [r7, #20]
 8004336:	f1b3 3fff 	cmp.w	r3, #4294967295
 800433a:	d10a      	bne.n	8004352 <vTaskStartScheduler+0xb6>
	__asm volatile
 800433c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004340:	f383 8811 	msr	BASEPRI, r3
 8004344:	f3bf 8f6f 	isb	sy
 8004348:	f3bf 8f4f 	dsb	sy
 800434c:	60fb      	str	r3, [r7, #12]
}
 800434e:	bf00      	nop
 8004350:	e7fe      	b.n	8004350 <vTaskStartScheduler+0xb4>
}
 8004352:	bf00      	nop
 8004354:	3718      	adds	r7, #24
 8004356:	46bd      	mov	sp, r7
 8004358:	bd80      	pop	{r7, pc}
 800435a:	bf00      	nop
 800435c:	08005e4c 	.word	0x08005e4c
 8004360:	080049a1 	.word	0x080049a1
 8004364:	20000df4 	.word	0x20000df4
 8004368:	200008fc 	.word	0x200008fc
 800436c:	20000010 	.word	0x20000010
 8004370:	20000df0 	.word	0x20000df0
 8004374:	20000ddc 	.word	0x20000ddc
 8004378:	20000dd4 	.word	0x20000dd4

0800437c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800437c:	b480      	push	{r7}
 800437e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004380:	4b04      	ldr	r3, [pc, #16]	; (8004394 <vTaskSuspendAll+0x18>)
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	3301      	adds	r3, #1
 8004386:	4a03      	ldr	r2, [pc, #12]	; (8004394 <vTaskSuspendAll+0x18>)
 8004388:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800438a:	bf00      	nop
 800438c:	46bd      	mov	sp, r7
 800438e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004392:	4770      	bx	lr
 8004394:	20000df8 	.word	0x20000df8

08004398 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004398:	b580      	push	{r7, lr}
 800439a:	b084      	sub	sp, #16
 800439c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800439e:	2300      	movs	r3, #0
 80043a0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80043a2:	2300      	movs	r3, #0
 80043a4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80043a6:	4b42      	ldr	r3, [pc, #264]	; (80044b0 <xTaskResumeAll+0x118>)
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d10a      	bne.n	80043c4 <xTaskResumeAll+0x2c>
	__asm volatile
 80043ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043b2:	f383 8811 	msr	BASEPRI, r3
 80043b6:	f3bf 8f6f 	isb	sy
 80043ba:	f3bf 8f4f 	dsb	sy
 80043be:	603b      	str	r3, [r7, #0]
}
 80043c0:	bf00      	nop
 80043c2:	e7fe      	b.n	80043c2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80043c4:	f001 f91e 	bl	8005604 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80043c8:	4b39      	ldr	r3, [pc, #228]	; (80044b0 <xTaskResumeAll+0x118>)
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	3b01      	subs	r3, #1
 80043ce:	4a38      	ldr	r2, [pc, #224]	; (80044b0 <xTaskResumeAll+0x118>)
 80043d0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80043d2:	4b37      	ldr	r3, [pc, #220]	; (80044b0 <xTaskResumeAll+0x118>)
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d162      	bne.n	80044a0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80043da:	4b36      	ldr	r3, [pc, #216]	; (80044b4 <xTaskResumeAll+0x11c>)
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d05e      	beq.n	80044a0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80043e2:	e02f      	b.n	8004444 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80043e4:	4b34      	ldr	r3, [pc, #208]	; (80044b8 <xTaskResumeAll+0x120>)
 80043e6:	68db      	ldr	r3, [r3, #12]
 80043e8:	68db      	ldr	r3, [r3, #12]
 80043ea:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	3318      	adds	r3, #24
 80043f0:	4618      	mov	r0, r3
 80043f2:	f7ff f851 	bl	8003498 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	3304      	adds	r3, #4
 80043fa:	4618      	mov	r0, r3
 80043fc:	f7ff f84c 	bl	8003498 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004404:	4b2d      	ldr	r3, [pc, #180]	; (80044bc <xTaskResumeAll+0x124>)
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	429a      	cmp	r2, r3
 800440a:	d903      	bls.n	8004414 <xTaskResumeAll+0x7c>
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004410:	4a2a      	ldr	r2, [pc, #168]	; (80044bc <xTaskResumeAll+0x124>)
 8004412:	6013      	str	r3, [r2, #0]
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004418:	4613      	mov	r3, r2
 800441a:	009b      	lsls	r3, r3, #2
 800441c:	4413      	add	r3, r2
 800441e:	009b      	lsls	r3, r3, #2
 8004420:	4a27      	ldr	r2, [pc, #156]	; (80044c0 <xTaskResumeAll+0x128>)
 8004422:	441a      	add	r2, r3
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	3304      	adds	r3, #4
 8004428:	4619      	mov	r1, r3
 800442a:	4610      	mov	r0, r2
 800442c:	f7fe ffd7 	bl	80033de <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004434:	4b23      	ldr	r3, [pc, #140]	; (80044c4 <xTaskResumeAll+0x12c>)
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800443a:	429a      	cmp	r2, r3
 800443c:	d302      	bcc.n	8004444 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800443e:	4b22      	ldr	r3, [pc, #136]	; (80044c8 <xTaskResumeAll+0x130>)
 8004440:	2201      	movs	r2, #1
 8004442:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004444:	4b1c      	ldr	r3, [pc, #112]	; (80044b8 <xTaskResumeAll+0x120>)
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	2b00      	cmp	r3, #0
 800444a:	d1cb      	bne.n	80043e4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	2b00      	cmp	r3, #0
 8004450:	d001      	beq.n	8004456 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004452:	f000 fb5f 	bl	8004b14 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004456:	4b1d      	ldr	r3, [pc, #116]	; (80044cc <xTaskResumeAll+0x134>)
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2b00      	cmp	r3, #0
 8004460:	d010      	beq.n	8004484 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004462:	f000 f847 	bl	80044f4 <xTaskIncrementTick>
 8004466:	4603      	mov	r3, r0
 8004468:	2b00      	cmp	r3, #0
 800446a:	d002      	beq.n	8004472 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800446c:	4b16      	ldr	r3, [pc, #88]	; (80044c8 <xTaskResumeAll+0x130>)
 800446e:	2201      	movs	r2, #1
 8004470:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	3b01      	subs	r3, #1
 8004476:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2b00      	cmp	r3, #0
 800447c:	d1f1      	bne.n	8004462 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800447e:	4b13      	ldr	r3, [pc, #76]	; (80044cc <xTaskResumeAll+0x134>)
 8004480:	2200      	movs	r2, #0
 8004482:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004484:	4b10      	ldr	r3, [pc, #64]	; (80044c8 <xTaskResumeAll+0x130>)
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	2b00      	cmp	r3, #0
 800448a:	d009      	beq.n	80044a0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800448c:	2301      	movs	r3, #1
 800448e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004490:	4b0f      	ldr	r3, [pc, #60]	; (80044d0 <xTaskResumeAll+0x138>)
 8004492:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004496:	601a      	str	r2, [r3, #0]
 8004498:	f3bf 8f4f 	dsb	sy
 800449c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80044a0:	f001 f8e0 	bl	8005664 <vPortExitCritical>

	return xAlreadyYielded;
 80044a4:	68bb      	ldr	r3, [r7, #8]
}
 80044a6:	4618      	mov	r0, r3
 80044a8:	3710      	adds	r7, #16
 80044aa:	46bd      	mov	sp, r7
 80044ac:	bd80      	pop	{r7, pc}
 80044ae:	bf00      	nop
 80044b0:	20000df8 	.word	0x20000df8
 80044b4:	20000dd0 	.word	0x20000dd0
 80044b8:	20000d90 	.word	0x20000d90
 80044bc:	20000dd8 	.word	0x20000dd8
 80044c0:	20000900 	.word	0x20000900
 80044c4:	200008fc 	.word	0x200008fc
 80044c8:	20000de4 	.word	0x20000de4
 80044cc:	20000de0 	.word	0x20000de0
 80044d0:	e000ed04 	.word	0xe000ed04

080044d4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80044d4:	b480      	push	{r7}
 80044d6:	b083      	sub	sp, #12
 80044d8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80044da:	4b05      	ldr	r3, [pc, #20]	; (80044f0 <xTaskGetTickCount+0x1c>)
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80044e0:	687b      	ldr	r3, [r7, #4]
}
 80044e2:	4618      	mov	r0, r3
 80044e4:	370c      	adds	r7, #12
 80044e6:	46bd      	mov	sp, r7
 80044e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ec:	4770      	bx	lr
 80044ee:	bf00      	nop
 80044f0:	20000dd4 	.word	0x20000dd4

080044f4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80044f4:	b580      	push	{r7, lr}
 80044f6:	b086      	sub	sp, #24
 80044f8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80044fa:	2300      	movs	r3, #0
 80044fc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80044fe:	4b4f      	ldr	r3, [pc, #316]	; (800463c <xTaskIncrementTick+0x148>)
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	2b00      	cmp	r3, #0
 8004504:	f040 808f 	bne.w	8004626 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004508:	4b4d      	ldr	r3, [pc, #308]	; (8004640 <xTaskIncrementTick+0x14c>)
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	3301      	adds	r3, #1
 800450e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004510:	4a4b      	ldr	r2, [pc, #300]	; (8004640 <xTaskIncrementTick+0x14c>)
 8004512:	693b      	ldr	r3, [r7, #16]
 8004514:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004516:	693b      	ldr	r3, [r7, #16]
 8004518:	2b00      	cmp	r3, #0
 800451a:	d120      	bne.n	800455e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800451c:	4b49      	ldr	r3, [pc, #292]	; (8004644 <xTaskIncrementTick+0x150>)
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	2b00      	cmp	r3, #0
 8004524:	d00a      	beq.n	800453c <xTaskIncrementTick+0x48>
	__asm volatile
 8004526:	f04f 0350 	mov.w	r3, #80	; 0x50
 800452a:	f383 8811 	msr	BASEPRI, r3
 800452e:	f3bf 8f6f 	isb	sy
 8004532:	f3bf 8f4f 	dsb	sy
 8004536:	603b      	str	r3, [r7, #0]
}
 8004538:	bf00      	nop
 800453a:	e7fe      	b.n	800453a <xTaskIncrementTick+0x46>
 800453c:	4b41      	ldr	r3, [pc, #260]	; (8004644 <xTaskIncrementTick+0x150>)
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	60fb      	str	r3, [r7, #12]
 8004542:	4b41      	ldr	r3, [pc, #260]	; (8004648 <xTaskIncrementTick+0x154>)
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	4a3f      	ldr	r2, [pc, #252]	; (8004644 <xTaskIncrementTick+0x150>)
 8004548:	6013      	str	r3, [r2, #0]
 800454a:	4a3f      	ldr	r2, [pc, #252]	; (8004648 <xTaskIncrementTick+0x154>)
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	6013      	str	r3, [r2, #0]
 8004550:	4b3e      	ldr	r3, [pc, #248]	; (800464c <xTaskIncrementTick+0x158>)
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	3301      	adds	r3, #1
 8004556:	4a3d      	ldr	r2, [pc, #244]	; (800464c <xTaskIncrementTick+0x158>)
 8004558:	6013      	str	r3, [r2, #0]
 800455a:	f000 fadb 	bl	8004b14 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800455e:	4b3c      	ldr	r3, [pc, #240]	; (8004650 <xTaskIncrementTick+0x15c>)
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	693a      	ldr	r2, [r7, #16]
 8004564:	429a      	cmp	r2, r3
 8004566:	d349      	bcc.n	80045fc <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004568:	4b36      	ldr	r3, [pc, #216]	; (8004644 <xTaskIncrementTick+0x150>)
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	2b00      	cmp	r3, #0
 8004570:	d104      	bne.n	800457c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004572:	4b37      	ldr	r3, [pc, #220]	; (8004650 <xTaskIncrementTick+0x15c>)
 8004574:	f04f 32ff 	mov.w	r2, #4294967295
 8004578:	601a      	str	r2, [r3, #0]
					break;
 800457a:	e03f      	b.n	80045fc <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800457c:	4b31      	ldr	r3, [pc, #196]	; (8004644 <xTaskIncrementTick+0x150>)
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	68db      	ldr	r3, [r3, #12]
 8004582:	68db      	ldr	r3, [r3, #12]
 8004584:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004586:	68bb      	ldr	r3, [r7, #8]
 8004588:	685b      	ldr	r3, [r3, #4]
 800458a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800458c:	693a      	ldr	r2, [r7, #16]
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	429a      	cmp	r2, r3
 8004592:	d203      	bcs.n	800459c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004594:	4a2e      	ldr	r2, [pc, #184]	; (8004650 <xTaskIncrementTick+0x15c>)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800459a:	e02f      	b.n	80045fc <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800459c:	68bb      	ldr	r3, [r7, #8]
 800459e:	3304      	adds	r3, #4
 80045a0:	4618      	mov	r0, r3
 80045a2:	f7fe ff79 	bl	8003498 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80045a6:	68bb      	ldr	r3, [r7, #8]
 80045a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d004      	beq.n	80045b8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80045ae:	68bb      	ldr	r3, [r7, #8]
 80045b0:	3318      	adds	r3, #24
 80045b2:	4618      	mov	r0, r3
 80045b4:	f7fe ff70 	bl	8003498 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80045b8:	68bb      	ldr	r3, [r7, #8]
 80045ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045bc:	4b25      	ldr	r3, [pc, #148]	; (8004654 <xTaskIncrementTick+0x160>)
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	429a      	cmp	r2, r3
 80045c2:	d903      	bls.n	80045cc <xTaskIncrementTick+0xd8>
 80045c4:	68bb      	ldr	r3, [r7, #8]
 80045c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045c8:	4a22      	ldr	r2, [pc, #136]	; (8004654 <xTaskIncrementTick+0x160>)
 80045ca:	6013      	str	r3, [r2, #0]
 80045cc:	68bb      	ldr	r3, [r7, #8]
 80045ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045d0:	4613      	mov	r3, r2
 80045d2:	009b      	lsls	r3, r3, #2
 80045d4:	4413      	add	r3, r2
 80045d6:	009b      	lsls	r3, r3, #2
 80045d8:	4a1f      	ldr	r2, [pc, #124]	; (8004658 <xTaskIncrementTick+0x164>)
 80045da:	441a      	add	r2, r3
 80045dc:	68bb      	ldr	r3, [r7, #8]
 80045de:	3304      	adds	r3, #4
 80045e0:	4619      	mov	r1, r3
 80045e2:	4610      	mov	r0, r2
 80045e4:	f7fe fefb 	bl	80033de <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80045e8:	68bb      	ldr	r3, [r7, #8]
 80045ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045ec:	4b1b      	ldr	r3, [pc, #108]	; (800465c <xTaskIncrementTick+0x168>)
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045f2:	429a      	cmp	r2, r3
 80045f4:	d3b8      	bcc.n	8004568 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80045f6:	2301      	movs	r3, #1
 80045f8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80045fa:	e7b5      	b.n	8004568 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80045fc:	4b17      	ldr	r3, [pc, #92]	; (800465c <xTaskIncrementTick+0x168>)
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004602:	4915      	ldr	r1, [pc, #84]	; (8004658 <xTaskIncrementTick+0x164>)
 8004604:	4613      	mov	r3, r2
 8004606:	009b      	lsls	r3, r3, #2
 8004608:	4413      	add	r3, r2
 800460a:	009b      	lsls	r3, r3, #2
 800460c:	440b      	add	r3, r1
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	2b01      	cmp	r3, #1
 8004612:	d901      	bls.n	8004618 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8004614:	2301      	movs	r3, #1
 8004616:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004618:	4b11      	ldr	r3, [pc, #68]	; (8004660 <xTaskIncrementTick+0x16c>)
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	2b00      	cmp	r3, #0
 800461e:	d007      	beq.n	8004630 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8004620:	2301      	movs	r3, #1
 8004622:	617b      	str	r3, [r7, #20]
 8004624:	e004      	b.n	8004630 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004626:	4b0f      	ldr	r3, [pc, #60]	; (8004664 <xTaskIncrementTick+0x170>)
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	3301      	adds	r3, #1
 800462c:	4a0d      	ldr	r2, [pc, #52]	; (8004664 <xTaskIncrementTick+0x170>)
 800462e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004630:	697b      	ldr	r3, [r7, #20]
}
 8004632:	4618      	mov	r0, r3
 8004634:	3718      	adds	r7, #24
 8004636:	46bd      	mov	sp, r7
 8004638:	bd80      	pop	{r7, pc}
 800463a:	bf00      	nop
 800463c:	20000df8 	.word	0x20000df8
 8004640:	20000dd4 	.word	0x20000dd4
 8004644:	20000d88 	.word	0x20000d88
 8004648:	20000d8c 	.word	0x20000d8c
 800464c:	20000de8 	.word	0x20000de8
 8004650:	20000df0 	.word	0x20000df0
 8004654:	20000dd8 	.word	0x20000dd8
 8004658:	20000900 	.word	0x20000900
 800465c:	200008fc 	.word	0x200008fc
 8004660:	20000de4 	.word	0x20000de4
 8004664:	20000de0 	.word	0x20000de0

08004668 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004668:	b480      	push	{r7}
 800466a:	b085      	sub	sp, #20
 800466c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800466e:	4b2a      	ldr	r3, [pc, #168]	; (8004718 <vTaskSwitchContext+0xb0>)
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	2b00      	cmp	r3, #0
 8004674:	d003      	beq.n	800467e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004676:	4b29      	ldr	r3, [pc, #164]	; (800471c <vTaskSwitchContext+0xb4>)
 8004678:	2201      	movs	r2, #1
 800467a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800467c:	e046      	b.n	800470c <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800467e:	4b27      	ldr	r3, [pc, #156]	; (800471c <vTaskSwitchContext+0xb4>)
 8004680:	2200      	movs	r2, #0
 8004682:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004684:	4b26      	ldr	r3, [pc, #152]	; (8004720 <vTaskSwitchContext+0xb8>)
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	60fb      	str	r3, [r7, #12]
 800468a:	e010      	b.n	80046ae <vTaskSwitchContext+0x46>
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	2b00      	cmp	r3, #0
 8004690:	d10a      	bne.n	80046a8 <vTaskSwitchContext+0x40>
	__asm volatile
 8004692:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004696:	f383 8811 	msr	BASEPRI, r3
 800469a:	f3bf 8f6f 	isb	sy
 800469e:	f3bf 8f4f 	dsb	sy
 80046a2:	607b      	str	r3, [r7, #4]
}
 80046a4:	bf00      	nop
 80046a6:	e7fe      	b.n	80046a6 <vTaskSwitchContext+0x3e>
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	3b01      	subs	r3, #1
 80046ac:	60fb      	str	r3, [r7, #12]
 80046ae:	491d      	ldr	r1, [pc, #116]	; (8004724 <vTaskSwitchContext+0xbc>)
 80046b0:	68fa      	ldr	r2, [r7, #12]
 80046b2:	4613      	mov	r3, r2
 80046b4:	009b      	lsls	r3, r3, #2
 80046b6:	4413      	add	r3, r2
 80046b8:	009b      	lsls	r3, r3, #2
 80046ba:	440b      	add	r3, r1
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d0e4      	beq.n	800468c <vTaskSwitchContext+0x24>
 80046c2:	68fa      	ldr	r2, [r7, #12]
 80046c4:	4613      	mov	r3, r2
 80046c6:	009b      	lsls	r3, r3, #2
 80046c8:	4413      	add	r3, r2
 80046ca:	009b      	lsls	r3, r3, #2
 80046cc:	4a15      	ldr	r2, [pc, #84]	; (8004724 <vTaskSwitchContext+0xbc>)
 80046ce:	4413      	add	r3, r2
 80046d0:	60bb      	str	r3, [r7, #8]
 80046d2:	68bb      	ldr	r3, [r7, #8]
 80046d4:	685b      	ldr	r3, [r3, #4]
 80046d6:	685a      	ldr	r2, [r3, #4]
 80046d8:	68bb      	ldr	r3, [r7, #8]
 80046da:	605a      	str	r2, [r3, #4]
 80046dc:	68bb      	ldr	r3, [r7, #8]
 80046de:	685a      	ldr	r2, [r3, #4]
 80046e0:	68bb      	ldr	r3, [r7, #8]
 80046e2:	3308      	adds	r3, #8
 80046e4:	429a      	cmp	r2, r3
 80046e6:	d104      	bne.n	80046f2 <vTaskSwitchContext+0x8a>
 80046e8:	68bb      	ldr	r3, [r7, #8]
 80046ea:	685b      	ldr	r3, [r3, #4]
 80046ec:	685a      	ldr	r2, [r3, #4]
 80046ee:	68bb      	ldr	r3, [r7, #8]
 80046f0:	605a      	str	r2, [r3, #4]
 80046f2:	68bb      	ldr	r3, [r7, #8]
 80046f4:	685b      	ldr	r3, [r3, #4]
 80046f6:	68db      	ldr	r3, [r3, #12]
 80046f8:	4a0b      	ldr	r2, [pc, #44]	; (8004728 <vTaskSwitchContext+0xc0>)
 80046fa:	6013      	str	r3, [r2, #0]
 80046fc:	4a08      	ldr	r2, [pc, #32]	; (8004720 <vTaskSwitchContext+0xb8>)
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004702:	4b09      	ldr	r3, [pc, #36]	; (8004728 <vTaskSwitchContext+0xc0>)
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	3354      	adds	r3, #84	; 0x54
 8004708:	4a08      	ldr	r2, [pc, #32]	; (800472c <vTaskSwitchContext+0xc4>)
 800470a:	6013      	str	r3, [r2, #0]
}
 800470c:	bf00      	nop
 800470e:	3714      	adds	r7, #20
 8004710:	46bd      	mov	sp, r7
 8004712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004716:	4770      	bx	lr
 8004718:	20000df8 	.word	0x20000df8
 800471c:	20000de4 	.word	0x20000de4
 8004720:	20000dd8 	.word	0x20000dd8
 8004724:	20000900 	.word	0x20000900
 8004728:	200008fc 	.word	0x200008fc
 800472c:	20000010 	.word	0x20000010

08004730 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004730:	b580      	push	{r7, lr}
 8004732:	b084      	sub	sp, #16
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
 8004738:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	2b00      	cmp	r3, #0
 800473e:	d10a      	bne.n	8004756 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8004740:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004744:	f383 8811 	msr	BASEPRI, r3
 8004748:	f3bf 8f6f 	isb	sy
 800474c:	f3bf 8f4f 	dsb	sy
 8004750:	60fb      	str	r3, [r7, #12]
}
 8004752:	bf00      	nop
 8004754:	e7fe      	b.n	8004754 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004756:	4b07      	ldr	r3, [pc, #28]	; (8004774 <vTaskPlaceOnEventList+0x44>)
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	3318      	adds	r3, #24
 800475c:	4619      	mov	r1, r3
 800475e:	6878      	ldr	r0, [r7, #4]
 8004760:	f7fe fe61 	bl	8003426 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004764:	2101      	movs	r1, #1
 8004766:	6838      	ldr	r0, [r7, #0]
 8004768:	f000 fa80 	bl	8004c6c <prvAddCurrentTaskToDelayedList>
}
 800476c:	bf00      	nop
 800476e:	3710      	adds	r7, #16
 8004770:	46bd      	mov	sp, r7
 8004772:	bd80      	pop	{r7, pc}
 8004774:	200008fc 	.word	0x200008fc

08004778 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004778:	b580      	push	{r7, lr}
 800477a:	b086      	sub	sp, #24
 800477c:	af00      	add	r7, sp, #0
 800477e:	60f8      	str	r0, [r7, #12]
 8004780:	60b9      	str	r1, [r7, #8]
 8004782:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	2b00      	cmp	r3, #0
 8004788:	d10a      	bne.n	80047a0 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800478a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800478e:	f383 8811 	msr	BASEPRI, r3
 8004792:	f3bf 8f6f 	isb	sy
 8004796:	f3bf 8f4f 	dsb	sy
 800479a:	617b      	str	r3, [r7, #20]
}
 800479c:	bf00      	nop
 800479e:	e7fe      	b.n	800479e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80047a0:	4b0a      	ldr	r3, [pc, #40]	; (80047cc <vTaskPlaceOnEventListRestricted+0x54>)
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	3318      	adds	r3, #24
 80047a6:	4619      	mov	r1, r3
 80047a8:	68f8      	ldr	r0, [r7, #12]
 80047aa:	f7fe fe18 	bl	80033de <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d002      	beq.n	80047ba <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80047b4:	f04f 33ff 	mov.w	r3, #4294967295
 80047b8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80047ba:	6879      	ldr	r1, [r7, #4]
 80047bc:	68b8      	ldr	r0, [r7, #8]
 80047be:	f000 fa55 	bl	8004c6c <prvAddCurrentTaskToDelayedList>
	}
 80047c2:	bf00      	nop
 80047c4:	3718      	adds	r7, #24
 80047c6:	46bd      	mov	sp, r7
 80047c8:	bd80      	pop	{r7, pc}
 80047ca:	bf00      	nop
 80047cc:	200008fc 	.word	0x200008fc

080047d0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80047d0:	b580      	push	{r7, lr}
 80047d2:	b086      	sub	sp, #24
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	68db      	ldr	r3, [r3, #12]
 80047dc:	68db      	ldr	r3, [r3, #12]
 80047de:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80047e0:	693b      	ldr	r3, [r7, #16]
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d10a      	bne.n	80047fc <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80047e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047ea:	f383 8811 	msr	BASEPRI, r3
 80047ee:	f3bf 8f6f 	isb	sy
 80047f2:	f3bf 8f4f 	dsb	sy
 80047f6:	60fb      	str	r3, [r7, #12]
}
 80047f8:	bf00      	nop
 80047fa:	e7fe      	b.n	80047fa <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80047fc:	693b      	ldr	r3, [r7, #16]
 80047fe:	3318      	adds	r3, #24
 8004800:	4618      	mov	r0, r3
 8004802:	f7fe fe49 	bl	8003498 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004806:	4b1e      	ldr	r3, [pc, #120]	; (8004880 <xTaskRemoveFromEventList+0xb0>)
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	2b00      	cmp	r3, #0
 800480c:	d11d      	bne.n	800484a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800480e:	693b      	ldr	r3, [r7, #16]
 8004810:	3304      	adds	r3, #4
 8004812:	4618      	mov	r0, r3
 8004814:	f7fe fe40 	bl	8003498 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004818:	693b      	ldr	r3, [r7, #16]
 800481a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800481c:	4b19      	ldr	r3, [pc, #100]	; (8004884 <xTaskRemoveFromEventList+0xb4>)
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	429a      	cmp	r2, r3
 8004822:	d903      	bls.n	800482c <xTaskRemoveFromEventList+0x5c>
 8004824:	693b      	ldr	r3, [r7, #16]
 8004826:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004828:	4a16      	ldr	r2, [pc, #88]	; (8004884 <xTaskRemoveFromEventList+0xb4>)
 800482a:	6013      	str	r3, [r2, #0]
 800482c:	693b      	ldr	r3, [r7, #16]
 800482e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004830:	4613      	mov	r3, r2
 8004832:	009b      	lsls	r3, r3, #2
 8004834:	4413      	add	r3, r2
 8004836:	009b      	lsls	r3, r3, #2
 8004838:	4a13      	ldr	r2, [pc, #76]	; (8004888 <xTaskRemoveFromEventList+0xb8>)
 800483a:	441a      	add	r2, r3
 800483c:	693b      	ldr	r3, [r7, #16]
 800483e:	3304      	adds	r3, #4
 8004840:	4619      	mov	r1, r3
 8004842:	4610      	mov	r0, r2
 8004844:	f7fe fdcb 	bl	80033de <vListInsertEnd>
 8004848:	e005      	b.n	8004856 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800484a:	693b      	ldr	r3, [r7, #16]
 800484c:	3318      	adds	r3, #24
 800484e:	4619      	mov	r1, r3
 8004850:	480e      	ldr	r0, [pc, #56]	; (800488c <xTaskRemoveFromEventList+0xbc>)
 8004852:	f7fe fdc4 	bl	80033de <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004856:	693b      	ldr	r3, [r7, #16]
 8004858:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800485a:	4b0d      	ldr	r3, [pc, #52]	; (8004890 <xTaskRemoveFromEventList+0xc0>)
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004860:	429a      	cmp	r2, r3
 8004862:	d905      	bls.n	8004870 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004864:	2301      	movs	r3, #1
 8004866:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004868:	4b0a      	ldr	r3, [pc, #40]	; (8004894 <xTaskRemoveFromEventList+0xc4>)
 800486a:	2201      	movs	r2, #1
 800486c:	601a      	str	r2, [r3, #0]
 800486e:	e001      	b.n	8004874 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8004870:	2300      	movs	r3, #0
 8004872:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004874:	697b      	ldr	r3, [r7, #20]
}
 8004876:	4618      	mov	r0, r3
 8004878:	3718      	adds	r7, #24
 800487a:	46bd      	mov	sp, r7
 800487c:	bd80      	pop	{r7, pc}
 800487e:	bf00      	nop
 8004880:	20000df8 	.word	0x20000df8
 8004884:	20000dd8 	.word	0x20000dd8
 8004888:	20000900 	.word	0x20000900
 800488c:	20000d90 	.word	0x20000d90
 8004890:	200008fc 	.word	0x200008fc
 8004894:	20000de4 	.word	0x20000de4

08004898 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004898:	b480      	push	{r7}
 800489a:	b083      	sub	sp, #12
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80048a0:	4b06      	ldr	r3, [pc, #24]	; (80048bc <vTaskInternalSetTimeOutState+0x24>)
 80048a2:	681a      	ldr	r2, [r3, #0]
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80048a8:	4b05      	ldr	r3, [pc, #20]	; (80048c0 <vTaskInternalSetTimeOutState+0x28>)
 80048aa:	681a      	ldr	r2, [r3, #0]
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	605a      	str	r2, [r3, #4]
}
 80048b0:	bf00      	nop
 80048b2:	370c      	adds	r7, #12
 80048b4:	46bd      	mov	sp, r7
 80048b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ba:	4770      	bx	lr
 80048bc:	20000de8 	.word	0x20000de8
 80048c0:	20000dd4 	.word	0x20000dd4

080048c4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80048c4:	b580      	push	{r7, lr}
 80048c6:	b088      	sub	sp, #32
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	6078      	str	r0, [r7, #4]
 80048cc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d10a      	bne.n	80048ea <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80048d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048d8:	f383 8811 	msr	BASEPRI, r3
 80048dc:	f3bf 8f6f 	isb	sy
 80048e0:	f3bf 8f4f 	dsb	sy
 80048e4:	613b      	str	r3, [r7, #16]
}
 80048e6:	bf00      	nop
 80048e8:	e7fe      	b.n	80048e8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80048ea:	683b      	ldr	r3, [r7, #0]
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d10a      	bne.n	8004906 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80048f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048f4:	f383 8811 	msr	BASEPRI, r3
 80048f8:	f3bf 8f6f 	isb	sy
 80048fc:	f3bf 8f4f 	dsb	sy
 8004900:	60fb      	str	r3, [r7, #12]
}
 8004902:	bf00      	nop
 8004904:	e7fe      	b.n	8004904 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8004906:	f000 fe7d 	bl	8005604 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800490a:	4b1d      	ldr	r3, [pc, #116]	; (8004980 <xTaskCheckForTimeOut+0xbc>)
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	685b      	ldr	r3, [r3, #4]
 8004914:	69ba      	ldr	r2, [r7, #24]
 8004916:	1ad3      	subs	r3, r2, r3
 8004918:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004922:	d102      	bne.n	800492a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004924:	2300      	movs	r3, #0
 8004926:	61fb      	str	r3, [r7, #28]
 8004928:	e023      	b.n	8004972 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681a      	ldr	r2, [r3, #0]
 800492e:	4b15      	ldr	r3, [pc, #84]	; (8004984 <xTaskCheckForTimeOut+0xc0>)
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	429a      	cmp	r2, r3
 8004934:	d007      	beq.n	8004946 <xTaskCheckForTimeOut+0x82>
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	685b      	ldr	r3, [r3, #4]
 800493a:	69ba      	ldr	r2, [r7, #24]
 800493c:	429a      	cmp	r2, r3
 800493e:	d302      	bcc.n	8004946 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004940:	2301      	movs	r3, #1
 8004942:	61fb      	str	r3, [r7, #28]
 8004944:	e015      	b.n	8004972 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004946:	683b      	ldr	r3, [r7, #0]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	697a      	ldr	r2, [r7, #20]
 800494c:	429a      	cmp	r2, r3
 800494e:	d20b      	bcs.n	8004968 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	681a      	ldr	r2, [r3, #0]
 8004954:	697b      	ldr	r3, [r7, #20]
 8004956:	1ad2      	subs	r2, r2, r3
 8004958:	683b      	ldr	r3, [r7, #0]
 800495a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800495c:	6878      	ldr	r0, [r7, #4]
 800495e:	f7ff ff9b 	bl	8004898 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004962:	2300      	movs	r3, #0
 8004964:	61fb      	str	r3, [r7, #28]
 8004966:	e004      	b.n	8004972 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8004968:	683b      	ldr	r3, [r7, #0]
 800496a:	2200      	movs	r2, #0
 800496c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800496e:	2301      	movs	r3, #1
 8004970:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004972:	f000 fe77 	bl	8005664 <vPortExitCritical>

	return xReturn;
 8004976:	69fb      	ldr	r3, [r7, #28]
}
 8004978:	4618      	mov	r0, r3
 800497a:	3720      	adds	r7, #32
 800497c:	46bd      	mov	sp, r7
 800497e:	bd80      	pop	{r7, pc}
 8004980:	20000dd4 	.word	0x20000dd4
 8004984:	20000de8 	.word	0x20000de8

08004988 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004988:	b480      	push	{r7}
 800498a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800498c:	4b03      	ldr	r3, [pc, #12]	; (800499c <vTaskMissedYield+0x14>)
 800498e:	2201      	movs	r2, #1
 8004990:	601a      	str	r2, [r3, #0]
}
 8004992:	bf00      	nop
 8004994:	46bd      	mov	sp, r7
 8004996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499a:	4770      	bx	lr
 800499c:	20000de4 	.word	0x20000de4

080049a0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80049a0:	b580      	push	{r7, lr}
 80049a2:	b082      	sub	sp, #8
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80049a8:	f000 f852 	bl	8004a50 <prvCheckTasksWaitingTermination>
			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */

			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80049ac:	4b06      	ldr	r3, [pc, #24]	; (80049c8 <prvIdleTask+0x28>)
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	2b01      	cmp	r3, #1
 80049b2:	d9f9      	bls.n	80049a8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80049b4:	4b05      	ldr	r3, [pc, #20]	; (80049cc <prvIdleTask+0x2c>)
 80049b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80049ba:	601a      	str	r2, [r3, #0]
 80049bc:	f3bf 8f4f 	dsb	sy
 80049c0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80049c4:	e7f0      	b.n	80049a8 <prvIdleTask+0x8>
 80049c6:	bf00      	nop
 80049c8:	20000900 	.word	0x20000900
 80049cc:	e000ed04 	.word	0xe000ed04

080049d0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80049d0:	b580      	push	{r7, lr}
 80049d2:	b082      	sub	sp, #8
 80049d4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80049d6:	2300      	movs	r3, #0
 80049d8:	607b      	str	r3, [r7, #4]
 80049da:	e00c      	b.n	80049f6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80049dc:	687a      	ldr	r2, [r7, #4]
 80049de:	4613      	mov	r3, r2
 80049e0:	009b      	lsls	r3, r3, #2
 80049e2:	4413      	add	r3, r2
 80049e4:	009b      	lsls	r3, r3, #2
 80049e6:	4a12      	ldr	r2, [pc, #72]	; (8004a30 <prvInitialiseTaskLists+0x60>)
 80049e8:	4413      	add	r3, r2
 80049ea:	4618      	mov	r0, r3
 80049ec:	f7fe fcca 	bl	8003384 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	3301      	adds	r3, #1
 80049f4:	607b      	str	r3, [r7, #4]
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	2b37      	cmp	r3, #55	; 0x37
 80049fa:	d9ef      	bls.n	80049dc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80049fc:	480d      	ldr	r0, [pc, #52]	; (8004a34 <prvInitialiseTaskLists+0x64>)
 80049fe:	f7fe fcc1 	bl	8003384 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004a02:	480d      	ldr	r0, [pc, #52]	; (8004a38 <prvInitialiseTaskLists+0x68>)
 8004a04:	f7fe fcbe 	bl	8003384 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004a08:	480c      	ldr	r0, [pc, #48]	; (8004a3c <prvInitialiseTaskLists+0x6c>)
 8004a0a:	f7fe fcbb 	bl	8003384 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004a0e:	480c      	ldr	r0, [pc, #48]	; (8004a40 <prvInitialiseTaskLists+0x70>)
 8004a10:	f7fe fcb8 	bl	8003384 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004a14:	480b      	ldr	r0, [pc, #44]	; (8004a44 <prvInitialiseTaskLists+0x74>)
 8004a16:	f7fe fcb5 	bl	8003384 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004a1a:	4b0b      	ldr	r3, [pc, #44]	; (8004a48 <prvInitialiseTaskLists+0x78>)
 8004a1c:	4a05      	ldr	r2, [pc, #20]	; (8004a34 <prvInitialiseTaskLists+0x64>)
 8004a1e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004a20:	4b0a      	ldr	r3, [pc, #40]	; (8004a4c <prvInitialiseTaskLists+0x7c>)
 8004a22:	4a05      	ldr	r2, [pc, #20]	; (8004a38 <prvInitialiseTaskLists+0x68>)
 8004a24:	601a      	str	r2, [r3, #0]
}
 8004a26:	bf00      	nop
 8004a28:	3708      	adds	r7, #8
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	bd80      	pop	{r7, pc}
 8004a2e:	bf00      	nop
 8004a30:	20000900 	.word	0x20000900
 8004a34:	20000d60 	.word	0x20000d60
 8004a38:	20000d74 	.word	0x20000d74
 8004a3c:	20000d90 	.word	0x20000d90
 8004a40:	20000da4 	.word	0x20000da4
 8004a44:	20000dbc 	.word	0x20000dbc
 8004a48:	20000d88 	.word	0x20000d88
 8004a4c:	20000d8c 	.word	0x20000d8c

08004a50 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004a50:	b580      	push	{r7, lr}
 8004a52:	b082      	sub	sp, #8
 8004a54:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004a56:	e019      	b.n	8004a8c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004a58:	f000 fdd4 	bl	8005604 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004a5c:	4b10      	ldr	r3, [pc, #64]	; (8004aa0 <prvCheckTasksWaitingTermination+0x50>)
 8004a5e:	68db      	ldr	r3, [r3, #12]
 8004a60:	68db      	ldr	r3, [r3, #12]
 8004a62:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	3304      	adds	r3, #4
 8004a68:	4618      	mov	r0, r3
 8004a6a:	f7fe fd15 	bl	8003498 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004a6e:	4b0d      	ldr	r3, [pc, #52]	; (8004aa4 <prvCheckTasksWaitingTermination+0x54>)
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	3b01      	subs	r3, #1
 8004a74:	4a0b      	ldr	r2, [pc, #44]	; (8004aa4 <prvCheckTasksWaitingTermination+0x54>)
 8004a76:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004a78:	4b0b      	ldr	r3, [pc, #44]	; (8004aa8 <prvCheckTasksWaitingTermination+0x58>)
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	3b01      	subs	r3, #1
 8004a7e:	4a0a      	ldr	r2, [pc, #40]	; (8004aa8 <prvCheckTasksWaitingTermination+0x58>)
 8004a80:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004a82:	f000 fdef 	bl	8005664 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004a86:	6878      	ldr	r0, [r7, #4]
 8004a88:	f000 f810 	bl	8004aac <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004a8c:	4b06      	ldr	r3, [pc, #24]	; (8004aa8 <prvCheckTasksWaitingTermination+0x58>)
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d1e1      	bne.n	8004a58 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004a94:	bf00      	nop
 8004a96:	bf00      	nop
 8004a98:	3708      	adds	r7, #8
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	bd80      	pop	{r7, pc}
 8004a9e:	bf00      	nop
 8004aa0:	20000da4 	.word	0x20000da4
 8004aa4:	20000dd0 	.word	0x20000dd0
 8004aa8:	20000db8 	.word	0x20000db8

08004aac <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004aac:	b580      	push	{r7, lr}
 8004aae:	b084      	sub	sp, #16
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	3354      	adds	r3, #84	; 0x54
 8004ab8:	4618      	mov	r0, r3
 8004aba:	f001 f8f9 	bl	8005cb0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d108      	bne.n	8004ada <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004acc:	4618      	mov	r0, r3
 8004ace:	f000 ff87 	bl	80059e0 <vPortFree>
				vPortFree( pxTCB );
 8004ad2:	6878      	ldr	r0, [r7, #4]
 8004ad4:	f000 ff84 	bl	80059e0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004ad8:	e018      	b.n	8004b0c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8004ae0:	2b01      	cmp	r3, #1
 8004ae2:	d103      	bne.n	8004aec <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8004ae4:	6878      	ldr	r0, [r7, #4]
 8004ae6:	f000 ff7b 	bl	80059e0 <vPortFree>
	}
 8004aea:	e00f      	b.n	8004b0c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8004af2:	2b02      	cmp	r3, #2
 8004af4:	d00a      	beq.n	8004b0c <prvDeleteTCB+0x60>
	__asm volatile
 8004af6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004afa:	f383 8811 	msr	BASEPRI, r3
 8004afe:	f3bf 8f6f 	isb	sy
 8004b02:	f3bf 8f4f 	dsb	sy
 8004b06:	60fb      	str	r3, [r7, #12]
}
 8004b08:	bf00      	nop
 8004b0a:	e7fe      	b.n	8004b0a <prvDeleteTCB+0x5e>
	}
 8004b0c:	bf00      	nop
 8004b0e:	3710      	adds	r7, #16
 8004b10:	46bd      	mov	sp, r7
 8004b12:	bd80      	pop	{r7, pc}

08004b14 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004b14:	b480      	push	{r7}
 8004b16:	b083      	sub	sp, #12
 8004b18:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004b1a:	4b0c      	ldr	r3, [pc, #48]	; (8004b4c <prvResetNextTaskUnblockTime+0x38>)
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d104      	bne.n	8004b2e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004b24:	4b0a      	ldr	r3, [pc, #40]	; (8004b50 <prvResetNextTaskUnblockTime+0x3c>)
 8004b26:	f04f 32ff 	mov.w	r2, #4294967295
 8004b2a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004b2c:	e008      	b.n	8004b40 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004b2e:	4b07      	ldr	r3, [pc, #28]	; (8004b4c <prvResetNextTaskUnblockTime+0x38>)
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	68db      	ldr	r3, [r3, #12]
 8004b34:	68db      	ldr	r3, [r3, #12]
 8004b36:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	685b      	ldr	r3, [r3, #4]
 8004b3c:	4a04      	ldr	r2, [pc, #16]	; (8004b50 <prvResetNextTaskUnblockTime+0x3c>)
 8004b3e:	6013      	str	r3, [r2, #0]
}
 8004b40:	bf00      	nop
 8004b42:	370c      	adds	r7, #12
 8004b44:	46bd      	mov	sp, r7
 8004b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4a:	4770      	bx	lr
 8004b4c:	20000d88 	.word	0x20000d88
 8004b50:	20000df0 	.word	0x20000df0

08004b54 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004b54:	b480      	push	{r7}
 8004b56:	b083      	sub	sp, #12
 8004b58:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004b5a:	4b0b      	ldr	r3, [pc, #44]	; (8004b88 <xTaskGetSchedulerState+0x34>)
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d102      	bne.n	8004b68 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004b62:	2301      	movs	r3, #1
 8004b64:	607b      	str	r3, [r7, #4]
 8004b66:	e008      	b.n	8004b7a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004b68:	4b08      	ldr	r3, [pc, #32]	; (8004b8c <xTaskGetSchedulerState+0x38>)
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d102      	bne.n	8004b76 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004b70:	2302      	movs	r3, #2
 8004b72:	607b      	str	r3, [r7, #4]
 8004b74:	e001      	b.n	8004b7a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004b76:	2300      	movs	r3, #0
 8004b78:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004b7a:	687b      	ldr	r3, [r7, #4]
	}
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	370c      	adds	r7, #12
 8004b80:	46bd      	mov	sp, r7
 8004b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b86:	4770      	bx	lr
 8004b88:	20000ddc 	.word	0x20000ddc
 8004b8c:	20000df8 	.word	0x20000df8

08004b90 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004b90:	b580      	push	{r7, lr}
 8004b92:	b086      	sub	sp, #24
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004b9c:	2300      	movs	r3, #0
 8004b9e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d056      	beq.n	8004c54 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004ba6:	4b2e      	ldr	r3, [pc, #184]	; (8004c60 <xTaskPriorityDisinherit+0xd0>)
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	693a      	ldr	r2, [r7, #16]
 8004bac:	429a      	cmp	r2, r3
 8004bae:	d00a      	beq.n	8004bc6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8004bb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bb4:	f383 8811 	msr	BASEPRI, r3
 8004bb8:	f3bf 8f6f 	isb	sy
 8004bbc:	f3bf 8f4f 	dsb	sy
 8004bc0:	60fb      	str	r3, [r7, #12]
}
 8004bc2:	bf00      	nop
 8004bc4:	e7fe      	b.n	8004bc4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004bc6:	693b      	ldr	r3, [r7, #16]
 8004bc8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d10a      	bne.n	8004be4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8004bce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bd2:	f383 8811 	msr	BASEPRI, r3
 8004bd6:	f3bf 8f6f 	isb	sy
 8004bda:	f3bf 8f4f 	dsb	sy
 8004bde:	60bb      	str	r3, [r7, #8]
}
 8004be0:	bf00      	nop
 8004be2:	e7fe      	b.n	8004be2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8004be4:	693b      	ldr	r3, [r7, #16]
 8004be6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004be8:	1e5a      	subs	r2, r3, #1
 8004bea:	693b      	ldr	r3, [r7, #16]
 8004bec:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004bee:	693b      	ldr	r3, [r7, #16]
 8004bf0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004bf2:	693b      	ldr	r3, [r7, #16]
 8004bf4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004bf6:	429a      	cmp	r2, r3
 8004bf8:	d02c      	beq.n	8004c54 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004bfa:	693b      	ldr	r3, [r7, #16]
 8004bfc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d128      	bne.n	8004c54 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004c02:	693b      	ldr	r3, [r7, #16]
 8004c04:	3304      	adds	r3, #4
 8004c06:	4618      	mov	r0, r3
 8004c08:	f7fe fc46 	bl	8003498 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004c0c:	693b      	ldr	r3, [r7, #16]
 8004c0e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004c10:	693b      	ldr	r3, [r7, #16]
 8004c12:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004c14:	693b      	ldr	r3, [r7, #16]
 8004c16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c18:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004c1c:	693b      	ldr	r3, [r7, #16]
 8004c1e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004c20:	693b      	ldr	r3, [r7, #16]
 8004c22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c24:	4b0f      	ldr	r3, [pc, #60]	; (8004c64 <xTaskPriorityDisinherit+0xd4>)
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	429a      	cmp	r2, r3
 8004c2a:	d903      	bls.n	8004c34 <xTaskPriorityDisinherit+0xa4>
 8004c2c:	693b      	ldr	r3, [r7, #16]
 8004c2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c30:	4a0c      	ldr	r2, [pc, #48]	; (8004c64 <xTaskPriorityDisinherit+0xd4>)
 8004c32:	6013      	str	r3, [r2, #0]
 8004c34:	693b      	ldr	r3, [r7, #16]
 8004c36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c38:	4613      	mov	r3, r2
 8004c3a:	009b      	lsls	r3, r3, #2
 8004c3c:	4413      	add	r3, r2
 8004c3e:	009b      	lsls	r3, r3, #2
 8004c40:	4a09      	ldr	r2, [pc, #36]	; (8004c68 <xTaskPriorityDisinherit+0xd8>)
 8004c42:	441a      	add	r2, r3
 8004c44:	693b      	ldr	r3, [r7, #16]
 8004c46:	3304      	adds	r3, #4
 8004c48:	4619      	mov	r1, r3
 8004c4a:	4610      	mov	r0, r2
 8004c4c:	f7fe fbc7 	bl	80033de <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004c50:	2301      	movs	r3, #1
 8004c52:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004c54:	697b      	ldr	r3, [r7, #20]
	}
 8004c56:	4618      	mov	r0, r3
 8004c58:	3718      	adds	r7, #24
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	bd80      	pop	{r7, pc}
 8004c5e:	bf00      	nop
 8004c60:	200008fc 	.word	0x200008fc
 8004c64:	20000dd8 	.word	0x20000dd8
 8004c68:	20000900 	.word	0x20000900

08004c6c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004c6c:	b580      	push	{r7, lr}
 8004c6e:	b084      	sub	sp, #16
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	6078      	str	r0, [r7, #4]
 8004c74:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004c76:	4b21      	ldr	r3, [pc, #132]	; (8004cfc <prvAddCurrentTaskToDelayedList+0x90>)
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004c7c:	4b20      	ldr	r3, [pc, #128]	; (8004d00 <prvAddCurrentTaskToDelayedList+0x94>)
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	3304      	adds	r3, #4
 8004c82:	4618      	mov	r0, r3
 8004c84:	f7fe fc08 	bl	8003498 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c8e:	d10a      	bne.n	8004ca6 <prvAddCurrentTaskToDelayedList+0x3a>
 8004c90:	683b      	ldr	r3, [r7, #0]
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d007      	beq.n	8004ca6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004c96:	4b1a      	ldr	r3, [pc, #104]	; (8004d00 <prvAddCurrentTaskToDelayedList+0x94>)
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	3304      	adds	r3, #4
 8004c9c:	4619      	mov	r1, r3
 8004c9e:	4819      	ldr	r0, [pc, #100]	; (8004d04 <prvAddCurrentTaskToDelayedList+0x98>)
 8004ca0:	f7fe fb9d 	bl	80033de <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004ca4:	e026      	b.n	8004cf4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004ca6:	68fa      	ldr	r2, [r7, #12]
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	4413      	add	r3, r2
 8004cac:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004cae:	4b14      	ldr	r3, [pc, #80]	; (8004d00 <prvAddCurrentTaskToDelayedList+0x94>)
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	68ba      	ldr	r2, [r7, #8]
 8004cb4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004cb6:	68ba      	ldr	r2, [r7, #8]
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	429a      	cmp	r2, r3
 8004cbc:	d209      	bcs.n	8004cd2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004cbe:	4b12      	ldr	r3, [pc, #72]	; (8004d08 <prvAddCurrentTaskToDelayedList+0x9c>)
 8004cc0:	681a      	ldr	r2, [r3, #0]
 8004cc2:	4b0f      	ldr	r3, [pc, #60]	; (8004d00 <prvAddCurrentTaskToDelayedList+0x94>)
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	3304      	adds	r3, #4
 8004cc8:	4619      	mov	r1, r3
 8004cca:	4610      	mov	r0, r2
 8004ccc:	f7fe fbab 	bl	8003426 <vListInsert>
}
 8004cd0:	e010      	b.n	8004cf4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004cd2:	4b0e      	ldr	r3, [pc, #56]	; (8004d0c <prvAddCurrentTaskToDelayedList+0xa0>)
 8004cd4:	681a      	ldr	r2, [r3, #0]
 8004cd6:	4b0a      	ldr	r3, [pc, #40]	; (8004d00 <prvAddCurrentTaskToDelayedList+0x94>)
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	3304      	adds	r3, #4
 8004cdc:	4619      	mov	r1, r3
 8004cde:	4610      	mov	r0, r2
 8004ce0:	f7fe fba1 	bl	8003426 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004ce4:	4b0a      	ldr	r3, [pc, #40]	; (8004d10 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	68ba      	ldr	r2, [r7, #8]
 8004cea:	429a      	cmp	r2, r3
 8004cec:	d202      	bcs.n	8004cf4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8004cee:	4a08      	ldr	r2, [pc, #32]	; (8004d10 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004cf0:	68bb      	ldr	r3, [r7, #8]
 8004cf2:	6013      	str	r3, [r2, #0]
}
 8004cf4:	bf00      	nop
 8004cf6:	3710      	adds	r7, #16
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	bd80      	pop	{r7, pc}
 8004cfc:	20000dd4 	.word	0x20000dd4
 8004d00:	200008fc 	.word	0x200008fc
 8004d04:	20000dbc 	.word	0x20000dbc
 8004d08:	20000d8c 	.word	0x20000d8c
 8004d0c:	20000d88 	.word	0x20000d88
 8004d10:	20000df0 	.word	0x20000df0

08004d14 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004d14:	b580      	push	{r7, lr}
 8004d16:	b08a      	sub	sp, #40	; 0x28
 8004d18:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004d1a:	2300      	movs	r3, #0
 8004d1c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004d1e:	f000 fb07 	bl	8005330 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8004d22:	4b1c      	ldr	r3, [pc, #112]	; (8004d94 <xTimerCreateTimerTask+0x80>)
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d021      	beq.n	8004d6e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004d2a:	2300      	movs	r3, #0
 8004d2c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004d2e:	2300      	movs	r3, #0
 8004d30:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8004d32:	1d3a      	adds	r2, r7, #4
 8004d34:	f107 0108 	add.w	r1, r7, #8
 8004d38:	f107 030c 	add.w	r3, r7, #12
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	f7fe fb07 	bl	8003350 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8004d42:	6879      	ldr	r1, [r7, #4]
 8004d44:	68bb      	ldr	r3, [r7, #8]
 8004d46:	68fa      	ldr	r2, [r7, #12]
 8004d48:	9202      	str	r2, [sp, #8]
 8004d4a:	9301      	str	r3, [sp, #4]
 8004d4c:	2302      	movs	r3, #2
 8004d4e:	9300      	str	r3, [sp, #0]
 8004d50:	2300      	movs	r3, #0
 8004d52:	460a      	mov	r2, r1
 8004d54:	4910      	ldr	r1, [pc, #64]	; (8004d98 <xTimerCreateTimerTask+0x84>)
 8004d56:	4811      	ldr	r0, [pc, #68]	; (8004d9c <xTimerCreateTimerTask+0x88>)
 8004d58:	f7ff f8b4 	bl	8003ec4 <xTaskCreateStatic>
 8004d5c:	4603      	mov	r3, r0
 8004d5e:	4a10      	ldr	r2, [pc, #64]	; (8004da0 <xTimerCreateTimerTask+0x8c>)
 8004d60:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8004d62:	4b0f      	ldr	r3, [pc, #60]	; (8004da0 <xTimerCreateTimerTask+0x8c>)
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d001      	beq.n	8004d6e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8004d6a:	2301      	movs	r3, #1
 8004d6c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004d6e:	697b      	ldr	r3, [r7, #20]
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d10a      	bne.n	8004d8a <xTimerCreateTimerTask+0x76>
	__asm volatile
 8004d74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d78:	f383 8811 	msr	BASEPRI, r3
 8004d7c:	f3bf 8f6f 	isb	sy
 8004d80:	f3bf 8f4f 	dsb	sy
 8004d84:	613b      	str	r3, [r7, #16]
}
 8004d86:	bf00      	nop
 8004d88:	e7fe      	b.n	8004d88 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8004d8a:	697b      	ldr	r3, [r7, #20]
}
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	3718      	adds	r7, #24
 8004d90:	46bd      	mov	sp, r7
 8004d92:	bd80      	pop	{r7, pc}
 8004d94:	20000e2c 	.word	0x20000e2c
 8004d98:	08005e54 	.word	0x08005e54
 8004d9c:	08004ed9 	.word	0x08004ed9
 8004da0:	20000e30 	.word	0x20000e30

08004da4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004da4:	b580      	push	{r7, lr}
 8004da6:	b08a      	sub	sp, #40	; 0x28
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	60f8      	str	r0, [r7, #12]
 8004dac:	60b9      	str	r1, [r7, #8]
 8004dae:	607a      	str	r2, [r7, #4]
 8004db0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8004db2:	2300      	movs	r3, #0
 8004db4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d10a      	bne.n	8004dd2 <xTimerGenericCommand+0x2e>
	__asm volatile
 8004dbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dc0:	f383 8811 	msr	BASEPRI, r3
 8004dc4:	f3bf 8f6f 	isb	sy
 8004dc8:	f3bf 8f4f 	dsb	sy
 8004dcc:	623b      	str	r3, [r7, #32]
}
 8004dce:	bf00      	nop
 8004dd0:	e7fe      	b.n	8004dd0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004dd2:	4b1a      	ldr	r3, [pc, #104]	; (8004e3c <xTimerGenericCommand+0x98>)
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d02a      	beq.n	8004e30 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004dda:	68bb      	ldr	r3, [r7, #8]
 8004ddc:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004de6:	68bb      	ldr	r3, [r7, #8]
 8004de8:	2b05      	cmp	r3, #5
 8004dea:	dc18      	bgt.n	8004e1e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004dec:	f7ff feb2 	bl	8004b54 <xTaskGetSchedulerState>
 8004df0:	4603      	mov	r3, r0
 8004df2:	2b02      	cmp	r3, #2
 8004df4:	d109      	bne.n	8004e0a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004df6:	4b11      	ldr	r3, [pc, #68]	; (8004e3c <xTimerGenericCommand+0x98>)
 8004df8:	6818      	ldr	r0, [r3, #0]
 8004dfa:	f107 0110 	add.w	r1, r7, #16
 8004dfe:	2300      	movs	r3, #0
 8004e00:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004e02:	f7fe fc77 	bl	80036f4 <xQueueGenericSend>
 8004e06:	6278      	str	r0, [r7, #36]	; 0x24
 8004e08:	e012      	b.n	8004e30 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004e0a:	4b0c      	ldr	r3, [pc, #48]	; (8004e3c <xTimerGenericCommand+0x98>)
 8004e0c:	6818      	ldr	r0, [r3, #0]
 8004e0e:	f107 0110 	add.w	r1, r7, #16
 8004e12:	2300      	movs	r3, #0
 8004e14:	2200      	movs	r2, #0
 8004e16:	f7fe fc6d 	bl	80036f4 <xQueueGenericSend>
 8004e1a:	6278      	str	r0, [r7, #36]	; 0x24
 8004e1c:	e008      	b.n	8004e30 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004e1e:	4b07      	ldr	r3, [pc, #28]	; (8004e3c <xTimerGenericCommand+0x98>)
 8004e20:	6818      	ldr	r0, [r3, #0]
 8004e22:	f107 0110 	add.w	r1, r7, #16
 8004e26:	2300      	movs	r3, #0
 8004e28:	683a      	ldr	r2, [r7, #0]
 8004e2a:	f7fe fd61 	bl	80038f0 <xQueueGenericSendFromISR>
 8004e2e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004e32:	4618      	mov	r0, r3
 8004e34:	3728      	adds	r7, #40	; 0x28
 8004e36:	46bd      	mov	sp, r7
 8004e38:	bd80      	pop	{r7, pc}
 8004e3a:	bf00      	nop
 8004e3c:	20000e2c 	.word	0x20000e2c

08004e40 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004e40:	b580      	push	{r7, lr}
 8004e42:	b088      	sub	sp, #32
 8004e44:	af02      	add	r7, sp, #8
 8004e46:	6078      	str	r0, [r7, #4]
 8004e48:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004e4a:	4b22      	ldr	r3, [pc, #136]	; (8004ed4 <prvProcessExpiredTimer+0x94>)
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	68db      	ldr	r3, [r3, #12]
 8004e50:	68db      	ldr	r3, [r3, #12]
 8004e52:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004e54:	697b      	ldr	r3, [r7, #20]
 8004e56:	3304      	adds	r3, #4
 8004e58:	4618      	mov	r0, r3
 8004e5a:	f7fe fb1d 	bl	8003498 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004e5e:	697b      	ldr	r3, [r7, #20]
 8004e60:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004e64:	f003 0304 	and.w	r3, r3, #4
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d022      	beq.n	8004eb2 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004e6c:	697b      	ldr	r3, [r7, #20]
 8004e6e:	699a      	ldr	r2, [r3, #24]
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	18d1      	adds	r1, r2, r3
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	683a      	ldr	r2, [r7, #0]
 8004e78:	6978      	ldr	r0, [r7, #20]
 8004e7a:	f000 f8d1 	bl	8005020 <prvInsertTimerInActiveList>
 8004e7e:	4603      	mov	r3, r0
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d01f      	beq.n	8004ec4 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004e84:	2300      	movs	r3, #0
 8004e86:	9300      	str	r3, [sp, #0]
 8004e88:	2300      	movs	r3, #0
 8004e8a:	687a      	ldr	r2, [r7, #4]
 8004e8c:	2100      	movs	r1, #0
 8004e8e:	6978      	ldr	r0, [r7, #20]
 8004e90:	f7ff ff88 	bl	8004da4 <xTimerGenericCommand>
 8004e94:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004e96:	693b      	ldr	r3, [r7, #16]
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d113      	bne.n	8004ec4 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8004e9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ea0:	f383 8811 	msr	BASEPRI, r3
 8004ea4:	f3bf 8f6f 	isb	sy
 8004ea8:	f3bf 8f4f 	dsb	sy
 8004eac:	60fb      	str	r3, [r7, #12]
}
 8004eae:	bf00      	nop
 8004eb0:	e7fe      	b.n	8004eb0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004eb2:	697b      	ldr	r3, [r7, #20]
 8004eb4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004eb8:	f023 0301 	bic.w	r3, r3, #1
 8004ebc:	b2da      	uxtb	r2, r3
 8004ebe:	697b      	ldr	r3, [r7, #20]
 8004ec0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004ec4:	697b      	ldr	r3, [r7, #20]
 8004ec6:	6a1b      	ldr	r3, [r3, #32]
 8004ec8:	6978      	ldr	r0, [r7, #20]
 8004eca:	4798      	blx	r3
}
 8004ecc:	bf00      	nop
 8004ece:	3718      	adds	r7, #24
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	bd80      	pop	{r7, pc}
 8004ed4:	20000e24 	.word	0x20000e24

08004ed8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8004ed8:	b580      	push	{r7, lr}
 8004eda:	b084      	sub	sp, #16
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004ee0:	f107 0308 	add.w	r3, r7, #8
 8004ee4:	4618      	mov	r0, r3
 8004ee6:	f000 f857 	bl	8004f98 <prvGetNextExpireTime>
 8004eea:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004eec:	68bb      	ldr	r3, [r7, #8]
 8004eee:	4619      	mov	r1, r3
 8004ef0:	68f8      	ldr	r0, [r7, #12]
 8004ef2:	f000 f803 	bl	8004efc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004ef6:	f000 f8d5 	bl	80050a4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004efa:	e7f1      	b.n	8004ee0 <prvTimerTask+0x8>

08004efc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004efc:	b580      	push	{r7, lr}
 8004efe:	b084      	sub	sp, #16
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
 8004f04:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004f06:	f7ff fa39 	bl	800437c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004f0a:	f107 0308 	add.w	r3, r7, #8
 8004f0e:	4618      	mov	r0, r3
 8004f10:	f000 f866 	bl	8004fe0 <prvSampleTimeNow>
 8004f14:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004f16:	68bb      	ldr	r3, [r7, #8]
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d130      	bne.n	8004f7e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004f1c:	683b      	ldr	r3, [r7, #0]
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d10a      	bne.n	8004f38 <prvProcessTimerOrBlockTask+0x3c>
 8004f22:	687a      	ldr	r2, [r7, #4]
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	429a      	cmp	r2, r3
 8004f28:	d806      	bhi.n	8004f38 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004f2a:	f7ff fa35 	bl	8004398 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004f2e:	68f9      	ldr	r1, [r7, #12]
 8004f30:	6878      	ldr	r0, [r7, #4]
 8004f32:	f7ff ff85 	bl	8004e40 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004f36:	e024      	b.n	8004f82 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004f38:	683b      	ldr	r3, [r7, #0]
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d008      	beq.n	8004f50 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004f3e:	4b13      	ldr	r3, [pc, #76]	; (8004f8c <prvProcessTimerOrBlockTask+0x90>)
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d101      	bne.n	8004f4c <prvProcessTimerOrBlockTask+0x50>
 8004f48:	2301      	movs	r3, #1
 8004f4a:	e000      	b.n	8004f4e <prvProcessTimerOrBlockTask+0x52>
 8004f4c:	2300      	movs	r3, #0
 8004f4e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004f50:	4b0f      	ldr	r3, [pc, #60]	; (8004f90 <prvProcessTimerOrBlockTask+0x94>)
 8004f52:	6818      	ldr	r0, [r3, #0]
 8004f54:	687a      	ldr	r2, [r7, #4]
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	1ad3      	subs	r3, r2, r3
 8004f5a:	683a      	ldr	r2, [r7, #0]
 8004f5c:	4619      	mov	r1, r3
 8004f5e:	f7fe ff7d 	bl	8003e5c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004f62:	f7ff fa19 	bl	8004398 <xTaskResumeAll>
 8004f66:	4603      	mov	r3, r0
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d10a      	bne.n	8004f82 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004f6c:	4b09      	ldr	r3, [pc, #36]	; (8004f94 <prvProcessTimerOrBlockTask+0x98>)
 8004f6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f72:	601a      	str	r2, [r3, #0]
 8004f74:	f3bf 8f4f 	dsb	sy
 8004f78:	f3bf 8f6f 	isb	sy
}
 8004f7c:	e001      	b.n	8004f82 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8004f7e:	f7ff fa0b 	bl	8004398 <xTaskResumeAll>
}
 8004f82:	bf00      	nop
 8004f84:	3710      	adds	r7, #16
 8004f86:	46bd      	mov	sp, r7
 8004f88:	bd80      	pop	{r7, pc}
 8004f8a:	bf00      	nop
 8004f8c:	20000e28 	.word	0x20000e28
 8004f90:	20000e2c 	.word	0x20000e2c
 8004f94:	e000ed04 	.word	0xe000ed04

08004f98 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004f98:	b480      	push	{r7}
 8004f9a:	b085      	sub	sp, #20
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004fa0:	4b0e      	ldr	r3, [pc, #56]	; (8004fdc <prvGetNextExpireTime+0x44>)
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d101      	bne.n	8004fae <prvGetNextExpireTime+0x16>
 8004faa:	2201      	movs	r2, #1
 8004fac:	e000      	b.n	8004fb0 <prvGetNextExpireTime+0x18>
 8004fae:	2200      	movs	r2, #0
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d105      	bne.n	8004fc8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004fbc:	4b07      	ldr	r3, [pc, #28]	; (8004fdc <prvGetNextExpireTime+0x44>)
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	68db      	ldr	r3, [r3, #12]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	60fb      	str	r3, [r7, #12]
 8004fc6:	e001      	b.n	8004fcc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004fc8:	2300      	movs	r3, #0
 8004fca:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004fcc:	68fb      	ldr	r3, [r7, #12]
}
 8004fce:	4618      	mov	r0, r3
 8004fd0:	3714      	adds	r7, #20
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd8:	4770      	bx	lr
 8004fda:	bf00      	nop
 8004fdc:	20000e24 	.word	0x20000e24

08004fe0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004fe0:	b580      	push	{r7, lr}
 8004fe2:	b084      	sub	sp, #16
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004fe8:	f7ff fa74 	bl	80044d4 <xTaskGetTickCount>
 8004fec:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004fee:	4b0b      	ldr	r3, [pc, #44]	; (800501c <prvSampleTimeNow+0x3c>)
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	68fa      	ldr	r2, [r7, #12]
 8004ff4:	429a      	cmp	r2, r3
 8004ff6:	d205      	bcs.n	8005004 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004ff8:	f000 f936 	bl	8005268 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2201      	movs	r2, #1
 8005000:	601a      	str	r2, [r3, #0]
 8005002:	e002      	b.n	800500a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2200      	movs	r2, #0
 8005008:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800500a:	4a04      	ldr	r2, [pc, #16]	; (800501c <prvSampleTimeNow+0x3c>)
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005010:	68fb      	ldr	r3, [r7, #12]
}
 8005012:	4618      	mov	r0, r3
 8005014:	3710      	adds	r7, #16
 8005016:	46bd      	mov	sp, r7
 8005018:	bd80      	pop	{r7, pc}
 800501a:	bf00      	nop
 800501c:	20000e34 	.word	0x20000e34

08005020 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005020:	b580      	push	{r7, lr}
 8005022:	b086      	sub	sp, #24
 8005024:	af00      	add	r7, sp, #0
 8005026:	60f8      	str	r0, [r7, #12]
 8005028:	60b9      	str	r1, [r7, #8]
 800502a:	607a      	str	r2, [r7, #4]
 800502c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800502e:	2300      	movs	r3, #0
 8005030:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	68ba      	ldr	r2, [r7, #8]
 8005036:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	68fa      	ldr	r2, [r7, #12]
 800503c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800503e:	68ba      	ldr	r2, [r7, #8]
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	429a      	cmp	r2, r3
 8005044:	d812      	bhi.n	800506c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005046:	687a      	ldr	r2, [r7, #4]
 8005048:	683b      	ldr	r3, [r7, #0]
 800504a:	1ad2      	subs	r2, r2, r3
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	699b      	ldr	r3, [r3, #24]
 8005050:	429a      	cmp	r2, r3
 8005052:	d302      	bcc.n	800505a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005054:	2301      	movs	r3, #1
 8005056:	617b      	str	r3, [r7, #20]
 8005058:	e01b      	b.n	8005092 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800505a:	4b10      	ldr	r3, [pc, #64]	; (800509c <prvInsertTimerInActiveList+0x7c>)
 800505c:	681a      	ldr	r2, [r3, #0]
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	3304      	adds	r3, #4
 8005062:	4619      	mov	r1, r3
 8005064:	4610      	mov	r0, r2
 8005066:	f7fe f9de 	bl	8003426 <vListInsert>
 800506a:	e012      	b.n	8005092 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800506c:	687a      	ldr	r2, [r7, #4]
 800506e:	683b      	ldr	r3, [r7, #0]
 8005070:	429a      	cmp	r2, r3
 8005072:	d206      	bcs.n	8005082 <prvInsertTimerInActiveList+0x62>
 8005074:	68ba      	ldr	r2, [r7, #8]
 8005076:	683b      	ldr	r3, [r7, #0]
 8005078:	429a      	cmp	r2, r3
 800507a:	d302      	bcc.n	8005082 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800507c:	2301      	movs	r3, #1
 800507e:	617b      	str	r3, [r7, #20]
 8005080:	e007      	b.n	8005092 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005082:	4b07      	ldr	r3, [pc, #28]	; (80050a0 <prvInsertTimerInActiveList+0x80>)
 8005084:	681a      	ldr	r2, [r3, #0]
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	3304      	adds	r3, #4
 800508a:	4619      	mov	r1, r3
 800508c:	4610      	mov	r0, r2
 800508e:	f7fe f9ca 	bl	8003426 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005092:	697b      	ldr	r3, [r7, #20]
}
 8005094:	4618      	mov	r0, r3
 8005096:	3718      	adds	r7, #24
 8005098:	46bd      	mov	sp, r7
 800509a:	bd80      	pop	{r7, pc}
 800509c:	20000e28 	.word	0x20000e28
 80050a0:	20000e24 	.word	0x20000e24

080050a4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80050a4:	b580      	push	{r7, lr}
 80050a6:	b08e      	sub	sp, #56	; 0x38
 80050a8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80050aa:	e0ca      	b.n	8005242 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	da18      	bge.n	80050e4 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80050b2:	1d3b      	adds	r3, r7, #4
 80050b4:	3304      	adds	r3, #4
 80050b6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80050b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d10a      	bne.n	80050d4 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80050be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050c2:	f383 8811 	msr	BASEPRI, r3
 80050c6:	f3bf 8f6f 	isb	sy
 80050ca:	f3bf 8f4f 	dsb	sy
 80050ce:	61fb      	str	r3, [r7, #28]
}
 80050d0:	bf00      	nop
 80050d2:	e7fe      	b.n	80050d2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80050d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80050da:	6850      	ldr	r0, [r2, #4]
 80050dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80050de:	6892      	ldr	r2, [r2, #8]
 80050e0:	4611      	mov	r1, r2
 80050e2:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	f2c0 80aa 	blt.w	8005240 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80050f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050f2:	695b      	ldr	r3, [r3, #20]
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d004      	beq.n	8005102 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80050f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050fa:	3304      	adds	r3, #4
 80050fc:	4618      	mov	r0, r3
 80050fe:	f7fe f9cb 	bl	8003498 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005102:	463b      	mov	r3, r7
 8005104:	4618      	mov	r0, r3
 8005106:	f7ff ff6b 	bl	8004fe0 <prvSampleTimeNow>
 800510a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2b09      	cmp	r3, #9
 8005110:	f200 8097 	bhi.w	8005242 <prvProcessReceivedCommands+0x19e>
 8005114:	a201      	add	r2, pc, #4	; (adr r2, 800511c <prvProcessReceivedCommands+0x78>)
 8005116:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800511a:	bf00      	nop
 800511c:	08005145 	.word	0x08005145
 8005120:	08005145 	.word	0x08005145
 8005124:	08005145 	.word	0x08005145
 8005128:	080051b9 	.word	0x080051b9
 800512c:	080051cd 	.word	0x080051cd
 8005130:	08005217 	.word	0x08005217
 8005134:	08005145 	.word	0x08005145
 8005138:	08005145 	.word	0x08005145
 800513c:	080051b9 	.word	0x080051b9
 8005140:	080051cd 	.word	0x080051cd
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005144:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005146:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800514a:	f043 0301 	orr.w	r3, r3, #1
 800514e:	b2da      	uxtb	r2, r3
 8005150:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005152:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005156:	68ba      	ldr	r2, [r7, #8]
 8005158:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800515a:	699b      	ldr	r3, [r3, #24]
 800515c:	18d1      	adds	r1, r2, r3
 800515e:	68bb      	ldr	r3, [r7, #8]
 8005160:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005162:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005164:	f7ff ff5c 	bl	8005020 <prvInsertTimerInActiveList>
 8005168:	4603      	mov	r3, r0
 800516a:	2b00      	cmp	r3, #0
 800516c:	d069      	beq.n	8005242 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800516e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005170:	6a1b      	ldr	r3, [r3, #32]
 8005172:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005174:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005176:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005178:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800517c:	f003 0304 	and.w	r3, r3, #4
 8005180:	2b00      	cmp	r3, #0
 8005182:	d05e      	beq.n	8005242 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005184:	68ba      	ldr	r2, [r7, #8]
 8005186:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005188:	699b      	ldr	r3, [r3, #24]
 800518a:	441a      	add	r2, r3
 800518c:	2300      	movs	r3, #0
 800518e:	9300      	str	r3, [sp, #0]
 8005190:	2300      	movs	r3, #0
 8005192:	2100      	movs	r1, #0
 8005194:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005196:	f7ff fe05 	bl	8004da4 <xTimerGenericCommand>
 800519a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800519c:	6a3b      	ldr	r3, [r7, #32]
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d14f      	bne.n	8005242 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80051a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051a6:	f383 8811 	msr	BASEPRI, r3
 80051aa:	f3bf 8f6f 	isb	sy
 80051ae:	f3bf 8f4f 	dsb	sy
 80051b2:	61bb      	str	r3, [r7, #24]
}
 80051b4:	bf00      	nop
 80051b6:	e7fe      	b.n	80051b6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80051b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051ba:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80051be:	f023 0301 	bic.w	r3, r3, #1
 80051c2:	b2da      	uxtb	r2, r3
 80051c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051c6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80051ca:	e03a      	b.n	8005242 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80051cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051ce:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80051d2:	f043 0301 	orr.w	r3, r3, #1
 80051d6:	b2da      	uxtb	r2, r3
 80051d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051da:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80051de:	68ba      	ldr	r2, [r7, #8]
 80051e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051e2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80051e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051e6:	699b      	ldr	r3, [r3, #24]
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d10a      	bne.n	8005202 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80051ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051f0:	f383 8811 	msr	BASEPRI, r3
 80051f4:	f3bf 8f6f 	isb	sy
 80051f8:	f3bf 8f4f 	dsb	sy
 80051fc:	617b      	str	r3, [r7, #20]
}
 80051fe:	bf00      	nop
 8005200:	e7fe      	b.n	8005200 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005202:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005204:	699a      	ldr	r2, [r3, #24]
 8005206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005208:	18d1      	adds	r1, r2, r3
 800520a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800520c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800520e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005210:	f7ff ff06 	bl	8005020 <prvInsertTimerInActiveList>
					break;
 8005214:	e015      	b.n	8005242 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8005216:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005218:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800521c:	f003 0302 	and.w	r3, r3, #2
 8005220:	2b00      	cmp	r3, #0
 8005222:	d103      	bne.n	800522c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8005224:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005226:	f000 fbdb 	bl	80059e0 <vPortFree>
 800522a:	e00a      	b.n	8005242 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800522c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800522e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005232:	f023 0301 	bic.w	r3, r3, #1
 8005236:	b2da      	uxtb	r2, r3
 8005238:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800523a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800523e:	e000      	b.n	8005242 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8005240:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005242:	4b08      	ldr	r3, [pc, #32]	; (8005264 <prvProcessReceivedCommands+0x1c0>)
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	1d39      	adds	r1, r7, #4
 8005248:	2200      	movs	r2, #0
 800524a:	4618      	mov	r0, r3
 800524c:	f7fe fbec 	bl	8003a28 <xQueueReceive>
 8005250:	4603      	mov	r3, r0
 8005252:	2b00      	cmp	r3, #0
 8005254:	f47f af2a 	bne.w	80050ac <prvProcessReceivedCommands+0x8>
	}
}
 8005258:	bf00      	nop
 800525a:	bf00      	nop
 800525c:	3730      	adds	r7, #48	; 0x30
 800525e:	46bd      	mov	sp, r7
 8005260:	bd80      	pop	{r7, pc}
 8005262:	bf00      	nop
 8005264:	20000e2c 	.word	0x20000e2c

08005268 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005268:	b580      	push	{r7, lr}
 800526a:	b088      	sub	sp, #32
 800526c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800526e:	e048      	b.n	8005302 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005270:	4b2d      	ldr	r3, [pc, #180]	; (8005328 <prvSwitchTimerLists+0xc0>)
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	68db      	ldr	r3, [r3, #12]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800527a:	4b2b      	ldr	r3, [pc, #172]	; (8005328 <prvSwitchTimerLists+0xc0>)
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	68db      	ldr	r3, [r3, #12]
 8005280:	68db      	ldr	r3, [r3, #12]
 8005282:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	3304      	adds	r3, #4
 8005288:	4618      	mov	r0, r3
 800528a:	f7fe f905 	bl	8003498 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	6a1b      	ldr	r3, [r3, #32]
 8005292:	68f8      	ldr	r0, [r7, #12]
 8005294:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800529c:	f003 0304 	and.w	r3, r3, #4
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d02e      	beq.n	8005302 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	699b      	ldr	r3, [r3, #24]
 80052a8:	693a      	ldr	r2, [r7, #16]
 80052aa:	4413      	add	r3, r2
 80052ac:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80052ae:	68ba      	ldr	r2, [r7, #8]
 80052b0:	693b      	ldr	r3, [r7, #16]
 80052b2:	429a      	cmp	r2, r3
 80052b4:	d90e      	bls.n	80052d4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	68ba      	ldr	r2, [r7, #8]
 80052ba:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	68fa      	ldr	r2, [r7, #12]
 80052c0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80052c2:	4b19      	ldr	r3, [pc, #100]	; (8005328 <prvSwitchTimerLists+0xc0>)
 80052c4:	681a      	ldr	r2, [r3, #0]
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	3304      	adds	r3, #4
 80052ca:	4619      	mov	r1, r3
 80052cc:	4610      	mov	r0, r2
 80052ce:	f7fe f8aa 	bl	8003426 <vListInsert>
 80052d2:	e016      	b.n	8005302 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80052d4:	2300      	movs	r3, #0
 80052d6:	9300      	str	r3, [sp, #0]
 80052d8:	2300      	movs	r3, #0
 80052da:	693a      	ldr	r2, [r7, #16]
 80052dc:	2100      	movs	r1, #0
 80052de:	68f8      	ldr	r0, [r7, #12]
 80052e0:	f7ff fd60 	bl	8004da4 <xTimerGenericCommand>
 80052e4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d10a      	bne.n	8005302 <prvSwitchTimerLists+0x9a>
	__asm volatile
 80052ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052f0:	f383 8811 	msr	BASEPRI, r3
 80052f4:	f3bf 8f6f 	isb	sy
 80052f8:	f3bf 8f4f 	dsb	sy
 80052fc:	603b      	str	r3, [r7, #0]
}
 80052fe:	bf00      	nop
 8005300:	e7fe      	b.n	8005300 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005302:	4b09      	ldr	r3, [pc, #36]	; (8005328 <prvSwitchTimerLists+0xc0>)
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	2b00      	cmp	r3, #0
 800530a:	d1b1      	bne.n	8005270 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800530c:	4b06      	ldr	r3, [pc, #24]	; (8005328 <prvSwitchTimerLists+0xc0>)
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005312:	4b06      	ldr	r3, [pc, #24]	; (800532c <prvSwitchTimerLists+0xc4>)
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	4a04      	ldr	r2, [pc, #16]	; (8005328 <prvSwitchTimerLists+0xc0>)
 8005318:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800531a:	4a04      	ldr	r2, [pc, #16]	; (800532c <prvSwitchTimerLists+0xc4>)
 800531c:	697b      	ldr	r3, [r7, #20]
 800531e:	6013      	str	r3, [r2, #0]
}
 8005320:	bf00      	nop
 8005322:	3718      	adds	r7, #24
 8005324:	46bd      	mov	sp, r7
 8005326:	bd80      	pop	{r7, pc}
 8005328:	20000e24 	.word	0x20000e24
 800532c:	20000e28 	.word	0x20000e28

08005330 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005330:	b580      	push	{r7, lr}
 8005332:	b082      	sub	sp, #8
 8005334:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005336:	f000 f965 	bl	8005604 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800533a:	4b15      	ldr	r3, [pc, #84]	; (8005390 <prvCheckForValidListAndQueue+0x60>)
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	2b00      	cmp	r3, #0
 8005340:	d120      	bne.n	8005384 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8005342:	4814      	ldr	r0, [pc, #80]	; (8005394 <prvCheckForValidListAndQueue+0x64>)
 8005344:	f7fe f81e 	bl	8003384 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005348:	4813      	ldr	r0, [pc, #76]	; (8005398 <prvCheckForValidListAndQueue+0x68>)
 800534a:	f7fe f81b 	bl	8003384 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800534e:	4b13      	ldr	r3, [pc, #76]	; (800539c <prvCheckForValidListAndQueue+0x6c>)
 8005350:	4a10      	ldr	r2, [pc, #64]	; (8005394 <prvCheckForValidListAndQueue+0x64>)
 8005352:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005354:	4b12      	ldr	r3, [pc, #72]	; (80053a0 <prvCheckForValidListAndQueue+0x70>)
 8005356:	4a10      	ldr	r2, [pc, #64]	; (8005398 <prvCheckForValidListAndQueue+0x68>)
 8005358:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800535a:	2300      	movs	r3, #0
 800535c:	9300      	str	r3, [sp, #0]
 800535e:	4b11      	ldr	r3, [pc, #68]	; (80053a4 <prvCheckForValidListAndQueue+0x74>)
 8005360:	4a11      	ldr	r2, [pc, #68]	; (80053a8 <prvCheckForValidListAndQueue+0x78>)
 8005362:	2110      	movs	r1, #16
 8005364:	200a      	movs	r0, #10
 8005366:	f7fe f929 	bl	80035bc <xQueueGenericCreateStatic>
 800536a:	4603      	mov	r3, r0
 800536c:	4a08      	ldr	r2, [pc, #32]	; (8005390 <prvCheckForValidListAndQueue+0x60>)
 800536e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005370:	4b07      	ldr	r3, [pc, #28]	; (8005390 <prvCheckForValidListAndQueue+0x60>)
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	2b00      	cmp	r3, #0
 8005376:	d005      	beq.n	8005384 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005378:	4b05      	ldr	r3, [pc, #20]	; (8005390 <prvCheckForValidListAndQueue+0x60>)
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	490b      	ldr	r1, [pc, #44]	; (80053ac <prvCheckForValidListAndQueue+0x7c>)
 800537e:	4618      	mov	r0, r3
 8005380:	f7fe fd42 	bl	8003e08 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005384:	f000 f96e 	bl	8005664 <vPortExitCritical>
}
 8005388:	bf00      	nop
 800538a:	46bd      	mov	sp, r7
 800538c:	bd80      	pop	{r7, pc}
 800538e:	bf00      	nop
 8005390:	20000e2c 	.word	0x20000e2c
 8005394:	20000dfc 	.word	0x20000dfc
 8005398:	20000e10 	.word	0x20000e10
 800539c:	20000e24 	.word	0x20000e24
 80053a0:	20000e28 	.word	0x20000e28
 80053a4:	20000ed8 	.word	0x20000ed8
 80053a8:	20000e38 	.word	0x20000e38
 80053ac:	08005e5c 	.word	0x08005e5c

080053b0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80053b0:	b480      	push	{r7}
 80053b2:	b085      	sub	sp, #20
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	60f8      	str	r0, [r7, #12]
 80053b8:	60b9      	str	r1, [r7, #8]
 80053ba:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	3b04      	subs	r3, #4
 80053c0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80053c8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	3b04      	subs	r3, #4
 80053ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80053d0:	68bb      	ldr	r3, [r7, #8]
 80053d2:	f023 0201 	bic.w	r2, r3, #1
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	3b04      	subs	r3, #4
 80053de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80053e0:	4a0c      	ldr	r2, [pc, #48]	; (8005414 <pxPortInitialiseStack+0x64>)
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	3b14      	subs	r3, #20
 80053ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80053ec:	687a      	ldr	r2, [r7, #4]
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	3b04      	subs	r3, #4
 80053f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	f06f 0202 	mvn.w	r2, #2
 80053fe:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	3b20      	subs	r3, #32
 8005404:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005406:	68fb      	ldr	r3, [r7, #12]
}
 8005408:	4618      	mov	r0, r3
 800540a:	3714      	adds	r7, #20
 800540c:	46bd      	mov	sp, r7
 800540e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005412:	4770      	bx	lr
 8005414:	08005419 	.word	0x08005419

08005418 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005418:	b480      	push	{r7}
 800541a:	b085      	sub	sp, #20
 800541c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800541e:	2300      	movs	r3, #0
 8005420:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005422:	4b12      	ldr	r3, [pc, #72]	; (800546c <prvTaskExitError+0x54>)
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f1b3 3fff 	cmp.w	r3, #4294967295
 800542a:	d00a      	beq.n	8005442 <prvTaskExitError+0x2a>
	__asm volatile
 800542c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005430:	f383 8811 	msr	BASEPRI, r3
 8005434:	f3bf 8f6f 	isb	sy
 8005438:	f3bf 8f4f 	dsb	sy
 800543c:	60fb      	str	r3, [r7, #12]
}
 800543e:	bf00      	nop
 8005440:	e7fe      	b.n	8005440 <prvTaskExitError+0x28>
	__asm volatile
 8005442:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005446:	f383 8811 	msr	BASEPRI, r3
 800544a:	f3bf 8f6f 	isb	sy
 800544e:	f3bf 8f4f 	dsb	sy
 8005452:	60bb      	str	r3, [r7, #8]
}
 8005454:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005456:	bf00      	nop
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2b00      	cmp	r3, #0
 800545c:	d0fc      	beq.n	8005458 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800545e:	bf00      	nop
 8005460:	bf00      	nop
 8005462:	3714      	adds	r7, #20
 8005464:	46bd      	mov	sp, r7
 8005466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546a:	4770      	bx	lr
 800546c:	2000000c 	.word	0x2000000c

08005470 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005470:	4b07      	ldr	r3, [pc, #28]	; (8005490 <pxCurrentTCBConst2>)
 8005472:	6819      	ldr	r1, [r3, #0]
 8005474:	6808      	ldr	r0, [r1, #0]
 8005476:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800547a:	f380 8809 	msr	PSP, r0
 800547e:	f3bf 8f6f 	isb	sy
 8005482:	f04f 0000 	mov.w	r0, #0
 8005486:	f380 8811 	msr	BASEPRI, r0
 800548a:	4770      	bx	lr
 800548c:	f3af 8000 	nop.w

08005490 <pxCurrentTCBConst2>:
 8005490:	200008fc 	.word	0x200008fc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005494:	bf00      	nop
 8005496:	bf00      	nop

08005498 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005498:	4808      	ldr	r0, [pc, #32]	; (80054bc <prvPortStartFirstTask+0x24>)
 800549a:	6800      	ldr	r0, [r0, #0]
 800549c:	6800      	ldr	r0, [r0, #0]
 800549e:	f380 8808 	msr	MSP, r0
 80054a2:	f04f 0000 	mov.w	r0, #0
 80054a6:	f380 8814 	msr	CONTROL, r0
 80054aa:	b662      	cpsie	i
 80054ac:	b661      	cpsie	f
 80054ae:	f3bf 8f4f 	dsb	sy
 80054b2:	f3bf 8f6f 	isb	sy
 80054b6:	df00      	svc	0
 80054b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80054ba:	bf00      	nop
 80054bc:	e000ed08 	.word	0xe000ed08

080054c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80054c0:	b580      	push	{r7, lr}
 80054c2:	b086      	sub	sp, #24
 80054c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80054c6:	4b46      	ldr	r3, [pc, #280]	; (80055e0 <xPortStartScheduler+0x120>)
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	4a46      	ldr	r2, [pc, #280]	; (80055e4 <xPortStartScheduler+0x124>)
 80054cc:	4293      	cmp	r3, r2
 80054ce:	d10a      	bne.n	80054e6 <xPortStartScheduler+0x26>
	__asm volatile
 80054d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054d4:	f383 8811 	msr	BASEPRI, r3
 80054d8:	f3bf 8f6f 	isb	sy
 80054dc:	f3bf 8f4f 	dsb	sy
 80054e0:	613b      	str	r3, [r7, #16]
}
 80054e2:	bf00      	nop
 80054e4:	e7fe      	b.n	80054e4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80054e6:	4b3e      	ldr	r3, [pc, #248]	; (80055e0 <xPortStartScheduler+0x120>)
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	4a3f      	ldr	r2, [pc, #252]	; (80055e8 <xPortStartScheduler+0x128>)
 80054ec:	4293      	cmp	r3, r2
 80054ee:	d10a      	bne.n	8005506 <xPortStartScheduler+0x46>
	__asm volatile
 80054f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054f4:	f383 8811 	msr	BASEPRI, r3
 80054f8:	f3bf 8f6f 	isb	sy
 80054fc:	f3bf 8f4f 	dsb	sy
 8005500:	60fb      	str	r3, [r7, #12]
}
 8005502:	bf00      	nop
 8005504:	e7fe      	b.n	8005504 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005506:	4b39      	ldr	r3, [pc, #228]	; (80055ec <xPortStartScheduler+0x12c>)
 8005508:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800550a:	697b      	ldr	r3, [r7, #20]
 800550c:	781b      	ldrb	r3, [r3, #0]
 800550e:	b2db      	uxtb	r3, r3
 8005510:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005512:	697b      	ldr	r3, [r7, #20]
 8005514:	22ff      	movs	r2, #255	; 0xff
 8005516:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005518:	697b      	ldr	r3, [r7, #20]
 800551a:	781b      	ldrb	r3, [r3, #0]
 800551c:	b2db      	uxtb	r3, r3
 800551e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005520:	78fb      	ldrb	r3, [r7, #3]
 8005522:	b2db      	uxtb	r3, r3
 8005524:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005528:	b2da      	uxtb	r2, r3
 800552a:	4b31      	ldr	r3, [pc, #196]	; (80055f0 <xPortStartScheduler+0x130>)
 800552c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800552e:	4b31      	ldr	r3, [pc, #196]	; (80055f4 <xPortStartScheduler+0x134>)
 8005530:	2207      	movs	r2, #7
 8005532:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005534:	e009      	b.n	800554a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8005536:	4b2f      	ldr	r3, [pc, #188]	; (80055f4 <xPortStartScheduler+0x134>)
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	3b01      	subs	r3, #1
 800553c:	4a2d      	ldr	r2, [pc, #180]	; (80055f4 <xPortStartScheduler+0x134>)
 800553e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005540:	78fb      	ldrb	r3, [r7, #3]
 8005542:	b2db      	uxtb	r3, r3
 8005544:	005b      	lsls	r3, r3, #1
 8005546:	b2db      	uxtb	r3, r3
 8005548:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800554a:	78fb      	ldrb	r3, [r7, #3]
 800554c:	b2db      	uxtb	r3, r3
 800554e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005552:	2b80      	cmp	r3, #128	; 0x80
 8005554:	d0ef      	beq.n	8005536 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005556:	4b27      	ldr	r3, [pc, #156]	; (80055f4 <xPortStartScheduler+0x134>)
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f1c3 0307 	rsb	r3, r3, #7
 800555e:	2b04      	cmp	r3, #4
 8005560:	d00a      	beq.n	8005578 <xPortStartScheduler+0xb8>
	__asm volatile
 8005562:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005566:	f383 8811 	msr	BASEPRI, r3
 800556a:	f3bf 8f6f 	isb	sy
 800556e:	f3bf 8f4f 	dsb	sy
 8005572:	60bb      	str	r3, [r7, #8]
}
 8005574:	bf00      	nop
 8005576:	e7fe      	b.n	8005576 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005578:	4b1e      	ldr	r3, [pc, #120]	; (80055f4 <xPortStartScheduler+0x134>)
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	021b      	lsls	r3, r3, #8
 800557e:	4a1d      	ldr	r2, [pc, #116]	; (80055f4 <xPortStartScheduler+0x134>)
 8005580:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005582:	4b1c      	ldr	r3, [pc, #112]	; (80055f4 <xPortStartScheduler+0x134>)
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800558a:	4a1a      	ldr	r2, [pc, #104]	; (80055f4 <xPortStartScheduler+0x134>)
 800558c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	b2da      	uxtb	r2, r3
 8005592:	697b      	ldr	r3, [r7, #20]
 8005594:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005596:	4b18      	ldr	r3, [pc, #96]	; (80055f8 <xPortStartScheduler+0x138>)
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	4a17      	ldr	r2, [pc, #92]	; (80055f8 <xPortStartScheduler+0x138>)
 800559c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80055a0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80055a2:	4b15      	ldr	r3, [pc, #84]	; (80055f8 <xPortStartScheduler+0x138>)
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	4a14      	ldr	r2, [pc, #80]	; (80055f8 <xPortStartScheduler+0x138>)
 80055a8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80055ac:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80055ae:	f000 f8dd 	bl	800576c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80055b2:	4b12      	ldr	r3, [pc, #72]	; (80055fc <xPortStartScheduler+0x13c>)
 80055b4:	2200      	movs	r2, #0
 80055b6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80055b8:	f000 f8fc 	bl	80057b4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80055bc:	4b10      	ldr	r3, [pc, #64]	; (8005600 <xPortStartScheduler+0x140>)
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	4a0f      	ldr	r2, [pc, #60]	; (8005600 <xPortStartScheduler+0x140>)
 80055c2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80055c6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80055c8:	f7ff ff66 	bl	8005498 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80055cc:	f7ff f84c 	bl	8004668 <vTaskSwitchContext>
	prvTaskExitError();
 80055d0:	f7ff ff22 	bl	8005418 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80055d4:	2300      	movs	r3, #0
}
 80055d6:	4618      	mov	r0, r3
 80055d8:	3718      	adds	r7, #24
 80055da:	46bd      	mov	sp, r7
 80055dc:	bd80      	pop	{r7, pc}
 80055de:	bf00      	nop
 80055e0:	e000ed00 	.word	0xe000ed00
 80055e4:	410fc271 	.word	0x410fc271
 80055e8:	410fc270 	.word	0x410fc270
 80055ec:	e000e400 	.word	0xe000e400
 80055f0:	20000f28 	.word	0x20000f28
 80055f4:	20000f2c 	.word	0x20000f2c
 80055f8:	e000ed20 	.word	0xe000ed20
 80055fc:	2000000c 	.word	0x2000000c
 8005600:	e000ef34 	.word	0xe000ef34

08005604 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005604:	b480      	push	{r7}
 8005606:	b083      	sub	sp, #12
 8005608:	af00      	add	r7, sp, #0
	__asm volatile
 800560a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800560e:	f383 8811 	msr	BASEPRI, r3
 8005612:	f3bf 8f6f 	isb	sy
 8005616:	f3bf 8f4f 	dsb	sy
 800561a:	607b      	str	r3, [r7, #4]
}
 800561c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800561e:	4b0f      	ldr	r3, [pc, #60]	; (800565c <vPortEnterCritical+0x58>)
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	3301      	adds	r3, #1
 8005624:	4a0d      	ldr	r2, [pc, #52]	; (800565c <vPortEnterCritical+0x58>)
 8005626:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005628:	4b0c      	ldr	r3, [pc, #48]	; (800565c <vPortEnterCritical+0x58>)
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	2b01      	cmp	r3, #1
 800562e:	d10f      	bne.n	8005650 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005630:	4b0b      	ldr	r3, [pc, #44]	; (8005660 <vPortEnterCritical+0x5c>)
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	b2db      	uxtb	r3, r3
 8005636:	2b00      	cmp	r3, #0
 8005638:	d00a      	beq.n	8005650 <vPortEnterCritical+0x4c>
	__asm volatile
 800563a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800563e:	f383 8811 	msr	BASEPRI, r3
 8005642:	f3bf 8f6f 	isb	sy
 8005646:	f3bf 8f4f 	dsb	sy
 800564a:	603b      	str	r3, [r7, #0]
}
 800564c:	bf00      	nop
 800564e:	e7fe      	b.n	800564e <vPortEnterCritical+0x4a>
	}
}
 8005650:	bf00      	nop
 8005652:	370c      	adds	r7, #12
 8005654:	46bd      	mov	sp, r7
 8005656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565a:	4770      	bx	lr
 800565c:	2000000c 	.word	0x2000000c
 8005660:	e000ed04 	.word	0xe000ed04

08005664 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005664:	b480      	push	{r7}
 8005666:	b083      	sub	sp, #12
 8005668:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800566a:	4b12      	ldr	r3, [pc, #72]	; (80056b4 <vPortExitCritical+0x50>)
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	2b00      	cmp	r3, #0
 8005670:	d10a      	bne.n	8005688 <vPortExitCritical+0x24>
	__asm volatile
 8005672:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005676:	f383 8811 	msr	BASEPRI, r3
 800567a:	f3bf 8f6f 	isb	sy
 800567e:	f3bf 8f4f 	dsb	sy
 8005682:	607b      	str	r3, [r7, #4]
}
 8005684:	bf00      	nop
 8005686:	e7fe      	b.n	8005686 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005688:	4b0a      	ldr	r3, [pc, #40]	; (80056b4 <vPortExitCritical+0x50>)
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	3b01      	subs	r3, #1
 800568e:	4a09      	ldr	r2, [pc, #36]	; (80056b4 <vPortExitCritical+0x50>)
 8005690:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005692:	4b08      	ldr	r3, [pc, #32]	; (80056b4 <vPortExitCritical+0x50>)
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	2b00      	cmp	r3, #0
 8005698:	d105      	bne.n	80056a6 <vPortExitCritical+0x42>
 800569a:	2300      	movs	r3, #0
 800569c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800569e:	683b      	ldr	r3, [r7, #0]
 80056a0:	f383 8811 	msr	BASEPRI, r3
}
 80056a4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80056a6:	bf00      	nop
 80056a8:	370c      	adds	r7, #12
 80056aa:	46bd      	mov	sp, r7
 80056ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b0:	4770      	bx	lr
 80056b2:	bf00      	nop
 80056b4:	2000000c 	.word	0x2000000c
	...

080056c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80056c0:	f3ef 8009 	mrs	r0, PSP
 80056c4:	f3bf 8f6f 	isb	sy
 80056c8:	4b15      	ldr	r3, [pc, #84]	; (8005720 <pxCurrentTCBConst>)
 80056ca:	681a      	ldr	r2, [r3, #0]
 80056cc:	f01e 0f10 	tst.w	lr, #16
 80056d0:	bf08      	it	eq
 80056d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80056d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056da:	6010      	str	r0, [r2, #0]
 80056dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80056e0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80056e4:	f380 8811 	msr	BASEPRI, r0
 80056e8:	f3bf 8f4f 	dsb	sy
 80056ec:	f3bf 8f6f 	isb	sy
 80056f0:	f7fe ffba 	bl	8004668 <vTaskSwitchContext>
 80056f4:	f04f 0000 	mov.w	r0, #0
 80056f8:	f380 8811 	msr	BASEPRI, r0
 80056fc:	bc09      	pop	{r0, r3}
 80056fe:	6819      	ldr	r1, [r3, #0]
 8005700:	6808      	ldr	r0, [r1, #0]
 8005702:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005706:	f01e 0f10 	tst.w	lr, #16
 800570a:	bf08      	it	eq
 800570c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005710:	f380 8809 	msr	PSP, r0
 8005714:	f3bf 8f6f 	isb	sy
 8005718:	4770      	bx	lr
 800571a:	bf00      	nop
 800571c:	f3af 8000 	nop.w

08005720 <pxCurrentTCBConst>:
 8005720:	200008fc 	.word	0x200008fc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005724:	bf00      	nop
 8005726:	bf00      	nop

08005728 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005728:	b580      	push	{r7, lr}
 800572a:	b082      	sub	sp, #8
 800572c:	af00      	add	r7, sp, #0
	__asm volatile
 800572e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005732:	f383 8811 	msr	BASEPRI, r3
 8005736:	f3bf 8f6f 	isb	sy
 800573a:	f3bf 8f4f 	dsb	sy
 800573e:	607b      	str	r3, [r7, #4]
}
 8005740:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005742:	f7fe fed7 	bl	80044f4 <xTaskIncrementTick>
 8005746:	4603      	mov	r3, r0
 8005748:	2b00      	cmp	r3, #0
 800574a:	d003      	beq.n	8005754 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800574c:	4b06      	ldr	r3, [pc, #24]	; (8005768 <xPortSysTickHandler+0x40>)
 800574e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005752:	601a      	str	r2, [r3, #0]
 8005754:	2300      	movs	r3, #0
 8005756:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005758:	683b      	ldr	r3, [r7, #0]
 800575a:	f383 8811 	msr	BASEPRI, r3
}
 800575e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005760:	bf00      	nop
 8005762:	3708      	adds	r7, #8
 8005764:	46bd      	mov	sp, r7
 8005766:	bd80      	pop	{r7, pc}
 8005768:	e000ed04 	.word	0xe000ed04

0800576c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800576c:	b480      	push	{r7}
 800576e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005770:	4b0b      	ldr	r3, [pc, #44]	; (80057a0 <vPortSetupTimerInterrupt+0x34>)
 8005772:	2200      	movs	r2, #0
 8005774:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005776:	4b0b      	ldr	r3, [pc, #44]	; (80057a4 <vPortSetupTimerInterrupt+0x38>)
 8005778:	2200      	movs	r2, #0
 800577a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800577c:	4b0a      	ldr	r3, [pc, #40]	; (80057a8 <vPortSetupTimerInterrupt+0x3c>)
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	4a0a      	ldr	r2, [pc, #40]	; (80057ac <vPortSetupTimerInterrupt+0x40>)
 8005782:	fba2 2303 	umull	r2, r3, r2, r3
 8005786:	099b      	lsrs	r3, r3, #6
 8005788:	4a09      	ldr	r2, [pc, #36]	; (80057b0 <vPortSetupTimerInterrupt+0x44>)
 800578a:	3b01      	subs	r3, #1
 800578c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800578e:	4b04      	ldr	r3, [pc, #16]	; (80057a0 <vPortSetupTimerInterrupt+0x34>)
 8005790:	2207      	movs	r2, #7
 8005792:	601a      	str	r2, [r3, #0]
}
 8005794:	bf00      	nop
 8005796:	46bd      	mov	sp, r7
 8005798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800579c:	4770      	bx	lr
 800579e:	bf00      	nop
 80057a0:	e000e010 	.word	0xe000e010
 80057a4:	e000e018 	.word	0xe000e018
 80057a8:	20000000 	.word	0x20000000
 80057ac:	10624dd3 	.word	0x10624dd3
 80057b0:	e000e014 	.word	0xe000e014

080057b4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80057b4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80057c4 <vPortEnableVFP+0x10>
 80057b8:	6801      	ldr	r1, [r0, #0]
 80057ba:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80057be:	6001      	str	r1, [r0, #0]
 80057c0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80057c2:	bf00      	nop
 80057c4:	e000ed88 	.word	0xe000ed88

080057c8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80057c8:	b480      	push	{r7}
 80057ca:	b085      	sub	sp, #20
 80057cc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80057ce:	f3ef 8305 	mrs	r3, IPSR
 80057d2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	2b0f      	cmp	r3, #15
 80057d8:	d914      	bls.n	8005804 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80057da:	4a17      	ldr	r2, [pc, #92]	; (8005838 <vPortValidateInterruptPriority+0x70>)
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	4413      	add	r3, r2
 80057e0:	781b      	ldrb	r3, [r3, #0]
 80057e2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80057e4:	4b15      	ldr	r3, [pc, #84]	; (800583c <vPortValidateInterruptPriority+0x74>)
 80057e6:	781b      	ldrb	r3, [r3, #0]
 80057e8:	7afa      	ldrb	r2, [r7, #11]
 80057ea:	429a      	cmp	r2, r3
 80057ec:	d20a      	bcs.n	8005804 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80057ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057f2:	f383 8811 	msr	BASEPRI, r3
 80057f6:	f3bf 8f6f 	isb	sy
 80057fa:	f3bf 8f4f 	dsb	sy
 80057fe:	607b      	str	r3, [r7, #4]
}
 8005800:	bf00      	nop
 8005802:	e7fe      	b.n	8005802 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005804:	4b0e      	ldr	r3, [pc, #56]	; (8005840 <vPortValidateInterruptPriority+0x78>)
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800580c:	4b0d      	ldr	r3, [pc, #52]	; (8005844 <vPortValidateInterruptPriority+0x7c>)
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	429a      	cmp	r2, r3
 8005812:	d90a      	bls.n	800582a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8005814:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005818:	f383 8811 	msr	BASEPRI, r3
 800581c:	f3bf 8f6f 	isb	sy
 8005820:	f3bf 8f4f 	dsb	sy
 8005824:	603b      	str	r3, [r7, #0]
}
 8005826:	bf00      	nop
 8005828:	e7fe      	b.n	8005828 <vPortValidateInterruptPriority+0x60>
	}
 800582a:	bf00      	nop
 800582c:	3714      	adds	r7, #20
 800582e:	46bd      	mov	sp, r7
 8005830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005834:	4770      	bx	lr
 8005836:	bf00      	nop
 8005838:	e000e3f0 	.word	0xe000e3f0
 800583c:	20000f28 	.word	0x20000f28
 8005840:	e000ed0c 	.word	0xe000ed0c
 8005844:	20000f2c 	.word	0x20000f2c

08005848 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005848:	b580      	push	{r7, lr}
 800584a:	b08a      	sub	sp, #40	; 0x28
 800584c:	af00      	add	r7, sp, #0
 800584e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005850:	2300      	movs	r3, #0
 8005852:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005854:	f7fe fd92 	bl	800437c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005858:	4b5b      	ldr	r3, [pc, #364]	; (80059c8 <pvPortMalloc+0x180>)
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	2b00      	cmp	r3, #0
 800585e:	d101      	bne.n	8005864 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005860:	f000 f920 	bl	8005aa4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005864:	4b59      	ldr	r3, [pc, #356]	; (80059cc <pvPortMalloc+0x184>)
 8005866:	681a      	ldr	r2, [r3, #0]
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	4013      	ands	r3, r2
 800586c:	2b00      	cmp	r3, #0
 800586e:	f040 8093 	bne.w	8005998 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	2b00      	cmp	r3, #0
 8005876:	d01d      	beq.n	80058b4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8005878:	2208      	movs	r2, #8
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	4413      	add	r3, r2
 800587e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	f003 0307 	and.w	r3, r3, #7
 8005886:	2b00      	cmp	r3, #0
 8005888:	d014      	beq.n	80058b4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	f023 0307 	bic.w	r3, r3, #7
 8005890:	3308      	adds	r3, #8
 8005892:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	f003 0307 	and.w	r3, r3, #7
 800589a:	2b00      	cmp	r3, #0
 800589c:	d00a      	beq.n	80058b4 <pvPortMalloc+0x6c>
	__asm volatile
 800589e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058a2:	f383 8811 	msr	BASEPRI, r3
 80058a6:	f3bf 8f6f 	isb	sy
 80058aa:	f3bf 8f4f 	dsb	sy
 80058ae:	617b      	str	r3, [r7, #20]
}
 80058b0:	bf00      	nop
 80058b2:	e7fe      	b.n	80058b2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d06e      	beq.n	8005998 <pvPortMalloc+0x150>
 80058ba:	4b45      	ldr	r3, [pc, #276]	; (80059d0 <pvPortMalloc+0x188>)
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	687a      	ldr	r2, [r7, #4]
 80058c0:	429a      	cmp	r2, r3
 80058c2:	d869      	bhi.n	8005998 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80058c4:	4b43      	ldr	r3, [pc, #268]	; (80059d4 <pvPortMalloc+0x18c>)
 80058c6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80058c8:	4b42      	ldr	r3, [pc, #264]	; (80059d4 <pvPortMalloc+0x18c>)
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80058ce:	e004      	b.n	80058da <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80058d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058d2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80058d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80058da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058dc:	685b      	ldr	r3, [r3, #4]
 80058de:	687a      	ldr	r2, [r7, #4]
 80058e0:	429a      	cmp	r2, r3
 80058e2:	d903      	bls.n	80058ec <pvPortMalloc+0xa4>
 80058e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d1f1      	bne.n	80058d0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80058ec:	4b36      	ldr	r3, [pc, #216]	; (80059c8 <pvPortMalloc+0x180>)
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80058f2:	429a      	cmp	r2, r3
 80058f4:	d050      	beq.n	8005998 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80058f6:	6a3b      	ldr	r3, [r7, #32]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	2208      	movs	r2, #8
 80058fc:	4413      	add	r3, r2
 80058fe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005902:	681a      	ldr	r2, [r3, #0]
 8005904:	6a3b      	ldr	r3, [r7, #32]
 8005906:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800590a:	685a      	ldr	r2, [r3, #4]
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	1ad2      	subs	r2, r2, r3
 8005910:	2308      	movs	r3, #8
 8005912:	005b      	lsls	r3, r3, #1
 8005914:	429a      	cmp	r2, r3
 8005916:	d91f      	bls.n	8005958 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005918:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	4413      	add	r3, r2
 800591e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005920:	69bb      	ldr	r3, [r7, #24]
 8005922:	f003 0307 	and.w	r3, r3, #7
 8005926:	2b00      	cmp	r3, #0
 8005928:	d00a      	beq.n	8005940 <pvPortMalloc+0xf8>
	__asm volatile
 800592a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800592e:	f383 8811 	msr	BASEPRI, r3
 8005932:	f3bf 8f6f 	isb	sy
 8005936:	f3bf 8f4f 	dsb	sy
 800593a:	613b      	str	r3, [r7, #16]
}
 800593c:	bf00      	nop
 800593e:	e7fe      	b.n	800593e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005942:	685a      	ldr	r2, [r3, #4]
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	1ad2      	subs	r2, r2, r3
 8005948:	69bb      	ldr	r3, [r7, #24]
 800594a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800594c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800594e:	687a      	ldr	r2, [r7, #4]
 8005950:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005952:	69b8      	ldr	r0, [r7, #24]
 8005954:	f000 f908 	bl	8005b68 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005958:	4b1d      	ldr	r3, [pc, #116]	; (80059d0 <pvPortMalloc+0x188>)
 800595a:	681a      	ldr	r2, [r3, #0]
 800595c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800595e:	685b      	ldr	r3, [r3, #4]
 8005960:	1ad3      	subs	r3, r2, r3
 8005962:	4a1b      	ldr	r2, [pc, #108]	; (80059d0 <pvPortMalloc+0x188>)
 8005964:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005966:	4b1a      	ldr	r3, [pc, #104]	; (80059d0 <pvPortMalloc+0x188>)
 8005968:	681a      	ldr	r2, [r3, #0]
 800596a:	4b1b      	ldr	r3, [pc, #108]	; (80059d8 <pvPortMalloc+0x190>)
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	429a      	cmp	r2, r3
 8005970:	d203      	bcs.n	800597a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005972:	4b17      	ldr	r3, [pc, #92]	; (80059d0 <pvPortMalloc+0x188>)
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	4a18      	ldr	r2, [pc, #96]	; (80059d8 <pvPortMalloc+0x190>)
 8005978:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800597a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800597c:	685a      	ldr	r2, [r3, #4]
 800597e:	4b13      	ldr	r3, [pc, #76]	; (80059cc <pvPortMalloc+0x184>)
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	431a      	orrs	r2, r3
 8005984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005986:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800598a:	2200      	movs	r2, #0
 800598c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800598e:	4b13      	ldr	r3, [pc, #76]	; (80059dc <pvPortMalloc+0x194>)
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	3301      	adds	r3, #1
 8005994:	4a11      	ldr	r2, [pc, #68]	; (80059dc <pvPortMalloc+0x194>)
 8005996:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005998:	f7fe fcfe 	bl	8004398 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800599c:	69fb      	ldr	r3, [r7, #28]
 800599e:	f003 0307 	and.w	r3, r3, #7
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d00a      	beq.n	80059bc <pvPortMalloc+0x174>
	__asm volatile
 80059a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059aa:	f383 8811 	msr	BASEPRI, r3
 80059ae:	f3bf 8f6f 	isb	sy
 80059b2:	f3bf 8f4f 	dsb	sy
 80059b6:	60fb      	str	r3, [r7, #12]
}
 80059b8:	bf00      	nop
 80059ba:	e7fe      	b.n	80059ba <pvPortMalloc+0x172>
	return pvReturn;
 80059bc:	69fb      	ldr	r3, [r7, #28]
}
 80059be:	4618      	mov	r0, r3
 80059c0:	3728      	adds	r7, #40	; 0x28
 80059c2:	46bd      	mov	sp, r7
 80059c4:	bd80      	pop	{r7, pc}
 80059c6:	bf00      	nop
 80059c8:	20004b38 	.word	0x20004b38
 80059cc:	20004b4c 	.word	0x20004b4c
 80059d0:	20004b3c 	.word	0x20004b3c
 80059d4:	20004b30 	.word	0x20004b30
 80059d8:	20004b40 	.word	0x20004b40
 80059dc:	20004b44 	.word	0x20004b44

080059e0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80059e0:	b580      	push	{r7, lr}
 80059e2:	b086      	sub	sp, #24
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d04d      	beq.n	8005a8e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80059f2:	2308      	movs	r3, #8
 80059f4:	425b      	negs	r3, r3
 80059f6:	697a      	ldr	r2, [r7, #20]
 80059f8:	4413      	add	r3, r2
 80059fa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80059fc:	697b      	ldr	r3, [r7, #20]
 80059fe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005a00:	693b      	ldr	r3, [r7, #16]
 8005a02:	685a      	ldr	r2, [r3, #4]
 8005a04:	4b24      	ldr	r3, [pc, #144]	; (8005a98 <vPortFree+0xb8>)
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	4013      	ands	r3, r2
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d10a      	bne.n	8005a24 <vPortFree+0x44>
	__asm volatile
 8005a0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a12:	f383 8811 	msr	BASEPRI, r3
 8005a16:	f3bf 8f6f 	isb	sy
 8005a1a:	f3bf 8f4f 	dsb	sy
 8005a1e:	60fb      	str	r3, [r7, #12]
}
 8005a20:	bf00      	nop
 8005a22:	e7fe      	b.n	8005a22 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005a24:	693b      	ldr	r3, [r7, #16]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d00a      	beq.n	8005a42 <vPortFree+0x62>
	__asm volatile
 8005a2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a30:	f383 8811 	msr	BASEPRI, r3
 8005a34:	f3bf 8f6f 	isb	sy
 8005a38:	f3bf 8f4f 	dsb	sy
 8005a3c:	60bb      	str	r3, [r7, #8]
}
 8005a3e:	bf00      	nop
 8005a40:	e7fe      	b.n	8005a40 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005a42:	693b      	ldr	r3, [r7, #16]
 8005a44:	685a      	ldr	r2, [r3, #4]
 8005a46:	4b14      	ldr	r3, [pc, #80]	; (8005a98 <vPortFree+0xb8>)
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	4013      	ands	r3, r2
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d01e      	beq.n	8005a8e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005a50:	693b      	ldr	r3, [r7, #16]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d11a      	bne.n	8005a8e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005a58:	693b      	ldr	r3, [r7, #16]
 8005a5a:	685a      	ldr	r2, [r3, #4]
 8005a5c:	4b0e      	ldr	r3, [pc, #56]	; (8005a98 <vPortFree+0xb8>)
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	43db      	mvns	r3, r3
 8005a62:	401a      	ands	r2, r3
 8005a64:	693b      	ldr	r3, [r7, #16]
 8005a66:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005a68:	f7fe fc88 	bl	800437c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005a6c:	693b      	ldr	r3, [r7, #16]
 8005a6e:	685a      	ldr	r2, [r3, #4]
 8005a70:	4b0a      	ldr	r3, [pc, #40]	; (8005a9c <vPortFree+0xbc>)
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	4413      	add	r3, r2
 8005a76:	4a09      	ldr	r2, [pc, #36]	; (8005a9c <vPortFree+0xbc>)
 8005a78:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005a7a:	6938      	ldr	r0, [r7, #16]
 8005a7c:	f000 f874 	bl	8005b68 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005a80:	4b07      	ldr	r3, [pc, #28]	; (8005aa0 <vPortFree+0xc0>)
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	3301      	adds	r3, #1
 8005a86:	4a06      	ldr	r2, [pc, #24]	; (8005aa0 <vPortFree+0xc0>)
 8005a88:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8005a8a:	f7fe fc85 	bl	8004398 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005a8e:	bf00      	nop
 8005a90:	3718      	adds	r7, #24
 8005a92:	46bd      	mov	sp, r7
 8005a94:	bd80      	pop	{r7, pc}
 8005a96:	bf00      	nop
 8005a98:	20004b4c 	.word	0x20004b4c
 8005a9c:	20004b3c 	.word	0x20004b3c
 8005aa0:	20004b48 	.word	0x20004b48

08005aa4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005aa4:	b480      	push	{r7}
 8005aa6:	b085      	sub	sp, #20
 8005aa8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005aaa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8005aae:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005ab0:	4b27      	ldr	r3, [pc, #156]	; (8005b50 <prvHeapInit+0xac>)
 8005ab2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	f003 0307 	and.w	r3, r3, #7
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d00c      	beq.n	8005ad8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	3307      	adds	r3, #7
 8005ac2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	f023 0307 	bic.w	r3, r3, #7
 8005aca:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005acc:	68ba      	ldr	r2, [r7, #8]
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	1ad3      	subs	r3, r2, r3
 8005ad2:	4a1f      	ldr	r2, [pc, #124]	; (8005b50 <prvHeapInit+0xac>)
 8005ad4:	4413      	add	r3, r2
 8005ad6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005adc:	4a1d      	ldr	r2, [pc, #116]	; (8005b54 <prvHeapInit+0xb0>)
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005ae2:	4b1c      	ldr	r3, [pc, #112]	; (8005b54 <prvHeapInit+0xb0>)
 8005ae4:	2200      	movs	r2, #0
 8005ae6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	68ba      	ldr	r2, [r7, #8]
 8005aec:	4413      	add	r3, r2
 8005aee:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005af0:	2208      	movs	r2, #8
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	1a9b      	subs	r3, r3, r2
 8005af6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	f023 0307 	bic.w	r3, r3, #7
 8005afe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	4a15      	ldr	r2, [pc, #84]	; (8005b58 <prvHeapInit+0xb4>)
 8005b04:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005b06:	4b14      	ldr	r3, [pc, #80]	; (8005b58 <prvHeapInit+0xb4>)
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	2200      	movs	r2, #0
 8005b0c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005b0e:	4b12      	ldr	r3, [pc, #72]	; (8005b58 <prvHeapInit+0xb4>)
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	2200      	movs	r2, #0
 8005b14:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005b1a:	683b      	ldr	r3, [r7, #0]
 8005b1c:	68fa      	ldr	r2, [r7, #12]
 8005b1e:	1ad2      	subs	r2, r2, r3
 8005b20:	683b      	ldr	r3, [r7, #0]
 8005b22:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005b24:	4b0c      	ldr	r3, [pc, #48]	; (8005b58 <prvHeapInit+0xb4>)
 8005b26:	681a      	ldr	r2, [r3, #0]
 8005b28:	683b      	ldr	r3, [r7, #0]
 8005b2a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005b2c:	683b      	ldr	r3, [r7, #0]
 8005b2e:	685b      	ldr	r3, [r3, #4]
 8005b30:	4a0a      	ldr	r2, [pc, #40]	; (8005b5c <prvHeapInit+0xb8>)
 8005b32:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005b34:	683b      	ldr	r3, [r7, #0]
 8005b36:	685b      	ldr	r3, [r3, #4]
 8005b38:	4a09      	ldr	r2, [pc, #36]	; (8005b60 <prvHeapInit+0xbc>)
 8005b3a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005b3c:	4b09      	ldr	r3, [pc, #36]	; (8005b64 <prvHeapInit+0xc0>)
 8005b3e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005b42:	601a      	str	r2, [r3, #0]
}
 8005b44:	bf00      	nop
 8005b46:	3714      	adds	r7, #20
 8005b48:	46bd      	mov	sp, r7
 8005b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4e:	4770      	bx	lr
 8005b50:	20000f30 	.word	0x20000f30
 8005b54:	20004b30 	.word	0x20004b30
 8005b58:	20004b38 	.word	0x20004b38
 8005b5c:	20004b40 	.word	0x20004b40
 8005b60:	20004b3c 	.word	0x20004b3c
 8005b64:	20004b4c 	.word	0x20004b4c

08005b68 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005b68:	b480      	push	{r7}
 8005b6a:	b085      	sub	sp, #20
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005b70:	4b28      	ldr	r3, [pc, #160]	; (8005c14 <prvInsertBlockIntoFreeList+0xac>)
 8005b72:	60fb      	str	r3, [r7, #12]
 8005b74:	e002      	b.n	8005b7c <prvInsertBlockIntoFreeList+0x14>
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	60fb      	str	r3, [r7, #12]
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	687a      	ldr	r2, [r7, #4]
 8005b82:	429a      	cmp	r2, r3
 8005b84:	d8f7      	bhi.n	8005b76 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	685b      	ldr	r3, [r3, #4]
 8005b8e:	68ba      	ldr	r2, [r7, #8]
 8005b90:	4413      	add	r3, r2
 8005b92:	687a      	ldr	r2, [r7, #4]
 8005b94:	429a      	cmp	r2, r3
 8005b96:	d108      	bne.n	8005baa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	685a      	ldr	r2, [r3, #4]
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	685b      	ldr	r3, [r3, #4]
 8005ba0:	441a      	add	r2, r3
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	685b      	ldr	r3, [r3, #4]
 8005bb2:	68ba      	ldr	r2, [r7, #8]
 8005bb4:	441a      	add	r2, r3
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	429a      	cmp	r2, r3
 8005bbc:	d118      	bne.n	8005bf0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	681a      	ldr	r2, [r3, #0]
 8005bc2:	4b15      	ldr	r3, [pc, #84]	; (8005c18 <prvInsertBlockIntoFreeList+0xb0>)
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	429a      	cmp	r2, r3
 8005bc8:	d00d      	beq.n	8005be6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	685a      	ldr	r2, [r3, #4]
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	685b      	ldr	r3, [r3, #4]
 8005bd4:	441a      	add	r2, r3
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	681a      	ldr	r2, [r3, #0]
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	601a      	str	r2, [r3, #0]
 8005be4:	e008      	b.n	8005bf8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005be6:	4b0c      	ldr	r3, [pc, #48]	; (8005c18 <prvInsertBlockIntoFreeList+0xb0>)
 8005be8:	681a      	ldr	r2, [r3, #0]
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	601a      	str	r2, [r3, #0]
 8005bee:	e003      	b.n	8005bf8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	681a      	ldr	r2, [r3, #0]
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005bf8:	68fa      	ldr	r2, [r7, #12]
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	429a      	cmp	r2, r3
 8005bfe:	d002      	beq.n	8005c06 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	687a      	ldr	r2, [r7, #4]
 8005c04:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005c06:	bf00      	nop
 8005c08:	3714      	adds	r7, #20
 8005c0a:	46bd      	mov	sp, r7
 8005c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c10:	4770      	bx	lr
 8005c12:	bf00      	nop
 8005c14:	20004b30 	.word	0x20004b30
 8005c18:	20004b38 	.word	0x20004b38

08005c1c <__libc_init_array>:
 8005c1c:	b570      	push	{r4, r5, r6, lr}
 8005c1e:	4d0d      	ldr	r5, [pc, #52]	; (8005c54 <__libc_init_array+0x38>)
 8005c20:	4c0d      	ldr	r4, [pc, #52]	; (8005c58 <__libc_init_array+0x3c>)
 8005c22:	1b64      	subs	r4, r4, r5
 8005c24:	10a4      	asrs	r4, r4, #2
 8005c26:	2600      	movs	r6, #0
 8005c28:	42a6      	cmp	r6, r4
 8005c2a:	d109      	bne.n	8005c40 <__libc_init_array+0x24>
 8005c2c:	4d0b      	ldr	r5, [pc, #44]	; (8005c5c <__libc_init_array+0x40>)
 8005c2e:	4c0c      	ldr	r4, [pc, #48]	; (8005c60 <__libc_init_array+0x44>)
 8005c30:	f000 f8f2 	bl	8005e18 <_init>
 8005c34:	1b64      	subs	r4, r4, r5
 8005c36:	10a4      	asrs	r4, r4, #2
 8005c38:	2600      	movs	r6, #0
 8005c3a:	42a6      	cmp	r6, r4
 8005c3c:	d105      	bne.n	8005c4a <__libc_init_array+0x2e>
 8005c3e:	bd70      	pop	{r4, r5, r6, pc}
 8005c40:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c44:	4798      	blx	r3
 8005c46:	3601      	adds	r6, #1
 8005c48:	e7ee      	b.n	8005c28 <__libc_init_array+0xc>
 8005c4a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c4e:	4798      	blx	r3
 8005c50:	3601      	adds	r6, #1
 8005c52:	e7f2      	b.n	8005c3a <__libc_init_array+0x1e>
 8005c54:	08005f50 	.word	0x08005f50
 8005c58:	08005f50 	.word	0x08005f50
 8005c5c:	08005f50 	.word	0x08005f50
 8005c60:	08005f54 	.word	0x08005f54

08005c64 <__retarget_lock_acquire_recursive>:
 8005c64:	4770      	bx	lr

08005c66 <__retarget_lock_release_recursive>:
 8005c66:	4770      	bx	lr

08005c68 <memcpy>:
 8005c68:	440a      	add	r2, r1
 8005c6a:	4291      	cmp	r1, r2
 8005c6c:	f100 33ff 	add.w	r3, r0, #4294967295
 8005c70:	d100      	bne.n	8005c74 <memcpy+0xc>
 8005c72:	4770      	bx	lr
 8005c74:	b510      	push	{r4, lr}
 8005c76:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005c7a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005c7e:	4291      	cmp	r1, r2
 8005c80:	d1f9      	bne.n	8005c76 <memcpy+0xe>
 8005c82:	bd10      	pop	{r4, pc}

08005c84 <memset>:
 8005c84:	4402      	add	r2, r0
 8005c86:	4603      	mov	r3, r0
 8005c88:	4293      	cmp	r3, r2
 8005c8a:	d100      	bne.n	8005c8e <memset+0xa>
 8005c8c:	4770      	bx	lr
 8005c8e:	f803 1b01 	strb.w	r1, [r3], #1
 8005c92:	e7f9      	b.n	8005c88 <memset+0x4>

08005c94 <cleanup_glue>:
 8005c94:	b538      	push	{r3, r4, r5, lr}
 8005c96:	460c      	mov	r4, r1
 8005c98:	6809      	ldr	r1, [r1, #0]
 8005c9a:	4605      	mov	r5, r0
 8005c9c:	b109      	cbz	r1, 8005ca2 <cleanup_glue+0xe>
 8005c9e:	f7ff fff9 	bl	8005c94 <cleanup_glue>
 8005ca2:	4621      	mov	r1, r4
 8005ca4:	4628      	mov	r0, r5
 8005ca6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005caa:	f000 b869 	b.w	8005d80 <_free_r>
	...

08005cb0 <_reclaim_reent>:
 8005cb0:	4b2c      	ldr	r3, [pc, #176]	; (8005d64 <_reclaim_reent+0xb4>)
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	4283      	cmp	r3, r0
 8005cb6:	b570      	push	{r4, r5, r6, lr}
 8005cb8:	4604      	mov	r4, r0
 8005cba:	d051      	beq.n	8005d60 <_reclaim_reent+0xb0>
 8005cbc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8005cbe:	b143      	cbz	r3, 8005cd2 <_reclaim_reent+0x22>
 8005cc0:	68db      	ldr	r3, [r3, #12]
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d14a      	bne.n	8005d5c <_reclaim_reent+0xac>
 8005cc6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005cc8:	6819      	ldr	r1, [r3, #0]
 8005cca:	b111      	cbz	r1, 8005cd2 <_reclaim_reent+0x22>
 8005ccc:	4620      	mov	r0, r4
 8005cce:	f000 f857 	bl	8005d80 <_free_r>
 8005cd2:	6961      	ldr	r1, [r4, #20]
 8005cd4:	b111      	cbz	r1, 8005cdc <_reclaim_reent+0x2c>
 8005cd6:	4620      	mov	r0, r4
 8005cd8:	f000 f852 	bl	8005d80 <_free_r>
 8005cdc:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8005cde:	b111      	cbz	r1, 8005ce6 <_reclaim_reent+0x36>
 8005ce0:	4620      	mov	r0, r4
 8005ce2:	f000 f84d 	bl	8005d80 <_free_r>
 8005ce6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8005ce8:	b111      	cbz	r1, 8005cf0 <_reclaim_reent+0x40>
 8005cea:	4620      	mov	r0, r4
 8005cec:	f000 f848 	bl	8005d80 <_free_r>
 8005cf0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8005cf2:	b111      	cbz	r1, 8005cfa <_reclaim_reent+0x4a>
 8005cf4:	4620      	mov	r0, r4
 8005cf6:	f000 f843 	bl	8005d80 <_free_r>
 8005cfa:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8005cfc:	b111      	cbz	r1, 8005d04 <_reclaim_reent+0x54>
 8005cfe:	4620      	mov	r0, r4
 8005d00:	f000 f83e 	bl	8005d80 <_free_r>
 8005d04:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8005d06:	b111      	cbz	r1, 8005d0e <_reclaim_reent+0x5e>
 8005d08:	4620      	mov	r0, r4
 8005d0a:	f000 f839 	bl	8005d80 <_free_r>
 8005d0e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8005d10:	b111      	cbz	r1, 8005d18 <_reclaim_reent+0x68>
 8005d12:	4620      	mov	r0, r4
 8005d14:	f000 f834 	bl	8005d80 <_free_r>
 8005d18:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005d1a:	b111      	cbz	r1, 8005d22 <_reclaim_reent+0x72>
 8005d1c:	4620      	mov	r0, r4
 8005d1e:	f000 f82f 	bl	8005d80 <_free_r>
 8005d22:	69a3      	ldr	r3, [r4, #24]
 8005d24:	b1e3      	cbz	r3, 8005d60 <_reclaim_reent+0xb0>
 8005d26:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8005d28:	4620      	mov	r0, r4
 8005d2a:	4798      	blx	r3
 8005d2c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8005d2e:	b1b9      	cbz	r1, 8005d60 <_reclaim_reent+0xb0>
 8005d30:	4620      	mov	r0, r4
 8005d32:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8005d36:	f7ff bfad 	b.w	8005c94 <cleanup_glue>
 8005d3a:	5949      	ldr	r1, [r1, r5]
 8005d3c:	b941      	cbnz	r1, 8005d50 <_reclaim_reent+0xa0>
 8005d3e:	3504      	adds	r5, #4
 8005d40:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005d42:	2d80      	cmp	r5, #128	; 0x80
 8005d44:	68d9      	ldr	r1, [r3, #12]
 8005d46:	d1f8      	bne.n	8005d3a <_reclaim_reent+0x8a>
 8005d48:	4620      	mov	r0, r4
 8005d4a:	f000 f819 	bl	8005d80 <_free_r>
 8005d4e:	e7ba      	b.n	8005cc6 <_reclaim_reent+0x16>
 8005d50:	680e      	ldr	r6, [r1, #0]
 8005d52:	4620      	mov	r0, r4
 8005d54:	f000 f814 	bl	8005d80 <_free_r>
 8005d58:	4631      	mov	r1, r6
 8005d5a:	e7ef      	b.n	8005d3c <_reclaim_reent+0x8c>
 8005d5c:	2500      	movs	r5, #0
 8005d5e:	e7ef      	b.n	8005d40 <_reclaim_reent+0x90>
 8005d60:	bd70      	pop	{r4, r5, r6, pc}
 8005d62:	bf00      	nop
 8005d64:	20000010 	.word	0x20000010

08005d68 <__malloc_lock>:
 8005d68:	4801      	ldr	r0, [pc, #4]	; (8005d70 <__malloc_lock+0x8>)
 8005d6a:	f7ff bf7b 	b.w	8005c64 <__retarget_lock_acquire_recursive>
 8005d6e:	bf00      	nop
 8005d70:	20004b50 	.word	0x20004b50

08005d74 <__malloc_unlock>:
 8005d74:	4801      	ldr	r0, [pc, #4]	; (8005d7c <__malloc_unlock+0x8>)
 8005d76:	f7ff bf76 	b.w	8005c66 <__retarget_lock_release_recursive>
 8005d7a:	bf00      	nop
 8005d7c:	20004b50 	.word	0x20004b50

08005d80 <_free_r>:
 8005d80:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005d82:	2900      	cmp	r1, #0
 8005d84:	d044      	beq.n	8005e10 <_free_r+0x90>
 8005d86:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005d8a:	9001      	str	r0, [sp, #4]
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	f1a1 0404 	sub.w	r4, r1, #4
 8005d92:	bfb8      	it	lt
 8005d94:	18e4      	addlt	r4, r4, r3
 8005d96:	f7ff ffe7 	bl	8005d68 <__malloc_lock>
 8005d9a:	4a1e      	ldr	r2, [pc, #120]	; (8005e14 <_free_r+0x94>)
 8005d9c:	9801      	ldr	r0, [sp, #4]
 8005d9e:	6813      	ldr	r3, [r2, #0]
 8005da0:	b933      	cbnz	r3, 8005db0 <_free_r+0x30>
 8005da2:	6063      	str	r3, [r4, #4]
 8005da4:	6014      	str	r4, [r2, #0]
 8005da6:	b003      	add	sp, #12
 8005da8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005dac:	f7ff bfe2 	b.w	8005d74 <__malloc_unlock>
 8005db0:	42a3      	cmp	r3, r4
 8005db2:	d908      	bls.n	8005dc6 <_free_r+0x46>
 8005db4:	6825      	ldr	r5, [r4, #0]
 8005db6:	1961      	adds	r1, r4, r5
 8005db8:	428b      	cmp	r3, r1
 8005dba:	bf01      	itttt	eq
 8005dbc:	6819      	ldreq	r1, [r3, #0]
 8005dbe:	685b      	ldreq	r3, [r3, #4]
 8005dc0:	1949      	addeq	r1, r1, r5
 8005dc2:	6021      	streq	r1, [r4, #0]
 8005dc4:	e7ed      	b.n	8005da2 <_free_r+0x22>
 8005dc6:	461a      	mov	r2, r3
 8005dc8:	685b      	ldr	r3, [r3, #4]
 8005dca:	b10b      	cbz	r3, 8005dd0 <_free_r+0x50>
 8005dcc:	42a3      	cmp	r3, r4
 8005dce:	d9fa      	bls.n	8005dc6 <_free_r+0x46>
 8005dd0:	6811      	ldr	r1, [r2, #0]
 8005dd2:	1855      	adds	r5, r2, r1
 8005dd4:	42a5      	cmp	r5, r4
 8005dd6:	d10b      	bne.n	8005df0 <_free_r+0x70>
 8005dd8:	6824      	ldr	r4, [r4, #0]
 8005dda:	4421      	add	r1, r4
 8005ddc:	1854      	adds	r4, r2, r1
 8005dde:	42a3      	cmp	r3, r4
 8005de0:	6011      	str	r1, [r2, #0]
 8005de2:	d1e0      	bne.n	8005da6 <_free_r+0x26>
 8005de4:	681c      	ldr	r4, [r3, #0]
 8005de6:	685b      	ldr	r3, [r3, #4]
 8005de8:	6053      	str	r3, [r2, #4]
 8005dea:	4421      	add	r1, r4
 8005dec:	6011      	str	r1, [r2, #0]
 8005dee:	e7da      	b.n	8005da6 <_free_r+0x26>
 8005df0:	d902      	bls.n	8005df8 <_free_r+0x78>
 8005df2:	230c      	movs	r3, #12
 8005df4:	6003      	str	r3, [r0, #0]
 8005df6:	e7d6      	b.n	8005da6 <_free_r+0x26>
 8005df8:	6825      	ldr	r5, [r4, #0]
 8005dfa:	1961      	adds	r1, r4, r5
 8005dfc:	428b      	cmp	r3, r1
 8005dfe:	bf04      	itt	eq
 8005e00:	6819      	ldreq	r1, [r3, #0]
 8005e02:	685b      	ldreq	r3, [r3, #4]
 8005e04:	6063      	str	r3, [r4, #4]
 8005e06:	bf04      	itt	eq
 8005e08:	1949      	addeq	r1, r1, r5
 8005e0a:	6021      	streq	r1, [r4, #0]
 8005e0c:	6054      	str	r4, [r2, #4]
 8005e0e:	e7ca      	b.n	8005da6 <_free_r+0x26>
 8005e10:	b003      	add	sp, #12
 8005e12:	bd30      	pop	{r4, r5, pc}
 8005e14:	20004b54 	.word	0x20004b54

08005e18 <_init>:
 8005e18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e1a:	bf00      	nop
 8005e1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e1e:	bc08      	pop	{r3}
 8005e20:	469e      	mov	lr, r3
 8005e22:	4770      	bx	lr

08005e24 <_fini>:
 8005e24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e26:	bf00      	nop
 8005e28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e2a:	bc08      	pop	{r3}
 8005e2c:	469e      	mov	lr, r3
 8005e2e:	4770      	bx	lr
