
FreeRtos_Integration.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ab70  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000464  0800ad10  0800ad10  0001ad10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b174  0800b174  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  0800b174  0800b174  0001b174  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b17c  0800b17c  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800b17c  0800b17c  0001b17c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  0800b184  0800b184  0001b184  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  0800b18c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000563c  20000078  0800b204  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200056b4  0800b204  000256b4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00029f7b  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000046be  00000000  00000000  0004a023  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000018f0  00000000  00000000  0004e6e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000017a0  00000000  00000000  0004ffd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00006ffc  00000000  00000000  00051778  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b7ee  00000000  00000000  00058774  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b6365  00000000  00000000  00073f62  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0012a2c7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000084e4  00000000  00000000  0012a318  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000078 	.word	0x20000078
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800acf8 	.word	0x0800acf8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000007c 	.word	0x2000007c
 80001dc:	0800acf8 	.word	0x0800acf8

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <__aeabi_dmul>:
 80001f0:	b570      	push	{r4, r5, r6, lr}
 80001f2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80001f6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80001fa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80001fe:	bf1d      	ittte	ne
 8000200:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000204:	ea94 0f0c 	teqne	r4, ip
 8000208:	ea95 0f0c 	teqne	r5, ip
 800020c:	f000 f8de 	bleq	80003cc <__aeabi_dmul+0x1dc>
 8000210:	442c      	add	r4, r5
 8000212:	ea81 0603 	eor.w	r6, r1, r3
 8000216:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800021a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800021e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000222:	bf18      	it	ne
 8000224:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000228:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800022c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000230:	d038      	beq.n	80002a4 <__aeabi_dmul+0xb4>
 8000232:	fba0 ce02 	umull	ip, lr, r0, r2
 8000236:	f04f 0500 	mov.w	r5, #0
 800023a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800023e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000242:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000246:	f04f 0600 	mov.w	r6, #0
 800024a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800024e:	f09c 0f00 	teq	ip, #0
 8000252:	bf18      	it	ne
 8000254:	f04e 0e01 	orrne.w	lr, lr, #1
 8000258:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800025c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000260:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000264:	d204      	bcs.n	8000270 <__aeabi_dmul+0x80>
 8000266:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800026a:	416d      	adcs	r5, r5
 800026c:	eb46 0606 	adc.w	r6, r6, r6
 8000270:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000274:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000278:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800027c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000280:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000284:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000288:	bf88      	it	hi
 800028a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800028e:	d81e      	bhi.n	80002ce <__aeabi_dmul+0xde>
 8000290:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000294:	bf08      	it	eq
 8000296:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800029a:	f150 0000 	adcs.w	r0, r0, #0
 800029e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002a2:	bd70      	pop	{r4, r5, r6, pc}
 80002a4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80002a8:	ea46 0101 	orr.w	r1, r6, r1
 80002ac:	ea40 0002 	orr.w	r0, r0, r2
 80002b0:	ea81 0103 	eor.w	r1, r1, r3
 80002b4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002b8:	bfc2      	ittt	gt
 80002ba:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002be:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002c2:	bd70      	popgt	{r4, r5, r6, pc}
 80002c4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002c8:	f04f 0e00 	mov.w	lr, #0
 80002cc:	3c01      	subs	r4, #1
 80002ce:	f300 80ab 	bgt.w	8000428 <__aeabi_dmul+0x238>
 80002d2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80002d6:	bfde      	ittt	le
 80002d8:	2000      	movle	r0, #0
 80002da:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80002de:	bd70      	pople	{r4, r5, r6, pc}
 80002e0:	f1c4 0400 	rsb	r4, r4, #0
 80002e4:	3c20      	subs	r4, #32
 80002e6:	da35      	bge.n	8000354 <__aeabi_dmul+0x164>
 80002e8:	340c      	adds	r4, #12
 80002ea:	dc1b      	bgt.n	8000324 <__aeabi_dmul+0x134>
 80002ec:	f104 0414 	add.w	r4, r4, #20
 80002f0:	f1c4 0520 	rsb	r5, r4, #32
 80002f4:	fa00 f305 	lsl.w	r3, r0, r5
 80002f8:	fa20 f004 	lsr.w	r0, r0, r4
 80002fc:	fa01 f205 	lsl.w	r2, r1, r5
 8000300:	ea40 0002 	orr.w	r0, r0, r2
 8000304:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000308:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800030c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000310:	fa21 f604 	lsr.w	r6, r1, r4
 8000314:	eb42 0106 	adc.w	r1, r2, r6
 8000318:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800031c:	bf08      	it	eq
 800031e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000322:	bd70      	pop	{r4, r5, r6, pc}
 8000324:	f1c4 040c 	rsb	r4, r4, #12
 8000328:	f1c4 0520 	rsb	r5, r4, #32
 800032c:	fa00 f304 	lsl.w	r3, r0, r4
 8000330:	fa20 f005 	lsr.w	r0, r0, r5
 8000334:	fa01 f204 	lsl.w	r2, r1, r4
 8000338:	ea40 0002 	orr.w	r0, r0, r2
 800033c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000340:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000344:	f141 0100 	adc.w	r1, r1, #0
 8000348:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800034c:	bf08      	it	eq
 800034e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000352:	bd70      	pop	{r4, r5, r6, pc}
 8000354:	f1c4 0520 	rsb	r5, r4, #32
 8000358:	fa00 f205 	lsl.w	r2, r0, r5
 800035c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000360:	fa20 f304 	lsr.w	r3, r0, r4
 8000364:	fa01 f205 	lsl.w	r2, r1, r5
 8000368:	ea43 0302 	orr.w	r3, r3, r2
 800036c:	fa21 f004 	lsr.w	r0, r1, r4
 8000370:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000374:	fa21 f204 	lsr.w	r2, r1, r4
 8000378:	ea20 0002 	bic.w	r0, r0, r2
 800037c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000380:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000384:	bf08      	it	eq
 8000386:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800038a:	bd70      	pop	{r4, r5, r6, pc}
 800038c:	f094 0f00 	teq	r4, #0
 8000390:	d10f      	bne.n	80003b2 <__aeabi_dmul+0x1c2>
 8000392:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000396:	0040      	lsls	r0, r0, #1
 8000398:	eb41 0101 	adc.w	r1, r1, r1
 800039c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003a0:	bf08      	it	eq
 80003a2:	3c01      	subeq	r4, #1
 80003a4:	d0f7      	beq.n	8000396 <__aeabi_dmul+0x1a6>
 80003a6:	ea41 0106 	orr.w	r1, r1, r6
 80003aa:	f095 0f00 	teq	r5, #0
 80003ae:	bf18      	it	ne
 80003b0:	4770      	bxne	lr
 80003b2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80003b6:	0052      	lsls	r2, r2, #1
 80003b8:	eb43 0303 	adc.w	r3, r3, r3
 80003bc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80003c0:	bf08      	it	eq
 80003c2:	3d01      	subeq	r5, #1
 80003c4:	d0f7      	beq.n	80003b6 <__aeabi_dmul+0x1c6>
 80003c6:	ea43 0306 	orr.w	r3, r3, r6
 80003ca:	4770      	bx	lr
 80003cc:	ea94 0f0c 	teq	r4, ip
 80003d0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003d4:	bf18      	it	ne
 80003d6:	ea95 0f0c 	teqne	r5, ip
 80003da:	d00c      	beq.n	80003f6 <__aeabi_dmul+0x206>
 80003dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003e0:	bf18      	it	ne
 80003e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003e6:	d1d1      	bne.n	800038c <__aeabi_dmul+0x19c>
 80003e8:	ea81 0103 	eor.w	r1, r1, r3
 80003ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003f0:	f04f 0000 	mov.w	r0, #0
 80003f4:	bd70      	pop	{r4, r5, r6, pc}
 80003f6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003fa:	bf06      	itte	eq
 80003fc:	4610      	moveq	r0, r2
 80003fe:	4619      	moveq	r1, r3
 8000400:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000404:	d019      	beq.n	800043a <__aeabi_dmul+0x24a>
 8000406:	ea94 0f0c 	teq	r4, ip
 800040a:	d102      	bne.n	8000412 <__aeabi_dmul+0x222>
 800040c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000410:	d113      	bne.n	800043a <__aeabi_dmul+0x24a>
 8000412:	ea95 0f0c 	teq	r5, ip
 8000416:	d105      	bne.n	8000424 <__aeabi_dmul+0x234>
 8000418:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800041c:	bf1c      	itt	ne
 800041e:	4610      	movne	r0, r2
 8000420:	4619      	movne	r1, r3
 8000422:	d10a      	bne.n	800043a <__aeabi_dmul+0x24a>
 8000424:	ea81 0103 	eor.w	r1, r1, r3
 8000428:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800042c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000430:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000434:	f04f 0000 	mov.w	r0, #0
 8000438:	bd70      	pop	{r4, r5, r6, pc}
 800043a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800043e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000442:	bd70      	pop	{r4, r5, r6, pc}

08000444 <__aeabi_drsub>:
 8000444:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000448:	e002      	b.n	8000450 <__adddf3>
 800044a:	bf00      	nop

0800044c <__aeabi_dsub>:
 800044c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000450 <__adddf3>:
 8000450:	b530      	push	{r4, r5, lr}
 8000452:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000456:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800045a:	ea94 0f05 	teq	r4, r5
 800045e:	bf08      	it	eq
 8000460:	ea90 0f02 	teqeq	r0, r2
 8000464:	bf1f      	itttt	ne
 8000466:	ea54 0c00 	orrsne.w	ip, r4, r0
 800046a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800046e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000472:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000476:	f000 80e2 	beq.w	800063e <__adddf3+0x1ee>
 800047a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800047e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000482:	bfb8      	it	lt
 8000484:	426d      	neglt	r5, r5
 8000486:	dd0c      	ble.n	80004a2 <__adddf3+0x52>
 8000488:	442c      	add	r4, r5
 800048a:	ea80 0202 	eor.w	r2, r0, r2
 800048e:	ea81 0303 	eor.w	r3, r1, r3
 8000492:	ea82 0000 	eor.w	r0, r2, r0
 8000496:	ea83 0101 	eor.w	r1, r3, r1
 800049a:	ea80 0202 	eor.w	r2, r0, r2
 800049e:	ea81 0303 	eor.w	r3, r1, r3
 80004a2:	2d36      	cmp	r5, #54	; 0x36
 80004a4:	bf88      	it	hi
 80004a6:	bd30      	pophi	{r4, r5, pc}
 80004a8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80004ac:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80004b0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80004b4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004b8:	d002      	beq.n	80004c0 <__adddf3+0x70>
 80004ba:	4240      	negs	r0, r0
 80004bc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004c0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80004c4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004c8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004cc:	d002      	beq.n	80004d4 <__adddf3+0x84>
 80004ce:	4252      	negs	r2, r2
 80004d0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004d4:	ea94 0f05 	teq	r4, r5
 80004d8:	f000 80a7 	beq.w	800062a <__adddf3+0x1da>
 80004dc:	f1a4 0401 	sub.w	r4, r4, #1
 80004e0:	f1d5 0e20 	rsbs	lr, r5, #32
 80004e4:	db0d      	blt.n	8000502 <__adddf3+0xb2>
 80004e6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004ea:	fa22 f205 	lsr.w	r2, r2, r5
 80004ee:	1880      	adds	r0, r0, r2
 80004f0:	f141 0100 	adc.w	r1, r1, #0
 80004f4:	fa03 f20e 	lsl.w	r2, r3, lr
 80004f8:	1880      	adds	r0, r0, r2
 80004fa:	fa43 f305 	asr.w	r3, r3, r5
 80004fe:	4159      	adcs	r1, r3
 8000500:	e00e      	b.n	8000520 <__adddf3+0xd0>
 8000502:	f1a5 0520 	sub.w	r5, r5, #32
 8000506:	f10e 0e20 	add.w	lr, lr, #32
 800050a:	2a01      	cmp	r2, #1
 800050c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000510:	bf28      	it	cs
 8000512:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000516:	fa43 f305 	asr.w	r3, r3, r5
 800051a:	18c0      	adds	r0, r0, r3
 800051c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000520:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000524:	d507      	bpl.n	8000536 <__adddf3+0xe6>
 8000526:	f04f 0e00 	mov.w	lr, #0
 800052a:	f1dc 0c00 	rsbs	ip, ip, #0
 800052e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000532:	eb6e 0101 	sbc.w	r1, lr, r1
 8000536:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800053a:	d31b      	bcc.n	8000574 <__adddf3+0x124>
 800053c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000540:	d30c      	bcc.n	800055c <__adddf3+0x10c>
 8000542:	0849      	lsrs	r1, r1, #1
 8000544:	ea5f 0030 	movs.w	r0, r0, rrx
 8000548:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800054c:	f104 0401 	add.w	r4, r4, #1
 8000550:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000554:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000558:	f080 809a 	bcs.w	8000690 <__adddf3+0x240>
 800055c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000560:	bf08      	it	eq
 8000562:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000566:	f150 0000 	adcs.w	r0, r0, #0
 800056a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800056e:	ea41 0105 	orr.w	r1, r1, r5
 8000572:	bd30      	pop	{r4, r5, pc}
 8000574:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000578:	4140      	adcs	r0, r0
 800057a:	eb41 0101 	adc.w	r1, r1, r1
 800057e:	3c01      	subs	r4, #1
 8000580:	bf28      	it	cs
 8000582:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000586:	d2e9      	bcs.n	800055c <__adddf3+0x10c>
 8000588:	f091 0f00 	teq	r1, #0
 800058c:	bf04      	itt	eq
 800058e:	4601      	moveq	r1, r0
 8000590:	2000      	moveq	r0, #0
 8000592:	fab1 f381 	clz	r3, r1
 8000596:	bf08      	it	eq
 8000598:	3320      	addeq	r3, #32
 800059a:	f1a3 030b 	sub.w	r3, r3, #11
 800059e:	f1b3 0220 	subs.w	r2, r3, #32
 80005a2:	da0c      	bge.n	80005be <__adddf3+0x16e>
 80005a4:	320c      	adds	r2, #12
 80005a6:	dd08      	ble.n	80005ba <__adddf3+0x16a>
 80005a8:	f102 0c14 	add.w	ip, r2, #20
 80005ac:	f1c2 020c 	rsb	r2, r2, #12
 80005b0:	fa01 f00c 	lsl.w	r0, r1, ip
 80005b4:	fa21 f102 	lsr.w	r1, r1, r2
 80005b8:	e00c      	b.n	80005d4 <__adddf3+0x184>
 80005ba:	f102 0214 	add.w	r2, r2, #20
 80005be:	bfd8      	it	le
 80005c0:	f1c2 0c20 	rsble	ip, r2, #32
 80005c4:	fa01 f102 	lsl.w	r1, r1, r2
 80005c8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005cc:	bfdc      	itt	le
 80005ce:	ea41 010c 	orrle.w	r1, r1, ip
 80005d2:	4090      	lslle	r0, r2
 80005d4:	1ae4      	subs	r4, r4, r3
 80005d6:	bfa2      	ittt	ge
 80005d8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005dc:	4329      	orrge	r1, r5
 80005de:	bd30      	popge	{r4, r5, pc}
 80005e0:	ea6f 0404 	mvn.w	r4, r4
 80005e4:	3c1f      	subs	r4, #31
 80005e6:	da1c      	bge.n	8000622 <__adddf3+0x1d2>
 80005e8:	340c      	adds	r4, #12
 80005ea:	dc0e      	bgt.n	800060a <__adddf3+0x1ba>
 80005ec:	f104 0414 	add.w	r4, r4, #20
 80005f0:	f1c4 0220 	rsb	r2, r4, #32
 80005f4:	fa20 f004 	lsr.w	r0, r0, r4
 80005f8:	fa01 f302 	lsl.w	r3, r1, r2
 80005fc:	ea40 0003 	orr.w	r0, r0, r3
 8000600:	fa21 f304 	lsr.w	r3, r1, r4
 8000604:	ea45 0103 	orr.w	r1, r5, r3
 8000608:	bd30      	pop	{r4, r5, pc}
 800060a:	f1c4 040c 	rsb	r4, r4, #12
 800060e:	f1c4 0220 	rsb	r2, r4, #32
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 f304 	lsl.w	r3, r1, r4
 800061a:	ea40 0003 	orr.w	r0, r0, r3
 800061e:	4629      	mov	r1, r5
 8000620:	bd30      	pop	{r4, r5, pc}
 8000622:	fa21 f004 	lsr.w	r0, r1, r4
 8000626:	4629      	mov	r1, r5
 8000628:	bd30      	pop	{r4, r5, pc}
 800062a:	f094 0f00 	teq	r4, #0
 800062e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000632:	bf06      	itte	eq
 8000634:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000638:	3401      	addeq	r4, #1
 800063a:	3d01      	subne	r5, #1
 800063c:	e74e      	b.n	80004dc <__adddf3+0x8c>
 800063e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000642:	bf18      	it	ne
 8000644:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000648:	d029      	beq.n	800069e <__adddf3+0x24e>
 800064a:	ea94 0f05 	teq	r4, r5
 800064e:	bf08      	it	eq
 8000650:	ea90 0f02 	teqeq	r0, r2
 8000654:	d005      	beq.n	8000662 <__adddf3+0x212>
 8000656:	ea54 0c00 	orrs.w	ip, r4, r0
 800065a:	bf04      	itt	eq
 800065c:	4619      	moveq	r1, r3
 800065e:	4610      	moveq	r0, r2
 8000660:	bd30      	pop	{r4, r5, pc}
 8000662:	ea91 0f03 	teq	r1, r3
 8000666:	bf1e      	ittt	ne
 8000668:	2100      	movne	r1, #0
 800066a:	2000      	movne	r0, #0
 800066c:	bd30      	popne	{r4, r5, pc}
 800066e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000672:	d105      	bne.n	8000680 <__adddf3+0x230>
 8000674:	0040      	lsls	r0, r0, #1
 8000676:	4149      	adcs	r1, r1
 8000678:	bf28      	it	cs
 800067a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800067e:	bd30      	pop	{r4, r5, pc}
 8000680:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000684:	bf3c      	itt	cc
 8000686:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800068a:	bd30      	popcc	{r4, r5, pc}
 800068c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000690:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000694:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000698:	f04f 0000 	mov.w	r0, #0
 800069c:	bd30      	pop	{r4, r5, pc}
 800069e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006a2:	bf1a      	itte	ne
 80006a4:	4619      	movne	r1, r3
 80006a6:	4610      	movne	r0, r2
 80006a8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80006ac:	bf1c      	itt	ne
 80006ae:	460b      	movne	r3, r1
 80006b0:	4602      	movne	r2, r0
 80006b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80006b6:	bf06      	itte	eq
 80006b8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006bc:	ea91 0f03 	teqeq	r1, r3
 80006c0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80006c4:	bd30      	pop	{r4, r5, pc}
 80006c6:	bf00      	nop

080006c8 <__aeabi_ui2d>:
 80006c8:	f090 0f00 	teq	r0, #0
 80006cc:	bf04      	itt	eq
 80006ce:	2100      	moveq	r1, #0
 80006d0:	4770      	bxeq	lr
 80006d2:	b530      	push	{r4, r5, lr}
 80006d4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006d8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006dc:	f04f 0500 	mov.w	r5, #0
 80006e0:	f04f 0100 	mov.w	r1, #0
 80006e4:	e750      	b.n	8000588 <__adddf3+0x138>
 80006e6:	bf00      	nop

080006e8 <__aeabi_i2d>:
 80006e8:	f090 0f00 	teq	r0, #0
 80006ec:	bf04      	itt	eq
 80006ee:	2100      	moveq	r1, #0
 80006f0:	4770      	bxeq	lr
 80006f2:	b530      	push	{r4, r5, lr}
 80006f4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006f8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006fc:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000700:	bf48      	it	mi
 8000702:	4240      	negmi	r0, r0
 8000704:	f04f 0100 	mov.w	r1, #0
 8000708:	e73e      	b.n	8000588 <__adddf3+0x138>
 800070a:	bf00      	nop

0800070c <__aeabi_f2d>:
 800070c:	0042      	lsls	r2, r0, #1
 800070e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000712:	ea4f 0131 	mov.w	r1, r1, rrx
 8000716:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800071a:	bf1f      	itttt	ne
 800071c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000720:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000724:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000728:	4770      	bxne	lr
 800072a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800072e:	bf08      	it	eq
 8000730:	4770      	bxeq	lr
 8000732:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000736:	bf04      	itt	eq
 8000738:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800073c:	4770      	bxeq	lr
 800073e:	b530      	push	{r4, r5, lr}
 8000740:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000744:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000748:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800074c:	e71c      	b.n	8000588 <__adddf3+0x138>
 800074e:	bf00      	nop

08000750 <__aeabi_ul2d>:
 8000750:	ea50 0201 	orrs.w	r2, r0, r1
 8000754:	bf08      	it	eq
 8000756:	4770      	bxeq	lr
 8000758:	b530      	push	{r4, r5, lr}
 800075a:	f04f 0500 	mov.w	r5, #0
 800075e:	e00a      	b.n	8000776 <__aeabi_l2d+0x16>

08000760 <__aeabi_l2d>:
 8000760:	ea50 0201 	orrs.w	r2, r0, r1
 8000764:	bf08      	it	eq
 8000766:	4770      	bxeq	lr
 8000768:	b530      	push	{r4, r5, lr}
 800076a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800076e:	d502      	bpl.n	8000776 <__aeabi_l2d+0x16>
 8000770:	4240      	negs	r0, r0
 8000772:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000776:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800077a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800077e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000782:	f43f aed8 	beq.w	8000536 <__adddf3+0xe6>
 8000786:	f04f 0203 	mov.w	r2, #3
 800078a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800078e:	bf18      	it	ne
 8000790:	3203      	addne	r2, #3
 8000792:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000796:	bf18      	it	ne
 8000798:	3203      	addne	r2, #3
 800079a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800079e:	f1c2 0320 	rsb	r3, r2, #32
 80007a2:	fa00 fc03 	lsl.w	ip, r0, r3
 80007a6:	fa20 f002 	lsr.w	r0, r0, r2
 80007aa:	fa01 fe03 	lsl.w	lr, r1, r3
 80007ae:	ea40 000e 	orr.w	r0, r0, lr
 80007b2:	fa21 f102 	lsr.w	r1, r1, r2
 80007b6:	4414      	add	r4, r2
 80007b8:	e6bd      	b.n	8000536 <__adddf3+0xe6>
 80007ba:	bf00      	nop

080007bc <__aeabi_d2f>:
 80007bc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80007c0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80007c4:	bf24      	itt	cs
 80007c6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80007ca:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80007ce:	d90d      	bls.n	80007ec <__aeabi_d2f+0x30>
 80007d0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80007d4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80007d8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80007dc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80007e0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80007e4:	bf08      	it	eq
 80007e6:	f020 0001 	biceq.w	r0, r0, #1
 80007ea:	4770      	bx	lr
 80007ec:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80007f0:	d121      	bne.n	8000836 <__aeabi_d2f+0x7a>
 80007f2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80007f6:	bfbc      	itt	lt
 80007f8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80007fc:	4770      	bxlt	lr
 80007fe:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000802:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000806:	f1c2 0218 	rsb	r2, r2, #24
 800080a:	f1c2 0c20 	rsb	ip, r2, #32
 800080e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000812:	fa20 f002 	lsr.w	r0, r0, r2
 8000816:	bf18      	it	ne
 8000818:	f040 0001 	orrne.w	r0, r0, #1
 800081c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000820:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000824:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000828:	ea40 000c 	orr.w	r0, r0, ip
 800082c:	fa23 f302 	lsr.w	r3, r3, r2
 8000830:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000834:	e7cc      	b.n	80007d0 <__aeabi_d2f+0x14>
 8000836:	ea7f 5362 	mvns.w	r3, r2, asr #21
 800083a:	d107      	bne.n	800084c <__aeabi_d2f+0x90>
 800083c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000840:	bf1e      	ittt	ne
 8000842:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000846:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 800084a:	4770      	bxne	lr
 800084c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000850:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000854:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000858:	4770      	bx	lr
 800085a:	bf00      	nop

0800085c <__aeabi_uldivmod>:
 800085c:	b953      	cbnz	r3, 8000874 <__aeabi_uldivmod+0x18>
 800085e:	b94a      	cbnz	r2, 8000874 <__aeabi_uldivmod+0x18>
 8000860:	2900      	cmp	r1, #0
 8000862:	bf08      	it	eq
 8000864:	2800      	cmpeq	r0, #0
 8000866:	bf1c      	itt	ne
 8000868:	f04f 31ff 	movne.w	r1, #4294967295
 800086c:	f04f 30ff 	movne.w	r0, #4294967295
 8000870:	f000 b974 	b.w	8000b5c <__aeabi_idiv0>
 8000874:	f1ad 0c08 	sub.w	ip, sp, #8
 8000878:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800087c:	f000 f806 	bl	800088c <__udivmoddi4>
 8000880:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000884:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000888:	b004      	add	sp, #16
 800088a:	4770      	bx	lr

0800088c <__udivmoddi4>:
 800088c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000890:	9d08      	ldr	r5, [sp, #32]
 8000892:	4604      	mov	r4, r0
 8000894:	468e      	mov	lr, r1
 8000896:	2b00      	cmp	r3, #0
 8000898:	d14d      	bne.n	8000936 <__udivmoddi4+0xaa>
 800089a:	428a      	cmp	r2, r1
 800089c:	4694      	mov	ip, r2
 800089e:	d969      	bls.n	8000974 <__udivmoddi4+0xe8>
 80008a0:	fab2 f282 	clz	r2, r2
 80008a4:	b152      	cbz	r2, 80008bc <__udivmoddi4+0x30>
 80008a6:	fa01 f302 	lsl.w	r3, r1, r2
 80008aa:	f1c2 0120 	rsb	r1, r2, #32
 80008ae:	fa20 f101 	lsr.w	r1, r0, r1
 80008b2:	fa0c fc02 	lsl.w	ip, ip, r2
 80008b6:	ea41 0e03 	orr.w	lr, r1, r3
 80008ba:	4094      	lsls	r4, r2
 80008bc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80008c0:	0c21      	lsrs	r1, r4, #16
 80008c2:	fbbe f6f8 	udiv	r6, lr, r8
 80008c6:	fa1f f78c 	uxth.w	r7, ip
 80008ca:	fb08 e316 	mls	r3, r8, r6, lr
 80008ce:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80008d2:	fb06 f107 	mul.w	r1, r6, r7
 80008d6:	4299      	cmp	r1, r3
 80008d8:	d90a      	bls.n	80008f0 <__udivmoddi4+0x64>
 80008da:	eb1c 0303 	adds.w	r3, ip, r3
 80008de:	f106 30ff 	add.w	r0, r6, #4294967295
 80008e2:	f080 811f 	bcs.w	8000b24 <__udivmoddi4+0x298>
 80008e6:	4299      	cmp	r1, r3
 80008e8:	f240 811c 	bls.w	8000b24 <__udivmoddi4+0x298>
 80008ec:	3e02      	subs	r6, #2
 80008ee:	4463      	add	r3, ip
 80008f0:	1a5b      	subs	r3, r3, r1
 80008f2:	b2a4      	uxth	r4, r4
 80008f4:	fbb3 f0f8 	udiv	r0, r3, r8
 80008f8:	fb08 3310 	mls	r3, r8, r0, r3
 80008fc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000900:	fb00 f707 	mul.w	r7, r0, r7
 8000904:	42a7      	cmp	r7, r4
 8000906:	d90a      	bls.n	800091e <__udivmoddi4+0x92>
 8000908:	eb1c 0404 	adds.w	r4, ip, r4
 800090c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000910:	f080 810a 	bcs.w	8000b28 <__udivmoddi4+0x29c>
 8000914:	42a7      	cmp	r7, r4
 8000916:	f240 8107 	bls.w	8000b28 <__udivmoddi4+0x29c>
 800091a:	4464      	add	r4, ip
 800091c:	3802      	subs	r0, #2
 800091e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000922:	1be4      	subs	r4, r4, r7
 8000924:	2600      	movs	r6, #0
 8000926:	b11d      	cbz	r5, 8000930 <__udivmoddi4+0xa4>
 8000928:	40d4      	lsrs	r4, r2
 800092a:	2300      	movs	r3, #0
 800092c:	e9c5 4300 	strd	r4, r3, [r5]
 8000930:	4631      	mov	r1, r6
 8000932:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000936:	428b      	cmp	r3, r1
 8000938:	d909      	bls.n	800094e <__udivmoddi4+0xc2>
 800093a:	2d00      	cmp	r5, #0
 800093c:	f000 80ef 	beq.w	8000b1e <__udivmoddi4+0x292>
 8000940:	2600      	movs	r6, #0
 8000942:	e9c5 0100 	strd	r0, r1, [r5]
 8000946:	4630      	mov	r0, r6
 8000948:	4631      	mov	r1, r6
 800094a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800094e:	fab3 f683 	clz	r6, r3
 8000952:	2e00      	cmp	r6, #0
 8000954:	d14a      	bne.n	80009ec <__udivmoddi4+0x160>
 8000956:	428b      	cmp	r3, r1
 8000958:	d302      	bcc.n	8000960 <__udivmoddi4+0xd4>
 800095a:	4282      	cmp	r2, r0
 800095c:	f200 80f9 	bhi.w	8000b52 <__udivmoddi4+0x2c6>
 8000960:	1a84      	subs	r4, r0, r2
 8000962:	eb61 0303 	sbc.w	r3, r1, r3
 8000966:	2001      	movs	r0, #1
 8000968:	469e      	mov	lr, r3
 800096a:	2d00      	cmp	r5, #0
 800096c:	d0e0      	beq.n	8000930 <__udivmoddi4+0xa4>
 800096e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000972:	e7dd      	b.n	8000930 <__udivmoddi4+0xa4>
 8000974:	b902      	cbnz	r2, 8000978 <__udivmoddi4+0xec>
 8000976:	deff      	udf	#255	; 0xff
 8000978:	fab2 f282 	clz	r2, r2
 800097c:	2a00      	cmp	r2, #0
 800097e:	f040 8092 	bne.w	8000aa6 <__udivmoddi4+0x21a>
 8000982:	eba1 010c 	sub.w	r1, r1, ip
 8000986:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800098a:	fa1f fe8c 	uxth.w	lr, ip
 800098e:	2601      	movs	r6, #1
 8000990:	0c20      	lsrs	r0, r4, #16
 8000992:	fbb1 f3f7 	udiv	r3, r1, r7
 8000996:	fb07 1113 	mls	r1, r7, r3, r1
 800099a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800099e:	fb0e f003 	mul.w	r0, lr, r3
 80009a2:	4288      	cmp	r0, r1
 80009a4:	d908      	bls.n	80009b8 <__udivmoddi4+0x12c>
 80009a6:	eb1c 0101 	adds.w	r1, ip, r1
 80009aa:	f103 38ff 	add.w	r8, r3, #4294967295
 80009ae:	d202      	bcs.n	80009b6 <__udivmoddi4+0x12a>
 80009b0:	4288      	cmp	r0, r1
 80009b2:	f200 80cb 	bhi.w	8000b4c <__udivmoddi4+0x2c0>
 80009b6:	4643      	mov	r3, r8
 80009b8:	1a09      	subs	r1, r1, r0
 80009ba:	b2a4      	uxth	r4, r4
 80009bc:	fbb1 f0f7 	udiv	r0, r1, r7
 80009c0:	fb07 1110 	mls	r1, r7, r0, r1
 80009c4:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80009c8:	fb0e fe00 	mul.w	lr, lr, r0
 80009cc:	45a6      	cmp	lr, r4
 80009ce:	d908      	bls.n	80009e2 <__udivmoddi4+0x156>
 80009d0:	eb1c 0404 	adds.w	r4, ip, r4
 80009d4:	f100 31ff 	add.w	r1, r0, #4294967295
 80009d8:	d202      	bcs.n	80009e0 <__udivmoddi4+0x154>
 80009da:	45a6      	cmp	lr, r4
 80009dc:	f200 80bb 	bhi.w	8000b56 <__udivmoddi4+0x2ca>
 80009e0:	4608      	mov	r0, r1
 80009e2:	eba4 040e 	sub.w	r4, r4, lr
 80009e6:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80009ea:	e79c      	b.n	8000926 <__udivmoddi4+0x9a>
 80009ec:	f1c6 0720 	rsb	r7, r6, #32
 80009f0:	40b3      	lsls	r3, r6
 80009f2:	fa22 fc07 	lsr.w	ip, r2, r7
 80009f6:	ea4c 0c03 	orr.w	ip, ip, r3
 80009fa:	fa20 f407 	lsr.w	r4, r0, r7
 80009fe:	fa01 f306 	lsl.w	r3, r1, r6
 8000a02:	431c      	orrs	r4, r3
 8000a04:	40f9      	lsrs	r1, r7
 8000a06:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000a0a:	fa00 f306 	lsl.w	r3, r0, r6
 8000a0e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000a12:	0c20      	lsrs	r0, r4, #16
 8000a14:	fa1f fe8c 	uxth.w	lr, ip
 8000a18:	fb09 1118 	mls	r1, r9, r8, r1
 8000a1c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000a20:	fb08 f00e 	mul.w	r0, r8, lr
 8000a24:	4288      	cmp	r0, r1
 8000a26:	fa02 f206 	lsl.w	r2, r2, r6
 8000a2a:	d90b      	bls.n	8000a44 <__udivmoddi4+0x1b8>
 8000a2c:	eb1c 0101 	adds.w	r1, ip, r1
 8000a30:	f108 3aff 	add.w	sl, r8, #4294967295
 8000a34:	f080 8088 	bcs.w	8000b48 <__udivmoddi4+0x2bc>
 8000a38:	4288      	cmp	r0, r1
 8000a3a:	f240 8085 	bls.w	8000b48 <__udivmoddi4+0x2bc>
 8000a3e:	f1a8 0802 	sub.w	r8, r8, #2
 8000a42:	4461      	add	r1, ip
 8000a44:	1a09      	subs	r1, r1, r0
 8000a46:	b2a4      	uxth	r4, r4
 8000a48:	fbb1 f0f9 	udiv	r0, r1, r9
 8000a4c:	fb09 1110 	mls	r1, r9, r0, r1
 8000a50:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000a54:	fb00 fe0e 	mul.w	lr, r0, lr
 8000a58:	458e      	cmp	lr, r1
 8000a5a:	d908      	bls.n	8000a6e <__udivmoddi4+0x1e2>
 8000a5c:	eb1c 0101 	adds.w	r1, ip, r1
 8000a60:	f100 34ff 	add.w	r4, r0, #4294967295
 8000a64:	d26c      	bcs.n	8000b40 <__udivmoddi4+0x2b4>
 8000a66:	458e      	cmp	lr, r1
 8000a68:	d96a      	bls.n	8000b40 <__udivmoddi4+0x2b4>
 8000a6a:	3802      	subs	r0, #2
 8000a6c:	4461      	add	r1, ip
 8000a6e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000a72:	fba0 9402 	umull	r9, r4, r0, r2
 8000a76:	eba1 010e 	sub.w	r1, r1, lr
 8000a7a:	42a1      	cmp	r1, r4
 8000a7c:	46c8      	mov	r8, r9
 8000a7e:	46a6      	mov	lr, r4
 8000a80:	d356      	bcc.n	8000b30 <__udivmoddi4+0x2a4>
 8000a82:	d053      	beq.n	8000b2c <__udivmoddi4+0x2a0>
 8000a84:	b15d      	cbz	r5, 8000a9e <__udivmoddi4+0x212>
 8000a86:	ebb3 0208 	subs.w	r2, r3, r8
 8000a8a:	eb61 010e 	sbc.w	r1, r1, lr
 8000a8e:	fa01 f707 	lsl.w	r7, r1, r7
 8000a92:	fa22 f306 	lsr.w	r3, r2, r6
 8000a96:	40f1      	lsrs	r1, r6
 8000a98:	431f      	orrs	r7, r3
 8000a9a:	e9c5 7100 	strd	r7, r1, [r5]
 8000a9e:	2600      	movs	r6, #0
 8000aa0:	4631      	mov	r1, r6
 8000aa2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000aa6:	f1c2 0320 	rsb	r3, r2, #32
 8000aaa:	40d8      	lsrs	r0, r3
 8000aac:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ab0:	fa21 f303 	lsr.w	r3, r1, r3
 8000ab4:	4091      	lsls	r1, r2
 8000ab6:	4301      	orrs	r1, r0
 8000ab8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000abc:	fa1f fe8c 	uxth.w	lr, ip
 8000ac0:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ac4:	fb07 3610 	mls	r6, r7, r0, r3
 8000ac8:	0c0b      	lsrs	r3, r1, #16
 8000aca:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000ace:	fb00 f60e 	mul.w	r6, r0, lr
 8000ad2:	429e      	cmp	r6, r3
 8000ad4:	fa04 f402 	lsl.w	r4, r4, r2
 8000ad8:	d908      	bls.n	8000aec <__udivmoddi4+0x260>
 8000ada:	eb1c 0303 	adds.w	r3, ip, r3
 8000ade:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ae2:	d22f      	bcs.n	8000b44 <__udivmoddi4+0x2b8>
 8000ae4:	429e      	cmp	r6, r3
 8000ae6:	d92d      	bls.n	8000b44 <__udivmoddi4+0x2b8>
 8000ae8:	3802      	subs	r0, #2
 8000aea:	4463      	add	r3, ip
 8000aec:	1b9b      	subs	r3, r3, r6
 8000aee:	b289      	uxth	r1, r1
 8000af0:	fbb3 f6f7 	udiv	r6, r3, r7
 8000af4:	fb07 3316 	mls	r3, r7, r6, r3
 8000af8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000afc:	fb06 f30e 	mul.w	r3, r6, lr
 8000b00:	428b      	cmp	r3, r1
 8000b02:	d908      	bls.n	8000b16 <__udivmoddi4+0x28a>
 8000b04:	eb1c 0101 	adds.w	r1, ip, r1
 8000b08:	f106 38ff 	add.w	r8, r6, #4294967295
 8000b0c:	d216      	bcs.n	8000b3c <__udivmoddi4+0x2b0>
 8000b0e:	428b      	cmp	r3, r1
 8000b10:	d914      	bls.n	8000b3c <__udivmoddi4+0x2b0>
 8000b12:	3e02      	subs	r6, #2
 8000b14:	4461      	add	r1, ip
 8000b16:	1ac9      	subs	r1, r1, r3
 8000b18:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000b1c:	e738      	b.n	8000990 <__udivmoddi4+0x104>
 8000b1e:	462e      	mov	r6, r5
 8000b20:	4628      	mov	r0, r5
 8000b22:	e705      	b.n	8000930 <__udivmoddi4+0xa4>
 8000b24:	4606      	mov	r6, r0
 8000b26:	e6e3      	b.n	80008f0 <__udivmoddi4+0x64>
 8000b28:	4618      	mov	r0, r3
 8000b2a:	e6f8      	b.n	800091e <__udivmoddi4+0x92>
 8000b2c:	454b      	cmp	r3, r9
 8000b2e:	d2a9      	bcs.n	8000a84 <__udivmoddi4+0x1f8>
 8000b30:	ebb9 0802 	subs.w	r8, r9, r2
 8000b34:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000b38:	3801      	subs	r0, #1
 8000b3a:	e7a3      	b.n	8000a84 <__udivmoddi4+0x1f8>
 8000b3c:	4646      	mov	r6, r8
 8000b3e:	e7ea      	b.n	8000b16 <__udivmoddi4+0x28a>
 8000b40:	4620      	mov	r0, r4
 8000b42:	e794      	b.n	8000a6e <__udivmoddi4+0x1e2>
 8000b44:	4640      	mov	r0, r8
 8000b46:	e7d1      	b.n	8000aec <__udivmoddi4+0x260>
 8000b48:	46d0      	mov	r8, sl
 8000b4a:	e77b      	b.n	8000a44 <__udivmoddi4+0x1b8>
 8000b4c:	3b02      	subs	r3, #2
 8000b4e:	4461      	add	r1, ip
 8000b50:	e732      	b.n	80009b8 <__udivmoddi4+0x12c>
 8000b52:	4630      	mov	r0, r6
 8000b54:	e709      	b.n	800096a <__udivmoddi4+0xde>
 8000b56:	4464      	add	r4, ip
 8000b58:	3802      	subs	r0, #2
 8000b5a:	e742      	b.n	80009e2 <__udivmoddi4+0x156>

08000b5c <__aeabi_idiv0>:
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop

08000b60 <_ZN3ros16normalizeSecNSecERmS0_>:
#include "ros/time.h"

namespace ros
{
void normalizeSecNSec(uint32_t& sec, uint32_t& nsec)
{
 8000b60:	b480      	push	{r7}
 8000b62:	b085      	sub	sp, #20
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
 8000b68:	6039      	str	r1, [r7, #0]
  uint32_t nsec_part = nsec % 1000000000UL;
 8000b6a:	683b      	ldr	r3, [r7, #0]
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	0a5a      	lsrs	r2, r3, #9
 8000b70:	490f      	ldr	r1, [pc, #60]	; (8000bb0 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 8000b72:	fba1 1202 	umull	r1, r2, r1, r2
 8000b76:	09d2      	lsrs	r2, r2, #7
 8000b78:	490e      	ldr	r1, [pc, #56]	; (8000bb4 <_ZN3ros16normalizeSecNSecERmS0_+0x54>)
 8000b7a:	fb01 f202 	mul.w	r2, r1, r2
 8000b7e:	1a9b      	subs	r3, r3, r2
 8000b80:	60fb      	str	r3, [r7, #12]
  uint32_t sec_part = nsec / 1000000000UL;
 8000b82:	683b      	ldr	r3, [r7, #0]
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	0a5b      	lsrs	r3, r3, #9
 8000b88:	4a09      	ldr	r2, [pc, #36]	; (8000bb0 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 8000b8a:	fba2 2303 	umull	r2, r3, r2, r3
 8000b8e:	09db      	lsrs	r3, r3, #7
 8000b90:	60bb      	str	r3, [r7, #8]
  sec += sec_part;
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	681a      	ldr	r2, [r3, #0]
 8000b96:	68bb      	ldr	r3, [r7, #8]
 8000b98:	441a      	add	r2, r3
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	601a      	str	r2, [r3, #0]
  nsec = nsec_part;
 8000b9e:	683b      	ldr	r3, [r7, #0]
 8000ba0:	68fa      	ldr	r2, [r7, #12]
 8000ba2:	601a      	str	r2, [r3, #0]
}
 8000ba4:	bf00      	nop
 8000ba6:	3714      	adds	r7, #20
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bae:	4770      	bx	lr
 8000bb0:	00044b83 	.word	0x00044b83
 8000bb4:	3b9aca00 	.word	0x3b9aca00

08000bb8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bbc:	f002 fdb0 	bl	8003720 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bc0:	f000 f86a 	bl	8000c98 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bc4:	f000 fa10 	bl	8000fe8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000bc8:	f000 f9d0 	bl	8000f6c <MX_DMA_Init>
  MX_ADC1_Init();
 8000bcc:	f000 f8c4 	bl	8000d58 <MX_ADC1_Init>
  MX_TIM2_Init();
 8000bd0:	f000 f922 	bl	8000e18 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8000bd4:	f000 f9a0 	bl	8000f18 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000bd8:	2100      	movs	r1, #0
 8000bda:	481f      	ldr	r0, [pc, #124]	; (8000c58 <main+0xa0>)
 8000bdc:	f004 fe2a 	bl	8005834 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8000be0:	2104      	movs	r1, #4
 8000be2:	481d      	ldr	r0, [pc, #116]	; (8000c58 <main+0xa0>)
 8000be4:	f004 fe26 	bl	8005834 <HAL_TIM_PWM_Start>
  setup();
 8000be8:	f001 fbee 	bl	80023c8 <setup>
  TIM2->CCR1 = 60;
 8000bec:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000bf0:	223c      	movs	r2, #60	; 0x3c
 8000bf2:	635a      	str	r2, [r3, #52]	; 0x34
  TIM2->CCR2 = 60;
 8000bf4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000bf8:	223c      	movs	r2, #60	; 0x3c
 8000bfa:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000bfc:	f006 fef2 	bl	80079e4 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of TaskADC */
  TaskADCHandle = osThreadNew(StartTaskADC, NULL, &TaskADC_attributes);
 8000c00:	4a16      	ldr	r2, [pc, #88]	; (8000c5c <main+0xa4>)
 8000c02:	2100      	movs	r1, #0
 8000c04:	4816      	ldr	r0, [pc, #88]	; (8000c60 <main+0xa8>)
 8000c06:	f006 ff37 	bl	8007a78 <osThreadNew>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	4a15      	ldr	r2, [pc, #84]	; (8000c64 <main+0xac>)
 8000c0e:	6013      	str	r3, [r2, #0]

  /* creation of GripperOpenTask */
  GripperOpenTaskHandle = osThreadNew(StartGripperOpenTask, NULL, &GripperOpenTask_attributes);
 8000c10:	4a15      	ldr	r2, [pc, #84]	; (8000c68 <main+0xb0>)
 8000c12:	2100      	movs	r1, #0
 8000c14:	4815      	ldr	r0, [pc, #84]	; (8000c6c <main+0xb4>)
 8000c16:	f006 ff2f 	bl	8007a78 <osThreadNew>
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	4a14      	ldr	r2, [pc, #80]	; (8000c70 <main+0xb8>)
 8000c1e:	6013      	str	r3, [r2, #0]

  /* creation of GripperClose */
  GripperCloseHandle = osThreadNew(StartGripperClose, NULL, &GripperClose_attributes);
 8000c20:	4a14      	ldr	r2, [pc, #80]	; (8000c74 <main+0xbc>)
 8000c22:	2100      	movs	r1, #0
 8000c24:	4814      	ldr	r0, [pc, #80]	; (8000c78 <main+0xc0>)
 8000c26:	f006 ff27 	bl	8007a78 <osThreadNew>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	4a13      	ldr	r2, [pc, #76]	; (8000c7c <main+0xc4>)
 8000c2e:	6013      	str	r3, [r2, #0]

  /* creation of GripperGoToTask */
  GripperGoToTaskHandle = osThreadNew(StartGripperGoToTask, NULL, &GripperGoToTask_attributes);
 8000c30:	4a13      	ldr	r2, [pc, #76]	; (8000c80 <main+0xc8>)
 8000c32:	2100      	movs	r1, #0
 8000c34:	4813      	ldr	r0, [pc, #76]	; (8000c84 <main+0xcc>)
 8000c36:	f006 ff1f 	bl	8007a78 <osThreadNew>
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	4a12      	ldr	r2, [pc, #72]	; (8000c88 <main+0xd0>)
 8000c3e:	6013      	str	r3, [r2, #0]

  /* creation of TaskRosserial */
  TaskRosserialHandle = osThreadNew(StartTaskRosserial, NULL, &TaskRosserial_attributes);
 8000c40:	4a12      	ldr	r2, [pc, #72]	; (8000c8c <main+0xd4>)
 8000c42:	2100      	movs	r1, #0
 8000c44:	4812      	ldr	r0, [pc, #72]	; (8000c90 <main+0xd8>)
 8000c46:	f006 ff17 	bl	8007a78 <osThreadNew>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	4a11      	ldr	r2, [pc, #68]	; (8000c94 <main+0xdc>)
 8000c4e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000c50:	f006 feec 	bl	8007a2c <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000c54:	e7fe      	b.n	8000c54 <main+0x9c>
 8000c56:	bf00      	nop
 8000c58:	2000013c 	.word	0x2000013c
 8000c5c:	0800aee0 	.word	0x0800aee0
 8000c60:	080011a9 	.word	0x080011a9
 8000c64:	20000288 	.word	0x20000288
 8000c68:	0800af04 	.word	0x0800af04
 8000c6c:	080011cd 	.word	0x080011cd
 8000c70:	2000028c 	.word	0x2000028c
 8000c74:	0800af28 	.word	0x0800af28
 8000c78:	08001269 	.word	0x08001269
 8000c7c:	20000290 	.word	0x20000290
 8000c80:	0800af4c 	.word	0x0800af4c
 8000c84:	0800127b 	.word	0x0800127b
 8000c88:	20000294 	.word	0x20000294
 8000c8c:	0800af70 	.word	0x0800af70
 8000c90:	0800128b 	.word	0x0800128b
 8000c94:	20000298 	.word	0x20000298

08000c98 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b094      	sub	sp, #80	; 0x50
 8000c9c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c9e:	f107 0320 	add.w	r3, r7, #32
 8000ca2:	2230      	movs	r2, #48	; 0x30
 8000ca4:	2100      	movs	r1, #0
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	f009 fe34 	bl	800a914 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cac:	f107 030c 	add.w	r3, r7, #12
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	601a      	str	r2, [r3, #0]
 8000cb4:	605a      	str	r2, [r3, #4]
 8000cb6:	609a      	str	r2, [r3, #8]
 8000cb8:	60da      	str	r2, [r3, #12]
 8000cba:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	60bb      	str	r3, [r7, #8]
 8000cc0:	4b23      	ldr	r3, [pc, #140]	; (8000d50 <SystemClock_Config+0xb8>)
 8000cc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cc4:	4a22      	ldr	r2, [pc, #136]	; (8000d50 <SystemClock_Config+0xb8>)
 8000cc6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cca:	6413      	str	r3, [r2, #64]	; 0x40
 8000ccc:	4b20      	ldr	r3, [pc, #128]	; (8000d50 <SystemClock_Config+0xb8>)
 8000cce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cd0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cd4:	60bb      	str	r3, [r7, #8]
 8000cd6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000cd8:	2300      	movs	r3, #0
 8000cda:	607b      	str	r3, [r7, #4]
 8000cdc:	4b1d      	ldr	r3, [pc, #116]	; (8000d54 <SystemClock_Config+0xbc>)
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000ce4:	4a1b      	ldr	r2, [pc, #108]	; (8000d54 <SystemClock_Config+0xbc>)
 8000ce6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000cea:	6013      	str	r3, [r2, #0]
 8000cec:	4b19      	ldr	r3, [pc, #100]	; (8000d54 <SystemClock_Config+0xbc>)
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000cf4:	607b      	str	r3, [r7, #4]
 8000cf6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000cf8:	2302      	movs	r3, #2
 8000cfa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000cfc:	2301      	movs	r3, #1
 8000cfe:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d00:	2310      	movs	r3, #16
 8000d02:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000d04:	2300      	movs	r3, #0
 8000d06:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d08:	f107 0320 	add.w	r3, r7, #32
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	f003 fffb 	bl	8004d08 <HAL_RCC_OscConfig>
 8000d12:	4603      	mov	r3, r0
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d001      	beq.n	8000d1c <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000d18:	f000 fad4 	bl	80012c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d1c:	230f      	movs	r3, #15
 8000d1e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000d20:	2300      	movs	r3, #0
 8000d22:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d24:	2300      	movs	r3, #0
 8000d26:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000d28:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000d2c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000d32:	f107 030c 	add.w	r3, r7, #12
 8000d36:	2100      	movs	r1, #0
 8000d38:	4618      	mov	r0, r3
 8000d3a:	f004 fa5d 	bl	80051f8 <HAL_RCC_ClockConfig>
 8000d3e:	4603      	mov	r3, r0
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d001      	beq.n	8000d48 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8000d44:	f000 fabe 	bl	80012c4 <Error_Handler>
  }
}
 8000d48:	bf00      	nop
 8000d4a:	3750      	adds	r7, #80	; 0x50
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	bd80      	pop	{r7, pc}
 8000d50:	40023800 	.word	0x40023800
 8000d54:	40007000 	.word	0x40007000

08000d58 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b084      	sub	sp, #16
 8000d5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000d5e:	463b      	mov	r3, r7
 8000d60:	2200      	movs	r2, #0
 8000d62:	601a      	str	r2, [r3, #0]
 8000d64:	605a      	str	r2, [r3, #4]
 8000d66:	609a      	str	r2, [r3, #8]
 8000d68:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000d6a:	4b28      	ldr	r3, [pc, #160]	; (8000e0c <MX_ADC1_Init+0xb4>)
 8000d6c:	4a28      	ldr	r2, [pc, #160]	; (8000e10 <MX_ADC1_Init+0xb8>)
 8000d6e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000d70:	4b26      	ldr	r3, [pc, #152]	; (8000e0c <MX_ADC1_Init+0xb4>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000d76:	4b25      	ldr	r3, [pc, #148]	; (8000e0c <MX_ADC1_Init+0xb4>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000d7c:	4b23      	ldr	r3, [pc, #140]	; (8000e0c <MX_ADC1_Init+0xb4>)
 8000d7e:	2201      	movs	r2, #1
 8000d80:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000d82:	4b22      	ldr	r3, [pc, #136]	; (8000e0c <MX_ADC1_Init+0xb4>)
 8000d84:	2201      	movs	r2, #1
 8000d86:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000d88:	4b20      	ldr	r3, [pc, #128]	; (8000e0c <MX_ADC1_Init+0xb4>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000d90:	4b1e      	ldr	r3, [pc, #120]	; (8000e0c <MX_ADC1_Init+0xb4>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d96:	4b1d      	ldr	r3, [pc, #116]	; (8000e0c <MX_ADC1_Init+0xb4>)
 8000d98:	4a1e      	ldr	r2, [pc, #120]	; (8000e14 <MX_ADC1_Init+0xbc>)
 8000d9a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000d9c:	4b1b      	ldr	r3, [pc, #108]	; (8000e0c <MX_ADC1_Init+0xb4>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8000da2:	4b1a      	ldr	r3, [pc, #104]	; (8000e0c <MX_ADC1_Init+0xb4>)
 8000da4:	2202      	movs	r2, #2
 8000da6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000da8:	4b18      	ldr	r3, [pc, #96]	; (8000e0c <MX_ADC1_Init+0xb4>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000db0:	4b16      	ldr	r3, [pc, #88]	; (8000e0c <MX_ADC1_Init+0xb4>)
 8000db2:	2201      	movs	r2, #1
 8000db4:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000db6:	4815      	ldr	r0, [pc, #84]	; (8000e0c <MX_ADC1_Init+0xb4>)
 8000db8:	f002 fd18 	bl	80037ec <HAL_ADC_Init>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d001      	beq.n	8000dc6 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000dc2:	f000 fa7f 	bl	80012c4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000dc6:	2304      	movs	r3, #4
 8000dc8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000dca:	2301      	movs	r3, #1
 8000dcc:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8000dce:	2307      	movs	r3, #7
 8000dd0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000dd2:	463b      	mov	r3, r7
 8000dd4:	4619      	mov	r1, r3
 8000dd6:	480d      	ldr	r0, [pc, #52]	; (8000e0c <MX_ADC1_Init+0xb4>)
 8000dd8:	f002 fe5a 	bl	8003a90 <HAL_ADC_ConfigChannel>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d001      	beq.n	8000de6 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000de2:	f000 fa6f 	bl	80012c4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000de6:	2305      	movs	r3, #5
 8000de8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000dea:	2302      	movs	r3, #2
 8000dec:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000dee:	463b      	mov	r3, r7
 8000df0:	4619      	mov	r1, r3
 8000df2:	4806      	ldr	r0, [pc, #24]	; (8000e0c <MX_ADC1_Init+0xb4>)
 8000df4:	f002 fe4c 	bl	8003a90 <HAL_ADC_ConfigChannel>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d001      	beq.n	8000e02 <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 8000dfe:	f000 fa61 	bl	80012c4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000e02:	bf00      	nop
 8000e04:	3710      	adds	r7, #16
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	bf00      	nop
 8000e0c:	20000094 	.word	0x20000094
 8000e10:	40012000 	.word	0x40012000
 8000e14:	0f000001 	.word	0x0f000001

08000e18 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b08e      	sub	sp, #56	; 0x38
 8000e1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e1e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e22:	2200      	movs	r2, #0
 8000e24:	601a      	str	r2, [r3, #0]
 8000e26:	605a      	str	r2, [r3, #4]
 8000e28:	609a      	str	r2, [r3, #8]
 8000e2a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e2c:	f107 0320 	add.w	r3, r7, #32
 8000e30:	2200      	movs	r2, #0
 8000e32:	601a      	str	r2, [r3, #0]
 8000e34:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e36:	1d3b      	adds	r3, r7, #4
 8000e38:	2200      	movs	r2, #0
 8000e3a:	601a      	str	r2, [r3, #0]
 8000e3c:	605a      	str	r2, [r3, #4]
 8000e3e:	609a      	str	r2, [r3, #8]
 8000e40:	60da      	str	r2, [r3, #12]
 8000e42:	611a      	str	r2, [r3, #16]
 8000e44:	615a      	str	r2, [r3, #20]
 8000e46:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000e48:	4b32      	ldr	r3, [pc, #200]	; (8000f14 <MX_TIM2_Init+0xfc>)
 8000e4a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e4e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 64;
 8000e50:	4b30      	ldr	r3, [pc, #192]	; (8000f14 <MX_TIM2_Init+0xfc>)
 8000e52:	2240      	movs	r2, #64	; 0x40
 8000e54:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e56:	4b2f      	ldr	r3, [pc, #188]	; (8000f14 <MX_TIM2_Init+0xfc>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2499;
 8000e5c:	4b2d      	ldr	r3, [pc, #180]	; (8000f14 <MX_TIM2_Init+0xfc>)
 8000e5e:	f640 12c3 	movw	r2, #2499	; 0x9c3
 8000e62:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e64:	4b2b      	ldr	r3, [pc, #172]	; (8000f14 <MX_TIM2_Init+0xfc>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e6a:	4b2a      	ldr	r3, [pc, #168]	; (8000f14 <MX_TIM2_Init+0xfc>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000e70:	4828      	ldr	r0, [pc, #160]	; (8000f14 <MX_TIM2_Init+0xfc>)
 8000e72:	f004 fbd3 	bl	800561c <HAL_TIM_Base_Init>
 8000e76:	4603      	mov	r3, r0
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d001      	beq.n	8000e80 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8000e7c:	f000 fa22 	bl	80012c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e80:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e84:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000e86:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e8a:	4619      	mov	r1, r3
 8000e8c:	4821      	ldr	r0, [pc, #132]	; (8000f14 <MX_TIM2_Init+0xfc>)
 8000e8e:	f004 ff4b 	bl	8005d28 <HAL_TIM_ConfigClockSource>
 8000e92:	4603      	mov	r3, r0
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d001      	beq.n	8000e9c <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8000e98:	f000 fa14 	bl	80012c4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000e9c:	481d      	ldr	r0, [pc, #116]	; (8000f14 <MX_TIM2_Init+0xfc>)
 8000e9e:	f004 fc6f 	bl	8005780 <HAL_TIM_PWM_Init>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d001      	beq.n	8000eac <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8000ea8:	f000 fa0c 	bl	80012c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000eac:	2300      	movs	r3, #0
 8000eae:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000eb4:	f107 0320 	add.w	r3, r7, #32
 8000eb8:	4619      	mov	r1, r3
 8000eba:	4816      	ldr	r0, [pc, #88]	; (8000f14 <MX_TIM2_Init+0xfc>)
 8000ebc:	f005 faf0 	bl	80064a0 <HAL_TIMEx_MasterConfigSynchronization>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d001      	beq.n	8000eca <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8000ec6:	f000 f9fd 	bl	80012c4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000eca:	2360      	movs	r3, #96	; 0x60
 8000ecc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000eda:	1d3b      	adds	r3, r7, #4
 8000edc:	2200      	movs	r2, #0
 8000ede:	4619      	mov	r1, r3
 8000ee0:	480c      	ldr	r0, [pc, #48]	; (8000f14 <MX_TIM2_Init+0xfc>)
 8000ee2:	f004 fe5f 	bl	8005ba4 <HAL_TIM_PWM_ConfigChannel>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d001      	beq.n	8000ef0 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8000eec:	f000 f9ea 	bl	80012c4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000ef0:	1d3b      	adds	r3, r7, #4
 8000ef2:	2204      	movs	r2, #4
 8000ef4:	4619      	mov	r1, r3
 8000ef6:	4807      	ldr	r0, [pc, #28]	; (8000f14 <MX_TIM2_Init+0xfc>)
 8000ef8:	f004 fe54 	bl	8005ba4 <HAL_TIM_PWM_ConfigChannel>
 8000efc:	4603      	mov	r3, r0
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d001      	beq.n	8000f06 <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 8000f02:	f000 f9df 	bl	80012c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000f06:	4803      	ldr	r0, [pc, #12]	; (8000f14 <MX_TIM2_Init+0xfc>)
 8000f08:	f002 f9c6 	bl	8003298 <HAL_TIM_MspPostInit>

}
 8000f0c:	bf00      	nop
 8000f0e:	3738      	adds	r7, #56	; 0x38
 8000f10:	46bd      	mov	sp, r7
 8000f12:	bd80      	pop	{r7, pc}
 8000f14:	2000013c 	.word	0x2000013c

08000f18 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000f1c:	4b11      	ldr	r3, [pc, #68]	; (8000f64 <MX_USART2_UART_Init+0x4c>)
 8000f1e:	4a12      	ldr	r2, [pc, #72]	; (8000f68 <MX_USART2_UART_Init+0x50>)
 8000f20:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 57600;
 8000f22:	4b10      	ldr	r3, [pc, #64]	; (8000f64 <MX_USART2_UART_Init+0x4c>)
 8000f24:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8000f28:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000f2a:	4b0e      	ldr	r3, [pc, #56]	; (8000f64 <MX_USART2_UART_Init+0x4c>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000f30:	4b0c      	ldr	r3, [pc, #48]	; (8000f64 <MX_USART2_UART_Init+0x4c>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000f36:	4b0b      	ldr	r3, [pc, #44]	; (8000f64 <MX_USART2_UART_Init+0x4c>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000f3c:	4b09      	ldr	r3, [pc, #36]	; (8000f64 <MX_USART2_UART_Init+0x4c>)
 8000f3e:	220c      	movs	r2, #12
 8000f40:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f42:	4b08      	ldr	r3, [pc, #32]	; (8000f64 <MX_USART2_UART_Init+0x4c>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f48:	4b06      	ldr	r3, [pc, #24]	; (8000f64 <MX_USART2_UART_Init+0x4c>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000f4e:	4805      	ldr	r0, [pc, #20]	; (8000f64 <MX_USART2_UART_Init+0x4c>)
 8000f50:	f005 fb28 	bl	80065a4 <HAL_UART_Init>
 8000f54:	4603      	mov	r3, r0
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d001      	beq.n	8000f5e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000f5a:	f000 f9b3 	bl	80012c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000f5e:	bf00      	nop
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	20000184 	.word	0x20000184
 8000f68:	40004400 	.word	0x40004400

08000f6c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b082      	sub	sp, #8
 8000f70:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000f72:	2300      	movs	r3, #0
 8000f74:	607b      	str	r3, [r7, #4]
 8000f76:	4b1b      	ldr	r3, [pc, #108]	; (8000fe4 <MX_DMA_Init+0x78>)
 8000f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f7a:	4a1a      	ldr	r2, [pc, #104]	; (8000fe4 <MX_DMA_Init+0x78>)
 8000f7c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000f80:	6313      	str	r3, [r2, #48]	; 0x30
 8000f82:	4b18      	ldr	r3, [pc, #96]	; (8000fe4 <MX_DMA_Init+0x78>)
 8000f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000f8a:	607b      	str	r3, [r7, #4]
 8000f8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000f8e:	2300      	movs	r3, #0
 8000f90:	603b      	str	r3, [r7, #0]
 8000f92:	4b14      	ldr	r3, [pc, #80]	; (8000fe4 <MX_DMA_Init+0x78>)
 8000f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f96:	4a13      	ldr	r2, [pc, #76]	; (8000fe4 <MX_DMA_Init+0x78>)
 8000f98:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000f9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f9e:	4b11      	ldr	r3, [pc, #68]	; (8000fe4 <MX_DMA_Init+0x78>)
 8000fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fa2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000fa6:	603b      	str	r3, [r7, #0]
 8000fa8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8000faa:	2200      	movs	r2, #0
 8000fac:	2105      	movs	r1, #5
 8000fae:	2010      	movs	r0, #16
 8000fb0:	f003 f8c6 	bl	8004140 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000fb4:	2010      	movs	r0, #16
 8000fb6:	f003 f8df 	bl	8004178 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 8000fba:	2200      	movs	r2, #0
 8000fbc:	2105      	movs	r1, #5
 8000fbe:	2011      	movs	r0, #17
 8000fc0:	f003 f8be 	bl	8004140 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000fc4:	2011      	movs	r0, #17
 8000fc6:	f003 f8d7 	bl	8004178 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8000fca:	2200      	movs	r2, #0
 8000fcc:	2105      	movs	r1, #5
 8000fce:	2038      	movs	r0, #56	; 0x38
 8000fd0:	f003 f8b6 	bl	8004140 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000fd4:	2038      	movs	r0, #56	; 0x38
 8000fd6:	f003 f8cf 	bl	8004178 <HAL_NVIC_EnableIRQ>

}
 8000fda:	bf00      	nop
 8000fdc:	3708      	adds	r7, #8
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	40023800 	.word	0x40023800

08000fe8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b088      	sub	sp, #32
 8000fec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fee:	f107 030c 	add.w	r3, r7, #12
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	601a      	str	r2, [r3, #0]
 8000ff6:	605a      	str	r2, [r3, #4]
 8000ff8:	609a      	str	r2, [r3, #8]
 8000ffa:	60da      	str	r2, [r3, #12]
 8000ffc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ffe:	2300      	movs	r3, #0
 8001000:	60bb      	str	r3, [r7, #8]
 8001002:	4b1f      	ldr	r3, [pc, #124]	; (8001080 <MX_GPIO_Init+0x98>)
 8001004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001006:	4a1e      	ldr	r2, [pc, #120]	; (8001080 <MX_GPIO_Init+0x98>)
 8001008:	f043 0304 	orr.w	r3, r3, #4
 800100c:	6313      	str	r3, [r2, #48]	; 0x30
 800100e:	4b1c      	ldr	r3, [pc, #112]	; (8001080 <MX_GPIO_Init+0x98>)
 8001010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001012:	f003 0304 	and.w	r3, r3, #4
 8001016:	60bb      	str	r3, [r7, #8]
 8001018:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800101a:	2300      	movs	r3, #0
 800101c:	607b      	str	r3, [r7, #4]
 800101e:	4b18      	ldr	r3, [pc, #96]	; (8001080 <MX_GPIO_Init+0x98>)
 8001020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001022:	4a17      	ldr	r2, [pc, #92]	; (8001080 <MX_GPIO_Init+0x98>)
 8001024:	f043 0301 	orr.w	r3, r3, #1
 8001028:	6313      	str	r3, [r2, #48]	; 0x30
 800102a:	4b15      	ldr	r3, [pc, #84]	; (8001080 <MX_GPIO_Init+0x98>)
 800102c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800102e:	f003 0301 	and.w	r3, r3, #1
 8001032:	607b      	str	r3, [r7, #4]
 8001034:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001036:	2200      	movs	r2, #0
 8001038:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800103c:	4811      	ldr	r0, [pc, #68]	; (8001084 <MX_GPIO_Init+0x9c>)
 800103e:	f003 fe2f 	bl	8004ca0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001042:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001046:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001048:	2301      	movs	r3, #1
 800104a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800104c:	2300      	movs	r3, #0
 800104e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001050:	2300      	movs	r3, #0
 8001052:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001054:	f107 030c 	add.w	r3, r7, #12
 8001058:	4619      	mov	r1, r3
 800105a:	480a      	ldr	r0, [pc, #40]	; (8001084 <MX_GPIO_Init+0x9c>)
 800105c:	f003 fc9c 	bl	8004998 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001060:	2340      	movs	r3, #64	; 0x40
 8001062:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001064:	2300      	movs	r3, #0
 8001066:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001068:	2300      	movs	r3, #0
 800106a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800106c:	f107 030c 	add.w	r3, r7, #12
 8001070:	4619      	mov	r1, r3
 8001072:	4805      	ldr	r0, [pc, #20]	; (8001088 <MX_GPIO_Init+0xa0>)
 8001074:	f003 fc90 	bl	8004998 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001078:	bf00      	nop
 800107a:	3720      	adds	r7, #32
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}
 8001080:	40023800 	.word	0x40023800
 8001084:	40020800 	.word	0x40020800
 8001088:	40020000 	.word	0x40020000

0800108c <pwm_to_ang>:
	else if (n == 2) {
		return TIM2->CCR2;
	}
	return 0;
}
float pwm_to_ang(int n){
 800108c:	b580      	push	{r7, lr}
 800108e:	b082      	sub	sp, #8
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
	if (n == 1){
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	2b01      	cmp	r3, #1
 8001098:	d11b      	bne.n	80010d2 <pwm_to_ang+0x46>
		return (180.0/240.0)*((float)TIM2->CCR1 - 60);
 800109a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800109e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80010a0:	ee07 3a90 	vmov	s15, r3
 80010a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80010a8:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8001120 <pwm_to_ang+0x94>
 80010ac:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80010b0:	ee17 0a90 	vmov	r0, s15
 80010b4:	f7ff fb2a 	bl	800070c <__aeabi_f2d>
 80010b8:	f04f 0200 	mov.w	r2, #0
 80010bc:	4b19      	ldr	r3, [pc, #100]	; (8001124 <pwm_to_ang+0x98>)
 80010be:	f7ff f897 	bl	80001f0 <__aeabi_dmul>
 80010c2:	4602      	mov	r2, r0
 80010c4:	460b      	mov	r3, r1
 80010c6:	4610      	mov	r0, r2
 80010c8:	4619      	mov	r1, r3
 80010ca:	f7ff fb77 	bl	80007bc <__aeabi_d2f>
 80010ce:	4603      	mov	r3, r0
 80010d0:	e01f      	b.n	8001112 <pwm_to_ang+0x86>
	}
	if(n == 2){
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	2b02      	cmp	r3, #2
 80010d6:	d11b      	bne.n	8001110 <pwm_to_ang+0x84>
		return (180.0/240.0)*((float)TIM2->CCR2 - 60);
 80010d8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80010dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80010de:	ee07 3a90 	vmov	s15, r3
 80010e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80010e6:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8001120 <pwm_to_ang+0x94>
 80010ea:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80010ee:	ee17 0a90 	vmov	r0, s15
 80010f2:	f7ff fb0b 	bl	800070c <__aeabi_f2d>
 80010f6:	f04f 0200 	mov.w	r2, #0
 80010fa:	4b0a      	ldr	r3, [pc, #40]	; (8001124 <pwm_to_ang+0x98>)
 80010fc:	f7ff f878 	bl	80001f0 <__aeabi_dmul>
 8001100:	4602      	mov	r2, r0
 8001102:	460b      	mov	r3, r1
 8001104:	4610      	mov	r0, r2
 8001106:	4619      	mov	r1, r3
 8001108:	f7ff fb58 	bl	80007bc <__aeabi_d2f>
 800110c:	4603      	mov	r3, r0
 800110e:	e000      	b.n	8001112 <pwm_to_ang+0x86>
	}
	return -1;
 8001110:	4b05      	ldr	r3, [pc, #20]	; (8001128 <pwm_to_ang+0x9c>)
}
 8001112:	ee07 3a90 	vmov	s15, r3
 8001116:	eeb0 0a67 	vmov.f32	s0, s15
 800111a:	3708      	adds	r7, #8
 800111c:	46bd      	mov	sp, r7
 800111e:	bd80      	pop	{r7, pc}
 8001120:	42700000 	.word	0x42700000
 8001124:	3fe80000 	.word	0x3fe80000
 8001128:	bf800000 	.word	0xbf800000

0800112c <move_servo_fw>:
	}
	else if(n == 2){
		TIM2->CCR2 = pwm;
	}
}
void move_servo_fw(int n){
 800112c:	b480      	push	{r7}
 800112e:	b083      	sub	sp, #12
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
	if (n == 1){
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	2b01      	cmp	r3, #1
 8001138:	d107      	bne.n	800114a <move_servo_fw+0x1e>
		TIM2->CCR1 += 1;
 800113a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800113e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001140:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001144:	3301      	adds	r3, #1
 8001146:	6353      	str	r3, [r2, #52]	; 0x34
	}
	else if(n == 2){
		TIM2->CCR2 += 1;
	}
}
 8001148:	e009      	b.n	800115e <move_servo_fw+0x32>
	else if(n == 2){
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	2b02      	cmp	r3, #2
 800114e:	d106      	bne.n	800115e <move_servo_fw+0x32>
		TIM2->CCR2 += 1;
 8001150:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001154:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001156:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800115a:	3301      	adds	r3, #1
 800115c:	6393      	str	r3, [r2, #56]	; 0x38
}
 800115e:	bf00      	nop
 8001160:	370c      	adds	r7, #12
 8001162:	46bd      	mov	sp, r7
 8001164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001168:	4770      	bx	lr

0800116a <move_servo_bw>:
void move_servo_bw(int n){
 800116a:	b480      	push	{r7}
 800116c:	b083      	sub	sp, #12
 800116e:	af00      	add	r7, sp, #0
 8001170:	6078      	str	r0, [r7, #4]
	if (n == 1){
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	2b01      	cmp	r3, #1
 8001176:	d107      	bne.n	8001188 <move_servo_bw+0x1e>
		TIM2->CCR1 -= 1;
 8001178:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800117c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800117e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001182:	3b01      	subs	r3, #1
 8001184:	6353      	str	r3, [r2, #52]	; 0x34
	}
	else if(n == 2){
		TIM2->CCR2 -= 1;
	}
}
 8001186:	e009      	b.n	800119c <move_servo_bw+0x32>
	else if(n == 2){
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	2b02      	cmp	r3, #2
 800118c:	d106      	bne.n	800119c <move_servo_bw+0x32>
		TIM2->CCR2 -= 1;
 800118e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001192:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001194:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001198:	3b01      	subs	r3, #1
 800119a:	6393      	str	r3, [r2, #56]	; 0x38
}
 800119c:	bf00      	nop
 800119e:	370c      	adds	r7, #12
 80011a0:	46bd      	mov	sp, r7
 80011a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a6:	4770      	bx	lr

080011a8 <StartTaskADC>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartTaskADC */
void StartTaskADC(void *argument)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b082      	sub	sp, #8
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_result, adc_channel_count);
 80011b0:	2302      	movs	r3, #2
 80011b2:	461a      	mov	r2, r3
 80011b4:	4903      	ldr	r1, [pc, #12]	; (80011c4 <StartTaskADC+0x1c>)
 80011b6:	4804      	ldr	r0, [pc, #16]	; (80011c8 <StartTaskADC+0x20>)
 80011b8:	f002 fb5c 	bl	8003874 <HAL_ADC_Start_DMA>
	  osDelay(100);
 80011bc:	2064      	movs	r0, #100	; 0x64
 80011be:	f006 fced 	bl	8007b9c <osDelay>
	  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_result, adc_channel_count);
 80011c2:	e7f5      	b.n	80011b0 <StartTaskADC+0x8>
 80011c4:	200002a4 	.word	0x200002a4
 80011c8:	20000094 	.word	0x20000094

080011cc <StartGripperOpenTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartGripperOpenTask */
void StartGripperOpenTask(void *argument)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b082      	sub	sp, #8
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartGripperOpenTask */
  /* Infinite loop */
	for(;;)
	{
		if (emergency_stop == 0 && gripper_instruction_flag != 0){
 80011d4:	4b21      	ldr	r3, [pc, #132]	; (800125c <StartGripperOpenTask+0x90>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d139      	bne.n	8001250 <StartGripperOpenTask+0x84>
 80011dc:	4b20      	ldr	r3, [pc, #128]	; (8001260 <StartGripperOpenTask+0x94>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d035      	beq.n	8001250 <StartGripperOpenTask+0x84>
			if (gripper_instruction_flag == 1){
 80011e4:	4b1e      	ldr	r3, [pc, #120]	; (8001260 <StartGripperOpenTask+0x94>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	2b01      	cmp	r3, #1
 80011ea:	d116      	bne.n	800121a <StartGripperOpenTask+0x4e>
				while(ang[0] < 160){
 80011ec:	e010      	b.n	8001210 <StartGripperOpenTask+0x44>
					move_servo_fw(1);
 80011ee:	2001      	movs	r0, #1
 80011f0:	f7ff ff9c 	bl	800112c <move_servo_fw>
					ang[0] = pwm_to_ang(1);
 80011f4:	2001      	movs	r0, #1
 80011f6:	f7ff ff49 	bl	800108c <pwm_to_ang>
 80011fa:	eef0 7a40 	vmov.f32	s15, s0
 80011fe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001202:	ee17 2a90 	vmov	r2, s15
 8001206:	4b17      	ldr	r3, [pc, #92]	; (8001264 <StartGripperOpenTask+0x98>)
 8001208:	601a      	str	r2, [r3, #0]
					osDelay(50);
 800120a:	2032      	movs	r0, #50	; 0x32
 800120c:	f006 fcc6 	bl	8007b9c <osDelay>
				while(ang[0] < 160){
 8001210:	4b14      	ldr	r3, [pc, #80]	; (8001264 <StartGripperOpenTask+0x98>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	2b9f      	cmp	r3, #159	; 0x9f
 8001216:	ddea      	ble.n	80011ee <StartGripperOpenTask+0x22>
			if (gripper_instruction_flag == 1){
 8001218:	e01e      	b.n	8001258 <StartGripperOpenTask+0x8c>
				}
			}
			else if(gripper_instruction_flag == 2){
 800121a:	4b11      	ldr	r3, [pc, #68]	; (8001260 <StartGripperOpenTask+0x94>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	2b02      	cmp	r3, #2
 8001220:	d11a      	bne.n	8001258 <StartGripperOpenTask+0x8c>
				while(ang[0] < 160){
 8001222:	e010      	b.n	8001246 <StartGripperOpenTask+0x7a>
					move_servo_bw(1);
 8001224:	2001      	movs	r0, #1
 8001226:	f7ff ffa0 	bl	800116a <move_servo_bw>
					ang[0] = pwm_to_ang(1);
 800122a:	2001      	movs	r0, #1
 800122c:	f7ff ff2e 	bl	800108c <pwm_to_ang>
 8001230:	eef0 7a40 	vmov.f32	s15, s0
 8001234:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001238:	ee17 2a90 	vmov	r2, s15
 800123c:	4b09      	ldr	r3, [pc, #36]	; (8001264 <StartGripperOpenTask+0x98>)
 800123e:	601a      	str	r2, [r3, #0]
					osDelay(50);
 8001240:	2032      	movs	r0, #50	; 0x32
 8001242:	f006 fcab 	bl	8007b9c <osDelay>
				while(ang[0] < 160){
 8001246:	4b07      	ldr	r3, [pc, #28]	; (8001264 <StartGripperOpenTask+0x98>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	2b9f      	cmp	r3, #159	; 0x9f
 800124c:	ddea      	ble.n	8001224 <StartGripperOpenTask+0x58>
			if (gripper_instruction_flag == 1){
 800124e:	e003      	b.n	8001258 <StartGripperOpenTask+0x8c>
				}
			}
		}
		else{
  		  osDelay(200);
 8001250:	20c8      	movs	r0, #200	; 0xc8
 8001252:	f006 fca3 	bl	8007b9c <osDelay>
 8001256:	e7bd      	b.n	80011d4 <StartGripperOpenTask+0x8>
			if (gripper_instruction_flag == 1){
 8001258:	bf00      	nop
		if (emergency_stop == 0 && gripper_instruction_flag != 0){
 800125a:	e7bb      	b.n	80011d4 <StartGripperOpenTask+0x8>
 800125c:	200002ac 	.word	0x200002ac
 8001260:	200002a8 	.word	0x200002a8
 8001264:	2000029c 	.word	0x2000029c

08001268 <StartGripperClose>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartGripperClose */
void StartGripperClose(void *argument)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b082      	sub	sp, #8
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartGripperClose */
  /* Infinite loop */
  for(;;)
  {
    osDelay(10000);
 8001270:	f242 7010 	movw	r0, #10000	; 0x2710
 8001274:	f006 fc92 	bl	8007b9c <osDelay>
 8001278:	e7fa      	b.n	8001270 <StartGripperClose+0x8>

0800127a <StartGripperGoToTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartGripperGoToTask */
void StartGripperGoToTask(void *argument)
{
 800127a:	b580      	push	{r7, lr}
 800127c:	b082      	sub	sp, #8
 800127e:	af00      	add	r7, sp, #0
 8001280:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartGripperGoToTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001282:	2001      	movs	r0, #1
 8001284:	f006 fc8a 	bl	8007b9c <osDelay>
 8001288:	e7fb      	b.n	8001282 <StartGripperGoToTask+0x8>

0800128a <StartTaskRosserial>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskRosserial */
void StartTaskRosserial(void *argument)
{
 800128a:	b580      	push	{r7, lr}
 800128c:	b082      	sub	sp, #8
 800128e:	af00      	add	r7, sp, #0
 8001290:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskRosserial */
  /* Infinite loop */
  for(;;)
  {
	  loop();
 8001292:	f001 f8af 	bl	80023f4 <loop>
    osDelay(1000);
 8001296:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800129a:	f006 fc7f 	bl	8007b9c <osDelay>
	  loop();
 800129e:	e7f8      	b.n	8001292 <StartTaskRosserial+0x8>

080012a0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b082      	sub	sp, #8
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5) {
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	4a04      	ldr	r2, [pc, #16]	; (80012c0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80012ae:	4293      	cmp	r3, r2
 80012b0:	d101      	bne.n	80012b6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80012b2:	f002 fa57 	bl	8003764 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80012b6:	bf00      	nop
 80012b8:	3708      	adds	r7, #8
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	40000c00 	.word	0x40000c00

080012c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012c4:	b480      	push	{r7}
 80012c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012c8:	b672      	cpsid	i
}
 80012ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012cc:	e7fe      	b.n	80012cc <Error_Handler+0x8>

080012ce <_ZN3ros4TimeC1Ev>:
class Time
{
public:
  uint32_t sec, nsec;

  Time() : sec(0), nsec(0) {}
 80012ce:	b480      	push	{r7}
 80012d0:	b083      	sub	sp, #12
 80012d2:	af00      	add	r7, sp, #0
 80012d4:	6078      	str	r0, [r7, #4]
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	2200      	movs	r2, #0
 80012da:	601a      	str	r2, [r3, #0]
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	2200      	movs	r2, #0
 80012e0:	605a      	str	r2, [r3, #4]
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	4618      	mov	r0, r3
 80012e6:	370c      	adds	r7, #12
 80012e8:	46bd      	mov	sp, r7
 80012ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ee:	4770      	bx	lr

080012f0 <_ZN3ros3MsgC1Ev>:

namespace ros
{

/* Base Message Type */
class Msg
 80012f0:	b480      	push	{r7}
 80012f2:	b083      	sub	sp, #12
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
 80012f8:	4a04      	ldr	r2, [pc, #16]	; (800130c <_ZN3ros3MsgC1Ev+0x1c>)
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	601a      	str	r2, [r3, #0]
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	4618      	mov	r0, r3
 8001302:	370c      	adds	r7, #12
 8001304:	46bd      	mov	sp, r7
 8001306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130a:	4770      	bx	lr
 800130c:	0800b088 	.word	0x0800b088

08001310 <_ZN8std_msgs4TimeC1Ev>:
  {
    public:
      typedef ros::Time _data_type;
      _data_type data;

    Time():
 8001310:	b580      	push	{r7, lr}
 8001312:	b082      	sub	sp, #8
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
      data()
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	4618      	mov	r0, r3
 800131c:	f7ff ffe8 	bl	80012f0 <_ZN3ros3MsgC1Ev>
 8001320:	4a06      	ldr	r2, [pc, #24]	; (800133c <_ZN8std_msgs4TimeC1Ev+0x2c>)
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	601a      	str	r2, [r3, #0]
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	3304      	adds	r3, #4
 800132a:	4618      	mov	r0, r3
 800132c:	f7ff ffcf 	bl	80012ce <_ZN3ros4TimeC1Ev>
    {
    }
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	4618      	mov	r0, r3
 8001334:	3708      	adds	r7, #8
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}
 800133a:	bf00      	nop
 800133c:	0800b070 	.word	0x0800b070

08001340 <_ZNK8std_msgs4Time9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8001340:	b480      	push	{r7}
 8001342:	b085      	sub	sp, #20
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
 8001348:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800134a:	2300      	movs	r3, #0
 800134c:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.sec >> (8 * 0)) & 0xFF;
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	6859      	ldr	r1, [r3, #4]
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	683a      	ldr	r2, [r7, #0]
 8001356:	4413      	add	r3, r2
 8001358:	b2ca      	uxtb	r2, r1
 800135a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.sec >> (8 * 1)) & 0xFF;
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	685b      	ldr	r3, [r3, #4]
 8001360:	0a19      	lsrs	r1, r3, #8
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	3301      	adds	r3, #1
 8001366:	683a      	ldr	r2, [r7, #0]
 8001368:	4413      	add	r3, r2
 800136a:	b2ca      	uxtb	r2, r1
 800136c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.sec >> (8 * 2)) & 0xFF;
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	685b      	ldr	r3, [r3, #4]
 8001372:	0c19      	lsrs	r1, r3, #16
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	3302      	adds	r3, #2
 8001378:	683a      	ldr	r2, [r7, #0]
 800137a:	4413      	add	r3, r2
 800137c:	b2ca      	uxtb	r2, r1
 800137e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	685b      	ldr	r3, [r3, #4]
 8001384:	0e19      	lsrs	r1, r3, #24
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	3303      	adds	r3, #3
 800138a:	683a      	ldr	r2, [r7, #0]
 800138c:	4413      	add	r3, r2
 800138e:	b2ca      	uxtb	r2, r1
 8001390:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.sec);
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	3304      	adds	r3, #4
 8001396:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	6899      	ldr	r1, [r3, #8]
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	683a      	ldr	r2, [r7, #0]
 80013a0:	4413      	add	r3, r2
 80013a2:	b2ca      	uxtb	r2, r1
 80013a4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	689b      	ldr	r3, [r3, #8]
 80013aa:	0a19      	lsrs	r1, r3, #8
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	3301      	adds	r3, #1
 80013b0:	683a      	ldr	r2, [r7, #0]
 80013b2:	4413      	add	r3, r2
 80013b4:	b2ca      	uxtb	r2, r1
 80013b6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	689b      	ldr	r3, [r3, #8]
 80013bc:	0c19      	lsrs	r1, r3, #16
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	3302      	adds	r3, #2
 80013c2:	683a      	ldr	r2, [r7, #0]
 80013c4:	4413      	add	r3, r2
 80013c6:	b2ca      	uxtb	r2, r1
 80013c8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	689b      	ldr	r3, [r3, #8]
 80013ce:	0e19      	lsrs	r1, r3, #24
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	3303      	adds	r3, #3
 80013d4:	683a      	ldr	r2, [r7, #0]
 80013d6:	4413      	add	r3, r2
 80013d8:	b2ca      	uxtb	r2, r1
 80013da:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.nsec);
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	3304      	adds	r3, #4
 80013e0:	60fb      	str	r3, [r7, #12]
      return offset;
 80013e2:	68fb      	ldr	r3, [r7, #12]
    }
 80013e4:	4618      	mov	r0, r3
 80013e6:	3714      	adds	r7, #20
 80013e8:	46bd      	mov	sp, r7
 80013ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ee:	4770      	bx	lr

080013f0 <_ZN8std_msgs4Time11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 80013f0:	b480      	push	{r7}
 80013f2:	b085      	sub	sp, #20
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
 80013f8:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80013fa:	2300      	movs	r3, #0
 80013fc:	60fb      	str	r3, [r7, #12]
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	683a      	ldr	r2, [r7, #0]
 8001402:	4413      	add	r3, r2
 8001404:	781b      	ldrb	r3, [r3, #0]
 8001406:	461a      	mov	r2, r3
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	685a      	ldr	r2, [r3, #4]
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	3301      	adds	r3, #1
 8001414:	6839      	ldr	r1, [r7, #0]
 8001416:	440b      	add	r3, r1
 8001418:	781b      	ldrb	r3, [r3, #0]
 800141a:	021b      	lsls	r3, r3, #8
 800141c:	431a      	orrs	r2, r3
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	685a      	ldr	r2, [r3, #4]
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	3302      	adds	r3, #2
 800142a:	6839      	ldr	r1, [r7, #0]
 800142c:	440b      	add	r3, r1
 800142e:	781b      	ldrb	r3, [r3, #0]
 8001430:	041b      	lsls	r3, r3, #16
 8001432:	431a      	orrs	r2, r3
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	685a      	ldr	r2, [r3, #4]
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	3303      	adds	r3, #3
 8001440:	6839      	ldr	r1, [r7, #0]
 8001442:	440b      	add	r3, r1
 8001444:	781b      	ldrb	r3, [r3, #0]
 8001446:	061b      	lsls	r3, r3, #24
 8001448:	431a      	orrs	r2, r3
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data.sec);
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	3304      	adds	r3, #4
 8001452:	60fb      	str	r3, [r7, #12]
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	683a      	ldr	r2, [r7, #0]
 8001458:	4413      	add	r3, r2
 800145a:	781b      	ldrb	r3, [r3, #0]
 800145c:	461a      	mov	r2, r3
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	689a      	ldr	r2, [r3, #8]
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	3301      	adds	r3, #1
 800146a:	6839      	ldr	r1, [r7, #0]
 800146c:	440b      	add	r3, r1
 800146e:	781b      	ldrb	r3, [r3, #0]
 8001470:	021b      	lsls	r3, r3, #8
 8001472:	431a      	orrs	r2, r3
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	689a      	ldr	r2, [r3, #8]
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	3302      	adds	r3, #2
 8001480:	6839      	ldr	r1, [r7, #0]
 8001482:	440b      	add	r3, r1
 8001484:	781b      	ldrb	r3, [r3, #0]
 8001486:	041b      	lsls	r3, r3, #16
 8001488:	431a      	orrs	r2, r3
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	689a      	ldr	r2, [r3, #8]
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	3303      	adds	r3, #3
 8001496:	6839      	ldr	r1, [r7, #0]
 8001498:	440b      	add	r3, r1
 800149a:	781b      	ldrb	r3, [r3, #0]
 800149c:	061b      	lsls	r3, r3, #24
 800149e:	431a      	orrs	r2, r3
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->data.nsec);
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	3304      	adds	r3, #4
 80014a8:	60fb      	str	r3, [r7, #12]
     return offset;
 80014aa:	68fb      	ldr	r3, [r7, #12]
    }
 80014ac:	4618      	mov	r0, r3
 80014ae:	3714      	adds	r7, #20
 80014b0:	46bd      	mov	sp, r7
 80014b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b6:	4770      	bx	lr

080014b8 <_ZN8std_msgs4Time7getTypeEv>:

    const char * getType(){ return "std_msgs/Time"; };
 80014b8:	b480      	push	{r7}
 80014ba:	b083      	sub	sp, #12
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
 80014c0:	4b03      	ldr	r3, [pc, #12]	; (80014d0 <_ZN8std_msgs4Time7getTypeEv+0x18>)
 80014c2:	4618      	mov	r0, r3
 80014c4:	370c      	adds	r7, #12
 80014c6:	46bd      	mov	sp, r7
 80014c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014cc:	4770      	bx	lr
 80014ce:	bf00      	nop
 80014d0:	0800ad58 	.word	0x0800ad58

080014d4 <_ZN8std_msgs4Time6getMD5Ev>:
    const char * getMD5(){ return "cd7166c74c552c311fbcc2fe5a7bc289"; };
 80014d4:	b480      	push	{r7}
 80014d6:	b083      	sub	sp, #12
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
 80014dc:	4b03      	ldr	r3, [pc, #12]	; (80014ec <_ZN8std_msgs4Time6getMD5Ev+0x18>)
 80014de:	4618      	mov	r0, r3
 80014e0:	370c      	adds	r7, #12
 80014e2:	46bd      	mov	sp, r7
 80014e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e8:	4770      	bx	lr
 80014ea:	bf00      	nop
 80014ec:	0800ad68 	.word	0x0800ad68

080014f0 <_ZN14rosserial_msgs9TopicInfoC1Ev>:
      enum { ID_PARAMETER_REQUEST = 6 };
      enum { ID_LOG = 7 };
      enum { ID_TIME = 10 };
      enum { ID_TX_STOP = 11 };

    TopicInfo():
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b082      	sub	sp, #8
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
      topic_id(0),
      topic_name(""),
      message_type(""),
      md5sum(""),
      buffer_size(0)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	4618      	mov	r0, r3
 80014fc:	f7ff fef8 	bl	80012f0 <_ZN3ros3MsgC1Ev>
 8001500:	4a0b      	ldr	r2, [pc, #44]	; (8001530 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x40>)
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	601a      	str	r2, [r3, #0]
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	2200      	movs	r2, #0
 800150a:	809a      	strh	r2, [r3, #4]
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	4a09      	ldr	r2, [pc, #36]	; (8001534 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8001510:	609a      	str	r2, [r3, #8]
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	4a07      	ldr	r2, [pc, #28]	; (8001534 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8001516:	60da      	str	r2, [r3, #12]
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	4a06      	ldr	r2, [pc, #24]	; (8001534 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 800151c:	611a      	str	r2, [r3, #16]
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	2200      	movs	r2, #0
 8001522:	615a      	str	r2, [r3, #20]
    {
    }
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	4618      	mov	r0, r3
 8001528:	3708      	adds	r7, #8
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	0800b058 	.word	0x0800b058
 8001534:	0800ad8c 	.word	0x0800ad8c

08001538 <_ZNK14rosserial_msgs9TopicInfo9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8001538:	b580      	push	{r7, lr}
 800153a:	b088      	sub	sp, #32
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
 8001540:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001542:	2300      	movs	r3, #0
 8001544:	61fb      	str	r3, [r7, #28]
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	8899      	ldrh	r1, [r3, #4]
 800154a:	69fb      	ldr	r3, [r7, #28]
 800154c:	683a      	ldr	r2, [r7, #0]
 800154e:	4413      	add	r3, r2
 8001550:	b2ca      	uxtb	r2, r1
 8001552:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	889b      	ldrh	r3, [r3, #4]
 8001558:	0a1b      	lsrs	r3, r3, #8
 800155a:	b299      	uxth	r1, r3
 800155c:	69fb      	ldr	r3, [r7, #28]
 800155e:	3301      	adds	r3, #1
 8001560:	683a      	ldr	r2, [r7, #0]
 8001562:	4413      	add	r3, r2
 8001564:	b2ca      	uxtb	r2, r1
 8001566:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->topic_id);
 8001568:	69fb      	ldr	r3, [r7, #28]
 800156a:	3302      	adds	r3, #2
 800156c:	61fb      	str	r3, [r7, #28]
      uint32_t length_topic_name = strlen(this->topic_name);
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	689b      	ldr	r3, [r3, #8]
 8001572:	4618      	mov	r0, r3
 8001574:	f7fe fe34 	bl	80001e0 <strlen>
 8001578:	61b8      	str	r0, [r7, #24]
      varToArr(outbuffer + offset, length_topic_name);
 800157a:	69fb      	ldr	r3, [r7, #28]
 800157c:	683a      	ldr	r2, [r7, #0]
 800157e:	4413      	add	r3, r2
 8001580:	69b9      	ldr	r1, [r7, #24]
 8001582:	4618      	mov	r0, r3
 8001584:	f000 ff6e 	bl	8002464 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001588:	69fb      	ldr	r3, [r7, #28]
 800158a:	3304      	adds	r3, #4
 800158c:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 800158e:	69fb      	ldr	r3, [r7, #28]
 8001590:	683a      	ldr	r2, [r7, #0]
 8001592:	18d0      	adds	r0, r2, r3
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	689b      	ldr	r3, [r3, #8]
 8001598:	69ba      	ldr	r2, [r7, #24]
 800159a:	4619      	mov	r1, r3
 800159c:	f009 f992 	bl	800a8c4 <memcpy>
      offset += length_topic_name;
 80015a0:	69fa      	ldr	r2, [r7, #28]
 80015a2:	69bb      	ldr	r3, [r7, #24]
 80015a4:	4413      	add	r3, r2
 80015a6:	61fb      	str	r3, [r7, #28]
      uint32_t length_message_type = strlen(this->message_type);
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	68db      	ldr	r3, [r3, #12]
 80015ac:	4618      	mov	r0, r3
 80015ae:	f7fe fe17 	bl	80001e0 <strlen>
 80015b2:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_message_type);
 80015b4:	69fb      	ldr	r3, [r7, #28]
 80015b6:	683a      	ldr	r2, [r7, #0]
 80015b8:	4413      	add	r3, r2
 80015ba:	6979      	ldr	r1, [r7, #20]
 80015bc:	4618      	mov	r0, r3
 80015be:	f000 ff51 	bl	8002464 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80015c2:	69fb      	ldr	r3, [r7, #28]
 80015c4:	3304      	adds	r3, #4
 80015c6:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 80015c8:	69fb      	ldr	r3, [r7, #28]
 80015ca:	683a      	ldr	r2, [r7, #0]
 80015cc:	18d0      	adds	r0, r2, r3
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	68db      	ldr	r3, [r3, #12]
 80015d2:	697a      	ldr	r2, [r7, #20]
 80015d4:	4619      	mov	r1, r3
 80015d6:	f009 f975 	bl	800a8c4 <memcpy>
      offset += length_message_type;
 80015da:	69fa      	ldr	r2, [r7, #28]
 80015dc:	697b      	ldr	r3, [r7, #20]
 80015de:	4413      	add	r3, r2
 80015e0:	61fb      	str	r3, [r7, #28]
      uint32_t length_md5sum = strlen(this->md5sum);
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	691b      	ldr	r3, [r3, #16]
 80015e6:	4618      	mov	r0, r3
 80015e8:	f7fe fdfa 	bl	80001e0 <strlen>
 80015ec:	6138      	str	r0, [r7, #16]
      varToArr(outbuffer + offset, length_md5sum);
 80015ee:	69fb      	ldr	r3, [r7, #28]
 80015f0:	683a      	ldr	r2, [r7, #0]
 80015f2:	4413      	add	r3, r2
 80015f4:	6939      	ldr	r1, [r7, #16]
 80015f6:	4618      	mov	r0, r3
 80015f8:	f000 ff34 	bl	8002464 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80015fc:	69fb      	ldr	r3, [r7, #28]
 80015fe:	3304      	adds	r3, #4
 8001600:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 8001602:	69fb      	ldr	r3, [r7, #28]
 8001604:	683a      	ldr	r2, [r7, #0]
 8001606:	18d0      	adds	r0, r2, r3
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	691b      	ldr	r3, [r3, #16]
 800160c:	693a      	ldr	r2, [r7, #16]
 800160e:	4619      	mov	r1, r3
 8001610:	f009 f958 	bl	800a8c4 <memcpy>
      offset += length_md5sum;
 8001614:	69fa      	ldr	r2, [r7, #28]
 8001616:	693b      	ldr	r3, [r7, #16]
 8001618:	4413      	add	r3, r2
 800161a:	61fb      	str	r3, [r7, #28]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	695b      	ldr	r3, [r3, #20]
 8001620:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 8001622:	68f9      	ldr	r1, [r7, #12]
 8001624:	69fb      	ldr	r3, [r7, #28]
 8001626:	683a      	ldr	r2, [r7, #0]
 8001628:	4413      	add	r3, r2
 800162a:	b2ca      	uxtb	r2, r1
 800162c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	0a19      	lsrs	r1, r3, #8
 8001632:	69fb      	ldr	r3, [r7, #28]
 8001634:	3301      	adds	r3, #1
 8001636:	683a      	ldr	r2, [r7, #0]
 8001638:	4413      	add	r3, r2
 800163a:	b2ca      	uxtb	r2, r1
 800163c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	0c19      	lsrs	r1, r3, #16
 8001642:	69fb      	ldr	r3, [r7, #28]
 8001644:	3302      	adds	r3, #2
 8001646:	683a      	ldr	r2, [r7, #0]
 8001648:	4413      	add	r3, r2
 800164a:	b2ca      	uxtb	r2, r1
 800164c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	0e19      	lsrs	r1, r3, #24
 8001652:	69fb      	ldr	r3, [r7, #28]
 8001654:	3303      	adds	r3, #3
 8001656:	683a      	ldr	r2, [r7, #0]
 8001658:	4413      	add	r3, r2
 800165a:	b2ca      	uxtb	r2, r1
 800165c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->buffer_size);
 800165e:	69fb      	ldr	r3, [r7, #28]
 8001660:	3304      	adds	r3, #4
 8001662:	61fb      	str	r3, [r7, #28]
      return offset;
 8001664:	69fb      	ldr	r3, [r7, #28]
    }
 8001666:	4618      	mov	r0, r3
 8001668:	3720      	adds	r7, #32
 800166a:	46bd      	mov	sp, r7
 800166c:	bd80      	pop	{r7, pc}

0800166e <_ZN14rosserial_msgs9TopicInfo11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 800166e:	b580      	push	{r7, lr}
 8001670:	b08a      	sub	sp, #40	; 0x28
 8001672:	af00      	add	r7, sp, #0
 8001674:	6078      	str	r0, [r7, #4]
 8001676:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001678:	2300      	movs	r3, #0
 800167a:	61bb      	str	r3, [r7, #24]
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 800167c:	69bb      	ldr	r3, [r7, #24]
 800167e:	683a      	ldr	r2, [r7, #0]
 8001680:	4413      	add	r3, r2
 8001682:	781b      	ldrb	r3, [r3, #0]
 8001684:	b29a      	uxth	r2, r3
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	809a      	strh	r2, [r3, #4]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	889b      	ldrh	r3, [r3, #4]
 800168e:	b21a      	sxth	r2, r3
 8001690:	69bb      	ldr	r3, [r7, #24]
 8001692:	3301      	adds	r3, #1
 8001694:	6839      	ldr	r1, [r7, #0]
 8001696:	440b      	add	r3, r1
 8001698:	781b      	ldrb	r3, [r3, #0]
 800169a:	021b      	lsls	r3, r3, #8
 800169c:	b21b      	sxth	r3, r3
 800169e:	4313      	orrs	r3, r2
 80016a0:	b21b      	sxth	r3, r3
 80016a2:	b29a      	uxth	r2, r3
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->topic_id);
 80016a8:	69bb      	ldr	r3, [r7, #24]
 80016aa:	3302      	adds	r3, #2
 80016ac:	61bb      	str	r3, [r7, #24]
      uint32_t length_topic_name;
      arrToVar(length_topic_name, (inbuffer + offset));
 80016ae:	69bb      	ldr	r3, [r7, #24]
 80016b0:	683a      	ldr	r2, [r7, #0]
 80016b2:	441a      	add	r2, r3
 80016b4:	f107 0314 	add.w	r3, r7, #20
 80016b8:	4611      	mov	r1, r2
 80016ba:	4618      	mov	r0, r3
 80016bc:	f000 fef0 	bl	80024a0 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80016c0:	69bb      	ldr	r3, [r7, #24]
 80016c2:	3304      	adds	r3, #4
 80016c4:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 80016c6:	69bb      	ldr	r3, [r7, #24]
 80016c8:	627b      	str	r3, [r7, #36]	; 0x24
 80016ca:	69ba      	ldr	r2, [r7, #24]
 80016cc:	697b      	ldr	r3, [r7, #20]
 80016ce:	4413      	add	r3, r2
 80016d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80016d2:	429a      	cmp	r2, r3
 80016d4:	d20c      	bcs.n	80016f0 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x82>
          inbuffer[k-1]=inbuffer[k];
 80016d6:	683a      	ldr	r2, [r7, #0]
 80016d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016da:	441a      	add	r2, r3
 80016dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016de:	3b01      	subs	r3, #1
 80016e0:	6839      	ldr	r1, [r7, #0]
 80016e2:	440b      	add	r3, r1
 80016e4:	7812      	ldrb	r2, [r2, #0]
 80016e6:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 80016e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ea:	3301      	adds	r3, #1
 80016ec:	627b      	str	r3, [r7, #36]	; 0x24
 80016ee:	e7ec      	b.n	80016ca <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x5c>
      }
      inbuffer[offset+length_topic_name-1]=0;
 80016f0:	69ba      	ldr	r2, [r7, #24]
 80016f2:	697b      	ldr	r3, [r7, #20]
 80016f4:	4413      	add	r3, r2
 80016f6:	3b01      	subs	r3, #1
 80016f8:	683a      	ldr	r2, [r7, #0]
 80016fa:	4413      	add	r3, r2
 80016fc:	2200      	movs	r2, #0
 80016fe:	701a      	strb	r2, [r3, #0]
      this->topic_name = (char *)(inbuffer + offset-1);
 8001700:	69bb      	ldr	r3, [r7, #24]
 8001702:	3b01      	subs	r3, #1
 8001704:	683a      	ldr	r2, [r7, #0]
 8001706:	441a      	add	r2, r3
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	609a      	str	r2, [r3, #8]
      offset += length_topic_name;
 800170c:	69ba      	ldr	r2, [r7, #24]
 800170e:	697b      	ldr	r3, [r7, #20]
 8001710:	4413      	add	r3, r2
 8001712:	61bb      	str	r3, [r7, #24]
      uint32_t length_message_type;
      arrToVar(length_message_type, (inbuffer + offset));
 8001714:	69bb      	ldr	r3, [r7, #24]
 8001716:	683a      	ldr	r2, [r7, #0]
 8001718:	441a      	add	r2, r3
 800171a:	f107 0310 	add.w	r3, r7, #16
 800171e:	4611      	mov	r1, r2
 8001720:	4618      	mov	r0, r3
 8001722:	f000 febd 	bl	80024a0 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001726:	69bb      	ldr	r3, [r7, #24]
 8001728:	3304      	adds	r3, #4
 800172a:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 800172c:	69bb      	ldr	r3, [r7, #24]
 800172e:	623b      	str	r3, [r7, #32]
 8001730:	69ba      	ldr	r2, [r7, #24]
 8001732:	693b      	ldr	r3, [r7, #16]
 8001734:	4413      	add	r3, r2
 8001736:	6a3a      	ldr	r2, [r7, #32]
 8001738:	429a      	cmp	r2, r3
 800173a:	d20c      	bcs.n	8001756 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xe8>
          inbuffer[k-1]=inbuffer[k];
 800173c:	683a      	ldr	r2, [r7, #0]
 800173e:	6a3b      	ldr	r3, [r7, #32]
 8001740:	441a      	add	r2, r3
 8001742:	6a3b      	ldr	r3, [r7, #32]
 8001744:	3b01      	subs	r3, #1
 8001746:	6839      	ldr	r1, [r7, #0]
 8001748:	440b      	add	r3, r1
 800174a:	7812      	ldrb	r2, [r2, #0]
 800174c:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 800174e:	6a3b      	ldr	r3, [r7, #32]
 8001750:	3301      	adds	r3, #1
 8001752:	623b      	str	r3, [r7, #32]
 8001754:	e7ec      	b.n	8001730 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xc2>
      }
      inbuffer[offset+length_message_type-1]=0;
 8001756:	69ba      	ldr	r2, [r7, #24]
 8001758:	693b      	ldr	r3, [r7, #16]
 800175a:	4413      	add	r3, r2
 800175c:	3b01      	subs	r3, #1
 800175e:	683a      	ldr	r2, [r7, #0]
 8001760:	4413      	add	r3, r2
 8001762:	2200      	movs	r2, #0
 8001764:	701a      	strb	r2, [r3, #0]
      this->message_type = (char *)(inbuffer + offset-1);
 8001766:	69bb      	ldr	r3, [r7, #24]
 8001768:	3b01      	subs	r3, #1
 800176a:	683a      	ldr	r2, [r7, #0]
 800176c:	441a      	add	r2, r3
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	60da      	str	r2, [r3, #12]
      offset += length_message_type;
 8001772:	69ba      	ldr	r2, [r7, #24]
 8001774:	693b      	ldr	r3, [r7, #16]
 8001776:	4413      	add	r3, r2
 8001778:	61bb      	str	r3, [r7, #24]
      uint32_t length_md5sum;
      arrToVar(length_md5sum, (inbuffer + offset));
 800177a:	69bb      	ldr	r3, [r7, #24]
 800177c:	683a      	ldr	r2, [r7, #0]
 800177e:	441a      	add	r2, r3
 8001780:	f107 030c 	add.w	r3, r7, #12
 8001784:	4611      	mov	r1, r2
 8001786:	4618      	mov	r0, r3
 8001788:	f000 fe8a 	bl	80024a0 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 800178c:	69bb      	ldr	r3, [r7, #24]
 800178e:	3304      	adds	r3, #4
 8001790:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8001792:	69bb      	ldr	r3, [r7, #24]
 8001794:	61fb      	str	r3, [r7, #28]
 8001796:	69ba      	ldr	r2, [r7, #24]
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	4413      	add	r3, r2
 800179c:	69fa      	ldr	r2, [r7, #28]
 800179e:	429a      	cmp	r2, r3
 80017a0:	d20c      	bcs.n	80017bc <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x14e>
          inbuffer[k-1]=inbuffer[k];
 80017a2:	683a      	ldr	r2, [r7, #0]
 80017a4:	69fb      	ldr	r3, [r7, #28]
 80017a6:	441a      	add	r2, r3
 80017a8:	69fb      	ldr	r3, [r7, #28]
 80017aa:	3b01      	subs	r3, #1
 80017ac:	6839      	ldr	r1, [r7, #0]
 80017ae:	440b      	add	r3, r1
 80017b0:	7812      	ldrb	r2, [r2, #0]
 80017b2:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 80017b4:	69fb      	ldr	r3, [r7, #28]
 80017b6:	3301      	adds	r3, #1
 80017b8:	61fb      	str	r3, [r7, #28]
 80017ba:	e7ec      	b.n	8001796 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x128>
      }
      inbuffer[offset+length_md5sum-1]=0;
 80017bc:	69ba      	ldr	r2, [r7, #24]
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	4413      	add	r3, r2
 80017c2:	3b01      	subs	r3, #1
 80017c4:	683a      	ldr	r2, [r7, #0]
 80017c6:	4413      	add	r3, r2
 80017c8:	2200      	movs	r2, #0
 80017ca:	701a      	strb	r2, [r3, #0]
      this->md5sum = (char *)(inbuffer + offset-1);
 80017cc:	69bb      	ldr	r3, [r7, #24]
 80017ce:	3b01      	subs	r3, #1
 80017d0:	683a      	ldr	r2, [r7, #0]
 80017d2:	441a      	add	r2, r3
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	611a      	str	r2, [r3, #16]
      offset += length_md5sum;
 80017d8:	69ba      	ldr	r2, [r7, #24]
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	4413      	add	r3, r2
 80017de:	61bb      	str	r3, [r7, #24]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.base = 0;
 80017e0:	2300      	movs	r3, #0
 80017e2:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80017e4:	68bb      	ldr	r3, [r7, #8]
 80017e6:	69ba      	ldr	r2, [r7, #24]
 80017e8:	6839      	ldr	r1, [r7, #0]
 80017ea:	440a      	add	r2, r1
 80017ec:	7812      	ldrb	r2, [r2, #0]
 80017ee:	4313      	orrs	r3, r2
 80017f0:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80017f2:	68ba      	ldr	r2, [r7, #8]
 80017f4:	69bb      	ldr	r3, [r7, #24]
 80017f6:	3301      	adds	r3, #1
 80017f8:	6839      	ldr	r1, [r7, #0]
 80017fa:	440b      	add	r3, r1
 80017fc:	781b      	ldrb	r3, [r3, #0]
 80017fe:	021b      	lsls	r3, r3, #8
 8001800:	4313      	orrs	r3, r2
 8001802:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001804:	68ba      	ldr	r2, [r7, #8]
 8001806:	69bb      	ldr	r3, [r7, #24]
 8001808:	3302      	adds	r3, #2
 800180a:	6839      	ldr	r1, [r7, #0]
 800180c:	440b      	add	r3, r1
 800180e:	781b      	ldrb	r3, [r3, #0]
 8001810:	041b      	lsls	r3, r3, #16
 8001812:	4313      	orrs	r3, r2
 8001814:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001816:	68ba      	ldr	r2, [r7, #8]
 8001818:	69bb      	ldr	r3, [r7, #24]
 800181a:	3303      	adds	r3, #3
 800181c:	6839      	ldr	r1, [r7, #0]
 800181e:	440b      	add	r3, r1
 8001820:	781b      	ldrb	r3, [r3, #0]
 8001822:	061b      	lsls	r3, r3, #24
 8001824:	4313      	orrs	r3, r2
 8001826:	60bb      	str	r3, [r7, #8]
      this->buffer_size = u_buffer_size.real;
 8001828:	68ba      	ldr	r2, [r7, #8]
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->buffer_size);
 800182e:	69bb      	ldr	r3, [r7, #24]
 8001830:	3304      	adds	r3, #4
 8001832:	61bb      	str	r3, [r7, #24]
     return offset;
 8001834:	69bb      	ldr	r3, [r7, #24]
    }
 8001836:	4618      	mov	r0, r3
 8001838:	3728      	adds	r7, #40	; 0x28
 800183a:	46bd      	mov	sp, r7
 800183c:	bd80      	pop	{r7, pc}
	...

08001840 <_ZN14rosserial_msgs9TopicInfo7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/TopicInfo"; };
 8001840:	b480      	push	{r7}
 8001842:	b083      	sub	sp, #12
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
 8001848:	4b03      	ldr	r3, [pc, #12]	; (8001858 <_ZN14rosserial_msgs9TopicInfo7getTypeEv+0x18>)
 800184a:	4618      	mov	r0, r3
 800184c:	370c      	adds	r7, #12
 800184e:	46bd      	mov	sp, r7
 8001850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001854:	4770      	bx	lr
 8001856:	bf00      	nop
 8001858:	0800ad90 	.word	0x0800ad90

0800185c <_ZN14rosserial_msgs9TopicInfo6getMD5Ev>:
    const char * getMD5(){ return "0ad51f88fc44892f8c10684077646005"; };
 800185c:	b480      	push	{r7}
 800185e:	b083      	sub	sp, #12
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
 8001864:	4b03      	ldr	r3, [pc, #12]	; (8001874 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev+0x18>)
 8001866:	4618      	mov	r0, r3
 8001868:	370c      	adds	r7, #12
 800186a:	46bd      	mov	sp, r7
 800186c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001870:	4770      	bx	lr
 8001872:	bf00      	nop
 8001874:	0800adac 	.word	0x0800adac

08001878 <_ZN14rosserial_msgs3LogC1Ev>:
      enum { INFO = 1 };
      enum { WARN = 2 };
      enum { ERROR = 3 };
      enum { FATAL = 4 };

    Log():
 8001878:	b580      	push	{r7, lr}
 800187a:	b082      	sub	sp, #8
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
      level(0),
      msg("")
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	4618      	mov	r0, r3
 8001884:	f7ff fd34 	bl	80012f0 <_ZN3ros3MsgC1Ev>
 8001888:	4a06      	ldr	r2, [pc, #24]	; (80018a4 <_ZN14rosserial_msgs3LogC1Ev+0x2c>)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	601a      	str	r2, [r3, #0]
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	2200      	movs	r2, #0
 8001892:	711a      	strb	r2, [r3, #4]
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	4a04      	ldr	r2, [pc, #16]	; (80018a8 <_ZN14rosserial_msgs3LogC1Ev+0x30>)
 8001898:	609a      	str	r2, [r3, #8]
    {
    }
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	4618      	mov	r0, r3
 800189e:	3708      	adds	r7, #8
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bd80      	pop	{r7, pc}
 80018a4:	0800b040 	.word	0x0800b040
 80018a8:	0800ad8c 	.word	0x0800ad8c

080018ac <_ZNK14rosserial_msgs3Log9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b084      	sub	sp, #16
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
 80018b4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80018b6:	2300      	movs	r3, #0
 80018b8:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	683a      	ldr	r2, [r7, #0]
 80018be:	4413      	add	r3, r2
 80018c0:	687a      	ldr	r2, [r7, #4]
 80018c2:	7912      	ldrb	r2, [r2, #4]
 80018c4:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->level);
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	3301      	adds	r3, #1
 80018ca:	60fb      	str	r3, [r7, #12]
      uint32_t length_msg = strlen(this->msg);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	689b      	ldr	r3, [r3, #8]
 80018d0:	4618      	mov	r0, r3
 80018d2:	f7fe fc85 	bl	80001e0 <strlen>
 80018d6:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_msg);
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	683a      	ldr	r2, [r7, #0]
 80018dc:	4413      	add	r3, r2
 80018de:	68b9      	ldr	r1, [r7, #8]
 80018e0:	4618      	mov	r0, r3
 80018e2:	f000 fdbf 	bl	8002464 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	3304      	adds	r3, #4
 80018ea:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->msg, length_msg);
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	683a      	ldr	r2, [r7, #0]
 80018f0:	18d0      	adds	r0, r2, r3
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	689b      	ldr	r3, [r3, #8]
 80018f6:	68ba      	ldr	r2, [r7, #8]
 80018f8:	4619      	mov	r1, r3
 80018fa:	f008 ffe3 	bl	800a8c4 <memcpy>
      offset += length_msg;
 80018fe:	68fa      	ldr	r2, [r7, #12]
 8001900:	68bb      	ldr	r3, [r7, #8]
 8001902:	4413      	add	r3, r2
 8001904:	60fb      	str	r3, [r7, #12]
      return offset;
 8001906:	68fb      	ldr	r3, [r7, #12]
    }
 8001908:	4618      	mov	r0, r3
 800190a:	3710      	adds	r7, #16
 800190c:	46bd      	mov	sp, r7
 800190e:	bd80      	pop	{r7, pc}

08001910 <_ZN14rosserial_msgs3Log11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8001910:	b580      	push	{r7, lr}
 8001912:	b086      	sub	sp, #24
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
 8001918:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800191a:	2300      	movs	r3, #0
 800191c:	613b      	str	r3, [r7, #16]
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 800191e:	693b      	ldr	r3, [r7, #16]
 8001920:	683a      	ldr	r2, [r7, #0]
 8001922:	4413      	add	r3, r2
 8001924:	781a      	ldrb	r2, [r3, #0]
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->level);
 800192a:	693b      	ldr	r3, [r7, #16]
 800192c:	3301      	adds	r3, #1
 800192e:	613b      	str	r3, [r7, #16]
      uint32_t length_msg;
      arrToVar(length_msg, (inbuffer + offset));
 8001930:	693b      	ldr	r3, [r7, #16]
 8001932:	683a      	ldr	r2, [r7, #0]
 8001934:	441a      	add	r2, r3
 8001936:	f107 030c 	add.w	r3, r7, #12
 800193a:	4611      	mov	r1, r2
 800193c:	4618      	mov	r0, r3
 800193e:	f000 fdaf 	bl	80024a0 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001942:	693b      	ldr	r3, [r7, #16]
 8001944:	3304      	adds	r3, #4
 8001946:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8001948:	693b      	ldr	r3, [r7, #16]
 800194a:	617b      	str	r3, [r7, #20]
 800194c:	693a      	ldr	r2, [r7, #16]
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	4413      	add	r3, r2
 8001952:	697a      	ldr	r2, [r7, #20]
 8001954:	429a      	cmp	r2, r3
 8001956:	d20c      	bcs.n	8001972 <_ZN14rosserial_msgs3Log11deserializeEPh+0x62>
          inbuffer[k-1]=inbuffer[k];
 8001958:	683a      	ldr	r2, [r7, #0]
 800195a:	697b      	ldr	r3, [r7, #20]
 800195c:	441a      	add	r2, r3
 800195e:	697b      	ldr	r3, [r7, #20]
 8001960:	3b01      	subs	r3, #1
 8001962:	6839      	ldr	r1, [r7, #0]
 8001964:	440b      	add	r3, r1
 8001966:	7812      	ldrb	r2, [r2, #0]
 8001968:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 800196a:	697b      	ldr	r3, [r7, #20]
 800196c:	3301      	adds	r3, #1
 800196e:	617b      	str	r3, [r7, #20]
 8001970:	e7ec      	b.n	800194c <_ZN14rosserial_msgs3Log11deserializeEPh+0x3c>
      }
      inbuffer[offset+length_msg-1]=0;
 8001972:	693a      	ldr	r2, [r7, #16]
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	4413      	add	r3, r2
 8001978:	3b01      	subs	r3, #1
 800197a:	683a      	ldr	r2, [r7, #0]
 800197c:	4413      	add	r3, r2
 800197e:	2200      	movs	r2, #0
 8001980:	701a      	strb	r2, [r3, #0]
      this->msg = (char *)(inbuffer + offset-1);
 8001982:	693b      	ldr	r3, [r7, #16]
 8001984:	3b01      	subs	r3, #1
 8001986:	683a      	ldr	r2, [r7, #0]
 8001988:	441a      	add	r2, r3
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	609a      	str	r2, [r3, #8]
      offset += length_msg;
 800198e:	693a      	ldr	r2, [r7, #16]
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	4413      	add	r3, r2
 8001994:	613b      	str	r3, [r7, #16]
     return offset;
 8001996:	693b      	ldr	r3, [r7, #16]
    }
 8001998:	4618      	mov	r0, r3
 800199a:	3718      	adds	r7, #24
 800199c:	46bd      	mov	sp, r7
 800199e:	bd80      	pop	{r7, pc}

080019a0 <_ZN14rosserial_msgs3Log7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/Log"; };
 80019a0:	b480      	push	{r7}
 80019a2:	b083      	sub	sp, #12
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
 80019a8:	4b03      	ldr	r3, [pc, #12]	; (80019b8 <_ZN14rosserial_msgs3Log7getTypeEv+0x18>)
 80019aa:	4618      	mov	r0, r3
 80019ac:	370c      	adds	r7, #12
 80019ae:	46bd      	mov	sp, r7
 80019b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b4:	4770      	bx	lr
 80019b6:	bf00      	nop
 80019b8:	0800add0 	.word	0x0800add0

080019bc <_ZN14rosserial_msgs3Log6getMD5Ev>:
    const char * getMD5(){ return "11abd731c25933261cd6183bd12d6295"; };
 80019bc:	b480      	push	{r7}
 80019be:	b083      	sub	sp, #12
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
 80019c4:	4b03      	ldr	r3, [pc, #12]	; (80019d4 <_ZN14rosserial_msgs3Log6getMD5Ev+0x18>)
 80019c6:	4618      	mov	r0, r3
 80019c8:	370c      	adds	r7, #12
 80019ca:	46bd      	mov	sp, r7
 80019cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d0:	4770      	bx	lr
 80019d2:	bf00      	nop
 80019d4:	0800ade4 	.word	0x0800ade4

080019d8 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>:
      uint32_t strings_length;
      typedef char* _strings_type;
      _strings_type st_strings;
      _strings_type * strings;

    RequestParamResponse():
 80019d8:	b580      	push	{r7, lr}
 80019da:	b082      	sub	sp, #8
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
      ints_length(0), ints(NULL),
      floats_length(0), floats(NULL),
      strings_length(0), strings(NULL)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	4618      	mov	r0, r3
 80019e4:	f7ff fc84 	bl	80012f0 <_ZN3ros3MsgC1Ev>
 80019e8:	4a0c      	ldr	r2, [pc, #48]	; (8001a1c <_ZN14rosserial_msgs20RequestParamResponseC1Ev+0x44>)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	601a      	str	r2, [r3, #0]
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	2200      	movs	r2, #0
 80019f2:	605a      	str	r2, [r3, #4]
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	2200      	movs	r2, #0
 80019f8:	60da      	str	r2, [r3, #12]
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	2200      	movs	r2, #0
 80019fe:	611a      	str	r2, [r3, #16]
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	2200      	movs	r2, #0
 8001a04:	619a      	str	r2, [r3, #24]
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	2200      	movs	r2, #0
 8001a0a:	61da      	str	r2, [r3, #28]
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	2200      	movs	r2, #0
 8001a10:	625a      	str	r2, [r3, #36]	; 0x24
    {
    }
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	4618      	mov	r0, r3
 8001a16:	3708      	adds	r7, #8
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	bd80      	pop	{r7, pc}
 8001a1c:	0800b028 	.word	0x0800b028

08001a20 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b08a      	sub	sp, #40	; 0x28
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
 8001a28:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	627b      	str	r3, [r7, #36]	; 0x24
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	6859      	ldr	r1, [r3, #4]
 8001a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a34:	683a      	ldr	r2, [r7, #0]
 8001a36:	4413      	add	r3, r2
 8001a38:	b2ca      	uxtb	r2, r1
 8001a3a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	685b      	ldr	r3, [r3, #4]
 8001a40:	0a19      	lsrs	r1, r3, #8
 8001a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a44:	3301      	adds	r3, #1
 8001a46:	683a      	ldr	r2, [r7, #0]
 8001a48:	4413      	add	r3, r2
 8001a4a:	b2ca      	uxtb	r2, r1
 8001a4c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	685b      	ldr	r3, [r3, #4]
 8001a52:	0c19      	lsrs	r1, r3, #16
 8001a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a56:	3302      	adds	r3, #2
 8001a58:	683a      	ldr	r2, [r7, #0]
 8001a5a:	4413      	add	r3, r2
 8001a5c:	b2ca      	uxtb	r2, r1
 8001a5e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	685b      	ldr	r3, [r3, #4]
 8001a64:	0e19      	lsrs	r1, r3, #24
 8001a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a68:	3303      	adds	r3, #3
 8001a6a:	683a      	ldr	r2, [r7, #0]
 8001a6c:	4413      	add	r3, r2
 8001a6e:	b2ca      	uxtb	r2, r1
 8001a70:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints_length);
 8001a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a74:	3304      	adds	r3, #4
 8001a76:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8001a78:	2300      	movs	r3, #0
 8001a7a:	623b      	str	r3, [r7, #32]
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	685b      	ldr	r3, [r3, #4]
 8001a80:	6a3a      	ldr	r2, [r7, #32]
 8001a82:	429a      	cmp	r2, r3
 8001a84:	d22b      	bcs.n	8001ade <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xbe>
      union {
        int32_t real;
        uint32_t base;
      } u_intsi;
      u_intsi.real = this->ints[i];
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	68da      	ldr	r2, [r3, #12]
 8001a8a:	6a3b      	ldr	r3, [r7, #32]
 8001a8c:	009b      	lsls	r3, r3, #2
 8001a8e:	4413      	add	r3, r2
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
 8001a94:	6939      	ldr	r1, [r7, #16]
 8001a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a98:	683a      	ldr	r2, [r7, #0]
 8001a9a:	4413      	add	r3, r2
 8001a9c:	b2ca      	uxtb	r2, r1
 8001a9e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 8001aa0:	693b      	ldr	r3, [r7, #16]
 8001aa2:	0a19      	lsrs	r1, r3, #8
 8001aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aa6:	3301      	adds	r3, #1
 8001aa8:	683a      	ldr	r2, [r7, #0]
 8001aaa:	4413      	add	r3, r2
 8001aac:	b2ca      	uxtb	r2, r1
 8001aae:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 8001ab0:	693b      	ldr	r3, [r7, #16]
 8001ab2:	0c19      	lsrs	r1, r3, #16
 8001ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ab6:	3302      	adds	r3, #2
 8001ab8:	683a      	ldr	r2, [r7, #0]
 8001aba:	4413      	add	r3, r2
 8001abc:	b2ca      	uxtb	r2, r1
 8001abe:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 8001ac0:	693b      	ldr	r3, [r7, #16]
 8001ac2:	0e19      	lsrs	r1, r3, #24
 8001ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ac6:	3303      	adds	r3, #3
 8001ac8:	683a      	ldr	r2, [r7, #0]
 8001aca:	4413      	add	r3, r2
 8001acc:	b2ca      	uxtb	r2, r1
 8001ace:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints[i]);
 8001ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ad2:	3304      	adds	r3, #4
 8001ad4:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8001ad6:	6a3b      	ldr	r3, [r7, #32]
 8001ad8:	3301      	adds	r3, #1
 8001ada:	623b      	str	r3, [r7, #32]
 8001adc:	e7ce      	b.n	8001a7c <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x5c>
      }
      *(outbuffer + offset + 0) = (this->floats_length >> (8 * 0)) & 0xFF;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	6919      	ldr	r1, [r3, #16]
 8001ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ae4:	683a      	ldr	r2, [r7, #0]
 8001ae6:	4413      	add	r3, r2
 8001ae8:	b2ca      	uxtb	r2, r1
 8001aea:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->floats_length >> (8 * 1)) & 0xFF;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	691b      	ldr	r3, [r3, #16]
 8001af0:	0a19      	lsrs	r1, r3, #8
 8001af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001af4:	3301      	adds	r3, #1
 8001af6:	683a      	ldr	r2, [r7, #0]
 8001af8:	4413      	add	r3, r2
 8001afa:	b2ca      	uxtb	r2, r1
 8001afc:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->floats_length >> (8 * 2)) & 0xFF;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	691b      	ldr	r3, [r3, #16]
 8001b02:	0c19      	lsrs	r1, r3, #16
 8001b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b06:	3302      	adds	r3, #2
 8001b08:	683a      	ldr	r2, [r7, #0]
 8001b0a:	4413      	add	r3, r2
 8001b0c:	b2ca      	uxtb	r2, r1
 8001b0e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->floats_length >> (8 * 3)) & 0xFF;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	691b      	ldr	r3, [r3, #16]
 8001b14:	0e19      	lsrs	r1, r3, #24
 8001b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b18:	3303      	adds	r3, #3
 8001b1a:	683a      	ldr	r2, [r7, #0]
 8001b1c:	4413      	add	r3, r2
 8001b1e:	b2ca      	uxtb	r2, r1
 8001b20:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats_length);
 8001b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b24:	3304      	adds	r3, #4
 8001b26:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8001b28:	2300      	movs	r3, #0
 8001b2a:	61fb      	str	r3, [r7, #28]
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	691b      	ldr	r3, [r3, #16]
 8001b30:	69fa      	ldr	r2, [r7, #28]
 8001b32:	429a      	cmp	r2, r3
 8001b34:	d22b      	bcs.n	8001b8e <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x16e>
      union {
        float real;
        uint32_t base;
      } u_floatsi;
      u_floatsi.real = this->floats[i];
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	699a      	ldr	r2, [r3, #24]
 8001b3a:	69fb      	ldr	r3, [r7, #28]
 8001b3c:	009b      	lsls	r3, r3, #2
 8001b3e:	4413      	add	r3, r2
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 8001b44:	68f9      	ldr	r1, [r7, #12]
 8001b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b48:	683a      	ldr	r2, [r7, #0]
 8001b4a:	4413      	add	r3, r2
 8001b4c:	b2ca      	uxtb	r2, r1
 8001b4e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	0a19      	lsrs	r1, r3, #8
 8001b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b56:	3301      	adds	r3, #1
 8001b58:	683a      	ldr	r2, [r7, #0]
 8001b5a:	4413      	add	r3, r2
 8001b5c:	b2ca      	uxtb	r2, r1
 8001b5e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	0c19      	lsrs	r1, r3, #16
 8001b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b66:	3302      	adds	r3, #2
 8001b68:	683a      	ldr	r2, [r7, #0]
 8001b6a:	4413      	add	r3, r2
 8001b6c:	b2ca      	uxtb	r2, r1
 8001b6e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	0e19      	lsrs	r1, r3, #24
 8001b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b76:	3303      	adds	r3, #3
 8001b78:	683a      	ldr	r2, [r7, #0]
 8001b7a:	4413      	add	r3, r2
 8001b7c:	b2ca      	uxtb	r2, r1
 8001b7e:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats[i]);
 8001b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b82:	3304      	adds	r3, #4
 8001b84:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8001b86:	69fb      	ldr	r3, [r7, #28]
 8001b88:	3301      	adds	r3, #1
 8001b8a:	61fb      	str	r3, [r7, #28]
 8001b8c:	e7ce      	b.n	8001b2c <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x10c>
      }
      *(outbuffer + offset + 0) = (this->strings_length >> (8 * 0)) & 0xFF;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	69d9      	ldr	r1, [r3, #28]
 8001b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b94:	683a      	ldr	r2, [r7, #0]
 8001b96:	4413      	add	r3, r2
 8001b98:	b2ca      	uxtb	r2, r1
 8001b9a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->strings_length >> (8 * 1)) & 0xFF;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	69db      	ldr	r3, [r3, #28]
 8001ba0:	0a19      	lsrs	r1, r3, #8
 8001ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ba4:	3301      	adds	r3, #1
 8001ba6:	683a      	ldr	r2, [r7, #0]
 8001ba8:	4413      	add	r3, r2
 8001baa:	b2ca      	uxtb	r2, r1
 8001bac:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->strings_length >> (8 * 2)) & 0xFF;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	69db      	ldr	r3, [r3, #28]
 8001bb2:	0c19      	lsrs	r1, r3, #16
 8001bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bb6:	3302      	adds	r3, #2
 8001bb8:	683a      	ldr	r2, [r7, #0]
 8001bba:	4413      	add	r3, r2
 8001bbc:	b2ca      	uxtb	r2, r1
 8001bbe:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->strings_length >> (8 * 3)) & 0xFF;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	69db      	ldr	r3, [r3, #28]
 8001bc4:	0e19      	lsrs	r1, r3, #24
 8001bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bc8:	3303      	adds	r3, #3
 8001bca:	683a      	ldr	r2, [r7, #0]
 8001bcc:	4413      	add	r3, r2
 8001bce:	b2ca      	uxtb	r2, r1
 8001bd0:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->strings_length);
 8001bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bd4:	3304      	adds	r3, #4
 8001bd6:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8001bd8:	2300      	movs	r3, #0
 8001bda:	61bb      	str	r3, [r7, #24]
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	69db      	ldr	r3, [r3, #28]
 8001be0:	69ba      	ldr	r2, [r7, #24]
 8001be2:	429a      	cmp	r2, r3
 8001be4:	d228      	bcs.n	8001c38 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x218>
      uint32_t length_stringsi = strlen(this->strings[i]);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001bea:	69bb      	ldr	r3, [r7, #24]
 8001bec:	009b      	lsls	r3, r3, #2
 8001bee:	4413      	add	r3, r2
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	f7fe faf4 	bl	80001e0 <strlen>
 8001bf8:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_stringsi);
 8001bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bfc:	683a      	ldr	r2, [r7, #0]
 8001bfe:	4413      	add	r3, r2
 8001c00:	6979      	ldr	r1, [r7, #20]
 8001c02:	4618      	mov	r0, r3
 8001c04:	f000 fc2e 	bl	8002464 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c0a:	3304      	adds	r3, #4
 8001c0c:	627b      	str	r3, [r7, #36]	; 0x24
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 8001c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c10:	683a      	ldr	r2, [r7, #0]
 8001c12:	18d0      	adds	r0, r2, r3
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001c18:	69bb      	ldr	r3, [r7, #24]
 8001c1a:	009b      	lsls	r3, r3, #2
 8001c1c:	4413      	add	r3, r2
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	697a      	ldr	r2, [r7, #20]
 8001c22:	4619      	mov	r1, r3
 8001c24:	f008 fe4e 	bl	800a8c4 <memcpy>
      offset += length_stringsi;
 8001c28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c2a:	697b      	ldr	r3, [r7, #20]
 8001c2c:	4413      	add	r3, r2
 8001c2e:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8001c30:	69bb      	ldr	r3, [r7, #24]
 8001c32:	3301      	adds	r3, #1
 8001c34:	61bb      	str	r3, [r7, #24]
 8001c36:	e7d1      	b.n	8001bdc <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x1bc>
      }
      return offset;
 8001c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	3728      	adds	r7, #40	; 0x28
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bd80      	pop	{r7, pc}

08001c42 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8001c42:	b580      	push	{r7, lr}
 8001c44:	b08e      	sub	sp, #56	; 0x38
 8001c46:	af00      	add	r7, sp, #0
 8001c48:	6078      	str	r0, [r7, #4]
 8001c4a:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	637b      	str	r3, [r7, #52]	; 0x34
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8001c50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c52:	683a      	ldr	r2, [r7, #0]
 8001c54:	4413      	add	r3, r2
 8001c56:	781b      	ldrb	r3, [r3, #0]
 8001c58:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8001c5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c5c:	3301      	adds	r3, #1
 8001c5e:	683a      	ldr	r2, [r7, #0]
 8001c60:	4413      	add	r3, r2
 8001c62:	781b      	ldrb	r3, [r3, #0]
 8001c64:	021b      	lsls	r3, r3, #8
 8001c66:	6a3a      	ldr	r2, [r7, #32]
 8001c68:	4313      	orrs	r3, r2
 8001c6a:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8001c6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c6e:	3302      	adds	r3, #2
 8001c70:	683a      	ldr	r2, [r7, #0]
 8001c72:	4413      	add	r3, r2
 8001c74:	781b      	ldrb	r3, [r3, #0]
 8001c76:	041b      	lsls	r3, r3, #16
 8001c78:	6a3a      	ldr	r2, [r7, #32]
 8001c7a:	4313      	orrs	r3, r2
 8001c7c:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8001c7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c80:	3303      	adds	r3, #3
 8001c82:	683a      	ldr	r2, [r7, #0]
 8001c84:	4413      	add	r3, r2
 8001c86:	781b      	ldrb	r3, [r3, #0]
 8001c88:	061b      	lsls	r3, r3, #24
 8001c8a:	6a3a      	ldr	r2, [r7, #32]
 8001c8c:	4313      	orrs	r3, r2
 8001c8e:	623b      	str	r3, [r7, #32]
      offset += sizeof(this->ints_length);
 8001c90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c92:	3304      	adds	r3, #4
 8001c94:	637b      	str	r3, [r7, #52]	; 0x34
      if(ints_lengthT > ints_length)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	685b      	ldr	r3, [r3, #4]
 8001c9a:	6a3a      	ldr	r2, [r7, #32]
 8001c9c:	429a      	cmp	r2, r3
 8001c9e:	d90a      	bls.n	8001cb6 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x74>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	68da      	ldr	r2, [r3, #12]
 8001ca4:	6a3b      	ldr	r3, [r7, #32]
 8001ca6:	009b      	lsls	r3, r3, #2
 8001ca8:	4619      	mov	r1, r3
 8001caa:	4610      	mov	r0, r2
 8001cac:	f008 ff1a 	bl	800aae4 <realloc>
 8001cb0:	4602      	mov	r2, r0
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	60da      	str	r2, [r3, #12]
      ints_length = ints_lengthT;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	6a3a      	ldr	r2, [r7, #32]
 8001cba:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < ints_length; i++){
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	633b      	str	r3, [r7, #48]	; 0x30
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	685b      	ldr	r3, [r3, #4]
 8001cc4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001cc6:	429a      	cmp	r2, r3
 8001cc8:	d236      	bcs.n	8001d38 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xf6>
      union {
        int32_t real;
        uint32_t base;
      } u_st_ints;
      u_st_ints.base = 0;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8001cce:	697b      	ldr	r3, [r7, #20]
 8001cd0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001cd2:	6839      	ldr	r1, [r7, #0]
 8001cd4:	440a      	add	r2, r1
 8001cd6:	7812      	ldrb	r2, [r2, #0]
 8001cd8:	4313      	orrs	r3, r2
 8001cda:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001cdc:	697a      	ldr	r2, [r7, #20]
 8001cde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ce0:	3301      	adds	r3, #1
 8001ce2:	6839      	ldr	r1, [r7, #0]
 8001ce4:	440b      	add	r3, r1
 8001ce6:	781b      	ldrb	r3, [r3, #0]
 8001ce8:	021b      	lsls	r3, r3, #8
 8001cea:	4313      	orrs	r3, r2
 8001cec:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001cee:	697a      	ldr	r2, [r7, #20]
 8001cf0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001cf2:	3302      	adds	r3, #2
 8001cf4:	6839      	ldr	r1, [r7, #0]
 8001cf6:	440b      	add	r3, r1
 8001cf8:	781b      	ldrb	r3, [r3, #0]
 8001cfa:	041b      	lsls	r3, r3, #16
 8001cfc:	4313      	orrs	r3, r2
 8001cfe:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001d00:	697a      	ldr	r2, [r7, #20]
 8001d02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d04:	3303      	adds	r3, #3
 8001d06:	6839      	ldr	r1, [r7, #0]
 8001d08:	440b      	add	r3, r1
 8001d0a:	781b      	ldrb	r3, [r3, #0]
 8001d0c:	061b      	lsls	r3, r3, #24
 8001d0e:	4313      	orrs	r3, r2
 8001d10:	617b      	str	r3, [r7, #20]
      this->st_ints = u_st_ints.real;
 8001d12:	697a      	ldr	r2, [r7, #20]
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->st_ints);
 8001d18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d1a:	3304      	adds	r3, #4
 8001d1c:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	68da      	ldr	r2, [r3, #12]
 8001d22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d24:	009b      	lsls	r3, r3, #2
 8001d26:	4413      	add	r3, r2
 8001d28:	687a      	ldr	r2, [r7, #4]
 8001d2a:	3208      	adds	r2, #8
 8001d2c:	6812      	ldr	r2, [r2, #0]
 8001d2e:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < ints_length; i++){
 8001d30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d32:	3301      	adds	r3, #1
 8001d34:	633b      	str	r3, [r7, #48]	; 0x30
 8001d36:	e7c3      	b.n	8001cc0 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x7e>
      }
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8001d38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d3a:	683a      	ldr	r2, [r7, #0]
 8001d3c:	4413      	add	r3, r2
 8001d3e:	781b      	ldrb	r3, [r3, #0]
 8001d40:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8001d42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d44:	3301      	adds	r3, #1
 8001d46:	683a      	ldr	r2, [r7, #0]
 8001d48:	4413      	add	r3, r2
 8001d4a:	781b      	ldrb	r3, [r3, #0]
 8001d4c:	021b      	lsls	r3, r3, #8
 8001d4e:	69fa      	ldr	r2, [r7, #28]
 8001d50:	4313      	orrs	r3, r2
 8001d52:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8001d54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d56:	3302      	adds	r3, #2
 8001d58:	683a      	ldr	r2, [r7, #0]
 8001d5a:	4413      	add	r3, r2
 8001d5c:	781b      	ldrb	r3, [r3, #0]
 8001d5e:	041b      	lsls	r3, r3, #16
 8001d60:	69fa      	ldr	r2, [r7, #28]
 8001d62:	4313      	orrs	r3, r2
 8001d64:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8001d66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d68:	3303      	adds	r3, #3
 8001d6a:	683a      	ldr	r2, [r7, #0]
 8001d6c:	4413      	add	r3, r2
 8001d6e:	781b      	ldrb	r3, [r3, #0]
 8001d70:	061b      	lsls	r3, r3, #24
 8001d72:	69fa      	ldr	r2, [r7, #28]
 8001d74:	4313      	orrs	r3, r2
 8001d76:	61fb      	str	r3, [r7, #28]
      offset += sizeof(this->floats_length);
 8001d78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d7a:	3304      	adds	r3, #4
 8001d7c:	637b      	str	r3, [r7, #52]	; 0x34
      if(floats_lengthT > floats_length)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	691b      	ldr	r3, [r3, #16]
 8001d82:	69fa      	ldr	r2, [r7, #28]
 8001d84:	429a      	cmp	r2, r3
 8001d86:	d90a      	bls.n	8001d9e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x15c>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	699a      	ldr	r2, [r3, #24]
 8001d8c:	69fb      	ldr	r3, [r7, #28]
 8001d8e:	009b      	lsls	r3, r3, #2
 8001d90:	4619      	mov	r1, r3
 8001d92:	4610      	mov	r0, r2
 8001d94:	f008 fea6 	bl	800aae4 <realloc>
 8001d98:	4602      	mov	r2, r0
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	619a      	str	r2, [r3, #24]
      floats_length = floats_lengthT;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	69fa      	ldr	r2, [r7, #28]
 8001da2:	611a      	str	r2, [r3, #16]
      for( uint32_t i = 0; i < floats_length; i++){
 8001da4:	2300      	movs	r3, #0
 8001da6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	691b      	ldr	r3, [r3, #16]
 8001dac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001dae:	429a      	cmp	r2, r3
 8001db0:	d236      	bcs.n	8001e20 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1de>
      union {
        float real;
        uint32_t base;
      } u_st_floats;
      u_st_floats.base = 0;
 8001db2:	2300      	movs	r3, #0
 8001db4:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8001db6:	693b      	ldr	r3, [r7, #16]
 8001db8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001dba:	6839      	ldr	r1, [r7, #0]
 8001dbc:	440a      	add	r2, r1
 8001dbe:	7812      	ldrb	r2, [r2, #0]
 8001dc0:	4313      	orrs	r3, r2
 8001dc2:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001dc4:	693a      	ldr	r2, [r7, #16]
 8001dc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001dc8:	3301      	adds	r3, #1
 8001dca:	6839      	ldr	r1, [r7, #0]
 8001dcc:	440b      	add	r3, r1
 8001dce:	781b      	ldrb	r3, [r3, #0]
 8001dd0:	021b      	lsls	r3, r3, #8
 8001dd2:	4313      	orrs	r3, r2
 8001dd4:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001dd6:	693a      	ldr	r2, [r7, #16]
 8001dd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001dda:	3302      	adds	r3, #2
 8001ddc:	6839      	ldr	r1, [r7, #0]
 8001dde:	440b      	add	r3, r1
 8001de0:	781b      	ldrb	r3, [r3, #0]
 8001de2:	041b      	lsls	r3, r3, #16
 8001de4:	4313      	orrs	r3, r2
 8001de6:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001de8:	693a      	ldr	r2, [r7, #16]
 8001dea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001dec:	3303      	adds	r3, #3
 8001dee:	6839      	ldr	r1, [r7, #0]
 8001df0:	440b      	add	r3, r1
 8001df2:	781b      	ldrb	r3, [r3, #0]
 8001df4:	061b      	lsls	r3, r3, #24
 8001df6:	4313      	orrs	r3, r2
 8001df8:	613b      	str	r3, [r7, #16]
      this->st_floats = u_st_floats.real;
 8001dfa:	693a      	ldr	r2, [r7, #16]
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->st_floats);
 8001e00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e02:	3304      	adds	r3, #4
 8001e04:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	699a      	ldr	r2, [r3, #24]
 8001e0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e0c:	009b      	lsls	r3, r3, #2
 8001e0e:	4413      	add	r3, r2
 8001e10:	687a      	ldr	r2, [r7, #4]
 8001e12:	3214      	adds	r2, #20
 8001e14:	6812      	ldr	r2, [r2, #0]
 8001e16:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < floats_length; i++){
 8001e18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e1a:	3301      	adds	r3, #1
 8001e1c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001e1e:	e7c3      	b.n	8001da8 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x166>
      }
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8001e20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e22:	683a      	ldr	r2, [r7, #0]
 8001e24:	4413      	add	r3, r2
 8001e26:	781b      	ldrb	r3, [r3, #0]
 8001e28:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8001e2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e2c:	3301      	adds	r3, #1
 8001e2e:	683a      	ldr	r2, [r7, #0]
 8001e30:	4413      	add	r3, r2
 8001e32:	781b      	ldrb	r3, [r3, #0]
 8001e34:	021b      	lsls	r3, r3, #8
 8001e36:	69ba      	ldr	r2, [r7, #24]
 8001e38:	4313      	orrs	r3, r2
 8001e3a:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8001e3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e3e:	3302      	adds	r3, #2
 8001e40:	683a      	ldr	r2, [r7, #0]
 8001e42:	4413      	add	r3, r2
 8001e44:	781b      	ldrb	r3, [r3, #0]
 8001e46:	041b      	lsls	r3, r3, #16
 8001e48:	69ba      	ldr	r2, [r7, #24]
 8001e4a:	4313      	orrs	r3, r2
 8001e4c:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8001e4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e50:	3303      	adds	r3, #3
 8001e52:	683a      	ldr	r2, [r7, #0]
 8001e54:	4413      	add	r3, r2
 8001e56:	781b      	ldrb	r3, [r3, #0]
 8001e58:	061b      	lsls	r3, r3, #24
 8001e5a:	69ba      	ldr	r2, [r7, #24]
 8001e5c:	4313      	orrs	r3, r2
 8001e5e:	61bb      	str	r3, [r7, #24]
      offset += sizeof(this->strings_length);
 8001e60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e62:	3304      	adds	r3, #4
 8001e64:	637b      	str	r3, [r7, #52]	; 0x34
      if(strings_lengthT > strings_length)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	69db      	ldr	r3, [r3, #28]
 8001e6a:	69ba      	ldr	r2, [r7, #24]
 8001e6c:	429a      	cmp	r2, r3
 8001e6e:	d90a      	bls.n	8001e86 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x244>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001e74:	69bb      	ldr	r3, [r7, #24]
 8001e76:	009b      	lsls	r3, r3, #2
 8001e78:	4619      	mov	r1, r3
 8001e7a:	4610      	mov	r0, r2
 8001e7c:	f008 fe32 	bl	800aae4 <realloc>
 8001e80:	4602      	mov	r2, r0
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	625a      	str	r2, [r3, #36]	; 0x24
      strings_length = strings_lengthT;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	69ba      	ldr	r2, [r7, #24]
 8001e8a:	61da      	str	r2, [r3, #28]
      for( uint32_t i = 0; i < strings_length; i++){
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	69db      	ldr	r3, [r3, #28]
 8001e94:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001e96:	429a      	cmp	r2, r3
 8001e98:	d23f      	bcs.n	8001f1a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x2d8>
      uint32_t length_st_strings;
      arrToVar(length_st_strings, (inbuffer + offset));
 8001e9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e9c:	683a      	ldr	r2, [r7, #0]
 8001e9e:	441a      	add	r2, r3
 8001ea0:	f107 030c 	add.w	r3, r7, #12
 8001ea4:	4611      	mov	r1, r2
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	f000 fafa 	bl	80024a0 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001eac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001eae:	3304      	adds	r3, #4
 8001eb0:	637b      	str	r3, [r7, #52]	; 0x34
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8001eb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001eb4:	627b      	str	r3, [r7, #36]	; 0x24
 8001eb6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	4413      	add	r3, r2
 8001ebc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ebe:	429a      	cmp	r2, r3
 8001ec0:	d20c      	bcs.n	8001edc <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x29a>
          inbuffer[k-1]=inbuffer[k];
 8001ec2:	683a      	ldr	r2, [r7, #0]
 8001ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ec6:	441a      	add	r2, r3
 8001ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eca:	3b01      	subs	r3, #1
 8001ecc:	6839      	ldr	r1, [r7, #0]
 8001ece:	440b      	add	r3, r1
 8001ed0:	7812      	ldrb	r2, [r2, #0]
 8001ed2:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8001ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ed6:	3301      	adds	r3, #1
 8001ed8:	627b      	str	r3, [r7, #36]	; 0x24
 8001eda:	e7ec      	b.n	8001eb6 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x274>
      }
      inbuffer[offset+length_st_strings-1]=0;
 8001edc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	4413      	add	r3, r2
 8001ee2:	3b01      	subs	r3, #1
 8001ee4:	683a      	ldr	r2, [r7, #0]
 8001ee6:	4413      	add	r3, r2
 8001ee8:	2200      	movs	r2, #0
 8001eea:	701a      	strb	r2, [r3, #0]
      this->st_strings = (char *)(inbuffer + offset-1);
 8001eec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001eee:	3b01      	subs	r3, #1
 8001ef0:	683a      	ldr	r2, [r7, #0]
 8001ef2:	441a      	add	r2, r3
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	621a      	str	r2, [r3, #32]
      offset += length_st_strings;
 8001ef8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	4413      	add	r3, r2
 8001efe:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001f04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f06:	009b      	lsls	r3, r3, #2
 8001f08:	4413      	add	r3, r2
 8001f0a:	687a      	ldr	r2, [r7, #4]
 8001f0c:	3220      	adds	r2, #32
 8001f0e:	6812      	ldr	r2, [r2, #0]
 8001f10:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < strings_length; i++){
 8001f12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f14:	3301      	adds	r3, #1
 8001f16:	62bb      	str	r3, [r7, #40]	; 0x28
 8001f18:	e7ba      	b.n	8001e90 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x24e>
      }
     return offset;
 8001f1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	3738      	adds	r7, #56	; 0x38
 8001f20:	46bd      	mov	sp, r7
 8001f22:	bd80      	pop	{r7, pc}

08001f24 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv>:

    const char * getType(){ return REQUESTPARAM; };
 8001f24:	b480      	push	{r7}
 8001f26:	b083      	sub	sp, #12
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
 8001f2c:	4b03      	ldr	r3, [pc, #12]	; (8001f3c <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv+0x18>)
 8001f2e:	4618      	mov	r0, r3
 8001f30:	370c      	adds	r7, #12
 8001f32:	46bd      	mov	sp, r7
 8001f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f38:	4770      	bx	lr
 8001f3a:	bf00      	nop
 8001f3c:	0800af94 	.word	0x0800af94

08001f40 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev>:
    const char * getMD5(){ return "9f0e98bda65981986ddf53afa7a40e49"; };
 8001f40:	b480      	push	{r7}
 8001f42:	b083      	sub	sp, #12
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
 8001f48:	4b03      	ldr	r3, [pc, #12]	; (8001f58 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev+0x18>)
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	370c      	adds	r7, #12
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f54:	4770      	bx	lr
 8001f56:	bf00      	nop
 8001f58:	0800ae08 	.word	0x0800ae08

08001f5c <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>:

/* Generic Publisher */
class Publisher
{
public:
  Publisher(const char * topic_name, Msg * msg, int endpoint = rosserial_msgs::TopicInfo::ID_PUBLISHER) :
 8001f5c:	b480      	push	{r7}
 8001f5e:	b085      	sub	sp, #20
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	60f8      	str	r0, [r7, #12]
 8001f64:	60b9      	str	r1, [r7, #8]
 8001f66:	607a      	str	r2, [r7, #4]
 8001f68:	603b      	str	r3, [r7, #0]
    topic_(topic_name),
    msg_(msg),
    endpoint_(endpoint) {};
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	68ba      	ldr	r2, [r7, #8]
 8001f6e:	601a      	str	r2, [r3, #0]
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	687a      	ldr	r2, [r7, #4]
 8001f74:	605a      	str	r2, [r3, #4]
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	683a      	ldr	r2, [r7, #0]
 8001f7a:	611a      	str	r2, [r3, #16]
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	4618      	mov	r0, r3
 8001f80:	3714      	adds	r7, #20
 8001f82:	46bd      	mov	sp, r7
 8001f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f88:	4770      	bx	lr

08001f8a <_ZN3ros9Publisher7publishEPKNS_3MsgE>:

  int publish(const Msg * msg)
 8001f8a:	b580      	push	{r7, lr}
 8001f8c:	b082      	sub	sp, #8
 8001f8e:	af00      	add	r7, sp, #0
 8001f90:	6078      	str	r0, [r7, #4]
 8001f92:	6039      	str	r1, [r7, #0]
  {
    return nh_->publish(id_, msg);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	68d8      	ldr	r0, [r3, #12]
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	68db      	ldr	r3, [r3, #12]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	687a      	ldr	r2, [r7, #4]
 8001fa2:	6891      	ldr	r1, [r2, #8]
 8001fa4:	683a      	ldr	r2, [r7, #0]
 8001fa6:	4798      	blx	r3
 8001fa8:	4603      	mov	r3, r0
  };
 8001faa:	4618      	mov	r0, r3
 8001fac:	3708      	adds	r7, #8
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bd80      	pop	{r7, pc}

08001fb2 <_ZN3ros9Publisher15getEndpointTypeEv>:
  int getEndpointType()
 8001fb2:	b480      	push	{r7}
 8001fb4:	b083      	sub	sp, #12
 8001fb6:	af00      	add	r7, sp, #0
 8001fb8:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	691b      	ldr	r3, [r3, #16]
  }
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	370c      	adds	r7, #12
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc8:	4770      	bx	lr

08001fca <_ZN13STM32Hardware10getRdmaIndEv>:
    UART_HandleTypeDef *huart;

    const static uint16_t rbuflen = 512;
    uint8_t rbuf[rbuflen];
    uint32_t rind;
    inline uint32_t getRdmaInd(void){ return (rbuflen - __HAL_DMA_GET_COUNTER(huart->hdmarx)) & (rbuflen - 1); }
 8001fca:	b480      	push	{r7}
 8001fcc:	b083      	sub	sp, #12
 8001fce:	af00      	add	r7, sp, #0
 8001fd0:	6078      	str	r0, [r7, #4]
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8001fe0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	370c      	adds	r7, #12
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fee:	4770      	bx	lr

08001ff0 <_ZN13STM32HardwareC1Ev>:
    const static uint16_t tbuflen = 512;
    uint8_t tbuf[tbuflen];
    uint32_t twind, tfind;

  public:
    STM32Hardware():
 8001ff0:	b480      	push	{r7}
 8001ff2:	b083      	sub	sp, #12
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
      huart(&huart2), rind(0), twind(0), tfind(0){
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	4a0a      	ldr	r2, [pc, #40]	; (8002024 <_ZN13STM32HardwareC1Ev+0x34>)
 8001ffc:	601a      	str	r2, [r3, #0]
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	2200      	movs	r2, #0
 8002002:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	2200      	movs	r2, #0
 800200a:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	2200      	movs	r2, #0
 8002012:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
    }
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	4618      	mov	r0, r3
 800201a:	370c      	adds	r7, #12
 800201c:	46bd      	mov	sp, r7
 800201e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002022:	4770      	bx	lr
 8002024:	20000184 	.word	0x20000184

08002028 <_ZN13STM32Hardware4initEv>:

    STM32Hardware(UART_HandleTypeDef *huart_):
      huart(huart_), rind(0), twind(0), tfind(0){
    }
  
    void init(){
 8002028:	b580      	push	{r7, lr}
 800202a:	b082      	sub	sp, #8
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
      reset_rbuf();
 8002030:	6878      	ldr	r0, [r7, #4]
 8002032:	f000 f804 	bl	800203e <_ZN13STM32Hardware10reset_rbufEv>
    }
 8002036:	bf00      	nop
 8002038:	3708      	adds	r7, #8
 800203a:	46bd      	mov	sp, r7
 800203c:	bd80      	pop	{r7, pc}

0800203e <_ZN13STM32Hardware10reset_rbufEv>:

    void reset_rbuf(void){
 800203e:	b580      	push	{r7, lr}
 8002040:	b082      	sub	sp, #8
 8002042:	af00      	add	r7, sp, #0
 8002044:	6078      	str	r0, [r7, #4]
      HAL_UART_Receive_DMA(huart, rbuf, rbuflen);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	6818      	ldr	r0, [r3, #0]
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	3304      	adds	r3, #4
 800204e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002052:	4619      	mov	r1, r3
 8002054:	f004 fb72 	bl	800673c <HAL_UART_Receive_DMA>
    }
 8002058:	bf00      	nop
 800205a:	3708      	adds	r7, #8
 800205c:	46bd      	mov	sp, r7
 800205e:	bd80      	pop	{r7, pc}

08002060 <_ZN13STM32Hardware4readEv>:

    int read(){
 8002060:	b590      	push	{r4, r7, lr}
 8002062:	b085      	sub	sp, #20
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
      int c = -1;
 8002068:	f04f 33ff 	mov.w	r3, #4294967295
 800206c:	60fb      	str	r3, [r7, #12]
      if(rind != getRdmaInd()){
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	f8d3 4204 	ldr.w	r4, [r3, #516]	; 0x204
 8002074:	6878      	ldr	r0, [r7, #4]
 8002076:	f7ff ffa8 	bl	8001fca <_ZN13STM32Hardware10getRdmaIndEv>
 800207a:	4603      	mov	r3, r0
 800207c:	429c      	cmp	r4, r3
 800207e:	bf14      	ite	ne
 8002080:	2301      	movne	r3, #1
 8002082:	2300      	moveq	r3, #0
 8002084:	b2db      	uxtb	r3, r3
 8002086:	2b00      	cmp	r3, #0
 8002088:	d012      	beq.n	80020b0 <_ZN13STM32Hardware4readEv+0x50>
        c = rbuf[rind++];
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8002090:	1c59      	adds	r1, r3, #1
 8002092:	687a      	ldr	r2, [r7, #4]
 8002094:	f8c2 1204 	str.w	r1, [r2, #516]	; 0x204
 8002098:	687a      	ldr	r2, [r7, #4]
 800209a:	4413      	add	r3, r2
 800209c:	791b      	ldrb	r3, [r3, #4]
 800209e:	60fb      	str	r3, [r7, #12]
        rind &= rbuflen - 1;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80020a6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
      }
      return c;
 80020b0:	68fb      	ldr	r3, [r7, #12]
    }
 80020b2:	4618      	mov	r0, r3
 80020b4:	3714      	adds	r7, #20
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bd90      	pop	{r4, r7, pc}
	...

080020bc <_ZN13STM32Hardware5flushEv>:

    void flush(void){
 80020bc:	b580      	push	{r7, lr}
 80020be:	b084      	sub	sp, #16
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
      static bool mutex = false;

      if((huart->gState == HAL_UART_STATE_READY) && !mutex){
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80020cc:	b2db      	uxtb	r3, r3
 80020ce:	2b20      	cmp	r3, #32
 80020d0:	d108      	bne.n	80020e4 <_ZN13STM32Hardware5flushEv+0x28>
 80020d2:	4b33      	ldr	r3, [pc, #204]	; (80021a0 <_ZN13STM32Hardware5flushEv+0xe4>)
 80020d4:	781b      	ldrb	r3, [r3, #0]
 80020d6:	f083 0301 	eor.w	r3, r3, #1
 80020da:	b2db      	uxtb	r3, r3
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d001      	beq.n	80020e4 <_ZN13STM32Hardware5flushEv+0x28>
 80020e0:	2301      	movs	r3, #1
 80020e2:	e000      	b.n	80020e6 <_ZN13STM32Hardware5flushEv+0x2a>
 80020e4:	2300      	movs	r3, #0
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d055      	beq.n	8002196 <_ZN13STM32Hardware5flushEv+0xda>
        mutex = true;
 80020ea:	4b2d      	ldr	r3, [pc, #180]	; (80021a0 <_ZN13STM32Hardware5flushEv+0xe4>)
 80020ec:	2201      	movs	r2, #1
 80020ee:	701a      	strb	r2, [r3, #0]

        if(twind != tfind){
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80020fc:	429a      	cmp	r2, r3
 80020fe:	d047      	beq.n	8002190 <_ZN13STM32Hardware5flushEv+0xd4>
          uint16_t len = 0;
 8002100:	2300      	movs	r3, #0
 8002102:	81fb      	strh	r3, [r7, #14]
		  if(tfind < twind){
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8002110:	429a      	cmp	r2, r3
 8002112:	d217      	bcs.n	8002144 <_ZN13STM32Hardware5flushEv+0x88>
			len = twind - tfind;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 800211a:	b29a      	uxth	r2, r3
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8002122:	b29b      	uxth	r3, r3
 8002124:	1ad3      	subs	r3, r2, r3
 8002126:	81fb      	strh	r3, [r7, #14]
			HAL_UART_Transmit_DMA(huart, &(tbuf[tfind]), len);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6818      	ldr	r0, [r3, #0]
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8002132:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002136:	687a      	ldr	r2, [r7, #4]
 8002138:	4413      	add	r3, r2
 800213a:	89fa      	ldrh	r2, [r7, #14]
 800213c:	4619      	mov	r1, r3
 800213e:	f004 fa7f 	bl	8006640 <HAL_UART_Transmit_DMA>
 8002142:	e01f      	b.n	8002184 <_ZN13STM32Hardware5flushEv+0xc8>
		  }else{
			len = tbuflen - tfind;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 800214a:	b29b      	uxth	r3, r3
 800214c:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8002150:	81fb      	strh	r3, [r7, #14]
			HAL_UART_Transmit_DMA(huart, &(tbuf[tfind]), len);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6818      	ldr	r0, [r3, #0]
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 800215c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002160:	687a      	ldr	r2, [r7, #4]
 8002162:	4413      	add	r3, r2
 8002164:	89fa      	ldrh	r2, [r7, #14]
 8002166:	4619      	mov	r1, r3
 8002168:	f004 fa6a 	bl	8006640 <HAL_UART_Transmit_DMA>
			HAL_UART_Transmit_DMA(huart, (tbuf), twind);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6818      	ldr	r0, [r3, #0]
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	f503 7102 	add.w	r1, r3, #520	; 0x208
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 800217c:	b29b      	uxth	r3, r3
 800217e:	461a      	mov	r2, r3
 8002180:	f004 fa5e 	bl	8006640 <HAL_UART_Transmit_DMA>
		  }
          tfind = twind;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
        }
        mutex = false;
 8002190:	4b03      	ldr	r3, [pc, #12]	; (80021a0 <_ZN13STM32Hardware5flushEv+0xe4>)
 8002192:	2200      	movs	r2, #0
 8002194:	701a      	strb	r2, [r3, #0]
      }
    }
 8002196:	bf00      	nop
 8002198:	3710      	adds	r7, #16
 800219a:	46bd      	mov	sp, r7
 800219c:	bd80      	pop	{r7, pc}
 800219e:	bf00      	nop
 80021a0:	200002b0 	.word	0x200002b0

080021a4 <_ZN13STM32Hardware5writeEPhi>:

    void write(uint8_t* data, int length){
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b086      	sub	sp, #24
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	60f8      	str	r0, [r7, #12]
 80021ac:	60b9      	str	r1, [r7, #8]
 80021ae:	607a      	str	r2, [r7, #4]
      long unsigned int n = length;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	617b      	str	r3, [r7, #20]
      n = n <= tbuflen ? n : tbuflen;
 80021b4:	697b      	ldr	r3, [r7, #20]
 80021b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80021ba:	bf28      	it	cs
 80021bc:	f44f 7300 	movcs.w	r3, #512	; 0x200
 80021c0:	617b      	str	r3, [r7, #20]

      long unsigned int n_tail = n <= tbuflen - twind ? n : tbuflen - twind;
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 80021c8:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80021cc:	697a      	ldr	r2, [r7, #20]
 80021ce:	4293      	cmp	r3, r2
 80021d0:	bf28      	it	cs
 80021d2:	4613      	movcs	r3, r2
 80021d4:	613b      	str	r3, [r7, #16]
      memcpy(&(tbuf[twind]), data, n_tail);
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 80021dc:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80021e0:	68fa      	ldr	r2, [r7, #12]
 80021e2:	4413      	add	r3, r2
 80021e4:	693a      	ldr	r2, [r7, #16]
 80021e6:	68b9      	ldr	r1, [r7, #8]
 80021e8:	4618      	mov	r0, r3
 80021ea:	f008 fb6b 	bl	800a8c4 <memcpy>
      twind = (twind + n) & (tbuflen - 1);
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 80021f4:	697b      	ldr	r3, [r7, #20]
 80021f6:	4413      	add	r3, r2
 80021f8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

      if(n != n_tail){
 8002202:	697a      	ldr	r2, [r7, #20]
 8002204:	693b      	ldr	r3, [r7, #16]
 8002206:	429a      	cmp	r2, r3
 8002208:	d00b      	beq.n	8002222 <_ZN13STM32Hardware5writeEPhi+0x7e>
        memcpy(tbuf, &(data[n_tail]), n - n_tail);
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	f503 7002 	add.w	r0, r3, #520	; 0x208
 8002210:	68ba      	ldr	r2, [r7, #8]
 8002212:	693b      	ldr	r3, [r7, #16]
 8002214:	18d1      	adds	r1, r2, r3
 8002216:	697a      	ldr	r2, [r7, #20]
 8002218:	693b      	ldr	r3, [r7, #16]
 800221a:	1ad3      	subs	r3, r2, r3
 800221c:	461a      	mov	r2, r3
 800221e:	f008 fb51 	bl	800a8c4 <memcpy>
      }

      flush();
 8002222:	68f8      	ldr	r0, [r7, #12]
 8002224:	f7ff ff4a 	bl	80020bc <_ZN13STM32Hardware5flushEv>
    }
 8002228:	bf00      	nop
 800222a:	3718      	adds	r7, #24
 800222c:	46bd      	mov	sp, r7
 800222e:	bd80      	pop	{r7, pc}

08002230 <_ZN13STM32Hardware4timeEv>:

    unsigned long time(){ return HAL_GetTick();; }
 8002230:	b580      	push	{r7, lr}
 8002232:	b082      	sub	sp, #8
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
 8002238:	f001 faa8 	bl	800378c <HAL_GetTick>
 800223c:	4603      	mov	r3, r0
 800223e:	4618      	mov	r0, r3
 8002240:	3708      	adds	r7, #8
 8002242:	46bd      	mov	sp, r7
 8002244:	bd80      	pop	{r7, pc}
	...

08002248 <_ZN8std_msgs6StringC1Ev>:
  {
    public:
      typedef const char* _data_type;
      _data_type data;

    String():
 8002248:	b580      	push	{r7, lr}
 800224a:	b082      	sub	sp, #8
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
      data("")
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	4618      	mov	r0, r3
 8002254:	f7ff f84c 	bl	80012f0 <_ZN3ros3MsgC1Ev>
 8002258:	4a05      	ldr	r2, [pc, #20]	; (8002270 <_ZN8std_msgs6StringC1Ev+0x28>)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	601a      	str	r2, [r3, #0]
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	4a04      	ldr	r2, [pc, #16]	; (8002274 <_ZN8std_msgs6StringC1Ev+0x2c>)
 8002262:	605a      	str	r2, [r3, #4]
    {
    }
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	4618      	mov	r0, r3
 8002268:	3708      	adds	r7, #8
 800226a:	46bd      	mov	sp, r7
 800226c:	bd80      	pop	{r7, pc}
 800226e:	bf00      	nop
 8002270:	0800afe4 	.word	0x0800afe4
 8002274:	0800ad8c 	.word	0x0800ad8c

08002278 <_ZNK8std_msgs6String9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8002278:	b580      	push	{r7, lr}
 800227a:	b084      	sub	sp, #16
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
 8002280:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002282:	2300      	movs	r3, #0
 8002284:	60fb      	str	r3, [r7, #12]
      uint32_t length_data = strlen(this->data);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	685b      	ldr	r3, [r3, #4]
 800228a:	4618      	mov	r0, r3
 800228c:	f7fd ffa8 	bl	80001e0 <strlen>
 8002290:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_data);
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	683a      	ldr	r2, [r7, #0]
 8002296:	4413      	add	r3, r2
 8002298:	68b9      	ldr	r1, [r7, #8]
 800229a:	4618      	mov	r0, r3
 800229c:	f000 f8e2 	bl	8002464 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	3304      	adds	r3, #4
 80022a4:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->data, length_data);
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	683a      	ldr	r2, [r7, #0]
 80022aa:	18d0      	adds	r0, r2, r3
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	68ba      	ldr	r2, [r7, #8]
 80022b2:	4619      	mov	r1, r3
 80022b4:	f008 fb06 	bl	800a8c4 <memcpy>
      offset += length_data;
 80022b8:	68fa      	ldr	r2, [r7, #12]
 80022ba:	68bb      	ldr	r3, [r7, #8]
 80022bc:	4413      	add	r3, r2
 80022be:	60fb      	str	r3, [r7, #12]
      return offset;
 80022c0:	68fb      	ldr	r3, [r7, #12]
    }
 80022c2:	4618      	mov	r0, r3
 80022c4:	3710      	adds	r7, #16
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bd80      	pop	{r7, pc}

080022ca <_ZN8std_msgs6String11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 80022ca:	b580      	push	{r7, lr}
 80022cc:	b086      	sub	sp, #24
 80022ce:	af00      	add	r7, sp, #0
 80022d0:	6078      	str	r0, [r7, #4]
 80022d2:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80022d4:	2300      	movs	r3, #0
 80022d6:	613b      	str	r3, [r7, #16]
      uint32_t length_data;
      arrToVar(length_data, (inbuffer + offset));
 80022d8:	693b      	ldr	r3, [r7, #16]
 80022da:	683a      	ldr	r2, [r7, #0]
 80022dc:	441a      	add	r2, r3
 80022de:	f107 030c 	add.w	r3, r7, #12
 80022e2:	4611      	mov	r1, r2
 80022e4:	4618      	mov	r0, r3
 80022e6:	f000 f8db 	bl	80024a0 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80022ea:	693b      	ldr	r3, [r7, #16]
 80022ec:	3304      	adds	r3, #4
 80022ee:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_data; ++k){
 80022f0:	693b      	ldr	r3, [r7, #16]
 80022f2:	617b      	str	r3, [r7, #20]
 80022f4:	693a      	ldr	r2, [r7, #16]
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	4413      	add	r3, r2
 80022fa:	697a      	ldr	r2, [r7, #20]
 80022fc:	429a      	cmp	r2, r3
 80022fe:	d20c      	bcs.n	800231a <_ZN8std_msgs6String11deserializeEPh+0x50>
          inbuffer[k-1]=inbuffer[k];
 8002300:	683a      	ldr	r2, [r7, #0]
 8002302:	697b      	ldr	r3, [r7, #20]
 8002304:	441a      	add	r2, r3
 8002306:	697b      	ldr	r3, [r7, #20]
 8002308:	3b01      	subs	r3, #1
 800230a:	6839      	ldr	r1, [r7, #0]
 800230c:	440b      	add	r3, r1
 800230e:	7812      	ldrb	r2, [r2, #0]
 8002310:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_data; ++k){
 8002312:	697b      	ldr	r3, [r7, #20]
 8002314:	3301      	adds	r3, #1
 8002316:	617b      	str	r3, [r7, #20]
 8002318:	e7ec      	b.n	80022f4 <_ZN8std_msgs6String11deserializeEPh+0x2a>
      }
      inbuffer[offset+length_data-1]=0;
 800231a:	693a      	ldr	r2, [r7, #16]
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	4413      	add	r3, r2
 8002320:	3b01      	subs	r3, #1
 8002322:	683a      	ldr	r2, [r7, #0]
 8002324:	4413      	add	r3, r2
 8002326:	2200      	movs	r2, #0
 8002328:	701a      	strb	r2, [r3, #0]
      this->data = (char *)(inbuffer + offset-1);
 800232a:	693b      	ldr	r3, [r7, #16]
 800232c:	3b01      	subs	r3, #1
 800232e:	683a      	ldr	r2, [r7, #0]
 8002330:	441a      	add	r2, r3
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	605a      	str	r2, [r3, #4]
      offset += length_data;
 8002336:	693a      	ldr	r2, [r7, #16]
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	4413      	add	r3, r2
 800233c:	613b      	str	r3, [r7, #16]
     return offset;
 800233e:	693b      	ldr	r3, [r7, #16]
    }
 8002340:	4618      	mov	r0, r3
 8002342:	3718      	adds	r7, #24
 8002344:	46bd      	mov	sp, r7
 8002346:	bd80      	pop	{r7, pc}

08002348 <_ZN8std_msgs6String7getTypeEv>:

    const char * getType(){ return "std_msgs/String"; };
 8002348:	b480      	push	{r7}
 800234a:	b083      	sub	sp, #12
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
 8002350:	4b03      	ldr	r3, [pc, #12]	; (8002360 <_ZN8std_msgs6String7getTypeEv+0x18>)
 8002352:	4618      	mov	r0, r3
 8002354:	370c      	adds	r7, #12
 8002356:	46bd      	mov	sp, r7
 8002358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235c:	4770      	bx	lr
 800235e:	bf00      	nop
 8002360:	0800ae2c 	.word	0x0800ae2c

08002364 <_ZN8std_msgs6String6getMD5Ev>:
    const char * getMD5(){ return "992ce8a1687cec8c8bd883ec73ca41d1"; };
 8002364:	b480      	push	{r7}
 8002366:	b083      	sub	sp, #12
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
 800236c:	4b03      	ldr	r3, [pc, #12]	; (800237c <_ZN8std_msgs6String6getMD5Ev+0x18>)
 800236e:	4618      	mov	r0, r3
 8002370:	370c      	adds	r7, #12
 8002372:	46bd      	mov	sp, r7
 8002374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002378:	4770      	bx	lr
 800237a:	bf00      	nop
 800237c:	0800ae3c 	.word	0x0800ae3c

08002380 <HAL_UART_TxCpltCallback>:
std_msgs::String str_msg;
ros::Publisher chatter("chatter", &str_msg																						);
ros::Subscriber<std_msgs::String> stm32_comms("gripper_action", &str_act_msg);
std::string hello = "STM32 to Jetson!";

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 8002380:	b580      	push	{r7, lr}
 8002382:	b082      	sub	sp, #8
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
  nh.getHardware()->flush();
 8002388:	4805      	ldr	r0, [pc, #20]	; (80023a0 <HAL_UART_TxCpltCallback+0x20>)
 800238a:	f000 f973 	bl	8002674 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 800238e:	4603      	mov	r3, r0
 8002390:	4618      	mov	r0, r3
 8002392:	f7ff fe93 	bl	80020bc <_ZN13STM32Hardware5flushEv>
}
 8002396:	bf00      	nop
 8002398:	3708      	adds	r7, #8
 800239a:	46bd      	mov	sp, r7
 800239c:	bd80      	pop	{r7, pc}
 800239e:	bf00      	nop
 80023a0:	200002b4 	.word	0x200002b4

080023a4 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b082      	sub	sp, #8
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
  nh.getHardware()->reset_rbuf();
 80023ac:	4805      	ldr	r0, [pc, #20]	; (80023c4 <HAL_UART_RxCpltCallback+0x20>)
 80023ae:	f000 f961 	bl	8002674 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 80023b2:	4603      	mov	r3, r0
 80023b4:	4618      	mov	r0, r3
 80023b6:	f7ff fe42 	bl	800203e <_ZN13STM32Hardware10reset_rbufEv>
}
 80023ba:	bf00      	nop
 80023bc:	3708      	adds	r7, #8
 80023be:	46bd      	mov	sp, r7
 80023c0:	bd80      	pop	{r7, pc}
 80023c2:	bf00      	nop
 80023c4:	200002b4 	.word	0x200002b4

080023c8 <setup>:

void setup(void)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	af00      	add	r7, sp, #0
  nh.initNode();
 80023cc:	4806      	ldr	r0, [pc, #24]	; (80023e8 <setup+0x20>)
 80023ce:	f000 f95d 	bl	800268c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>
  nh.advertise(chatter);
 80023d2:	4906      	ldr	r1, [pc, #24]	; (80023ec <setup+0x24>)
 80023d4:	4804      	ldr	r0, [pc, #16]	; (80023e8 <setup+0x20>)
 80023d6:	f000 f976 	bl	80026c6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>
  nh.subscribe(stm32_comms);
 80023da:	4905      	ldr	r1, [pc, #20]	; (80023f0 <setup+0x28>)
 80023dc:	4802      	ldr	r0, [pc, #8]	; (80023e8 <setup+0x20>)
 80023de:	f000 f9a2 	bl	8002726 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E>
}
 80023e2:	bf00      	nop
 80023e4:	bd80      	pop	{r7, pc}
 80023e6:	bf00      	nop
 80023e8:	200002b4 	.word	0x200002b4
 80023ec:	20000bf8 	.word	0x20000bf8
 80023f0:	20000c0c 	.word	0x20000c0c

080023f4 <loop>:

void loop(void)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b082      	sub	sp, #8
 80023f8:	af00      	add	r7, sp, #0
  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80023fa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80023fe:	480c      	ldr	r0, [pc, #48]	; (8002430 <loop+0x3c>)
 8002400:	f002 fc67 	bl	8004cd2 <HAL_GPIO_TogglePin>
  const char* str = hello.c_str();
 8002404:	480b      	ldr	r0, [pc, #44]	; (8002434 <loop+0x40>)
 8002406:	f008 f9a6 	bl	800a756 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 800240a:	6078      	str	r0, [r7, #4]
  str_msg.data = str;
 800240c:	4a0a      	ldr	r2, [pc, #40]	; (8002438 <loop+0x44>)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6053      	str	r3, [r2, #4]
  chatter.publish(&str_msg);
 8002412:	4909      	ldr	r1, [pc, #36]	; (8002438 <loop+0x44>)
 8002414:	4809      	ldr	r0, [pc, #36]	; (800243c <loop+0x48>)
 8002416:	f7ff fdb8 	bl	8001f8a <_ZN3ros9Publisher7publishEPKNS_3MsgE>
  nh.spinOnce();
 800241a:	4809      	ldr	r0, [pc, #36]	; (8002440 <loop+0x4c>)
 800241c:	f000 f9ae 	bl	800277c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>

  HAL_Delay(1000);
 8002420:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002424:	f001 f9be 	bl	80037a4 <HAL_Delay>
}
 8002428:	bf00      	nop
 800242a:	3708      	adds	r7, #8
 800242c:	46bd      	mov	sp, r7
 800242e:	bd80      	pop	{r7, pc}
 8002430:	40020800 	.word	0x40020800
 8002434:	20000c28 	.word	0x20000c28
 8002438:	20000bf0 	.word	0x20000bf0
 800243c:	20000bf8 	.word	0x20000bf8
 8002440:	200002b4 	.word	0x200002b4

08002444 <_Z11str_act_msgRKN8std_msgs6StringE>:

void str_act_msg(const std_msgs::String& msg){
 8002444:	b580      	push	{r7, lr}
 8002446:	b082      	sub	sp, #8
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
	hello = msg.data;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	685b      	ldr	r3, [r3, #4]
 8002450:	4619      	mov	r1, r3
 8002452:	4803      	ldr	r0, [pc, #12]	; (8002460 <_Z11str_act_msgRKN8std_msgs6StringE+0x1c>)
 8002454:	f008 f97b 	bl	800a74e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
}
 8002458:	bf00      	nop
 800245a:	3708      	adds	r7, #8
 800245c:	46bd      	mov	sp, r7
 800245e:	bd80      	pop	{r7, pc}
 8002460:	20000c28 	.word	0x20000c28

08002464 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>:
    return 8;
  }

  // Copy data from variable into a byte array
  template<typename A, typename V>
  static void varToArr(A arr, const V var)
 8002464:	b480      	push	{r7}
 8002466:	b085      	sub	sp, #20
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
 800246c:	6039      	str	r1, [r7, #0]
  {
    for (size_t i = 0; i < sizeof(V); i++)
 800246e:	2300      	movs	r3, #0
 8002470:	60fb      	str	r3, [r7, #12]
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	2b03      	cmp	r3, #3
 8002476:	d80d      	bhi.n	8002494 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x30>
      arr[i] = (var >> (8 * i));
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	00db      	lsls	r3, r3, #3
 800247c:	683a      	ldr	r2, [r7, #0]
 800247e:	fa22 f103 	lsr.w	r1, r2, r3
 8002482:	687a      	ldr	r2, [r7, #4]
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	4413      	add	r3, r2
 8002488:	b2ca      	uxtb	r2, r1
 800248a:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	3301      	adds	r3, #1
 8002490:	60fb      	str	r3, [r7, #12]
 8002492:	e7ee      	b.n	8002472 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0xe>
  }
 8002494:	bf00      	nop
 8002496:	3714      	adds	r7, #20
 8002498:	46bd      	mov	sp, r7
 800249a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249e:	4770      	bx	lr

080024a0 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>:

  // Copy data from a byte array into variable
  template<typename V, typename A>
  static void arrToVar(V& var, const A arr)
 80024a0:	b480      	push	{r7}
 80024a2:	b085      	sub	sp, #20
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
 80024a8:	6039      	str	r1, [r7, #0]
  {
    var = 0;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	2200      	movs	r2, #0
 80024ae:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 80024b0:	2300      	movs	r3, #0
 80024b2:	60fb      	str	r3, [r7, #12]
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	2b03      	cmp	r3, #3
 80024b8:	d811      	bhi.n	80024de <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x3e>
      var |= (arr[i] << (8 * i));
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	6839      	ldr	r1, [r7, #0]
 80024c0:	68fa      	ldr	r2, [r7, #12]
 80024c2:	440a      	add	r2, r1
 80024c4:	7812      	ldrb	r2, [r2, #0]
 80024c6:	4611      	mov	r1, r2
 80024c8:	68fa      	ldr	r2, [r7, #12]
 80024ca:	00d2      	lsls	r2, r2, #3
 80024cc:	fa01 f202 	lsl.w	r2, r1, r2
 80024d0:	431a      	orrs	r2, r3
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	3301      	adds	r3, #1
 80024da:	60fb      	str	r3, [r7, #12]
 80024dc:	e7ea      	b.n	80024b4 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x14>
  }
 80024de:	bf00      	nop
 80024e0:	3714      	adds	r7, #20
 80024e2:	46bd      	mov	sp, r7
 80024e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e8:	4770      	bx	lr
	...

080024ec <_ZN3ros15NodeHandleBase_C1Ev>:
#include "ros/msg.h"

namespace ros
{

class NodeHandleBase_
 80024ec:	b480      	push	{r7}
 80024ee:	b083      	sub	sp, #12
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
 80024f4:	4a04      	ldr	r2, [pc, #16]	; (8002508 <_ZN3ros15NodeHandleBase_C1Ev+0x1c>)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	601a      	str	r2, [r3, #0]
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	4618      	mov	r0, r3
 80024fe:	370c      	adds	r7, #12
 8002500:	46bd      	mov	sp, r7
 8002502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002506:	4770      	bx	lr
 8002508:	0800b014 	.word	0x0800b014

0800250c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>:

  /*
   * Setup Functions
   */
public:
  NodeHandle_() : configured_(false)
 800250c:	b580      	push	{r7, lr}
 800250e:	b086      	sub	sp, #24
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	4618      	mov	r0, r3
 8002518:	f7ff ffe8 	bl	80024ec <_ZN3ros15NodeHandleBase_C1Ev>
 800251c:	4a3a      	ldr	r2, [pc, #232]	; (8002608 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xfc>)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	601a      	str	r2, [r3, #0]
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	3304      	adds	r3, #4
 8002526:	4618      	mov	r0, r3
 8002528:	f7ff fd62 	bl	8001ff0 <_ZN13STM32HardwareC1Ev>
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2200      	movs	r2, #0
 8002530:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	f603 1314 	addw	r3, r3, #2324	; 0x914
 800253a:	4618      	mov	r0, r3
 800253c:	f7ff fa4c 	bl	80019d8 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>
  {

    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 8002540:	2300      	movs	r3, #0
 8002542:	617b      	str	r3, [r7, #20]
 8002544:	697b      	ldr	r3, [r7, #20]
 8002546:	2b18      	cmp	r3, #24
 8002548:	d80b      	bhi.n	8002562 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x56>
      publishers[i] = 0;
 800254a:	687a      	ldr	r2, [r7, #4]
 800254c:	697b      	ldr	r3, [r7, #20]
 800254e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002552:	009b      	lsls	r3, r3, #2
 8002554:	4413      	add	r3, r2
 8002556:	2200      	movs	r2, #0
 8002558:	605a      	str	r2, [r3, #4]
    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 800255a:	697b      	ldr	r3, [r7, #20]
 800255c:	3301      	adds	r3, #1
 800255e:	617b      	str	r3, [r7, #20]
 8002560:	e7f0      	b.n	8002544 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x38>

    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 8002562:	2300      	movs	r3, #0
 8002564:	613b      	str	r3, [r7, #16]
 8002566:	693b      	ldr	r3, [r7, #16]
 8002568:	2b18      	cmp	r3, #24
 800256a:	d80a      	bhi.n	8002582 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x76>
      subscribers[i] = 0;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	693a      	ldr	r2, [r7, #16]
 8002570:	f202 2222 	addw	r2, r2, #546	; 0x222
 8002574:	2100      	movs	r1, #0
 8002576:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 800257a:	693b      	ldr	r3, [r7, #16]
 800257c:	3301      	adds	r3, #1
 800257e:	613b      	str	r3, [r7, #16]
 8002580:	e7f1      	b.n	8002566 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x5a>

    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 8002582:	2300      	movs	r3, #0
 8002584:	60fb      	str	r3, [r7, #12]
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800258c:	d20a      	bcs.n	80025a4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x98>
      message_in[i] = 0;
 800258e:	687a      	ldr	r2, [r7, #4]
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	4413      	add	r3, r2
 8002594:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8002598:	2200      	movs	r2, #0
 800259a:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	3301      	adds	r3, #1
 80025a0:	60fb      	str	r3, [r7, #12]
 80025a2:	e7f0      	b.n	8002586 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x7a>

    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 80025a4:	2300      	movs	r3, #0
 80025a6:	60bb      	str	r3, [r7, #8]
 80025a8:	68bb      	ldr	r3, [r7, #8]
 80025aa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80025ae:	d20a      	bcs.n	80025c6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xba>
      message_out[i] = 0;
 80025b0:	687a      	ldr	r2, [r7, #4]
 80025b2:	68bb      	ldr	r3, [r7, #8]
 80025b4:	4413      	add	r3, r2
 80025b6:	f203 6324 	addw	r3, r3, #1572	; 0x624
 80025ba:	2200      	movs	r2, #0
 80025bc:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 80025be:	68bb      	ldr	r3, [r7, #8]
 80025c0:	3301      	adds	r3, #1
 80025c2:	60bb      	str	r3, [r7, #8]
 80025c4:	e7f0      	b.n	80025a8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x9c>

    req_param_resp.ints_length = 0;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	2200      	movs	r2, #0
 80025ca:	f8c3 2918 	str.w	r2, [r3, #2328]	; 0x918
    req_param_resp.ints = NULL;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	2200      	movs	r2, #0
 80025d2:	f8c3 2920 	str.w	r2, [r3, #2336]	; 0x920
    req_param_resp.floats_length = 0;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	2200      	movs	r2, #0
 80025da:	f8c3 2924 	str.w	r2, [r3, #2340]	; 0x924
    req_param_resp.floats = NULL;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	2200      	movs	r2, #0
 80025e2:	f8c3 292c 	str.w	r2, [r3, #2348]	; 0x92c
    req_param_resp.ints_length = 0;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	2200      	movs	r2, #0
 80025ea:	f8c3 2918 	str.w	r2, [r3, #2328]	; 0x918
    req_param_resp.ints = NULL;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	2200      	movs	r2, #0
 80025f2:	f8c3 2920 	str.w	r2, [r3, #2336]	; 0x920

    spin_timeout_ = 0;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	2200      	movs	r2, #0
 80025fa:	f8c3 2420 	str.w	r2, [r3, #1056]	; 0x420
  }
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	4618      	mov	r0, r3
 8002602:	3718      	adds	r7, #24
 8002604:	46bd      	mov	sp, r7
 8002606:	bd80      	pop	{r7, pc}
 8002608:	0800afd0 	.word	0x0800afd0

0800260c <_ZN3ros11Subscriber_C1Ev>:

namespace ros
{

/* Base class for objects subscribers. */
class Subscriber_
 800260c:	b480      	push	{r7}
 800260e:	b083      	sub	sp, #12
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
 8002614:	4a04      	ldr	r2, [pc, #16]	; (8002628 <_ZN3ros11Subscriber_C1Ev+0x1c>)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	601a      	str	r2, [r3, #0]
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	4618      	mov	r0, r3
 800261e:	370c      	adds	r7, #12
 8002620:	46bd      	mov	sp, r7
 8002622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002626:	4770      	bx	lr
 8002628:	0800affc 	.word	0x0800affc

0800262c <_ZN3ros10SubscriberIN8std_msgs6StringEvEC1EPKcPFvRKS2_Ei>:
{
public:
  typedef void(*CallbackT)(const MsgT&);
  MsgT msg;

  Subscriber(const char * topic_name, CallbackT cb, int endpoint = rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
 800262c:	b580      	push	{r7, lr}
 800262e:	b084      	sub	sp, #16
 8002630:	af00      	add	r7, sp, #0
 8002632:	60f8      	str	r0, [r7, #12]
 8002634:	60b9      	str	r1, [r7, #8]
 8002636:	607a      	str	r2, [r7, #4]
 8002638:	603b      	str	r3, [r7, #0]
    cb_(cb),
    endpoint_(endpoint)
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	4618      	mov	r0, r3
 800263e:	f7ff ffe5 	bl	800260c <_ZN3ros11Subscriber_C1Ev>
 8002642:	4a0b      	ldr	r2, [pc, #44]	; (8002670 <_ZN3ros10SubscriberIN8std_msgs6StringEvEC1EPKcPFvRKS2_Ei+0x44>)
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	601a      	str	r2, [r3, #0]
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	330c      	adds	r3, #12
 800264c:	4618      	mov	r0, r3
 800264e:	f7ff fdfb 	bl	8002248 <_ZN8std_msgs6StringC1Ev>
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	687a      	ldr	r2, [r7, #4]
 8002656:	615a      	str	r2, [r3, #20]
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	683a      	ldr	r2, [r7, #0]
 800265c:	619a      	str	r2, [r3, #24]
  {
    topic_ = topic_name;
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	68ba      	ldr	r2, [r7, #8]
 8002662:	609a      	str	r2, [r3, #8]
  };
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	4618      	mov	r0, r3
 8002668:	3710      	adds	r7, #16
 800266a:	46bd      	mov	sp, r7
 800266c:	bd80      	pop	{r7, pc}
 800266e:	bf00      	nop
 8002670:	0800afb8 	.word	0x0800afb8

08002674 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>:

  Hardware* getHardware()
 8002674:	b480      	push	{r7}
 8002676:	b083      	sub	sp, #12
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
  {
    return &hardware_;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	3304      	adds	r3, #4
  }
 8002680:	4618      	mov	r0, r3
 8002682:	370c      	adds	r7, #12
 8002684:	46bd      	mov	sp, r7
 8002686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268a:	4770      	bx	lr

0800268c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>:

  /* Start serial, initialize buffers */
  void initNode()
 800268c:	b580      	push	{r7, lr}
 800268e:	b082      	sub	sp, #8
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
  {
    hardware_.init();
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	3304      	adds	r3, #4
 8002698:	4618      	mov	r0, r3
 800269a:	f7ff fcc5 	bl	8002028 <_ZN13STM32Hardware4initEv>
    mode_ = 0;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	2200      	movs	r2, #0
 80026a2:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
    bytes_ = 0;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	2200      	movs	r2, #0
 80026aa:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
    index_ = 0;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	2200      	movs	r2, #0
 80026b2:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
    topic_ = 0;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	2200      	movs	r2, #0
 80026ba:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
  };
 80026be:	bf00      	nop
 80026c0:	3708      	adds	r7, #8
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bd80      	pop	{r7, pc}

080026c6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>:
  /********************************************************************
   * Topic Management
   */

  /* Register a new publisher */
  bool advertise(Publisher & p)
 80026c6:	b480      	push	{r7}
 80026c8:	b085      	sub	sp, #20
 80026ca:	af00      	add	r7, sp, #0
 80026cc:	6078      	str	r0, [r7, #4]
 80026ce:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 80026d0:	2300      	movs	r3, #0
 80026d2:	60fb      	str	r3, [r7, #12]
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	2b18      	cmp	r3, #24
 80026d8:	dc1e      	bgt.n	8002718 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x52>
    {
      if (publishers[i] == 0) // empty slot
 80026da:	687a      	ldr	r2, [r7, #4]
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80026e2:	009b      	lsls	r3, r3, #2
 80026e4:	4413      	add	r3, r2
 80026e6:	685b      	ldr	r3, [r3, #4]
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d111      	bne.n	8002710 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x4a>
      {
        publishers[i] = &p;
 80026ec:	687a      	ldr	r2, [r7, #4]
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80026f4:	009b      	lsls	r3, r3, #2
 80026f6:	4413      	add	r3, r2
 80026f8:	683a      	ldr	r2, [r7, #0]
 80026fa:	605a      	str	r2, [r3, #4]
        p.id_ = i + 100 + MAX_SUBSCRIBERS;
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	f103 027d 	add.w	r2, r3, #125	; 0x7d
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	609a      	str	r2, [r3, #8]
        p.nh_ = this;
 8002706:	687a      	ldr	r2, [r7, #4]
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	60da      	str	r2, [r3, #12]
        return true;
 800270c:	2301      	movs	r3, #1
 800270e:	e004      	b.n	800271a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x54>
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	3301      	adds	r3, #1
 8002714:	60fb      	str	r3, [r7, #12]
 8002716:	e7dd      	b.n	80026d4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0xe>
      }
    }
    return false;
 8002718:	2300      	movs	r3, #0
  }
 800271a:	4618      	mov	r0, r3
 800271c:	3714      	adds	r7, #20
 800271e:	46bd      	mov	sp, r7
 8002720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002724:	4770      	bx	lr

08002726 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E>:

  /* Register a new subscriber */
  bool subscribe(Subscriber_& s)
 8002726:	b480      	push	{r7}
 8002728:	b085      	sub	sp, #20
 800272a:	af00      	add	r7, sp, #0
 800272c:	6078      	str	r0, [r7, #4]
 800272e:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 8002730:	2300      	movs	r3, #0
 8002732:	60fb      	str	r3, [r7, #12]
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	2b18      	cmp	r3, #24
 8002738:	dc19      	bgt.n	800276e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E+0x48>
    {
      if (subscribers[i] == 0) // empty slot
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	68fa      	ldr	r2, [r7, #12]
 800273e:	f202 2222 	addw	r2, r2, #546	; 0x222
 8002742:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002746:	2b00      	cmp	r3, #0
 8002748:	d10d      	bne.n	8002766 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E+0x40>
      {
        subscribers[i] = &s;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	68fa      	ldr	r2, [r7, #12]
 800274e:	f202 2222 	addw	r2, r2, #546	; 0x222
 8002752:	6839      	ldr	r1, [r7, #0]
 8002754:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        s.id_ = i + 100;
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	f103 0264 	add.w	r2, r3, #100	; 0x64
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	605a      	str	r2, [r3, #4]
        return true;
 8002762:	2301      	movs	r3, #1
 8002764:	e004      	b.n	8002770 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E+0x4a>
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	3301      	adds	r3, #1
 800276a:	60fb      	str	r3, [r7, #12]
 800276c:	e7e2      	b.n	8002734 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E+0xe>
      }
    }
    return false;
 800276e:	2300      	movs	r3, #0
  }
 8002770:	4618      	mov	r0, r3
 8002772:	3714      	adds	r7, #20
 8002774:	46bd      	mov	sp, r7
 8002776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277a:	4770      	bx	lr

0800277c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>:
  virtual int spinOnce()
 800277c:	b580      	push	{r7, lr}
 800277e:	b084      	sub	sp, #16
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
    uint32_t c_time = hardware_.time();
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	3304      	adds	r3, #4
 8002788:	4618      	mov	r0, r3
 800278a:	f7ff fd51 	bl	8002230 <_ZN13STM32Hardware4timeEv>
 800278e:	60f8      	str	r0, [r7, #12]
    if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200))
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	f8d3 3908 	ldr.w	r3, [r3, #2312]	; 0x908
 8002796:	68fa      	ldr	r2, [r7, #12]
 8002798:	1ad3      	subs	r3, r2, r3
 800279a:	f642 22f8 	movw	r2, #11000	; 0x2af8
 800279e:	4293      	cmp	r3, r2
 80027a0:	d903      	bls.n	80027aa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2e>
      configured_ = false;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	2200      	movs	r2, #0
 80027a6:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
    if (mode_ != MODE_FIRST_FF)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d009      	beq.n	80027c8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      if (c_time > last_msg_timeout_time)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	f8d3 390c 	ldr.w	r3, [r3, #2316]	; 0x90c
 80027ba:	68fa      	ldr	r2, [r7, #12]
 80027bc:	429a      	cmp	r2, r3
 80027be:	d903      	bls.n	80027c8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2200      	movs	r2, #0
 80027c4:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
      if (spin_timeout_ > 0)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d014      	beq.n	80027fc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x80>
        if ((hardware_.time() - c_time) > spin_timeout_)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	3304      	adds	r3, #4
 80027d6:	4618      	mov	r0, r3
 80027d8:	f7ff fd2a 	bl	8002230 <_ZN13STM32Hardware4timeEv>
 80027dc:	4602      	mov	r2, r0
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	1ad2      	subs	r2, r2, r3
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 80027e8:	429a      	cmp	r2, r3
 80027ea:	bf8c      	ite	hi
 80027ec:	2301      	movhi	r3, #1
 80027ee:	2300      	movls	r3, #0
 80027f0:	b2db      	uxtb	r3, r3
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d002      	beq.n	80027fc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x80>
          return SPIN_TIMEOUT;
 80027f6:	f06f 0301 	mvn.w	r3, #1
 80027fa:	e194      	b.n	8002b26 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
      int data = hardware_.read();
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	3304      	adds	r3, #4
 8002800:	4618      	mov	r0, r3
 8002802:	f7ff fc2d 	bl	8002060 <_ZN13STM32Hardware4readEv>
 8002806:	60b8      	str	r0, [r7, #8]
      if (data < 0)
 8002808:	68bb      	ldr	r3, [r7, #8]
 800280a:	2b00      	cmp	r3, #0
 800280c:	f2c0 8174 	blt.w	8002af8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x37c>
      checksum_ += data;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	f8d3 28fc 	ldr.w	r2, [r3, #2300]	; 0x8fc
 8002816:	68bb      	ldr	r3, [r7, #8]
 8002818:	441a      	add	r2, r3
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8002826:	2b07      	cmp	r3, #7
 8002828:	d11e      	bne.n	8002868 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0xec>
        message_in[index_++] = data;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	f8d3 38f8 	ldr.w	r3, [r3, #2296]	; 0x8f8
 8002830:	1c59      	adds	r1, r3, #1
 8002832:	687a      	ldr	r2, [r7, #4]
 8002834:	f8c2 18f8 	str.w	r1, [r2, #2296]	; 0x8f8
 8002838:	68ba      	ldr	r2, [r7, #8]
 800283a:	b2d1      	uxtb	r1, r2
 800283c:	687a      	ldr	r2, [r7, #4]
 800283e:	4413      	add	r3, r2
 8002840:	460a      	mov	r2, r1
 8002842:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
        bytes_--;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 800284c:	1e5a      	subs	r2, r3, #1
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        if (bytes_ == 0)                 /* is message complete? if so, checksum */
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 800285a:	2b00      	cmp	r3, #0
 800285c:	d1b4      	bne.n	80027c8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	2208      	movs	r2, #8
 8002862:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8002866:	e7af      	b.n	80027c8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_FIRST_FF)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800286e:	2b00      	cmp	r3, #0
 8002870:	d128      	bne.n	80028c4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x148>
        if (data == 0xff)
 8002872:	68bb      	ldr	r3, [r7, #8]
 8002874:	2bff      	cmp	r3, #255	; 0xff
 8002876:	d10d      	bne.n	8002894 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x118>
          mode_++;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800287e:	1c5a      	adds	r2, r3, #1
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	f103 0214 	add.w	r2, r3, #20
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	f8c3 290c 	str.w	r2, [r3, #2316]	; 0x90c
 8002892:	e799      	b.n	80027c8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000))
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	3304      	adds	r3, #4
 8002898:	4618      	mov	r0, r3
 800289a:	f7ff fcc9 	bl	8002230 <_ZN13STM32Hardware4timeEv>
 800289e:	4602      	mov	r2, r0
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	1ad3      	subs	r3, r2, r3
 80028a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80028a8:	4293      	cmp	r3, r2
 80028aa:	bf8c      	ite	hi
 80028ac:	2301      	movhi	r3, #1
 80028ae:	2300      	movls	r3, #0
 80028b0:	b2db      	uxtb	r3, r3
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d088      	beq.n	80027c8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          configured_ = false;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	2200      	movs	r2, #0
 80028ba:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
          return SPIN_TIMEOUT;
 80028be:	f06f 0301 	mvn.w	r3, #1
 80028c2:	e130      	b.n	8002b26 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
      else if (mode_ == MODE_PROTOCOL_VER)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80028ca:	2b01      	cmp	r3, #1
 80028cc:	d118      	bne.n	8002900 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x184>
        if (data == PROTOCOL_VER)
 80028ce:	68bb      	ldr	r3, [r7, #8]
 80028d0:	2bfe      	cmp	r3, #254	; 0xfe
 80028d2:	d107      	bne.n	80028e4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x168>
          mode_++;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80028da:	1c5a      	adds	r2, r3, #1
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 80028e2:	e771      	b.n	80027c8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2200      	movs	r2, #0
 80028e8:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
          if (configured_ == false)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	f47f af68 	bne.w	80027c8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            requestSyncTime();  /* send a msg back showing our protocol version */
 80028f8:	6878      	ldr	r0, [r7, #4]
 80028fa:	f000 f918 	bl	8002b2e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
 80028fe:	e763      	b.n	80027c8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_L)      /* bottom half of message size */
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8002906:	2b02      	cmp	r3, #2
 8002908:	d113      	bne.n	8002932 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1b6>
        bytes_ = data;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	68ba      	ldr	r2, [r7, #8]
 800290e:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        index_ = 0;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	2200      	movs	r2, #0
 8002916:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
        mode_++;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8002920:	1c5a      	adds	r2, r3, #1
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        checksum_ = data;               /* first byte for calculating size checksum */
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	68ba      	ldr	r2, [r7, #8]
 800292c:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
 8002930:	e74a      	b.n	80027c8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_H)      /* top half of message size */
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8002938:	2b03      	cmp	r3, #3
 800293a:	d110      	bne.n	800295e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1e2>
        bytes_ += data << 8;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	f8d3 28f0 	ldr.w	r2, [r3, #2288]	; 0x8f0
 8002942:	68bb      	ldr	r3, [r7, #8]
 8002944:	021b      	lsls	r3, r3, #8
 8002946:	441a      	add	r2, r3
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        mode_++;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8002954:	1c5a      	adds	r2, r3, #1
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 800295c:	e734      	b.n	80027c8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_CHECKSUM)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8002964:	2b04      	cmp	r3, #4
 8002966:	d116      	bne.n	8002996 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x21a>
        if ((checksum_ % 256) == 255)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	; 0x8fc
 800296e:	425a      	negs	r2, r3
 8002970:	b2db      	uxtb	r3, r3
 8002972:	b2d2      	uxtb	r2, r2
 8002974:	bf58      	it	pl
 8002976:	4253      	negpl	r3, r2
 8002978:	2bff      	cmp	r3, #255	; 0xff
 800297a:	d107      	bne.n	800298c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x210>
          mode_++;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8002982:	1c5a      	adds	r2, r3, #1
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 800298a:	e71d      	b.n	80027c8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2200      	movs	r2, #0
 8002990:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8002994:	e718      	b.n	80027c8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_L)     /* bottom half of topic id */
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800299c:	2b05      	cmp	r3, #5
 800299e:	d10f      	bne.n	80029c0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x244>
        topic_ = data;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	68ba      	ldr	r2, [r7, #8]
 80029a4:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
        mode_++;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80029ae:	1c5a      	adds	r2, r3, #1
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        checksum_ = data;               /* first byte included in checksum */
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	68ba      	ldr	r2, [r7, #8]
 80029ba:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
 80029be:	e703      	b.n	80027c8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_H)     /* top half of topic id */
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80029c6:	2b06      	cmp	r3, #6
 80029c8:	d117      	bne.n	80029fa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x27e>
        topic_ += data << 8;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	f8d3 28f4 	ldr.w	r2, [r3, #2292]	; 0x8f4
 80029d0:	68bb      	ldr	r3, [r7, #8]
 80029d2:	021b      	lsls	r3, r3, #8
 80029d4:	441a      	add	r2, r3
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
        mode_ = MODE_MESSAGE;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2207      	movs	r2, #7
 80029e0:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        if (bytes_ == 0)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	f47f aeec 	bne.w	80027c8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2208      	movs	r2, #8
 80029f4:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 80029f8:	e6e6      	b.n	80027c8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_MSG_CHECKSUM)    /* do checksum */
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8002a00:	2b08      	cmp	r3, #8
 8002a02:	f47f aee1 	bne.w	80027c8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	2200      	movs	r2, #0
 8002a0a:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        if ((checksum_ % 256) == 255)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	; 0x8fc
 8002a14:	425a      	negs	r2, r3
 8002a16:	b2db      	uxtb	r3, r3
 8002a18:	b2d2      	uxtb	r2, r2
 8002a1a:	bf58      	it	pl
 8002a1c:	4253      	negpl	r3, r2
 8002a1e:	2bff      	cmp	r3, #255	; 0xff
 8002a20:	f47f aed2 	bne.w	80027c8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          if (topic_ == TopicInfo::ID_PUBLISHER)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d110      	bne.n	8002a50 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2d4>
            requestSyncTime();
 8002a2e:	6878      	ldr	r0, [r7, #4]
 8002a30:	f000 f87d 	bl	8002b2e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
            negotiateTopics();
 8002a34:	6878      	ldr	r0, [r7, #4]
 8002a36:	f000 f898 	bl	8002b6a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>
            last_sync_time = c_time;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	68fa      	ldr	r2, [r7, #12]
 8002a3e:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
            last_sync_receive_time = c_time;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	68fa      	ldr	r2, [r7, #12]
 8002a46:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
            return SPIN_ERR;
 8002a4a:	f04f 33ff 	mov.w	r3, #4294967295
 8002a4e:	e06a      	b.n	8002b26 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
          else if (topic_ == TopicInfo::ID_TIME)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8002a56:	2b0a      	cmp	r3, #10
 8002a58:	d107      	bne.n	8002a6a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2ee>
            syncTime(message_in);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8002a60:	4619      	mov	r1, r3
 8002a62:	6878      	ldr	r0, [r7, #4]
 8002a64:	f000 f960 	bl	8002d28 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>
 8002a68:	e6ae      	b.n	80027c8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8002a70:	2b06      	cmp	r3, #6
 8002a72:	d10e      	bne.n	8002a92 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x316>
            req_param_resp.deserialize(message_in);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	f603 1214 	addw	r2, r3, #2324	; 0x914
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8002a80:	4619      	mov	r1, r3
 8002a82:	4610      	mov	r0, r2
 8002a84:	f7ff f8dd 	bl	8001c42 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>
            param_recieved = true;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2201      	movs	r2, #1
 8002a8c:	f883 2910 	strb.w	r2, [r3, #2320]	; 0x910
 8002a90:	e69a      	b.n	80027c8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_TX_STOP)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8002a98:	2b0b      	cmp	r3, #11
 8002a9a:	d104      	bne.n	8002aa6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x32a>
            configured_ = false;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
 8002aa4:	e690      	b.n	80027c8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            if (subscribers[topic_ - 100])
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8002aac:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	f202 2222 	addw	r2, r2, #546	; 0x222
 8002ab6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	f43f ae84 	beq.w	80027c8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
              subscribers[topic_ - 100]->callback(message_in);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8002ac6:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	f202 2222 	addw	r2, r2, #546	; 0x222
 8002ad0:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8002ada:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	f202 2222 	addw	r2, r2, #546	; 0x222
 8002ae4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	687a      	ldr	r2, [r7, #4]
 8002aee:	f202 4224 	addw	r2, r2, #1060	; 0x424
 8002af2:	4611      	mov	r1, r2
 8002af4:	4798      	blx	r3
    while (true)
 8002af6:	e667      	b.n	80027c8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        break;
 8002af8:	bf00      	nop
    if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d00f      	beq.n	8002b24 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3a8>
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	f8d3 3904 	ldr.w	r3, [r3, #2308]	; 0x904
 8002b0a:	68fa      	ldr	r2, [r7, #12]
 8002b0c:	1ad3      	subs	r3, r2, r3
 8002b0e:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d906      	bls.n	8002b24 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3a8>
      requestSyncTime();
 8002b16:	6878      	ldr	r0, [r7, #4]
 8002b18:	f000 f809 	bl	8002b2e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
      last_sync_time = c_time;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	68fa      	ldr	r2, [r7, #12]
 8002b20:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
    return SPIN_OK;
 8002b24:	2300      	movs	r3, #0
  }
 8002b26:	4618      	mov	r0, r3
 8002b28:	3710      	adds	r7, #16
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	bd80      	pop	{r7, pc}

08002b2e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>:
  void requestSyncTime()
 8002b2e:	b580      	push	{r7, lr}
 8002b30:	b086      	sub	sp, #24
 8002b32:	af00      	add	r7, sp, #0
 8002b34:	6078      	str	r0, [r7, #4]
    std_msgs::Time t;
 8002b36:	f107 030c 	add.w	r3, r7, #12
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	f7fe fbe8 	bl	8001310 <_ZN8std_msgs4TimeC1Ev>
    publish(TopicInfo::ID_TIME, &t);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f107 020c 	add.w	r2, r7, #12
 8002b4a:	210a      	movs	r1, #10
 8002b4c:	6878      	ldr	r0, [r7, #4]
 8002b4e:	4798      	blx	r3
    rt_time = hardware_.time();
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	3304      	adds	r3, #4
 8002b54:	4618      	mov	r0, r3
 8002b56:	f7ff fb6b 	bl	8002230 <_ZN13STM32Hardware4timeEv>
 8002b5a:	4602      	mov	r2, r0
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
  }
 8002b62:	bf00      	nop
 8002b64:	3718      	adds	r7, #24
 8002b66:	46bd      	mov	sp, r7
 8002b68:	bd80      	pop	{r7, pc}

08002b6a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>:
    bool v = advertise(srv.pub);
    bool w = subscribe(srv);
    return v && w;
  }

  void negotiateTopics()
 8002b6a:	b590      	push	{r4, r7, lr}
 8002b6c:	b08b      	sub	sp, #44	; 0x2c
 8002b6e:	af00      	add	r7, sp, #0
 8002b70:	6078      	str	r0, [r7, #4]
  {
    rosserial_msgs::TopicInfo ti;
 8002b72:	f107 030c 	add.w	r3, r7, #12
 8002b76:	4618      	mov	r0, r3
 8002b78:	f7fe fcba 	bl	80014f0 <_ZN14rosserial_msgs9TopicInfoC1Ev>
    int i;
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	627b      	str	r3, [r7, #36]	; 0x24
 8002b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b82:	2b18      	cmp	r3, #24
 8002b84:	dc63      	bgt.n	8002c4e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xe4>
    {
      if (publishers[i] != 0) // non-empty slot
 8002b86:	687a      	ldr	r2, [r7, #4]
 8002b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b8a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002b8e:	009b      	lsls	r3, r3, #2
 8002b90:	4413      	add	r3, r2
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d056      	beq.n	8002c46 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xdc>
      {
        ti.topic_id = publishers[i]->id_;
 8002b98:	687a      	ldr	r2, [r7, #4]
 8002b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b9c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002ba0:	009b      	lsls	r3, r3, #2
 8002ba2:	4413      	add	r3, r2
 8002ba4:	685b      	ldr	r3, [r3, #4]
 8002ba6:	689b      	ldr	r3, [r3, #8]
 8002ba8:	b29b      	uxth	r3, r3
 8002baa:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) publishers[i]->topic_;
 8002bac:	687a      	ldr	r2, [r7, #4]
 8002bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bb0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002bb4:	009b      	lsls	r3, r3, #2
 8002bb6:	4413      	add	r3, r2
 8002bb8:	685b      	ldr	r3, [r3, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) publishers[i]->msg_->getType();
 8002bbe:	687a      	ldr	r2, [r7, #4]
 8002bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bc2:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002bc6:	009b      	lsls	r3, r3, #2
 8002bc8:	4413      	add	r3, r2
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	6859      	ldr	r1, [r3, #4]
 8002bce:	687a      	ldr	r2, [r7, #4]
 8002bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bd2:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002bd6:	009b      	lsls	r3, r3, #2
 8002bd8:	4413      	add	r3, r2
 8002bda:	685b      	ldr	r3, [r3, #4]
 8002bdc:	685b      	ldr	r3, [r3, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	3308      	adds	r3, #8
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4608      	mov	r0, r1
 8002be6:	4798      	blx	r3
 8002be8:	4603      	mov	r3, r0
 8002bea:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 8002bec:	687a      	ldr	r2, [r7, #4]
 8002bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bf0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002bf4:	009b      	lsls	r3, r3, #2
 8002bf6:	4413      	add	r3, r2
 8002bf8:	685b      	ldr	r3, [r3, #4]
 8002bfa:	6859      	ldr	r1, [r3, #4]
 8002bfc:	687a      	ldr	r2, [r7, #4]
 8002bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c00:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002c04:	009b      	lsls	r3, r3, #2
 8002c06:	4413      	add	r3, r2
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	685b      	ldr	r3, [r3, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	330c      	adds	r3, #12
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	4608      	mov	r0, r1
 8002c14:	4798      	blx	r3
 8002c16:	4603      	mov	r3, r0
 8002c18:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = OUTPUT_SIZE;
 8002c1a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002c1e:	623b      	str	r3, [r7, #32]
        publish(publishers[i]->getEndpointType(), &ti);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	681c      	ldr	r4, [r3, #0]
 8002c26:	687a      	ldr	r2, [r7, #4]
 8002c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c2a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002c2e:	009b      	lsls	r3, r3, #2
 8002c30:	4413      	add	r3, r2
 8002c32:	685b      	ldr	r3, [r3, #4]
 8002c34:	4618      	mov	r0, r3
 8002c36:	f7ff f9bc 	bl	8001fb2 <_ZN3ros9Publisher15getEndpointTypeEv>
 8002c3a:	4601      	mov	r1, r0
 8002c3c:	f107 030c 	add.w	r3, r7, #12
 8002c40:	461a      	mov	r2, r3
 8002c42:	6878      	ldr	r0, [r7, #4]
 8002c44:	47a0      	blx	r4
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8002c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c48:	3301      	adds	r3, #1
 8002c4a:	627b      	str	r3, [r7, #36]	; 0x24
 8002c4c:	e798      	b.n	8002b80 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x16>
      }
    }
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8002c4e:	2300      	movs	r3, #0
 8002c50:	627b      	str	r3, [r7, #36]	; 0x24
 8002c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c54:	2b18      	cmp	r3, #24
 8002c56:	dc5f      	bgt.n	8002d18 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1ae>
    {
      if (subscribers[i] != 0) // non-empty slot
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c5c:	f202 2222 	addw	r2, r2, #546	; 0x222
 8002c60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d053      	beq.n	8002d10 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1a6>
      {
        ti.topic_id = subscribers[i]->id_;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c6c:	f202 2222 	addw	r2, r2, #546	; 0x222
 8002c70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c74:	685b      	ldr	r3, [r3, #4]
 8002c76:	b29b      	uxth	r3, r3
 8002c78:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) subscribers[i]->topic_;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c7e:	f202 2222 	addw	r2, r2, #546	; 0x222
 8002c82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c86:	689b      	ldr	r3, [r3, #8]
 8002c88:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) subscribers[i]->getMsgType();
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c8e:	f202 2222 	addw	r2, r2, #546	; 0x222
 8002c92:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c9a:	f202 2222 	addw	r2, r2, #546	; 0x222
 8002c9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	3308      	adds	r3, #8
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	4608      	mov	r0, r1
 8002caa:	4798      	blx	r3
 8002cac:	4603      	mov	r3, r0
 8002cae:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002cb4:	f202 2222 	addw	r2, r2, #546	; 0x222
 8002cb8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002cc0:	f202 2222 	addw	r2, r2, #546	; 0x222
 8002cc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	330c      	adds	r3, #12
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	4608      	mov	r0, r1
 8002cd0:	4798      	blx	r3
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = INPUT_SIZE;
 8002cd6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002cda:	623b      	str	r3, [r7, #32]
        publish(subscribers[i]->getEndpointType(), &ti);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	681c      	ldr	r4, [r3, #0]
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ce6:	f202 2222 	addw	r2, r2, #546	; 0x222
 8002cea:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002cf2:	f202 2222 	addw	r2, r2, #546	; 0x222
 8002cf6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	3304      	adds	r3, #4
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	4608      	mov	r0, r1
 8002d02:	4798      	blx	r3
 8002d04:	4601      	mov	r1, r0
 8002d06:	f107 030c 	add.w	r3, r7, #12
 8002d0a:	461a      	mov	r2, r3
 8002d0c:	6878      	ldr	r0, [r7, #4]
 8002d0e:	47a0      	blx	r4
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8002d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d12:	3301      	adds	r3, #1
 8002d14:	627b      	str	r3, [r7, #36]	; 0x24
 8002d16:	e79c      	b.n	8002c52 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xe8>
      }
    }
    configured_ = true;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2201      	movs	r2, #1
 8002d1c:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
  }
 8002d20:	bf00      	nop
 8002d22:	372c      	adds	r7, #44	; 0x2c
 8002d24:	46bd      	mov	sp, r7
 8002d26:	bd90      	pop	{r4, r7, pc}

08002d28 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>:
  void syncTime(uint8_t * data)
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b086      	sub	sp, #24
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
 8002d30:	6039      	str	r1, [r7, #0]
    std_msgs::Time t;
 8002d32:	f107 0308 	add.w	r3, r7, #8
 8002d36:	4618      	mov	r0, r3
 8002d38:	f7fe faea 	bl	8001310 <_ZN8std_msgs4TimeC1Ev>
    uint32_t offset = hardware_.time() - rt_time;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	3304      	adds	r3, #4
 8002d40:	4618      	mov	r0, r3
 8002d42:	f7ff fa75 	bl	8002230 <_ZN13STM32Hardware4timeEv>
 8002d46:	4602      	mov	r2, r0
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 8002d4e:	1ad3      	subs	r3, r2, r3
 8002d50:	617b      	str	r3, [r7, #20]
    t.deserialize(data);
 8002d52:	f107 0308 	add.w	r3, r7, #8
 8002d56:	6839      	ldr	r1, [r7, #0]
 8002d58:	4618      	mov	r0, r3
 8002d5a:	f7fe fb49 	bl	80013f0 <_ZN8std_msgs4Time11deserializeEPh>
    t.data.sec += offset / 1000;
 8002d5e:	68fa      	ldr	r2, [r7, #12]
 8002d60:	697b      	ldr	r3, [r7, #20]
 8002d62:	4915      	ldr	r1, [pc, #84]	; (8002db8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 8002d64:	fba1 1303 	umull	r1, r3, r1, r3
 8002d68:	099b      	lsrs	r3, r3, #6
 8002d6a:	4413      	add	r3, r2
 8002d6c:	60fb      	str	r3, [r7, #12]
    t.data.nsec += (offset % 1000) * 1000000UL;
 8002d6e:	6939      	ldr	r1, [r7, #16]
 8002d70:	697a      	ldr	r2, [r7, #20]
 8002d72:	4b11      	ldr	r3, [pc, #68]	; (8002db8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 8002d74:	fba3 0302 	umull	r0, r3, r3, r2
 8002d78:	099b      	lsrs	r3, r3, #6
 8002d7a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002d7e:	fb00 f303 	mul.w	r3, r0, r3
 8002d82:	1ad3      	subs	r3, r2, r3
 8002d84:	4a0d      	ldr	r2, [pc, #52]	; (8002dbc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x94>)
 8002d86:	fb02 f303 	mul.w	r3, r2, r3
 8002d8a:	440b      	add	r3, r1
 8002d8c:	613b      	str	r3, [r7, #16]
    this->setNow(t.data);
 8002d8e:	f107 0308 	add.w	r3, r7, #8
 8002d92:	3304      	adds	r3, #4
 8002d94:	4619      	mov	r1, r3
 8002d96:	6878      	ldr	r0, [r7, #4]
 8002d98:	f000 f8a6 	bl	8002ee8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE>
    last_sync_receive_time = hardware_.time();
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	3304      	adds	r3, #4
 8002da0:	4618      	mov	r0, r3
 8002da2:	f7ff fa45 	bl	8002230 <_ZN13STM32Hardware4timeEv>
 8002da6:	4602      	mov	r2, r0
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
  }
 8002dae:	bf00      	nop
 8002db0:	3718      	adds	r7, #24
 8002db2:	46bd      	mov	sp, r7
 8002db4:	bd80      	pop	{r7, pc}
 8002db6:	bf00      	nop
 8002db8:	10624dd3 	.word	0x10624dd3
 8002dbc:	000f4240 	.word	0x000f4240

08002dc0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE>:

  virtual int publish(int id, const Msg * msg)
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b088      	sub	sp, #32
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	60f8      	str	r0, [r7, #12]
 8002dc8:	60b9      	str	r1, [r7, #8]
 8002dca:	607a      	str	r2, [r7, #4]
  {
    if (id >= 100 && !configured_)
 8002dcc:	68bb      	ldr	r3, [r7, #8]
 8002dce:	2b63      	cmp	r3, #99	; 0x63
 8002dd0:	dd09      	ble.n	8002de6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 8002dd8:	f083 0301 	eor.w	r3, r3, #1
 8002ddc:	b2db      	uxtb	r3, r3
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d001      	beq.n	8002de6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
      return 0;
 8002de2:	2300      	movs	r3, #0
 8002de4:	e079      	b.n	8002eda <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x11a>

    /* serialize message */
    int l = msg->serialize(message_out + 7);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	68fa      	ldr	r2, [r7, #12]
 8002dee:	f202 6224 	addw	r2, r2, #1572	; 0x624
 8002df2:	3207      	adds	r2, #7
 8002df4:	4611      	mov	r1, r2
 8002df6:	6878      	ldr	r0, [r7, #4]
 8002df8:	4798      	blx	r3
 8002dfa:	6178      	str	r0, [r7, #20]

    /* setup the header */
    message_out[0] = 0xff;
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	22ff      	movs	r2, #255	; 0xff
 8002e00:	f883 2624 	strb.w	r2, [r3, #1572]	; 0x624
    message_out[1] = PROTOCOL_VER;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	22fe      	movs	r2, #254	; 0xfe
 8002e08:	f883 2625 	strb.w	r2, [r3, #1573]	; 0x625
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 8002e0c:	697b      	ldr	r3, [r7, #20]
 8002e0e:	b2da      	uxtb	r2, r3
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	f883 2626 	strb.w	r2, [r3, #1574]	; 0x626
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 8002e16:	697b      	ldr	r3, [r7, #20]
 8002e18:	b29b      	uxth	r3, r3
 8002e1a:	0a1b      	lsrs	r3, r3, #8
 8002e1c:	b29b      	uxth	r3, r3
 8002e1e:	b2da      	uxtb	r2, r3
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	f883 2627 	strb.w	r2, [r3, #1575]	; 0x627
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	f893 2626 	ldrb.w	r2, [r3, #1574]	; 0x626
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	f893 3627 	ldrb.w	r3, [r3, #1575]	; 0x627
 8002e32:	4413      	add	r3, r2
 8002e34:	b2db      	uxtb	r3, r3
 8002e36:	43db      	mvns	r3, r3
 8002e38:	b2da      	uxtb	r2, r3
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	f883 2628 	strb.w	r2, [r3, #1576]	; 0x628
    message_out[5] = (uint8_t)((int16_t)id & 255);
 8002e40:	68bb      	ldr	r3, [r7, #8]
 8002e42:	b2da      	uxtb	r2, r3
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	f883 2629 	strb.w	r2, [r3, #1577]	; 0x629
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 8002e4a:	68bb      	ldr	r3, [r7, #8]
 8002e4c:	b21b      	sxth	r3, r3
 8002e4e:	121b      	asrs	r3, r3, #8
 8002e50:	b21b      	sxth	r3, r3
 8002e52:	b2da      	uxtb	r2, r3
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	f883 262a 	strb.w	r2, [r3, #1578]	; 0x62a

    /* calculate checksum */
    int chk = 0;
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8002e5e:	2305      	movs	r3, #5
 8002e60:	61bb      	str	r3, [r7, #24]
 8002e62:	697b      	ldr	r3, [r7, #20]
 8002e64:	3306      	adds	r3, #6
 8002e66:	69ba      	ldr	r2, [r7, #24]
 8002e68:	429a      	cmp	r2, r3
 8002e6a:	dc0d      	bgt.n	8002e88 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xc8>
      chk += message_out[i];
 8002e6c:	68fa      	ldr	r2, [r7, #12]
 8002e6e:	69bb      	ldr	r3, [r7, #24]
 8002e70:	4413      	add	r3, r2
 8002e72:	f203 6324 	addw	r3, r3, #1572	; 0x624
 8002e76:	781b      	ldrb	r3, [r3, #0]
 8002e78:	461a      	mov	r2, r3
 8002e7a:	69fb      	ldr	r3, [r7, #28]
 8002e7c:	4413      	add	r3, r2
 8002e7e:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8002e80:	69bb      	ldr	r3, [r7, #24]
 8002e82:	3301      	adds	r3, #1
 8002e84:	61bb      	str	r3, [r7, #24]
 8002e86:	e7ec      	b.n	8002e62 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xa2>
    l += 7;
 8002e88:	697b      	ldr	r3, [r7, #20]
 8002e8a:	3307      	adds	r3, #7
 8002e8c:	617b      	str	r3, [r7, #20]
    message_out[l++] = 255 - (chk % 256);
 8002e8e:	69fb      	ldr	r3, [r7, #28]
 8002e90:	425a      	negs	r2, r3
 8002e92:	b2db      	uxtb	r3, r3
 8002e94:	b2d2      	uxtb	r2, r2
 8002e96:	bf58      	it	pl
 8002e98:	4253      	negpl	r3, r2
 8002e9a:	b2da      	uxtb	r2, r3
 8002e9c:	697b      	ldr	r3, [r7, #20]
 8002e9e:	1c59      	adds	r1, r3, #1
 8002ea0:	6179      	str	r1, [r7, #20]
 8002ea2:	43d2      	mvns	r2, r2
 8002ea4:	b2d1      	uxtb	r1, r2
 8002ea6:	68fa      	ldr	r2, [r7, #12]
 8002ea8:	4413      	add	r3, r2
 8002eaa:	460a      	mov	r2, r1
 8002eac:	f883 2624 	strb.w	r2, [r3, #1572]	; 0x624

    if (l <= OUTPUT_SIZE)
 8002eb0:	697b      	ldr	r3, [r7, #20]
 8002eb2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002eb6:	dc0a      	bgt.n	8002ece <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x10e>
    {
      hardware_.write(message_out, l);
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	1d18      	adds	r0, r3, #4
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	f203 6324 	addw	r3, r3, #1572	; 0x624
 8002ec2:	697a      	ldr	r2, [r7, #20]
 8002ec4:	4619      	mov	r1, r3
 8002ec6:	f7ff f96d 	bl	80021a4 <_ZN13STM32Hardware5writeEPhi>
      return l;
 8002eca:	697b      	ldr	r3, [r7, #20]
 8002ecc:	e005      	b.n	8002eda <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x11a>
    }
    else
    {
      logerror("Message from device dropped: message larger than buffer.");
 8002ece:	4905      	ldr	r1, [pc, #20]	; (8002ee4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x124>)
 8002ed0:	68f8      	ldr	r0, [r7, #12]
 8002ed2:	f000 f849 	bl	8002f68 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>
      return -1;
 8002ed6:	f04f 33ff 	mov.w	r3, #4294967295
    }
  }
 8002eda:	4618      	mov	r0, r3
 8002edc:	3720      	adds	r7, #32
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	bd80      	pop	{r7, pc}
 8002ee2:	bf00      	nop
 8002ee4:	0800ae60 	.word	0x0800ae60

08002ee8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE>:
  void setNow(Time & new_now)
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b084      	sub	sp, #16
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
 8002ef0:	6039      	str	r1, [r7, #0]
    uint32_t ms = hardware_.time();
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	3304      	adds	r3, #4
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	f7ff f99a 	bl	8002230 <_ZN13STM32Hardware4timeEv>
 8002efc:	60f8      	str	r0, [r7, #12]
    sec_offset = new_now.sec - ms / 1000 - 1;
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	681a      	ldr	r2, [r3, #0]
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	4915      	ldr	r1, [pc, #84]	; (8002f5c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x74>)
 8002f06:	fba1 1303 	umull	r1, r3, r1, r3
 8002f0a:	099b      	lsrs	r3, r3, #6
 8002f0c:	1ad3      	subs	r3, r2, r3
 8002f0e:	1e5a      	subs	r2, r3, #1
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	6859      	ldr	r1, [r3, #4]
 8002f1a:	68fa      	ldr	r2, [r7, #12]
 8002f1c:	4b0f      	ldr	r3, [pc, #60]	; (8002f5c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x74>)
 8002f1e:	fba3 0302 	umull	r0, r3, r3, r2
 8002f22:	099b      	lsrs	r3, r3, #6
 8002f24:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002f28:	fb00 f303 	mul.w	r3, r0, r3
 8002f2c:	1ad3      	subs	r3, r2, r3
 8002f2e:	4a0c      	ldr	r2, [pc, #48]	; (8002f60 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x78>)
 8002f30:	fb02 f303 	mul.w	r3, r2, r3
 8002f34:	1aca      	subs	r2, r1, r3
 8002f36:	4b0b      	ldr	r3, [pc, #44]	; (8002f64 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x7c>)
 8002f38:	4413      	add	r3, r2
 8002f3a:	687a      	ldr	r2, [r7, #4]
 8002f3c:	f8c2 341c 	str.w	r3, [r2, #1052]	; 0x41c
    normalizeSecNSec(sec_offset, nsec_offset);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	f503 6283 	add.w	r2, r3, #1048	; 0x418
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	f203 431c 	addw	r3, r3, #1052	; 0x41c
 8002f4c:	4619      	mov	r1, r3
 8002f4e:	4610      	mov	r0, r2
 8002f50:	f7fd fe06 	bl	8000b60 <_ZN3ros16normalizeSecNSecERmS0_>
  }
 8002f54:	bf00      	nop
 8002f56:	3710      	adds	r7, #16
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	bd80      	pop	{r7, pc}
 8002f5c:	10624dd3 	.word	0x10624dd3
 8002f60:	000f4240 	.word	0x000f4240
 8002f64:	3b9aca00 	.word	0x3b9aca00

08002f68 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>:
  }
  void logwarn(const char *msg)
  {
    log(rosserial_msgs::Log::WARN, msg);
  }
  void logerror(const char*msg)
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b082      	sub	sp, #8
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
 8002f70:	6039      	str	r1, [r7, #0]
  {
    log(rosserial_msgs::Log::ERROR, msg);
 8002f72:	683a      	ldr	r2, [r7, #0]
 8002f74:	2103      	movs	r1, #3
 8002f76:	6878      	ldr	r0, [r7, #4]
 8002f78:	f000 f804 	bl	8002f84 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>
  }
 8002f7c:	bf00      	nop
 8002f7e:	3708      	adds	r7, #8
 8002f80:	46bd      	mov	sp, r7
 8002f82:	bd80      	pop	{r7, pc}

08002f84 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>:
  void log(char byte, const char * msg)
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b088      	sub	sp, #32
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	60f8      	str	r0, [r7, #12]
 8002f8c:	460b      	mov	r3, r1
 8002f8e:	607a      	str	r2, [r7, #4]
 8002f90:	72fb      	strb	r3, [r7, #11]
    rosserial_msgs::Log l;
 8002f92:	f107 0314 	add.w	r3, r7, #20
 8002f96:	4618      	mov	r0, r3
 8002f98:	f7fe fc6e 	bl	8001878 <_ZN14rosserial_msgs3LogC1Ev>
    l.level = byte;
 8002f9c:	7afb      	ldrb	r3, [r7, #11]
 8002f9e:	763b      	strb	r3, [r7, #24]
    l.msg = (char*)msg;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	61fb      	str	r3, [r7, #28]
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f107 0214 	add.w	r2, r7, #20
 8002fae:	2107      	movs	r1, #7
 8002fb0:	68f8      	ldr	r0, [r7, #12]
 8002fb2:	4798      	blx	r3
  }
 8002fb4:	bf00      	nop
 8002fb6:	3720      	adds	r7, #32
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	bd80      	pop	{r7, pc}

08002fbc <_Z41__static_initialization_and_destruction_0ii>:
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b084      	sub	sp, #16
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
 8002fc4:	6039      	str	r1, [r7, #0]
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	2b01      	cmp	r3, #1
 8002fca:	d127      	bne.n	800301c <_Z41__static_initialization_and_destruction_0ii+0x60>
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d122      	bne.n	800301c <_Z41__static_initialization_and_destruction_0ii+0x60>
ros::NodeHandle nh;
 8002fd6:	4819      	ldr	r0, [pc, #100]	; (800303c <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8002fd8:	f7ff fa98 	bl	800250c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>
std_msgs::String str_msg;
 8002fdc:	4818      	ldr	r0, [pc, #96]	; (8003040 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8002fde:	f7ff f933 	bl	8002248 <_ZN8std_msgs6StringC1Ev>
ros::Publisher chatter("chatter", &str_msg																						);
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	4a16      	ldr	r2, [pc, #88]	; (8003040 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8002fe6:	4917      	ldr	r1, [pc, #92]	; (8003044 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8002fe8:	4817      	ldr	r0, [pc, #92]	; (8003048 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 8002fea:	f7fe ffb7 	bl	8001f5c <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
ros::Subscriber<std_msgs::String> stm32_comms("gripper_action", &str_act_msg);
 8002fee:	2301      	movs	r3, #1
 8002ff0:	4a16      	ldr	r2, [pc, #88]	; (800304c <_Z41__static_initialization_and_destruction_0ii+0x90>)
 8002ff2:	4917      	ldr	r1, [pc, #92]	; (8003050 <_Z41__static_initialization_and_destruction_0ii+0x94>)
 8002ff4:	4817      	ldr	r0, [pc, #92]	; (8003054 <_Z41__static_initialization_and_destruction_0ii+0x98>)
 8002ff6:	f7ff fb19 	bl	800262c <_ZN3ros10SubscriberIN8std_msgs6StringEvEC1EPKcPFvRKS2_Ei>
std::string hello = "STM32 to Jetson!";
 8002ffa:	f107 030c 	add.w	r3, r7, #12
 8002ffe:	4618      	mov	r0, r3
 8003000:	f007 fa6f 	bl	800a4e2 <_ZNSaIcEC1Ev>
 8003004:	f107 030c 	add.w	r3, r7, #12
 8003008:	461a      	mov	r2, r3
 800300a:	4913      	ldr	r1, [pc, #76]	; (8003058 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 800300c:	4813      	ldr	r0, [pc, #76]	; (800305c <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 800300e:	f007 fbc9 	bl	800a7a4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8003012:	f107 030c 	add.w	r3, r7, #12
 8003016:	4618      	mov	r0, r3
 8003018:	f007 fa64 	bl	800a4e4 <_ZNSaIcED1Ev>
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2b00      	cmp	r3, #0
 8003020:	d107      	bne.n	8003032 <_Z41__static_initialization_and_destruction_0ii+0x76>
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003028:	4293      	cmp	r3, r2
 800302a:	d102      	bne.n	8003032 <_Z41__static_initialization_and_destruction_0ii+0x76>
 800302c:	480b      	ldr	r0, [pc, #44]	; (800305c <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 800302e:	f007 fafa 	bl	800a626 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
}
 8003032:	bf00      	nop
 8003034:	3710      	adds	r7, #16
 8003036:	46bd      	mov	sp, r7
 8003038:	bd80      	pop	{r7, pc}
 800303a:	bf00      	nop
 800303c:	200002b4 	.word	0x200002b4
 8003040:	20000bf0 	.word	0x20000bf0
 8003044:	0800ae9c 	.word	0x0800ae9c
 8003048:	20000bf8 	.word	0x20000bf8
 800304c:	08002445 	.word	0x08002445
 8003050:	0800aea4 	.word	0x0800aea4
 8003054:	20000c0c 	.word	0x20000c0c
 8003058:	0800aeb4 	.word	0x0800aeb4
 800305c:	20000c28 	.word	0x20000c28

08003060 <_ZN3ros10SubscriberIN8std_msgs6StringEvE8callbackEPh>:

  virtual void callback(unsigned char* data)
 8003060:	b580      	push	{r7, lr}
 8003062:	b082      	sub	sp, #8
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
 8003068:	6039      	str	r1, [r7, #0]
  {
    msg.deserialize(data);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	330c      	adds	r3, #12
 800306e:	6839      	ldr	r1, [r7, #0]
 8003070:	4618      	mov	r0, r3
 8003072:	f7ff f92a 	bl	80022ca <_ZN8std_msgs6String11deserializeEPh>
    this->cb_(msg);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	695b      	ldr	r3, [r3, #20]
 800307a:	687a      	ldr	r2, [r7, #4]
 800307c:	320c      	adds	r2, #12
 800307e:	4610      	mov	r0, r2
 8003080:	4798      	blx	r3
  }
 8003082:	bf00      	nop
 8003084:	3708      	adds	r7, #8
 8003086:	46bd      	mov	sp, r7
 8003088:	bd80      	pop	{r7, pc}

0800308a <_ZN3ros10SubscriberIN8std_msgs6StringEvE15getEndpointTypeEv>:
  }
  virtual const char * getMsgMD5()
  {
    return this->msg.getMD5();
  }
  virtual int getEndpointType()
 800308a:	b480      	push	{r7}
 800308c:	b083      	sub	sp, #12
 800308e:	af00      	add	r7, sp, #0
 8003090:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	699b      	ldr	r3, [r3, #24]
  }
 8003096:	4618      	mov	r0, r3
 8003098:	370c      	adds	r7, #12
 800309a:	46bd      	mov	sp, r7
 800309c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a0:	4770      	bx	lr

080030a2 <_ZN3ros10SubscriberIN8std_msgs6StringEvE10getMsgTypeEv>:
  virtual const char * getMsgType()
 80030a2:	b580      	push	{r7, lr}
 80030a4:	b082      	sub	sp, #8
 80030a6:	af00      	add	r7, sp, #0
 80030a8:	6078      	str	r0, [r7, #4]
    return this->msg.getType();
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	330c      	adds	r3, #12
 80030ae:	4618      	mov	r0, r3
 80030b0:	f7ff f94a 	bl	8002348 <_ZN8std_msgs6String7getTypeEv>
 80030b4:	4603      	mov	r3, r0
  }
 80030b6:	4618      	mov	r0, r3
 80030b8:	3708      	adds	r7, #8
 80030ba:	46bd      	mov	sp, r7
 80030bc:	bd80      	pop	{r7, pc}

080030be <_ZN3ros10SubscriberIN8std_msgs6StringEvE9getMsgMD5Ev>:
  virtual const char * getMsgMD5()
 80030be:	b580      	push	{r7, lr}
 80030c0:	b082      	sub	sp, #8
 80030c2:	af00      	add	r7, sp, #0
 80030c4:	6078      	str	r0, [r7, #4]
    return this->msg.getMD5();
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	330c      	adds	r3, #12
 80030ca:	4618      	mov	r0, r3
 80030cc:	f7ff f94a 	bl	8002364 <_ZN8std_msgs6String6getMD5Ev>
 80030d0:	4603      	mov	r3, r0
  }
 80030d2:	4618      	mov	r0, r3
 80030d4:	3708      	adds	r7, #8
 80030d6:	46bd      	mov	sp, r7
 80030d8:	bd80      	pop	{r7, pc}

080030da <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9connectedEv>:
  virtual bool connected()
 80030da:	b480      	push	{r7}
 80030dc:	b083      	sub	sp, #12
 80030de:	af00      	add	r7, sp, #0
 80030e0:	6078      	str	r0, [r7, #4]
    return configured_;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
  };
 80030e8:	4618      	mov	r0, r3
 80030ea:	370c      	adds	r7, #12
 80030ec:	46bd      	mov	sp, r7
 80030ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f2:	4770      	bx	lr

080030f4 <_GLOBAL__sub_I_nh>:
 80030f4:	b580      	push	{r7, lr}
 80030f6:	af00      	add	r7, sp, #0
 80030f8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80030fc:	2001      	movs	r0, #1
 80030fe:	f7ff ff5d 	bl	8002fbc <_Z41__static_initialization_and_destruction_0ii>
 8003102:	bd80      	pop	{r7, pc}

08003104 <_GLOBAL__sub_D_nh>:
 8003104:	b580      	push	{r7, lr}
 8003106:	af00      	add	r7, sp, #0
 8003108:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800310c:	2000      	movs	r0, #0
 800310e:	f7ff ff55 	bl	8002fbc <_Z41__static_initialization_and_destruction_0ii>
 8003112:	bd80      	pop	{r7, pc}

08003114 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b082      	sub	sp, #8
 8003118:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800311a:	2300      	movs	r3, #0
 800311c:	607b      	str	r3, [r7, #4]
 800311e:	4b12      	ldr	r3, [pc, #72]	; (8003168 <HAL_MspInit+0x54>)
 8003120:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003122:	4a11      	ldr	r2, [pc, #68]	; (8003168 <HAL_MspInit+0x54>)
 8003124:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003128:	6453      	str	r3, [r2, #68]	; 0x44
 800312a:	4b0f      	ldr	r3, [pc, #60]	; (8003168 <HAL_MspInit+0x54>)
 800312c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800312e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003132:	607b      	str	r3, [r7, #4]
 8003134:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003136:	2300      	movs	r3, #0
 8003138:	603b      	str	r3, [r7, #0]
 800313a:	4b0b      	ldr	r3, [pc, #44]	; (8003168 <HAL_MspInit+0x54>)
 800313c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800313e:	4a0a      	ldr	r2, [pc, #40]	; (8003168 <HAL_MspInit+0x54>)
 8003140:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003144:	6413      	str	r3, [r2, #64]	; 0x40
 8003146:	4b08      	ldr	r3, [pc, #32]	; (8003168 <HAL_MspInit+0x54>)
 8003148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800314a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800314e:	603b      	str	r3, [r7, #0]
 8003150:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003152:	2200      	movs	r2, #0
 8003154:	210f      	movs	r1, #15
 8003156:	f06f 0001 	mvn.w	r0, #1
 800315a:	f000 fff1 	bl	8004140 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800315e:	bf00      	nop
 8003160:	3708      	adds	r7, #8
 8003162:	46bd      	mov	sp, r7
 8003164:	bd80      	pop	{r7, pc}
 8003166:	bf00      	nop
 8003168:	40023800 	.word	0x40023800

0800316c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b08a      	sub	sp, #40	; 0x28
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003174:	f107 0314 	add.w	r3, r7, #20
 8003178:	2200      	movs	r2, #0
 800317a:	601a      	str	r2, [r3, #0]
 800317c:	605a      	str	r2, [r3, #4]
 800317e:	609a      	str	r2, [r3, #8]
 8003180:	60da      	str	r2, [r3, #12]
 8003182:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4a2e      	ldr	r2, [pc, #184]	; (8003244 <HAL_ADC_MspInit+0xd8>)
 800318a:	4293      	cmp	r3, r2
 800318c:	d156      	bne.n	800323c <HAL_ADC_MspInit+0xd0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800318e:	2300      	movs	r3, #0
 8003190:	613b      	str	r3, [r7, #16]
 8003192:	4b2d      	ldr	r3, [pc, #180]	; (8003248 <HAL_ADC_MspInit+0xdc>)
 8003194:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003196:	4a2c      	ldr	r2, [pc, #176]	; (8003248 <HAL_ADC_MspInit+0xdc>)
 8003198:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800319c:	6453      	str	r3, [r2, #68]	; 0x44
 800319e:	4b2a      	ldr	r3, [pc, #168]	; (8003248 <HAL_ADC_MspInit+0xdc>)
 80031a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031a6:	613b      	str	r3, [r7, #16]
 80031a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80031aa:	2300      	movs	r3, #0
 80031ac:	60fb      	str	r3, [r7, #12]
 80031ae:	4b26      	ldr	r3, [pc, #152]	; (8003248 <HAL_ADC_MspInit+0xdc>)
 80031b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031b2:	4a25      	ldr	r2, [pc, #148]	; (8003248 <HAL_ADC_MspInit+0xdc>)
 80031b4:	f043 0301 	orr.w	r3, r3, #1
 80031b8:	6313      	str	r3, [r2, #48]	; 0x30
 80031ba:	4b23      	ldr	r3, [pc, #140]	; (8003248 <HAL_ADC_MspInit+0xdc>)
 80031bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031be:	f003 0301 	and.w	r3, r3, #1
 80031c2:	60fb      	str	r3, [r7, #12]
 80031c4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80031c6:	2330      	movs	r3, #48	; 0x30
 80031c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80031ca:	2303      	movs	r3, #3
 80031cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031ce:	2300      	movs	r3, #0
 80031d0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031d2:	f107 0314 	add.w	r3, r7, #20
 80031d6:	4619      	mov	r1, r3
 80031d8:	481c      	ldr	r0, [pc, #112]	; (800324c <HAL_ADC_MspInit+0xe0>)
 80031da:	f001 fbdd 	bl	8004998 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80031de:	4b1c      	ldr	r3, [pc, #112]	; (8003250 <HAL_ADC_MspInit+0xe4>)
 80031e0:	4a1c      	ldr	r2, [pc, #112]	; (8003254 <HAL_ADC_MspInit+0xe8>)
 80031e2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80031e4:	4b1a      	ldr	r3, [pc, #104]	; (8003250 <HAL_ADC_MspInit+0xe4>)
 80031e6:	2200      	movs	r2, #0
 80031e8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80031ea:	4b19      	ldr	r3, [pc, #100]	; (8003250 <HAL_ADC_MspInit+0xe4>)
 80031ec:	2200      	movs	r2, #0
 80031ee:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80031f0:	4b17      	ldr	r3, [pc, #92]	; (8003250 <HAL_ADC_MspInit+0xe4>)
 80031f2:	2200      	movs	r2, #0
 80031f4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80031f6:	4b16      	ldr	r3, [pc, #88]	; (8003250 <HAL_ADC_MspInit+0xe4>)
 80031f8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80031fc:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80031fe:	4b14      	ldr	r3, [pc, #80]	; (8003250 <HAL_ADC_MspInit+0xe4>)
 8003200:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003204:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003206:	4b12      	ldr	r3, [pc, #72]	; (8003250 <HAL_ADC_MspInit+0xe4>)
 8003208:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800320c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 800320e:	4b10      	ldr	r3, [pc, #64]	; (8003250 <HAL_ADC_MspInit+0xe4>)
 8003210:	2200      	movs	r2, #0
 8003212:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8003214:	4b0e      	ldr	r3, [pc, #56]	; (8003250 <HAL_ADC_MspInit+0xe4>)
 8003216:	2200      	movs	r2, #0
 8003218:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800321a:	4b0d      	ldr	r3, [pc, #52]	; (8003250 <HAL_ADC_MspInit+0xe4>)
 800321c:	2200      	movs	r2, #0
 800321e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8003220:	480b      	ldr	r0, [pc, #44]	; (8003250 <HAL_ADC_MspInit+0xe4>)
 8003222:	f000 ffb7 	bl	8004194 <HAL_DMA_Init>
 8003226:	4603      	mov	r3, r0
 8003228:	2b00      	cmp	r3, #0
 800322a:	d001      	beq.n	8003230 <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 800322c:	f7fe f84a 	bl	80012c4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	4a07      	ldr	r2, [pc, #28]	; (8003250 <HAL_ADC_MspInit+0xe4>)
 8003234:	639a      	str	r2, [r3, #56]	; 0x38
 8003236:	4a06      	ldr	r2, [pc, #24]	; (8003250 <HAL_ADC_MspInit+0xe4>)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800323c:	bf00      	nop
 800323e:	3728      	adds	r7, #40	; 0x28
 8003240:	46bd      	mov	sp, r7
 8003242:	bd80      	pop	{r7, pc}
 8003244:	40012000 	.word	0x40012000
 8003248:	40023800 	.word	0x40023800
 800324c:	40020000 	.word	0x40020000
 8003250:	200000dc 	.word	0x200000dc
 8003254:	40026410 	.word	0x40026410

08003258 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003258:	b480      	push	{r7}
 800325a:	b085      	sub	sp, #20
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003268:	d10d      	bne.n	8003286 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800326a:	2300      	movs	r3, #0
 800326c:	60fb      	str	r3, [r7, #12]
 800326e:	4b09      	ldr	r3, [pc, #36]	; (8003294 <HAL_TIM_Base_MspInit+0x3c>)
 8003270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003272:	4a08      	ldr	r2, [pc, #32]	; (8003294 <HAL_TIM_Base_MspInit+0x3c>)
 8003274:	f043 0301 	orr.w	r3, r3, #1
 8003278:	6413      	str	r3, [r2, #64]	; 0x40
 800327a:	4b06      	ldr	r3, [pc, #24]	; (8003294 <HAL_TIM_Base_MspInit+0x3c>)
 800327c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800327e:	f003 0301 	and.w	r3, r3, #1
 8003282:	60fb      	str	r3, [r7, #12]
 8003284:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8003286:	bf00      	nop
 8003288:	3714      	adds	r7, #20
 800328a:	46bd      	mov	sp, r7
 800328c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003290:	4770      	bx	lr
 8003292:	bf00      	nop
 8003294:	40023800 	.word	0x40023800

08003298 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003298:	b580      	push	{r7, lr}
 800329a:	b088      	sub	sp, #32
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032a0:	f107 030c 	add.w	r3, r7, #12
 80032a4:	2200      	movs	r2, #0
 80032a6:	601a      	str	r2, [r3, #0]
 80032a8:	605a      	str	r2, [r3, #4]
 80032aa:	609a      	str	r2, [r3, #8]
 80032ac:	60da      	str	r2, [r3, #12]
 80032ae:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032b8:	d11d      	bne.n	80032f6 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80032ba:	2300      	movs	r3, #0
 80032bc:	60bb      	str	r3, [r7, #8]
 80032be:	4b10      	ldr	r3, [pc, #64]	; (8003300 <HAL_TIM_MspPostInit+0x68>)
 80032c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032c2:	4a0f      	ldr	r2, [pc, #60]	; (8003300 <HAL_TIM_MspPostInit+0x68>)
 80032c4:	f043 0301 	orr.w	r3, r3, #1
 80032c8:	6313      	str	r3, [r2, #48]	; 0x30
 80032ca:	4b0d      	ldr	r3, [pc, #52]	; (8003300 <HAL_TIM_MspPostInit+0x68>)
 80032cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032ce:	f003 0301 	and.w	r3, r3, #1
 80032d2:	60bb      	str	r3, [r7, #8]
 80032d4:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80032d6:	2303      	movs	r3, #3
 80032d8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032da:	2302      	movs	r3, #2
 80032dc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032de:	2300      	movs	r3, #0
 80032e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032e2:	2300      	movs	r3, #0
 80032e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80032e6:	2301      	movs	r3, #1
 80032e8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032ea:	f107 030c 	add.w	r3, r7, #12
 80032ee:	4619      	mov	r1, r3
 80032f0:	4804      	ldr	r0, [pc, #16]	; (8003304 <HAL_TIM_MspPostInit+0x6c>)
 80032f2:	f001 fb51 	bl	8004998 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80032f6:	bf00      	nop
 80032f8:	3720      	adds	r7, #32
 80032fa:	46bd      	mov	sp, r7
 80032fc:	bd80      	pop	{r7, pc}
 80032fe:	bf00      	nop
 8003300:	40023800 	.word	0x40023800
 8003304:	40020000 	.word	0x40020000

08003308 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b08a      	sub	sp, #40	; 0x28
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003310:	f107 0314 	add.w	r3, r7, #20
 8003314:	2200      	movs	r2, #0
 8003316:	601a      	str	r2, [r3, #0]
 8003318:	605a      	str	r2, [r3, #4]
 800331a:	609a      	str	r2, [r3, #8]
 800331c:	60da      	str	r2, [r3, #12]
 800331e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	4a4b      	ldr	r2, [pc, #300]	; (8003454 <HAL_UART_MspInit+0x14c>)
 8003326:	4293      	cmp	r3, r2
 8003328:	f040 8090 	bne.w	800344c <HAL_UART_MspInit+0x144>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800332c:	2300      	movs	r3, #0
 800332e:	613b      	str	r3, [r7, #16]
 8003330:	4b49      	ldr	r3, [pc, #292]	; (8003458 <HAL_UART_MspInit+0x150>)
 8003332:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003334:	4a48      	ldr	r2, [pc, #288]	; (8003458 <HAL_UART_MspInit+0x150>)
 8003336:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800333a:	6413      	str	r3, [r2, #64]	; 0x40
 800333c:	4b46      	ldr	r3, [pc, #280]	; (8003458 <HAL_UART_MspInit+0x150>)
 800333e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003340:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003344:	613b      	str	r3, [r7, #16]
 8003346:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003348:	2300      	movs	r3, #0
 800334a:	60fb      	str	r3, [r7, #12]
 800334c:	4b42      	ldr	r3, [pc, #264]	; (8003458 <HAL_UART_MspInit+0x150>)
 800334e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003350:	4a41      	ldr	r2, [pc, #260]	; (8003458 <HAL_UART_MspInit+0x150>)
 8003352:	f043 0301 	orr.w	r3, r3, #1
 8003356:	6313      	str	r3, [r2, #48]	; 0x30
 8003358:	4b3f      	ldr	r3, [pc, #252]	; (8003458 <HAL_UART_MspInit+0x150>)
 800335a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800335c:	f003 0301 	and.w	r3, r3, #1
 8003360:	60fb      	str	r3, [r7, #12]
 8003362:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003364:	230c      	movs	r3, #12
 8003366:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003368:	2302      	movs	r3, #2
 800336a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800336c:	2300      	movs	r3, #0
 800336e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003370:	2303      	movs	r3, #3
 8003372:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003374:	2307      	movs	r3, #7
 8003376:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003378:	f107 0314 	add.w	r3, r7, #20
 800337c:	4619      	mov	r1, r3
 800337e:	4837      	ldr	r0, [pc, #220]	; (800345c <HAL_UART_MspInit+0x154>)
 8003380:	f001 fb0a 	bl	8004998 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8003384:	4b36      	ldr	r3, [pc, #216]	; (8003460 <HAL_UART_MspInit+0x158>)
 8003386:	4a37      	ldr	r2, [pc, #220]	; (8003464 <HAL_UART_MspInit+0x15c>)
 8003388:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 800338a:	4b35      	ldr	r3, [pc, #212]	; (8003460 <HAL_UART_MspInit+0x158>)
 800338c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003390:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003392:	4b33      	ldr	r3, [pc, #204]	; (8003460 <HAL_UART_MspInit+0x158>)
 8003394:	2200      	movs	r2, #0
 8003396:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003398:	4b31      	ldr	r3, [pc, #196]	; (8003460 <HAL_UART_MspInit+0x158>)
 800339a:	2200      	movs	r2, #0
 800339c:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800339e:	4b30      	ldr	r3, [pc, #192]	; (8003460 <HAL_UART_MspInit+0x158>)
 80033a0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80033a4:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80033a6:	4b2e      	ldr	r3, [pc, #184]	; (8003460 <HAL_UART_MspInit+0x158>)
 80033a8:	2200      	movs	r2, #0
 80033aa:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80033ac:	4b2c      	ldr	r3, [pc, #176]	; (8003460 <HAL_UART_MspInit+0x158>)
 80033ae:	2200      	movs	r2, #0
 80033b0:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80033b2:	4b2b      	ldr	r3, [pc, #172]	; (8003460 <HAL_UART_MspInit+0x158>)
 80033b4:	2200      	movs	r2, #0
 80033b6:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80033b8:	4b29      	ldr	r3, [pc, #164]	; (8003460 <HAL_UART_MspInit+0x158>)
 80033ba:	2200      	movs	r2, #0
 80033bc:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80033be:	4b28      	ldr	r3, [pc, #160]	; (8003460 <HAL_UART_MspInit+0x158>)
 80033c0:	2200      	movs	r2, #0
 80033c2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80033c4:	4826      	ldr	r0, [pc, #152]	; (8003460 <HAL_UART_MspInit+0x158>)
 80033c6:	f000 fee5 	bl	8004194 <HAL_DMA_Init>
 80033ca:	4603      	mov	r3, r0
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d001      	beq.n	80033d4 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 80033d0:	f7fd ff78 	bl	80012c4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	4a22      	ldr	r2, [pc, #136]	; (8003460 <HAL_UART_MspInit+0x158>)
 80033d8:	639a      	str	r2, [r3, #56]	; 0x38
 80033da:	4a21      	ldr	r2, [pc, #132]	; (8003460 <HAL_UART_MspInit+0x158>)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 80033e0:	4b21      	ldr	r3, [pc, #132]	; (8003468 <HAL_UART_MspInit+0x160>)
 80033e2:	4a22      	ldr	r2, [pc, #136]	; (800346c <HAL_UART_MspInit+0x164>)
 80033e4:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 80033e6:	4b20      	ldr	r3, [pc, #128]	; (8003468 <HAL_UART_MspInit+0x160>)
 80033e8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80033ec:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80033ee:	4b1e      	ldr	r3, [pc, #120]	; (8003468 <HAL_UART_MspInit+0x160>)
 80033f0:	2240      	movs	r2, #64	; 0x40
 80033f2:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80033f4:	4b1c      	ldr	r3, [pc, #112]	; (8003468 <HAL_UART_MspInit+0x160>)
 80033f6:	2200      	movs	r2, #0
 80033f8:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80033fa:	4b1b      	ldr	r3, [pc, #108]	; (8003468 <HAL_UART_MspInit+0x160>)
 80033fc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003400:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003402:	4b19      	ldr	r3, [pc, #100]	; (8003468 <HAL_UART_MspInit+0x160>)
 8003404:	2200      	movs	r2, #0
 8003406:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003408:	4b17      	ldr	r3, [pc, #92]	; (8003468 <HAL_UART_MspInit+0x160>)
 800340a:	2200      	movs	r2, #0
 800340c:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800340e:	4b16      	ldr	r3, [pc, #88]	; (8003468 <HAL_UART_MspInit+0x160>)
 8003410:	2200      	movs	r2, #0
 8003412:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003414:	4b14      	ldr	r3, [pc, #80]	; (8003468 <HAL_UART_MspInit+0x160>)
 8003416:	2200      	movs	r2, #0
 8003418:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800341a:	4b13      	ldr	r3, [pc, #76]	; (8003468 <HAL_UART_MspInit+0x160>)
 800341c:	2200      	movs	r2, #0
 800341e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8003420:	4811      	ldr	r0, [pc, #68]	; (8003468 <HAL_UART_MspInit+0x160>)
 8003422:	f000 feb7 	bl	8004194 <HAL_DMA_Init>
 8003426:	4603      	mov	r3, r0
 8003428:	2b00      	cmp	r3, #0
 800342a:	d001      	beq.n	8003430 <HAL_UART_MspInit+0x128>
    {
      Error_Handler();
 800342c:	f7fd ff4a 	bl	80012c4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	4a0d      	ldr	r2, [pc, #52]	; (8003468 <HAL_UART_MspInit+0x160>)
 8003434:	635a      	str	r2, [r3, #52]	; 0x34
 8003436:	4a0c      	ldr	r2, [pc, #48]	; (8003468 <HAL_UART_MspInit+0x160>)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 800343c:	2200      	movs	r2, #0
 800343e:	2105      	movs	r1, #5
 8003440:	2026      	movs	r0, #38	; 0x26
 8003442:	f000 fe7d 	bl	8004140 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003446:	2026      	movs	r0, #38	; 0x26
 8003448:	f000 fe96 	bl	8004178 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800344c:	bf00      	nop
 800344e:	3728      	adds	r7, #40	; 0x28
 8003450:	46bd      	mov	sp, r7
 8003452:	bd80      	pop	{r7, pc}
 8003454:	40004400 	.word	0x40004400
 8003458:	40023800 	.word	0x40023800
 800345c:	40020000 	.word	0x40020000
 8003460:	200001c8 	.word	0x200001c8
 8003464:	40026088 	.word	0x40026088
 8003468:	20000228 	.word	0x20000228
 800346c:	400260a0 	.word	0x400260a0

08003470 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	b08e      	sub	sp, #56	; 0x38
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8003478:	2300      	movs	r3, #0
 800347a:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 800347c:	2300      	movs	r3, #0
 800347e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 8003480:	2300      	movs	r3, #0
 8003482:	60fb      	str	r3, [r7, #12]
 8003484:	4b33      	ldr	r3, [pc, #204]	; (8003554 <HAL_InitTick+0xe4>)
 8003486:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003488:	4a32      	ldr	r2, [pc, #200]	; (8003554 <HAL_InitTick+0xe4>)
 800348a:	f043 0308 	orr.w	r3, r3, #8
 800348e:	6413      	str	r3, [r2, #64]	; 0x40
 8003490:	4b30      	ldr	r3, [pc, #192]	; (8003554 <HAL_InitTick+0xe4>)
 8003492:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003494:	f003 0308 	and.w	r3, r3, #8
 8003498:	60fb      	str	r3, [r7, #12]
 800349a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800349c:	f107 0210 	add.w	r2, r7, #16
 80034a0:	f107 0314 	add.w	r3, r7, #20
 80034a4:	4611      	mov	r1, r2
 80034a6:	4618      	mov	r0, r3
 80034a8:	f002 f886 	bl	80055b8 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80034ac:	6a3b      	ldr	r3, [r7, #32]
 80034ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM5 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80034b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d103      	bne.n	80034be <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80034b6:	f002 f857 	bl	8005568 <HAL_RCC_GetPCLK1Freq>
 80034ba:	6378      	str	r0, [r7, #52]	; 0x34
 80034bc:	e004      	b.n	80034c8 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80034be:	f002 f853 	bl	8005568 <HAL_RCC_GetPCLK1Freq>
 80034c2:	4603      	mov	r3, r0
 80034c4:	005b      	lsls	r3, r3, #1
 80034c6:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80034c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034ca:	4a23      	ldr	r2, [pc, #140]	; (8003558 <HAL_InitTick+0xe8>)
 80034cc:	fba2 2303 	umull	r2, r3, r2, r3
 80034d0:	0c9b      	lsrs	r3, r3, #18
 80034d2:	3b01      	subs	r3, #1
 80034d4:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 80034d6:	4b21      	ldr	r3, [pc, #132]	; (800355c <HAL_InitTick+0xec>)
 80034d8:	4a21      	ldr	r2, [pc, #132]	; (8003560 <HAL_InitTick+0xf0>)
 80034da:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000U / 1000U) - 1U;
 80034dc:	4b1f      	ldr	r3, [pc, #124]	; (800355c <HAL_InitTick+0xec>)
 80034de:	f240 32e7 	movw	r2, #999	; 0x3e7
 80034e2:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 80034e4:	4a1d      	ldr	r2, [pc, #116]	; (800355c <HAL_InitTick+0xec>)
 80034e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034e8:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 80034ea:	4b1c      	ldr	r3, [pc, #112]	; (800355c <HAL_InitTick+0xec>)
 80034ec:	2200      	movs	r2, #0
 80034ee:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80034f0:	4b1a      	ldr	r3, [pc, #104]	; (800355c <HAL_InitTick+0xec>)
 80034f2:	2200      	movs	r2, #0
 80034f4:	609a      	str	r2, [r3, #8]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80034f6:	4b19      	ldr	r3, [pc, #100]	; (800355c <HAL_InitTick+0xec>)
 80034f8:	2200      	movs	r2, #0
 80034fa:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim5);
 80034fc:	4817      	ldr	r0, [pc, #92]	; (800355c <HAL_InitTick+0xec>)
 80034fe:	f002 f88d 	bl	800561c <HAL_TIM_Base_Init>
 8003502:	4603      	mov	r3, r0
 8003504:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8003508:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800350c:	2b00      	cmp	r3, #0
 800350e:	d11b      	bne.n	8003548 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim5);
 8003510:	4812      	ldr	r0, [pc, #72]	; (800355c <HAL_InitTick+0xec>)
 8003512:	f002 f8d3 	bl	80056bc <HAL_TIM_Base_Start_IT>
 8003516:	4603      	mov	r3, r0
 8003518:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 800351c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003520:	2b00      	cmp	r3, #0
 8003522:	d111      	bne.n	8003548 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM5 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8003524:	2032      	movs	r0, #50	; 0x32
 8003526:	f000 fe27 	bl	8004178 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	2b0f      	cmp	r3, #15
 800352e:	d808      	bhi.n	8003542 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority, 0U);
 8003530:	2200      	movs	r2, #0
 8003532:	6879      	ldr	r1, [r7, #4]
 8003534:	2032      	movs	r0, #50	; 0x32
 8003536:	f000 fe03 	bl	8004140 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800353a:	4a0a      	ldr	r2, [pc, #40]	; (8003564 <HAL_InitTick+0xf4>)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6013      	str	r3, [r2, #0]
 8003540:	e002      	b.n	8003548 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8003542:	2301      	movs	r3, #1
 8003544:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8003548:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 800354c:	4618      	mov	r0, r3
 800354e:	3738      	adds	r7, #56	; 0x38
 8003550:	46bd      	mov	sp, r7
 8003552:	bd80      	pop	{r7, pc}
 8003554:	40023800 	.word	0x40023800
 8003558:	431bde83 	.word	0x431bde83
 800355c:	20000c40 	.word	0x20000c40
 8003560:	40000c00 	.word	0x40000c00
 8003564:	20000004 	.word	0x20000004

08003568 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003568:	b480      	push	{r7}
 800356a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800356c:	e7fe      	b.n	800356c <NMI_Handler+0x4>

0800356e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800356e:	b480      	push	{r7}
 8003570:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003572:	e7fe      	b.n	8003572 <HardFault_Handler+0x4>

08003574 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003574:	b480      	push	{r7}
 8003576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003578:	e7fe      	b.n	8003578 <MemManage_Handler+0x4>

0800357a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800357a:	b480      	push	{r7}
 800357c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800357e:	e7fe      	b.n	800357e <BusFault_Handler+0x4>

08003580 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003580:	b480      	push	{r7}
 8003582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003584:	e7fe      	b.n	8003584 <UsageFault_Handler+0x4>

08003586 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003586:	b480      	push	{r7}
 8003588:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800358a:	bf00      	nop
 800358c:	46bd      	mov	sp, r7
 800358e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003592:	4770      	bx	lr

08003594 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8003598:	4802      	ldr	r0, [pc, #8]	; (80035a4 <DMA1_Stream5_IRQHandler+0x10>)
 800359a:	f000 ff93 	bl	80044c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800359e:	bf00      	nop
 80035a0:	bd80      	pop	{r7, pc}
 80035a2:	bf00      	nop
 80035a4:	200001c8 	.word	0x200001c8

080035a8 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80035ac:	4802      	ldr	r0, [pc, #8]	; (80035b8 <DMA1_Stream6_IRQHandler+0x10>)
 80035ae:	f000 ff89 	bl	80044c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80035b2:	bf00      	nop
 80035b4:	bd80      	pop	{r7, pc}
 80035b6:	bf00      	nop
 80035b8:	20000228 	.word	0x20000228

080035bc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80035c0:	4802      	ldr	r0, [pc, #8]	; (80035cc <USART2_IRQHandler+0x10>)
 80035c2:	f003 f8eb 	bl	800679c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80035c6:	bf00      	nop
 80035c8:	bd80      	pop	{r7, pc}
 80035ca:	bf00      	nop
 80035cc:	20000184 	.word	0x20000184

080035d0 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80035d4:	4802      	ldr	r0, [pc, #8]	; (80035e0 <TIM5_IRQHandler+0x10>)
 80035d6:	f002 f9dd 	bl	8005994 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 80035da:	bf00      	nop
 80035dc:	bd80      	pop	{r7, pc}
 80035de:	bf00      	nop
 80035e0:	20000c40 	.word	0x20000c40

080035e4 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80035e8:	4802      	ldr	r0, [pc, #8]	; (80035f4 <DMA2_Stream0_IRQHandler+0x10>)
 80035ea:	f000 ff6b 	bl	80044c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80035ee:	bf00      	nop
 80035f0:	bd80      	pop	{r7, pc}
 80035f2:	bf00      	nop
 80035f4:	200000dc 	.word	0x200000dc

080035f8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80035f8:	b480      	push	{r7}
 80035fa:	af00      	add	r7, sp, #0
  return 1;
 80035fc:	2301      	movs	r3, #1
}
 80035fe:	4618      	mov	r0, r3
 8003600:	46bd      	mov	sp, r7
 8003602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003606:	4770      	bx	lr

08003608 <_kill>:

int _kill(int pid, int sig)
{
 8003608:	b580      	push	{r7, lr}
 800360a:	b082      	sub	sp, #8
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
 8003610:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003612:	f007 f91b 	bl	800a84c <__errno>
 8003616:	4603      	mov	r3, r0
 8003618:	2216      	movs	r2, #22
 800361a:	601a      	str	r2, [r3, #0]
  return -1;
 800361c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003620:	4618      	mov	r0, r3
 8003622:	3708      	adds	r7, #8
 8003624:	46bd      	mov	sp, r7
 8003626:	bd80      	pop	{r7, pc}

08003628 <_exit>:

void _exit (int status)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b082      	sub	sp, #8
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003630:	f04f 31ff 	mov.w	r1, #4294967295
 8003634:	6878      	ldr	r0, [r7, #4]
 8003636:	f7ff ffe7 	bl	8003608 <_kill>
  while (1) {}    /* Make sure we hang here */
 800363a:	e7fe      	b.n	800363a <_exit+0x12>

0800363c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	b086      	sub	sp, #24
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003644:	4a14      	ldr	r2, [pc, #80]	; (8003698 <_sbrk+0x5c>)
 8003646:	4b15      	ldr	r3, [pc, #84]	; (800369c <_sbrk+0x60>)
 8003648:	1ad3      	subs	r3, r2, r3
 800364a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800364c:	697b      	ldr	r3, [r7, #20]
 800364e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003650:	4b13      	ldr	r3, [pc, #76]	; (80036a0 <_sbrk+0x64>)
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	2b00      	cmp	r3, #0
 8003656:	d102      	bne.n	800365e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003658:	4b11      	ldr	r3, [pc, #68]	; (80036a0 <_sbrk+0x64>)
 800365a:	4a12      	ldr	r2, [pc, #72]	; (80036a4 <_sbrk+0x68>)
 800365c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800365e:	4b10      	ldr	r3, [pc, #64]	; (80036a0 <_sbrk+0x64>)
 8003660:	681a      	ldr	r2, [r3, #0]
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	4413      	add	r3, r2
 8003666:	693a      	ldr	r2, [r7, #16]
 8003668:	429a      	cmp	r2, r3
 800366a:	d207      	bcs.n	800367c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800366c:	f007 f8ee 	bl	800a84c <__errno>
 8003670:	4603      	mov	r3, r0
 8003672:	220c      	movs	r2, #12
 8003674:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003676:	f04f 33ff 	mov.w	r3, #4294967295
 800367a:	e009      	b.n	8003690 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800367c:	4b08      	ldr	r3, [pc, #32]	; (80036a0 <_sbrk+0x64>)
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003682:	4b07      	ldr	r3, [pc, #28]	; (80036a0 <_sbrk+0x64>)
 8003684:	681a      	ldr	r2, [r3, #0]
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	4413      	add	r3, r2
 800368a:	4a05      	ldr	r2, [pc, #20]	; (80036a0 <_sbrk+0x64>)
 800368c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800368e:	68fb      	ldr	r3, [r7, #12]
}
 8003690:	4618      	mov	r0, r3
 8003692:	3718      	adds	r7, #24
 8003694:	46bd      	mov	sp, r7
 8003696:	bd80      	pop	{r7, pc}
 8003698:	20010000 	.word	0x20010000
 800369c:	00000400 	.word	0x00000400
 80036a0:	20000c88 	.word	0x20000c88
 80036a4:	200056b8 	.word	0x200056b8

080036a8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80036a8:	b480      	push	{r7}
 80036aa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80036ac:	4b06      	ldr	r3, [pc, #24]	; (80036c8 <SystemInit+0x20>)
 80036ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036b2:	4a05      	ldr	r2, [pc, #20]	; (80036c8 <SystemInit+0x20>)
 80036b4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80036b8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80036bc:	bf00      	nop
 80036be:	46bd      	mov	sp, r7
 80036c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c4:	4770      	bx	lr
 80036c6:	bf00      	nop
 80036c8:	e000ed00 	.word	0xe000ed00

080036cc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80036cc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003704 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80036d0:	480d      	ldr	r0, [pc, #52]	; (8003708 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80036d2:	490e      	ldr	r1, [pc, #56]	; (800370c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80036d4:	4a0e      	ldr	r2, [pc, #56]	; (8003710 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80036d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80036d8:	e002      	b.n	80036e0 <LoopCopyDataInit>

080036da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80036da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80036dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80036de:	3304      	adds	r3, #4

080036e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80036e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80036e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80036e4:	d3f9      	bcc.n	80036da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80036e6:	4a0b      	ldr	r2, [pc, #44]	; (8003714 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80036e8:	4c0b      	ldr	r4, [pc, #44]	; (8003718 <LoopFillZerobss+0x26>)
  movs r3, #0
 80036ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80036ec:	e001      	b.n	80036f2 <LoopFillZerobss>

080036ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80036ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80036f0:	3204      	adds	r2, #4

080036f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80036f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80036f4:	d3fb      	bcc.n	80036ee <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80036f6:	f7ff ffd7 	bl	80036a8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80036fa:	f007 f8ad 	bl	800a858 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80036fe:	f7fd fa5b 	bl	8000bb8 <main>
  bx  lr    
 8003702:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003704:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8003708:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800370c:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8003710:	0800b18c 	.word	0x0800b18c
  ldr r2, =_sbss
 8003714:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8003718:	200056b4 	.word	0x200056b4

0800371c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800371c:	e7fe      	b.n	800371c <ADC_IRQHandler>
	...

08003720 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003724:	4b0e      	ldr	r3, [pc, #56]	; (8003760 <HAL_Init+0x40>)
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	4a0d      	ldr	r2, [pc, #52]	; (8003760 <HAL_Init+0x40>)
 800372a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800372e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003730:	4b0b      	ldr	r3, [pc, #44]	; (8003760 <HAL_Init+0x40>)
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	4a0a      	ldr	r2, [pc, #40]	; (8003760 <HAL_Init+0x40>)
 8003736:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800373a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800373c:	4b08      	ldr	r3, [pc, #32]	; (8003760 <HAL_Init+0x40>)
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	4a07      	ldr	r2, [pc, #28]	; (8003760 <HAL_Init+0x40>)
 8003742:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003746:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003748:	2003      	movs	r0, #3
 800374a:	f000 fcee 	bl	800412a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800374e:	200f      	movs	r0, #15
 8003750:	f7ff fe8e 	bl	8003470 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003754:	f7ff fcde 	bl	8003114 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003758:	2300      	movs	r3, #0
}
 800375a:	4618      	mov	r0, r3
 800375c:	bd80      	pop	{r7, pc}
 800375e:	bf00      	nop
 8003760:	40023c00 	.word	0x40023c00

08003764 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003764:	b480      	push	{r7}
 8003766:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003768:	4b06      	ldr	r3, [pc, #24]	; (8003784 <HAL_IncTick+0x20>)
 800376a:	781b      	ldrb	r3, [r3, #0]
 800376c:	461a      	mov	r2, r3
 800376e:	4b06      	ldr	r3, [pc, #24]	; (8003788 <HAL_IncTick+0x24>)
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	4413      	add	r3, r2
 8003774:	4a04      	ldr	r2, [pc, #16]	; (8003788 <HAL_IncTick+0x24>)
 8003776:	6013      	str	r3, [r2, #0]
}
 8003778:	bf00      	nop
 800377a:	46bd      	mov	sp, r7
 800377c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003780:	4770      	bx	lr
 8003782:	bf00      	nop
 8003784:	20000008 	.word	0x20000008
 8003788:	20000c8c 	.word	0x20000c8c

0800378c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800378c:	b480      	push	{r7}
 800378e:	af00      	add	r7, sp, #0
  return uwTick;
 8003790:	4b03      	ldr	r3, [pc, #12]	; (80037a0 <HAL_GetTick+0x14>)
 8003792:	681b      	ldr	r3, [r3, #0]
}
 8003794:	4618      	mov	r0, r3
 8003796:	46bd      	mov	sp, r7
 8003798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379c:	4770      	bx	lr
 800379e:	bf00      	nop
 80037a0:	20000c8c 	.word	0x20000c8c

080037a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b084      	sub	sp, #16
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80037ac:	f7ff ffee 	bl	800378c <HAL_GetTick>
 80037b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037bc:	d005      	beq.n	80037ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80037be:	4b0a      	ldr	r3, [pc, #40]	; (80037e8 <HAL_Delay+0x44>)
 80037c0:	781b      	ldrb	r3, [r3, #0]
 80037c2:	461a      	mov	r2, r3
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	4413      	add	r3, r2
 80037c8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80037ca:	bf00      	nop
 80037cc:	f7ff ffde 	bl	800378c <HAL_GetTick>
 80037d0:	4602      	mov	r2, r0
 80037d2:	68bb      	ldr	r3, [r7, #8]
 80037d4:	1ad3      	subs	r3, r2, r3
 80037d6:	68fa      	ldr	r2, [r7, #12]
 80037d8:	429a      	cmp	r2, r3
 80037da:	d8f7      	bhi.n	80037cc <HAL_Delay+0x28>
  {
  }
}
 80037dc:	bf00      	nop
 80037de:	bf00      	nop
 80037e0:	3710      	adds	r7, #16
 80037e2:	46bd      	mov	sp, r7
 80037e4:	bd80      	pop	{r7, pc}
 80037e6:	bf00      	nop
 80037e8:	20000008 	.word	0x20000008

080037ec <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b084      	sub	sp, #16
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80037f4:	2300      	movs	r3, #0
 80037f6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d101      	bne.n	8003802 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80037fe:	2301      	movs	r3, #1
 8003800:	e033      	b.n	800386a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003806:	2b00      	cmp	r3, #0
 8003808:	d109      	bne.n	800381e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800380a:	6878      	ldr	r0, [r7, #4]
 800380c:	f7ff fcae 	bl	800316c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2200      	movs	r2, #0
 8003814:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	2200      	movs	r2, #0
 800381a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003822:	f003 0310 	and.w	r3, r3, #16
 8003826:	2b00      	cmp	r3, #0
 8003828:	d118      	bne.n	800385c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800382e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003832:	f023 0302 	bic.w	r3, r3, #2
 8003836:	f043 0202 	orr.w	r2, r3, #2
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800383e:	6878      	ldr	r0, [r7, #4]
 8003840:	f000 fa48 	bl	8003cd4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2200      	movs	r2, #0
 8003848:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800384e:	f023 0303 	bic.w	r3, r3, #3
 8003852:	f043 0201 	orr.w	r2, r3, #1
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	641a      	str	r2, [r3, #64]	; 0x40
 800385a:	e001      	b.n	8003860 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800385c:	2301      	movs	r3, #1
 800385e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2200      	movs	r2, #0
 8003864:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003868:	7bfb      	ldrb	r3, [r7, #15]
}
 800386a:	4618      	mov	r0, r3
 800386c:	3710      	adds	r7, #16
 800386e:	46bd      	mov	sp, r7
 8003870:	bd80      	pop	{r7, pc}
	...

08003874 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	b086      	sub	sp, #24
 8003878:	af00      	add	r7, sp, #0
 800387a:	60f8      	str	r0, [r7, #12]
 800387c:	60b9      	str	r1, [r7, #8]
 800387e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8003880:	2300      	movs	r3, #0
 8003882:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800388a:	2b01      	cmp	r3, #1
 800388c:	d101      	bne.n	8003892 <HAL_ADC_Start_DMA+0x1e>
 800388e:	2302      	movs	r3, #2
 8003890:	e0ce      	b.n	8003a30 <HAL_ADC_Start_DMA+0x1bc>
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	2201      	movs	r2, #1
 8003896:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	689b      	ldr	r3, [r3, #8]
 80038a0:	f003 0301 	and.w	r3, r3, #1
 80038a4:	2b01      	cmp	r3, #1
 80038a6:	d018      	beq.n	80038da <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	689a      	ldr	r2, [r3, #8]
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f042 0201 	orr.w	r2, r2, #1
 80038b6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80038b8:	4b5f      	ldr	r3, [pc, #380]	; (8003a38 <HAL_ADC_Start_DMA+0x1c4>)
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	4a5f      	ldr	r2, [pc, #380]	; (8003a3c <HAL_ADC_Start_DMA+0x1c8>)
 80038be:	fba2 2303 	umull	r2, r3, r2, r3
 80038c2:	0c9a      	lsrs	r2, r3, #18
 80038c4:	4613      	mov	r3, r2
 80038c6:	005b      	lsls	r3, r3, #1
 80038c8:	4413      	add	r3, r2
 80038ca:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80038cc:	e002      	b.n	80038d4 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80038ce:	693b      	ldr	r3, [r7, #16]
 80038d0:	3b01      	subs	r3, #1
 80038d2:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80038d4:	693b      	ldr	r3, [r7, #16]
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d1f9      	bne.n	80038ce <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	689b      	ldr	r3, [r3, #8]
 80038e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80038e8:	d107      	bne.n	80038fa <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	689a      	ldr	r2, [r3, #8]
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80038f8:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	689b      	ldr	r3, [r3, #8]
 8003900:	f003 0301 	and.w	r3, r3, #1
 8003904:	2b01      	cmp	r3, #1
 8003906:	f040 8086 	bne.w	8003a16 <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800390e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003912:	f023 0301 	bic.w	r3, r3, #1
 8003916:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	685b      	ldr	r3, [r3, #4]
 8003924:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003928:	2b00      	cmp	r3, #0
 800392a:	d007      	beq.n	800393c <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003930:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003934:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003940:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003944:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003948:	d106      	bne.n	8003958 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800394e:	f023 0206 	bic.w	r2, r3, #6
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	645a      	str	r2, [r3, #68]	; 0x44
 8003956:	e002      	b.n	800395e <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	2200      	movs	r2, #0
 800395c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	2200      	movs	r2, #0
 8003962:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003966:	4b36      	ldr	r3, [pc, #216]	; (8003a40 <HAL_ADC_Start_DMA+0x1cc>)
 8003968:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800396e:	4a35      	ldr	r2, [pc, #212]	; (8003a44 <HAL_ADC_Start_DMA+0x1d0>)
 8003970:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003976:	4a34      	ldr	r2, [pc, #208]	; (8003a48 <HAL_ADC_Start_DMA+0x1d4>)
 8003978:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800397e:	4a33      	ldr	r2, [pc, #204]	; (8003a4c <HAL_ADC_Start_DMA+0x1d8>)
 8003980:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800398a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	685a      	ldr	r2, [r3, #4]
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800399a:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	689a      	ldr	r2, [r3, #8]
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80039aa:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	334c      	adds	r3, #76	; 0x4c
 80039b6:	4619      	mov	r1, r3
 80039b8:	68ba      	ldr	r2, [r7, #8]
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	f000 fc98 	bl	80042f0 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80039c0:	697b      	ldr	r3, [r7, #20]
 80039c2:	685b      	ldr	r3, [r3, #4]
 80039c4:	f003 031f 	and.w	r3, r3, #31
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d10f      	bne.n	80039ec <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	689b      	ldr	r3, [r3, #8]
 80039d2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d129      	bne.n	8003a2e <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	689a      	ldr	r2, [r3, #8]
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80039e8:	609a      	str	r2, [r3, #8]
 80039ea:	e020      	b.n	8003a2e <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	4a17      	ldr	r2, [pc, #92]	; (8003a50 <HAL_ADC_Start_DMA+0x1dc>)
 80039f2:	4293      	cmp	r3, r2
 80039f4:	d11b      	bne.n	8003a2e <HAL_ADC_Start_DMA+0x1ba>
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	689b      	ldr	r3, [r3, #8]
 80039fc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d114      	bne.n	8003a2e <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	689a      	ldr	r2, [r3, #8]
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003a12:	609a      	str	r2, [r3, #8]
 8003a14:	e00b      	b.n	8003a2e <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a1a:	f043 0210 	orr.w	r2, r3, #16
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a26:	f043 0201 	orr.w	r2, r3, #1
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8003a2e:	2300      	movs	r3, #0
}
 8003a30:	4618      	mov	r0, r3
 8003a32:	3718      	adds	r7, #24
 8003a34:	46bd      	mov	sp, r7
 8003a36:	bd80      	pop	{r7, pc}
 8003a38:	20000000 	.word	0x20000000
 8003a3c:	431bde83 	.word	0x431bde83
 8003a40:	40012300 	.word	0x40012300
 8003a44:	08003ecd 	.word	0x08003ecd
 8003a48:	08003f87 	.word	0x08003f87
 8003a4c:	08003fa3 	.word	0x08003fa3
 8003a50:	40012000 	.word	0x40012000

08003a54 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003a54:	b480      	push	{r7}
 8003a56:	b083      	sub	sp, #12
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8003a5c:	bf00      	nop
 8003a5e:	370c      	adds	r7, #12
 8003a60:	46bd      	mov	sp, r7
 8003a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a66:	4770      	bx	lr

08003a68 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003a68:	b480      	push	{r7}
 8003a6a:	b083      	sub	sp, #12
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8003a70:	bf00      	nop
 8003a72:	370c      	adds	r7, #12
 8003a74:	46bd      	mov	sp, r7
 8003a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7a:	4770      	bx	lr

08003a7c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003a7c:	b480      	push	{r7}
 8003a7e:	b083      	sub	sp, #12
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8003a84:	bf00      	nop
 8003a86:	370c      	adds	r7, #12
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8e:	4770      	bx	lr

08003a90 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003a90:	b480      	push	{r7}
 8003a92:	b085      	sub	sp, #20
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
 8003a98:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003aa4:	2b01      	cmp	r3, #1
 8003aa6:	d101      	bne.n	8003aac <HAL_ADC_ConfigChannel+0x1c>
 8003aa8:	2302      	movs	r3, #2
 8003aaa:	e105      	b.n	8003cb8 <HAL_ADC_ConfigChannel+0x228>
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2201      	movs	r2, #1
 8003ab0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003ab4:	683b      	ldr	r3, [r7, #0]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	2b09      	cmp	r3, #9
 8003aba:	d925      	bls.n	8003b08 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	68d9      	ldr	r1, [r3, #12]
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	b29b      	uxth	r3, r3
 8003ac8:	461a      	mov	r2, r3
 8003aca:	4613      	mov	r3, r2
 8003acc:	005b      	lsls	r3, r3, #1
 8003ace:	4413      	add	r3, r2
 8003ad0:	3b1e      	subs	r3, #30
 8003ad2:	2207      	movs	r2, #7
 8003ad4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ad8:	43da      	mvns	r2, r3
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	400a      	ands	r2, r1
 8003ae0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	68d9      	ldr	r1, [r3, #12]
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	689a      	ldr	r2, [r3, #8]
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	b29b      	uxth	r3, r3
 8003af2:	4618      	mov	r0, r3
 8003af4:	4603      	mov	r3, r0
 8003af6:	005b      	lsls	r3, r3, #1
 8003af8:	4403      	add	r3, r0
 8003afa:	3b1e      	subs	r3, #30
 8003afc:	409a      	lsls	r2, r3
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	430a      	orrs	r2, r1
 8003b04:	60da      	str	r2, [r3, #12]
 8003b06:	e022      	b.n	8003b4e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	6919      	ldr	r1, [r3, #16]
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	b29b      	uxth	r3, r3
 8003b14:	461a      	mov	r2, r3
 8003b16:	4613      	mov	r3, r2
 8003b18:	005b      	lsls	r3, r3, #1
 8003b1a:	4413      	add	r3, r2
 8003b1c:	2207      	movs	r2, #7
 8003b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b22:	43da      	mvns	r2, r3
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	400a      	ands	r2, r1
 8003b2a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	6919      	ldr	r1, [r3, #16]
 8003b32:	683b      	ldr	r3, [r7, #0]
 8003b34:	689a      	ldr	r2, [r3, #8]
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	b29b      	uxth	r3, r3
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	4603      	mov	r3, r0
 8003b40:	005b      	lsls	r3, r3, #1
 8003b42:	4403      	add	r3, r0
 8003b44:	409a      	lsls	r2, r3
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	430a      	orrs	r2, r1
 8003b4c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003b4e:	683b      	ldr	r3, [r7, #0]
 8003b50:	685b      	ldr	r3, [r3, #4]
 8003b52:	2b06      	cmp	r3, #6
 8003b54:	d824      	bhi.n	8003ba0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	685a      	ldr	r2, [r3, #4]
 8003b60:	4613      	mov	r3, r2
 8003b62:	009b      	lsls	r3, r3, #2
 8003b64:	4413      	add	r3, r2
 8003b66:	3b05      	subs	r3, #5
 8003b68:	221f      	movs	r2, #31
 8003b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b6e:	43da      	mvns	r2, r3
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	400a      	ands	r2, r1
 8003b76:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003b7e:	683b      	ldr	r3, [r7, #0]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	b29b      	uxth	r3, r3
 8003b84:	4618      	mov	r0, r3
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	685a      	ldr	r2, [r3, #4]
 8003b8a:	4613      	mov	r3, r2
 8003b8c:	009b      	lsls	r3, r3, #2
 8003b8e:	4413      	add	r3, r2
 8003b90:	3b05      	subs	r3, #5
 8003b92:	fa00 f203 	lsl.w	r2, r0, r3
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	430a      	orrs	r2, r1
 8003b9c:	635a      	str	r2, [r3, #52]	; 0x34
 8003b9e:	e04c      	b.n	8003c3a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	685b      	ldr	r3, [r3, #4]
 8003ba4:	2b0c      	cmp	r3, #12
 8003ba6:	d824      	bhi.n	8003bf2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	685a      	ldr	r2, [r3, #4]
 8003bb2:	4613      	mov	r3, r2
 8003bb4:	009b      	lsls	r3, r3, #2
 8003bb6:	4413      	add	r3, r2
 8003bb8:	3b23      	subs	r3, #35	; 0x23
 8003bba:	221f      	movs	r2, #31
 8003bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8003bc0:	43da      	mvns	r2, r3
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	400a      	ands	r2, r1
 8003bc8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	b29b      	uxth	r3, r3
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	685a      	ldr	r2, [r3, #4]
 8003bdc:	4613      	mov	r3, r2
 8003bde:	009b      	lsls	r3, r3, #2
 8003be0:	4413      	add	r3, r2
 8003be2:	3b23      	subs	r3, #35	; 0x23
 8003be4:	fa00 f203 	lsl.w	r2, r0, r3
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	430a      	orrs	r2, r1
 8003bee:	631a      	str	r2, [r3, #48]	; 0x30
 8003bf0:	e023      	b.n	8003c3a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003bf8:	683b      	ldr	r3, [r7, #0]
 8003bfa:	685a      	ldr	r2, [r3, #4]
 8003bfc:	4613      	mov	r3, r2
 8003bfe:	009b      	lsls	r3, r3, #2
 8003c00:	4413      	add	r3, r2
 8003c02:	3b41      	subs	r3, #65	; 0x41
 8003c04:	221f      	movs	r2, #31
 8003c06:	fa02 f303 	lsl.w	r3, r2, r3
 8003c0a:	43da      	mvns	r2, r3
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	400a      	ands	r2, r1
 8003c12:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003c1a:	683b      	ldr	r3, [r7, #0]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	b29b      	uxth	r3, r3
 8003c20:	4618      	mov	r0, r3
 8003c22:	683b      	ldr	r3, [r7, #0]
 8003c24:	685a      	ldr	r2, [r3, #4]
 8003c26:	4613      	mov	r3, r2
 8003c28:	009b      	lsls	r3, r3, #2
 8003c2a:	4413      	add	r3, r2
 8003c2c:	3b41      	subs	r3, #65	; 0x41
 8003c2e:	fa00 f203 	lsl.w	r2, r0, r3
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	430a      	orrs	r2, r1
 8003c38:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003c3a:	4b22      	ldr	r3, [pc, #136]	; (8003cc4 <HAL_ADC_ConfigChannel+0x234>)
 8003c3c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	4a21      	ldr	r2, [pc, #132]	; (8003cc8 <HAL_ADC_ConfigChannel+0x238>)
 8003c44:	4293      	cmp	r3, r2
 8003c46:	d109      	bne.n	8003c5c <HAL_ADC_ConfigChannel+0x1cc>
 8003c48:	683b      	ldr	r3, [r7, #0]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	2b12      	cmp	r3, #18
 8003c4e:	d105      	bne.n	8003c5c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	685b      	ldr	r3, [r3, #4]
 8003c54:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	4a19      	ldr	r2, [pc, #100]	; (8003cc8 <HAL_ADC_ConfigChannel+0x238>)
 8003c62:	4293      	cmp	r3, r2
 8003c64:	d123      	bne.n	8003cae <HAL_ADC_ConfigChannel+0x21e>
 8003c66:	683b      	ldr	r3, [r7, #0]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	2b10      	cmp	r3, #16
 8003c6c:	d003      	beq.n	8003c76 <HAL_ADC_ConfigChannel+0x1e6>
 8003c6e:	683b      	ldr	r3, [r7, #0]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	2b11      	cmp	r3, #17
 8003c74:	d11b      	bne.n	8003cae <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	685b      	ldr	r3, [r3, #4]
 8003c7a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	2b10      	cmp	r3, #16
 8003c88:	d111      	bne.n	8003cae <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003c8a:	4b10      	ldr	r3, [pc, #64]	; (8003ccc <HAL_ADC_ConfigChannel+0x23c>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	4a10      	ldr	r2, [pc, #64]	; (8003cd0 <HAL_ADC_ConfigChannel+0x240>)
 8003c90:	fba2 2303 	umull	r2, r3, r2, r3
 8003c94:	0c9a      	lsrs	r2, r3, #18
 8003c96:	4613      	mov	r3, r2
 8003c98:	009b      	lsls	r3, r3, #2
 8003c9a:	4413      	add	r3, r2
 8003c9c:	005b      	lsls	r3, r3, #1
 8003c9e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003ca0:	e002      	b.n	8003ca8 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8003ca2:	68bb      	ldr	r3, [r7, #8]
 8003ca4:	3b01      	subs	r3, #1
 8003ca6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003ca8:	68bb      	ldr	r3, [r7, #8]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d1f9      	bne.n	8003ca2 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003cb6:	2300      	movs	r3, #0
}
 8003cb8:	4618      	mov	r0, r3
 8003cba:	3714      	adds	r7, #20
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc2:	4770      	bx	lr
 8003cc4:	40012300 	.word	0x40012300
 8003cc8:	40012000 	.word	0x40012000
 8003ccc:	20000000 	.word	0x20000000
 8003cd0:	431bde83 	.word	0x431bde83

08003cd4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003cd4:	b480      	push	{r7}
 8003cd6:	b085      	sub	sp, #20
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003cdc:	4b79      	ldr	r3, [pc, #484]	; (8003ec4 <ADC_Init+0x1f0>)
 8003cde:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	685b      	ldr	r3, [r3, #4]
 8003ce4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	685a      	ldr	r2, [r3, #4]
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	685b      	ldr	r3, [r3, #4]
 8003cf4:	431a      	orrs	r2, r3
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	685a      	ldr	r2, [r3, #4]
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003d08:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	6859      	ldr	r1, [r3, #4]
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	691b      	ldr	r3, [r3, #16]
 8003d14:	021a      	lsls	r2, r3, #8
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	430a      	orrs	r2, r1
 8003d1c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	685a      	ldr	r2, [r3, #4]
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003d2c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	6859      	ldr	r1, [r3, #4]
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	689a      	ldr	r2, [r3, #8]
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	430a      	orrs	r2, r1
 8003d3e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	689a      	ldr	r2, [r3, #8]
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003d4e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	6899      	ldr	r1, [r3, #8]
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	68da      	ldr	r2, [r3, #12]
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	430a      	orrs	r2, r1
 8003d60:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d66:	4a58      	ldr	r2, [pc, #352]	; (8003ec8 <ADC_Init+0x1f4>)
 8003d68:	4293      	cmp	r3, r2
 8003d6a:	d022      	beq.n	8003db2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	689a      	ldr	r2, [r3, #8]
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003d7a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	6899      	ldr	r1, [r3, #8]
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	430a      	orrs	r2, r1
 8003d8c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	689a      	ldr	r2, [r3, #8]
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003d9c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	6899      	ldr	r1, [r3, #8]
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	430a      	orrs	r2, r1
 8003dae:	609a      	str	r2, [r3, #8]
 8003db0:	e00f      	b.n	8003dd2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	689a      	ldr	r2, [r3, #8]
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003dc0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	689a      	ldr	r2, [r3, #8]
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003dd0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	689a      	ldr	r2, [r3, #8]
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f022 0202 	bic.w	r2, r2, #2
 8003de0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	6899      	ldr	r1, [r3, #8]
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	7e1b      	ldrb	r3, [r3, #24]
 8003dec:	005a      	lsls	r2, r3, #1
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	430a      	orrs	r2, r1
 8003df4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d01b      	beq.n	8003e38 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	685a      	ldr	r2, [r3, #4]
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003e0e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	685a      	ldr	r2, [r3, #4]
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003e1e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	6859      	ldr	r1, [r3, #4]
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e2a:	3b01      	subs	r3, #1
 8003e2c:	035a      	lsls	r2, r3, #13
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	430a      	orrs	r2, r1
 8003e34:	605a      	str	r2, [r3, #4]
 8003e36:	e007      	b.n	8003e48 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	685a      	ldr	r2, [r3, #4]
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003e46:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003e56:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	69db      	ldr	r3, [r3, #28]
 8003e62:	3b01      	subs	r3, #1
 8003e64:	051a      	lsls	r2, r3, #20
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	430a      	orrs	r2, r1
 8003e6c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	689a      	ldr	r2, [r3, #8]
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003e7c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	6899      	ldr	r1, [r3, #8]
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003e8a:	025a      	lsls	r2, r3, #9
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	430a      	orrs	r2, r1
 8003e92:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	689a      	ldr	r2, [r3, #8]
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ea2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	6899      	ldr	r1, [r3, #8]
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	695b      	ldr	r3, [r3, #20]
 8003eae:	029a      	lsls	r2, r3, #10
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	430a      	orrs	r2, r1
 8003eb6:	609a      	str	r2, [r3, #8]
}
 8003eb8:	bf00      	nop
 8003eba:	3714      	adds	r7, #20
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec2:	4770      	bx	lr
 8003ec4:	40012300 	.word	0x40012300
 8003ec8:	0f000001 	.word	0x0f000001

08003ecc <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	b084      	sub	sp, #16
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ed8:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ede:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d13c      	bne.n	8003f60 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eea:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	689b      	ldr	r3, [r3, #8]
 8003ef8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d12b      	bne.n	8003f58 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d127      	bne.n	8003f58 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f0e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d006      	beq.n	8003f24 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	689b      	ldr	r3, [r3, #8]
 8003f1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d119      	bne.n	8003f58 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	685a      	ldr	r2, [r3, #4]
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f022 0220 	bic.w	r2, r2, #32
 8003f32:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f38:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f44:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d105      	bne.n	8003f58 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f50:	f043 0201 	orr.w	r2, r3, #1
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003f58:	68f8      	ldr	r0, [r7, #12]
 8003f5a:	f7ff fd7b 	bl	8003a54 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003f5e:	e00e      	b.n	8003f7e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f64:	f003 0310 	and.w	r3, r3, #16
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d003      	beq.n	8003f74 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8003f6c:	68f8      	ldr	r0, [r7, #12]
 8003f6e:	f7ff fd85 	bl	8003a7c <HAL_ADC_ErrorCallback>
}
 8003f72:	e004      	b.n	8003f7e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f7a:	6878      	ldr	r0, [r7, #4]
 8003f7c:	4798      	blx	r3
}
 8003f7e:	bf00      	nop
 8003f80:	3710      	adds	r7, #16
 8003f82:	46bd      	mov	sp, r7
 8003f84:	bd80      	pop	{r7, pc}

08003f86 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003f86:	b580      	push	{r7, lr}
 8003f88:	b084      	sub	sp, #16
 8003f8a:	af00      	add	r7, sp, #0
 8003f8c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f92:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003f94:	68f8      	ldr	r0, [r7, #12]
 8003f96:	f7ff fd67 	bl	8003a68 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003f9a:	bf00      	nop
 8003f9c:	3710      	adds	r7, #16
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	bd80      	pop	{r7, pc}

08003fa2 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8003fa2:	b580      	push	{r7, lr}
 8003fa4:	b084      	sub	sp, #16
 8003fa6:	af00      	add	r7, sp, #0
 8003fa8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fae:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	2240      	movs	r2, #64	; 0x40
 8003fb4:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fba:	f043 0204 	orr.w	r2, r3, #4
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003fc2:	68f8      	ldr	r0, [r7, #12]
 8003fc4:	f7ff fd5a 	bl	8003a7c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003fc8:	bf00      	nop
 8003fca:	3710      	adds	r7, #16
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	bd80      	pop	{r7, pc}

08003fd0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003fd0:	b480      	push	{r7}
 8003fd2:	b085      	sub	sp, #20
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	f003 0307 	and.w	r3, r3, #7
 8003fde:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003fe0:	4b0c      	ldr	r3, [pc, #48]	; (8004014 <__NVIC_SetPriorityGrouping+0x44>)
 8003fe2:	68db      	ldr	r3, [r3, #12]
 8003fe4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003fe6:	68ba      	ldr	r2, [r7, #8]
 8003fe8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003fec:	4013      	ands	r3, r2
 8003fee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003ff4:	68bb      	ldr	r3, [r7, #8]
 8003ff6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003ff8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003ffc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004000:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004002:	4a04      	ldr	r2, [pc, #16]	; (8004014 <__NVIC_SetPriorityGrouping+0x44>)
 8004004:	68bb      	ldr	r3, [r7, #8]
 8004006:	60d3      	str	r3, [r2, #12]
}
 8004008:	bf00      	nop
 800400a:	3714      	adds	r7, #20
 800400c:	46bd      	mov	sp, r7
 800400e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004012:	4770      	bx	lr
 8004014:	e000ed00 	.word	0xe000ed00

08004018 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004018:	b480      	push	{r7}
 800401a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800401c:	4b04      	ldr	r3, [pc, #16]	; (8004030 <__NVIC_GetPriorityGrouping+0x18>)
 800401e:	68db      	ldr	r3, [r3, #12]
 8004020:	0a1b      	lsrs	r3, r3, #8
 8004022:	f003 0307 	and.w	r3, r3, #7
}
 8004026:	4618      	mov	r0, r3
 8004028:	46bd      	mov	sp, r7
 800402a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402e:	4770      	bx	lr
 8004030:	e000ed00 	.word	0xe000ed00

08004034 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004034:	b480      	push	{r7}
 8004036:	b083      	sub	sp, #12
 8004038:	af00      	add	r7, sp, #0
 800403a:	4603      	mov	r3, r0
 800403c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800403e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004042:	2b00      	cmp	r3, #0
 8004044:	db0b      	blt.n	800405e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004046:	79fb      	ldrb	r3, [r7, #7]
 8004048:	f003 021f 	and.w	r2, r3, #31
 800404c:	4907      	ldr	r1, [pc, #28]	; (800406c <__NVIC_EnableIRQ+0x38>)
 800404e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004052:	095b      	lsrs	r3, r3, #5
 8004054:	2001      	movs	r0, #1
 8004056:	fa00 f202 	lsl.w	r2, r0, r2
 800405a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800405e:	bf00      	nop
 8004060:	370c      	adds	r7, #12
 8004062:	46bd      	mov	sp, r7
 8004064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004068:	4770      	bx	lr
 800406a:	bf00      	nop
 800406c:	e000e100 	.word	0xe000e100

08004070 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004070:	b480      	push	{r7}
 8004072:	b083      	sub	sp, #12
 8004074:	af00      	add	r7, sp, #0
 8004076:	4603      	mov	r3, r0
 8004078:	6039      	str	r1, [r7, #0]
 800407a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800407c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004080:	2b00      	cmp	r3, #0
 8004082:	db0a      	blt.n	800409a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	b2da      	uxtb	r2, r3
 8004088:	490c      	ldr	r1, [pc, #48]	; (80040bc <__NVIC_SetPriority+0x4c>)
 800408a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800408e:	0112      	lsls	r2, r2, #4
 8004090:	b2d2      	uxtb	r2, r2
 8004092:	440b      	add	r3, r1
 8004094:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004098:	e00a      	b.n	80040b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800409a:	683b      	ldr	r3, [r7, #0]
 800409c:	b2da      	uxtb	r2, r3
 800409e:	4908      	ldr	r1, [pc, #32]	; (80040c0 <__NVIC_SetPriority+0x50>)
 80040a0:	79fb      	ldrb	r3, [r7, #7]
 80040a2:	f003 030f 	and.w	r3, r3, #15
 80040a6:	3b04      	subs	r3, #4
 80040a8:	0112      	lsls	r2, r2, #4
 80040aa:	b2d2      	uxtb	r2, r2
 80040ac:	440b      	add	r3, r1
 80040ae:	761a      	strb	r2, [r3, #24]
}
 80040b0:	bf00      	nop
 80040b2:	370c      	adds	r7, #12
 80040b4:	46bd      	mov	sp, r7
 80040b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ba:	4770      	bx	lr
 80040bc:	e000e100 	.word	0xe000e100
 80040c0:	e000ed00 	.word	0xe000ed00

080040c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80040c4:	b480      	push	{r7}
 80040c6:	b089      	sub	sp, #36	; 0x24
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	60f8      	str	r0, [r7, #12]
 80040cc:	60b9      	str	r1, [r7, #8]
 80040ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	f003 0307 	and.w	r3, r3, #7
 80040d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80040d8:	69fb      	ldr	r3, [r7, #28]
 80040da:	f1c3 0307 	rsb	r3, r3, #7
 80040de:	2b04      	cmp	r3, #4
 80040e0:	bf28      	it	cs
 80040e2:	2304      	movcs	r3, #4
 80040e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80040e6:	69fb      	ldr	r3, [r7, #28]
 80040e8:	3304      	adds	r3, #4
 80040ea:	2b06      	cmp	r3, #6
 80040ec:	d902      	bls.n	80040f4 <NVIC_EncodePriority+0x30>
 80040ee:	69fb      	ldr	r3, [r7, #28]
 80040f0:	3b03      	subs	r3, #3
 80040f2:	e000      	b.n	80040f6 <NVIC_EncodePriority+0x32>
 80040f4:	2300      	movs	r3, #0
 80040f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80040f8:	f04f 32ff 	mov.w	r2, #4294967295
 80040fc:	69bb      	ldr	r3, [r7, #24]
 80040fe:	fa02 f303 	lsl.w	r3, r2, r3
 8004102:	43da      	mvns	r2, r3
 8004104:	68bb      	ldr	r3, [r7, #8]
 8004106:	401a      	ands	r2, r3
 8004108:	697b      	ldr	r3, [r7, #20]
 800410a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800410c:	f04f 31ff 	mov.w	r1, #4294967295
 8004110:	697b      	ldr	r3, [r7, #20]
 8004112:	fa01 f303 	lsl.w	r3, r1, r3
 8004116:	43d9      	mvns	r1, r3
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800411c:	4313      	orrs	r3, r2
         );
}
 800411e:	4618      	mov	r0, r3
 8004120:	3724      	adds	r7, #36	; 0x24
 8004122:	46bd      	mov	sp, r7
 8004124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004128:	4770      	bx	lr

0800412a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800412a:	b580      	push	{r7, lr}
 800412c:	b082      	sub	sp, #8
 800412e:	af00      	add	r7, sp, #0
 8004130:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004132:	6878      	ldr	r0, [r7, #4]
 8004134:	f7ff ff4c 	bl	8003fd0 <__NVIC_SetPriorityGrouping>
}
 8004138:	bf00      	nop
 800413a:	3708      	adds	r7, #8
 800413c:	46bd      	mov	sp, r7
 800413e:	bd80      	pop	{r7, pc}

08004140 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004140:	b580      	push	{r7, lr}
 8004142:	b086      	sub	sp, #24
 8004144:	af00      	add	r7, sp, #0
 8004146:	4603      	mov	r3, r0
 8004148:	60b9      	str	r1, [r7, #8]
 800414a:	607a      	str	r2, [r7, #4]
 800414c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800414e:	2300      	movs	r3, #0
 8004150:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004152:	f7ff ff61 	bl	8004018 <__NVIC_GetPriorityGrouping>
 8004156:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004158:	687a      	ldr	r2, [r7, #4]
 800415a:	68b9      	ldr	r1, [r7, #8]
 800415c:	6978      	ldr	r0, [r7, #20]
 800415e:	f7ff ffb1 	bl	80040c4 <NVIC_EncodePriority>
 8004162:	4602      	mov	r2, r0
 8004164:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004168:	4611      	mov	r1, r2
 800416a:	4618      	mov	r0, r3
 800416c:	f7ff ff80 	bl	8004070 <__NVIC_SetPriority>
}
 8004170:	bf00      	nop
 8004172:	3718      	adds	r7, #24
 8004174:	46bd      	mov	sp, r7
 8004176:	bd80      	pop	{r7, pc}

08004178 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004178:	b580      	push	{r7, lr}
 800417a:	b082      	sub	sp, #8
 800417c:	af00      	add	r7, sp, #0
 800417e:	4603      	mov	r3, r0
 8004180:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004182:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004186:	4618      	mov	r0, r3
 8004188:	f7ff ff54 	bl	8004034 <__NVIC_EnableIRQ>
}
 800418c:	bf00      	nop
 800418e:	3708      	adds	r7, #8
 8004190:	46bd      	mov	sp, r7
 8004192:	bd80      	pop	{r7, pc}

08004194 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004194:	b580      	push	{r7, lr}
 8004196:	b086      	sub	sp, #24
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800419c:	2300      	movs	r3, #0
 800419e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80041a0:	f7ff faf4 	bl	800378c <HAL_GetTick>
 80041a4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d101      	bne.n	80041b0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80041ac:	2301      	movs	r3, #1
 80041ae:	e099      	b.n	80042e4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2202      	movs	r2, #2
 80041b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2200      	movs	r2, #0
 80041bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	681a      	ldr	r2, [r3, #0]
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f022 0201 	bic.w	r2, r2, #1
 80041ce:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80041d0:	e00f      	b.n	80041f2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80041d2:	f7ff fadb 	bl	800378c <HAL_GetTick>
 80041d6:	4602      	mov	r2, r0
 80041d8:	693b      	ldr	r3, [r7, #16]
 80041da:	1ad3      	subs	r3, r2, r3
 80041dc:	2b05      	cmp	r3, #5
 80041de:	d908      	bls.n	80041f2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2220      	movs	r2, #32
 80041e4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	2203      	movs	r2, #3
 80041ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80041ee:	2303      	movs	r3, #3
 80041f0:	e078      	b.n	80042e4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f003 0301 	and.w	r3, r3, #1
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d1e8      	bne.n	80041d2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004208:	697a      	ldr	r2, [r7, #20]
 800420a:	4b38      	ldr	r3, [pc, #224]	; (80042ec <HAL_DMA_Init+0x158>)
 800420c:	4013      	ands	r3, r2
 800420e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	685a      	ldr	r2, [r3, #4]
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	689b      	ldr	r3, [r3, #8]
 8004218:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800421e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	691b      	ldr	r3, [r3, #16]
 8004224:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800422a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	699b      	ldr	r3, [r3, #24]
 8004230:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004236:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	6a1b      	ldr	r3, [r3, #32]
 800423c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800423e:	697a      	ldr	r2, [r7, #20]
 8004240:	4313      	orrs	r3, r2
 8004242:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004248:	2b04      	cmp	r3, #4
 800424a:	d107      	bne.n	800425c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004254:	4313      	orrs	r3, r2
 8004256:	697a      	ldr	r2, [r7, #20]
 8004258:	4313      	orrs	r3, r2
 800425a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	697a      	ldr	r2, [r7, #20]
 8004262:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	695b      	ldr	r3, [r3, #20]
 800426a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800426c:	697b      	ldr	r3, [r7, #20]
 800426e:	f023 0307 	bic.w	r3, r3, #7
 8004272:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004278:	697a      	ldr	r2, [r7, #20]
 800427a:	4313      	orrs	r3, r2
 800427c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004282:	2b04      	cmp	r3, #4
 8004284:	d117      	bne.n	80042b6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800428a:	697a      	ldr	r2, [r7, #20]
 800428c:	4313      	orrs	r3, r2
 800428e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004294:	2b00      	cmp	r3, #0
 8004296:	d00e      	beq.n	80042b6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004298:	6878      	ldr	r0, [r7, #4]
 800429a:	f000 fb01 	bl	80048a0 <DMA_CheckFifoParam>
 800429e:	4603      	mov	r3, r0
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d008      	beq.n	80042b6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2240      	movs	r2, #64	; 0x40
 80042a8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	2201      	movs	r2, #1
 80042ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80042b2:	2301      	movs	r3, #1
 80042b4:	e016      	b.n	80042e4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	697a      	ldr	r2, [r7, #20]
 80042bc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80042be:	6878      	ldr	r0, [r7, #4]
 80042c0:	f000 fab8 	bl	8004834 <DMA_CalcBaseAndBitshift>
 80042c4:	4603      	mov	r3, r0
 80042c6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042cc:	223f      	movs	r2, #63	; 0x3f
 80042ce:	409a      	lsls	r2, r3
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2200      	movs	r2, #0
 80042d8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	2201      	movs	r2, #1
 80042de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80042e2:	2300      	movs	r3, #0
}
 80042e4:	4618      	mov	r0, r3
 80042e6:	3718      	adds	r7, #24
 80042e8:	46bd      	mov	sp, r7
 80042ea:	bd80      	pop	{r7, pc}
 80042ec:	f010803f 	.word	0xf010803f

080042f0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b086      	sub	sp, #24
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	60f8      	str	r0, [r7, #12]
 80042f8:	60b9      	str	r1, [r7, #8]
 80042fa:	607a      	str	r2, [r7, #4]
 80042fc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80042fe:	2300      	movs	r3, #0
 8004300:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004306:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800430e:	2b01      	cmp	r3, #1
 8004310:	d101      	bne.n	8004316 <HAL_DMA_Start_IT+0x26>
 8004312:	2302      	movs	r3, #2
 8004314:	e040      	b.n	8004398 <HAL_DMA_Start_IT+0xa8>
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	2201      	movs	r2, #1
 800431a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004324:	b2db      	uxtb	r3, r3
 8004326:	2b01      	cmp	r3, #1
 8004328:	d12f      	bne.n	800438a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	2202      	movs	r2, #2
 800432e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	2200      	movs	r2, #0
 8004336:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	687a      	ldr	r2, [r7, #4]
 800433c:	68b9      	ldr	r1, [r7, #8]
 800433e:	68f8      	ldr	r0, [r7, #12]
 8004340:	f000 fa4a 	bl	80047d8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004348:	223f      	movs	r2, #63	; 0x3f
 800434a:	409a      	lsls	r2, r3
 800434c:	693b      	ldr	r3, [r7, #16]
 800434e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	681a      	ldr	r2, [r3, #0]
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f042 0216 	orr.w	r2, r2, #22
 800435e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004364:	2b00      	cmp	r3, #0
 8004366:	d007      	beq.n	8004378 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	681a      	ldr	r2, [r3, #0]
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f042 0208 	orr.w	r2, r2, #8
 8004376:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	681a      	ldr	r2, [r3, #0]
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f042 0201 	orr.w	r2, r2, #1
 8004386:	601a      	str	r2, [r3, #0]
 8004388:	e005      	b.n	8004396 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	2200      	movs	r2, #0
 800438e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004392:	2302      	movs	r3, #2
 8004394:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004396:	7dfb      	ldrb	r3, [r7, #23]
}
 8004398:	4618      	mov	r0, r3
 800439a:	3718      	adds	r7, #24
 800439c:	46bd      	mov	sp, r7
 800439e:	bd80      	pop	{r7, pc}

080043a0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80043a0:	b580      	push	{r7, lr}
 80043a2:	b084      	sub	sp, #16
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043ac:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80043ae:	f7ff f9ed 	bl	800378c <HAL_GetTick>
 80043b2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80043ba:	b2db      	uxtb	r3, r3
 80043bc:	2b02      	cmp	r3, #2
 80043be:	d008      	beq.n	80043d2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2280      	movs	r2, #128	; 0x80
 80043c4:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	2200      	movs	r2, #0
 80043ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80043ce:	2301      	movs	r3, #1
 80043d0:	e052      	b.n	8004478 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	681a      	ldr	r2, [r3, #0]
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f022 0216 	bic.w	r2, r2, #22
 80043e0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	695a      	ldr	r2, [r3, #20]
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80043f0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d103      	bne.n	8004402 <HAL_DMA_Abort+0x62>
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d007      	beq.n	8004412 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	681a      	ldr	r2, [r3, #0]
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f022 0208 	bic.w	r2, r2, #8
 8004410:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	681a      	ldr	r2, [r3, #0]
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f022 0201 	bic.w	r2, r2, #1
 8004420:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004422:	e013      	b.n	800444c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004424:	f7ff f9b2 	bl	800378c <HAL_GetTick>
 8004428:	4602      	mov	r2, r0
 800442a:	68bb      	ldr	r3, [r7, #8]
 800442c:	1ad3      	subs	r3, r2, r3
 800442e:	2b05      	cmp	r3, #5
 8004430:	d90c      	bls.n	800444c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	2220      	movs	r2, #32
 8004436:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2203      	movs	r2, #3
 800443c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2200      	movs	r2, #0
 8004444:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8004448:	2303      	movs	r3, #3
 800444a:	e015      	b.n	8004478 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f003 0301 	and.w	r3, r3, #1
 8004456:	2b00      	cmp	r3, #0
 8004458:	d1e4      	bne.n	8004424 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800445e:	223f      	movs	r2, #63	; 0x3f
 8004460:	409a      	lsls	r2, r3
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	2201      	movs	r2, #1
 800446a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	2200      	movs	r2, #0
 8004472:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8004476:	2300      	movs	r3, #0
}
 8004478:	4618      	mov	r0, r3
 800447a:	3710      	adds	r7, #16
 800447c:	46bd      	mov	sp, r7
 800447e:	bd80      	pop	{r7, pc}

08004480 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004480:	b480      	push	{r7}
 8004482:	b083      	sub	sp, #12
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800448e:	b2db      	uxtb	r3, r3
 8004490:	2b02      	cmp	r3, #2
 8004492:	d004      	beq.n	800449e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2280      	movs	r2, #128	; 0x80
 8004498:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800449a:	2301      	movs	r3, #1
 800449c:	e00c      	b.n	80044b8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	2205      	movs	r2, #5
 80044a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	681a      	ldr	r2, [r3, #0]
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f022 0201 	bic.w	r2, r2, #1
 80044b4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80044b6:	2300      	movs	r3, #0
}
 80044b8:	4618      	mov	r0, r3
 80044ba:	370c      	adds	r7, #12
 80044bc:	46bd      	mov	sp, r7
 80044be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c2:	4770      	bx	lr

080044c4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80044c4:	b580      	push	{r7, lr}
 80044c6:	b086      	sub	sp, #24
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80044cc:	2300      	movs	r3, #0
 80044ce:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80044d0:	4b8e      	ldr	r3, [pc, #568]	; (800470c <HAL_DMA_IRQHandler+0x248>)
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	4a8e      	ldr	r2, [pc, #568]	; (8004710 <HAL_DMA_IRQHandler+0x24c>)
 80044d6:	fba2 2303 	umull	r2, r3, r2, r3
 80044da:	0a9b      	lsrs	r3, r3, #10
 80044dc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044e2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80044e4:	693b      	ldr	r3, [r7, #16]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044ee:	2208      	movs	r2, #8
 80044f0:	409a      	lsls	r2, r3
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	4013      	ands	r3, r2
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d01a      	beq.n	8004530 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f003 0304 	and.w	r3, r3, #4
 8004504:	2b00      	cmp	r3, #0
 8004506:	d013      	beq.n	8004530 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	681a      	ldr	r2, [r3, #0]
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f022 0204 	bic.w	r2, r2, #4
 8004516:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800451c:	2208      	movs	r2, #8
 800451e:	409a      	lsls	r2, r3
 8004520:	693b      	ldr	r3, [r7, #16]
 8004522:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004528:	f043 0201 	orr.w	r2, r3, #1
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004534:	2201      	movs	r2, #1
 8004536:	409a      	lsls	r2, r3
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	4013      	ands	r3, r2
 800453c:	2b00      	cmp	r3, #0
 800453e:	d012      	beq.n	8004566 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	695b      	ldr	r3, [r3, #20]
 8004546:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800454a:	2b00      	cmp	r3, #0
 800454c:	d00b      	beq.n	8004566 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004552:	2201      	movs	r2, #1
 8004554:	409a      	lsls	r2, r3
 8004556:	693b      	ldr	r3, [r7, #16]
 8004558:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800455e:	f043 0202 	orr.w	r2, r3, #2
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800456a:	2204      	movs	r2, #4
 800456c:	409a      	lsls	r2, r3
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	4013      	ands	r3, r2
 8004572:	2b00      	cmp	r3, #0
 8004574:	d012      	beq.n	800459c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f003 0302 	and.w	r3, r3, #2
 8004580:	2b00      	cmp	r3, #0
 8004582:	d00b      	beq.n	800459c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004588:	2204      	movs	r2, #4
 800458a:	409a      	lsls	r2, r3
 800458c:	693b      	ldr	r3, [r7, #16]
 800458e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004594:	f043 0204 	orr.w	r2, r3, #4
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045a0:	2210      	movs	r2, #16
 80045a2:	409a      	lsls	r2, r3
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	4013      	ands	r3, r2
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d043      	beq.n	8004634 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f003 0308 	and.w	r3, r3, #8
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d03c      	beq.n	8004634 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045be:	2210      	movs	r2, #16
 80045c0:	409a      	lsls	r2, r3
 80045c2:	693b      	ldr	r3, [r7, #16]
 80045c4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d018      	beq.n	8004606 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d108      	bne.n	80045f4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d024      	beq.n	8004634 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ee:	6878      	ldr	r0, [r7, #4]
 80045f0:	4798      	blx	r3
 80045f2:	e01f      	b.n	8004634 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d01b      	beq.n	8004634 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004600:	6878      	ldr	r0, [r7, #4]
 8004602:	4798      	blx	r3
 8004604:	e016      	b.n	8004634 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004610:	2b00      	cmp	r3, #0
 8004612:	d107      	bne.n	8004624 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	681a      	ldr	r2, [r3, #0]
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f022 0208 	bic.w	r2, r2, #8
 8004622:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004628:	2b00      	cmp	r3, #0
 800462a:	d003      	beq.n	8004634 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004630:	6878      	ldr	r0, [r7, #4]
 8004632:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004638:	2220      	movs	r2, #32
 800463a:	409a      	lsls	r2, r3
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	4013      	ands	r3, r2
 8004640:	2b00      	cmp	r3, #0
 8004642:	f000 808f 	beq.w	8004764 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f003 0310 	and.w	r3, r3, #16
 8004650:	2b00      	cmp	r3, #0
 8004652:	f000 8087 	beq.w	8004764 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800465a:	2220      	movs	r2, #32
 800465c:	409a      	lsls	r2, r3
 800465e:	693b      	ldr	r3, [r7, #16]
 8004660:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004668:	b2db      	uxtb	r3, r3
 800466a:	2b05      	cmp	r3, #5
 800466c:	d136      	bne.n	80046dc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	681a      	ldr	r2, [r3, #0]
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f022 0216 	bic.w	r2, r2, #22
 800467c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	695a      	ldr	r2, [r3, #20]
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800468c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004692:	2b00      	cmp	r3, #0
 8004694:	d103      	bne.n	800469e <HAL_DMA_IRQHandler+0x1da>
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800469a:	2b00      	cmp	r3, #0
 800469c:	d007      	beq.n	80046ae <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	681a      	ldr	r2, [r3, #0]
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f022 0208 	bic.w	r2, r2, #8
 80046ac:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046b2:	223f      	movs	r2, #63	; 0x3f
 80046b4:	409a      	lsls	r2, r3
 80046b6:	693b      	ldr	r3, [r7, #16]
 80046b8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	2201      	movs	r2, #1
 80046be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	2200      	movs	r2, #0
 80046c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d07e      	beq.n	80047d0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046d6:	6878      	ldr	r0, [r7, #4]
 80046d8:	4798      	blx	r3
        }
        return;
 80046da:	e079      	b.n	80047d0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d01d      	beq.n	8004726 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d10d      	bne.n	8004714 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d031      	beq.n	8004764 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004704:	6878      	ldr	r0, [r7, #4]
 8004706:	4798      	blx	r3
 8004708:	e02c      	b.n	8004764 <HAL_DMA_IRQHandler+0x2a0>
 800470a:	bf00      	nop
 800470c:	20000000 	.word	0x20000000
 8004710:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004718:	2b00      	cmp	r3, #0
 800471a:	d023      	beq.n	8004764 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004720:	6878      	ldr	r0, [r7, #4]
 8004722:	4798      	blx	r3
 8004724:	e01e      	b.n	8004764 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004730:	2b00      	cmp	r3, #0
 8004732:	d10f      	bne.n	8004754 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	681a      	ldr	r2, [r3, #0]
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f022 0210 	bic.w	r2, r2, #16
 8004742:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2201      	movs	r2, #1
 8004748:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2200      	movs	r2, #0
 8004750:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004758:	2b00      	cmp	r3, #0
 800475a:	d003      	beq.n	8004764 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004760:	6878      	ldr	r0, [r7, #4]
 8004762:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004768:	2b00      	cmp	r3, #0
 800476a:	d032      	beq.n	80047d2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004770:	f003 0301 	and.w	r3, r3, #1
 8004774:	2b00      	cmp	r3, #0
 8004776:	d022      	beq.n	80047be <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2205      	movs	r2, #5
 800477c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	681a      	ldr	r2, [r3, #0]
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f022 0201 	bic.w	r2, r2, #1
 800478e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004790:	68bb      	ldr	r3, [r7, #8]
 8004792:	3301      	adds	r3, #1
 8004794:	60bb      	str	r3, [r7, #8]
 8004796:	697a      	ldr	r2, [r7, #20]
 8004798:	429a      	cmp	r2, r3
 800479a:	d307      	bcc.n	80047ac <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f003 0301 	and.w	r3, r3, #1
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d1f2      	bne.n	8004790 <HAL_DMA_IRQHandler+0x2cc>
 80047aa:	e000      	b.n	80047ae <HAL_DMA_IRQHandler+0x2ea>
          break;
 80047ac:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	2201      	movs	r2, #1
 80047b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	2200      	movs	r2, #0
 80047ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d005      	beq.n	80047d2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047ca:	6878      	ldr	r0, [r7, #4]
 80047cc:	4798      	blx	r3
 80047ce:	e000      	b.n	80047d2 <HAL_DMA_IRQHandler+0x30e>
        return;
 80047d0:	bf00      	nop
    }
  }
}
 80047d2:	3718      	adds	r7, #24
 80047d4:	46bd      	mov	sp, r7
 80047d6:	bd80      	pop	{r7, pc}

080047d8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80047d8:	b480      	push	{r7}
 80047da:	b085      	sub	sp, #20
 80047dc:	af00      	add	r7, sp, #0
 80047de:	60f8      	str	r0, [r7, #12]
 80047e0:	60b9      	str	r1, [r7, #8]
 80047e2:	607a      	str	r2, [r7, #4]
 80047e4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	681a      	ldr	r2, [r3, #0]
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80047f4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	683a      	ldr	r2, [r7, #0]
 80047fc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	689b      	ldr	r3, [r3, #8]
 8004802:	2b40      	cmp	r3, #64	; 0x40
 8004804:	d108      	bne.n	8004818 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	687a      	ldr	r2, [r7, #4]
 800480c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	68ba      	ldr	r2, [r7, #8]
 8004814:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004816:	e007      	b.n	8004828 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	68ba      	ldr	r2, [r7, #8]
 800481e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	687a      	ldr	r2, [r7, #4]
 8004826:	60da      	str	r2, [r3, #12]
}
 8004828:	bf00      	nop
 800482a:	3714      	adds	r7, #20
 800482c:	46bd      	mov	sp, r7
 800482e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004832:	4770      	bx	lr

08004834 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004834:	b480      	push	{r7}
 8004836:	b085      	sub	sp, #20
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	b2db      	uxtb	r3, r3
 8004842:	3b10      	subs	r3, #16
 8004844:	4a14      	ldr	r2, [pc, #80]	; (8004898 <DMA_CalcBaseAndBitshift+0x64>)
 8004846:	fba2 2303 	umull	r2, r3, r2, r3
 800484a:	091b      	lsrs	r3, r3, #4
 800484c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800484e:	4a13      	ldr	r2, [pc, #76]	; (800489c <DMA_CalcBaseAndBitshift+0x68>)
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	4413      	add	r3, r2
 8004854:	781b      	ldrb	r3, [r3, #0]
 8004856:	461a      	mov	r2, r3
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	2b03      	cmp	r3, #3
 8004860:	d909      	bls.n	8004876 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800486a:	f023 0303 	bic.w	r3, r3, #3
 800486e:	1d1a      	adds	r2, r3, #4
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	659a      	str	r2, [r3, #88]	; 0x58
 8004874:	e007      	b.n	8004886 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800487e:	f023 0303 	bic.w	r3, r3, #3
 8004882:	687a      	ldr	r2, [r7, #4]
 8004884:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800488a:	4618      	mov	r0, r3
 800488c:	3714      	adds	r7, #20
 800488e:	46bd      	mov	sp, r7
 8004890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004894:	4770      	bx	lr
 8004896:	bf00      	nop
 8004898:	aaaaaaab 	.word	0xaaaaaaab
 800489c:	0800b0b0 	.word	0x0800b0b0

080048a0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80048a0:	b480      	push	{r7}
 80048a2:	b085      	sub	sp, #20
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80048a8:	2300      	movs	r3, #0
 80048aa:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048b0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	699b      	ldr	r3, [r3, #24]
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d11f      	bne.n	80048fa <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80048ba:	68bb      	ldr	r3, [r7, #8]
 80048bc:	2b03      	cmp	r3, #3
 80048be:	d856      	bhi.n	800496e <DMA_CheckFifoParam+0xce>
 80048c0:	a201      	add	r2, pc, #4	; (adr r2, 80048c8 <DMA_CheckFifoParam+0x28>)
 80048c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048c6:	bf00      	nop
 80048c8:	080048d9 	.word	0x080048d9
 80048cc:	080048eb 	.word	0x080048eb
 80048d0:	080048d9 	.word	0x080048d9
 80048d4:	0800496f 	.word	0x0800496f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048dc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d046      	beq.n	8004972 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80048e4:	2301      	movs	r3, #1
 80048e6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80048e8:	e043      	b.n	8004972 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048ee:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80048f2:	d140      	bne.n	8004976 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80048f4:	2301      	movs	r3, #1
 80048f6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80048f8:	e03d      	b.n	8004976 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	699b      	ldr	r3, [r3, #24]
 80048fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004902:	d121      	bne.n	8004948 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004904:	68bb      	ldr	r3, [r7, #8]
 8004906:	2b03      	cmp	r3, #3
 8004908:	d837      	bhi.n	800497a <DMA_CheckFifoParam+0xda>
 800490a:	a201      	add	r2, pc, #4	; (adr r2, 8004910 <DMA_CheckFifoParam+0x70>)
 800490c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004910:	08004921 	.word	0x08004921
 8004914:	08004927 	.word	0x08004927
 8004918:	08004921 	.word	0x08004921
 800491c:	08004939 	.word	0x08004939
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004920:	2301      	movs	r3, #1
 8004922:	73fb      	strb	r3, [r7, #15]
      break;
 8004924:	e030      	b.n	8004988 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800492a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800492e:	2b00      	cmp	r3, #0
 8004930:	d025      	beq.n	800497e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004932:	2301      	movs	r3, #1
 8004934:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004936:	e022      	b.n	800497e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800493c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004940:	d11f      	bne.n	8004982 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004942:	2301      	movs	r3, #1
 8004944:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004946:	e01c      	b.n	8004982 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004948:	68bb      	ldr	r3, [r7, #8]
 800494a:	2b02      	cmp	r3, #2
 800494c:	d903      	bls.n	8004956 <DMA_CheckFifoParam+0xb6>
 800494e:	68bb      	ldr	r3, [r7, #8]
 8004950:	2b03      	cmp	r3, #3
 8004952:	d003      	beq.n	800495c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004954:	e018      	b.n	8004988 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004956:	2301      	movs	r3, #1
 8004958:	73fb      	strb	r3, [r7, #15]
      break;
 800495a:	e015      	b.n	8004988 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004960:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004964:	2b00      	cmp	r3, #0
 8004966:	d00e      	beq.n	8004986 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004968:	2301      	movs	r3, #1
 800496a:	73fb      	strb	r3, [r7, #15]
      break;
 800496c:	e00b      	b.n	8004986 <DMA_CheckFifoParam+0xe6>
      break;
 800496e:	bf00      	nop
 8004970:	e00a      	b.n	8004988 <DMA_CheckFifoParam+0xe8>
      break;
 8004972:	bf00      	nop
 8004974:	e008      	b.n	8004988 <DMA_CheckFifoParam+0xe8>
      break;
 8004976:	bf00      	nop
 8004978:	e006      	b.n	8004988 <DMA_CheckFifoParam+0xe8>
      break;
 800497a:	bf00      	nop
 800497c:	e004      	b.n	8004988 <DMA_CheckFifoParam+0xe8>
      break;
 800497e:	bf00      	nop
 8004980:	e002      	b.n	8004988 <DMA_CheckFifoParam+0xe8>
      break;   
 8004982:	bf00      	nop
 8004984:	e000      	b.n	8004988 <DMA_CheckFifoParam+0xe8>
      break;
 8004986:	bf00      	nop
    }
  } 
  
  return status; 
 8004988:	7bfb      	ldrb	r3, [r7, #15]
}
 800498a:	4618      	mov	r0, r3
 800498c:	3714      	adds	r7, #20
 800498e:	46bd      	mov	sp, r7
 8004990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004994:	4770      	bx	lr
 8004996:	bf00      	nop

08004998 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004998:	b480      	push	{r7}
 800499a:	b089      	sub	sp, #36	; 0x24
 800499c:	af00      	add	r7, sp, #0
 800499e:	6078      	str	r0, [r7, #4]
 80049a0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80049a2:	2300      	movs	r3, #0
 80049a4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80049a6:	2300      	movs	r3, #0
 80049a8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80049aa:	2300      	movs	r3, #0
 80049ac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80049ae:	2300      	movs	r3, #0
 80049b0:	61fb      	str	r3, [r7, #28]
 80049b2:	e159      	b.n	8004c68 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80049b4:	2201      	movs	r2, #1
 80049b6:	69fb      	ldr	r3, [r7, #28]
 80049b8:	fa02 f303 	lsl.w	r3, r2, r3
 80049bc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80049be:	683b      	ldr	r3, [r7, #0]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	697a      	ldr	r2, [r7, #20]
 80049c4:	4013      	ands	r3, r2
 80049c6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80049c8:	693a      	ldr	r2, [r7, #16]
 80049ca:	697b      	ldr	r3, [r7, #20]
 80049cc:	429a      	cmp	r2, r3
 80049ce:	f040 8148 	bne.w	8004c62 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80049d2:	683b      	ldr	r3, [r7, #0]
 80049d4:	685b      	ldr	r3, [r3, #4]
 80049d6:	f003 0303 	and.w	r3, r3, #3
 80049da:	2b01      	cmp	r3, #1
 80049dc:	d005      	beq.n	80049ea <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80049de:	683b      	ldr	r3, [r7, #0]
 80049e0:	685b      	ldr	r3, [r3, #4]
 80049e2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80049e6:	2b02      	cmp	r3, #2
 80049e8:	d130      	bne.n	8004a4c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	689b      	ldr	r3, [r3, #8]
 80049ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80049f0:	69fb      	ldr	r3, [r7, #28]
 80049f2:	005b      	lsls	r3, r3, #1
 80049f4:	2203      	movs	r2, #3
 80049f6:	fa02 f303 	lsl.w	r3, r2, r3
 80049fa:	43db      	mvns	r3, r3
 80049fc:	69ba      	ldr	r2, [r7, #24]
 80049fe:	4013      	ands	r3, r2
 8004a00:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004a02:	683b      	ldr	r3, [r7, #0]
 8004a04:	68da      	ldr	r2, [r3, #12]
 8004a06:	69fb      	ldr	r3, [r7, #28]
 8004a08:	005b      	lsls	r3, r3, #1
 8004a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8004a0e:	69ba      	ldr	r2, [r7, #24]
 8004a10:	4313      	orrs	r3, r2
 8004a12:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	69ba      	ldr	r2, [r7, #24]
 8004a18:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	685b      	ldr	r3, [r3, #4]
 8004a1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004a20:	2201      	movs	r2, #1
 8004a22:	69fb      	ldr	r3, [r7, #28]
 8004a24:	fa02 f303 	lsl.w	r3, r2, r3
 8004a28:	43db      	mvns	r3, r3
 8004a2a:	69ba      	ldr	r2, [r7, #24]
 8004a2c:	4013      	ands	r3, r2
 8004a2e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004a30:	683b      	ldr	r3, [r7, #0]
 8004a32:	685b      	ldr	r3, [r3, #4]
 8004a34:	091b      	lsrs	r3, r3, #4
 8004a36:	f003 0201 	and.w	r2, r3, #1
 8004a3a:	69fb      	ldr	r3, [r7, #28]
 8004a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8004a40:	69ba      	ldr	r2, [r7, #24]
 8004a42:	4313      	orrs	r3, r2
 8004a44:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	69ba      	ldr	r2, [r7, #24]
 8004a4a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	685b      	ldr	r3, [r3, #4]
 8004a50:	f003 0303 	and.w	r3, r3, #3
 8004a54:	2b03      	cmp	r3, #3
 8004a56:	d017      	beq.n	8004a88 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	68db      	ldr	r3, [r3, #12]
 8004a5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004a5e:	69fb      	ldr	r3, [r7, #28]
 8004a60:	005b      	lsls	r3, r3, #1
 8004a62:	2203      	movs	r2, #3
 8004a64:	fa02 f303 	lsl.w	r3, r2, r3
 8004a68:	43db      	mvns	r3, r3
 8004a6a:	69ba      	ldr	r2, [r7, #24]
 8004a6c:	4013      	ands	r3, r2
 8004a6e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	689a      	ldr	r2, [r3, #8]
 8004a74:	69fb      	ldr	r3, [r7, #28]
 8004a76:	005b      	lsls	r3, r3, #1
 8004a78:	fa02 f303 	lsl.w	r3, r2, r3
 8004a7c:	69ba      	ldr	r2, [r7, #24]
 8004a7e:	4313      	orrs	r3, r2
 8004a80:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	69ba      	ldr	r2, [r7, #24]
 8004a86:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004a88:	683b      	ldr	r3, [r7, #0]
 8004a8a:	685b      	ldr	r3, [r3, #4]
 8004a8c:	f003 0303 	and.w	r3, r3, #3
 8004a90:	2b02      	cmp	r3, #2
 8004a92:	d123      	bne.n	8004adc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004a94:	69fb      	ldr	r3, [r7, #28]
 8004a96:	08da      	lsrs	r2, r3, #3
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	3208      	adds	r2, #8
 8004a9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004aa0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004aa2:	69fb      	ldr	r3, [r7, #28]
 8004aa4:	f003 0307 	and.w	r3, r3, #7
 8004aa8:	009b      	lsls	r3, r3, #2
 8004aaa:	220f      	movs	r2, #15
 8004aac:	fa02 f303 	lsl.w	r3, r2, r3
 8004ab0:	43db      	mvns	r3, r3
 8004ab2:	69ba      	ldr	r2, [r7, #24]
 8004ab4:	4013      	ands	r3, r2
 8004ab6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004ab8:	683b      	ldr	r3, [r7, #0]
 8004aba:	691a      	ldr	r2, [r3, #16]
 8004abc:	69fb      	ldr	r3, [r7, #28]
 8004abe:	f003 0307 	and.w	r3, r3, #7
 8004ac2:	009b      	lsls	r3, r3, #2
 8004ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8004ac8:	69ba      	ldr	r2, [r7, #24]
 8004aca:	4313      	orrs	r3, r2
 8004acc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004ace:	69fb      	ldr	r3, [r7, #28]
 8004ad0:	08da      	lsrs	r2, r3, #3
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	3208      	adds	r2, #8
 8004ad6:	69b9      	ldr	r1, [r7, #24]
 8004ad8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004ae2:	69fb      	ldr	r3, [r7, #28]
 8004ae4:	005b      	lsls	r3, r3, #1
 8004ae6:	2203      	movs	r2, #3
 8004ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8004aec:	43db      	mvns	r3, r3
 8004aee:	69ba      	ldr	r2, [r7, #24]
 8004af0:	4013      	ands	r3, r2
 8004af2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004af4:	683b      	ldr	r3, [r7, #0]
 8004af6:	685b      	ldr	r3, [r3, #4]
 8004af8:	f003 0203 	and.w	r2, r3, #3
 8004afc:	69fb      	ldr	r3, [r7, #28]
 8004afe:	005b      	lsls	r3, r3, #1
 8004b00:	fa02 f303 	lsl.w	r3, r2, r3
 8004b04:	69ba      	ldr	r2, [r7, #24]
 8004b06:	4313      	orrs	r3, r2
 8004b08:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	69ba      	ldr	r2, [r7, #24]
 8004b0e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004b10:	683b      	ldr	r3, [r7, #0]
 8004b12:	685b      	ldr	r3, [r3, #4]
 8004b14:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	f000 80a2 	beq.w	8004c62 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004b1e:	2300      	movs	r3, #0
 8004b20:	60fb      	str	r3, [r7, #12]
 8004b22:	4b57      	ldr	r3, [pc, #348]	; (8004c80 <HAL_GPIO_Init+0x2e8>)
 8004b24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b26:	4a56      	ldr	r2, [pc, #344]	; (8004c80 <HAL_GPIO_Init+0x2e8>)
 8004b28:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004b2c:	6453      	str	r3, [r2, #68]	; 0x44
 8004b2e:	4b54      	ldr	r3, [pc, #336]	; (8004c80 <HAL_GPIO_Init+0x2e8>)
 8004b30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004b36:	60fb      	str	r3, [r7, #12]
 8004b38:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004b3a:	4a52      	ldr	r2, [pc, #328]	; (8004c84 <HAL_GPIO_Init+0x2ec>)
 8004b3c:	69fb      	ldr	r3, [r7, #28]
 8004b3e:	089b      	lsrs	r3, r3, #2
 8004b40:	3302      	adds	r3, #2
 8004b42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b46:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004b48:	69fb      	ldr	r3, [r7, #28]
 8004b4a:	f003 0303 	and.w	r3, r3, #3
 8004b4e:	009b      	lsls	r3, r3, #2
 8004b50:	220f      	movs	r2, #15
 8004b52:	fa02 f303 	lsl.w	r3, r2, r3
 8004b56:	43db      	mvns	r3, r3
 8004b58:	69ba      	ldr	r2, [r7, #24]
 8004b5a:	4013      	ands	r3, r2
 8004b5c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	4a49      	ldr	r2, [pc, #292]	; (8004c88 <HAL_GPIO_Init+0x2f0>)
 8004b62:	4293      	cmp	r3, r2
 8004b64:	d019      	beq.n	8004b9a <HAL_GPIO_Init+0x202>
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	4a48      	ldr	r2, [pc, #288]	; (8004c8c <HAL_GPIO_Init+0x2f4>)
 8004b6a:	4293      	cmp	r3, r2
 8004b6c:	d013      	beq.n	8004b96 <HAL_GPIO_Init+0x1fe>
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	4a47      	ldr	r2, [pc, #284]	; (8004c90 <HAL_GPIO_Init+0x2f8>)
 8004b72:	4293      	cmp	r3, r2
 8004b74:	d00d      	beq.n	8004b92 <HAL_GPIO_Init+0x1fa>
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	4a46      	ldr	r2, [pc, #280]	; (8004c94 <HAL_GPIO_Init+0x2fc>)
 8004b7a:	4293      	cmp	r3, r2
 8004b7c:	d007      	beq.n	8004b8e <HAL_GPIO_Init+0x1f6>
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	4a45      	ldr	r2, [pc, #276]	; (8004c98 <HAL_GPIO_Init+0x300>)
 8004b82:	4293      	cmp	r3, r2
 8004b84:	d101      	bne.n	8004b8a <HAL_GPIO_Init+0x1f2>
 8004b86:	2304      	movs	r3, #4
 8004b88:	e008      	b.n	8004b9c <HAL_GPIO_Init+0x204>
 8004b8a:	2307      	movs	r3, #7
 8004b8c:	e006      	b.n	8004b9c <HAL_GPIO_Init+0x204>
 8004b8e:	2303      	movs	r3, #3
 8004b90:	e004      	b.n	8004b9c <HAL_GPIO_Init+0x204>
 8004b92:	2302      	movs	r3, #2
 8004b94:	e002      	b.n	8004b9c <HAL_GPIO_Init+0x204>
 8004b96:	2301      	movs	r3, #1
 8004b98:	e000      	b.n	8004b9c <HAL_GPIO_Init+0x204>
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	69fa      	ldr	r2, [r7, #28]
 8004b9e:	f002 0203 	and.w	r2, r2, #3
 8004ba2:	0092      	lsls	r2, r2, #2
 8004ba4:	4093      	lsls	r3, r2
 8004ba6:	69ba      	ldr	r2, [r7, #24]
 8004ba8:	4313      	orrs	r3, r2
 8004baa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004bac:	4935      	ldr	r1, [pc, #212]	; (8004c84 <HAL_GPIO_Init+0x2ec>)
 8004bae:	69fb      	ldr	r3, [r7, #28]
 8004bb0:	089b      	lsrs	r3, r3, #2
 8004bb2:	3302      	adds	r3, #2
 8004bb4:	69ba      	ldr	r2, [r7, #24]
 8004bb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004bba:	4b38      	ldr	r3, [pc, #224]	; (8004c9c <HAL_GPIO_Init+0x304>)
 8004bbc:	689b      	ldr	r3, [r3, #8]
 8004bbe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004bc0:	693b      	ldr	r3, [r7, #16]
 8004bc2:	43db      	mvns	r3, r3
 8004bc4:	69ba      	ldr	r2, [r7, #24]
 8004bc6:	4013      	ands	r3, r2
 8004bc8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004bca:	683b      	ldr	r3, [r7, #0]
 8004bcc:	685b      	ldr	r3, [r3, #4]
 8004bce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d003      	beq.n	8004bde <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8004bd6:	69ba      	ldr	r2, [r7, #24]
 8004bd8:	693b      	ldr	r3, [r7, #16]
 8004bda:	4313      	orrs	r3, r2
 8004bdc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004bde:	4a2f      	ldr	r2, [pc, #188]	; (8004c9c <HAL_GPIO_Init+0x304>)
 8004be0:	69bb      	ldr	r3, [r7, #24]
 8004be2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004be4:	4b2d      	ldr	r3, [pc, #180]	; (8004c9c <HAL_GPIO_Init+0x304>)
 8004be6:	68db      	ldr	r3, [r3, #12]
 8004be8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004bea:	693b      	ldr	r3, [r7, #16]
 8004bec:	43db      	mvns	r3, r3
 8004bee:	69ba      	ldr	r2, [r7, #24]
 8004bf0:	4013      	ands	r3, r2
 8004bf2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004bf4:	683b      	ldr	r3, [r7, #0]
 8004bf6:	685b      	ldr	r3, [r3, #4]
 8004bf8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d003      	beq.n	8004c08 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8004c00:	69ba      	ldr	r2, [r7, #24]
 8004c02:	693b      	ldr	r3, [r7, #16]
 8004c04:	4313      	orrs	r3, r2
 8004c06:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004c08:	4a24      	ldr	r2, [pc, #144]	; (8004c9c <HAL_GPIO_Init+0x304>)
 8004c0a:	69bb      	ldr	r3, [r7, #24]
 8004c0c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004c0e:	4b23      	ldr	r3, [pc, #140]	; (8004c9c <HAL_GPIO_Init+0x304>)
 8004c10:	685b      	ldr	r3, [r3, #4]
 8004c12:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004c14:	693b      	ldr	r3, [r7, #16]
 8004c16:	43db      	mvns	r3, r3
 8004c18:	69ba      	ldr	r2, [r7, #24]
 8004c1a:	4013      	ands	r3, r2
 8004c1c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004c1e:	683b      	ldr	r3, [r7, #0]
 8004c20:	685b      	ldr	r3, [r3, #4]
 8004c22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d003      	beq.n	8004c32 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8004c2a:	69ba      	ldr	r2, [r7, #24]
 8004c2c:	693b      	ldr	r3, [r7, #16]
 8004c2e:	4313      	orrs	r3, r2
 8004c30:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004c32:	4a1a      	ldr	r2, [pc, #104]	; (8004c9c <HAL_GPIO_Init+0x304>)
 8004c34:	69bb      	ldr	r3, [r7, #24]
 8004c36:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004c38:	4b18      	ldr	r3, [pc, #96]	; (8004c9c <HAL_GPIO_Init+0x304>)
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004c3e:	693b      	ldr	r3, [r7, #16]
 8004c40:	43db      	mvns	r3, r3
 8004c42:	69ba      	ldr	r2, [r7, #24]
 8004c44:	4013      	ands	r3, r2
 8004c46:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004c48:	683b      	ldr	r3, [r7, #0]
 8004c4a:	685b      	ldr	r3, [r3, #4]
 8004c4c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d003      	beq.n	8004c5c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8004c54:	69ba      	ldr	r2, [r7, #24]
 8004c56:	693b      	ldr	r3, [r7, #16]
 8004c58:	4313      	orrs	r3, r2
 8004c5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004c5c:	4a0f      	ldr	r2, [pc, #60]	; (8004c9c <HAL_GPIO_Init+0x304>)
 8004c5e:	69bb      	ldr	r3, [r7, #24]
 8004c60:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004c62:	69fb      	ldr	r3, [r7, #28]
 8004c64:	3301      	adds	r3, #1
 8004c66:	61fb      	str	r3, [r7, #28]
 8004c68:	69fb      	ldr	r3, [r7, #28]
 8004c6a:	2b0f      	cmp	r3, #15
 8004c6c:	f67f aea2 	bls.w	80049b4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004c70:	bf00      	nop
 8004c72:	bf00      	nop
 8004c74:	3724      	adds	r7, #36	; 0x24
 8004c76:	46bd      	mov	sp, r7
 8004c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7c:	4770      	bx	lr
 8004c7e:	bf00      	nop
 8004c80:	40023800 	.word	0x40023800
 8004c84:	40013800 	.word	0x40013800
 8004c88:	40020000 	.word	0x40020000
 8004c8c:	40020400 	.word	0x40020400
 8004c90:	40020800 	.word	0x40020800
 8004c94:	40020c00 	.word	0x40020c00
 8004c98:	40021000 	.word	0x40021000
 8004c9c:	40013c00 	.word	0x40013c00

08004ca0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004ca0:	b480      	push	{r7}
 8004ca2:	b083      	sub	sp, #12
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
 8004ca8:	460b      	mov	r3, r1
 8004caa:	807b      	strh	r3, [r7, #2]
 8004cac:	4613      	mov	r3, r2
 8004cae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004cb0:	787b      	ldrb	r3, [r7, #1]
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d003      	beq.n	8004cbe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004cb6:	887a      	ldrh	r2, [r7, #2]
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004cbc:	e003      	b.n	8004cc6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004cbe:	887b      	ldrh	r3, [r7, #2]
 8004cc0:	041a      	lsls	r2, r3, #16
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	619a      	str	r2, [r3, #24]
}
 8004cc6:	bf00      	nop
 8004cc8:	370c      	adds	r7, #12
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd0:	4770      	bx	lr

08004cd2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004cd2:	b480      	push	{r7}
 8004cd4:	b085      	sub	sp, #20
 8004cd6:	af00      	add	r7, sp, #0
 8004cd8:	6078      	str	r0, [r7, #4]
 8004cda:	460b      	mov	r3, r1
 8004cdc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	695b      	ldr	r3, [r3, #20]
 8004ce2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004ce4:	887a      	ldrh	r2, [r7, #2]
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	4013      	ands	r3, r2
 8004cea:	041a      	lsls	r2, r3, #16
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	43d9      	mvns	r1, r3
 8004cf0:	887b      	ldrh	r3, [r7, #2]
 8004cf2:	400b      	ands	r3, r1
 8004cf4:	431a      	orrs	r2, r3
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	619a      	str	r2, [r3, #24]
}
 8004cfa:	bf00      	nop
 8004cfc:	3714      	adds	r7, #20
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d04:	4770      	bx	lr
	...

08004d08 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	b086      	sub	sp, #24
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d101      	bne.n	8004d1a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004d16:	2301      	movs	r3, #1
 8004d18:	e267      	b.n	80051ea <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f003 0301 	and.w	r3, r3, #1
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d075      	beq.n	8004e12 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004d26:	4b88      	ldr	r3, [pc, #544]	; (8004f48 <HAL_RCC_OscConfig+0x240>)
 8004d28:	689b      	ldr	r3, [r3, #8]
 8004d2a:	f003 030c 	and.w	r3, r3, #12
 8004d2e:	2b04      	cmp	r3, #4
 8004d30:	d00c      	beq.n	8004d4c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004d32:	4b85      	ldr	r3, [pc, #532]	; (8004f48 <HAL_RCC_OscConfig+0x240>)
 8004d34:	689b      	ldr	r3, [r3, #8]
 8004d36:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004d3a:	2b08      	cmp	r3, #8
 8004d3c:	d112      	bne.n	8004d64 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004d3e:	4b82      	ldr	r3, [pc, #520]	; (8004f48 <HAL_RCC_OscConfig+0x240>)
 8004d40:	685b      	ldr	r3, [r3, #4]
 8004d42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d46:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004d4a:	d10b      	bne.n	8004d64 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d4c:	4b7e      	ldr	r3, [pc, #504]	; (8004f48 <HAL_RCC_OscConfig+0x240>)
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d05b      	beq.n	8004e10 <HAL_RCC_OscConfig+0x108>
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	685b      	ldr	r3, [r3, #4]
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d157      	bne.n	8004e10 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004d60:	2301      	movs	r3, #1
 8004d62:	e242      	b.n	80051ea <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	685b      	ldr	r3, [r3, #4]
 8004d68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d6c:	d106      	bne.n	8004d7c <HAL_RCC_OscConfig+0x74>
 8004d6e:	4b76      	ldr	r3, [pc, #472]	; (8004f48 <HAL_RCC_OscConfig+0x240>)
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	4a75      	ldr	r2, [pc, #468]	; (8004f48 <HAL_RCC_OscConfig+0x240>)
 8004d74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d78:	6013      	str	r3, [r2, #0]
 8004d7a:	e01d      	b.n	8004db8 <HAL_RCC_OscConfig+0xb0>
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	685b      	ldr	r3, [r3, #4]
 8004d80:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004d84:	d10c      	bne.n	8004da0 <HAL_RCC_OscConfig+0x98>
 8004d86:	4b70      	ldr	r3, [pc, #448]	; (8004f48 <HAL_RCC_OscConfig+0x240>)
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	4a6f      	ldr	r2, [pc, #444]	; (8004f48 <HAL_RCC_OscConfig+0x240>)
 8004d8c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004d90:	6013      	str	r3, [r2, #0]
 8004d92:	4b6d      	ldr	r3, [pc, #436]	; (8004f48 <HAL_RCC_OscConfig+0x240>)
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	4a6c      	ldr	r2, [pc, #432]	; (8004f48 <HAL_RCC_OscConfig+0x240>)
 8004d98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d9c:	6013      	str	r3, [r2, #0]
 8004d9e:	e00b      	b.n	8004db8 <HAL_RCC_OscConfig+0xb0>
 8004da0:	4b69      	ldr	r3, [pc, #420]	; (8004f48 <HAL_RCC_OscConfig+0x240>)
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	4a68      	ldr	r2, [pc, #416]	; (8004f48 <HAL_RCC_OscConfig+0x240>)
 8004da6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004daa:	6013      	str	r3, [r2, #0]
 8004dac:	4b66      	ldr	r3, [pc, #408]	; (8004f48 <HAL_RCC_OscConfig+0x240>)
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	4a65      	ldr	r2, [pc, #404]	; (8004f48 <HAL_RCC_OscConfig+0x240>)
 8004db2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004db6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	685b      	ldr	r3, [r3, #4]
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d013      	beq.n	8004de8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004dc0:	f7fe fce4 	bl	800378c <HAL_GetTick>
 8004dc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004dc6:	e008      	b.n	8004dda <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004dc8:	f7fe fce0 	bl	800378c <HAL_GetTick>
 8004dcc:	4602      	mov	r2, r0
 8004dce:	693b      	ldr	r3, [r7, #16]
 8004dd0:	1ad3      	subs	r3, r2, r3
 8004dd2:	2b64      	cmp	r3, #100	; 0x64
 8004dd4:	d901      	bls.n	8004dda <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004dd6:	2303      	movs	r3, #3
 8004dd8:	e207      	b.n	80051ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004dda:	4b5b      	ldr	r3, [pc, #364]	; (8004f48 <HAL_RCC_OscConfig+0x240>)
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d0f0      	beq.n	8004dc8 <HAL_RCC_OscConfig+0xc0>
 8004de6:	e014      	b.n	8004e12 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004de8:	f7fe fcd0 	bl	800378c <HAL_GetTick>
 8004dec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004dee:	e008      	b.n	8004e02 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004df0:	f7fe fccc 	bl	800378c <HAL_GetTick>
 8004df4:	4602      	mov	r2, r0
 8004df6:	693b      	ldr	r3, [r7, #16]
 8004df8:	1ad3      	subs	r3, r2, r3
 8004dfa:	2b64      	cmp	r3, #100	; 0x64
 8004dfc:	d901      	bls.n	8004e02 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004dfe:	2303      	movs	r3, #3
 8004e00:	e1f3      	b.n	80051ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004e02:	4b51      	ldr	r3, [pc, #324]	; (8004f48 <HAL_RCC_OscConfig+0x240>)
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d1f0      	bne.n	8004df0 <HAL_RCC_OscConfig+0xe8>
 8004e0e:	e000      	b.n	8004e12 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e10:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f003 0302 	and.w	r3, r3, #2
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d063      	beq.n	8004ee6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004e1e:	4b4a      	ldr	r3, [pc, #296]	; (8004f48 <HAL_RCC_OscConfig+0x240>)
 8004e20:	689b      	ldr	r3, [r3, #8]
 8004e22:	f003 030c 	and.w	r3, r3, #12
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d00b      	beq.n	8004e42 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004e2a:	4b47      	ldr	r3, [pc, #284]	; (8004f48 <HAL_RCC_OscConfig+0x240>)
 8004e2c:	689b      	ldr	r3, [r3, #8]
 8004e2e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004e32:	2b08      	cmp	r3, #8
 8004e34:	d11c      	bne.n	8004e70 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004e36:	4b44      	ldr	r3, [pc, #272]	; (8004f48 <HAL_RCC_OscConfig+0x240>)
 8004e38:	685b      	ldr	r3, [r3, #4]
 8004e3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d116      	bne.n	8004e70 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004e42:	4b41      	ldr	r3, [pc, #260]	; (8004f48 <HAL_RCC_OscConfig+0x240>)
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f003 0302 	and.w	r3, r3, #2
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d005      	beq.n	8004e5a <HAL_RCC_OscConfig+0x152>
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	68db      	ldr	r3, [r3, #12]
 8004e52:	2b01      	cmp	r3, #1
 8004e54:	d001      	beq.n	8004e5a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004e56:	2301      	movs	r3, #1
 8004e58:	e1c7      	b.n	80051ea <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e5a:	4b3b      	ldr	r3, [pc, #236]	; (8004f48 <HAL_RCC_OscConfig+0x240>)
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	691b      	ldr	r3, [r3, #16]
 8004e66:	00db      	lsls	r3, r3, #3
 8004e68:	4937      	ldr	r1, [pc, #220]	; (8004f48 <HAL_RCC_OscConfig+0x240>)
 8004e6a:	4313      	orrs	r3, r2
 8004e6c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004e6e:	e03a      	b.n	8004ee6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	68db      	ldr	r3, [r3, #12]
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d020      	beq.n	8004eba <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004e78:	4b34      	ldr	r3, [pc, #208]	; (8004f4c <HAL_RCC_OscConfig+0x244>)
 8004e7a:	2201      	movs	r2, #1
 8004e7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e7e:	f7fe fc85 	bl	800378c <HAL_GetTick>
 8004e82:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e84:	e008      	b.n	8004e98 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004e86:	f7fe fc81 	bl	800378c <HAL_GetTick>
 8004e8a:	4602      	mov	r2, r0
 8004e8c:	693b      	ldr	r3, [r7, #16]
 8004e8e:	1ad3      	subs	r3, r2, r3
 8004e90:	2b02      	cmp	r3, #2
 8004e92:	d901      	bls.n	8004e98 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004e94:	2303      	movs	r3, #3
 8004e96:	e1a8      	b.n	80051ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e98:	4b2b      	ldr	r3, [pc, #172]	; (8004f48 <HAL_RCC_OscConfig+0x240>)
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f003 0302 	and.w	r3, r3, #2
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d0f0      	beq.n	8004e86 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ea4:	4b28      	ldr	r3, [pc, #160]	; (8004f48 <HAL_RCC_OscConfig+0x240>)
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	691b      	ldr	r3, [r3, #16]
 8004eb0:	00db      	lsls	r3, r3, #3
 8004eb2:	4925      	ldr	r1, [pc, #148]	; (8004f48 <HAL_RCC_OscConfig+0x240>)
 8004eb4:	4313      	orrs	r3, r2
 8004eb6:	600b      	str	r3, [r1, #0]
 8004eb8:	e015      	b.n	8004ee6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004eba:	4b24      	ldr	r3, [pc, #144]	; (8004f4c <HAL_RCC_OscConfig+0x244>)
 8004ebc:	2200      	movs	r2, #0
 8004ebe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ec0:	f7fe fc64 	bl	800378c <HAL_GetTick>
 8004ec4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004ec6:	e008      	b.n	8004eda <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004ec8:	f7fe fc60 	bl	800378c <HAL_GetTick>
 8004ecc:	4602      	mov	r2, r0
 8004ece:	693b      	ldr	r3, [r7, #16]
 8004ed0:	1ad3      	subs	r3, r2, r3
 8004ed2:	2b02      	cmp	r3, #2
 8004ed4:	d901      	bls.n	8004eda <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004ed6:	2303      	movs	r3, #3
 8004ed8:	e187      	b.n	80051ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004eda:	4b1b      	ldr	r3, [pc, #108]	; (8004f48 <HAL_RCC_OscConfig+0x240>)
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f003 0302 	and.w	r3, r3, #2
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d1f0      	bne.n	8004ec8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f003 0308 	and.w	r3, r3, #8
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d036      	beq.n	8004f60 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	695b      	ldr	r3, [r3, #20]
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d016      	beq.n	8004f28 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004efa:	4b15      	ldr	r3, [pc, #84]	; (8004f50 <HAL_RCC_OscConfig+0x248>)
 8004efc:	2201      	movs	r2, #1
 8004efe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f00:	f7fe fc44 	bl	800378c <HAL_GetTick>
 8004f04:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004f06:	e008      	b.n	8004f1a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004f08:	f7fe fc40 	bl	800378c <HAL_GetTick>
 8004f0c:	4602      	mov	r2, r0
 8004f0e:	693b      	ldr	r3, [r7, #16]
 8004f10:	1ad3      	subs	r3, r2, r3
 8004f12:	2b02      	cmp	r3, #2
 8004f14:	d901      	bls.n	8004f1a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004f16:	2303      	movs	r3, #3
 8004f18:	e167      	b.n	80051ea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004f1a:	4b0b      	ldr	r3, [pc, #44]	; (8004f48 <HAL_RCC_OscConfig+0x240>)
 8004f1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f1e:	f003 0302 	and.w	r3, r3, #2
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d0f0      	beq.n	8004f08 <HAL_RCC_OscConfig+0x200>
 8004f26:	e01b      	b.n	8004f60 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004f28:	4b09      	ldr	r3, [pc, #36]	; (8004f50 <HAL_RCC_OscConfig+0x248>)
 8004f2a:	2200      	movs	r2, #0
 8004f2c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004f2e:	f7fe fc2d 	bl	800378c <HAL_GetTick>
 8004f32:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004f34:	e00e      	b.n	8004f54 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004f36:	f7fe fc29 	bl	800378c <HAL_GetTick>
 8004f3a:	4602      	mov	r2, r0
 8004f3c:	693b      	ldr	r3, [r7, #16]
 8004f3e:	1ad3      	subs	r3, r2, r3
 8004f40:	2b02      	cmp	r3, #2
 8004f42:	d907      	bls.n	8004f54 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004f44:	2303      	movs	r3, #3
 8004f46:	e150      	b.n	80051ea <HAL_RCC_OscConfig+0x4e2>
 8004f48:	40023800 	.word	0x40023800
 8004f4c:	42470000 	.word	0x42470000
 8004f50:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004f54:	4b88      	ldr	r3, [pc, #544]	; (8005178 <HAL_RCC_OscConfig+0x470>)
 8004f56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f58:	f003 0302 	and.w	r3, r3, #2
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d1ea      	bne.n	8004f36 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f003 0304 	and.w	r3, r3, #4
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	f000 8097 	beq.w	800509c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004f6e:	2300      	movs	r3, #0
 8004f70:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004f72:	4b81      	ldr	r3, [pc, #516]	; (8005178 <HAL_RCC_OscConfig+0x470>)
 8004f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d10f      	bne.n	8004f9e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004f7e:	2300      	movs	r3, #0
 8004f80:	60bb      	str	r3, [r7, #8]
 8004f82:	4b7d      	ldr	r3, [pc, #500]	; (8005178 <HAL_RCC_OscConfig+0x470>)
 8004f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f86:	4a7c      	ldr	r2, [pc, #496]	; (8005178 <HAL_RCC_OscConfig+0x470>)
 8004f88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f8c:	6413      	str	r3, [r2, #64]	; 0x40
 8004f8e:	4b7a      	ldr	r3, [pc, #488]	; (8005178 <HAL_RCC_OscConfig+0x470>)
 8004f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f96:	60bb      	str	r3, [r7, #8]
 8004f98:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004f9a:	2301      	movs	r3, #1
 8004f9c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f9e:	4b77      	ldr	r3, [pc, #476]	; (800517c <HAL_RCC_OscConfig+0x474>)
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d118      	bne.n	8004fdc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004faa:	4b74      	ldr	r3, [pc, #464]	; (800517c <HAL_RCC_OscConfig+0x474>)
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	4a73      	ldr	r2, [pc, #460]	; (800517c <HAL_RCC_OscConfig+0x474>)
 8004fb0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004fb4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004fb6:	f7fe fbe9 	bl	800378c <HAL_GetTick>
 8004fba:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004fbc:	e008      	b.n	8004fd0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004fbe:	f7fe fbe5 	bl	800378c <HAL_GetTick>
 8004fc2:	4602      	mov	r2, r0
 8004fc4:	693b      	ldr	r3, [r7, #16]
 8004fc6:	1ad3      	subs	r3, r2, r3
 8004fc8:	2b02      	cmp	r3, #2
 8004fca:	d901      	bls.n	8004fd0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004fcc:	2303      	movs	r3, #3
 8004fce:	e10c      	b.n	80051ea <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004fd0:	4b6a      	ldr	r3, [pc, #424]	; (800517c <HAL_RCC_OscConfig+0x474>)
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d0f0      	beq.n	8004fbe <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	689b      	ldr	r3, [r3, #8]
 8004fe0:	2b01      	cmp	r3, #1
 8004fe2:	d106      	bne.n	8004ff2 <HAL_RCC_OscConfig+0x2ea>
 8004fe4:	4b64      	ldr	r3, [pc, #400]	; (8005178 <HAL_RCC_OscConfig+0x470>)
 8004fe6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fe8:	4a63      	ldr	r2, [pc, #396]	; (8005178 <HAL_RCC_OscConfig+0x470>)
 8004fea:	f043 0301 	orr.w	r3, r3, #1
 8004fee:	6713      	str	r3, [r2, #112]	; 0x70
 8004ff0:	e01c      	b.n	800502c <HAL_RCC_OscConfig+0x324>
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	689b      	ldr	r3, [r3, #8]
 8004ff6:	2b05      	cmp	r3, #5
 8004ff8:	d10c      	bne.n	8005014 <HAL_RCC_OscConfig+0x30c>
 8004ffa:	4b5f      	ldr	r3, [pc, #380]	; (8005178 <HAL_RCC_OscConfig+0x470>)
 8004ffc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ffe:	4a5e      	ldr	r2, [pc, #376]	; (8005178 <HAL_RCC_OscConfig+0x470>)
 8005000:	f043 0304 	orr.w	r3, r3, #4
 8005004:	6713      	str	r3, [r2, #112]	; 0x70
 8005006:	4b5c      	ldr	r3, [pc, #368]	; (8005178 <HAL_RCC_OscConfig+0x470>)
 8005008:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800500a:	4a5b      	ldr	r2, [pc, #364]	; (8005178 <HAL_RCC_OscConfig+0x470>)
 800500c:	f043 0301 	orr.w	r3, r3, #1
 8005010:	6713      	str	r3, [r2, #112]	; 0x70
 8005012:	e00b      	b.n	800502c <HAL_RCC_OscConfig+0x324>
 8005014:	4b58      	ldr	r3, [pc, #352]	; (8005178 <HAL_RCC_OscConfig+0x470>)
 8005016:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005018:	4a57      	ldr	r2, [pc, #348]	; (8005178 <HAL_RCC_OscConfig+0x470>)
 800501a:	f023 0301 	bic.w	r3, r3, #1
 800501e:	6713      	str	r3, [r2, #112]	; 0x70
 8005020:	4b55      	ldr	r3, [pc, #340]	; (8005178 <HAL_RCC_OscConfig+0x470>)
 8005022:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005024:	4a54      	ldr	r2, [pc, #336]	; (8005178 <HAL_RCC_OscConfig+0x470>)
 8005026:	f023 0304 	bic.w	r3, r3, #4
 800502a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	689b      	ldr	r3, [r3, #8]
 8005030:	2b00      	cmp	r3, #0
 8005032:	d015      	beq.n	8005060 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005034:	f7fe fbaa 	bl	800378c <HAL_GetTick>
 8005038:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800503a:	e00a      	b.n	8005052 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800503c:	f7fe fba6 	bl	800378c <HAL_GetTick>
 8005040:	4602      	mov	r2, r0
 8005042:	693b      	ldr	r3, [r7, #16]
 8005044:	1ad3      	subs	r3, r2, r3
 8005046:	f241 3288 	movw	r2, #5000	; 0x1388
 800504a:	4293      	cmp	r3, r2
 800504c:	d901      	bls.n	8005052 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800504e:	2303      	movs	r3, #3
 8005050:	e0cb      	b.n	80051ea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005052:	4b49      	ldr	r3, [pc, #292]	; (8005178 <HAL_RCC_OscConfig+0x470>)
 8005054:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005056:	f003 0302 	and.w	r3, r3, #2
 800505a:	2b00      	cmp	r3, #0
 800505c:	d0ee      	beq.n	800503c <HAL_RCC_OscConfig+0x334>
 800505e:	e014      	b.n	800508a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005060:	f7fe fb94 	bl	800378c <HAL_GetTick>
 8005064:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005066:	e00a      	b.n	800507e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005068:	f7fe fb90 	bl	800378c <HAL_GetTick>
 800506c:	4602      	mov	r2, r0
 800506e:	693b      	ldr	r3, [r7, #16]
 8005070:	1ad3      	subs	r3, r2, r3
 8005072:	f241 3288 	movw	r2, #5000	; 0x1388
 8005076:	4293      	cmp	r3, r2
 8005078:	d901      	bls.n	800507e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800507a:	2303      	movs	r3, #3
 800507c:	e0b5      	b.n	80051ea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800507e:	4b3e      	ldr	r3, [pc, #248]	; (8005178 <HAL_RCC_OscConfig+0x470>)
 8005080:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005082:	f003 0302 	and.w	r3, r3, #2
 8005086:	2b00      	cmp	r3, #0
 8005088:	d1ee      	bne.n	8005068 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800508a:	7dfb      	ldrb	r3, [r7, #23]
 800508c:	2b01      	cmp	r3, #1
 800508e:	d105      	bne.n	800509c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005090:	4b39      	ldr	r3, [pc, #228]	; (8005178 <HAL_RCC_OscConfig+0x470>)
 8005092:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005094:	4a38      	ldr	r2, [pc, #224]	; (8005178 <HAL_RCC_OscConfig+0x470>)
 8005096:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800509a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	699b      	ldr	r3, [r3, #24]
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	f000 80a1 	beq.w	80051e8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80050a6:	4b34      	ldr	r3, [pc, #208]	; (8005178 <HAL_RCC_OscConfig+0x470>)
 80050a8:	689b      	ldr	r3, [r3, #8]
 80050aa:	f003 030c 	and.w	r3, r3, #12
 80050ae:	2b08      	cmp	r3, #8
 80050b0:	d05c      	beq.n	800516c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	699b      	ldr	r3, [r3, #24]
 80050b6:	2b02      	cmp	r3, #2
 80050b8:	d141      	bne.n	800513e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80050ba:	4b31      	ldr	r3, [pc, #196]	; (8005180 <HAL_RCC_OscConfig+0x478>)
 80050bc:	2200      	movs	r2, #0
 80050be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050c0:	f7fe fb64 	bl	800378c <HAL_GetTick>
 80050c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80050c6:	e008      	b.n	80050da <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80050c8:	f7fe fb60 	bl	800378c <HAL_GetTick>
 80050cc:	4602      	mov	r2, r0
 80050ce:	693b      	ldr	r3, [r7, #16]
 80050d0:	1ad3      	subs	r3, r2, r3
 80050d2:	2b02      	cmp	r3, #2
 80050d4:	d901      	bls.n	80050da <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80050d6:	2303      	movs	r3, #3
 80050d8:	e087      	b.n	80051ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80050da:	4b27      	ldr	r3, [pc, #156]	; (8005178 <HAL_RCC_OscConfig+0x470>)
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d1f0      	bne.n	80050c8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	69da      	ldr	r2, [r3, #28]
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	6a1b      	ldr	r3, [r3, #32]
 80050ee:	431a      	orrs	r2, r3
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050f4:	019b      	lsls	r3, r3, #6
 80050f6:	431a      	orrs	r2, r3
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050fc:	085b      	lsrs	r3, r3, #1
 80050fe:	3b01      	subs	r3, #1
 8005100:	041b      	lsls	r3, r3, #16
 8005102:	431a      	orrs	r2, r3
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005108:	061b      	lsls	r3, r3, #24
 800510a:	491b      	ldr	r1, [pc, #108]	; (8005178 <HAL_RCC_OscConfig+0x470>)
 800510c:	4313      	orrs	r3, r2
 800510e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005110:	4b1b      	ldr	r3, [pc, #108]	; (8005180 <HAL_RCC_OscConfig+0x478>)
 8005112:	2201      	movs	r2, #1
 8005114:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005116:	f7fe fb39 	bl	800378c <HAL_GetTick>
 800511a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800511c:	e008      	b.n	8005130 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800511e:	f7fe fb35 	bl	800378c <HAL_GetTick>
 8005122:	4602      	mov	r2, r0
 8005124:	693b      	ldr	r3, [r7, #16]
 8005126:	1ad3      	subs	r3, r2, r3
 8005128:	2b02      	cmp	r3, #2
 800512a:	d901      	bls.n	8005130 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800512c:	2303      	movs	r3, #3
 800512e:	e05c      	b.n	80051ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005130:	4b11      	ldr	r3, [pc, #68]	; (8005178 <HAL_RCC_OscConfig+0x470>)
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005138:	2b00      	cmp	r3, #0
 800513a:	d0f0      	beq.n	800511e <HAL_RCC_OscConfig+0x416>
 800513c:	e054      	b.n	80051e8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800513e:	4b10      	ldr	r3, [pc, #64]	; (8005180 <HAL_RCC_OscConfig+0x478>)
 8005140:	2200      	movs	r2, #0
 8005142:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005144:	f7fe fb22 	bl	800378c <HAL_GetTick>
 8005148:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800514a:	e008      	b.n	800515e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800514c:	f7fe fb1e 	bl	800378c <HAL_GetTick>
 8005150:	4602      	mov	r2, r0
 8005152:	693b      	ldr	r3, [r7, #16]
 8005154:	1ad3      	subs	r3, r2, r3
 8005156:	2b02      	cmp	r3, #2
 8005158:	d901      	bls.n	800515e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800515a:	2303      	movs	r3, #3
 800515c:	e045      	b.n	80051ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800515e:	4b06      	ldr	r3, [pc, #24]	; (8005178 <HAL_RCC_OscConfig+0x470>)
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005166:	2b00      	cmp	r3, #0
 8005168:	d1f0      	bne.n	800514c <HAL_RCC_OscConfig+0x444>
 800516a:	e03d      	b.n	80051e8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	699b      	ldr	r3, [r3, #24]
 8005170:	2b01      	cmp	r3, #1
 8005172:	d107      	bne.n	8005184 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005174:	2301      	movs	r3, #1
 8005176:	e038      	b.n	80051ea <HAL_RCC_OscConfig+0x4e2>
 8005178:	40023800 	.word	0x40023800
 800517c:	40007000 	.word	0x40007000
 8005180:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005184:	4b1b      	ldr	r3, [pc, #108]	; (80051f4 <HAL_RCC_OscConfig+0x4ec>)
 8005186:	685b      	ldr	r3, [r3, #4]
 8005188:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	699b      	ldr	r3, [r3, #24]
 800518e:	2b01      	cmp	r3, #1
 8005190:	d028      	beq.n	80051e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800519c:	429a      	cmp	r2, r3
 800519e:	d121      	bne.n	80051e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80051aa:	429a      	cmp	r2, r3
 80051ac:	d11a      	bne.n	80051e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80051ae:	68fa      	ldr	r2, [r7, #12]
 80051b0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80051b4:	4013      	ands	r3, r2
 80051b6:	687a      	ldr	r2, [r7, #4]
 80051b8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80051ba:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80051bc:	4293      	cmp	r3, r2
 80051be:	d111      	bne.n	80051e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051ca:	085b      	lsrs	r3, r3, #1
 80051cc:	3b01      	subs	r3, #1
 80051ce:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80051d0:	429a      	cmp	r2, r3
 80051d2:	d107      	bne.n	80051e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051de:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80051e0:	429a      	cmp	r2, r3
 80051e2:	d001      	beq.n	80051e8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80051e4:	2301      	movs	r3, #1
 80051e6:	e000      	b.n	80051ea <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80051e8:	2300      	movs	r3, #0
}
 80051ea:	4618      	mov	r0, r3
 80051ec:	3718      	adds	r7, #24
 80051ee:	46bd      	mov	sp, r7
 80051f0:	bd80      	pop	{r7, pc}
 80051f2:	bf00      	nop
 80051f4:	40023800 	.word	0x40023800

080051f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80051f8:	b580      	push	{r7, lr}
 80051fa:	b084      	sub	sp, #16
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	6078      	str	r0, [r7, #4]
 8005200:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	2b00      	cmp	r3, #0
 8005206:	d101      	bne.n	800520c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005208:	2301      	movs	r3, #1
 800520a:	e0cc      	b.n	80053a6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800520c:	4b68      	ldr	r3, [pc, #416]	; (80053b0 <HAL_RCC_ClockConfig+0x1b8>)
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	f003 0307 	and.w	r3, r3, #7
 8005214:	683a      	ldr	r2, [r7, #0]
 8005216:	429a      	cmp	r2, r3
 8005218:	d90c      	bls.n	8005234 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800521a:	4b65      	ldr	r3, [pc, #404]	; (80053b0 <HAL_RCC_ClockConfig+0x1b8>)
 800521c:	683a      	ldr	r2, [r7, #0]
 800521e:	b2d2      	uxtb	r2, r2
 8005220:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005222:	4b63      	ldr	r3, [pc, #396]	; (80053b0 <HAL_RCC_ClockConfig+0x1b8>)
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f003 0307 	and.w	r3, r3, #7
 800522a:	683a      	ldr	r2, [r7, #0]
 800522c:	429a      	cmp	r2, r3
 800522e:	d001      	beq.n	8005234 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005230:	2301      	movs	r3, #1
 8005232:	e0b8      	b.n	80053a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f003 0302 	and.w	r3, r3, #2
 800523c:	2b00      	cmp	r3, #0
 800523e:	d020      	beq.n	8005282 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f003 0304 	and.w	r3, r3, #4
 8005248:	2b00      	cmp	r3, #0
 800524a:	d005      	beq.n	8005258 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800524c:	4b59      	ldr	r3, [pc, #356]	; (80053b4 <HAL_RCC_ClockConfig+0x1bc>)
 800524e:	689b      	ldr	r3, [r3, #8]
 8005250:	4a58      	ldr	r2, [pc, #352]	; (80053b4 <HAL_RCC_ClockConfig+0x1bc>)
 8005252:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005256:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	f003 0308 	and.w	r3, r3, #8
 8005260:	2b00      	cmp	r3, #0
 8005262:	d005      	beq.n	8005270 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005264:	4b53      	ldr	r3, [pc, #332]	; (80053b4 <HAL_RCC_ClockConfig+0x1bc>)
 8005266:	689b      	ldr	r3, [r3, #8]
 8005268:	4a52      	ldr	r2, [pc, #328]	; (80053b4 <HAL_RCC_ClockConfig+0x1bc>)
 800526a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800526e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005270:	4b50      	ldr	r3, [pc, #320]	; (80053b4 <HAL_RCC_ClockConfig+0x1bc>)
 8005272:	689b      	ldr	r3, [r3, #8]
 8005274:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	689b      	ldr	r3, [r3, #8]
 800527c:	494d      	ldr	r1, [pc, #308]	; (80053b4 <HAL_RCC_ClockConfig+0x1bc>)
 800527e:	4313      	orrs	r3, r2
 8005280:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f003 0301 	and.w	r3, r3, #1
 800528a:	2b00      	cmp	r3, #0
 800528c:	d044      	beq.n	8005318 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	685b      	ldr	r3, [r3, #4]
 8005292:	2b01      	cmp	r3, #1
 8005294:	d107      	bne.n	80052a6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005296:	4b47      	ldr	r3, [pc, #284]	; (80053b4 <HAL_RCC_ClockConfig+0x1bc>)
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d119      	bne.n	80052d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80052a2:	2301      	movs	r3, #1
 80052a4:	e07f      	b.n	80053a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	685b      	ldr	r3, [r3, #4]
 80052aa:	2b02      	cmp	r3, #2
 80052ac:	d003      	beq.n	80052b6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80052b2:	2b03      	cmp	r3, #3
 80052b4:	d107      	bne.n	80052c6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80052b6:	4b3f      	ldr	r3, [pc, #252]	; (80053b4 <HAL_RCC_ClockConfig+0x1bc>)
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d109      	bne.n	80052d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80052c2:	2301      	movs	r3, #1
 80052c4:	e06f      	b.n	80053a6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80052c6:	4b3b      	ldr	r3, [pc, #236]	; (80053b4 <HAL_RCC_ClockConfig+0x1bc>)
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f003 0302 	and.w	r3, r3, #2
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d101      	bne.n	80052d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80052d2:	2301      	movs	r3, #1
 80052d4:	e067      	b.n	80053a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80052d6:	4b37      	ldr	r3, [pc, #220]	; (80053b4 <HAL_RCC_ClockConfig+0x1bc>)
 80052d8:	689b      	ldr	r3, [r3, #8]
 80052da:	f023 0203 	bic.w	r2, r3, #3
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	685b      	ldr	r3, [r3, #4]
 80052e2:	4934      	ldr	r1, [pc, #208]	; (80053b4 <HAL_RCC_ClockConfig+0x1bc>)
 80052e4:	4313      	orrs	r3, r2
 80052e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80052e8:	f7fe fa50 	bl	800378c <HAL_GetTick>
 80052ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80052ee:	e00a      	b.n	8005306 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80052f0:	f7fe fa4c 	bl	800378c <HAL_GetTick>
 80052f4:	4602      	mov	r2, r0
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	1ad3      	subs	r3, r2, r3
 80052fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80052fe:	4293      	cmp	r3, r2
 8005300:	d901      	bls.n	8005306 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005302:	2303      	movs	r3, #3
 8005304:	e04f      	b.n	80053a6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005306:	4b2b      	ldr	r3, [pc, #172]	; (80053b4 <HAL_RCC_ClockConfig+0x1bc>)
 8005308:	689b      	ldr	r3, [r3, #8]
 800530a:	f003 020c 	and.w	r2, r3, #12
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	685b      	ldr	r3, [r3, #4]
 8005312:	009b      	lsls	r3, r3, #2
 8005314:	429a      	cmp	r2, r3
 8005316:	d1eb      	bne.n	80052f0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005318:	4b25      	ldr	r3, [pc, #148]	; (80053b0 <HAL_RCC_ClockConfig+0x1b8>)
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f003 0307 	and.w	r3, r3, #7
 8005320:	683a      	ldr	r2, [r7, #0]
 8005322:	429a      	cmp	r2, r3
 8005324:	d20c      	bcs.n	8005340 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005326:	4b22      	ldr	r3, [pc, #136]	; (80053b0 <HAL_RCC_ClockConfig+0x1b8>)
 8005328:	683a      	ldr	r2, [r7, #0]
 800532a:	b2d2      	uxtb	r2, r2
 800532c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800532e:	4b20      	ldr	r3, [pc, #128]	; (80053b0 <HAL_RCC_ClockConfig+0x1b8>)
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f003 0307 	and.w	r3, r3, #7
 8005336:	683a      	ldr	r2, [r7, #0]
 8005338:	429a      	cmp	r2, r3
 800533a:	d001      	beq.n	8005340 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800533c:	2301      	movs	r3, #1
 800533e:	e032      	b.n	80053a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f003 0304 	and.w	r3, r3, #4
 8005348:	2b00      	cmp	r3, #0
 800534a:	d008      	beq.n	800535e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800534c:	4b19      	ldr	r3, [pc, #100]	; (80053b4 <HAL_RCC_ClockConfig+0x1bc>)
 800534e:	689b      	ldr	r3, [r3, #8]
 8005350:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	68db      	ldr	r3, [r3, #12]
 8005358:	4916      	ldr	r1, [pc, #88]	; (80053b4 <HAL_RCC_ClockConfig+0x1bc>)
 800535a:	4313      	orrs	r3, r2
 800535c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f003 0308 	and.w	r3, r3, #8
 8005366:	2b00      	cmp	r3, #0
 8005368:	d009      	beq.n	800537e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800536a:	4b12      	ldr	r3, [pc, #72]	; (80053b4 <HAL_RCC_ClockConfig+0x1bc>)
 800536c:	689b      	ldr	r3, [r3, #8]
 800536e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	691b      	ldr	r3, [r3, #16]
 8005376:	00db      	lsls	r3, r3, #3
 8005378:	490e      	ldr	r1, [pc, #56]	; (80053b4 <HAL_RCC_ClockConfig+0x1bc>)
 800537a:	4313      	orrs	r3, r2
 800537c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800537e:	f000 f821 	bl	80053c4 <HAL_RCC_GetSysClockFreq>
 8005382:	4602      	mov	r2, r0
 8005384:	4b0b      	ldr	r3, [pc, #44]	; (80053b4 <HAL_RCC_ClockConfig+0x1bc>)
 8005386:	689b      	ldr	r3, [r3, #8]
 8005388:	091b      	lsrs	r3, r3, #4
 800538a:	f003 030f 	and.w	r3, r3, #15
 800538e:	490a      	ldr	r1, [pc, #40]	; (80053b8 <HAL_RCC_ClockConfig+0x1c0>)
 8005390:	5ccb      	ldrb	r3, [r1, r3]
 8005392:	fa22 f303 	lsr.w	r3, r2, r3
 8005396:	4a09      	ldr	r2, [pc, #36]	; (80053bc <HAL_RCC_ClockConfig+0x1c4>)
 8005398:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800539a:	4b09      	ldr	r3, [pc, #36]	; (80053c0 <HAL_RCC_ClockConfig+0x1c8>)
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	4618      	mov	r0, r3
 80053a0:	f7fe f866 	bl	8003470 <HAL_InitTick>

  return HAL_OK;
 80053a4:	2300      	movs	r3, #0
}
 80053a6:	4618      	mov	r0, r3
 80053a8:	3710      	adds	r7, #16
 80053aa:	46bd      	mov	sp, r7
 80053ac:	bd80      	pop	{r7, pc}
 80053ae:	bf00      	nop
 80053b0:	40023c00 	.word	0x40023c00
 80053b4:	40023800 	.word	0x40023800
 80053b8:	0800b098 	.word	0x0800b098
 80053bc:	20000000 	.word	0x20000000
 80053c0:	20000004 	.word	0x20000004

080053c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80053c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80053c8:	b090      	sub	sp, #64	; 0x40
 80053ca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80053cc:	2300      	movs	r3, #0
 80053ce:	637b      	str	r3, [r7, #52]	; 0x34
 80053d0:	2300      	movs	r3, #0
 80053d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80053d4:	2300      	movs	r3, #0
 80053d6:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80053d8:	2300      	movs	r3, #0
 80053da:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80053dc:	4b59      	ldr	r3, [pc, #356]	; (8005544 <HAL_RCC_GetSysClockFreq+0x180>)
 80053de:	689b      	ldr	r3, [r3, #8]
 80053e0:	f003 030c 	and.w	r3, r3, #12
 80053e4:	2b08      	cmp	r3, #8
 80053e6:	d00d      	beq.n	8005404 <HAL_RCC_GetSysClockFreq+0x40>
 80053e8:	2b08      	cmp	r3, #8
 80053ea:	f200 80a1 	bhi.w	8005530 <HAL_RCC_GetSysClockFreq+0x16c>
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d002      	beq.n	80053f8 <HAL_RCC_GetSysClockFreq+0x34>
 80053f2:	2b04      	cmp	r3, #4
 80053f4:	d003      	beq.n	80053fe <HAL_RCC_GetSysClockFreq+0x3a>
 80053f6:	e09b      	b.n	8005530 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80053f8:	4b53      	ldr	r3, [pc, #332]	; (8005548 <HAL_RCC_GetSysClockFreq+0x184>)
 80053fa:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80053fc:	e09b      	b.n	8005536 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80053fe:	4b53      	ldr	r3, [pc, #332]	; (800554c <HAL_RCC_GetSysClockFreq+0x188>)
 8005400:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005402:	e098      	b.n	8005536 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005404:	4b4f      	ldr	r3, [pc, #316]	; (8005544 <HAL_RCC_GetSysClockFreq+0x180>)
 8005406:	685b      	ldr	r3, [r3, #4]
 8005408:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800540c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800540e:	4b4d      	ldr	r3, [pc, #308]	; (8005544 <HAL_RCC_GetSysClockFreq+0x180>)
 8005410:	685b      	ldr	r3, [r3, #4]
 8005412:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005416:	2b00      	cmp	r3, #0
 8005418:	d028      	beq.n	800546c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800541a:	4b4a      	ldr	r3, [pc, #296]	; (8005544 <HAL_RCC_GetSysClockFreq+0x180>)
 800541c:	685b      	ldr	r3, [r3, #4]
 800541e:	099b      	lsrs	r3, r3, #6
 8005420:	2200      	movs	r2, #0
 8005422:	623b      	str	r3, [r7, #32]
 8005424:	627a      	str	r2, [r7, #36]	; 0x24
 8005426:	6a3b      	ldr	r3, [r7, #32]
 8005428:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800542c:	2100      	movs	r1, #0
 800542e:	4b47      	ldr	r3, [pc, #284]	; (800554c <HAL_RCC_GetSysClockFreq+0x188>)
 8005430:	fb03 f201 	mul.w	r2, r3, r1
 8005434:	2300      	movs	r3, #0
 8005436:	fb00 f303 	mul.w	r3, r0, r3
 800543a:	4413      	add	r3, r2
 800543c:	4a43      	ldr	r2, [pc, #268]	; (800554c <HAL_RCC_GetSysClockFreq+0x188>)
 800543e:	fba0 1202 	umull	r1, r2, r0, r2
 8005442:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005444:	460a      	mov	r2, r1
 8005446:	62ba      	str	r2, [r7, #40]	; 0x28
 8005448:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800544a:	4413      	add	r3, r2
 800544c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800544e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005450:	2200      	movs	r2, #0
 8005452:	61bb      	str	r3, [r7, #24]
 8005454:	61fa      	str	r2, [r7, #28]
 8005456:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800545a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800545e:	f7fb f9fd 	bl	800085c <__aeabi_uldivmod>
 8005462:	4602      	mov	r2, r0
 8005464:	460b      	mov	r3, r1
 8005466:	4613      	mov	r3, r2
 8005468:	63fb      	str	r3, [r7, #60]	; 0x3c
 800546a:	e053      	b.n	8005514 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800546c:	4b35      	ldr	r3, [pc, #212]	; (8005544 <HAL_RCC_GetSysClockFreq+0x180>)
 800546e:	685b      	ldr	r3, [r3, #4]
 8005470:	099b      	lsrs	r3, r3, #6
 8005472:	2200      	movs	r2, #0
 8005474:	613b      	str	r3, [r7, #16]
 8005476:	617a      	str	r2, [r7, #20]
 8005478:	693b      	ldr	r3, [r7, #16]
 800547a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800547e:	f04f 0b00 	mov.w	fp, #0
 8005482:	4652      	mov	r2, sl
 8005484:	465b      	mov	r3, fp
 8005486:	f04f 0000 	mov.w	r0, #0
 800548a:	f04f 0100 	mov.w	r1, #0
 800548e:	0159      	lsls	r1, r3, #5
 8005490:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005494:	0150      	lsls	r0, r2, #5
 8005496:	4602      	mov	r2, r0
 8005498:	460b      	mov	r3, r1
 800549a:	ebb2 080a 	subs.w	r8, r2, sl
 800549e:	eb63 090b 	sbc.w	r9, r3, fp
 80054a2:	f04f 0200 	mov.w	r2, #0
 80054a6:	f04f 0300 	mov.w	r3, #0
 80054aa:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80054ae:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80054b2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80054b6:	ebb2 0408 	subs.w	r4, r2, r8
 80054ba:	eb63 0509 	sbc.w	r5, r3, r9
 80054be:	f04f 0200 	mov.w	r2, #0
 80054c2:	f04f 0300 	mov.w	r3, #0
 80054c6:	00eb      	lsls	r3, r5, #3
 80054c8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80054cc:	00e2      	lsls	r2, r4, #3
 80054ce:	4614      	mov	r4, r2
 80054d0:	461d      	mov	r5, r3
 80054d2:	eb14 030a 	adds.w	r3, r4, sl
 80054d6:	603b      	str	r3, [r7, #0]
 80054d8:	eb45 030b 	adc.w	r3, r5, fp
 80054dc:	607b      	str	r3, [r7, #4]
 80054de:	f04f 0200 	mov.w	r2, #0
 80054e2:	f04f 0300 	mov.w	r3, #0
 80054e6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80054ea:	4629      	mov	r1, r5
 80054ec:	028b      	lsls	r3, r1, #10
 80054ee:	4621      	mov	r1, r4
 80054f0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80054f4:	4621      	mov	r1, r4
 80054f6:	028a      	lsls	r2, r1, #10
 80054f8:	4610      	mov	r0, r2
 80054fa:	4619      	mov	r1, r3
 80054fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054fe:	2200      	movs	r2, #0
 8005500:	60bb      	str	r3, [r7, #8]
 8005502:	60fa      	str	r2, [r7, #12]
 8005504:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005508:	f7fb f9a8 	bl	800085c <__aeabi_uldivmod>
 800550c:	4602      	mov	r2, r0
 800550e:	460b      	mov	r3, r1
 8005510:	4613      	mov	r3, r2
 8005512:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005514:	4b0b      	ldr	r3, [pc, #44]	; (8005544 <HAL_RCC_GetSysClockFreq+0x180>)
 8005516:	685b      	ldr	r3, [r3, #4]
 8005518:	0c1b      	lsrs	r3, r3, #16
 800551a:	f003 0303 	and.w	r3, r3, #3
 800551e:	3301      	adds	r3, #1
 8005520:	005b      	lsls	r3, r3, #1
 8005522:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8005524:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005526:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005528:	fbb2 f3f3 	udiv	r3, r2, r3
 800552c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800552e:	e002      	b.n	8005536 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005530:	4b05      	ldr	r3, [pc, #20]	; (8005548 <HAL_RCC_GetSysClockFreq+0x184>)
 8005532:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005534:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005536:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8005538:	4618      	mov	r0, r3
 800553a:	3740      	adds	r7, #64	; 0x40
 800553c:	46bd      	mov	sp, r7
 800553e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005542:	bf00      	nop
 8005544:	40023800 	.word	0x40023800
 8005548:	00f42400 	.word	0x00f42400
 800554c:	017d7840 	.word	0x017d7840

08005550 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005550:	b480      	push	{r7}
 8005552:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005554:	4b03      	ldr	r3, [pc, #12]	; (8005564 <HAL_RCC_GetHCLKFreq+0x14>)
 8005556:	681b      	ldr	r3, [r3, #0]
}
 8005558:	4618      	mov	r0, r3
 800555a:	46bd      	mov	sp, r7
 800555c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005560:	4770      	bx	lr
 8005562:	bf00      	nop
 8005564:	20000000 	.word	0x20000000

08005568 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005568:	b580      	push	{r7, lr}
 800556a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800556c:	f7ff fff0 	bl	8005550 <HAL_RCC_GetHCLKFreq>
 8005570:	4602      	mov	r2, r0
 8005572:	4b05      	ldr	r3, [pc, #20]	; (8005588 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005574:	689b      	ldr	r3, [r3, #8]
 8005576:	0a9b      	lsrs	r3, r3, #10
 8005578:	f003 0307 	and.w	r3, r3, #7
 800557c:	4903      	ldr	r1, [pc, #12]	; (800558c <HAL_RCC_GetPCLK1Freq+0x24>)
 800557e:	5ccb      	ldrb	r3, [r1, r3]
 8005580:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005584:	4618      	mov	r0, r3
 8005586:	bd80      	pop	{r7, pc}
 8005588:	40023800 	.word	0x40023800
 800558c:	0800b0a8 	.word	0x0800b0a8

08005590 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005590:	b580      	push	{r7, lr}
 8005592:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005594:	f7ff ffdc 	bl	8005550 <HAL_RCC_GetHCLKFreq>
 8005598:	4602      	mov	r2, r0
 800559a:	4b05      	ldr	r3, [pc, #20]	; (80055b0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800559c:	689b      	ldr	r3, [r3, #8]
 800559e:	0b5b      	lsrs	r3, r3, #13
 80055a0:	f003 0307 	and.w	r3, r3, #7
 80055a4:	4903      	ldr	r1, [pc, #12]	; (80055b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80055a6:	5ccb      	ldrb	r3, [r1, r3]
 80055a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80055ac:	4618      	mov	r0, r3
 80055ae:	bd80      	pop	{r7, pc}
 80055b0:	40023800 	.word	0x40023800
 80055b4:	0800b0a8 	.word	0x0800b0a8

080055b8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80055b8:	b480      	push	{r7}
 80055ba:	b083      	sub	sp, #12
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]
 80055c0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	220f      	movs	r2, #15
 80055c6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80055c8:	4b12      	ldr	r3, [pc, #72]	; (8005614 <HAL_RCC_GetClockConfig+0x5c>)
 80055ca:	689b      	ldr	r3, [r3, #8]
 80055cc:	f003 0203 	and.w	r2, r3, #3
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80055d4:	4b0f      	ldr	r3, [pc, #60]	; (8005614 <HAL_RCC_GetClockConfig+0x5c>)
 80055d6:	689b      	ldr	r3, [r3, #8]
 80055d8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80055e0:	4b0c      	ldr	r3, [pc, #48]	; (8005614 <HAL_RCC_GetClockConfig+0x5c>)
 80055e2:	689b      	ldr	r3, [r3, #8]
 80055e4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80055ec:	4b09      	ldr	r3, [pc, #36]	; (8005614 <HAL_RCC_GetClockConfig+0x5c>)
 80055ee:	689b      	ldr	r3, [r3, #8]
 80055f0:	08db      	lsrs	r3, r3, #3
 80055f2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80055fa:	4b07      	ldr	r3, [pc, #28]	; (8005618 <HAL_RCC_GetClockConfig+0x60>)
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	f003 0207 	and.w	r2, r3, #7
 8005602:	683b      	ldr	r3, [r7, #0]
 8005604:	601a      	str	r2, [r3, #0]
}
 8005606:	bf00      	nop
 8005608:	370c      	adds	r7, #12
 800560a:	46bd      	mov	sp, r7
 800560c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005610:	4770      	bx	lr
 8005612:	bf00      	nop
 8005614:	40023800 	.word	0x40023800
 8005618:	40023c00 	.word	0x40023c00

0800561c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800561c:	b580      	push	{r7, lr}
 800561e:	b082      	sub	sp, #8
 8005620:	af00      	add	r7, sp, #0
 8005622:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2b00      	cmp	r3, #0
 8005628:	d101      	bne.n	800562e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800562a:	2301      	movs	r3, #1
 800562c:	e041      	b.n	80056b2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005634:	b2db      	uxtb	r3, r3
 8005636:	2b00      	cmp	r3, #0
 8005638:	d106      	bne.n	8005648 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	2200      	movs	r2, #0
 800563e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005642:	6878      	ldr	r0, [r7, #4]
 8005644:	f7fd fe08 	bl	8003258 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	2202      	movs	r2, #2
 800564c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681a      	ldr	r2, [r3, #0]
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	3304      	adds	r3, #4
 8005658:	4619      	mov	r1, r3
 800565a:	4610      	mov	r0, r2
 800565c:	f000 fc54 	bl	8005f08 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	2201      	movs	r2, #1
 8005664:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	2201      	movs	r2, #1
 800566c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2201      	movs	r2, #1
 8005674:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	2201      	movs	r2, #1
 800567c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	2201      	movs	r2, #1
 8005684:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	2201      	movs	r2, #1
 800568c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	2201      	movs	r2, #1
 8005694:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	2201      	movs	r2, #1
 800569c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	2201      	movs	r2, #1
 80056a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2201      	movs	r2, #1
 80056ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80056b0:	2300      	movs	r3, #0
}
 80056b2:	4618      	mov	r0, r3
 80056b4:	3708      	adds	r7, #8
 80056b6:	46bd      	mov	sp, r7
 80056b8:	bd80      	pop	{r7, pc}
	...

080056bc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80056bc:	b480      	push	{r7}
 80056be:	b085      	sub	sp, #20
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056ca:	b2db      	uxtb	r3, r3
 80056cc:	2b01      	cmp	r3, #1
 80056ce:	d001      	beq.n	80056d4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80056d0:	2301      	movs	r3, #1
 80056d2:	e044      	b.n	800575e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2202      	movs	r2, #2
 80056d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	68da      	ldr	r2, [r3, #12]
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	f042 0201 	orr.w	r2, r2, #1
 80056ea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	4a1e      	ldr	r2, [pc, #120]	; (800576c <HAL_TIM_Base_Start_IT+0xb0>)
 80056f2:	4293      	cmp	r3, r2
 80056f4:	d018      	beq.n	8005728 <HAL_TIM_Base_Start_IT+0x6c>
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056fe:	d013      	beq.n	8005728 <HAL_TIM_Base_Start_IT+0x6c>
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	4a1a      	ldr	r2, [pc, #104]	; (8005770 <HAL_TIM_Base_Start_IT+0xb4>)
 8005706:	4293      	cmp	r3, r2
 8005708:	d00e      	beq.n	8005728 <HAL_TIM_Base_Start_IT+0x6c>
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	4a19      	ldr	r2, [pc, #100]	; (8005774 <HAL_TIM_Base_Start_IT+0xb8>)
 8005710:	4293      	cmp	r3, r2
 8005712:	d009      	beq.n	8005728 <HAL_TIM_Base_Start_IT+0x6c>
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	4a17      	ldr	r2, [pc, #92]	; (8005778 <HAL_TIM_Base_Start_IT+0xbc>)
 800571a:	4293      	cmp	r3, r2
 800571c:	d004      	beq.n	8005728 <HAL_TIM_Base_Start_IT+0x6c>
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	4a16      	ldr	r2, [pc, #88]	; (800577c <HAL_TIM_Base_Start_IT+0xc0>)
 8005724:	4293      	cmp	r3, r2
 8005726:	d111      	bne.n	800574c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	689b      	ldr	r3, [r3, #8]
 800572e:	f003 0307 	and.w	r3, r3, #7
 8005732:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	2b06      	cmp	r3, #6
 8005738:	d010      	beq.n	800575c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	681a      	ldr	r2, [r3, #0]
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f042 0201 	orr.w	r2, r2, #1
 8005748:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800574a:	e007      	b.n	800575c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	681a      	ldr	r2, [r3, #0]
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	f042 0201 	orr.w	r2, r2, #1
 800575a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800575c:	2300      	movs	r3, #0
}
 800575e:	4618      	mov	r0, r3
 8005760:	3714      	adds	r7, #20
 8005762:	46bd      	mov	sp, r7
 8005764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005768:	4770      	bx	lr
 800576a:	bf00      	nop
 800576c:	40010000 	.word	0x40010000
 8005770:	40000400 	.word	0x40000400
 8005774:	40000800 	.word	0x40000800
 8005778:	40000c00 	.word	0x40000c00
 800577c:	40014000 	.word	0x40014000

08005780 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005780:	b580      	push	{r7, lr}
 8005782:	b082      	sub	sp, #8
 8005784:	af00      	add	r7, sp, #0
 8005786:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2b00      	cmp	r3, #0
 800578c:	d101      	bne.n	8005792 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800578e:	2301      	movs	r3, #1
 8005790:	e041      	b.n	8005816 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005798:	b2db      	uxtb	r3, r3
 800579a:	2b00      	cmp	r3, #0
 800579c:	d106      	bne.n	80057ac <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	2200      	movs	r2, #0
 80057a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80057a6:	6878      	ldr	r0, [r7, #4]
 80057a8:	f000 f839 	bl	800581e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	2202      	movs	r2, #2
 80057b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681a      	ldr	r2, [r3, #0]
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	3304      	adds	r3, #4
 80057bc:	4619      	mov	r1, r3
 80057be:	4610      	mov	r0, r2
 80057c0:	f000 fba2 	bl	8005f08 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	2201      	movs	r2, #1
 80057c8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2201      	movs	r2, #1
 80057d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	2201      	movs	r2, #1
 80057d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	2201      	movs	r2, #1
 80057e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	2201      	movs	r2, #1
 80057e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	2201      	movs	r2, #1
 80057f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2201      	movs	r2, #1
 80057f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2201      	movs	r2, #1
 8005800:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	2201      	movs	r2, #1
 8005808:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	2201      	movs	r2, #1
 8005810:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005814:	2300      	movs	r3, #0
}
 8005816:	4618      	mov	r0, r3
 8005818:	3708      	adds	r7, #8
 800581a:	46bd      	mov	sp, r7
 800581c:	bd80      	pop	{r7, pc}

0800581e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800581e:	b480      	push	{r7}
 8005820:	b083      	sub	sp, #12
 8005822:	af00      	add	r7, sp, #0
 8005824:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005826:	bf00      	nop
 8005828:	370c      	adds	r7, #12
 800582a:	46bd      	mov	sp, r7
 800582c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005830:	4770      	bx	lr
	...

08005834 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005834:	b580      	push	{r7, lr}
 8005836:	b084      	sub	sp, #16
 8005838:	af00      	add	r7, sp, #0
 800583a:	6078      	str	r0, [r7, #4]
 800583c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800583e:	683b      	ldr	r3, [r7, #0]
 8005840:	2b00      	cmp	r3, #0
 8005842:	d109      	bne.n	8005858 <HAL_TIM_PWM_Start+0x24>
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800584a:	b2db      	uxtb	r3, r3
 800584c:	2b01      	cmp	r3, #1
 800584e:	bf14      	ite	ne
 8005850:	2301      	movne	r3, #1
 8005852:	2300      	moveq	r3, #0
 8005854:	b2db      	uxtb	r3, r3
 8005856:	e022      	b.n	800589e <HAL_TIM_PWM_Start+0x6a>
 8005858:	683b      	ldr	r3, [r7, #0]
 800585a:	2b04      	cmp	r3, #4
 800585c:	d109      	bne.n	8005872 <HAL_TIM_PWM_Start+0x3e>
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005864:	b2db      	uxtb	r3, r3
 8005866:	2b01      	cmp	r3, #1
 8005868:	bf14      	ite	ne
 800586a:	2301      	movne	r3, #1
 800586c:	2300      	moveq	r3, #0
 800586e:	b2db      	uxtb	r3, r3
 8005870:	e015      	b.n	800589e <HAL_TIM_PWM_Start+0x6a>
 8005872:	683b      	ldr	r3, [r7, #0]
 8005874:	2b08      	cmp	r3, #8
 8005876:	d109      	bne.n	800588c <HAL_TIM_PWM_Start+0x58>
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800587e:	b2db      	uxtb	r3, r3
 8005880:	2b01      	cmp	r3, #1
 8005882:	bf14      	ite	ne
 8005884:	2301      	movne	r3, #1
 8005886:	2300      	moveq	r3, #0
 8005888:	b2db      	uxtb	r3, r3
 800588a:	e008      	b.n	800589e <HAL_TIM_PWM_Start+0x6a>
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005892:	b2db      	uxtb	r3, r3
 8005894:	2b01      	cmp	r3, #1
 8005896:	bf14      	ite	ne
 8005898:	2301      	movne	r3, #1
 800589a:	2300      	moveq	r3, #0
 800589c:	b2db      	uxtb	r3, r3
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d001      	beq.n	80058a6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80058a2:	2301      	movs	r3, #1
 80058a4:	e068      	b.n	8005978 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80058a6:	683b      	ldr	r3, [r7, #0]
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d104      	bne.n	80058b6 <HAL_TIM_PWM_Start+0x82>
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	2202      	movs	r2, #2
 80058b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80058b4:	e013      	b.n	80058de <HAL_TIM_PWM_Start+0xaa>
 80058b6:	683b      	ldr	r3, [r7, #0]
 80058b8:	2b04      	cmp	r3, #4
 80058ba:	d104      	bne.n	80058c6 <HAL_TIM_PWM_Start+0x92>
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	2202      	movs	r2, #2
 80058c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80058c4:	e00b      	b.n	80058de <HAL_TIM_PWM_Start+0xaa>
 80058c6:	683b      	ldr	r3, [r7, #0]
 80058c8:	2b08      	cmp	r3, #8
 80058ca:	d104      	bne.n	80058d6 <HAL_TIM_PWM_Start+0xa2>
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	2202      	movs	r2, #2
 80058d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80058d4:	e003      	b.n	80058de <HAL_TIM_PWM_Start+0xaa>
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	2202      	movs	r2, #2
 80058da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	2201      	movs	r2, #1
 80058e4:	6839      	ldr	r1, [r7, #0]
 80058e6:	4618      	mov	r0, r3
 80058e8:	f000 fdb4 	bl	8006454 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	4a23      	ldr	r2, [pc, #140]	; (8005980 <HAL_TIM_PWM_Start+0x14c>)
 80058f2:	4293      	cmp	r3, r2
 80058f4:	d107      	bne.n	8005906 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005904:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	4a1d      	ldr	r2, [pc, #116]	; (8005980 <HAL_TIM_PWM_Start+0x14c>)
 800590c:	4293      	cmp	r3, r2
 800590e:	d018      	beq.n	8005942 <HAL_TIM_PWM_Start+0x10e>
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005918:	d013      	beq.n	8005942 <HAL_TIM_PWM_Start+0x10e>
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	4a19      	ldr	r2, [pc, #100]	; (8005984 <HAL_TIM_PWM_Start+0x150>)
 8005920:	4293      	cmp	r3, r2
 8005922:	d00e      	beq.n	8005942 <HAL_TIM_PWM_Start+0x10e>
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	4a17      	ldr	r2, [pc, #92]	; (8005988 <HAL_TIM_PWM_Start+0x154>)
 800592a:	4293      	cmp	r3, r2
 800592c:	d009      	beq.n	8005942 <HAL_TIM_PWM_Start+0x10e>
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	4a16      	ldr	r2, [pc, #88]	; (800598c <HAL_TIM_PWM_Start+0x158>)
 8005934:	4293      	cmp	r3, r2
 8005936:	d004      	beq.n	8005942 <HAL_TIM_PWM_Start+0x10e>
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	4a14      	ldr	r2, [pc, #80]	; (8005990 <HAL_TIM_PWM_Start+0x15c>)
 800593e:	4293      	cmp	r3, r2
 8005940:	d111      	bne.n	8005966 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	689b      	ldr	r3, [r3, #8]
 8005948:	f003 0307 	and.w	r3, r3, #7
 800594c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	2b06      	cmp	r3, #6
 8005952:	d010      	beq.n	8005976 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	681a      	ldr	r2, [r3, #0]
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	f042 0201 	orr.w	r2, r2, #1
 8005962:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005964:	e007      	b.n	8005976 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	681a      	ldr	r2, [r3, #0]
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	f042 0201 	orr.w	r2, r2, #1
 8005974:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005976:	2300      	movs	r3, #0
}
 8005978:	4618      	mov	r0, r3
 800597a:	3710      	adds	r7, #16
 800597c:	46bd      	mov	sp, r7
 800597e:	bd80      	pop	{r7, pc}
 8005980:	40010000 	.word	0x40010000
 8005984:	40000400 	.word	0x40000400
 8005988:	40000800 	.word	0x40000800
 800598c:	40000c00 	.word	0x40000c00
 8005990:	40014000 	.word	0x40014000

08005994 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005994:	b580      	push	{r7, lr}
 8005996:	b082      	sub	sp, #8
 8005998:	af00      	add	r7, sp, #0
 800599a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	691b      	ldr	r3, [r3, #16]
 80059a2:	f003 0302 	and.w	r3, r3, #2
 80059a6:	2b02      	cmp	r3, #2
 80059a8:	d122      	bne.n	80059f0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	68db      	ldr	r3, [r3, #12]
 80059b0:	f003 0302 	and.w	r3, r3, #2
 80059b4:	2b02      	cmp	r3, #2
 80059b6:	d11b      	bne.n	80059f0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	f06f 0202 	mvn.w	r2, #2
 80059c0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	2201      	movs	r2, #1
 80059c6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	699b      	ldr	r3, [r3, #24]
 80059ce:	f003 0303 	and.w	r3, r3, #3
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d003      	beq.n	80059de <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80059d6:	6878      	ldr	r0, [r7, #4]
 80059d8:	f000 fa77 	bl	8005eca <HAL_TIM_IC_CaptureCallback>
 80059dc:	e005      	b.n	80059ea <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80059de:	6878      	ldr	r0, [r7, #4]
 80059e0:	f000 fa69 	bl	8005eb6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80059e4:	6878      	ldr	r0, [r7, #4]
 80059e6:	f000 fa7a 	bl	8005ede <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	2200      	movs	r2, #0
 80059ee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	691b      	ldr	r3, [r3, #16]
 80059f6:	f003 0304 	and.w	r3, r3, #4
 80059fa:	2b04      	cmp	r3, #4
 80059fc:	d122      	bne.n	8005a44 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	68db      	ldr	r3, [r3, #12]
 8005a04:	f003 0304 	and.w	r3, r3, #4
 8005a08:	2b04      	cmp	r3, #4
 8005a0a:	d11b      	bne.n	8005a44 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	f06f 0204 	mvn.w	r2, #4
 8005a14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	2202      	movs	r2, #2
 8005a1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	699b      	ldr	r3, [r3, #24]
 8005a22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d003      	beq.n	8005a32 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a2a:	6878      	ldr	r0, [r7, #4]
 8005a2c:	f000 fa4d 	bl	8005eca <HAL_TIM_IC_CaptureCallback>
 8005a30:	e005      	b.n	8005a3e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a32:	6878      	ldr	r0, [r7, #4]
 8005a34:	f000 fa3f 	bl	8005eb6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a38:	6878      	ldr	r0, [r7, #4]
 8005a3a:	f000 fa50 	bl	8005ede <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	2200      	movs	r2, #0
 8005a42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	691b      	ldr	r3, [r3, #16]
 8005a4a:	f003 0308 	and.w	r3, r3, #8
 8005a4e:	2b08      	cmp	r3, #8
 8005a50:	d122      	bne.n	8005a98 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	68db      	ldr	r3, [r3, #12]
 8005a58:	f003 0308 	and.w	r3, r3, #8
 8005a5c:	2b08      	cmp	r3, #8
 8005a5e:	d11b      	bne.n	8005a98 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	f06f 0208 	mvn.w	r2, #8
 8005a68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	2204      	movs	r2, #4
 8005a6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	69db      	ldr	r3, [r3, #28]
 8005a76:	f003 0303 	and.w	r3, r3, #3
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d003      	beq.n	8005a86 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a7e:	6878      	ldr	r0, [r7, #4]
 8005a80:	f000 fa23 	bl	8005eca <HAL_TIM_IC_CaptureCallback>
 8005a84:	e005      	b.n	8005a92 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a86:	6878      	ldr	r0, [r7, #4]
 8005a88:	f000 fa15 	bl	8005eb6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a8c:	6878      	ldr	r0, [r7, #4]
 8005a8e:	f000 fa26 	bl	8005ede <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	2200      	movs	r2, #0
 8005a96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	691b      	ldr	r3, [r3, #16]
 8005a9e:	f003 0310 	and.w	r3, r3, #16
 8005aa2:	2b10      	cmp	r3, #16
 8005aa4:	d122      	bne.n	8005aec <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	68db      	ldr	r3, [r3, #12]
 8005aac:	f003 0310 	and.w	r3, r3, #16
 8005ab0:	2b10      	cmp	r3, #16
 8005ab2:	d11b      	bne.n	8005aec <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	f06f 0210 	mvn.w	r2, #16
 8005abc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	2208      	movs	r2, #8
 8005ac2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	69db      	ldr	r3, [r3, #28]
 8005aca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d003      	beq.n	8005ada <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ad2:	6878      	ldr	r0, [r7, #4]
 8005ad4:	f000 f9f9 	bl	8005eca <HAL_TIM_IC_CaptureCallback>
 8005ad8:	e005      	b.n	8005ae6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ada:	6878      	ldr	r0, [r7, #4]
 8005adc:	f000 f9eb 	bl	8005eb6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ae0:	6878      	ldr	r0, [r7, #4]
 8005ae2:	f000 f9fc 	bl	8005ede <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	2200      	movs	r2, #0
 8005aea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	691b      	ldr	r3, [r3, #16]
 8005af2:	f003 0301 	and.w	r3, r3, #1
 8005af6:	2b01      	cmp	r3, #1
 8005af8:	d10e      	bne.n	8005b18 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	68db      	ldr	r3, [r3, #12]
 8005b00:	f003 0301 	and.w	r3, r3, #1
 8005b04:	2b01      	cmp	r3, #1
 8005b06:	d107      	bne.n	8005b18 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	f06f 0201 	mvn.w	r2, #1
 8005b10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005b12:	6878      	ldr	r0, [r7, #4]
 8005b14:	f7fb fbc4 	bl	80012a0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	691b      	ldr	r3, [r3, #16]
 8005b1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b22:	2b80      	cmp	r3, #128	; 0x80
 8005b24:	d10e      	bne.n	8005b44 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	68db      	ldr	r3, [r3, #12]
 8005b2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b30:	2b80      	cmp	r3, #128	; 0x80
 8005b32:	d107      	bne.n	8005b44 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005b3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005b3e:	6878      	ldr	r0, [r7, #4]
 8005b40:	f000 fd26 	bl	8006590 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	691b      	ldr	r3, [r3, #16]
 8005b4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b4e:	2b40      	cmp	r3, #64	; 0x40
 8005b50:	d10e      	bne.n	8005b70 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	68db      	ldr	r3, [r3, #12]
 8005b58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b5c:	2b40      	cmp	r3, #64	; 0x40
 8005b5e:	d107      	bne.n	8005b70 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005b68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005b6a:	6878      	ldr	r0, [r7, #4]
 8005b6c:	f000 f9c1 	bl	8005ef2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	691b      	ldr	r3, [r3, #16]
 8005b76:	f003 0320 	and.w	r3, r3, #32
 8005b7a:	2b20      	cmp	r3, #32
 8005b7c:	d10e      	bne.n	8005b9c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	68db      	ldr	r3, [r3, #12]
 8005b84:	f003 0320 	and.w	r3, r3, #32
 8005b88:	2b20      	cmp	r3, #32
 8005b8a:	d107      	bne.n	8005b9c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	f06f 0220 	mvn.w	r2, #32
 8005b94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005b96:	6878      	ldr	r0, [r7, #4]
 8005b98:	f000 fcf0 	bl	800657c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005b9c:	bf00      	nop
 8005b9e:	3708      	adds	r7, #8
 8005ba0:	46bd      	mov	sp, r7
 8005ba2:	bd80      	pop	{r7, pc}

08005ba4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005ba4:	b580      	push	{r7, lr}
 8005ba6:	b086      	sub	sp, #24
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	60f8      	str	r0, [r7, #12]
 8005bac:	60b9      	str	r1, [r7, #8]
 8005bae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005bb0:	2300      	movs	r3, #0
 8005bb2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005bba:	2b01      	cmp	r3, #1
 8005bbc:	d101      	bne.n	8005bc2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005bbe:	2302      	movs	r3, #2
 8005bc0:	e0ae      	b.n	8005d20 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	2201      	movs	r2, #1
 8005bc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	2b0c      	cmp	r3, #12
 8005bce:	f200 809f 	bhi.w	8005d10 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005bd2:	a201      	add	r2, pc, #4	; (adr r2, 8005bd8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005bd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bd8:	08005c0d 	.word	0x08005c0d
 8005bdc:	08005d11 	.word	0x08005d11
 8005be0:	08005d11 	.word	0x08005d11
 8005be4:	08005d11 	.word	0x08005d11
 8005be8:	08005c4d 	.word	0x08005c4d
 8005bec:	08005d11 	.word	0x08005d11
 8005bf0:	08005d11 	.word	0x08005d11
 8005bf4:	08005d11 	.word	0x08005d11
 8005bf8:	08005c8f 	.word	0x08005c8f
 8005bfc:	08005d11 	.word	0x08005d11
 8005c00:	08005d11 	.word	0x08005d11
 8005c04:	08005d11 	.word	0x08005d11
 8005c08:	08005ccf 	.word	0x08005ccf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	68b9      	ldr	r1, [r7, #8]
 8005c12:	4618      	mov	r0, r3
 8005c14:	f000 f9f8 	bl	8006008 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	699a      	ldr	r2, [r3, #24]
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	f042 0208 	orr.w	r2, r2, #8
 8005c26:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	699a      	ldr	r2, [r3, #24]
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	f022 0204 	bic.w	r2, r2, #4
 8005c36:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	6999      	ldr	r1, [r3, #24]
 8005c3e:	68bb      	ldr	r3, [r7, #8]
 8005c40:	691a      	ldr	r2, [r3, #16]
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	430a      	orrs	r2, r1
 8005c48:	619a      	str	r2, [r3, #24]
      break;
 8005c4a:	e064      	b.n	8005d16 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	68b9      	ldr	r1, [r7, #8]
 8005c52:	4618      	mov	r0, r3
 8005c54:	f000 fa3e 	bl	80060d4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	699a      	ldr	r2, [r3, #24]
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005c66:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	699a      	ldr	r2, [r3, #24]
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005c76:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	6999      	ldr	r1, [r3, #24]
 8005c7e:	68bb      	ldr	r3, [r7, #8]
 8005c80:	691b      	ldr	r3, [r3, #16]
 8005c82:	021a      	lsls	r2, r3, #8
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	430a      	orrs	r2, r1
 8005c8a:	619a      	str	r2, [r3, #24]
      break;
 8005c8c:	e043      	b.n	8005d16 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	68b9      	ldr	r1, [r7, #8]
 8005c94:	4618      	mov	r0, r3
 8005c96:	f000 fa89 	bl	80061ac <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	69da      	ldr	r2, [r3, #28]
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	f042 0208 	orr.w	r2, r2, #8
 8005ca8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	69da      	ldr	r2, [r3, #28]
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	f022 0204 	bic.w	r2, r2, #4
 8005cb8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	69d9      	ldr	r1, [r3, #28]
 8005cc0:	68bb      	ldr	r3, [r7, #8]
 8005cc2:	691a      	ldr	r2, [r3, #16]
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	430a      	orrs	r2, r1
 8005cca:	61da      	str	r2, [r3, #28]
      break;
 8005ccc:	e023      	b.n	8005d16 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	68b9      	ldr	r1, [r7, #8]
 8005cd4:	4618      	mov	r0, r3
 8005cd6:	f000 fad3 	bl	8006280 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	69da      	ldr	r2, [r3, #28]
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005ce8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	69da      	ldr	r2, [r3, #28]
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005cf8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	69d9      	ldr	r1, [r3, #28]
 8005d00:	68bb      	ldr	r3, [r7, #8]
 8005d02:	691b      	ldr	r3, [r3, #16]
 8005d04:	021a      	lsls	r2, r3, #8
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	430a      	orrs	r2, r1
 8005d0c:	61da      	str	r2, [r3, #28]
      break;
 8005d0e:	e002      	b.n	8005d16 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005d10:	2301      	movs	r3, #1
 8005d12:	75fb      	strb	r3, [r7, #23]
      break;
 8005d14:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	2200      	movs	r2, #0
 8005d1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005d1e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d20:	4618      	mov	r0, r3
 8005d22:	3718      	adds	r7, #24
 8005d24:	46bd      	mov	sp, r7
 8005d26:	bd80      	pop	{r7, pc}

08005d28 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005d28:	b580      	push	{r7, lr}
 8005d2a:	b084      	sub	sp, #16
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	6078      	str	r0, [r7, #4]
 8005d30:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005d32:	2300      	movs	r3, #0
 8005d34:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d3c:	2b01      	cmp	r3, #1
 8005d3e:	d101      	bne.n	8005d44 <HAL_TIM_ConfigClockSource+0x1c>
 8005d40:	2302      	movs	r3, #2
 8005d42:	e0b4      	b.n	8005eae <HAL_TIM_ConfigClockSource+0x186>
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	2201      	movs	r2, #1
 8005d48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	2202      	movs	r2, #2
 8005d50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	689b      	ldr	r3, [r3, #8]
 8005d5a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005d5c:	68bb      	ldr	r3, [r7, #8]
 8005d5e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005d62:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005d64:	68bb      	ldr	r3, [r7, #8]
 8005d66:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005d6a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	68ba      	ldr	r2, [r7, #8]
 8005d72:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005d74:	683b      	ldr	r3, [r7, #0]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005d7c:	d03e      	beq.n	8005dfc <HAL_TIM_ConfigClockSource+0xd4>
 8005d7e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005d82:	f200 8087 	bhi.w	8005e94 <HAL_TIM_ConfigClockSource+0x16c>
 8005d86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d8a:	f000 8086 	beq.w	8005e9a <HAL_TIM_ConfigClockSource+0x172>
 8005d8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d92:	d87f      	bhi.n	8005e94 <HAL_TIM_ConfigClockSource+0x16c>
 8005d94:	2b70      	cmp	r3, #112	; 0x70
 8005d96:	d01a      	beq.n	8005dce <HAL_TIM_ConfigClockSource+0xa6>
 8005d98:	2b70      	cmp	r3, #112	; 0x70
 8005d9a:	d87b      	bhi.n	8005e94 <HAL_TIM_ConfigClockSource+0x16c>
 8005d9c:	2b60      	cmp	r3, #96	; 0x60
 8005d9e:	d050      	beq.n	8005e42 <HAL_TIM_ConfigClockSource+0x11a>
 8005da0:	2b60      	cmp	r3, #96	; 0x60
 8005da2:	d877      	bhi.n	8005e94 <HAL_TIM_ConfigClockSource+0x16c>
 8005da4:	2b50      	cmp	r3, #80	; 0x50
 8005da6:	d03c      	beq.n	8005e22 <HAL_TIM_ConfigClockSource+0xfa>
 8005da8:	2b50      	cmp	r3, #80	; 0x50
 8005daa:	d873      	bhi.n	8005e94 <HAL_TIM_ConfigClockSource+0x16c>
 8005dac:	2b40      	cmp	r3, #64	; 0x40
 8005dae:	d058      	beq.n	8005e62 <HAL_TIM_ConfigClockSource+0x13a>
 8005db0:	2b40      	cmp	r3, #64	; 0x40
 8005db2:	d86f      	bhi.n	8005e94 <HAL_TIM_ConfigClockSource+0x16c>
 8005db4:	2b30      	cmp	r3, #48	; 0x30
 8005db6:	d064      	beq.n	8005e82 <HAL_TIM_ConfigClockSource+0x15a>
 8005db8:	2b30      	cmp	r3, #48	; 0x30
 8005dba:	d86b      	bhi.n	8005e94 <HAL_TIM_ConfigClockSource+0x16c>
 8005dbc:	2b20      	cmp	r3, #32
 8005dbe:	d060      	beq.n	8005e82 <HAL_TIM_ConfigClockSource+0x15a>
 8005dc0:	2b20      	cmp	r3, #32
 8005dc2:	d867      	bhi.n	8005e94 <HAL_TIM_ConfigClockSource+0x16c>
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d05c      	beq.n	8005e82 <HAL_TIM_ConfigClockSource+0x15a>
 8005dc8:	2b10      	cmp	r3, #16
 8005dca:	d05a      	beq.n	8005e82 <HAL_TIM_ConfigClockSource+0x15a>
 8005dcc:	e062      	b.n	8005e94 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	6818      	ldr	r0, [r3, #0]
 8005dd2:	683b      	ldr	r3, [r7, #0]
 8005dd4:	6899      	ldr	r1, [r3, #8]
 8005dd6:	683b      	ldr	r3, [r7, #0]
 8005dd8:	685a      	ldr	r2, [r3, #4]
 8005dda:	683b      	ldr	r3, [r7, #0]
 8005ddc:	68db      	ldr	r3, [r3, #12]
 8005dde:	f000 fb19 	bl	8006414 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	689b      	ldr	r3, [r3, #8]
 8005de8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005dea:	68bb      	ldr	r3, [r7, #8]
 8005dec:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005df0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	68ba      	ldr	r2, [r7, #8]
 8005df8:	609a      	str	r2, [r3, #8]
      break;
 8005dfa:	e04f      	b.n	8005e9c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	6818      	ldr	r0, [r3, #0]
 8005e00:	683b      	ldr	r3, [r7, #0]
 8005e02:	6899      	ldr	r1, [r3, #8]
 8005e04:	683b      	ldr	r3, [r7, #0]
 8005e06:	685a      	ldr	r2, [r3, #4]
 8005e08:	683b      	ldr	r3, [r7, #0]
 8005e0a:	68db      	ldr	r3, [r3, #12]
 8005e0c:	f000 fb02 	bl	8006414 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	689a      	ldr	r2, [r3, #8]
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005e1e:	609a      	str	r2, [r3, #8]
      break;
 8005e20:	e03c      	b.n	8005e9c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	6818      	ldr	r0, [r3, #0]
 8005e26:	683b      	ldr	r3, [r7, #0]
 8005e28:	6859      	ldr	r1, [r3, #4]
 8005e2a:	683b      	ldr	r3, [r7, #0]
 8005e2c:	68db      	ldr	r3, [r3, #12]
 8005e2e:	461a      	mov	r2, r3
 8005e30:	f000 fa76 	bl	8006320 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	2150      	movs	r1, #80	; 0x50
 8005e3a:	4618      	mov	r0, r3
 8005e3c:	f000 facf 	bl	80063de <TIM_ITRx_SetConfig>
      break;
 8005e40:	e02c      	b.n	8005e9c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	6818      	ldr	r0, [r3, #0]
 8005e46:	683b      	ldr	r3, [r7, #0]
 8005e48:	6859      	ldr	r1, [r3, #4]
 8005e4a:	683b      	ldr	r3, [r7, #0]
 8005e4c:	68db      	ldr	r3, [r3, #12]
 8005e4e:	461a      	mov	r2, r3
 8005e50:	f000 fa95 	bl	800637e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	2160      	movs	r1, #96	; 0x60
 8005e5a:	4618      	mov	r0, r3
 8005e5c:	f000 fabf 	bl	80063de <TIM_ITRx_SetConfig>
      break;
 8005e60:	e01c      	b.n	8005e9c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	6818      	ldr	r0, [r3, #0]
 8005e66:	683b      	ldr	r3, [r7, #0]
 8005e68:	6859      	ldr	r1, [r3, #4]
 8005e6a:	683b      	ldr	r3, [r7, #0]
 8005e6c:	68db      	ldr	r3, [r3, #12]
 8005e6e:	461a      	mov	r2, r3
 8005e70:	f000 fa56 	bl	8006320 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	2140      	movs	r1, #64	; 0x40
 8005e7a:	4618      	mov	r0, r3
 8005e7c:	f000 faaf 	bl	80063de <TIM_ITRx_SetConfig>
      break;
 8005e80:	e00c      	b.n	8005e9c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681a      	ldr	r2, [r3, #0]
 8005e86:	683b      	ldr	r3, [r7, #0]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	4619      	mov	r1, r3
 8005e8c:	4610      	mov	r0, r2
 8005e8e:	f000 faa6 	bl	80063de <TIM_ITRx_SetConfig>
      break;
 8005e92:	e003      	b.n	8005e9c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005e94:	2301      	movs	r3, #1
 8005e96:	73fb      	strb	r3, [r7, #15]
      break;
 8005e98:	e000      	b.n	8005e9c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005e9a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	2201      	movs	r2, #1
 8005ea0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	2200      	movs	r2, #0
 8005ea8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005eac:	7bfb      	ldrb	r3, [r7, #15]
}
 8005eae:	4618      	mov	r0, r3
 8005eb0:	3710      	adds	r7, #16
 8005eb2:	46bd      	mov	sp, r7
 8005eb4:	bd80      	pop	{r7, pc}

08005eb6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005eb6:	b480      	push	{r7}
 8005eb8:	b083      	sub	sp, #12
 8005eba:	af00      	add	r7, sp, #0
 8005ebc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005ebe:	bf00      	nop
 8005ec0:	370c      	adds	r7, #12
 8005ec2:	46bd      	mov	sp, r7
 8005ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec8:	4770      	bx	lr

08005eca <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005eca:	b480      	push	{r7}
 8005ecc:	b083      	sub	sp, #12
 8005ece:	af00      	add	r7, sp, #0
 8005ed0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005ed2:	bf00      	nop
 8005ed4:	370c      	adds	r7, #12
 8005ed6:	46bd      	mov	sp, r7
 8005ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005edc:	4770      	bx	lr

08005ede <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005ede:	b480      	push	{r7}
 8005ee0:	b083      	sub	sp, #12
 8005ee2:	af00      	add	r7, sp, #0
 8005ee4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005ee6:	bf00      	nop
 8005ee8:	370c      	adds	r7, #12
 8005eea:	46bd      	mov	sp, r7
 8005eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef0:	4770      	bx	lr

08005ef2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005ef2:	b480      	push	{r7}
 8005ef4:	b083      	sub	sp, #12
 8005ef6:	af00      	add	r7, sp, #0
 8005ef8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005efa:	bf00      	nop
 8005efc:	370c      	adds	r7, #12
 8005efe:	46bd      	mov	sp, r7
 8005f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f04:	4770      	bx	lr
	...

08005f08 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005f08:	b480      	push	{r7}
 8005f0a:	b085      	sub	sp, #20
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	6078      	str	r0, [r7, #4]
 8005f10:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	4a34      	ldr	r2, [pc, #208]	; (8005fec <TIM_Base_SetConfig+0xe4>)
 8005f1c:	4293      	cmp	r3, r2
 8005f1e:	d00f      	beq.n	8005f40 <TIM_Base_SetConfig+0x38>
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f26:	d00b      	beq.n	8005f40 <TIM_Base_SetConfig+0x38>
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	4a31      	ldr	r2, [pc, #196]	; (8005ff0 <TIM_Base_SetConfig+0xe8>)
 8005f2c:	4293      	cmp	r3, r2
 8005f2e:	d007      	beq.n	8005f40 <TIM_Base_SetConfig+0x38>
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	4a30      	ldr	r2, [pc, #192]	; (8005ff4 <TIM_Base_SetConfig+0xec>)
 8005f34:	4293      	cmp	r3, r2
 8005f36:	d003      	beq.n	8005f40 <TIM_Base_SetConfig+0x38>
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	4a2f      	ldr	r2, [pc, #188]	; (8005ff8 <TIM_Base_SetConfig+0xf0>)
 8005f3c:	4293      	cmp	r3, r2
 8005f3e:	d108      	bne.n	8005f52 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f46:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005f48:	683b      	ldr	r3, [r7, #0]
 8005f4a:	685b      	ldr	r3, [r3, #4]
 8005f4c:	68fa      	ldr	r2, [r7, #12]
 8005f4e:	4313      	orrs	r3, r2
 8005f50:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	4a25      	ldr	r2, [pc, #148]	; (8005fec <TIM_Base_SetConfig+0xe4>)
 8005f56:	4293      	cmp	r3, r2
 8005f58:	d01b      	beq.n	8005f92 <TIM_Base_SetConfig+0x8a>
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f60:	d017      	beq.n	8005f92 <TIM_Base_SetConfig+0x8a>
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	4a22      	ldr	r2, [pc, #136]	; (8005ff0 <TIM_Base_SetConfig+0xe8>)
 8005f66:	4293      	cmp	r3, r2
 8005f68:	d013      	beq.n	8005f92 <TIM_Base_SetConfig+0x8a>
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	4a21      	ldr	r2, [pc, #132]	; (8005ff4 <TIM_Base_SetConfig+0xec>)
 8005f6e:	4293      	cmp	r3, r2
 8005f70:	d00f      	beq.n	8005f92 <TIM_Base_SetConfig+0x8a>
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	4a20      	ldr	r2, [pc, #128]	; (8005ff8 <TIM_Base_SetConfig+0xf0>)
 8005f76:	4293      	cmp	r3, r2
 8005f78:	d00b      	beq.n	8005f92 <TIM_Base_SetConfig+0x8a>
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	4a1f      	ldr	r2, [pc, #124]	; (8005ffc <TIM_Base_SetConfig+0xf4>)
 8005f7e:	4293      	cmp	r3, r2
 8005f80:	d007      	beq.n	8005f92 <TIM_Base_SetConfig+0x8a>
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	4a1e      	ldr	r2, [pc, #120]	; (8006000 <TIM_Base_SetConfig+0xf8>)
 8005f86:	4293      	cmp	r3, r2
 8005f88:	d003      	beq.n	8005f92 <TIM_Base_SetConfig+0x8a>
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	4a1d      	ldr	r2, [pc, #116]	; (8006004 <TIM_Base_SetConfig+0xfc>)
 8005f8e:	4293      	cmp	r3, r2
 8005f90:	d108      	bne.n	8005fa4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f98:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005f9a:	683b      	ldr	r3, [r7, #0]
 8005f9c:	68db      	ldr	r3, [r3, #12]
 8005f9e:	68fa      	ldr	r2, [r7, #12]
 8005fa0:	4313      	orrs	r3, r2
 8005fa2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005faa:	683b      	ldr	r3, [r7, #0]
 8005fac:	695b      	ldr	r3, [r3, #20]
 8005fae:	4313      	orrs	r3, r2
 8005fb0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	68fa      	ldr	r2, [r7, #12]
 8005fb6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005fb8:	683b      	ldr	r3, [r7, #0]
 8005fba:	689a      	ldr	r2, [r3, #8]
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005fc0:	683b      	ldr	r3, [r7, #0]
 8005fc2:	681a      	ldr	r2, [r3, #0]
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	4a08      	ldr	r2, [pc, #32]	; (8005fec <TIM_Base_SetConfig+0xe4>)
 8005fcc:	4293      	cmp	r3, r2
 8005fce:	d103      	bne.n	8005fd8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005fd0:	683b      	ldr	r3, [r7, #0]
 8005fd2:	691a      	ldr	r2, [r3, #16]
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	2201      	movs	r2, #1
 8005fdc:	615a      	str	r2, [r3, #20]
}
 8005fde:	bf00      	nop
 8005fe0:	3714      	adds	r7, #20
 8005fe2:	46bd      	mov	sp, r7
 8005fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe8:	4770      	bx	lr
 8005fea:	bf00      	nop
 8005fec:	40010000 	.word	0x40010000
 8005ff0:	40000400 	.word	0x40000400
 8005ff4:	40000800 	.word	0x40000800
 8005ff8:	40000c00 	.word	0x40000c00
 8005ffc:	40014000 	.word	0x40014000
 8006000:	40014400 	.word	0x40014400
 8006004:	40014800 	.word	0x40014800

08006008 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006008:	b480      	push	{r7}
 800600a:	b087      	sub	sp, #28
 800600c:	af00      	add	r7, sp, #0
 800600e:	6078      	str	r0, [r7, #4]
 8006010:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	6a1b      	ldr	r3, [r3, #32]
 8006016:	f023 0201 	bic.w	r2, r3, #1
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	6a1b      	ldr	r3, [r3, #32]
 8006022:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	685b      	ldr	r3, [r3, #4]
 8006028:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	699b      	ldr	r3, [r3, #24]
 800602e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006036:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	f023 0303 	bic.w	r3, r3, #3
 800603e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006040:	683b      	ldr	r3, [r7, #0]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	68fa      	ldr	r2, [r7, #12]
 8006046:	4313      	orrs	r3, r2
 8006048:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800604a:	697b      	ldr	r3, [r7, #20]
 800604c:	f023 0302 	bic.w	r3, r3, #2
 8006050:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006052:	683b      	ldr	r3, [r7, #0]
 8006054:	689b      	ldr	r3, [r3, #8]
 8006056:	697a      	ldr	r2, [r7, #20]
 8006058:	4313      	orrs	r3, r2
 800605a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	4a1c      	ldr	r2, [pc, #112]	; (80060d0 <TIM_OC1_SetConfig+0xc8>)
 8006060:	4293      	cmp	r3, r2
 8006062:	d10c      	bne.n	800607e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006064:	697b      	ldr	r3, [r7, #20]
 8006066:	f023 0308 	bic.w	r3, r3, #8
 800606a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800606c:	683b      	ldr	r3, [r7, #0]
 800606e:	68db      	ldr	r3, [r3, #12]
 8006070:	697a      	ldr	r2, [r7, #20]
 8006072:	4313      	orrs	r3, r2
 8006074:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006076:	697b      	ldr	r3, [r7, #20]
 8006078:	f023 0304 	bic.w	r3, r3, #4
 800607c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	4a13      	ldr	r2, [pc, #76]	; (80060d0 <TIM_OC1_SetConfig+0xc8>)
 8006082:	4293      	cmp	r3, r2
 8006084:	d111      	bne.n	80060aa <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006086:	693b      	ldr	r3, [r7, #16]
 8006088:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800608c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800608e:	693b      	ldr	r3, [r7, #16]
 8006090:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006094:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006096:	683b      	ldr	r3, [r7, #0]
 8006098:	695b      	ldr	r3, [r3, #20]
 800609a:	693a      	ldr	r2, [r7, #16]
 800609c:	4313      	orrs	r3, r2
 800609e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80060a0:	683b      	ldr	r3, [r7, #0]
 80060a2:	699b      	ldr	r3, [r3, #24]
 80060a4:	693a      	ldr	r2, [r7, #16]
 80060a6:	4313      	orrs	r3, r2
 80060a8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	693a      	ldr	r2, [r7, #16]
 80060ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	68fa      	ldr	r2, [r7, #12]
 80060b4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80060b6:	683b      	ldr	r3, [r7, #0]
 80060b8:	685a      	ldr	r2, [r3, #4]
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	697a      	ldr	r2, [r7, #20]
 80060c2:	621a      	str	r2, [r3, #32]
}
 80060c4:	bf00      	nop
 80060c6:	371c      	adds	r7, #28
 80060c8:	46bd      	mov	sp, r7
 80060ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ce:	4770      	bx	lr
 80060d0:	40010000 	.word	0x40010000

080060d4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80060d4:	b480      	push	{r7}
 80060d6:	b087      	sub	sp, #28
 80060d8:	af00      	add	r7, sp, #0
 80060da:	6078      	str	r0, [r7, #4]
 80060dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	6a1b      	ldr	r3, [r3, #32]
 80060e2:	f023 0210 	bic.w	r2, r3, #16
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	6a1b      	ldr	r3, [r3, #32]
 80060ee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	685b      	ldr	r3, [r3, #4]
 80060f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	699b      	ldr	r3, [r3, #24]
 80060fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006102:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800610a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800610c:	683b      	ldr	r3, [r7, #0]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	021b      	lsls	r3, r3, #8
 8006112:	68fa      	ldr	r2, [r7, #12]
 8006114:	4313      	orrs	r3, r2
 8006116:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006118:	697b      	ldr	r3, [r7, #20]
 800611a:	f023 0320 	bic.w	r3, r3, #32
 800611e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006120:	683b      	ldr	r3, [r7, #0]
 8006122:	689b      	ldr	r3, [r3, #8]
 8006124:	011b      	lsls	r3, r3, #4
 8006126:	697a      	ldr	r2, [r7, #20]
 8006128:	4313      	orrs	r3, r2
 800612a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	4a1e      	ldr	r2, [pc, #120]	; (80061a8 <TIM_OC2_SetConfig+0xd4>)
 8006130:	4293      	cmp	r3, r2
 8006132:	d10d      	bne.n	8006150 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006134:	697b      	ldr	r3, [r7, #20]
 8006136:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800613a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800613c:	683b      	ldr	r3, [r7, #0]
 800613e:	68db      	ldr	r3, [r3, #12]
 8006140:	011b      	lsls	r3, r3, #4
 8006142:	697a      	ldr	r2, [r7, #20]
 8006144:	4313      	orrs	r3, r2
 8006146:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006148:	697b      	ldr	r3, [r7, #20]
 800614a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800614e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	4a15      	ldr	r2, [pc, #84]	; (80061a8 <TIM_OC2_SetConfig+0xd4>)
 8006154:	4293      	cmp	r3, r2
 8006156:	d113      	bne.n	8006180 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006158:	693b      	ldr	r3, [r7, #16]
 800615a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800615e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006160:	693b      	ldr	r3, [r7, #16]
 8006162:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006166:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006168:	683b      	ldr	r3, [r7, #0]
 800616a:	695b      	ldr	r3, [r3, #20]
 800616c:	009b      	lsls	r3, r3, #2
 800616e:	693a      	ldr	r2, [r7, #16]
 8006170:	4313      	orrs	r3, r2
 8006172:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006174:	683b      	ldr	r3, [r7, #0]
 8006176:	699b      	ldr	r3, [r3, #24]
 8006178:	009b      	lsls	r3, r3, #2
 800617a:	693a      	ldr	r2, [r7, #16]
 800617c:	4313      	orrs	r3, r2
 800617e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	693a      	ldr	r2, [r7, #16]
 8006184:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	68fa      	ldr	r2, [r7, #12]
 800618a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800618c:	683b      	ldr	r3, [r7, #0]
 800618e:	685a      	ldr	r2, [r3, #4]
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	697a      	ldr	r2, [r7, #20]
 8006198:	621a      	str	r2, [r3, #32]
}
 800619a:	bf00      	nop
 800619c:	371c      	adds	r7, #28
 800619e:	46bd      	mov	sp, r7
 80061a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a4:	4770      	bx	lr
 80061a6:	bf00      	nop
 80061a8:	40010000 	.word	0x40010000

080061ac <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80061ac:	b480      	push	{r7}
 80061ae:	b087      	sub	sp, #28
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	6078      	str	r0, [r7, #4]
 80061b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	6a1b      	ldr	r3, [r3, #32]
 80061ba:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	6a1b      	ldr	r3, [r3, #32]
 80061c6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	685b      	ldr	r3, [r3, #4]
 80061cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	69db      	ldr	r3, [r3, #28]
 80061d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	f023 0303 	bic.w	r3, r3, #3
 80061e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80061e4:	683b      	ldr	r3, [r7, #0]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	68fa      	ldr	r2, [r7, #12]
 80061ea:	4313      	orrs	r3, r2
 80061ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80061ee:	697b      	ldr	r3, [r7, #20]
 80061f0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80061f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80061f6:	683b      	ldr	r3, [r7, #0]
 80061f8:	689b      	ldr	r3, [r3, #8]
 80061fa:	021b      	lsls	r3, r3, #8
 80061fc:	697a      	ldr	r2, [r7, #20]
 80061fe:	4313      	orrs	r3, r2
 8006200:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	4a1d      	ldr	r2, [pc, #116]	; (800627c <TIM_OC3_SetConfig+0xd0>)
 8006206:	4293      	cmp	r3, r2
 8006208:	d10d      	bne.n	8006226 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800620a:	697b      	ldr	r3, [r7, #20]
 800620c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006210:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006212:	683b      	ldr	r3, [r7, #0]
 8006214:	68db      	ldr	r3, [r3, #12]
 8006216:	021b      	lsls	r3, r3, #8
 8006218:	697a      	ldr	r2, [r7, #20]
 800621a:	4313      	orrs	r3, r2
 800621c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800621e:	697b      	ldr	r3, [r7, #20]
 8006220:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006224:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	4a14      	ldr	r2, [pc, #80]	; (800627c <TIM_OC3_SetConfig+0xd0>)
 800622a:	4293      	cmp	r3, r2
 800622c:	d113      	bne.n	8006256 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800622e:	693b      	ldr	r3, [r7, #16]
 8006230:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006234:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006236:	693b      	ldr	r3, [r7, #16]
 8006238:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800623c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800623e:	683b      	ldr	r3, [r7, #0]
 8006240:	695b      	ldr	r3, [r3, #20]
 8006242:	011b      	lsls	r3, r3, #4
 8006244:	693a      	ldr	r2, [r7, #16]
 8006246:	4313      	orrs	r3, r2
 8006248:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800624a:	683b      	ldr	r3, [r7, #0]
 800624c:	699b      	ldr	r3, [r3, #24]
 800624e:	011b      	lsls	r3, r3, #4
 8006250:	693a      	ldr	r2, [r7, #16]
 8006252:	4313      	orrs	r3, r2
 8006254:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	693a      	ldr	r2, [r7, #16]
 800625a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	68fa      	ldr	r2, [r7, #12]
 8006260:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006262:	683b      	ldr	r3, [r7, #0]
 8006264:	685a      	ldr	r2, [r3, #4]
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	697a      	ldr	r2, [r7, #20]
 800626e:	621a      	str	r2, [r3, #32]
}
 8006270:	bf00      	nop
 8006272:	371c      	adds	r7, #28
 8006274:	46bd      	mov	sp, r7
 8006276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800627a:	4770      	bx	lr
 800627c:	40010000 	.word	0x40010000

08006280 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006280:	b480      	push	{r7}
 8006282:	b087      	sub	sp, #28
 8006284:	af00      	add	r7, sp, #0
 8006286:	6078      	str	r0, [r7, #4]
 8006288:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	6a1b      	ldr	r3, [r3, #32]
 800628e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	6a1b      	ldr	r3, [r3, #32]
 800629a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	685b      	ldr	r3, [r3, #4]
 80062a0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	69db      	ldr	r3, [r3, #28]
 80062a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80062ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80062b6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80062b8:	683b      	ldr	r3, [r7, #0]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	021b      	lsls	r3, r3, #8
 80062be:	68fa      	ldr	r2, [r7, #12]
 80062c0:	4313      	orrs	r3, r2
 80062c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80062c4:	693b      	ldr	r3, [r7, #16]
 80062c6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80062ca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80062cc:	683b      	ldr	r3, [r7, #0]
 80062ce:	689b      	ldr	r3, [r3, #8]
 80062d0:	031b      	lsls	r3, r3, #12
 80062d2:	693a      	ldr	r2, [r7, #16]
 80062d4:	4313      	orrs	r3, r2
 80062d6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	4a10      	ldr	r2, [pc, #64]	; (800631c <TIM_OC4_SetConfig+0x9c>)
 80062dc:	4293      	cmp	r3, r2
 80062de:	d109      	bne.n	80062f4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80062e0:	697b      	ldr	r3, [r7, #20]
 80062e2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80062e6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80062e8:	683b      	ldr	r3, [r7, #0]
 80062ea:	695b      	ldr	r3, [r3, #20]
 80062ec:	019b      	lsls	r3, r3, #6
 80062ee:	697a      	ldr	r2, [r7, #20]
 80062f0:	4313      	orrs	r3, r2
 80062f2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	697a      	ldr	r2, [r7, #20]
 80062f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	68fa      	ldr	r2, [r7, #12]
 80062fe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006300:	683b      	ldr	r3, [r7, #0]
 8006302:	685a      	ldr	r2, [r3, #4]
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	693a      	ldr	r2, [r7, #16]
 800630c:	621a      	str	r2, [r3, #32]
}
 800630e:	bf00      	nop
 8006310:	371c      	adds	r7, #28
 8006312:	46bd      	mov	sp, r7
 8006314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006318:	4770      	bx	lr
 800631a:	bf00      	nop
 800631c:	40010000 	.word	0x40010000

08006320 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006320:	b480      	push	{r7}
 8006322:	b087      	sub	sp, #28
 8006324:	af00      	add	r7, sp, #0
 8006326:	60f8      	str	r0, [r7, #12]
 8006328:	60b9      	str	r1, [r7, #8]
 800632a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	6a1b      	ldr	r3, [r3, #32]
 8006330:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	6a1b      	ldr	r3, [r3, #32]
 8006336:	f023 0201 	bic.w	r2, r3, #1
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	699b      	ldr	r3, [r3, #24]
 8006342:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006344:	693b      	ldr	r3, [r7, #16]
 8006346:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800634a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	011b      	lsls	r3, r3, #4
 8006350:	693a      	ldr	r2, [r7, #16]
 8006352:	4313      	orrs	r3, r2
 8006354:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006356:	697b      	ldr	r3, [r7, #20]
 8006358:	f023 030a 	bic.w	r3, r3, #10
 800635c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800635e:	697a      	ldr	r2, [r7, #20]
 8006360:	68bb      	ldr	r3, [r7, #8]
 8006362:	4313      	orrs	r3, r2
 8006364:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	693a      	ldr	r2, [r7, #16]
 800636a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	697a      	ldr	r2, [r7, #20]
 8006370:	621a      	str	r2, [r3, #32]
}
 8006372:	bf00      	nop
 8006374:	371c      	adds	r7, #28
 8006376:	46bd      	mov	sp, r7
 8006378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637c:	4770      	bx	lr

0800637e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800637e:	b480      	push	{r7}
 8006380:	b087      	sub	sp, #28
 8006382:	af00      	add	r7, sp, #0
 8006384:	60f8      	str	r0, [r7, #12]
 8006386:	60b9      	str	r1, [r7, #8]
 8006388:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	6a1b      	ldr	r3, [r3, #32]
 800638e:	f023 0210 	bic.w	r2, r3, #16
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	699b      	ldr	r3, [r3, #24]
 800639a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	6a1b      	ldr	r3, [r3, #32]
 80063a0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80063a2:	697b      	ldr	r3, [r7, #20]
 80063a4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80063a8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	031b      	lsls	r3, r3, #12
 80063ae:	697a      	ldr	r2, [r7, #20]
 80063b0:	4313      	orrs	r3, r2
 80063b2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80063b4:	693b      	ldr	r3, [r7, #16]
 80063b6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80063ba:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80063bc:	68bb      	ldr	r3, [r7, #8]
 80063be:	011b      	lsls	r3, r3, #4
 80063c0:	693a      	ldr	r2, [r7, #16]
 80063c2:	4313      	orrs	r3, r2
 80063c4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	697a      	ldr	r2, [r7, #20]
 80063ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	693a      	ldr	r2, [r7, #16]
 80063d0:	621a      	str	r2, [r3, #32]
}
 80063d2:	bf00      	nop
 80063d4:	371c      	adds	r7, #28
 80063d6:	46bd      	mov	sp, r7
 80063d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063dc:	4770      	bx	lr

080063de <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80063de:	b480      	push	{r7}
 80063e0:	b085      	sub	sp, #20
 80063e2:	af00      	add	r7, sp, #0
 80063e4:	6078      	str	r0, [r7, #4]
 80063e6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	689b      	ldr	r3, [r3, #8]
 80063ec:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063f4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80063f6:	683a      	ldr	r2, [r7, #0]
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	4313      	orrs	r3, r2
 80063fc:	f043 0307 	orr.w	r3, r3, #7
 8006400:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	68fa      	ldr	r2, [r7, #12]
 8006406:	609a      	str	r2, [r3, #8]
}
 8006408:	bf00      	nop
 800640a:	3714      	adds	r7, #20
 800640c:	46bd      	mov	sp, r7
 800640e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006412:	4770      	bx	lr

08006414 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006414:	b480      	push	{r7}
 8006416:	b087      	sub	sp, #28
 8006418:	af00      	add	r7, sp, #0
 800641a:	60f8      	str	r0, [r7, #12]
 800641c:	60b9      	str	r1, [r7, #8]
 800641e:	607a      	str	r2, [r7, #4]
 8006420:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	689b      	ldr	r3, [r3, #8]
 8006426:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006428:	697b      	ldr	r3, [r7, #20]
 800642a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800642e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006430:	683b      	ldr	r3, [r7, #0]
 8006432:	021a      	lsls	r2, r3, #8
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	431a      	orrs	r2, r3
 8006438:	68bb      	ldr	r3, [r7, #8]
 800643a:	4313      	orrs	r3, r2
 800643c:	697a      	ldr	r2, [r7, #20]
 800643e:	4313      	orrs	r3, r2
 8006440:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	697a      	ldr	r2, [r7, #20]
 8006446:	609a      	str	r2, [r3, #8]
}
 8006448:	bf00      	nop
 800644a:	371c      	adds	r7, #28
 800644c:	46bd      	mov	sp, r7
 800644e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006452:	4770      	bx	lr

08006454 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006454:	b480      	push	{r7}
 8006456:	b087      	sub	sp, #28
 8006458:	af00      	add	r7, sp, #0
 800645a:	60f8      	str	r0, [r7, #12]
 800645c:	60b9      	str	r1, [r7, #8]
 800645e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006460:	68bb      	ldr	r3, [r7, #8]
 8006462:	f003 031f 	and.w	r3, r3, #31
 8006466:	2201      	movs	r2, #1
 8006468:	fa02 f303 	lsl.w	r3, r2, r3
 800646c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	6a1a      	ldr	r2, [r3, #32]
 8006472:	697b      	ldr	r3, [r7, #20]
 8006474:	43db      	mvns	r3, r3
 8006476:	401a      	ands	r2, r3
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	6a1a      	ldr	r2, [r3, #32]
 8006480:	68bb      	ldr	r3, [r7, #8]
 8006482:	f003 031f 	and.w	r3, r3, #31
 8006486:	6879      	ldr	r1, [r7, #4]
 8006488:	fa01 f303 	lsl.w	r3, r1, r3
 800648c:	431a      	orrs	r2, r3
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	621a      	str	r2, [r3, #32]
}
 8006492:	bf00      	nop
 8006494:	371c      	adds	r7, #28
 8006496:	46bd      	mov	sp, r7
 8006498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800649c:	4770      	bx	lr
	...

080064a0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80064a0:	b480      	push	{r7}
 80064a2:	b085      	sub	sp, #20
 80064a4:	af00      	add	r7, sp, #0
 80064a6:	6078      	str	r0, [r7, #4]
 80064a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80064b0:	2b01      	cmp	r3, #1
 80064b2:	d101      	bne.n	80064b8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80064b4:	2302      	movs	r3, #2
 80064b6:	e050      	b.n	800655a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	2201      	movs	r2, #1
 80064bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	2202      	movs	r2, #2
 80064c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	685b      	ldr	r3, [r3, #4]
 80064ce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	689b      	ldr	r3, [r3, #8]
 80064d6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064de:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80064e0:	683b      	ldr	r3, [r7, #0]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	68fa      	ldr	r2, [r7, #12]
 80064e6:	4313      	orrs	r3, r2
 80064e8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	68fa      	ldr	r2, [r7, #12]
 80064f0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	4a1c      	ldr	r2, [pc, #112]	; (8006568 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80064f8:	4293      	cmp	r3, r2
 80064fa:	d018      	beq.n	800652e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006504:	d013      	beq.n	800652e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	4a18      	ldr	r2, [pc, #96]	; (800656c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800650c:	4293      	cmp	r3, r2
 800650e:	d00e      	beq.n	800652e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	4a16      	ldr	r2, [pc, #88]	; (8006570 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006516:	4293      	cmp	r3, r2
 8006518:	d009      	beq.n	800652e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	4a15      	ldr	r2, [pc, #84]	; (8006574 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006520:	4293      	cmp	r3, r2
 8006522:	d004      	beq.n	800652e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	4a13      	ldr	r2, [pc, #76]	; (8006578 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800652a:	4293      	cmp	r3, r2
 800652c:	d10c      	bne.n	8006548 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800652e:	68bb      	ldr	r3, [r7, #8]
 8006530:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006534:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006536:	683b      	ldr	r3, [r7, #0]
 8006538:	685b      	ldr	r3, [r3, #4]
 800653a:	68ba      	ldr	r2, [r7, #8]
 800653c:	4313      	orrs	r3, r2
 800653e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	68ba      	ldr	r2, [r7, #8]
 8006546:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	2201      	movs	r2, #1
 800654c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	2200      	movs	r2, #0
 8006554:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006558:	2300      	movs	r3, #0
}
 800655a:	4618      	mov	r0, r3
 800655c:	3714      	adds	r7, #20
 800655e:	46bd      	mov	sp, r7
 8006560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006564:	4770      	bx	lr
 8006566:	bf00      	nop
 8006568:	40010000 	.word	0x40010000
 800656c:	40000400 	.word	0x40000400
 8006570:	40000800 	.word	0x40000800
 8006574:	40000c00 	.word	0x40000c00
 8006578:	40014000 	.word	0x40014000

0800657c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800657c:	b480      	push	{r7}
 800657e:	b083      	sub	sp, #12
 8006580:	af00      	add	r7, sp, #0
 8006582:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006584:	bf00      	nop
 8006586:	370c      	adds	r7, #12
 8006588:	46bd      	mov	sp, r7
 800658a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800658e:	4770      	bx	lr

08006590 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006590:	b480      	push	{r7}
 8006592:	b083      	sub	sp, #12
 8006594:	af00      	add	r7, sp, #0
 8006596:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006598:	bf00      	nop
 800659a:	370c      	adds	r7, #12
 800659c:	46bd      	mov	sp, r7
 800659e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a2:	4770      	bx	lr

080065a4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80065a4:	b580      	push	{r7, lr}
 80065a6:	b082      	sub	sp, #8
 80065a8:	af00      	add	r7, sp, #0
 80065aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d101      	bne.n	80065b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80065b2:	2301      	movs	r3, #1
 80065b4:	e03f      	b.n	8006636 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80065bc:	b2db      	uxtb	r3, r3
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d106      	bne.n	80065d0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	2200      	movs	r2, #0
 80065c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80065ca:	6878      	ldr	r0, [r7, #4]
 80065cc:	f7fc fe9c 	bl	8003308 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	2224      	movs	r2, #36	; 0x24
 80065d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	68da      	ldr	r2, [r3, #12]
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80065e6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80065e8:	6878      	ldr	r0, [r7, #4]
 80065ea:	f000 ff43 	bl	8007474 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	691a      	ldr	r2, [r3, #16]
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80065fc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	695a      	ldr	r2, [r3, #20]
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800660c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	68da      	ldr	r2, [r3, #12]
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800661c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	2200      	movs	r2, #0
 8006622:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	2220      	movs	r2, #32
 8006628:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	2220      	movs	r2, #32
 8006630:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006634:	2300      	movs	r3, #0
}
 8006636:	4618      	mov	r0, r3
 8006638:	3708      	adds	r7, #8
 800663a:	46bd      	mov	sp, r7
 800663c:	bd80      	pop	{r7, pc}
	...

08006640 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8006640:	b580      	push	{r7, lr}
 8006642:	b08c      	sub	sp, #48	; 0x30
 8006644:	af00      	add	r7, sp, #0
 8006646:	60f8      	str	r0, [r7, #12]
 8006648:	60b9      	str	r1, [r7, #8]
 800664a:	4613      	mov	r3, r2
 800664c:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006654:	b2db      	uxtb	r3, r3
 8006656:	2b20      	cmp	r3, #32
 8006658:	d165      	bne.n	8006726 <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 800665a:	68bb      	ldr	r3, [r7, #8]
 800665c:	2b00      	cmp	r3, #0
 800665e:	d002      	beq.n	8006666 <HAL_UART_Transmit_DMA+0x26>
 8006660:	88fb      	ldrh	r3, [r7, #6]
 8006662:	2b00      	cmp	r3, #0
 8006664:	d101      	bne.n	800666a <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8006666:	2301      	movs	r3, #1
 8006668:	e05e      	b.n	8006728 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006670:	2b01      	cmp	r3, #1
 8006672:	d101      	bne.n	8006678 <HAL_UART_Transmit_DMA+0x38>
 8006674:	2302      	movs	r3, #2
 8006676:	e057      	b.n	8006728 <HAL_UART_Transmit_DMA+0xe8>
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	2201      	movs	r2, #1
 800667c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8006680:	68ba      	ldr	r2, [r7, #8]
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	88fa      	ldrh	r2, [r7, #6]
 800668a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	88fa      	ldrh	r2, [r7, #6]
 8006690:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	2200      	movs	r2, #0
 8006696:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	2221      	movs	r2, #33	; 0x21
 800669c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066a4:	4a22      	ldr	r2, [pc, #136]	; (8006730 <HAL_UART_Transmit_DMA+0xf0>)
 80066a6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066ac:	4a21      	ldr	r2, [pc, #132]	; (8006734 <HAL_UART_Transmit_DMA+0xf4>)
 80066ae:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066b4:	4a20      	ldr	r2, [pc, #128]	; (8006738 <HAL_UART_Transmit_DMA+0xf8>)
 80066b6:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066bc:	2200      	movs	r2, #0
 80066be:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 80066c0:	f107 0308 	add.w	r3, r7, #8
 80066c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80066ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066cc:	6819      	ldr	r1, [r3, #0]
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	3304      	adds	r3, #4
 80066d4:	461a      	mov	r2, r3
 80066d6:	88fb      	ldrh	r3, [r7, #6]
 80066d8:	f7fd fe0a 	bl	80042f0 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80066e4:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	2200      	movs	r2, #0
 80066ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	3314      	adds	r3, #20
 80066f4:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066f6:	69bb      	ldr	r3, [r7, #24]
 80066f8:	e853 3f00 	ldrex	r3, [r3]
 80066fc:	617b      	str	r3, [r7, #20]
   return(result);
 80066fe:	697b      	ldr	r3, [r7, #20]
 8006700:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006704:	62bb      	str	r3, [r7, #40]	; 0x28
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	3314      	adds	r3, #20
 800670c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800670e:	627a      	str	r2, [r7, #36]	; 0x24
 8006710:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006712:	6a39      	ldr	r1, [r7, #32]
 8006714:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006716:	e841 2300 	strex	r3, r2, [r1]
 800671a:	61fb      	str	r3, [r7, #28]
   return(result);
 800671c:	69fb      	ldr	r3, [r7, #28]
 800671e:	2b00      	cmp	r3, #0
 8006720:	d1e5      	bne.n	80066ee <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 8006722:	2300      	movs	r3, #0
 8006724:	e000      	b.n	8006728 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 8006726:	2302      	movs	r3, #2
  }
}
 8006728:	4618      	mov	r0, r3
 800672a:	3730      	adds	r7, #48	; 0x30
 800672c:	46bd      	mov	sp, r7
 800672e:	bd80      	pop	{r7, pc}
 8006730:	08006d0d 	.word	0x08006d0d
 8006734:	08006da7 	.word	0x08006da7
 8006738:	08006f1f 	.word	0x08006f1f

0800673c <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800673c:	b580      	push	{r7, lr}
 800673e:	b084      	sub	sp, #16
 8006740:	af00      	add	r7, sp, #0
 8006742:	60f8      	str	r0, [r7, #12]
 8006744:	60b9      	str	r1, [r7, #8]
 8006746:	4613      	mov	r3, r2
 8006748:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006750:	b2db      	uxtb	r3, r3
 8006752:	2b20      	cmp	r3, #32
 8006754:	d11d      	bne.n	8006792 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8006756:	68bb      	ldr	r3, [r7, #8]
 8006758:	2b00      	cmp	r3, #0
 800675a:	d002      	beq.n	8006762 <HAL_UART_Receive_DMA+0x26>
 800675c:	88fb      	ldrh	r3, [r7, #6]
 800675e:	2b00      	cmp	r3, #0
 8006760:	d101      	bne.n	8006766 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8006762:	2301      	movs	r3, #1
 8006764:	e016      	b.n	8006794 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800676c:	2b01      	cmp	r3, #1
 800676e:	d101      	bne.n	8006774 <HAL_UART_Receive_DMA+0x38>
 8006770:	2302      	movs	r3, #2
 8006772:	e00f      	b.n	8006794 <HAL_UART_Receive_DMA+0x58>
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	2201      	movs	r2, #1
 8006778:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	2200      	movs	r2, #0
 8006780:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8006782:	88fb      	ldrh	r3, [r7, #6]
 8006784:	461a      	mov	r2, r3
 8006786:	68b9      	ldr	r1, [r7, #8]
 8006788:	68f8      	ldr	r0, [r7, #12]
 800678a:	f000 fc13 	bl	8006fb4 <UART_Start_Receive_DMA>
 800678e:	4603      	mov	r3, r0
 8006790:	e000      	b.n	8006794 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8006792:	2302      	movs	r3, #2
  }
}
 8006794:	4618      	mov	r0, r3
 8006796:	3710      	adds	r7, #16
 8006798:	46bd      	mov	sp, r7
 800679a:	bd80      	pop	{r7, pc}

0800679c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800679c:	b580      	push	{r7, lr}
 800679e:	b0ba      	sub	sp, #232	; 0xe8
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	68db      	ldr	r3, [r3, #12]
 80067b4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	695b      	ldr	r3, [r3, #20]
 80067be:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80067c2:	2300      	movs	r3, #0
 80067c4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80067c8:	2300      	movs	r3, #0
 80067ca:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80067ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80067d2:	f003 030f 	and.w	r3, r3, #15
 80067d6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80067da:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d10f      	bne.n	8006802 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80067e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80067e6:	f003 0320 	and.w	r3, r3, #32
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d009      	beq.n	8006802 <HAL_UART_IRQHandler+0x66>
 80067ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80067f2:	f003 0320 	and.w	r3, r3, #32
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d003      	beq.n	8006802 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80067fa:	6878      	ldr	r0, [r7, #4]
 80067fc:	f000 fd7f 	bl	80072fe <UART_Receive_IT>
      return;
 8006800:	e256      	b.n	8006cb0 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006802:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006806:	2b00      	cmp	r3, #0
 8006808:	f000 80de 	beq.w	80069c8 <HAL_UART_IRQHandler+0x22c>
 800680c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006810:	f003 0301 	and.w	r3, r3, #1
 8006814:	2b00      	cmp	r3, #0
 8006816:	d106      	bne.n	8006826 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006818:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800681c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006820:	2b00      	cmp	r3, #0
 8006822:	f000 80d1 	beq.w	80069c8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006826:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800682a:	f003 0301 	and.w	r3, r3, #1
 800682e:	2b00      	cmp	r3, #0
 8006830:	d00b      	beq.n	800684a <HAL_UART_IRQHandler+0xae>
 8006832:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006836:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800683a:	2b00      	cmp	r3, #0
 800683c:	d005      	beq.n	800684a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006842:	f043 0201 	orr.w	r2, r3, #1
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800684a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800684e:	f003 0304 	and.w	r3, r3, #4
 8006852:	2b00      	cmp	r3, #0
 8006854:	d00b      	beq.n	800686e <HAL_UART_IRQHandler+0xd2>
 8006856:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800685a:	f003 0301 	and.w	r3, r3, #1
 800685e:	2b00      	cmp	r3, #0
 8006860:	d005      	beq.n	800686e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006866:	f043 0202 	orr.w	r2, r3, #2
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800686e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006872:	f003 0302 	and.w	r3, r3, #2
 8006876:	2b00      	cmp	r3, #0
 8006878:	d00b      	beq.n	8006892 <HAL_UART_IRQHandler+0xf6>
 800687a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800687e:	f003 0301 	and.w	r3, r3, #1
 8006882:	2b00      	cmp	r3, #0
 8006884:	d005      	beq.n	8006892 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800688a:	f043 0204 	orr.w	r2, r3, #4
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006892:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006896:	f003 0308 	and.w	r3, r3, #8
 800689a:	2b00      	cmp	r3, #0
 800689c:	d011      	beq.n	80068c2 <HAL_UART_IRQHandler+0x126>
 800689e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80068a2:	f003 0320 	and.w	r3, r3, #32
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d105      	bne.n	80068b6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80068aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80068ae:	f003 0301 	and.w	r3, r3, #1
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d005      	beq.n	80068c2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068ba:	f043 0208 	orr.w	r2, r3, #8
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	f000 81ed 	beq.w	8006ca6 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80068cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80068d0:	f003 0320 	and.w	r3, r3, #32
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d008      	beq.n	80068ea <HAL_UART_IRQHandler+0x14e>
 80068d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80068dc:	f003 0320 	and.w	r3, r3, #32
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d002      	beq.n	80068ea <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80068e4:	6878      	ldr	r0, [r7, #4]
 80068e6:	f000 fd0a 	bl	80072fe <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	695b      	ldr	r3, [r3, #20]
 80068f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068f4:	2b40      	cmp	r3, #64	; 0x40
 80068f6:	bf0c      	ite	eq
 80068f8:	2301      	moveq	r3, #1
 80068fa:	2300      	movne	r3, #0
 80068fc:	b2db      	uxtb	r3, r3
 80068fe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006906:	f003 0308 	and.w	r3, r3, #8
 800690a:	2b00      	cmp	r3, #0
 800690c:	d103      	bne.n	8006916 <HAL_UART_IRQHandler+0x17a>
 800690e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006912:	2b00      	cmp	r3, #0
 8006914:	d04f      	beq.n	80069b6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006916:	6878      	ldr	r0, [r7, #4]
 8006918:	f000 fc12 	bl	8007140 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	695b      	ldr	r3, [r3, #20]
 8006922:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006926:	2b40      	cmp	r3, #64	; 0x40
 8006928:	d141      	bne.n	80069ae <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	3314      	adds	r3, #20
 8006930:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006934:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006938:	e853 3f00 	ldrex	r3, [r3]
 800693c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006940:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006944:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006948:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	3314      	adds	r3, #20
 8006952:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006956:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800695a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800695e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006962:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006966:	e841 2300 	strex	r3, r2, [r1]
 800696a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800696e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006972:	2b00      	cmp	r3, #0
 8006974:	d1d9      	bne.n	800692a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800697a:	2b00      	cmp	r3, #0
 800697c:	d013      	beq.n	80069a6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006982:	4a7d      	ldr	r2, [pc, #500]	; (8006b78 <HAL_UART_IRQHandler+0x3dc>)
 8006984:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800698a:	4618      	mov	r0, r3
 800698c:	f7fd fd78 	bl	8004480 <HAL_DMA_Abort_IT>
 8006990:	4603      	mov	r3, r0
 8006992:	2b00      	cmp	r3, #0
 8006994:	d016      	beq.n	80069c4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800699a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800699c:	687a      	ldr	r2, [r7, #4]
 800699e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80069a0:	4610      	mov	r0, r2
 80069a2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80069a4:	e00e      	b.n	80069c4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80069a6:	6878      	ldr	r0, [r7, #4]
 80069a8:	f000 f99a 	bl	8006ce0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80069ac:	e00a      	b.n	80069c4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80069ae:	6878      	ldr	r0, [r7, #4]
 80069b0:	f000 f996 	bl	8006ce0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80069b4:	e006      	b.n	80069c4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80069b6:	6878      	ldr	r0, [r7, #4]
 80069b8:	f000 f992 	bl	8006ce0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	2200      	movs	r2, #0
 80069c0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80069c2:	e170      	b.n	8006ca6 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80069c4:	bf00      	nop
    return;
 80069c6:	e16e      	b.n	8006ca6 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069cc:	2b01      	cmp	r3, #1
 80069ce:	f040 814a 	bne.w	8006c66 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80069d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80069d6:	f003 0310 	and.w	r3, r3, #16
 80069da:	2b00      	cmp	r3, #0
 80069dc:	f000 8143 	beq.w	8006c66 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80069e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80069e4:	f003 0310 	and.w	r3, r3, #16
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	f000 813c 	beq.w	8006c66 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80069ee:	2300      	movs	r3, #0
 80069f0:	60bb      	str	r3, [r7, #8]
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	60bb      	str	r3, [r7, #8]
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	685b      	ldr	r3, [r3, #4]
 8006a00:	60bb      	str	r3, [r7, #8]
 8006a02:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	695b      	ldr	r3, [r3, #20]
 8006a0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a0e:	2b40      	cmp	r3, #64	; 0x40
 8006a10:	f040 80b4 	bne.w	8006b7c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	685b      	ldr	r3, [r3, #4]
 8006a1c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006a20:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	f000 8140 	beq.w	8006caa <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006a2e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006a32:	429a      	cmp	r2, r3
 8006a34:	f080 8139 	bcs.w	8006caa <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006a3e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a44:	69db      	ldr	r3, [r3, #28]
 8006a46:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006a4a:	f000 8088 	beq.w	8006b5e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	330c      	adds	r3, #12
 8006a54:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a58:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006a5c:	e853 3f00 	ldrex	r3, [r3]
 8006a60:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006a64:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006a68:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006a6c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	330c      	adds	r3, #12
 8006a76:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8006a7a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006a7e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a82:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006a86:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006a8a:	e841 2300 	strex	r3, r2, [r1]
 8006a8e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006a92:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d1d9      	bne.n	8006a4e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	3314      	adds	r3, #20
 8006aa0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006aa2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006aa4:	e853 3f00 	ldrex	r3, [r3]
 8006aa8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006aaa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006aac:	f023 0301 	bic.w	r3, r3, #1
 8006ab0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	3314      	adds	r3, #20
 8006aba:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006abe:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006ac2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ac4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006ac6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006aca:	e841 2300 	strex	r3, r2, [r1]
 8006ace:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006ad0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d1e1      	bne.n	8006a9a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	3314      	adds	r3, #20
 8006adc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ade:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006ae0:	e853 3f00 	ldrex	r3, [r3]
 8006ae4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006ae6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006ae8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006aec:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	3314      	adds	r3, #20
 8006af6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006afa:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006afc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006afe:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006b00:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006b02:	e841 2300 	strex	r3, r2, [r1]
 8006b06:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006b08:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d1e3      	bne.n	8006ad6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	2220      	movs	r2, #32
 8006b12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	2200      	movs	r2, #0
 8006b1a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	330c      	adds	r3, #12
 8006b22:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b26:	e853 3f00 	ldrex	r3, [r3]
 8006b2a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006b2c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006b2e:	f023 0310 	bic.w	r3, r3, #16
 8006b32:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	330c      	adds	r3, #12
 8006b3c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006b40:	65ba      	str	r2, [r7, #88]	; 0x58
 8006b42:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b44:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006b46:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006b48:	e841 2300 	strex	r3, r2, [r1]
 8006b4c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006b4e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d1e3      	bne.n	8006b1c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b58:	4618      	mov	r0, r3
 8006b5a:	f7fd fc21 	bl	80043a0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006b66:	b29b      	uxth	r3, r3
 8006b68:	1ad3      	subs	r3, r2, r3
 8006b6a:	b29b      	uxth	r3, r3
 8006b6c:	4619      	mov	r1, r3
 8006b6e:	6878      	ldr	r0, [r7, #4]
 8006b70:	f000 f8c0 	bl	8006cf4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006b74:	e099      	b.n	8006caa <HAL_UART_IRQHandler+0x50e>
 8006b76:	bf00      	nop
 8006b78:	08007207 	.word	0x08007207
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006b84:	b29b      	uxth	r3, r3
 8006b86:	1ad3      	subs	r3, r2, r3
 8006b88:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006b90:	b29b      	uxth	r3, r3
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	f000 808b 	beq.w	8006cae <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8006b98:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	f000 8086 	beq.w	8006cae <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	330c      	adds	r3, #12
 8006ba8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006baa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bac:	e853 3f00 	ldrex	r3, [r3]
 8006bb0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006bb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bb4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006bb8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	330c      	adds	r3, #12
 8006bc2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8006bc6:	647a      	str	r2, [r7, #68]	; 0x44
 8006bc8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bca:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006bcc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006bce:	e841 2300 	strex	r3, r2, [r1]
 8006bd2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006bd4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d1e3      	bne.n	8006ba2 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	3314      	adds	r3, #20
 8006be0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006be4:	e853 3f00 	ldrex	r3, [r3]
 8006be8:	623b      	str	r3, [r7, #32]
   return(result);
 8006bea:	6a3b      	ldr	r3, [r7, #32]
 8006bec:	f023 0301 	bic.w	r3, r3, #1
 8006bf0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	3314      	adds	r3, #20
 8006bfa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006bfe:	633a      	str	r2, [r7, #48]	; 0x30
 8006c00:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c02:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006c04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006c06:	e841 2300 	strex	r3, r2, [r1]
 8006c0a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006c0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d1e3      	bne.n	8006bda <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	2220      	movs	r2, #32
 8006c16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	2200      	movs	r2, #0
 8006c1e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	330c      	adds	r3, #12
 8006c26:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c28:	693b      	ldr	r3, [r7, #16]
 8006c2a:	e853 3f00 	ldrex	r3, [r3]
 8006c2e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	f023 0310 	bic.w	r3, r3, #16
 8006c36:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	330c      	adds	r3, #12
 8006c40:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006c44:	61fa      	str	r2, [r7, #28]
 8006c46:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c48:	69b9      	ldr	r1, [r7, #24]
 8006c4a:	69fa      	ldr	r2, [r7, #28]
 8006c4c:	e841 2300 	strex	r3, r2, [r1]
 8006c50:	617b      	str	r3, [r7, #20]
   return(result);
 8006c52:	697b      	ldr	r3, [r7, #20]
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d1e3      	bne.n	8006c20 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006c58:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006c5c:	4619      	mov	r1, r3
 8006c5e:	6878      	ldr	r0, [r7, #4]
 8006c60:	f000 f848 	bl	8006cf4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006c64:	e023      	b.n	8006cae <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006c66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d009      	beq.n	8006c86 <HAL_UART_IRQHandler+0x4ea>
 8006c72:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d003      	beq.n	8006c86 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8006c7e:	6878      	ldr	r0, [r7, #4]
 8006c80:	f000 fad5 	bl	800722e <UART_Transmit_IT>
    return;
 8006c84:	e014      	b.n	8006cb0 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006c86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d00e      	beq.n	8006cb0 <HAL_UART_IRQHandler+0x514>
 8006c92:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d008      	beq.n	8006cb0 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8006c9e:	6878      	ldr	r0, [r7, #4]
 8006ca0:	f000 fb15 	bl	80072ce <UART_EndTransmit_IT>
    return;
 8006ca4:	e004      	b.n	8006cb0 <HAL_UART_IRQHandler+0x514>
    return;
 8006ca6:	bf00      	nop
 8006ca8:	e002      	b.n	8006cb0 <HAL_UART_IRQHandler+0x514>
      return;
 8006caa:	bf00      	nop
 8006cac:	e000      	b.n	8006cb0 <HAL_UART_IRQHandler+0x514>
      return;
 8006cae:	bf00      	nop
  }
}
 8006cb0:	37e8      	adds	r7, #232	; 0xe8
 8006cb2:	46bd      	mov	sp, r7
 8006cb4:	bd80      	pop	{r7, pc}
 8006cb6:	bf00      	nop

08006cb8 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006cb8:	b480      	push	{r7}
 8006cba:	b083      	sub	sp, #12
 8006cbc:	af00      	add	r7, sp, #0
 8006cbe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8006cc0:	bf00      	nop
 8006cc2:	370c      	adds	r7, #12
 8006cc4:	46bd      	mov	sp, r7
 8006cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cca:	4770      	bx	lr

08006ccc <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006ccc:	b480      	push	{r7}
 8006cce:	b083      	sub	sp, #12
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8006cd4:	bf00      	nop
 8006cd6:	370c      	adds	r7, #12
 8006cd8:	46bd      	mov	sp, r7
 8006cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cde:	4770      	bx	lr

08006ce0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006ce0:	b480      	push	{r7}
 8006ce2:	b083      	sub	sp, #12
 8006ce4:	af00      	add	r7, sp, #0
 8006ce6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006ce8:	bf00      	nop
 8006cea:	370c      	adds	r7, #12
 8006cec:	46bd      	mov	sp, r7
 8006cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf2:	4770      	bx	lr

08006cf4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006cf4:	b480      	push	{r7}
 8006cf6:	b083      	sub	sp, #12
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	6078      	str	r0, [r7, #4]
 8006cfc:	460b      	mov	r3, r1
 8006cfe:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006d00:	bf00      	nop
 8006d02:	370c      	adds	r7, #12
 8006d04:	46bd      	mov	sp, r7
 8006d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d0a:	4770      	bx	lr

08006d0c <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006d0c:	b580      	push	{r7, lr}
 8006d0e:	b090      	sub	sp, #64	; 0x40
 8006d10:	af00      	add	r7, sp, #0
 8006d12:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d18:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d137      	bne.n	8006d98 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8006d28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d2a:	2200      	movs	r2, #0
 8006d2c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006d2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	3314      	adds	r3, #20
 8006d34:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d38:	e853 3f00 	ldrex	r3, [r3]
 8006d3c:	623b      	str	r3, [r7, #32]
   return(result);
 8006d3e:	6a3b      	ldr	r3, [r7, #32]
 8006d40:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006d44:	63bb      	str	r3, [r7, #56]	; 0x38
 8006d46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	3314      	adds	r3, #20
 8006d4c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006d4e:	633a      	str	r2, [r7, #48]	; 0x30
 8006d50:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d52:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006d54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006d56:	e841 2300 	strex	r3, r2, [r1]
 8006d5a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006d5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d1e5      	bne.n	8006d2e <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006d62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	330c      	adds	r3, #12
 8006d68:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d6a:	693b      	ldr	r3, [r7, #16]
 8006d6c:	e853 3f00 	ldrex	r3, [r3]
 8006d70:	60fb      	str	r3, [r7, #12]
   return(result);
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006d78:	637b      	str	r3, [r7, #52]	; 0x34
 8006d7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	330c      	adds	r3, #12
 8006d80:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006d82:	61fa      	str	r2, [r7, #28]
 8006d84:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d86:	69b9      	ldr	r1, [r7, #24]
 8006d88:	69fa      	ldr	r2, [r7, #28]
 8006d8a:	e841 2300 	strex	r3, r2, [r1]
 8006d8e:	617b      	str	r3, [r7, #20]
   return(result);
 8006d90:	697b      	ldr	r3, [r7, #20]
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d1e5      	bne.n	8006d62 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006d96:	e002      	b.n	8006d9e <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8006d98:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8006d9a:	f7fb faf1 	bl	8002380 <HAL_UART_TxCpltCallback>
}
 8006d9e:	bf00      	nop
 8006da0:	3740      	adds	r7, #64	; 0x40
 8006da2:	46bd      	mov	sp, r7
 8006da4:	bd80      	pop	{r7, pc}

08006da6 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006da6:	b580      	push	{r7, lr}
 8006da8:	b084      	sub	sp, #16
 8006daa:	af00      	add	r7, sp, #0
 8006dac:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006db2:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8006db4:	68f8      	ldr	r0, [r7, #12]
 8006db6:	f7ff ff7f 	bl	8006cb8 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006dba:	bf00      	nop
 8006dbc:	3710      	adds	r7, #16
 8006dbe:	46bd      	mov	sp, r7
 8006dc0:	bd80      	pop	{r7, pc}

08006dc2 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006dc2:	b580      	push	{r7, lr}
 8006dc4:	b09c      	sub	sp, #112	; 0x70
 8006dc6:	af00      	add	r7, sp, #0
 8006dc8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dce:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d172      	bne.n	8006ec4 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8006dde:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006de0:	2200      	movs	r2, #0
 8006de2:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006de4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	330c      	adds	r3, #12
 8006dea:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006dee:	e853 3f00 	ldrex	r3, [r3]
 8006df2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006df4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006df6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006dfa:	66bb      	str	r3, [r7, #104]	; 0x68
 8006dfc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	330c      	adds	r3, #12
 8006e02:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006e04:	65ba      	str	r2, [r7, #88]	; 0x58
 8006e06:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e08:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006e0a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006e0c:	e841 2300 	strex	r3, r2, [r1]
 8006e10:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006e12:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d1e5      	bne.n	8006de4 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	3314      	adds	r3, #20
 8006e1e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e22:	e853 3f00 	ldrex	r3, [r3]
 8006e26:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006e28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e2a:	f023 0301 	bic.w	r3, r3, #1
 8006e2e:	667b      	str	r3, [r7, #100]	; 0x64
 8006e30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	3314      	adds	r3, #20
 8006e36:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8006e38:	647a      	str	r2, [r7, #68]	; 0x44
 8006e3a:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e3c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006e3e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006e40:	e841 2300 	strex	r3, r2, [r1]
 8006e44:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006e46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d1e5      	bne.n	8006e18 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006e4c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	3314      	adds	r3, #20
 8006e52:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e56:	e853 3f00 	ldrex	r3, [r3]
 8006e5a:	623b      	str	r3, [r7, #32]
   return(result);
 8006e5c:	6a3b      	ldr	r3, [r7, #32]
 8006e5e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006e62:	663b      	str	r3, [r7, #96]	; 0x60
 8006e64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	3314      	adds	r3, #20
 8006e6a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006e6c:	633a      	str	r2, [r7, #48]	; 0x30
 8006e6e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e70:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006e72:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006e74:	e841 2300 	strex	r3, r2, [r1]
 8006e78:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006e7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d1e5      	bne.n	8006e4c <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006e80:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e82:	2220      	movs	r2, #32
 8006e84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e8c:	2b01      	cmp	r3, #1
 8006e8e:	d119      	bne.n	8006ec4 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	330c      	adds	r3, #12
 8006e96:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e98:	693b      	ldr	r3, [r7, #16]
 8006e9a:	e853 3f00 	ldrex	r3, [r3]
 8006e9e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	f023 0310 	bic.w	r3, r3, #16
 8006ea6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006ea8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	330c      	adds	r3, #12
 8006eae:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006eb0:	61fa      	str	r2, [r7, #28]
 8006eb2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006eb4:	69b9      	ldr	r1, [r7, #24]
 8006eb6:	69fa      	ldr	r2, [r7, #28]
 8006eb8:	e841 2300 	strex	r3, r2, [r1]
 8006ebc:	617b      	str	r3, [r7, #20]
   return(result);
 8006ebe:	697b      	ldr	r3, [r7, #20]
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d1e5      	bne.n	8006e90 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006ec4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ec6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ec8:	2b01      	cmp	r3, #1
 8006eca:	d106      	bne.n	8006eda <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006ecc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ece:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006ed0:	4619      	mov	r1, r3
 8006ed2:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8006ed4:	f7ff ff0e 	bl	8006cf4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006ed8:	e002      	b.n	8006ee0 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8006eda:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8006edc:	f7fb fa62 	bl	80023a4 <HAL_UART_RxCpltCallback>
}
 8006ee0:	bf00      	nop
 8006ee2:	3770      	adds	r7, #112	; 0x70
 8006ee4:	46bd      	mov	sp, r7
 8006ee6:	bd80      	pop	{r7, pc}

08006ee8 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006ee8:	b580      	push	{r7, lr}
 8006eea:	b084      	sub	sp, #16
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ef4:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006efa:	2b01      	cmp	r3, #1
 8006efc:	d108      	bne.n	8006f10 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006f02:	085b      	lsrs	r3, r3, #1
 8006f04:	b29b      	uxth	r3, r3
 8006f06:	4619      	mov	r1, r3
 8006f08:	68f8      	ldr	r0, [r7, #12]
 8006f0a:	f7ff fef3 	bl	8006cf4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006f0e:	e002      	b.n	8006f16 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8006f10:	68f8      	ldr	r0, [r7, #12]
 8006f12:	f7ff fedb 	bl	8006ccc <HAL_UART_RxHalfCpltCallback>
}
 8006f16:	bf00      	nop
 8006f18:	3710      	adds	r7, #16
 8006f1a:	46bd      	mov	sp, r7
 8006f1c:	bd80      	pop	{r7, pc}

08006f1e <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006f1e:	b580      	push	{r7, lr}
 8006f20:	b084      	sub	sp, #16
 8006f22:	af00      	add	r7, sp, #0
 8006f24:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8006f26:	2300      	movs	r3, #0
 8006f28:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f2e:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8006f30:	68bb      	ldr	r3, [r7, #8]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	695b      	ldr	r3, [r3, #20]
 8006f36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f3a:	2b80      	cmp	r3, #128	; 0x80
 8006f3c:	bf0c      	ite	eq
 8006f3e:	2301      	moveq	r3, #1
 8006f40:	2300      	movne	r3, #0
 8006f42:	b2db      	uxtb	r3, r3
 8006f44:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8006f46:	68bb      	ldr	r3, [r7, #8]
 8006f48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f4c:	b2db      	uxtb	r3, r3
 8006f4e:	2b21      	cmp	r3, #33	; 0x21
 8006f50:	d108      	bne.n	8006f64 <UART_DMAError+0x46>
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d005      	beq.n	8006f64 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8006f58:	68bb      	ldr	r3, [r7, #8]
 8006f5a:	2200      	movs	r2, #0
 8006f5c:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8006f5e:	68b8      	ldr	r0, [r7, #8]
 8006f60:	f000 f8c6 	bl	80070f0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006f64:	68bb      	ldr	r3, [r7, #8]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	695b      	ldr	r3, [r3, #20]
 8006f6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f6e:	2b40      	cmp	r3, #64	; 0x40
 8006f70:	bf0c      	ite	eq
 8006f72:	2301      	moveq	r3, #1
 8006f74:	2300      	movne	r3, #0
 8006f76:	b2db      	uxtb	r3, r3
 8006f78:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8006f7a:	68bb      	ldr	r3, [r7, #8]
 8006f7c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006f80:	b2db      	uxtb	r3, r3
 8006f82:	2b22      	cmp	r3, #34	; 0x22
 8006f84:	d108      	bne.n	8006f98 <UART_DMAError+0x7a>
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d005      	beq.n	8006f98 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8006f8c:	68bb      	ldr	r3, [r7, #8]
 8006f8e:	2200      	movs	r2, #0
 8006f90:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8006f92:	68b8      	ldr	r0, [r7, #8]
 8006f94:	f000 f8d4 	bl	8007140 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006f98:	68bb      	ldr	r3, [r7, #8]
 8006f9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f9c:	f043 0210 	orr.w	r2, r3, #16
 8006fa0:	68bb      	ldr	r3, [r7, #8]
 8006fa2:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006fa4:	68b8      	ldr	r0, [r7, #8]
 8006fa6:	f7ff fe9b 	bl	8006ce0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006faa:	bf00      	nop
 8006fac:	3710      	adds	r7, #16
 8006fae:	46bd      	mov	sp, r7
 8006fb0:	bd80      	pop	{r7, pc}
	...

08006fb4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006fb4:	b580      	push	{r7, lr}
 8006fb6:	b098      	sub	sp, #96	; 0x60
 8006fb8:	af00      	add	r7, sp, #0
 8006fba:	60f8      	str	r0, [r7, #12]
 8006fbc:	60b9      	str	r1, [r7, #8]
 8006fbe:	4613      	mov	r3, r2
 8006fc0:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8006fc2:	68ba      	ldr	r2, [r7, #8]
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	88fa      	ldrh	r2, [r7, #6]
 8006fcc:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	2200      	movs	r2, #0
 8006fd2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	2222      	movs	r2, #34	; 0x22
 8006fd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fe0:	4a40      	ldr	r2, [pc, #256]	; (80070e4 <UART_Start_Receive_DMA+0x130>)
 8006fe2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fe8:	4a3f      	ldr	r2, [pc, #252]	; (80070e8 <UART_Start_Receive_DMA+0x134>)
 8006fea:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ff0:	4a3e      	ldr	r2, [pc, #248]	; (80070ec <UART_Start_Receive_DMA+0x138>)
 8006ff2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ff8:	2200      	movs	r2, #0
 8006ffa:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8006ffc:	f107 0308 	add.w	r3, r7, #8
 8007000:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	3304      	adds	r3, #4
 800700c:	4619      	mov	r1, r3
 800700e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007010:	681a      	ldr	r2, [r3, #0]
 8007012:	88fb      	ldrh	r3, [r7, #6]
 8007014:	f7fd f96c 	bl	80042f0 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8007018:	2300      	movs	r3, #0
 800701a:	613b      	str	r3, [r7, #16]
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	613b      	str	r3, [r7, #16]
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	685b      	ldr	r3, [r3, #4]
 800702a:	613b      	str	r3, [r7, #16]
 800702c:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	2200      	movs	r2, #0
 8007032:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	691b      	ldr	r3, [r3, #16]
 800703a:	2b00      	cmp	r3, #0
 800703c:	d019      	beq.n	8007072 <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	330c      	adds	r3, #12
 8007044:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007046:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007048:	e853 3f00 	ldrex	r3, [r3]
 800704c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800704e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007050:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007054:	65bb      	str	r3, [r7, #88]	; 0x58
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	330c      	adds	r3, #12
 800705c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800705e:	64fa      	str	r2, [r7, #76]	; 0x4c
 8007060:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007062:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8007064:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007066:	e841 2300 	strex	r3, r2, [r1]
 800706a:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800706c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800706e:	2b00      	cmp	r3, #0
 8007070:	d1e5      	bne.n	800703e <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	3314      	adds	r3, #20
 8007078:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800707a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800707c:	e853 3f00 	ldrex	r3, [r3]
 8007080:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007082:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007084:	f043 0301 	orr.w	r3, r3, #1
 8007088:	657b      	str	r3, [r7, #84]	; 0x54
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	3314      	adds	r3, #20
 8007090:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007092:	63ba      	str	r2, [r7, #56]	; 0x38
 8007094:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007096:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007098:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800709a:	e841 2300 	strex	r3, r2, [r1]
 800709e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80070a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d1e5      	bne.n	8007072 <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	3314      	adds	r3, #20
 80070ac:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070ae:	69bb      	ldr	r3, [r7, #24]
 80070b0:	e853 3f00 	ldrex	r3, [r3]
 80070b4:	617b      	str	r3, [r7, #20]
   return(result);
 80070b6:	697b      	ldr	r3, [r7, #20]
 80070b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80070bc:	653b      	str	r3, [r7, #80]	; 0x50
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	3314      	adds	r3, #20
 80070c4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80070c6:	627a      	str	r2, [r7, #36]	; 0x24
 80070c8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070ca:	6a39      	ldr	r1, [r7, #32]
 80070cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80070ce:	e841 2300 	strex	r3, r2, [r1]
 80070d2:	61fb      	str	r3, [r7, #28]
   return(result);
 80070d4:	69fb      	ldr	r3, [r7, #28]
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d1e5      	bne.n	80070a6 <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 80070da:	2300      	movs	r3, #0
}
 80070dc:	4618      	mov	r0, r3
 80070de:	3760      	adds	r7, #96	; 0x60
 80070e0:	46bd      	mov	sp, r7
 80070e2:	bd80      	pop	{r7, pc}
 80070e4:	08006dc3 	.word	0x08006dc3
 80070e8:	08006ee9 	.word	0x08006ee9
 80070ec:	08006f1f 	.word	0x08006f1f

080070f0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80070f0:	b480      	push	{r7}
 80070f2:	b089      	sub	sp, #36	; 0x24
 80070f4:	af00      	add	r7, sp, #0
 80070f6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	330c      	adds	r3, #12
 80070fe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	e853 3f00 	ldrex	r3, [r3]
 8007106:	60bb      	str	r3, [r7, #8]
   return(result);
 8007108:	68bb      	ldr	r3, [r7, #8]
 800710a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800710e:	61fb      	str	r3, [r7, #28]
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	330c      	adds	r3, #12
 8007116:	69fa      	ldr	r2, [r7, #28]
 8007118:	61ba      	str	r2, [r7, #24]
 800711a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800711c:	6979      	ldr	r1, [r7, #20]
 800711e:	69ba      	ldr	r2, [r7, #24]
 8007120:	e841 2300 	strex	r3, r2, [r1]
 8007124:	613b      	str	r3, [r7, #16]
   return(result);
 8007126:	693b      	ldr	r3, [r7, #16]
 8007128:	2b00      	cmp	r3, #0
 800712a:	d1e5      	bne.n	80070f8 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	2220      	movs	r2, #32
 8007130:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8007134:	bf00      	nop
 8007136:	3724      	adds	r7, #36	; 0x24
 8007138:	46bd      	mov	sp, r7
 800713a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800713e:	4770      	bx	lr

08007140 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007140:	b480      	push	{r7}
 8007142:	b095      	sub	sp, #84	; 0x54
 8007144:	af00      	add	r7, sp, #0
 8007146:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	330c      	adds	r3, #12
 800714e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007150:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007152:	e853 3f00 	ldrex	r3, [r3]
 8007156:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007158:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800715a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800715e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	330c      	adds	r3, #12
 8007166:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007168:	643a      	str	r2, [r7, #64]	; 0x40
 800716a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800716c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800716e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007170:	e841 2300 	strex	r3, r2, [r1]
 8007174:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007176:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007178:	2b00      	cmp	r3, #0
 800717a:	d1e5      	bne.n	8007148 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	3314      	adds	r3, #20
 8007182:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007184:	6a3b      	ldr	r3, [r7, #32]
 8007186:	e853 3f00 	ldrex	r3, [r3]
 800718a:	61fb      	str	r3, [r7, #28]
   return(result);
 800718c:	69fb      	ldr	r3, [r7, #28]
 800718e:	f023 0301 	bic.w	r3, r3, #1
 8007192:	64bb      	str	r3, [r7, #72]	; 0x48
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	3314      	adds	r3, #20
 800719a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800719c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800719e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071a0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80071a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80071a4:	e841 2300 	strex	r3, r2, [r1]
 80071a8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80071aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d1e5      	bne.n	800717c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071b4:	2b01      	cmp	r3, #1
 80071b6:	d119      	bne.n	80071ec <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	330c      	adds	r3, #12
 80071be:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	e853 3f00 	ldrex	r3, [r3]
 80071c6:	60bb      	str	r3, [r7, #8]
   return(result);
 80071c8:	68bb      	ldr	r3, [r7, #8]
 80071ca:	f023 0310 	bic.w	r3, r3, #16
 80071ce:	647b      	str	r3, [r7, #68]	; 0x44
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	330c      	adds	r3, #12
 80071d6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80071d8:	61ba      	str	r2, [r7, #24]
 80071da:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071dc:	6979      	ldr	r1, [r7, #20]
 80071de:	69ba      	ldr	r2, [r7, #24]
 80071e0:	e841 2300 	strex	r3, r2, [r1]
 80071e4:	613b      	str	r3, [r7, #16]
   return(result);
 80071e6:	693b      	ldr	r3, [r7, #16]
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d1e5      	bne.n	80071b8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	2220      	movs	r2, #32
 80071f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	2200      	movs	r2, #0
 80071f8:	631a      	str	r2, [r3, #48]	; 0x30
}
 80071fa:	bf00      	nop
 80071fc:	3754      	adds	r7, #84	; 0x54
 80071fe:	46bd      	mov	sp, r7
 8007200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007204:	4770      	bx	lr

08007206 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007206:	b580      	push	{r7, lr}
 8007208:	b084      	sub	sp, #16
 800720a:	af00      	add	r7, sp, #0
 800720c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007212:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	2200      	movs	r2, #0
 8007218:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	2200      	movs	r2, #0
 800721e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007220:	68f8      	ldr	r0, [r7, #12]
 8007222:	f7ff fd5d 	bl	8006ce0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007226:	bf00      	nop
 8007228:	3710      	adds	r7, #16
 800722a:	46bd      	mov	sp, r7
 800722c:	bd80      	pop	{r7, pc}

0800722e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800722e:	b480      	push	{r7}
 8007230:	b085      	sub	sp, #20
 8007232:	af00      	add	r7, sp, #0
 8007234:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800723c:	b2db      	uxtb	r3, r3
 800723e:	2b21      	cmp	r3, #33	; 0x21
 8007240:	d13e      	bne.n	80072c0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	689b      	ldr	r3, [r3, #8]
 8007246:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800724a:	d114      	bne.n	8007276 <UART_Transmit_IT+0x48>
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	691b      	ldr	r3, [r3, #16]
 8007250:	2b00      	cmp	r3, #0
 8007252:	d110      	bne.n	8007276 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	6a1b      	ldr	r3, [r3, #32]
 8007258:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	881b      	ldrh	r3, [r3, #0]
 800725e:	461a      	mov	r2, r3
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007268:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	6a1b      	ldr	r3, [r3, #32]
 800726e:	1c9a      	adds	r2, r3, #2
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	621a      	str	r2, [r3, #32]
 8007274:	e008      	b.n	8007288 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	6a1b      	ldr	r3, [r3, #32]
 800727a:	1c59      	adds	r1, r3, #1
 800727c:	687a      	ldr	r2, [r7, #4]
 800727e:	6211      	str	r1, [r2, #32]
 8007280:	781a      	ldrb	r2, [r3, #0]
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800728c:	b29b      	uxth	r3, r3
 800728e:	3b01      	subs	r3, #1
 8007290:	b29b      	uxth	r3, r3
 8007292:	687a      	ldr	r2, [r7, #4]
 8007294:	4619      	mov	r1, r3
 8007296:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007298:	2b00      	cmp	r3, #0
 800729a:	d10f      	bne.n	80072bc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	68da      	ldr	r2, [r3, #12]
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80072aa:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	68da      	ldr	r2, [r3, #12]
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80072ba:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80072bc:	2300      	movs	r3, #0
 80072be:	e000      	b.n	80072c2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80072c0:	2302      	movs	r3, #2
  }
}
 80072c2:	4618      	mov	r0, r3
 80072c4:	3714      	adds	r7, #20
 80072c6:	46bd      	mov	sp, r7
 80072c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072cc:	4770      	bx	lr

080072ce <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80072ce:	b580      	push	{r7, lr}
 80072d0:	b082      	sub	sp, #8
 80072d2:	af00      	add	r7, sp, #0
 80072d4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	68da      	ldr	r2, [r3, #12]
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80072e4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	2220      	movs	r2, #32
 80072ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80072ee:	6878      	ldr	r0, [r7, #4]
 80072f0:	f7fb f846 	bl	8002380 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80072f4:	2300      	movs	r3, #0
}
 80072f6:	4618      	mov	r0, r3
 80072f8:	3708      	adds	r7, #8
 80072fa:	46bd      	mov	sp, r7
 80072fc:	bd80      	pop	{r7, pc}

080072fe <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80072fe:	b580      	push	{r7, lr}
 8007300:	b08c      	sub	sp, #48	; 0x30
 8007302:	af00      	add	r7, sp, #0
 8007304:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800730c:	b2db      	uxtb	r3, r3
 800730e:	2b22      	cmp	r3, #34	; 0x22
 8007310:	f040 80ab 	bne.w	800746a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	689b      	ldr	r3, [r3, #8]
 8007318:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800731c:	d117      	bne.n	800734e <UART_Receive_IT+0x50>
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	691b      	ldr	r3, [r3, #16]
 8007322:	2b00      	cmp	r3, #0
 8007324:	d113      	bne.n	800734e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007326:	2300      	movs	r3, #0
 8007328:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800732e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	685b      	ldr	r3, [r3, #4]
 8007336:	b29b      	uxth	r3, r3
 8007338:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800733c:	b29a      	uxth	r2, r3
 800733e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007340:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007346:	1c9a      	adds	r2, r3, #2
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	629a      	str	r2, [r3, #40]	; 0x28
 800734c:	e026      	b.n	800739c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007352:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8007354:	2300      	movs	r3, #0
 8007356:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	689b      	ldr	r3, [r3, #8]
 800735c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007360:	d007      	beq.n	8007372 <UART_Receive_IT+0x74>
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	689b      	ldr	r3, [r3, #8]
 8007366:	2b00      	cmp	r3, #0
 8007368:	d10a      	bne.n	8007380 <UART_Receive_IT+0x82>
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	691b      	ldr	r3, [r3, #16]
 800736e:	2b00      	cmp	r3, #0
 8007370:	d106      	bne.n	8007380 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	685b      	ldr	r3, [r3, #4]
 8007378:	b2da      	uxtb	r2, r3
 800737a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800737c:	701a      	strb	r2, [r3, #0]
 800737e:	e008      	b.n	8007392 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	685b      	ldr	r3, [r3, #4]
 8007386:	b2db      	uxtb	r3, r3
 8007388:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800738c:	b2da      	uxtb	r2, r3
 800738e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007390:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007396:	1c5a      	adds	r2, r3, #1
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80073a0:	b29b      	uxth	r3, r3
 80073a2:	3b01      	subs	r3, #1
 80073a4:	b29b      	uxth	r3, r3
 80073a6:	687a      	ldr	r2, [r7, #4]
 80073a8:	4619      	mov	r1, r3
 80073aa:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d15a      	bne.n	8007466 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	68da      	ldr	r2, [r3, #12]
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	f022 0220 	bic.w	r2, r2, #32
 80073be:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	68da      	ldr	r2, [r3, #12]
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80073ce:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	695a      	ldr	r2, [r3, #20]
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	f022 0201 	bic.w	r2, r2, #1
 80073de:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	2220      	movs	r2, #32
 80073e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073ec:	2b01      	cmp	r3, #1
 80073ee:	d135      	bne.n	800745c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	2200      	movs	r2, #0
 80073f4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	330c      	adds	r3, #12
 80073fc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073fe:	697b      	ldr	r3, [r7, #20]
 8007400:	e853 3f00 	ldrex	r3, [r3]
 8007404:	613b      	str	r3, [r7, #16]
   return(result);
 8007406:	693b      	ldr	r3, [r7, #16]
 8007408:	f023 0310 	bic.w	r3, r3, #16
 800740c:	627b      	str	r3, [r7, #36]	; 0x24
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	330c      	adds	r3, #12
 8007414:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007416:	623a      	str	r2, [r7, #32]
 8007418:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800741a:	69f9      	ldr	r1, [r7, #28]
 800741c:	6a3a      	ldr	r2, [r7, #32]
 800741e:	e841 2300 	strex	r3, r2, [r1]
 8007422:	61bb      	str	r3, [r7, #24]
   return(result);
 8007424:	69bb      	ldr	r3, [r7, #24]
 8007426:	2b00      	cmp	r3, #0
 8007428:	d1e5      	bne.n	80073f6 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	f003 0310 	and.w	r3, r3, #16
 8007434:	2b10      	cmp	r3, #16
 8007436:	d10a      	bne.n	800744e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007438:	2300      	movs	r3, #0
 800743a:	60fb      	str	r3, [r7, #12]
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	60fb      	str	r3, [r7, #12]
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	685b      	ldr	r3, [r3, #4]
 800744a:	60fb      	str	r3, [r7, #12]
 800744c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007452:	4619      	mov	r1, r3
 8007454:	6878      	ldr	r0, [r7, #4]
 8007456:	f7ff fc4d 	bl	8006cf4 <HAL_UARTEx_RxEventCallback>
 800745a:	e002      	b.n	8007462 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800745c:	6878      	ldr	r0, [r7, #4]
 800745e:	f7fa ffa1 	bl	80023a4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007462:	2300      	movs	r3, #0
 8007464:	e002      	b.n	800746c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8007466:	2300      	movs	r3, #0
 8007468:	e000      	b.n	800746c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800746a:	2302      	movs	r3, #2
  }
}
 800746c:	4618      	mov	r0, r3
 800746e:	3730      	adds	r7, #48	; 0x30
 8007470:	46bd      	mov	sp, r7
 8007472:	bd80      	pop	{r7, pc}

08007474 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007474:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007478:	b0c0      	sub	sp, #256	; 0x100
 800747a:	af00      	add	r7, sp, #0
 800747c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007480:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	691b      	ldr	r3, [r3, #16]
 8007488:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800748c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007490:	68d9      	ldr	r1, [r3, #12]
 8007492:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007496:	681a      	ldr	r2, [r3, #0]
 8007498:	ea40 0301 	orr.w	r3, r0, r1
 800749c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800749e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80074a2:	689a      	ldr	r2, [r3, #8]
 80074a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80074a8:	691b      	ldr	r3, [r3, #16]
 80074aa:	431a      	orrs	r2, r3
 80074ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80074b0:	695b      	ldr	r3, [r3, #20]
 80074b2:	431a      	orrs	r2, r3
 80074b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80074b8:	69db      	ldr	r3, [r3, #28]
 80074ba:	4313      	orrs	r3, r2
 80074bc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80074c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	68db      	ldr	r3, [r3, #12]
 80074c8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80074cc:	f021 010c 	bic.w	r1, r1, #12
 80074d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80074d4:	681a      	ldr	r2, [r3, #0]
 80074d6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80074da:	430b      	orrs	r3, r1
 80074dc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80074de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	695b      	ldr	r3, [r3, #20]
 80074e6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80074ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80074ee:	6999      	ldr	r1, [r3, #24]
 80074f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80074f4:	681a      	ldr	r2, [r3, #0]
 80074f6:	ea40 0301 	orr.w	r3, r0, r1
 80074fa:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80074fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007500:	681a      	ldr	r2, [r3, #0]
 8007502:	4b8f      	ldr	r3, [pc, #572]	; (8007740 <UART_SetConfig+0x2cc>)
 8007504:	429a      	cmp	r2, r3
 8007506:	d005      	beq.n	8007514 <UART_SetConfig+0xa0>
 8007508:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800750c:	681a      	ldr	r2, [r3, #0]
 800750e:	4b8d      	ldr	r3, [pc, #564]	; (8007744 <UART_SetConfig+0x2d0>)
 8007510:	429a      	cmp	r2, r3
 8007512:	d104      	bne.n	800751e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007514:	f7fe f83c 	bl	8005590 <HAL_RCC_GetPCLK2Freq>
 8007518:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800751c:	e003      	b.n	8007526 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800751e:	f7fe f823 	bl	8005568 <HAL_RCC_GetPCLK1Freq>
 8007522:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007526:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800752a:	69db      	ldr	r3, [r3, #28]
 800752c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007530:	f040 810c 	bne.w	800774c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007534:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007538:	2200      	movs	r2, #0
 800753a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800753e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8007542:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8007546:	4622      	mov	r2, r4
 8007548:	462b      	mov	r3, r5
 800754a:	1891      	adds	r1, r2, r2
 800754c:	65b9      	str	r1, [r7, #88]	; 0x58
 800754e:	415b      	adcs	r3, r3
 8007550:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007552:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007556:	4621      	mov	r1, r4
 8007558:	eb12 0801 	adds.w	r8, r2, r1
 800755c:	4629      	mov	r1, r5
 800755e:	eb43 0901 	adc.w	r9, r3, r1
 8007562:	f04f 0200 	mov.w	r2, #0
 8007566:	f04f 0300 	mov.w	r3, #0
 800756a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800756e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007572:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007576:	4690      	mov	r8, r2
 8007578:	4699      	mov	r9, r3
 800757a:	4623      	mov	r3, r4
 800757c:	eb18 0303 	adds.w	r3, r8, r3
 8007580:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007584:	462b      	mov	r3, r5
 8007586:	eb49 0303 	adc.w	r3, r9, r3
 800758a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800758e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007592:	685b      	ldr	r3, [r3, #4]
 8007594:	2200      	movs	r2, #0
 8007596:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800759a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800759e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80075a2:	460b      	mov	r3, r1
 80075a4:	18db      	adds	r3, r3, r3
 80075a6:	653b      	str	r3, [r7, #80]	; 0x50
 80075a8:	4613      	mov	r3, r2
 80075aa:	eb42 0303 	adc.w	r3, r2, r3
 80075ae:	657b      	str	r3, [r7, #84]	; 0x54
 80075b0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80075b4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80075b8:	f7f9 f950 	bl	800085c <__aeabi_uldivmod>
 80075bc:	4602      	mov	r2, r0
 80075be:	460b      	mov	r3, r1
 80075c0:	4b61      	ldr	r3, [pc, #388]	; (8007748 <UART_SetConfig+0x2d4>)
 80075c2:	fba3 2302 	umull	r2, r3, r3, r2
 80075c6:	095b      	lsrs	r3, r3, #5
 80075c8:	011c      	lsls	r4, r3, #4
 80075ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80075ce:	2200      	movs	r2, #0
 80075d0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80075d4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80075d8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80075dc:	4642      	mov	r2, r8
 80075de:	464b      	mov	r3, r9
 80075e0:	1891      	adds	r1, r2, r2
 80075e2:	64b9      	str	r1, [r7, #72]	; 0x48
 80075e4:	415b      	adcs	r3, r3
 80075e6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80075e8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80075ec:	4641      	mov	r1, r8
 80075ee:	eb12 0a01 	adds.w	sl, r2, r1
 80075f2:	4649      	mov	r1, r9
 80075f4:	eb43 0b01 	adc.w	fp, r3, r1
 80075f8:	f04f 0200 	mov.w	r2, #0
 80075fc:	f04f 0300 	mov.w	r3, #0
 8007600:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007604:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007608:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800760c:	4692      	mov	sl, r2
 800760e:	469b      	mov	fp, r3
 8007610:	4643      	mov	r3, r8
 8007612:	eb1a 0303 	adds.w	r3, sl, r3
 8007616:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800761a:	464b      	mov	r3, r9
 800761c:	eb4b 0303 	adc.w	r3, fp, r3
 8007620:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007624:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007628:	685b      	ldr	r3, [r3, #4]
 800762a:	2200      	movs	r2, #0
 800762c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007630:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8007634:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8007638:	460b      	mov	r3, r1
 800763a:	18db      	adds	r3, r3, r3
 800763c:	643b      	str	r3, [r7, #64]	; 0x40
 800763e:	4613      	mov	r3, r2
 8007640:	eb42 0303 	adc.w	r3, r2, r3
 8007644:	647b      	str	r3, [r7, #68]	; 0x44
 8007646:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800764a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800764e:	f7f9 f905 	bl	800085c <__aeabi_uldivmod>
 8007652:	4602      	mov	r2, r0
 8007654:	460b      	mov	r3, r1
 8007656:	4611      	mov	r1, r2
 8007658:	4b3b      	ldr	r3, [pc, #236]	; (8007748 <UART_SetConfig+0x2d4>)
 800765a:	fba3 2301 	umull	r2, r3, r3, r1
 800765e:	095b      	lsrs	r3, r3, #5
 8007660:	2264      	movs	r2, #100	; 0x64
 8007662:	fb02 f303 	mul.w	r3, r2, r3
 8007666:	1acb      	subs	r3, r1, r3
 8007668:	00db      	lsls	r3, r3, #3
 800766a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800766e:	4b36      	ldr	r3, [pc, #216]	; (8007748 <UART_SetConfig+0x2d4>)
 8007670:	fba3 2302 	umull	r2, r3, r3, r2
 8007674:	095b      	lsrs	r3, r3, #5
 8007676:	005b      	lsls	r3, r3, #1
 8007678:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800767c:	441c      	add	r4, r3
 800767e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007682:	2200      	movs	r2, #0
 8007684:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007688:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800768c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8007690:	4642      	mov	r2, r8
 8007692:	464b      	mov	r3, r9
 8007694:	1891      	adds	r1, r2, r2
 8007696:	63b9      	str	r1, [r7, #56]	; 0x38
 8007698:	415b      	adcs	r3, r3
 800769a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800769c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80076a0:	4641      	mov	r1, r8
 80076a2:	1851      	adds	r1, r2, r1
 80076a4:	6339      	str	r1, [r7, #48]	; 0x30
 80076a6:	4649      	mov	r1, r9
 80076a8:	414b      	adcs	r3, r1
 80076aa:	637b      	str	r3, [r7, #52]	; 0x34
 80076ac:	f04f 0200 	mov.w	r2, #0
 80076b0:	f04f 0300 	mov.w	r3, #0
 80076b4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80076b8:	4659      	mov	r1, fp
 80076ba:	00cb      	lsls	r3, r1, #3
 80076bc:	4651      	mov	r1, sl
 80076be:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80076c2:	4651      	mov	r1, sl
 80076c4:	00ca      	lsls	r2, r1, #3
 80076c6:	4610      	mov	r0, r2
 80076c8:	4619      	mov	r1, r3
 80076ca:	4603      	mov	r3, r0
 80076cc:	4642      	mov	r2, r8
 80076ce:	189b      	adds	r3, r3, r2
 80076d0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80076d4:	464b      	mov	r3, r9
 80076d6:	460a      	mov	r2, r1
 80076d8:	eb42 0303 	adc.w	r3, r2, r3
 80076dc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80076e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80076e4:	685b      	ldr	r3, [r3, #4]
 80076e6:	2200      	movs	r2, #0
 80076e8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80076ec:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80076f0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80076f4:	460b      	mov	r3, r1
 80076f6:	18db      	adds	r3, r3, r3
 80076f8:	62bb      	str	r3, [r7, #40]	; 0x28
 80076fa:	4613      	mov	r3, r2
 80076fc:	eb42 0303 	adc.w	r3, r2, r3
 8007700:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007702:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007706:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800770a:	f7f9 f8a7 	bl	800085c <__aeabi_uldivmod>
 800770e:	4602      	mov	r2, r0
 8007710:	460b      	mov	r3, r1
 8007712:	4b0d      	ldr	r3, [pc, #52]	; (8007748 <UART_SetConfig+0x2d4>)
 8007714:	fba3 1302 	umull	r1, r3, r3, r2
 8007718:	095b      	lsrs	r3, r3, #5
 800771a:	2164      	movs	r1, #100	; 0x64
 800771c:	fb01 f303 	mul.w	r3, r1, r3
 8007720:	1ad3      	subs	r3, r2, r3
 8007722:	00db      	lsls	r3, r3, #3
 8007724:	3332      	adds	r3, #50	; 0x32
 8007726:	4a08      	ldr	r2, [pc, #32]	; (8007748 <UART_SetConfig+0x2d4>)
 8007728:	fba2 2303 	umull	r2, r3, r2, r3
 800772c:	095b      	lsrs	r3, r3, #5
 800772e:	f003 0207 	and.w	r2, r3, #7
 8007732:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	4422      	add	r2, r4
 800773a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800773c:	e105      	b.n	800794a <UART_SetConfig+0x4d6>
 800773e:	bf00      	nop
 8007740:	40011000 	.word	0x40011000
 8007744:	40011400 	.word	0x40011400
 8007748:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800774c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007750:	2200      	movs	r2, #0
 8007752:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007756:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800775a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800775e:	4642      	mov	r2, r8
 8007760:	464b      	mov	r3, r9
 8007762:	1891      	adds	r1, r2, r2
 8007764:	6239      	str	r1, [r7, #32]
 8007766:	415b      	adcs	r3, r3
 8007768:	627b      	str	r3, [r7, #36]	; 0x24
 800776a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800776e:	4641      	mov	r1, r8
 8007770:	1854      	adds	r4, r2, r1
 8007772:	4649      	mov	r1, r9
 8007774:	eb43 0501 	adc.w	r5, r3, r1
 8007778:	f04f 0200 	mov.w	r2, #0
 800777c:	f04f 0300 	mov.w	r3, #0
 8007780:	00eb      	lsls	r3, r5, #3
 8007782:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007786:	00e2      	lsls	r2, r4, #3
 8007788:	4614      	mov	r4, r2
 800778a:	461d      	mov	r5, r3
 800778c:	4643      	mov	r3, r8
 800778e:	18e3      	adds	r3, r4, r3
 8007790:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007794:	464b      	mov	r3, r9
 8007796:	eb45 0303 	adc.w	r3, r5, r3
 800779a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800779e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80077a2:	685b      	ldr	r3, [r3, #4]
 80077a4:	2200      	movs	r2, #0
 80077a6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80077aa:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80077ae:	f04f 0200 	mov.w	r2, #0
 80077b2:	f04f 0300 	mov.w	r3, #0
 80077b6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80077ba:	4629      	mov	r1, r5
 80077bc:	008b      	lsls	r3, r1, #2
 80077be:	4621      	mov	r1, r4
 80077c0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80077c4:	4621      	mov	r1, r4
 80077c6:	008a      	lsls	r2, r1, #2
 80077c8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80077cc:	f7f9 f846 	bl	800085c <__aeabi_uldivmod>
 80077d0:	4602      	mov	r2, r0
 80077d2:	460b      	mov	r3, r1
 80077d4:	4b60      	ldr	r3, [pc, #384]	; (8007958 <UART_SetConfig+0x4e4>)
 80077d6:	fba3 2302 	umull	r2, r3, r3, r2
 80077da:	095b      	lsrs	r3, r3, #5
 80077dc:	011c      	lsls	r4, r3, #4
 80077de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80077e2:	2200      	movs	r2, #0
 80077e4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80077e8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80077ec:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80077f0:	4642      	mov	r2, r8
 80077f2:	464b      	mov	r3, r9
 80077f4:	1891      	adds	r1, r2, r2
 80077f6:	61b9      	str	r1, [r7, #24]
 80077f8:	415b      	adcs	r3, r3
 80077fa:	61fb      	str	r3, [r7, #28]
 80077fc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007800:	4641      	mov	r1, r8
 8007802:	1851      	adds	r1, r2, r1
 8007804:	6139      	str	r1, [r7, #16]
 8007806:	4649      	mov	r1, r9
 8007808:	414b      	adcs	r3, r1
 800780a:	617b      	str	r3, [r7, #20]
 800780c:	f04f 0200 	mov.w	r2, #0
 8007810:	f04f 0300 	mov.w	r3, #0
 8007814:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007818:	4659      	mov	r1, fp
 800781a:	00cb      	lsls	r3, r1, #3
 800781c:	4651      	mov	r1, sl
 800781e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007822:	4651      	mov	r1, sl
 8007824:	00ca      	lsls	r2, r1, #3
 8007826:	4610      	mov	r0, r2
 8007828:	4619      	mov	r1, r3
 800782a:	4603      	mov	r3, r0
 800782c:	4642      	mov	r2, r8
 800782e:	189b      	adds	r3, r3, r2
 8007830:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007834:	464b      	mov	r3, r9
 8007836:	460a      	mov	r2, r1
 8007838:	eb42 0303 	adc.w	r3, r2, r3
 800783c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007840:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007844:	685b      	ldr	r3, [r3, #4]
 8007846:	2200      	movs	r2, #0
 8007848:	67bb      	str	r3, [r7, #120]	; 0x78
 800784a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800784c:	f04f 0200 	mov.w	r2, #0
 8007850:	f04f 0300 	mov.w	r3, #0
 8007854:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8007858:	4649      	mov	r1, r9
 800785a:	008b      	lsls	r3, r1, #2
 800785c:	4641      	mov	r1, r8
 800785e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007862:	4641      	mov	r1, r8
 8007864:	008a      	lsls	r2, r1, #2
 8007866:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800786a:	f7f8 fff7 	bl	800085c <__aeabi_uldivmod>
 800786e:	4602      	mov	r2, r0
 8007870:	460b      	mov	r3, r1
 8007872:	4b39      	ldr	r3, [pc, #228]	; (8007958 <UART_SetConfig+0x4e4>)
 8007874:	fba3 1302 	umull	r1, r3, r3, r2
 8007878:	095b      	lsrs	r3, r3, #5
 800787a:	2164      	movs	r1, #100	; 0x64
 800787c:	fb01 f303 	mul.w	r3, r1, r3
 8007880:	1ad3      	subs	r3, r2, r3
 8007882:	011b      	lsls	r3, r3, #4
 8007884:	3332      	adds	r3, #50	; 0x32
 8007886:	4a34      	ldr	r2, [pc, #208]	; (8007958 <UART_SetConfig+0x4e4>)
 8007888:	fba2 2303 	umull	r2, r3, r2, r3
 800788c:	095b      	lsrs	r3, r3, #5
 800788e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007892:	441c      	add	r4, r3
 8007894:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007898:	2200      	movs	r2, #0
 800789a:	673b      	str	r3, [r7, #112]	; 0x70
 800789c:	677a      	str	r2, [r7, #116]	; 0x74
 800789e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80078a2:	4642      	mov	r2, r8
 80078a4:	464b      	mov	r3, r9
 80078a6:	1891      	adds	r1, r2, r2
 80078a8:	60b9      	str	r1, [r7, #8]
 80078aa:	415b      	adcs	r3, r3
 80078ac:	60fb      	str	r3, [r7, #12]
 80078ae:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80078b2:	4641      	mov	r1, r8
 80078b4:	1851      	adds	r1, r2, r1
 80078b6:	6039      	str	r1, [r7, #0]
 80078b8:	4649      	mov	r1, r9
 80078ba:	414b      	adcs	r3, r1
 80078bc:	607b      	str	r3, [r7, #4]
 80078be:	f04f 0200 	mov.w	r2, #0
 80078c2:	f04f 0300 	mov.w	r3, #0
 80078c6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80078ca:	4659      	mov	r1, fp
 80078cc:	00cb      	lsls	r3, r1, #3
 80078ce:	4651      	mov	r1, sl
 80078d0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80078d4:	4651      	mov	r1, sl
 80078d6:	00ca      	lsls	r2, r1, #3
 80078d8:	4610      	mov	r0, r2
 80078da:	4619      	mov	r1, r3
 80078dc:	4603      	mov	r3, r0
 80078de:	4642      	mov	r2, r8
 80078e0:	189b      	adds	r3, r3, r2
 80078e2:	66bb      	str	r3, [r7, #104]	; 0x68
 80078e4:	464b      	mov	r3, r9
 80078e6:	460a      	mov	r2, r1
 80078e8:	eb42 0303 	adc.w	r3, r2, r3
 80078ec:	66fb      	str	r3, [r7, #108]	; 0x6c
 80078ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80078f2:	685b      	ldr	r3, [r3, #4]
 80078f4:	2200      	movs	r2, #0
 80078f6:	663b      	str	r3, [r7, #96]	; 0x60
 80078f8:	667a      	str	r2, [r7, #100]	; 0x64
 80078fa:	f04f 0200 	mov.w	r2, #0
 80078fe:	f04f 0300 	mov.w	r3, #0
 8007902:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8007906:	4649      	mov	r1, r9
 8007908:	008b      	lsls	r3, r1, #2
 800790a:	4641      	mov	r1, r8
 800790c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007910:	4641      	mov	r1, r8
 8007912:	008a      	lsls	r2, r1, #2
 8007914:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8007918:	f7f8 ffa0 	bl	800085c <__aeabi_uldivmod>
 800791c:	4602      	mov	r2, r0
 800791e:	460b      	mov	r3, r1
 8007920:	4b0d      	ldr	r3, [pc, #52]	; (8007958 <UART_SetConfig+0x4e4>)
 8007922:	fba3 1302 	umull	r1, r3, r3, r2
 8007926:	095b      	lsrs	r3, r3, #5
 8007928:	2164      	movs	r1, #100	; 0x64
 800792a:	fb01 f303 	mul.w	r3, r1, r3
 800792e:	1ad3      	subs	r3, r2, r3
 8007930:	011b      	lsls	r3, r3, #4
 8007932:	3332      	adds	r3, #50	; 0x32
 8007934:	4a08      	ldr	r2, [pc, #32]	; (8007958 <UART_SetConfig+0x4e4>)
 8007936:	fba2 2303 	umull	r2, r3, r2, r3
 800793a:	095b      	lsrs	r3, r3, #5
 800793c:	f003 020f 	and.w	r2, r3, #15
 8007940:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	4422      	add	r2, r4
 8007948:	609a      	str	r2, [r3, #8]
}
 800794a:	bf00      	nop
 800794c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8007950:	46bd      	mov	sp, r7
 8007952:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007956:	bf00      	nop
 8007958:	51eb851f 	.word	0x51eb851f

0800795c <__NVIC_SetPriority>:
{
 800795c:	b480      	push	{r7}
 800795e:	b083      	sub	sp, #12
 8007960:	af00      	add	r7, sp, #0
 8007962:	4603      	mov	r3, r0
 8007964:	6039      	str	r1, [r7, #0]
 8007966:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007968:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800796c:	2b00      	cmp	r3, #0
 800796e:	db0a      	blt.n	8007986 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007970:	683b      	ldr	r3, [r7, #0]
 8007972:	b2da      	uxtb	r2, r3
 8007974:	490c      	ldr	r1, [pc, #48]	; (80079a8 <__NVIC_SetPriority+0x4c>)
 8007976:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800797a:	0112      	lsls	r2, r2, #4
 800797c:	b2d2      	uxtb	r2, r2
 800797e:	440b      	add	r3, r1
 8007980:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8007984:	e00a      	b.n	800799c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007986:	683b      	ldr	r3, [r7, #0]
 8007988:	b2da      	uxtb	r2, r3
 800798a:	4908      	ldr	r1, [pc, #32]	; (80079ac <__NVIC_SetPriority+0x50>)
 800798c:	79fb      	ldrb	r3, [r7, #7]
 800798e:	f003 030f 	and.w	r3, r3, #15
 8007992:	3b04      	subs	r3, #4
 8007994:	0112      	lsls	r2, r2, #4
 8007996:	b2d2      	uxtb	r2, r2
 8007998:	440b      	add	r3, r1
 800799a:	761a      	strb	r2, [r3, #24]
}
 800799c:	bf00      	nop
 800799e:	370c      	adds	r7, #12
 80079a0:	46bd      	mov	sp, r7
 80079a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a6:	4770      	bx	lr
 80079a8:	e000e100 	.word	0xe000e100
 80079ac:	e000ed00 	.word	0xe000ed00

080079b0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80079b0:	b580      	push	{r7, lr}
 80079b2:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80079b4:	4b05      	ldr	r3, [pc, #20]	; (80079cc <SysTick_Handler+0x1c>)
 80079b6:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80079b8:	f001 fd28 	bl	800940c <xTaskGetSchedulerState>
 80079bc:	4603      	mov	r3, r0
 80079be:	2b01      	cmp	r3, #1
 80079c0:	d001      	beq.n	80079c6 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80079c2:	f002 fb11 	bl	8009fe8 <xPortSysTickHandler>
  }
}
 80079c6:	bf00      	nop
 80079c8:	bd80      	pop	{r7, pc}
 80079ca:	bf00      	nop
 80079cc:	e000e010 	.word	0xe000e010

080079d0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80079d0:	b580      	push	{r7, lr}
 80079d2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80079d4:	2100      	movs	r1, #0
 80079d6:	f06f 0004 	mvn.w	r0, #4
 80079da:	f7ff ffbf 	bl	800795c <__NVIC_SetPriority>
#endif
}
 80079de:	bf00      	nop
 80079e0:	bd80      	pop	{r7, pc}
	...

080079e4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80079e4:	b480      	push	{r7}
 80079e6:	b083      	sub	sp, #12
 80079e8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80079ea:	f3ef 8305 	mrs	r3, IPSR
 80079ee:	603b      	str	r3, [r7, #0]
  return(result);
 80079f0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d003      	beq.n	80079fe <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80079f6:	f06f 0305 	mvn.w	r3, #5
 80079fa:	607b      	str	r3, [r7, #4]
 80079fc:	e00c      	b.n	8007a18 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80079fe:	4b0a      	ldr	r3, [pc, #40]	; (8007a28 <osKernelInitialize+0x44>)
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d105      	bne.n	8007a12 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8007a06:	4b08      	ldr	r3, [pc, #32]	; (8007a28 <osKernelInitialize+0x44>)
 8007a08:	2201      	movs	r2, #1
 8007a0a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8007a0c:	2300      	movs	r3, #0
 8007a0e:	607b      	str	r3, [r7, #4]
 8007a10:	e002      	b.n	8007a18 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8007a12:	f04f 33ff 	mov.w	r3, #4294967295
 8007a16:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007a18:	687b      	ldr	r3, [r7, #4]
}
 8007a1a:	4618      	mov	r0, r3
 8007a1c:	370c      	adds	r7, #12
 8007a1e:	46bd      	mov	sp, r7
 8007a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a24:	4770      	bx	lr
 8007a26:	bf00      	nop
 8007a28:	20000c90 	.word	0x20000c90

08007a2c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8007a2c:	b580      	push	{r7, lr}
 8007a2e:	b082      	sub	sp, #8
 8007a30:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007a32:	f3ef 8305 	mrs	r3, IPSR
 8007a36:	603b      	str	r3, [r7, #0]
  return(result);
 8007a38:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d003      	beq.n	8007a46 <osKernelStart+0x1a>
    stat = osErrorISR;
 8007a3e:	f06f 0305 	mvn.w	r3, #5
 8007a42:	607b      	str	r3, [r7, #4]
 8007a44:	e010      	b.n	8007a68 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8007a46:	4b0b      	ldr	r3, [pc, #44]	; (8007a74 <osKernelStart+0x48>)
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	2b01      	cmp	r3, #1
 8007a4c:	d109      	bne.n	8007a62 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8007a4e:	f7ff ffbf 	bl	80079d0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8007a52:	4b08      	ldr	r3, [pc, #32]	; (8007a74 <osKernelStart+0x48>)
 8007a54:	2202      	movs	r2, #2
 8007a56:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8007a58:	f001 f87c 	bl	8008b54 <vTaskStartScheduler>
      stat = osOK;
 8007a5c:	2300      	movs	r3, #0
 8007a5e:	607b      	str	r3, [r7, #4]
 8007a60:	e002      	b.n	8007a68 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8007a62:	f04f 33ff 	mov.w	r3, #4294967295
 8007a66:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007a68:	687b      	ldr	r3, [r7, #4]
}
 8007a6a:	4618      	mov	r0, r3
 8007a6c:	3708      	adds	r7, #8
 8007a6e:	46bd      	mov	sp, r7
 8007a70:	bd80      	pop	{r7, pc}
 8007a72:	bf00      	nop
 8007a74:	20000c90 	.word	0x20000c90

08007a78 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8007a78:	b580      	push	{r7, lr}
 8007a7a:	b08e      	sub	sp, #56	; 0x38
 8007a7c:	af04      	add	r7, sp, #16
 8007a7e:	60f8      	str	r0, [r7, #12]
 8007a80:	60b9      	str	r1, [r7, #8]
 8007a82:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8007a84:	2300      	movs	r3, #0
 8007a86:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007a88:	f3ef 8305 	mrs	r3, IPSR
 8007a8c:	617b      	str	r3, [r7, #20]
  return(result);
 8007a8e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d17e      	bne.n	8007b92 <osThreadNew+0x11a>
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d07b      	beq.n	8007b92 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8007a9a:	2380      	movs	r3, #128	; 0x80
 8007a9c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8007a9e:	2318      	movs	r3, #24
 8007aa0:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8007aa2:	2300      	movs	r3, #0
 8007aa4:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8007aa6:	f04f 33ff 	mov.w	r3, #4294967295
 8007aaa:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d045      	beq.n	8007b3e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d002      	beq.n	8007ac0 <osThreadNew+0x48>
        name = attr->name;
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	699b      	ldr	r3, [r3, #24]
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d002      	beq.n	8007ace <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	699b      	ldr	r3, [r3, #24]
 8007acc:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8007ace:	69fb      	ldr	r3, [r7, #28]
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d008      	beq.n	8007ae6 <osThreadNew+0x6e>
 8007ad4:	69fb      	ldr	r3, [r7, #28]
 8007ad6:	2b38      	cmp	r3, #56	; 0x38
 8007ad8:	d805      	bhi.n	8007ae6 <osThreadNew+0x6e>
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	685b      	ldr	r3, [r3, #4]
 8007ade:	f003 0301 	and.w	r3, r3, #1
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d001      	beq.n	8007aea <osThreadNew+0x72>
        return (NULL);
 8007ae6:	2300      	movs	r3, #0
 8007ae8:	e054      	b.n	8007b94 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	695b      	ldr	r3, [r3, #20]
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d003      	beq.n	8007afa <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	695b      	ldr	r3, [r3, #20]
 8007af6:	089b      	lsrs	r3, r3, #2
 8007af8:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	689b      	ldr	r3, [r3, #8]
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d00e      	beq.n	8007b20 <osThreadNew+0xa8>
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	68db      	ldr	r3, [r3, #12]
 8007b06:	2bbb      	cmp	r3, #187	; 0xbb
 8007b08:	d90a      	bls.n	8007b20 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d006      	beq.n	8007b20 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	695b      	ldr	r3, [r3, #20]
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d002      	beq.n	8007b20 <osThreadNew+0xa8>
        mem = 1;
 8007b1a:	2301      	movs	r3, #1
 8007b1c:	61bb      	str	r3, [r7, #24]
 8007b1e:	e010      	b.n	8007b42 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	689b      	ldr	r3, [r3, #8]
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d10c      	bne.n	8007b42 <osThreadNew+0xca>
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	68db      	ldr	r3, [r3, #12]
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d108      	bne.n	8007b42 <osThreadNew+0xca>
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	691b      	ldr	r3, [r3, #16]
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d104      	bne.n	8007b42 <osThreadNew+0xca>
          mem = 0;
 8007b38:	2300      	movs	r3, #0
 8007b3a:	61bb      	str	r3, [r7, #24]
 8007b3c:	e001      	b.n	8007b42 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8007b3e:	2300      	movs	r3, #0
 8007b40:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8007b42:	69bb      	ldr	r3, [r7, #24]
 8007b44:	2b01      	cmp	r3, #1
 8007b46:	d110      	bne.n	8007b6a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8007b4c:	687a      	ldr	r2, [r7, #4]
 8007b4e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007b50:	9202      	str	r2, [sp, #8]
 8007b52:	9301      	str	r3, [sp, #4]
 8007b54:	69fb      	ldr	r3, [r7, #28]
 8007b56:	9300      	str	r3, [sp, #0]
 8007b58:	68bb      	ldr	r3, [r7, #8]
 8007b5a:	6a3a      	ldr	r2, [r7, #32]
 8007b5c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007b5e:	68f8      	ldr	r0, [r7, #12]
 8007b60:	f000 fe0c 	bl	800877c <xTaskCreateStatic>
 8007b64:	4603      	mov	r3, r0
 8007b66:	613b      	str	r3, [r7, #16]
 8007b68:	e013      	b.n	8007b92 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8007b6a:	69bb      	ldr	r3, [r7, #24]
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d110      	bne.n	8007b92 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8007b70:	6a3b      	ldr	r3, [r7, #32]
 8007b72:	b29a      	uxth	r2, r3
 8007b74:	f107 0310 	add.w	r3, r7, #16
 8007b78:	9301      	str	r3, [sp, #4]
 8007b7a:	69fb      	ldr	r3, [r7, #28]
 8007b7c:	9300      	str	r3, [sp, #0]
 8007b7e:	68bb      	ldr	r3, [r7, #8]
 8007b80:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007b82:	68f8      	ldr	r0, [r7, #12]
 8007b84:	f000 fe57 	bl	8008836 <xTaskCreate>
 8007b88:	4603      	mov	r3, r0
 8007b8a:	2b01      	cmp	r3, #1
 8007b8c:	d001      	beq.n	8007b92 <osThreadNew+0x11a>
            hTask = NULL;
 8007b8e:	2300      	movs	r3, #0
 8007b90:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8007b92:	693b      	ldr	r3, [r7, #16]
}
 8007b94:	4618      	mov	r0, r3
 8007b96:	3728      	adds	r7, #40	; 0x28
 8007b98:	46bd      	mov	sp, r7
 8007b9a:	bd80      	pop	{r7, pc}

08007b9c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8007b9c:	b580      	push	{r7, lr}
 8007b9e:	b084      	sub	sp, #16
 8007ba0:	af00      	add	r7, sp, #0
 8007ba2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007ba4:	f3ef 8305 	mrs	r3, IPSR
 8007ba8:	60bb      	str	r3, [r7, #8]
  return(result);
 8007baa:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d003      	beq.n	8007bb8 <osDelay+0x1c>
    stat = osErrorISR;
 8007bb0:	f06f 0305 	mvn.w	r3, #5
 8007bb4:	60fb      	str	r3, [r7, #12]
 8007bb6:	e007      	b.n	8007bc8 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8007bb8:	2300      	movs	r3, #0
 8007bba:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d002      	beq.n	8007bc8 <osDelay+0x2c>
      vTaskDelay(ticks);
 8007bc2:	6878      	ldr	r0, [r7, #4]
 8007bc4:	f000 ff92 	bl	8008aec <vTaskDelay>
    }
  }

  return (stat);
 8007bc8:	68fb      	ldr	r3, [r7, #12]
}
 8007bca:	4618      	mov	r0, r3
 8007bcc:	3710      	adds	r7, #16
 8007bce:	46bd      	mov	sp, r7
 8007bd0:	bd80      	pop	{r7, pc}
	...

08007bd4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007bd4:	b480      	push	{r7}
 8007bd6:	b085      	sub	sp, #20
 8007bd8:	af00      	add	r7, sp, #0
 8007bda:	60f8      	str	r0, [r7, #12]
 8007bdc:	60b9      	str	r1, [r7, #8]
 8007bde:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	4a07      	ldr	r2, [pc, #28]	; (8007c00 <vApplicationGetIdleTaskMemory+0x2c>)
 8007be4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8007be6:	68bb      	ldr	r3, [r7, #8]
 8007be8:	4a06      	ldr	r2, [pc, #24]	; (8007c04 <vApplicationGetIdleTaskMemory+0x30>)
 8007bea:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	2280      	movs	r2, #128	; 0x80
 8007bf0:	601a      	str	r2, [r3, #0]
}
 8007bf2:	bf00      	nop
 8007bf4:	3714      	adds	r7, #20
 8007bf6:	46bd      	mov	sp, r7
 8007bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bfc:	4770      	bx	lr
 8007bfe:	bf00      	nop
 8007c00:	20000c94 	.word	0x20000c94
 8007c04:	20000d50 	.word	0x20000d50

08007c08 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007c08:	b480      	push	{r7}
 8007c0a:	b085      	sub	sp, #20
 8007c0c:	af00      	add	r7, sp, #0
 8007c0e:	60f8      	str	r0, [r7, #12]
 8007c10:	60b9      	str	r1, [r7, #8]
 8007c12:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	4a07      	ldr	r2, [pc, #28]	; (8007c34 <vApplicationGetTimerTaskMemory+0x2c>)
 8007c18:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8007c1a:	68bb      	ldr	r3, [r7, #8]
 8007c1c:	4a06      	ldr	r2, [pc, #24]	; (8007c38 <vApplicationGetTimerTaskMemory+0x30>)
 8007c1e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007c26:	601a      	str	r2, [r3, #0]
}
 8007c28:	bf00      	nop
 8007c2a:	3714      	adds	r7, #20
 8007c2c:	46bd      	mov	sp, r7
 8007c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c32:	4770      	bx	lr
 8007c34:	20000f50 	.word	0x20000f50
 8007c38:	2000100c 	.word	0x2000100c

08007c3c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007c3c:	b480      	push	{r7}
 8007c3e:	b083      	sub	sp, #12
 8007c40:	af00      	add	r7, sp, #0
 8007c42:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	f103 0208 	add.w	r2, r3, #8
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	f04f 32ff 	mov.w	r2, #4294967295
 8007c54:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	f103 0208 	add.w	r2, r3, #8
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	f103 0208 	add.w	r2, r3, #8
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	2200      	movs	r2, #0
 8007c6e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007c70:	bf00      	nop
 8007c72:	370c      	adds	r7, #12
 8007c74:	46bd      	mov	sp, r7
 8007c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c7a:	4770      	bx	lr

08007c7c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007c7c:	b480      	push	{r7}
 8007c7e:	b083      	sub	sp, #12
 8007c80:	af00      	add	r7, sp, #0
 8007c82:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	2200      	movs	r2, #0
 8007c88:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007c8a:	bf00      	nop
 8007c8c:	370c      	adds	r7, #12
 8007c8e:	46bd      	mov	sp, r7
 8007c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c94:	4770      	bx	lr

08007c96 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007c96:	b480      	push	{r7}
 8007c98:	b085      	sub	sp, #20
 8007c9a:	af00      	add	r7, sp, #0
 8007c9c:	6078      	str	r0, [r7, #4]
 8007c9e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	685b      	ldr	r3, [r3, #4]
 8007ca4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007ca6:	683b      	ldr	r3, [r7, #0]
 8007ca8:	68fa      	ldr	r2, [r7, #12]
 8007caa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	689a      	ldr	r2, [r3, #8]
 8007cb0:	683b      	ldr	r3, [r7, #0]
 8007cb2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	689b      	ldr	r3, [r3, #8]
 8007cb8:	683a      	ldr	r2, [r7, #0]
 8007cba:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	683a      	ldr	r2, [r7, #0]
 8007cc0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007cc2:	683b      	ldr	r3, [r7, #0]
 8007cc4:	687a      	ldr	r2, [r7, #4]
 8007cc6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	1c5a      	adds	r2, r3, #1
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	601a      	str	r2, [r3, #0]
}
 8007cd2:	bf00      	nop
 8007cd4:	3714      	adds	r7, #20
 8007cd6:	46bd      	mov	sp, r7
 8007cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cdc:	4770      	bx	lr

08007cde <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007cde:	b480      	push	{r7}
 8007ce0:	b085      	sub	sp, #20
 8007ce2:	af00      	add	r7, sp, #0
 8007ce4:	6078      	str	r0, [r7, #4]
 8007ce6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007ce8:	683b      	ldr	r3, [r7, #0]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007cee:	68bb      	ldr	r3, [r7, #8]
 8007cf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007cf4:	d103      	bne.n	8007cfe <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	691b      	ldr	r3, [r3, #16]
 8007cfa:	60fb      	str	r3, [r7, #12]
 8007cfc:	e00c      	b.n	8007d18 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	3308      	adds	r3, #8
 8007d02:	60fb      	str	r3, [r7, #12]
 8007d04:	e002      	b.n	8007d0c <vListInsert+0x2e>
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	685b      	ldr	r3, [r3, #4]
 8007d0a:	60fb      	str	r3, [r7, #12]
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	685b      	ldr	r3, [r3, #4]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	68ba      	ldr	r2, [r7, #8]
 8007d14:	429a      	cmp	r2, r3
 8007d16:	d2f6      	bcs.n	8007d06 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	685a      	ldr	r2, [r3, #4]
 8007d1c:	683b      	ldr	r3, [r7, #0]
 8007d1e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007d20:	683b      	ldr	r3, [r7, #0]
 8007d22:	685b      	ldr	r3, [r3, #4]
 8007d24:	683a      	ldr	r2, [r7, #0]
 8007d26:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007d28:	683b      	ldr	r3, [r7, #0]
 8007d2a:	68fa      	ldr	r2, [r7, #12]
 8007d2c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	683a      	ldr	r2, [r7, #0]
 8007d32:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007d34:	683b      	ldr	r3, [r7, #0]
 8007d36:	687a      	ldr	r2, [r7, #4]
 8007d38:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	1c5a      	adds	r2, r3, #1
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	601a      	str	r2, [r3, #0]
}
 8007d44:	bf00      	nop
 8007d46:	3714      	adds	r7, #20
 8007d48:	46bd      	mov	sp, r7
 8007d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d4e:	4770      	bx	lr

08007d50 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007d50:	b480      	push	{r7}
 8007d52:	b085      	sub	sp, #20
 8007d54:	af00      	add	r7, sp, #0
 8007d56:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	691b      	ldr	r3, [r3, #16]
 8007d5c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	685b      	ldr	r3, [r3, #4]
 8007d62:	687a      	ldr	r2, [r7, #4]
 8007d64:	6892      	ldr	r2, [r2, #8]
 8007d66:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	689b      	ldr	r3, [r3, #8]
 8007d6c:	687a      	ldr	r2, [r7, #4]
 8007d6e:	6852      	ldr	r2, [r2, #4]
 8007d70:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	685b      	ldr	r3, [r3, #4]
 8007d76:	687a      	ldr	r2, [r7, #4]
 8007d78:	429a      	cmp	r2, r3
 8007d7a:	d103      	bne.n	8007d84 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	689a      	ldr	r2, [r3, #8]
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	2200      	movs	r2, #0
 8007d88:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	1e5a      	subs	r2, r3, #1
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	681b      	ldr	r3, [r3, #0]
}
 8007d98:	4618      	mov	r0, r3
 8007d9a:	3714      	adds	r7, #20
 8007d9c:	46bd      	mov	sp, r7
 8007d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da2:	4770      	bx	lr

08007da4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007da4:	b580      	push	{r7, lr}
 8007da6:	b084      	sub	sp, #16
 8007da8:	af00      	add	r7, sp, #0
 8007daa:	6078      	str	r0, [r7, #4]
 8007dac:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d10a      	bne.n	8007dce <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007db8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dbc:	f383 8811 	msr	BASEPRI, r3
 8007dc0:	f3bf 8f6f 	isb	sy
 8007dc4:	f3bf 8f4f 	dsb	sy
 8007dc8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007dca:	bf00      	nop
 8007dcc:	e7fe      	b.n	8007dcc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8007dce:	f002 f879 	bl	8009ec4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	681a      	ldr	r2, [r3, #0]
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007dda:	68f9      	ldr	r1, [r7, #12]
 8007ddc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007dde:	fb01 f303 	mul.w	r3, r1, r3
 8007de2:	441a      	add	r2, r3
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	2200      	movs	r2, #0
 8007dec:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	681a      	ldr	r2, [r3, #0]
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	681a      	ldr	r2, [r3, #0]
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007dfe:	3b01      	subs	r3, #1
 8007e00:	68f9      	ldr	r1, [r7, #12]
 8007e02:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007e04:	fb01 f303 	mul.w	r3, r1, r3
 8007e08:	441a      	add	r2, r3
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	22ff      	movs	r2, #255	; 0xff
 8007e12:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	22ff      	movs	r2, #255	; 0xff
 8007e1a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8007e1e:	683b      	ldr	r3, [r7, #0]
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d114      	bne.n	8007e4e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	691b      	ldr	r3, [r3, #16]
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d01a      	beq.n	8007e62 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	3310      	adds	r3, #16
 8007e30:	4618      	mov	r0, r3
 8007e32:	f001 f929 	bl	8009088 <xTaskRemoveFromEventList>
 8007e36:	4603      	mov	r3, r0
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d012      	beq.n	8007e62 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007e3c:	4b0c      	ldr	r3, [pc, #48]	; (8007e70 <xQueueGenericReset+0xcc>)
 8007e3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e42:	601a      	str	r2, [r3, #0]
 8007e44:	f3bf 8f4f 	dsb	sy
 8007e48:	f3bf 8f6f 	isb	sy
 8007e4c:	e009      	b.n	8007e62 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	3310      	adds	r3, #16
 8007e52:	4618      	mov	r0, r3
 8007e54:	f7ff fef2 	bl	8007c3c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	3324      	adds	r3, #36	; 0x24
 8007e5c:	4618      	mov	r0, r3
 8007e5e:	f7ff feed 	bl	8007c3c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007e62:	f002 f85f 	bl	8009f24 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007e66:	2301      	movs	r3, #1
}
 8007e68:	4618      	mov	r0, r3
 8007e6a:	3710      	adds	r7, #16
 8007e6c:	46bd      	mov	sp, r7
 8007e6e:	bd80      	pop	{r7, pc}
 8007e70:	e000ed04 	.word	0xe000ed04

08007e74 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007e74:	b580      	push	{r7, lr}
 8007e76:	b08e      	sub	sp, #56	; 0x38
 8007e78:	af02      	add	r7, sp, #8
 8007e7a:	60f8      	str	r0, [r7, #12]
 8007e7c:	60b9      	str	r1, [r7, #8]
 8007e7e:	607a      	str	r2, [r7, #4]
 8007e80:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d10a      	bne.n	8007e9e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8007e88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e8c:	f383 8811 	msr	BASEPRI, r3
 8007e90:	f3bf 8f6f 	isb	sy
 8007e94:	f3bf 8f4f 	dsb	sy
 8007e98:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007e9a:	bf00      	nop
 8007e9c:	e7fe      	b.n	8007e9c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007e9e:	683b      	ldr	r3, [r7, #0]
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d10a      	bne.n	8007eba <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8007ea4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ea8:	f383 8811 	msr	BASEPRI, r3
 8007eac:	f3bf 8f6f 	isb	sy
 8007eb0:	f3bf 8f4f 	dsb	sy
 8007eb4:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007eb6:	bf00      	nop
 8007eb8:	e7fe      	b.n	8007eb8 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d002      	beq.n	8007ec6 <xQueueGenericCreateStatic+0x52>
 8007ec0:	68bb      	ldr	r3, [r7, #8]
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d001      	beq.n	8007eca <xQueueGenericCreateStatic+0x56>
 8007ec6:	2301      	movs	r3, #1
 8007ec8:	e000      	b.n	8007ecc <xQueueGenericCreateStatic+0x58>
 8007eca:	2300      	movs	r3, #0
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d10a      	bne.n	8007ee6 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8007ed0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ed4:	f383 8811 	msr	BASEPRI, r3
 8007ed8:	f3bf 8f6f 	isb	sy
 8007edc:	f3bf 8f4f 	dsb	sy
 8007ee0:	623b      	str	r3, [r7, #32]
}
 8007ee2:	bf00      	nop
 8007ee4:	e7fe      	b.n	8007ee4 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d102      	bne.n	8007ef2 <xQueueGenericCreateStatic+0x7e>
 8007eec:	68bb      	ldr	r3, [r7, #8]
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d101      	bne.n	8007ef6 <xQueueGenericCreateStatic+0x82>
 8007ef2:	2301      	movs	r3, #1
 8007ef4:	e000      	b.n	8007ef8 <xQueueGenericCreateStatic+0x84>
 8007ef6:	2300      	movs	r3, #0
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d10a      	bne.n	8007f12 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8007efc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f00:	f383 8811 	msr	BASEPRI, r3
 8007f04:	f3bf 8f6f 	isb	sy
 8007f08:	f3bf 8f4f 	dsb	sy
 8007f0c:	61fb      	str	r3, [r7, #28]
}
 8007f0e:	bf00      	nop
 8007f10:	e7fe      	b.n	8007f10 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007f12:	2350      	movs	r3, #80	; 0x50
 8007f14:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007f16:	697b      	ldr	r3, [r7, #20]
 8007f18:	2b50      	cmp	r3, #80	; 0x50
 8007f1a:	d00a      	beq.n	8007f32 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8007f1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f20:	f383 8811 	msr	BASEPRI, r3
 8007f24:	f3bf 8f6f 	isb	sy
 8007f28:	f3bf 8f4f 	dsb	sy
 8007f2c:	61bb      	str	r3, [r7, #24]
}
 8007f2e:	bf00      	nop
 8007f30:	e7fe      	b.n	8007f30 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007f32:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007f34:	683b      	ldr	r3, [r7, #0]
 8007f36:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8007f38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d00d      	beq.n	8007f5a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007f3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f40:	2201      	movs	r2, #1
 8007f42:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007f46:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8007f4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f4c:	9300      	str	r3, [sp, #0]
 8007f4e:	4613      	mov	r3, r2
 8007f50:	687a      	ldr	r2, [r7, #4]
 8007f52:	68b9      	ldr	r1, [r7, #8]
 8007f54:	68f8      	ldr	r0, [r7, #12]
 8007f56:	f000 f805 	bl	8007f64 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007f5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8007f5c:	4618      	mov	r0, r3
 8007f5e:	3730      	adds	r7, #48	; 0x30
 8007f60:	46bd      	mov	sp, r7
 8007f62:	bd80      	pop	{r7, pc}

08007f64 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007f64:	b580      	push	{r7, lr}
 8007f66:	b084      	sub	sp, #16
 8007f68:	af00      	add	r7, sp, #0
 8007f6a:	60f8      	str	r0, [r7, #12]
 8007f6c:	60b9      	str	r1, [r7, #8]
 8007f6e:	607a      	str	r2, [r7, #4]
 8007f70:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007f72:	68bb      	ldr	r3, [r7, #8]
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d103      	bne.n	8007f80 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007f78:	69bb      	ldr	r3, [r7, #24]
 8007f7a:	69ba      	ldr	r2, [r7, #24]
 8007f7c:	601a      	str	r2, [r3, #0]
 8007f7e:	e002      	b.n	8007f86 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007f80:	69bb      	ldr	r3, [r7, #24]
 8007f82:	687a      	ldr	r2, [r7, #4]
 8007f84:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007f86:	69bb      	ldr	r3, [r7, #24]
 8007f88:	68fa      	ldr	r2, [r7, #12]
 8007f8a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007f8c:	69bb      	ldr	r3, [r7, #24]
 8007f8e:	68ba      	ldr	r2, [r7, #8]
 8007f90:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007f92:	2101      	movs	r1, #1
 8007f94:	69b8      	ldr	r0, [r7, #24]
 8007f96:	f7ff ff05 	bl	8007da4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8007f9a:	69bb      	ldr	r3, [r7, #24]
 8007f9c:	78fa      	ldrb	r2, [r7, #3]
 8007f9e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007fa2:	bf00      	nop
 8007fa4:	3710      	adds	r7, #16
 8007fa6:	46bd      	mov	sp, r7
 8007fa8:	bd80      	pop	{r7, pc}
	...

08007fac <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007fac:	b580      	push	{r7, lr}
 8007fae:	b08e      	sub	sp, #56	; 0x38
 8007fb0:	af00      	add	r7, sp, #0
 8007fb2:	60f8      	str	r0, [r7, #12]
 8007fb4:	60b9      	str	r1, [r7, #8]
 8007fb6:	607a      	str	r2, [r7, #4]
 8007fb8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007fba:	2300      	movs	r3, #0
 8007fbc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007fc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d10a      	bne.n	8007fde <xQueueGenericSend+0x32>
	__asm volatile
 8007fc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fcc:	f383 8811 	msr	BASEPRI, r3
 8007fd0:	f3bf 8f6f 	isb	sy
 8007fd4:	f3bf 8f4f 	dsb	sy
 8007fd8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007fda:	bf00      	nop
 8007fdc:	e7fe      	b.n	8007fdc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007fde:	68bb      	ldr	r3, [r7, #8]
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d103      	bne.n	8007fec <xQueueGenericSend+0x40>
 8007fe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fe6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d101      	bne.n	8007ff0 <xQueueGenericSend+0x44>
 8007fec:	2301      	movs	r3, #1
 8007fee:	e000      	b.n	8007ff2 <xQueueGenericSend+0x46>
 8007ff0:	2300      	movs	r3, #0
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d10a      	bne.n	800800c <xQueueGenericSend+0x60>
	__asm volatile
 8007ff6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ffa:	f383 8811 	msr	BASEPRI, r3
 8007ffe:	f3bf 8f6f 	isb	sy
 8008002:	f3bf 8f4f 	dsb	sy
 8008006:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008008:	bf00      	nop
 800800a:	e7fe      	b.n	800800a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800800c:	683b      	ldr	r3, [r7, #0]
 800800e:	2b02      	cmp	r3, #2
 8008010:	d103      	bne.n	800801a <xQueueGenericSend+0x6e>
 8008012:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008014:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008016:	2b01      	cmp	r3, #1
 8008018:	d101      	bne.n	800801e <xQueueGenericSend+0x72>
 800801a:	2301      	movs	r3, #1
 800801c:	e000      	b.n	8008020 <xQueueGenericSend+0x74>
 800801e:	2300      	movs	r3, #0
 8008020:	2b00      	cmp	r3, #0
 8008022:	d10a      	bne.n	800803a <xQueueGenericSend+0x8e>
	__asm volatile
 8008024:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008028:	f383 8811 	msr	BASEPRI, r3
 800802c:	f3bf 8f6f 	isb	sy
 8008030:	f3bf 8f4f 	dsb	sy
 8008034:	623b      	str	r3, [r7, #32]
}
 8008036:	bf00      	nop
 8008038:	e7fe      	b.n	8008038 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800803a:	f001 f9e7 	bl	800940c <xTaskGetSchedulerState>
 800803e:	4603      	mov	r3, r0
 8008040:	2b00      	cmp	r3, #0
 8008042:	d102      	bne.n	800804a <xQueueGenericSend+0x9e>
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	2b00      	cmp	r3, #0
 8008048:	d101      	bne.n	800804e <xQueueGenericSend+0xa2>
 800804a:	2301      	movs	r3, #1
 800804c:	e000      	b.n	8008050 <xQueueGenericSend+0xa4>
 800804e:	2300      	movs	r3, #0
 8008050:	2b00      	cmp	r3, #0
 8008052:	d10a      	bne.n	800806a <xQueueGenericSend+0xbe>
	__asm volatile
 8008054:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008058:	f383 8811 	msr	BASEPRI, r3
 800805c:	f3bf 8f6f 	isb	sy
 8008060:	f3bf 8f4f 	dsb	sy
 8008064:	61fb      	str	r3, [r7, #28]
}
 8008066:	bf00      	nop
 8008068:	e7fe      	b.n	8008068 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800806a:	f001 ff2b 	bl	8009ec4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800806e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008070:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008072:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008074:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008076:	429a      	cmp	r2, r3
 8008078:	d302      	bcc.n	8008080 <xQueueGenericSend+0xd4>
 800807a:	683b      	ldr	r3, [r7, #0]
 800807c:	2b02      	cmp	r3, #2
 800807e:	d129      	bne.n	80080d4 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008080:	683a      	ldr	r2, [r7, #0]
 8008082:	68b9      	ldr	r1, [r7, #8]
 8008084:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008086:	f000 fa0b 	bl	80084a0 <prvCopyDataToQueue>
 800808a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800808c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800808e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008090:	2b00      	cmp	r3, #0
 8008092:	d010      	beq.n	80080b6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008094:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008096:	3324      	adds	r3, #36	; 0x24
 8008098:	4618      	mov	r0, r3
 800809a:	f000 fff5 	bl	8009088 <xTaskRemoveFromEventList>
 800809e:	4603      	mov	r3, r0
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d013      	beq.n	80080cc <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80080a4:	4b3f      	ldr	r3, [pc, #252]	; (80081a4 <xQueueGenericSend+0x1f8>)
 80080a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80080aa:	601a      	str	r2, [r3, #0]
 80080ac:	f3bf 8f4f 	dsb	sy
 80080b0:	f3bf 8f6f 	isb	sy
 80080b4:	e00a      	b.n	80080cc <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80080b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d007      	beq.n	80080cc <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80080bc:	4b39      	ldr	r3, [pc, #228]	; (80081a4 <xQueueGenericSend+0x1f8>)
 80080be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80080c2:	601a      	str	r2, [r3, #0]
 80080c4:	f3bf 8f4f 	dsb	sy
 80080c8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80080cc:	f001 ff2a 	bl	8009f24 <vPortExitCritical>
				return pdPASS;
 80080d0:	2301      	movs	r3, #1
 80080d2:	e063      	b.n	800819c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d103      	bne.n	80080e2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80080da:	f001 ff23 	bl	8009f24 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80080de:	2300      	movs	r3, #0
 80080e0:	e05c      	b.n	800819c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80080e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d106      	bne.n	80080f6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80080e8:	f107 0314 	add.w	r3, r7, #20
 80080ec:	4618      	mov	r0, r3
 80080ee:	f001 f82f 	bl	8009150 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80080f2:	2301      	movs	r3, #1
 80080f4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80080f6:	f001 ff15 	bl	8009f24 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80080fa:	f000 fd9b 	bl	8008c34 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80080fe:	f001 fee1 	bl	8009ec4 <vPortEnterCritical>
 8008102:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008104:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008108:	b25b      	sxtb	r3, r3
 800810a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800810e:	d103      	bne.n	8008118 <xQueueGenericSend+0x16c>
 8008110:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008112:	2200      	movs	r2, #0
 8008114:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008118:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800811a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800811e:	b25b      	sxtb	r3, r3
 8008120:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008124:	d103      	bne.n	800812e <xQueueGenericSend+0x182>
 8008126:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008128:	2200      	movs	r2, #0
 800812a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800812e:	f001 fef9 	bl	8009f24 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008132:	1d3a      	adds	r2, r7, #4
 8008134:	f107 0314 	add.w	r3, r7, #20
 8008138:	4611      	mov	r1, r2
 800813a:	4618      	mov	r0, r3
 800813c:	f001 f81e 	bl	800917c <xTaskCheckForTimeOut>
 8008140:	4603      	mov	r3, r0
 8008142:	2b00      	cmp	r3, #0
 8008144:	d124      	bne.n	8008190 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008146:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008148:	f000 faa2 	bl	8008690 <prvIsQueueFull>
 800814c:	4603      	mov	r3, r0
 800814e:	2b00      	cmp	r3, #0
 8008150:	d018      	beq.n	8008184 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008152:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008154:	3310      	adds	r3, #16
 8008156:	687a      	ldr	r2, [r7, #4]
 8008158:	4611      	mov	r1, r2
 800815a:	4618      	mov	r0, r3
 800815c:	f000 ff44 	bl	8008fe8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008160:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008162:	f000 fa2d 	bl	80085c0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8008166:	f000 fd73 	bl	8008c50 <xTaskResumeAll>
 800816a:	4603      	mov	r3, r0
 800816c:	2b00      	cmp	r3, #0
 800816e:	f47f af7c 	bne.w	800806a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8008172:	4b0c      	ldr	r3, [pc, #48]	; (80081a4 <xQueueGenericSend+0x1f8>)
 8008174:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008178:	601a      	str	r2, [r3, #0]
 800817a:	f3bf 8f4f 	dsb	sy
 800817e:	f3bf 8f6f 	isb	sy
 8008182:	e772      	b.n	800806a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008184:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008186:	f000 fa1b 	bl	80085c0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800818a:	f000 fd61 	bl	8008c50 <xTaskResumeAll>
 800818e:	e76c      	b.n	800806a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008190:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008192:	f000 fa15 	bl	80085c0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008196:	f000 fd5b 	bl	8008c50 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800819a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800819c:	4618      	mov	r0, r3
 800819e:	3738      	adds	r7, #56	; 0x38
 80081a0:	46bd      	mov	sp, r7
 80081a2:	bd80      	pop	{r7, pc}
 80081a4:	e000ed04 	.word	0xe000ed04

080081a8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80081a8:	b580      	push	{r7, lr}
 80081aa:	b090      	sub	sp, #64	; 0x40
 80081ac:	af00      	add	r7, sp, #0
 80081ae:	60f8      	str	r0, [r7, #12]
 80081b0:	60b9      	str	r1, [r7, #8]
 80081b2:	607a      	str	r2, [r7, #4]
 80081b4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80081ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d10a      	bne.n	80081d6 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80081c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081c4:	f383 8811 	msr	BASEPRI, r3
 80081c8:	f3bf 8f6f 	isb	sy
 80081cc:	f3bf 8f4f 	dsb	sy
 80081d0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80081d2:	bf00      	nop
 80081d4:	e7fe      	b.n	80081d4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80081d6:	68bb      	ldr	r3, [r7, #8]
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d103      	bne.n	80081e4 <xQueueGenericSendFromISR+0x3c>
 80081dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d101      	bne.n	80081e8 <xQueueGenericSendFromISR+0x40>
 80081e4:	2301      	movs	r3, #1
 80081e6:	e000      	b.n	80081ea <xQueueGenericSendFromISR+0x42>
 80081e8:	2300      	movs	r3, #0
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d10a      	bne.n	8008204 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80081ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081f2:	f383 8811 	msr	BASEPRI, r3
 80081f6:	f3bf 8f6f 	isb	sy
 80081fa:	f3bf 8f4f 	dsb	sy
 80081fe:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008200:	bf00      	nop
 8008202:	e7fe      	b.n	8008202 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008204:	683b      	ldr	r3, [r7, #0]
 8008206:	2b02      	cmp	r3, #2
 8008208:	d103      	bne.n	8008212 <xQueueGenericSendFromISR+0x6a>
 800820a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800820c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800820e:	2b01      	cmp	r3, #1
 8008210:	d101      	bne.n	8008216 <xQueueGenericSendFromISR+0x6e>
 8008212:	2301      	movs	r3, #1
 8008214:	e000      	b.n	8008218 <xQueueGenericSendFromISR+0x70>
 8008216:	2300      	movs	r3, #0
 8008218:	2b00      	cmp	r3, #0
 800821a:	d10a      	bne.n	8008232 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800821c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008220:	f383 8811 	msr	BASEPRI, r3
 8008224:	f3bf 8f6f 	isb	sy
 8008228:	f3bf 8f4f 	dsb	sy
 800822c:	623b      	str	r3, [r7, #32]
}
 800822e:	bf00      	nop
 8008230:	e7fe      	b.n	8008230 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008232:	f001 ff29 	bl	800a088 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008236:	f3ef 8211 	mrs	r2, BASEPRI
 800823a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800823e:	f383 8811 	msr	BASEPRI, r3
 8008242:	f3bf 8f6f 	isb	sy
 8008246:	f3bf 8f4f 	dsb	sy
 800824a:	61fa      	str	r2, [r7, #28]
 800824c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800824e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008250:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008252:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008254:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008256:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008258:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800825a:	429a      	cmp	r2, r3
 800825c:	d302      	bcc.n	8008264 <xQueueGenericSendFromISR+0xbc>
 800825e:	683b      	ldr	r3, [r7, #0]
 8008260:	2b02      	cmp	r3, #2
 8008262:	d12f      	bne.n	80082c4 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008264:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008266:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800826a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800826e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008270:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008272:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008274:	683a      	ldr	r2, [r7, #0]
 8008276:	68b9      	ldr	r1, [r7, #8]
 8008278:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800827a:	f000 f911 	bl	80084a0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800827e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8008282:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008286:	d112      	bne.n	80082ae <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008288:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800828a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800828c:	2b00      	cmp	r3, #0
 800828e:	d016      	beq.n	80082be <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008290:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008292:	3324      	adds	r3, #36	; 0x24
 8008294:	4618      	mov	r0, r3
 8008296:	f000 fef7 	bl	8009088 <xTaskRemoveFromEventList>
 800829a:	4603      	mov	r3, r0
 800829c:	2b00      	cmp	r3, #0
 800829e:	d00e      	beq.n	80082be <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d00b      	beq.n	80082be <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	2201      	movs	r2, #1
 80082aa:	601a      	str	r2, [r3, #0]
 80082ac:	e007      	b.n	80082be <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80082ae:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80082b2:	3301      	adds	r3, #1
 80082b4:	b2db      	uxtb	r3, r3
 80082b6:	b25a      	sxtb	r2, r3
 80082b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80082be:	2301      	movs	r3, #1
 80082c0:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80082c2:	e001      	b.n	80082c8 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80082c4:	2300      	movs	r3, #0
 80082c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80082c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80082ca:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80082cc:	697b      	ldr	r3, [r7, #20]
 80082ce:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80082d2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80082d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80082d6:	4618      	mov	r0, r3
 80082d8:	3740      	adds	r7, #64	; 0x40
 80082da:	46bd      	mov	sp, r7
 80082dc:	bd80      	pop	{r7, pc}
	...

080082e0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80082e0:	b580      	push	{r7, lr}
 80082e2:	b08c      	sub	sp, #48	; 0x30
 80082e4:	af00      	add	r7, sp, #0
 80082e6:	60f8      	str	r0, [r7, #12]
 80082e8:	60b9      	str	r1, [r7, #8]
 80082ea:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80082ec:	2300      	movs	r3, #0
 80082ee:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80082f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d10a      	bne.n	8008310 <xQueueReceive+0x30>
	__asm volatile
 80082fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082fe:	f383 8811 	msr	BASEPRI, r3
 8008302:	f3bf 8f6f 	isb	sy
 8008306:	f3bf 8f4f 	dsb	sy
 800830a:	623b      	str	r3, [r7, #32]
}
 800830c:	bf00      	nop
 800830e:	e7fe      	b.n	800830e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008310:	68bb      	ldr	r3, [r7, #8]
 8008312:	2b00      	cmp	r3, #0
 8008314:	d103      	bne.n	800831e <xQueueReceive+0x3e>
 8008316:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800831a:	2b00      	cmp	r3, #0
 800831c:	d101      	bne.n	8008322 <xQueueReceive+0x42>
 800831e:	2301      	movs	r3, #1
 8008320:	e000      	b.n	8008324 <xQueueReceive+0x44>
 8008322:	2300      	movs	r3, #0
 8008324:	2b00      	cmp	r3, #0
 8008326:	d10a      	bne.n	800833e <xQueueReceive+0x5e>
	__asm volatile
 8008328:	f04f 0350 	mov.w	r3, #80	; 0x50
 800832c:	f383 8811 	msr	BASEPRI, r3
 8008330:	f3bf 8f6f 	isb	sy
 8008334:	f3bf 8f4f 	dsb	sy
 8008338:	61fb      	str	r3, [r7, #28]
}
 800833a:	bf00      	nop
 800833c:	e7fe      	b.n	800833c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800833e:	f001 f865 	bl	800940c <xTaskGetSchedulerState>
 8008342:	4603      	mov	r3, r0
 8008344:	2b00      	cmp	r3, #0
 8008346:	d102      	bne.n	800834e <xQueueReceive+0x6e>
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	2b00      	cmp	r3, #0
 800834c:	d101      	bne.n	8008352 <xQueueReceive+0x72>
 800834e:	2301      	movs	r3, #1
 8008350:	e000      	b.n	8008354 <xQueueReceive+0x74>
 8008352:	2300      	movs	r3, #0
 8008354:	2b00      	cmp	r3, #0
 8008356:	d10a      	bne.n	800836e <xQueueReceive+0x8e>
	__asm volatile
 8008358:	f04f 0350 	mov.w	r3, #80	; 0x50
 800835c:	f383 8811 	msr	BASEPRI, r3
 8008360:	f3bf 8f6f 	isb	sy
 8008364:	f3bf 8f4f 	dsb	sy
 8008368:	61bb      	str	r3, [r7, #24]
}
 800836a:	bf00      	nop
 800836c:	e7fe      	b.n	800836c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800836e:	f001 fda9 	bl	8009ec4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008372:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008374:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008376:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800837a:	2b00      	cmp	r3, #0
 800837c:	d01f      	beq.n	80083be <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800837e:	68b9      	ldr	r1, [r7, #8]
 8008380:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008382:	f000 f8f7 	bl	8008574 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008388:	1e5a      	subs	r2, r3, #1
 800838a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800838c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800838e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008390:	691b      	ldr	r3, [r3, #16]
 8008392:	2b00      	cmp	r3, #0
 8008394:	d00f      	beq.n	80083b6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008396:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008398:	3310      	adds	r3, #16
 800839a:	4618      	mov	r0, r3
 800839c:	f000 fe74 	bl	8009088 <xTaskRemoveFromEventList>
 80083a0:	4603      	mov	r3, r0
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d007      	beq.n	80083b6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80083a6:	4b3d      	ldr	r3, [pc, #244]	; (800849c <xQueueReceive+0x1bc>)
 80083a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80083ac:	601a      	str	r2, [r3, #0]
 80083ae:	f3bf 8f4f 	dsb	sy
 80083b2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80083b6:	f001 fdb5 	bl	8009f24 <vPortExitCritical>
				return pdPASS;
 80083ba:	2301      	movs	r3, #1
 80083bc:	e069      	b.n	8008492 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d103      	bne.n	80083cc <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80083c4:	f001 fdae 	bl	8009f24 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80083c8:	2300      	movs	r3, #0
 80083ca:	e062      	b.n	8008492 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80083cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d106      	bne.n	80083e0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80083d2:	f107 0310 	add.w	r3, r7, #16
 80083d6:	4618      	mov	r0, r3
 80083d8:	f000 feba 	bl	8009150 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80083dc:	2301      	movs	r3, #1
 80083de:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80083e0:	f001 fda0 	bl	8009f24 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80083e4:	f000 fc26 	bl	8008c34 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80083e8:	f001 fd6c 	bl	8009ec4 <vPortEnterCritical>
 80083ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083ee:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80083f2:	b25b      	sxtb	r3, r3
 80083f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083f8:	d103      	bne.n	8008402 <xQueueReceive+0x122>
 80083fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083fc:	2200      	movs	r2, #0
 80083fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008402:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008404:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008408:	b25b      	sxtb	r3, r3
 800840a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800840e:	d103      	bne.n	8008418 <xQueueReceive+0x138>
 8008410:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008412:	2200      	movs	r2, #0
 8008414:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008418:	f001 fd84 	bl	8009f24 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800841c:	1d3a      	adds	r2, r7, #4
 800841e:	f107 0310 	add.w	r3, r7, #16
 8008422:	4611      	mov	r1, r2
 8008424:	4618      	mov	r0, r3
 8008426:	f000 fea9 	bl	800917c <xTaskCheckForTimeOut>
 800842a:	4603      	mov	r3, r0
 800842c:	2b00      	cmp	r3, #0
 800842e:	d123      	bne.n	8008478 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008430:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008432:	f000 f917 	bl	8008664 <prvIsQueueEmpty>
 8008436:	4603      	mov	r3, r0
 8008438:	2b00      	cmp	r3, #0
 800843a:	d017      	beq.n	800846c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800843c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800843e:	3324      	adds	r3, #36	; 0x24
 8008440:	687a      	ldr	r2, [r7, #4]
 8008442:	4611      	mov	r1, r2
 8008444:	4618      	mov	r0, r3
 8008446:	f000 fdcf 	bl	8008fe8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800844a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800844c:	f000 f8b8 	bl	80085c0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008450:	f000 fbfe 	bl	8008c50 <xTaskResumeAll>
 8008454:	4603      	mov	r3, r0
 8008456:	2b00      	cmp	r3, #0
 8008458:	d189      	bne.n	800836e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800845a:	4b10      	ldr	r3, [pc, #64]	; (800849c <xQueueReceive+0x1bc>)
 800845c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008460:	601a      	str	r2, [r3, #0]
 8008462:	f3bf 8f4f 	dsb	sy
 8008466:	f3bf 8f6f 	isb	sy
 800846a:	e780      	b.n	800836e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800846c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800846e:	f000 f8a7 	bl	80085c0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008472:	f000 fbed 	bl	8008c50 <xTaskResumeAll>
 8008476:	e77a      	b.n	800836e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008478:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800847a:	f000 f8a1 	bl	80085c0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800847e:	f000 fbe7 	bl	8008c50 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008482:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008484:	f000 f8ee 	bl	8008664 <prvIsQueueEmpty>
 8008488:	4603      	mov	r3, r0
 800848a:	2b00      	cmp	r3, #0
 800848c:	f43f af6f 	beq.w	800836e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008490:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008492:	4618      	mov	r0, r3
 8008494:	3730      	adds	r7, #48	; 0x30
 8008496:	46bd      	mov	sp, r7
 8008498:	bd80      	pop	{r7, pc}
 800849a:	bf00      	nop
 800849c:	e000ed04 	.word	0xe000ed04

080084a0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80084a0:	b580      	push	{r7, lr}
 80084a2:	b086      	sub	sp, #24
 80084a4:	af00      	add	r7, sp, #0
 80084a6:	60f8      	str	r0, [r7, #12]
 80084a8:	60b9      	str	r1, [r7, #8]
 80084aa:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80084ac:	2300      	movs	r3, #0
 80084ae:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084b4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d10d      	bne.n	80084da <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d14d      	bne.n	8008562 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	689b      	ldr	r3, [r3, #8]
 80084ca:	4618      	mov	r0, r3
 80084cc:	f000 ffbc 	bl	8009448 <xTaskPriorityDisinherit>
 80084d0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	2200      	movs	r2, #0
 80084d6:	609a      	str	r2, [r3, #8]
 80084d8:	e043      	b.n	8008562 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d119      	bne.n	8008514 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	6858      	ldr	r0, [r3, #4]
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084e8:	461a      	mov	r2, r3
 80084ea:	68b9      	ldr	r1, [r7, #8]
 80084ec:	f002 f9ea 	bl	800a8c4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	685a      	ldr	r2, [r3, #4]
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084f8:	441a      	add	r2, r3
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	685a      	ldr	r2, [r3, #4]
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	689b      	ldr	r3, [r3, #8]
 8008506:	429a      	cmp	r2, r3
 8008508:	d32b      	bcc.n	8008562 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	681a      	ldr	r2, [r3, #0]
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	605a      	str	r2, [r3, #4]
 8008512:	e026      	b.n	8008562 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	68d8      	ldr	r0, [r3, #12]
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800851c:	461a      	mov	r2, r3
 800851e:	68b9      	ldr	r1, [r7, #8]
 8008520:	f002 f9d0 	bl	800a8c4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	68da      	ldr	r2, [r3, #12]
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800852c:	425b      	negs	r3, r3
 800852e:	441a      	add	r2, r3
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	68da      	ldr	r2, [r3, #12]
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	429a      	cmp	r2, r3
 800853e:	d207      	bcs.n	8008550 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	689a      	ldr	r2, [r3, #8]
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008548:	425b      	negs	r3, r3
 800854a:	441a      	add	r2, r3
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	2b02      	cmp	r3, #2
 8008554:	d105      	bne.n	8008562 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008556:	693b      	ldr	r3, [r7, #16]
 8008558:	2b00      	cmp	r3, #0
 800855a:	d002      	beq.n	8008562 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800855c:	693b      	ldr	r3, [r7, #16]
 800855e:	3b01      	subs	r3, #1
 8008560:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008562:	693b      	ldr	r3, [r7, #16]
 8008564:	1c5a      	adds	r2, r3, #1
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800856a:	697b      	ldr	r3, [r7, #20]
}
 800856c:	4618      	mov	r0, r3
 800856e:	3718      	adds	r7, #24
 8008570:	46bd      	mov	sp, r7
 8008572:	bd80      	pop	{r7, pc}

08008574 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008574:	b580      	push	{r7, lr}
 8008576:	b082      	sub	sp, #8
 8008578:	af00      	add	r7, sp, #0
 800857a:	6078      	str	r0, [r7, #4]
 800857c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008582:	2b00      	cmp	r3, #0
 8008584:	d018      	beq.n	80085b8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	68da      	ldr	r2, [r3, #12]
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800858e:	441a      	add	r2, r3
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	68da      	ldr	r2, [r3, #12]
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	689b      	ldr	r3, [r3, #8]
 800859c:	429a      	cmp	r2, r3
 800859e:	d303      	bcc.n	80085a8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	681a      	ldr	r2, [r3, #0]
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	68d9      	ldr	r1, [r3, #12]
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085b0:	461a      	mov	r2, r3
 80085b2:	6838      	ldr	r0, [r7, #0]
 80085b4:	f002 f986 	bl	800a8c4 <memcpy>
	}
}
 80085b8:	bf00      	nop
 80085ba:	3708      	adds	r7, #8
 80085bc:	46bd      	mov	sp, r7
 80085be:	bd80      	pop	{r7, pc}

080085c0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80085c0:	b580      	push	{r7, lr}
 80085c2:	b084      	sub	sp, #16
 80085c4:	af00      	add	r7, sp, #0
 80085c6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80085c8:	f001 fc7c 	bl	8009ec4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80085d2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80085d4:	e011      	b.n	80085fa <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d012      	beq.n	8008604 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	3324      	adds	r3, #36	; 0x24
 80085e2:	4618      	mov	r0, r3
 80085e4:	f000 fd50 	bl	8009088 <xTaskRemoveFromEventList>
 80085e8:	4603      	mov	r3, r0
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d001      	beq.n	80085f2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80085ee:	f000 fe27 	bl	8009240 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80085f2:	7bfb      	ldrb	r3, [r7, #15]
 80085f4:	3b01      	subs	r3, #1
 80085f6:	b2db      	uxtb	r3, r3
 80085f8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80085fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80085fe:	2b00      	cmp	r3, #0
 8008600:	dce9      	bgt.n	80085d6 <prvUnlockQueue+0x16>
 8008602:	e000      	b.n	8008606 <prvUnlockQueue+0x46>
					break;
 8008604:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	22ff      	movs	r2, #255	; 0xff
 800860a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800860e:	f001 fc89 	bl	8009f24 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008612:	f001 fc57 	bl	8009ec4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800861c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800861e:	e011      	b.n	8008644 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	691b      	ldr	r3, [r3, #16]
 8008624:	2b00      	cmp	r3, #0
 8008626:	d012      	beq.n	800864e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	3310      	adds	r3, #16
 800862c:	4618      	mov	r0, r3
 800862e:	f000 fd2b 	bl	8009088 <xTaskRemoveFromEventList>
 8008632:	4603      	mov	r3, r0
 8008634:	2b00      	cmp	r3, #0
 8008636:	d001      	beq.n	800863c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008638:	f000 fe02 	bl	8009240 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800863c:	7bbb      	ldrb	r3, [r7, #14]
 800863e:	3b01      	subs	r3, #1
 8008640:	b2db      	uxtb	r3, r3
 8008642:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008644:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008648:	2b00      	cmp	r3, #0
 800864a:	dce9      	bgt.n	8008620 <prvUnlockQueue+0x60>
 800864c:	e000      	b.n	8008650 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800864e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	22ff      	movs	r2, #255	; 0xff
 8008654:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8008658:	f001 fc64 	bl	8009f24 <vPortExitCritical>
}
 800865c:	bf00      	nop
 800865e:	3710      	adds	r7, #16
 8008660:	46bd      	mov	sp, r7
 8008662:	bd80      	pop	{r7, pc}

08008664 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008664:	b580      	push	{r7, lr}
 8008666:	b084      	sub	sp, #16
 8008668:	af00      	add	r7, sp, #0
 800866a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800866c:	f001 fc2a 	bl	8009ec4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008674:	2b00      	cmp	r3, #0
 8008676:	d102      	bne.n	800867e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008678:	2301      	movs	r3, #1
 800867a:	60fb      	str	r3, [r7, #12]
 800867c:	e001      	b.n	8008682 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800867e:	2300      	movs	r3, #0
 8008680:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008682:	f001 fc4f 	bl	8009f24 <vPortExitCritical>

	return xReturn;
 8008686:	68fb      	ldr	r3, [r7, #12]
}
 8008688:	4618      	mov	r0, r3
 800868a:	3710      	adds	r7, #16
 800868c:	46bd      	mov	sp, r7
 800868e:	bd80      	pop	{r7, pc}

08008690 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008690:	b580      	push	{r7, lr}
 8008692:	b084      	sub	sp, #16
 8008694:	af00      	add	r7, sp, #0
 8008696:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008698:	f001 fc14 	bl	8009ec4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80086a4:	429a      	cmp	r2, r3
 80086a6:	d102      	bne.n	80086ae <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80086a8:	2301      	movs	r3, #1
 80086aa:	60fb      	str	r3, [r7, #12]
 80086ac:	e001      	b.n	80086b2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80086ae:	2300      	movs	r3, #0
 80086b0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80086b2:	f001 fc37 	bl	8009f24 <vPortExitCritical>

	return xReturn;
 80086b6:	68fb      	ldr	r3, [r7, #12]
}
 80086b8:	4618      	mov	r0, r3
 80086ba:	3710      	adds	r7, #16
 80086bc:	46bd      	mov	sp, r7
 80086be:	bd80      	pop	{r7, pc}

080086c0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80086c0:	b480      	push	{r7}
 80086c2:	b085      	sub	sp, #20
 80086c4:	af00      	add	r7, sp, #0
 80086c6:	6078      	str	r0, [r7, #4]
 80086c8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80086ca:	2300      	movs	r3, #0
 80086cc:	60fb      	str	r3, [r7, #12]
 80086ce:	e014      	b.n	80086fa <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80086d0:	4a0f      	ldr	r2, [pc, #60]	; (8008710 <vQueueAddToRegistry+0x50>)
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d10b      	bne.n	80086f4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80086dc:	490c      	ldr	r1, [pc, #48]	; (8008710 <vQueueAddToRegistry+0x50>)
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	683a      	ldr	r2, [r7, #0]
 80086e2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80086e6:	4a0a      	ldr	r2, [pc, #40]	; (8008710 <vQueueAddToRegistry+0x50>)
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	00db      	lsls	r3, r3, #3
 80086ec:	4413      	add	r3, r2
 80086ee:	687a      	ldr	r2, [r7, #4]
 80086f0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80086f2:	e006      	b.n	8008702 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	3301      	adds	r3, #1
 80086f8:	60fb      	str	r3, [r7, #12]
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	2b07      	cmp	r3, #7
 80086fe:	d9e7      	bls.n	80086d0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008700:	bf00      	nop
 8008702:	bf00      	nop
 8008704:	3714      	adds	r7, #20
 8008706:	46bd      	mov	sp, r7
 8008708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800870c:	4770      	bx	lr
 800870e:	bf00      	nop
 8008710:	2000140c 	.word	0x2000140c

08008714 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008714:	b580      	push	{r7, lr}
 8008716:	b086      	sub	sp, #24
 8008718:	af00      	add	r7, sp, #0
 800871a:	60f8      	str	r0, [r7, #12]
 800871c:	60b9      	str	r1, [r7, #8]
 800871e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008724:	f001 fbce 	bl	8009ec4 <vPortEnterCritical>
 8008728:	697b      	ldr	r3, [r7, #20]
 800872a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800872e:	b25b      	sxtb	r3, r3
 8008730:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008734:	d103      	bne.n	800873e <vQueueWaitForMessageRestricted+0x2a>
 8008736:	697b      	ldr	r3, [r7, #20]
 8008738:	2200      	movs	r2, #0
 800873a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800873e:	697b      	ldr	r3, [r7, #20]
 8008740:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008744:	b25b      	sxtb	r3, r3
 8008746:	f1b3 3fff 	cmp.w	r3, #4294967295
 800874a:	d103      	bne.n	8008754 <vQueueWaitForMessageRestricted+0x40>
 800874c:	697b      	ldr	r3, [r7, #20]
 800874e:	2200      	movs	r2, #0
 8008750:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008754:	f001 fbe6 	bl	8009f24 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008758:	697b      	ldr	r3, [r7, #20]
 800875a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800875c:	2b00      	cmp	r3, #0
 800875e:	d106      	bne.n	800876e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008760:	697b      	ldr	r3, [r7, #20]
 8008762:	3324      	adds	r3, #36	; 0x24
 8008764:	687a      	ldr	r2, [r7, #4]
 8008766:	68b9      	ldr	r1, [r7, #8]
 8008768:	4618      	mov	r0, r3
 800876a:	f000 fc61 	bl	8009030 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800876e:	6978      	ldr	r0, [r7, #20]
 8008770:	f7ff ff26 	bl	80085c0 <prvUnlockQueue>
	}
 8008774:	bf00      	nop
 8008776:	3718      	adds	r7, #24
 8008778:	46bd      	mov	sp, r7
 800877a:	bd80      	pop	{r7, pc}

0800877c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800877c:	b580      	push	{r7, lr}
 800877e:	b08e      	sub	sp, #56	; 0x38
 8008780:	af04      	add	r7, sp, #16
 8008782:	60f8      	str	r0, [r7, #12]
 8008784:	60b9      	str	r1, [r7, #8]
 8008786:	607a      	str	r2, [r7, #4]
 8008788:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800878a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800878c:	2b00      	cmp	r3, #0
 800878e:	d10a      	bne.n	80087a6 <xTaskCreateStatic+0x2a>
	__asm volatile
 8008790:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008794:	f383 8811 	msr	BASEPRI, r3
 8008798:	f3bf 8f6f 	isb	sy
 800879c:	f3bf 8f4f 	dsb	sy
 80087a0:	623b      	str	r3, [r7, #32]
}
 80087a2:	bf00      	nop
 80087a4:	e7fe      	b.n	80087a4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80087a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d10a      	bne.n	80087c2 <xTaskCreateStatic+0x46>
	__asm volatile
 80087ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087b0:	f383 8811 	msr	BASEPRI, r3
 80087b4:	f3bf 8f6f 	isb	sy
 80087b8:	f3bf 8f4f 	dsb	sy
 80087bc:	61fb      	str	r3, [r7, #28]
}
 80087be:	bf00      	nop
 80087c0:	e7fe      	b.n	80087c0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80087c2:	23bc      	movs	r3, #188	; 0xbc
 80087c4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80087c6:	693b      	ldr	r3, [r7, #16]
 80087c8:	2bbc      	cmp	r3, #188	; 0xbc
 80087ca:	d00a      	beq.n	80087e2 <xTaskCreateStatic+0x66>
	__asm volatile
 80087cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087d0:	f383 8811 	msr	BASEPRI, r3
 80087d4:	f3bf 8f6f 	isb	sy
 80087d8:	f3bf 8f4f 	dsb	sy
 80087dc:	61bb      	str	r3, [r7, #24]
}
 80087de:	bf00      	nop
 80087e0:	e7fe      	b.n	80087e0 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80087e2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80087e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d01e      	beq.n	8008828 <xTaskCreateStatic+0xac>
 80087ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d01b      	beq.n	8008828 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80087f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087f2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80087f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087f6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80087f8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80087fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087fc:	2202      	movs	r2, #2
 80087fe:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008802:	2300      	movs	r3, #0
 8008804:	9303      	str	r3, [sp, #12]
 8008806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008808:	9302      	str	r3, [sp, #8]
 800880a:	f107 0314 	add.w	r3, r7, #20
 800880e:	9301      	str	r3, [sp, #4]
 8008810:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008812:	9300      	str	r3, [sp, #0]
 8008814:	683b      	ldr	r3, [r7, #0]
 8008816:	687a      	ldr	r2, [r7, #4]
 8008818:	68b9      	ldr	r1, [r7, #8]
 800881a:	68f8      	ldr	r0, [r7, #12]
 800881c:	f000 f850 	bl	80088c0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008820:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008822:	f000 f8f3 	bl	8008a0c <prvAddNewTaskToReadyList>
 8008826:	e001      	b.n	800882c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8008828:	2300      	movs	r3, #0
 800882a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800882c:	697b      	ldr	r3, [r7, #20]
	}
 800882e:	4618      	mov	r0, r3
 8008830:	3728      	adds	r7, #40	; 0x28
 8008832:	46bd      	mov	sp, r7
 8008834:	bd80      	pop	{r7, pc}

08008836 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008836:	b580      	push	{r7, lr}
 8008838:	b08c      	sub	sp, #48	; 0x30
 800883a:	af04      	add	r7, sp, #16
 800883c:	60f8      	str	r0, [r7, #12]
 800883e:	60b9      	str	r1, [r7, #8]
 8008840:	603b      	str	r3, [r7, #0]
 8008842:	4613      	mov	r3, r2
 8008844:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008846:	88fb      	ldrh	r3, [r7, #6]
 8008848:	009b      	lsls	r3, r3, #2
 800884a:	4618      	mov	r0, r3
 800884c:	f001 fc5c 	bl	800a108 <pvPortMalloc>
 8008850:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008852:	697b      	ldr	r3, [r7, #20]
 8008854:	2b00      	cmp	r3, #0
 8008856:	d00e      	beq.n	8008876 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008858:	20bc      	movs	r0, #188	; 0xbc
 800885a:	f001 fc55 	bl	800a108 <pvPortMalloc>
 800885e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008860:	69fb      	ldr	r3, [r7, #28]
 8008862:	2b00      	cmp	r3, #0
 8008864:	d003      	beq.n	800886e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008866:	69fb      	ldr	r3, [r7, #28]
 8008868:	697a      	ldr	r2, [r7, #20]
 800886a:	631a      	str	r2, [r3, #48]	; 0x30
 800886c:	e005      	b.n	800887a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800886e:	6978      	ldr	r0, [r7, #20]
 8008870:	f001 fd16 	bl	800a2a0 <vPortFree>
 8008874:	e001      	b.n	800887a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008876:	2300      	movs	r3, #0
 8008878:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800887a:	69fb      	ldr	r3, [r7, #28]
 800887c:	2b00      	cmp	r3, #0
 800887e:	d017      	beq.n	80088b0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008880:	69fb      	ldr	r3, [r7, #28]
 8008882:	2200      	movs	r2, #0
 8008884:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008888:	88fa      	ldrh	r2, [r7, #6]
 800888a:	2300      	movs	r3, #0
 800888c:	9303      	str	r3, [sp, #12]
 800888e:	69fb      	ldr	r3, [r7, #28]
 8008890:	9302      	str	r3, [sp, #8]
 8008892:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008894:	9301      	str	r3, [sp, #4]
 8008896:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008898:	9300      	str	r3, [sp, #0]
 800889a:	683b      	ldr	r3, [r7, #0]
 800889c:	68b9      	ldr	r1, [r7, #8]
 800889e:	68f8      	ldr	r0, [r7, #12]
 80088a0:	f000 f80e 	bl	80088c0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80088a4:	69f8      	ldr	r0, [r7, #28]
 80088a6:	f000 f8b1 	bl	8008a0c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80088aa:	2301      	movs	r3, #1
 80088ac:	61bb      	str	r3, [r7, #24]
 80088ae:	e002      	b.n	80088b6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80088b0:	f04f 33ff 	mov.w	r3, #4294967295
 80088b4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80088b6:	69bb      	ldr	r3, [r7, #24]
	}
 80088b8:	4618      	mov	r0, r3
 80088ba:	3720      	adds	r7, #32
 80088bc:	46bd      	mov	sp, r7
 80088be:	bd80      	pop	{r7, pc}

080088c0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80088c0:	b580      	push	{r7, lr}
 80088c2:	b088      	sub	sp, #32
 80088c4:	af00      	add	r7, sp, #0
 80088c6:	60f8      	str	r0, [r7, #12]
 80088c8:	60b9      	str	r1, [r7, #8]
 80088ca:	607a      	str	r2, [r7, #4]
 80088cc:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80088ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088d0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	009b      	lsls	r3, r3, #2
 80088d6:	461a      	mov	r2, r3
 80088d8:	21a5      	movs	r1, #165	; 0xa5
 80088da:	f002 f81b 	bl	800a914 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80088de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80088e8:	3b01      	subs	r3, #1
 80088ea:	009b      	lsls	r3, r3, #2
 80088ec:	4413      	add	r3, r2
 80088ee:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80088f0:	69bb      	ldr	r3, [r7, #24]
 80088f2:	f023 0307 	bic.w	r3, r3, #7
 80088f6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80088f8:	69bb      	ldr	r3, [r7, #24]
 80088fa:	f003 0307 	and.w	r3, r3, #7
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d00a      	beq.n	8008918 <prvInitialiseNewTask+0x58>
	__asm volatile
 8008902:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008906:	f383 8811 	msr	BASEPRI, r3
 800890a:	f3bf 8f6f 	isb	sy
 800890e:	f3bf 8f4f 	dsb	sy
 8008912:	617b      	str	r3, [r7, #20]
}
 8008914:	bf00      	nop
 8008916:	e7fe      	b.n	8008916 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008918:	68bb      	ldr	r3, [r7, #8]
 800891a:	2b00      	cmp	r3, #0
 800891c:	d01f      	beq.n	800895e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800891e:	2300      	movs	r3, #0
 8008920:	61fb      	str	r3, [r7, #28]
 8008922:	e012      	b.n	800894a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008924:	68ba      	ldr	r2, [r7, #8]
 8008926:	69fb      	ldr	r3, [r7, #28]
 8008928:	4413      	add	r3, r2
 800892a:	7819      	ldrb	r1, [r3, #0]
 800892c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800892e:	69fb      	ldr	r3, [r7, #28]
 8008930:	4413      	add	r3, r2
 8008932:	3334      	adds	r3, #52	; 0x34
 8008934:	460a      	mov	r2, r1
 8008936:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008938:	68ba      	ldr	r2, [r7, #8]
 800893a:	69fb      	ldr	r3, [r7, #28]
 800893c:	4413      	add	r3, r2
 800893e:	781b      	ldrb	r3, [r3, #0]
 8008940:	2b00      	cmp	r3, #0
 8008942:	d006      	beq.n	8008952 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008944:	69fb      	ldr	r3, [r7, #28]
 8008946:	3301      	adds	r3, #1
 8008948:	61fb      	str	r3, [r7, #28]
 800894a:	69fb      	ldr	r3, [r7, #28]
 800894c:	2b0f      	cmp	r3, #15
 800894e:	d9e9      	bls.n	8008924 <prvInitialiseNewTask+0x64>
 8008950:	e000      	b.n	8008954 <prvInitialiseNewTask+0x94>
			{
				break;
 8008952:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008954:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008956:	2200      	movs	r2, #0
 8008958:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800895c:	e003      	b.n	8008966 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800895e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008960:	2200      	movs	r2, #0
 8008962:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008966:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008968:	2b37      	cmp	r3, #55	; 0x37
 800896a:	d901      	bls.n	8008970 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800896c:	2337      	movs	r3, #55	; 0x37
 800896e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008970:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008972:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008974:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008976:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008978:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800897a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800897c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800897e:	2200      	movs	r2, #0
 8008980:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008982:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008984:	3304      	adds	r3, #4
 8008986:	4618      	mov	r0, r3
 8008988:	f7ff f978 	bl	8007c7c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800898c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800898e:	3318      	adds	r3, #24
 8008990:	4618      	mov	r0, r3
 8008992:	f7ff f973 	bl	8007c7c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008996:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008998:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800899a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800899c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800899e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80089a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089a4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80089a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80089aa:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80089ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089ae:	2200      	movs	r2, #0
 80089b0:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80089b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089b6:	2200      	movs	r2, #0
 80089b8:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80089bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089be:	3354      	adds	r3, #84	; 0x54
 80089c0:	2260      	movs	r2, #96	; 0x60
 80089c2:	2100      	movs	r1, #0
 80089c4:	4618      	mov	r0, r3
 80089c6:	f001 ffa5 	bl	800a914 <memset>
 80089ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089cc:	4a0c      	ldr	r2, [pc, #48]	; (8008a00 <prvInitialiseNewTask+0x140>)
 80089ce:	659a      	str	r2, [r3, #88]	; 0x58
 80089d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089d2:	4a0c      	ldr	r2, [pc, #48]	; (8008a04 <prvInitialiseNewTask+0x144>)
 80089d4:	65da      	str	r2, [r3, #92]	; 0x5c
 80089d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089d8:	4a0b      	ldr	r2, [pc, #44]	; (8008a08 <prvInitialiseNewTask+0x148>)
 80089da:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80089dc:	683a      	ldr	r2, [r7, #0]
 80089de:	68f9      	ldr	r1, [r7, #12]
 80089e0:	69b8      	ldr	r0, [r7, #24]
 80089e2:	f001 f941 	bl	8009c68 <pxPortInitialiseStack>
 80089e6:	4602      	mov	r2, r0
 80089e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089ea:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80089ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d002      	beq.n	80089f8 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80089f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80089f6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80089f8:	bf00      	nop
 80089fa:	3720      	adds	r7, #32
 80089fc:	46bd      	mov	sp, r7
 80089fe:	bd80      	pop	{r7, pc}
 8008a00:	0800b134 	.word	0x0800b134
 8008a04:	0800b154 	.word	0x0800b154
 8008a08:	0800b114 	.word	0x0800b114

08008a0c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008a0c:	b580      	push	{r7, lr}
 8008a0e:	b082      	sub	sp, #8
 8008a10:	af00      	add	r7, sp, #0
 8008a12:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008a14:	f001 fa56 	bl	8009ec4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008a18:	4b2d      	ldr	r3, [pc, #180]	; (8008ad0 <prvAddNewTaskToReadyList+0xc4>)
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	3301      	adds	r3, #1
 8008a1e:	4a2c      	ldr	r2, [pc, #176]	; (8008ad0 <prvAddNewTaskToReadyList+0xc4>)
 8008a20:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008a22:	4b2c      	ldr	r3, [pc, #176]	; (8008ad4 <prvAddNewTaskToReadyList+0xc8>)
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d109      	bne.n	8008a3e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008a2a:	4a2a      	ldr	r2, [pc, #168]	; (8008ad4 <prvAddNewTaskToReadyList+0xc8>)
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008a30:	4b27      	ldr	r3, [pc, #156]	; (8008ad0 <prvAddNewTaskToReadyList+0xc4>)
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	2b01      	cmp	r3, #1
 8008a36:	d110      	bne.n	8008a5a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008a38:	f000 fc26 	bl	8009288 <prvInitialiseTaskLists>
 8008a3c:	e00d      	b.n	8008a5a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008a3e:	4b26      	ldr	r3, [pc, #152]	; (8008ad8 <prvAddNewTaskToReadyList+0xcc>)
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d109      	bne.n	8008a5a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008a46:	4b23      	ldr	r3, [pc, #140]	; (8008ad4 <prvAddNewTaskToReadyList+0xc8>)
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a50:	429a      	cmp	r2, r3
 8008a52:	d802      	bhi.n	8008a5a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008a54:	4a1f      	ldr	r2, [pc, #124]	; (8008ad4 <prvAddNewTaskToReadyList+0xc8>)
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008a5a:	4b20      	ldr	r3, [pc, #128]	; (8008adc <prvAddNewTaskToReadyList+0xd0>)
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	3301      	adds	r3, #1
 8008a60:	4a1e      	ldr	r2, [pc, #120]	; (8008adc <prvAddNewTaskToReadyList+0xd0>)
 8008a62:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008a64:	4b1d      	ldr	r3, [pc, #116]	; (8008adc <prvAddNewTaskToReadyList+0xd0>)
 8008a66:	681a      	ldr	r2, [r3, #0]
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a70:	4b1b      	ldr	r3, [pc, #108]	; (8008ae0 <prvAddNewTaskToReadyList+0xd4>)
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	429a      	cmp	r2, r3
 8008a76:	d903      	bls.n	8008a80 <prvAddNewTaskToReadyList+0x74>
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a7c:	4a18      	ldr	r2, [pc, #96]	; (8008ae0 <prvAddNewTaskToReadyList+0xd4>)
 8008a7e:	6013      	str	r3, [r2, #0]
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a84:	4613      	mov	r3, r2
 8008a86:	009b      	lsls	r3, r3, #2
 8008a88:	4413      	add	r3, r2
 8008a8a:	009b      	lsls	r3, r3, #2
 8008a8c:	4a15      	ldr	r2, [pc, #84]	; (8008ae4 <prvAddNewTaskToReadyList+0xd8>)
 8008a8e:	441a      	add	r2, r3
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	3304      	adds	r3, #4
 8008a94:	4619      	mov	r1, r3
 8008a96:	4610      	mov	r0, r2
 8008a98:	f7ff f8fd 	bl	8007c96 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008a9c:	f001 fa42 	bl	8009f24 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008aa0:	4b0d      	ldr	r3, [pc, #52]	; (8008ad8 <prvAddNewTaskToReadyList+0xcc>)
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d00e      	beq.n	8008ac6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008aa8:	4b0a      	ldr	r3, [pc, #40]	; (8008ad4 <prvAddNewTaskToReadyList+0xc8>)
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ab2:	429a      	cmp	r2, r3
 8008ab4:	d207      	bcs.n	8008ac6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008ab6:	4b0c      	ldr	r3, [pc, #48]	; (8008ae8 <prvAddNewTaskToReadyList+0xdc>)
 8008ab8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008abc:	601a      	str	r2, [r3, #0]
 8008abe:	f3bf 8f4f 	dsb	sy
 8008ac2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008ac6:	bf00      	nop
 8008ac8:	3708      	adds	r7, #8
 8008aca:	46bd      	mov	sp, r7
 8008acc:	bd80      	pop	{r7, pc}
 8008ace:	bf00      	nop
 8008ad0:	20001920 	.word	0x20001920
 8008ad4:	2000144c 	.word	0x2000144c
 8008ad8:	2000192c 	.word	0x2000192c
 8008adc:	2000193c 	.word	0x2000193c
 8008ae0:	20001928 	.word	0x20001928
 8008ae4:	20001450 	.word	0x20001450
 8008ae8:	e000ed04 	.word	0xe000ed04

08008aec <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008aec:	b580      	push	{r7, lr}
 8008aee:	b084      	sub	sp, #16
 8008af0:	af00      	add	r7, sp, #0
 8008af2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008af4:	2300      	movs	r3, #0
 8008af6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d017      	beq.n	8008b2e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008afe:	4b13      	ldr	r3, [pc, #76]	; (8008b4c <vTaskDelay+0x60>)
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d00a      	beq.n	8008b1c <vTaskDelay+0x30>
	__asm volatile
 8008b06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b0a:	f383 8811 	msr	BASEPRI, r3
 8008b0e:	f3bf 8f6f 	isb	sy
 8008b12:	f3bf 8f4f 	dsb	sy
 8008b16:	60bb      	str	r3, [r7, #8]
}
 8008b18:	bf00      	nop
 8008b1a:	e7fe      	b.n	8008b1a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008b1c:	f000 f88a 	bl	8008c34 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008b20:	2100      	movs	r1, #0
 8008b22:	6878      	ldr	r0, [r7, #4]
 8008b24:	f000 fcfe 	bl	8009524 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008b28:	f000 f892 	bl	8008c50 <xTaskResumeAll>
 8008b2c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d107      	bne.n	8008b44 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8008b34:	4b06      	ldr	r3, [pc, #24]	; (8008b50 <vTaskDelay+0x64>)
 8008b36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008b3a:	601a      	str	r2, [r3, #0]
 8008b3c:	f3bf 8f4f 	dsb	sy
 8008b40:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008b44:	bf00      	nop
 8008b46:	3710      	adds	r7, #16
 8008b48:	46bd      	mov	sp, r7
 8008b4a:	bd80      	pop	{r7, pc}
 8008b4c:	20001948 	.word	0x20001948
 8008b50:	e000ed04 	.word	0xe000ed04

08008b54 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008b54:	b580      	push	{r7, lr}
 8008b56:	b08a      	sub	sp, #40	; 0x28
 8008b58:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008b5a:	2300      	movs	r3, #0
 8008b5c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008b5e:	2300      	movs	r3, #0
 8008b60:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008b62:	463a      	mov	r2, r7
 8008b64:	1d39      	adds	r1, r7, #4
 8008b66:	f107 0308 	add.w	r3, r7, #8
 8008b6a:	4618      	mov	r0, r3
 8008b6c:	f7ff f832 	bl	8007bd4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008b70:	6839      	ldr	r1, [r7, #0]
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	68ba      	ldr	r2, [r7, #8]
 8008b76:	9202      	str	r2, [sp, #8]
 8008b78:	9301      	str	r3, [sp, #4]
 8008b7a:	2300      	movs	r3, #0
 8008b7c:	9300      	str	r3, [sp, #0]
 8008b7e:	2300      	movs	r3, #0
 8008b80:	460a      	mov	r2, r1
 8008b82:	4924      	ldr	r1, [pc, #144]	; (8008c14 <vTaskStartScheduler+0xc0>)
 8008b84:	4824      	ldr	r0, [pc, #144]	; (8008c18 <vTaskStartScheduler+0xc4>)
 8008b86:	f7ff fdf9 	bl	800877c <xTaskCreateStatic>
 8008b8a:	4603      	mov	r3, r0
 8008b8c:	4a23      	ldr	r2, [pc, #140]	; (8008c1c <vTaskStartScheduler+0xc8>)
 8008b8e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008b90:	4b22      	ldr	r3, [pc, #136]	; (8008c1c <vTaskStartScheduler+0xc8>)
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d002      	beq.n	8008b9e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008b98:	2301      	movs	r3, #1
 8008b9a:	617b      	str	r3, [r7, #20]
 8008b9c:	e001      	b.n	8008ba2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008b9e:	2300      	movs	r3, #0
 8008ba0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8008ba2:	697b      	ldr	r3, [r7, #20]
 8008ba4:	2b01      	cmp	r3, #1
 8008ba6:	d102      	bne.n	8008bae <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008ba8:	f000 fd10 	bl	80095cc <xTimerCreateTimerTask>
 8008bac:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008bae:	697b      	ldr	r3, [r7, #20]
 8008bb0:	2b01      	cmp	r3, #1
 8008bb2:	d11b      	bne.n	8008bec <vTaskStartScheduler+0x98>
	__asm volatile
 8008bb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bb8:	f383 8811 	msr	BASEPRI, r3
 8008bbc:	f3bf 8f6f 	isb	sy
 8008bc0:	f3bf 8f4f 	dsb	sy
 8008bc4:	613b      	str	r3, [r7, #16]
}
 8008bc6:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008bc8:	4b15      	ldr	r3, [pc, #84]	; (8008c20 <vTaskStartScheduler+0xcc>)
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	3354      	adds	r3, #84	; 0x54
 8008bce:	4a15      	ldr	r2, [pc, #84]	; (8008c24 <vTaskStartScheduler+0xd0>)
 8008bd0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008bd2:	4b15      	ldr	r3, [pc, #84]	; (8008c28 <vTaskStartScheduler+0xd4>)
 8008bd4:	f04f 32ff 	mov.w	r2, #4294967295
 8008bd8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008bda:	4b14      	ldr	r3, [pc, #80]	; (8008c2c <vTaskStartScheduler+0xd8>)
 8008bdc:	2201      	movs	r2, #1
 8008bde:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008be0:	4b13      	ldr	r3, [pc, #76]	; (8008c30 <vTaskStartScheduler+0xdc>)
 8008be2:	2200      	movs	r2, #0
 8008be4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008be6:	f001 f8cb 	bl	8009d80 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008bea:	e00e      	b.n	8008c0a <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008bec:	697b      	ldr	r3, [r7, #20]
 8008bee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008bf2:	d10a      	bne.n	8008c0a <vTaskStartScheduler+0xb6>
	__asm volatile
 8008bf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bf8:	f383 8811 	msr	BASEPRI, r3
 8008bfc:	f3bf 8f6f 	isb	sy
 8008c00:	f3bf 8f4f 	dsb	sy
 8008c04:	60fb      	str	r3, [r7, #12]
}
 8008c06:	bf00      	nop
 8008c08:	e7fe      	b.n	8008c08 <vTaskStartScheduler+0xb4>
}
 8008c0a:	bf00      	nop
 8008c0c:	3718      	adds	r7, #24
 8008c0e:	46bd      	mov	sp, r7
 8008c10:	bd80      	pop	{r7, pc}
 8008c12:	bf00      	nop
 8008c14:	0800aec8 	.word	0x0800aec8
 8008c18:	08009259 	.word	0x08009259
 8008c1c:	20001944 	.word	0x20001944
 8008c20:	2000144c 	.word	0x2000144c
 8008c24:	20000014 	.word	0x20000014
 8008c28:	20001940 	.word	0x20001940
 8008c2c:	2000192c 	.word	0x2000192c
 8008c30:	20001924 	.word	0x20001924

08008c34 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008c34:	b480      	push	{r7}
 8008c36:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008c38:	4b04      	ldr	r3, [pc, #16]	; (8008c4c <vTaskSuspendAll+0x18>)
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	3301      	adds	r3, #1
 8008c3e:	4a03      	ldr	r2, [pc, #12]	; (8008c4c <vTaskSuspendAll+0x18>)
 8008c40:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8008c42:	bf00      	nop
 8008c44:	46bd      	mov	sp, r7
 8008c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c4a:	4770      	bx	lr
 8008c4c:	20001948 	.word	0x20001948

08008c50 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008c50:	b580      	push	{r7, lr}
 8008c52:	b084      	sub	sp, #16
 8008c54:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008c56:	2300      	movs	r3, #0
 8008c58:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008c5a:	2300      	movs	r3, #0
 8008c5c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008c5e:	4b42      	ldr	r3, [pc, #264]	; (8008d68 <xTaskResumeAll+0x118>)
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d10a      	bne.n	8008c7c <xTaskResumeAll+0x2c>
	__asm volatile
 8008c66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c6a:	f383 8811 	msr	BASEPRI, r3
 8008c6e:	f3bf 8f6f 	isb	sy
 8008c72:	f3bf 8f4f 	dsb	sy
 8008c76:	603b      	str	r3, [r7, #0]
}
 8008c78:	bf00      	nop
 8008c7a:	e7fe      	b.n	8008c7a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008c7c:	f001 f922 	bl	8009ec4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008c80:	4b39      	ldr	r3, [pc, #228]	; (8008d68 <xTaskResumeAll+0x118>)
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	3b01      	subs	r3, #1
 8008c86:	4a38      	ldr	r2, [pc, #224]	; (8008d68 <xTaskResumeAll+0x118>)
 8008c88:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008c8a:	4b37      	ldr	r3, [pc, #220]	; (8008d68 <xTaskResumeAll+0x118>)
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d162      	bne.n	8008d58 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008c92:	4b36      	ldr	r3, [pc, #216]	; (8008d6c <xTaskResumeAll+0x11c>)
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d05e      	beq.n	8008d58 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008c9a:	e02f      	b.n	8008cfc <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008c9c:	4b34      	ldr	r3, [pc, #208]	; (8008d70 <xTaskResumeAll+0x120>)
 8008c9e:	68db      	ldr	r3, [r3, #12]
 8008ca0:	68db      	ldr	r3, [r3, #12]
 8008ca2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	3318      	adds	r3, #24
 8008ca8:	4618      	mov	r0, r3
 8008caa:	f7ff f851 	bl	8007d50 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	3304      	adds	r3, #4
 8008cb2:	4618      	mov	r0, r3
 8008cb4:	f7ff f84c 	bl	8007d50 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008cbc:	4b2d      	ldr	r3, [pc, #180]	; (8008d74 <xTaskResumeAll+0x124>)
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	429a      	cmp	r2, r3
 8008cc2:	d903      	bls.n	8008ccc <xTaskResumeAll+0x7c>
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cc8:	4a2a      	ldr	r2, [pc, #168]	; (8008d74 <xTaskResumeAll+0x124>)
 8008cca:	6013      	str	r3, [r2, #0]
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008cd0:	4613      	mov	r3, r2
 8008cd2:	009b      	lsls	r3, r3, #2
 8008cd4:	4413      	add	r3, r2
 8008cd6:	009b      	lsls	r3, r3, #2
 8008cd8:	4a27      	ldr	r2, [pc, #156]	; (8008d78 <xTaskResumeAll+0x128>)
 8008cda:	441a      	add	r2, r3
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	3304      	adds	r3, #4
 8008ce0:	4619      	mov	r1, r3
 8008ce2:	4610      	mov	r0, r2
 8008ce4:	f7fe ffd7 	bl	8007c96 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008cec:	4b23      	ldr	r3, [pc, #140]	; (8008d7c <xTaskResumeAll+0x12c>)
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cf2:	429a      	cmp	r2, r3
 8008cf4:	d302      	bcc.n	8008cfc <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8008cf6:	4b22      	ldr	r3, [pc, #136]	; (8008d80 <xTaskResumeAll+0x130>)
 8008cf8:	2201      	movs	r2, #1
 8008cfa:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008cfc:	4b1c      	ldr	r3, [pc, #112]	; (8008d70 <xTaskResumeAll+0x120>)
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d1cb      	bne.n	8008c9c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d001      	beq.n	8008d0e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008d0a:	f000 fb5f 	bl	80093cc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008d0e:	4b1d      	ldr	r3, [pc, #116]	; (8008d84 <xTaskResumeAll+0x134>)
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d010      	beq.n	8008d3c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008d1a:	f000 f847 	bl	8008dac <xTaskIncrementTick>
 8008d1e:	4603      	mov	r3, r0
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d002      	beq.n	8008d2a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8008d24:	4b16      	ldr	r3, [pc, #88]	; (8008d80 <xTaskResumeAll+0x130>)
 8008d26:	2201      	movs	r2, #1
 8008d28:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	3b01      	subs	r3, #1
 8008d2e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d1f1      	bne.n	8008d1a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8008d36:	4b13      	ldr	r3, [pc, #76]	; (8008d84 <xTaskResumeAll+0x134>)
 8008d38:	2200      	movs	r2, #0
 8008d3a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008d3c:	4b10      	ldr	r3, [pc, #64]	; (8008d80 <xTaskResumeAll+0x130>)
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d009      	beq.n	8008d58 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008d44:	2301      	movs	r3, #1
 8008d46:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008d48:	4b0f      	ldr	r3, [pc, #60]	; (8008d88 <xTaskResumeAll+0x138>)
 8008d4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008d4e:	601a      	str	r2, [r3, #0]
 8008d50:	f3bf 8f4f 	dsb	sy
 8008d54:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008d58:	f001 f8e4 	bl	8009f24 <vPortExitCritical>

	return xAlreadyYielded;
 8008d5c:	68bb      	ldr	r3, [r7, #8]
}
 8008d5e:	4618      	mov	r0, r3
 8008d60:	3710      	adds	r7, #16
 8008d62:	46bd      	mov	sp, r7
 8008d64:	bd80      	pop	{r7, pc}
 8008d66:	bf00      	nop
 8008d68:	20001948 	.word	0x20001948
 8008d6c:	20001920 	.word	0x20001920
 8008d70:	200018e0 	.word	0x200018e0
 8008d74:	20001928 	.word	0x20001928
 8008d78:	20001450 	.word	0x20001450
 8008d7c:	2000144c 	.word	0x2000144c
 8008d80:	20001934 	.word	0x20001934
 8008d84:	20001930 	.word	0x20001930
 8008d88:	e000ed04 	.word	0xe000ed04

08008d8c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008d8c:	b480      	push	{r7}
 8008d8e:	b083      	sub	sp, #12
 8008d90:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8008d92:	4b05      	ldr	r3, [pc, #20]	; (8008da8 <xTaskGetTickCount+0x1c>)
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008d98:	687b      	ldr	r3, [r7, #4]
}
 8008d9a:	4618      	mov	r0, r3
 8008d9c:	370c      	adds	r7, #12
 8008d9e:	46bd      	mov	sp, r7
 8008da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008da4:	4770      	bx	lr
 8008da6:	bf00      	nop
 8008da8:	20001924 	.word	0x20001924

08008dac <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008dac:	b580      	push	{r7, lr}
 8008dae:	b086      	sub	sp, #24
 8008db0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008db2:	2300      	movs	r3, #0
 8008db4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008db6:	4b4f      	ldr	r3, [pc, #316]	; (8008ef4 <xTaskIncrementTick+0x148>)
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	f040 808f 	bne.w	8008ede <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008dc0:	4b4d      	ldr	r3, [pc, #308]	; (8008ef8 <xTaskIncrementTick+0x14c>)
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	3301      	adds	r3, #1
 8008dc6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008dc8:	4a4b      	ldr	r2, [pc, #300]	; (8008ef8 <xTaskIncrementTick+0x14c>)
 8008dca:	693b      	ldr	r3, [r7, #16]
 8008dcc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008dce:	693b      	ldr	r3, [r7, #16]
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d120      	bne.n	8008e16 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8008dd4:	4b49      	ldr	r3, [pc, #292]	; (8008efc <xTaskIncrementTick+0x150>)
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d00a      	beq.n	8008df4 <xTaskIncrementTick+0x48>
	__asm volatile
 8008dde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008de2:	f383 8811 	msr	BASEPRI, r3
 8008de6:	f3bf 8f6f 	isb	sy
 8008dea:	f3bf 8f4f 	dsb	sy
 8008dee:	603b      	str	r3, [r7, #0]
}
 8008df0:	bf00      	nop
 8008df2:	e7fe      	b.n	8008df2 <xTaskIncrementTick+0x46>
 8008df4:	4b41      	ldr	r3, [pc, #260]	; (8008efc <xTaskIncrementTick+0x150>)
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	60fb      	str	r3, [r7, #12]
 8008dfa:	4b41      	ldr	r3, [pc, #260]	; (8008f00 <xTaskIncrementTick+0x154>)
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	4a3f      	ldr	r2, [pc, #252]	; (8008efc <xTaskIncrementTick+0x150>)
 8008e00:	6013      	str	r3, [r2, #0]
 8008e02:	4a3f      	ldr	r2, [pc, #252]	; (8008f00 <xTaskIncrementTick+0x154>)
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	6013      	str	r3, [r2, #0]
 8008e08:	4b3e      	ldr	r3, [pc, #248]	; (8008f04 <xTaskIncrementTick+0x158>)
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	3301      	adds	r3, #1
 8008e0e:	4a3d      	ldr	r2, [pc, #244]	; (8008f04 <xTaskIncrementTick+0x158>)
 8008e10:	6013      	str	r3, [r2, #0]
 8008e12:	f000 fadb 	bl	80093cc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008e16:	4b3c      	ldr	r3, [pc, #240]	; (8008f08 <xTaskIncrementTick+0x15c>)
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	693a      	ldr	r2, [r7, #16]
 8008e1c:	429a      	cmp	r2, r3
 8008e1e:	d349      	bcc.n	8008eb4 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008e20:	4b36      	ldr	r3, [pc, #216]	; (8008efc <xTaskIncrementTick+0x150>)
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d104      	bne.n	8008e34 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008e2a:	4b37      	ldr	r3, [pc, #220]	; (8008f08 <xTaskIncrementTick+0x15c>)
 8008e2c:	f04f 32ff 	mov.w	r2, #4294967295
 8008e30:	601a      	str	r2, [r3, #0]
					break;
 8008e32:	e03f      	b.n	8008eb4 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008e34:	4b31      	ldr	r3, [pc, #196]	; (8008efc <xTaskIncrementTick+0x150>)
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	68db      	ldr	r3, [r3, #12]
 8008e3a:	68db      	ldr	r3, [r3, #12]
 8008e3c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008e3e:	68bb      	ldr	r3, [r7, #8]
 8008e40:	685b      	ldr	r3, [r3, #4]
 8008e42:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008e44:	693a      	ldr	r2, [r7, #16]
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	429a      	cmp	r2, r3
 8008e4a:	d203      	bcs.n	8008e54 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008e4c:	4a2e      	ldr	r2, [pc, #184]	; (8008f08 <xTaskIncrementTick+0x15c>)
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008e52:	e02f      	b.n	8008eb4 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008e54:	68bb      	ldr	r3, [r7, #8]
 8008e56:	3304      	adds	r3, #4
 8008e58:	4618      	mov	r0, r3
 8008e5a:	f7fe ff79 	bl	8007d50 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008e5e:	68bb      	ldr	r3, [r7, #8]
 8008e60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d004      	beq.n	8008e70 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008e66:	68bb      	ldr	r3, [r7, #8]
 8008e68:	3318      	adds	r3, #24
 8008e6a:	4618      	mov	r0, r3
 8008e6c:	f7fe ff70 	bl	8007d50 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008e70:	68bb      	ldr	r3, [r7, #8]
 8008e72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e74:	4b25      	ldr	r3, [pc, #148]	; (8008f0c <xTaskIncrementTick+0x160>)
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	429a      	cmp	r2, r3
 8008e7a:	d903      	bls.n	8008e84 <xTaskIncrementTick+0xd8>
 8008e7c:	68bb      	ldr	r3, [r7, #8]
 8008e7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e80:	4a22      	ldr	r2, [pc, #136]	; (8008f0c <xTaskIncrementTick+0x160>)
 8008e82:	6013      	str	r3, [r2, #0]
 8008e84:	68bb      	ldr	r3, [r7, #8]
 8008e86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e88:	4613      	mov	r3, r2
 8008e8a:	009b      	lsls	r3, r3, #2
 8008e8c:	4413      	add	r3, r2
 8008e8e:	009b      	lsls	r3, r3, #2
 8008e90:	4a1f      	ldr	r2, [pc, #124]	; (8008f10 <xTaskIncrementTick+0x164>)
 8008e92:	441a      	add	r2, r3
 8008e94:	68bb      	ldr	r3, [r7, #8]
 8008e96:	3304      	adds	r3, #4
 8008e98:	4619      	mov	r1, r3
 8008e9a:	4610      	mov	r0, r2
 8008e9c:	f7fe fefb 	bl	8007c96 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008ea0:	68bb      	ldr	r3, [r7, #8]
 8008ea2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ea4:	4b1b      	ldr	r3, [pc, #108]	; (8008f14 <xTaskIncrementTick+0x168>)
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008eaa:	429a      	cmp	r2, r3
 8008eac:	d3b8      	bcc.n	8008e20 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8008eae:	2301      	movs	r3, #1
 8008eb0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008eb2:	e7b5      	b.n	8008e20 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008eb4:	4b17      	ldr	r3, [pc, #92]	; (8008f14 <xTaskIncrementTick+0x168>)
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008eba:	4915      	ldr	r1, [pc, #84]	; (8008f10 <xTaskIncrementTick+0x164>)
 8008ebc:	4613      	mov	r3, r2
 8008ebe:	009b      	lsls	r3, r3, #2
 8008ec0:	4413      	add	r3, r2
 8008ec2:	009b      	lsls	r3, r3, #2
 8008ec4:	440b      	add	r3, r1
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	2b01      	cmp	r3, #1
 8008eca:	d901      	bls.n	8008ed0 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8008ecc:	2301      	movs	r3, #1
 8008ece:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8008ed0:	4b11      	ldr	r3, [pc, #68]	; (8008f18 <xTaskIncrementTick+0x16c>)
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d007      	beq.n	8008ee8 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8008ed8:	2301      	movs	r3, #1
 8008eda:	617b      	str	r3, [r7, #20]
 8008edc:	e004      	b.n	8008ee8 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8008ede:	4b0f      	ldr	r3, [pc, #60]	; (8008f1c <xTaskIncrementTick+0x170>)
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	3301      	adds	r3, #1
 8008ee4:	4a0d      	ldr	r2, [pc, #52]	; (8008f1c <xTaskIncrementTick+0x170>)
 8008ee6:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8008ee8:	697b      	ldr	r3, [r7, #20]
}
 8008eea:	4618      	mov	r0, r3
 8008eec:	3718      	adds	r7, #24
 8008eee:	46bd      	mov	sp, r7
 8008ef0:	bd80      	pop	{r7, pc}
 8008ef2:	bf00      	nop
 8008ef4:	20001948 	.word	0x20001948
 8008ef8:	20001924 	.word	0x20001924
 8008efc:	200018d8 	.word	0x200018d8
 8008f00:	200018dc 	.word	0x200018dc
 8008f04:	20001938 	.word	0x20001938
 8008f08:	20001940 	.word	0x20001940
 8008f0c:	20001928 	.word	0x20001928
 8008f10:	20001450 	.word	0x20001450
 8008f14:	2000144c 	.word	0x2000144c
 8008f18:	20001934 	.word	0x20001934
 8008f1c:	20001930 	.word	0x20001930

08008f20 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008f20:	b480      	push	{r7}
 8008f22:	b085      	sub	sp, #20
 8008f24:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008f26:	4b2a      	ldr	r3, [pc, #168]	; (8008fd0 <vTaskSwitchContext+0xb0>)
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d003      	beq.n	8008f36 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008f2e:	4b29      	ldr	r3, [pc, #164]	; (8008fd4 <vTaskSwitchContext+0xb4>)
 8008f30:	2201      	movs	r2, #1
 8008f32:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008f34:	e046      	b.n	8008fc4 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8008f36:	4b27      	ldr	r3, [pc, #156]	; (8008fd4 <vTaskSwitchContext+0xb4>)
 8008f38:	2200      	movs	r2, #0
 8008f3a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008f3c:	4b26      	ldr	r3, [pc, #152]	; (8008fd8 <vTaskSwitchContext+0xb8>)
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	60fb      	str	r3, [r7, #12]
 8008f42:	e010      	b.n	8008f66 <vTaskSwitchContext+0x46>
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d10a      	bne.n	8008f60 <vTaskSwitchContext+0x40>
	__asm volatile
 8008f4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f4e:	f383 8811 	msr	BASEPRI, r3
 8008f52:	f3bf 8f6f 	isb	sy
 8008f56:	f3bf 8f4f 	dsb	sy
 8008f5a:	607b      	str	r3, [r7, #4]
}
 8008f5c:	bf00      	nop
 8008f5e:	e7fe      	b.n	8008f5e <vTaskSwitchContext+0x3e>
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	3b01      	subs	r3, #1
 8008f64:	60fb      	str	r3, [r7, #12]
 8008f66:	491d      	ldr	r1, [pc, #116]	; (8008fdc <vTaskSwitchContext+0xbc>)
 8008f68:	68fa      	ldr	r2, [r7, #12]
 8008f6a:	4613      	mov	r3, r2
 8008f6c:	009b      	lsls	r3, r3, #2
 8008f6e:	4413      	add	r3, r2
 8008f70:	009b      	lsls	r3, r3, #2
 8008f72:	440b      	add	r3, r1
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d0e4      	beq.n	8008f44 <vTaskSwitchContext+0x24>
 8008f7a:	68fa      	ldr	r2, [r7, #12]
 8008f7c:	4613      	mov	r3, r2
 8008f7e:	009b      	lsls	r3, r3, #2
 8008f80:	4413      	add	r3, r2
 8008f82:	009b      	lsls	r3, r3, #2
 8008f84:	4a15      	ldr	r2, [pc, #84]	; (8008fdc <vTaskSwitchContext+0xbc>)
 8008f86:	4413      	add	r3, r2
 8008f88:	60bb      	str	r3, [r7, #8]
 8008f8a:	68bb      	ldr	r3, [r7, #8]
 8008f8c:	685b      	ldr	r3, [r3, #4]
 8008f8e:	685a      	ldr	r2, [r3, #4]
 8008f90:	68bb      	ldr	r3, [r7, #8]
 8008f92:	605a      	str	r2, [r3, #4]
 8008f94:	68bb      	ldr	r3, [r7, #8]
 8008f96:	685a      	ldr	r2, [r3, #4]
 8008f98:	68bb      	ldr	r3, [r7, #8]
 8008f9a:	3308      	adds	r3, #8
 8008f9c:	429a      	cmp	r2, r3
 8008f9e:	d104      	bne.n	8008faa <vTaskSwitchContext+0x8a>
 8008fa0:	68bb      	ldr	r3, [r7, #8]
 8008fa2:	685b      	ldr	r3, [r3, #4]
 8008fa4:	685a      	ldr	r2, [r3, #4]
 8008fa6:	68bb      	ldr	r3, [r7, #8]
 8008fa8:	605a      	str	r2, [r3, #4]
 8008faa:	68bb      	ldr	r3, [r7, #8]
 8008fac:	685b      	ldr	r3, [r3, #4]
 8008fae:	68db      	ldr	r3, [r3, #12]
 8008fb0:	4a0b      	ldr	r2, [pc, #44]	; (8008fe0 <vTaskSwitchContext+0xc0>)
 8008fb2:	6013      	str	r3, [r2, #0]
 8008fb4:	4a08      	ldr	r2, [pc, #32]	; (8008fd8 <vTaskSwitchContext+0xb8>)
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008fba:	4b09      	ldr	r3, [pc, #36]	; (8008fe0 <vTaskSwitchContext+0xc0>)
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	3354      	adds	r3, #84	; 0x54
 8008fc0:	4a08      	ldr	r2, [pc, #32]	; (8008fe4 <vTaskSwitchContext+0xc4>)
 8008fc2:	6013      	str	r3, [r2, #0]
}
 8008fc4:	bf00      	nop
 8008fc6:	3714      	adds	r7, #20
 8008fc8:	46bd      	mov	sp, r7
 8008fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fce:	4770      	bx	lr
 8008fd0:	20001948 	.word	0x20001948
 8008fd4:	20001934 	.word	0x20001934
 8008fd8:	20001928 	.word	0x20001928
 8008fdc:	20001450 	.word	0x20001450
 8008fe0:	2000144c 	.word	0x2000144c
 8008fe4:	20000014 	.word	0x20000014

08008fe8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008fe8:	b580      	push	{r7, lr}
 8008fea:	b084      	sub	sp, #16
 8008fec:	af00      	add	r7, sp, #0
 8008fee:	6078      	str	r0, [r7, #4]
 8008ff0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d10a      	bne.n	800900e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8008ff8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ffc:	f383 8811 	msr	BASEPRI, r3
 8009000:	f3bf 8f6f 	isb	sy
 8009004:	f3bf 8f4f 	dsb	sy
 8009008:	60fb      	str	r3, [r7, #12]
}
 800900a:	bf00      	nop
 800900c:	e7fe      	b.n	800900c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800900e:	4b07      	ldr	r3, [pc, #28]	; (800902c <vTaskPlaceOnEventList+0x44>)
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	3318      	adds	r3, #24
 8009014:	4619      	mov	r1, r3
 8009016:	6878      	ldr	r0, [r7, #4]
 8009018:	f7fe fe61 	bl	8007cde <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800901c:	2101      	movs	r1, #1
 800901e:	6838      	ldr	r0, [r7, #0]
 8009020:	f000 fa80 	bl	8009524 <prvAddCurrentTaskToDelayedList>
}
 8009024:	bf00      	nop
 8009026:	3710      	adds	r7, #16
 8009028:	46bd      	mov	sp, r7
 800902a:	bd80      	pop	{r7, pc}
 800902c:	2000144c 	.word	0x2000144c

08009030 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009030:	b580      	push	{r7, lr}
 8009032:	b086      	sub	sp, #24
 8009034:	af00      	add	r7, sp, #0
 8009036:	60f8      	str	r0, [r7, #12]
 8009038:	60b9      	str	r1, [r7, #8]
 800903a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	2b00      	cmp	r3, #0
 8009040:	d10a      	bne.n	8009058 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8009042:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009046:	f383 8811 	msr	BASEPRI, r3
 800904a:	f3bf 8f6f 	isb	sy
 800904e:	f3bf 8f4f 	dsb	sy
 8009052:	617b      	str	r3, [r7, #20]
}
 8009054:	bf00      	nop
 8009056:	e7fe      	b.n	8009056 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009058:	4b0a      	ldr	r3, [pc, #40]	; (8009084 <vTaskPlaceOnEventListRestricted+0x54>)
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	3318      	adds	r3, #24
 800905e:	4619      	mov	r1, r3
 8009060:	68f8      	ldr	r0, [r7, #12]
 8009062:	f7fe fe18 	bl	8007c96 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	2b00      	cmp	r3, #0
 800906a:	d002      	beq.n	8009072 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800906c:	f04f 33ff 	mov.w	r3, #4294967295
 8009070:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009072:	6879      	ldr	r1, [r7, #4]
 8009074:	68b8      	ldr	r0, [r7, #8]
 8009076:	f000 fa55 	bl	8009524 <prvAddCurrentTaskToDelayedList>
	}
 800907a:	bf00      	nop
 800907c:	3718      	adds	r7, #24
 800907e:	46bd      	mov	sp, r7
 8009080:	bd80      	pop	{r7, pc}
 8009082:	bf00      	nop
 8009084:	2000144c 	.word	0x2000144c

08009088 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009088:	b580      	push	{r7, lr}
 800908a:	b086      	sub	sp, #24
 800908c:	af00      	add	r7, sp, #0
 800908e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	68db      	ldr	r3, [r3, #12]
 8009094:	68db      	ldr	r3, [r3, #12]
 8009096:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009098:	693b      	ldr	r3, [r7, #16]
 800909a:	2b00      	cmp	r3, #0
 800909c:	d10a      	bne.n	80090b4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800909e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090a2:	f383 8811 	msr	BASEPRI, r3
 80090a6:	f3bf 8f6f 	isb	sy
 80090aa:	f3bf 8f4f 	dsb	sy
 80090ae:	60fb      	str	r3, [r7, #12]
}
 80090b0:	bf00      	nop
 80090b2:	e7fe      	b.n	80090b2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80090b4:	693b      	ldr	r3, [r7, #16]
 80090b6:	3318      	adds	r3, #24
 80090b8:	4618      	mov	r0, r3
 80090ba:	f7fe fe49 	bl	8007d50 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80090be:	4b1e      	ldr	r3, [pc, #120]	; (8009138 <xTaskRemoveFromEventList+0xb0>)
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d11d      	bne.n	8009102 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80090c6:	693b      	ldr	r3, [r7, #16]
 80090c8:	3304      	adds	r3, #4
 80090ca:	4618      	mov	r0, r3
 80090cc:	f7fe fe40 	bl	8007d50 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80090d0:	693b      	ldr	r3, [r7, #16]
 80090d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80090d4:	4b19      	ldr	r3, [pc, #100]	; (800913c <xTaskRemoveFromEventList+0xb4>)
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	429a      	cmp	r2, r3
 80090da:	d903      	bls.n	80090e4 <xTaskRemoveFromEventList+0x5c>
 80090dc:	693b      	ldr	r3, [r7, #16]
 80090de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090e0:	4a16      	ldr	r2, [pc, #88]	; (800913c <xTaskRemoveFromEventList+0xb4>)
 80090e2:	6013      	str	r3, [r2, #0]
 80090e4:	693b      	ldr	r3, [r7, #16]
 80090e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80090e8:	4613      	mov	r3, r2
 80090ea:	009b      	lsls	r3, r3, #2
 80090ec:	4413      	add	r3, r2
 80090ee:	009b      	lsls	r3, r3, #2
 80090f0:	4a13      	ldr	r2, [pc, #76]	; (8009140 <xTaskRemoveFromEventList+0xb8>)
 80090f2:	441a      	add	r2, r3
 80090f4:	693b      	ldr	r3, [r7, #16]
 80090f6:	3304      	adds	r3, #4
 80090f8:	4619      	mov	r1, r3
 80090fa:	4610      	mov	r0, r2
 80090fc:	f7fe fdcb 	bl	8007c96 <vListInsertEnd>
 8009100:	e005      	b.n	800910e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009102:	693b      	ldr	r3, [r7, #16]
 8009104:	3318      	adds	r3, #24
 8009106:	4619      	mov	r1, r3
 8009108:	480e      	ldr	r0, [pc, #56]	; (8009144 <xTaskRemoveFromEventList+0xbc>)
 800910a:	f7fe fdc4 	bl	8007c96 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800910e:	693b      	ldr	r3, [r7, #16]
 8009110:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009112:	4b0d      	ldr	r3, [pc, #52]	; (8009148 <xTaskRemoveFromEventList+0xc0>)
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009118:	429a      	cmp	r2, r3
 800911a:	d905      	bls.n	8009128 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800911c:	2301      	movs	r3, #1
 800911e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009120:	4b0a      	ldr	r3, [pc, #40]	; (800914c <xTaskRemoveFromEventList+0xc4>)
 8009122:	2201      	movs	r2, #1
 8009124:	601a      	str	r2, [r3, #0]
 8009126:	e001      	b.n	800912c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8009128:	2300      	movs	r3, #0
 800912a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800912c:	697b      	ldr	r3, [r7, #20]
}
 800912e:	4618      	mov	r0, r3
 8009130:	3718      	adds	r7, #24
 8009132:	46bd      	mov	sp, r7
 8009134:	bd80      	pop	{r7, pc}
 8009136:	bf00      	nop
 8009138:	20001948 	.word	0x20001948
 800913c:	20001928 	.word	0x20001928
 8009140:	20001450 	.word	0x20001450
 8009144:	200018e0 	.word	0x200018e0
 8009148:	2000144c 	.word	0x2000144c
 800914c:	20001934 	.word	0x20001934

08009150 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009150:	b480      	push	{r7}
 8009152:	b083      	sub	sp, #12
 8009154:	af00      	add	r7, sp, #0
 8009156:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009158:	4b06      	ldr	r3, [pc, #24]	; (8009174 <vTaskInternalSetTimeOutState+0x24>)
 800915a:	681a      	ldr	r2, [r3, #0]
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009160:	4b05      	ldr	r3, [pc, #20]	; (8009178 <vTaskInternalSetTimeOutState+0x28>)
 8009162:	681a      	ldr	r2, [r3, #0]
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	605a      	str	r2, [r3, #4]
}
 8009168:	bf00      	nop
 800916a:	370c      	adds	r7, #12
 800916c:	46bd      	mov	sp, r7
 800916e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009172:	4770      	bx	lr
 8009174:	20001938 	.word	0x20001938
 8009178:	20001924 	.word	0x20001924

0800917c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800917c:	b580      	push	{r7, lr}
 800917e:	b088      	sub	sp, #32
 8009180:	af00      	add	r7, sp, #0
 8009182:	6078      	str	r0, [r7, #4]
 8009184:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	2b00      	cmp	r3, #0
 800918a:	d10a      	bne.n	80091a2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800918c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009190:	f383 8811 	msr	BASEPRI, r3
 8009194:	f3bf 8f6f 	isb	sy
 8009198:	f3bf 8f4f 	dsb	sy
 800919c:	613b      	str	r3, [r7, #16]
}
 800919e:	bf00      	nop
 80091a0:	e7fe      	b.n	80091a0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80091a2:	683b      	ldr	r3, [r7, #0]
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d10a      	bne.n	80091be <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80091a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091ac:	f383 8811 	msr	BASEPRI, r3
 80091b0:	f3bf 8f6f 	isb	sy
 80091b4:	f3bf 8f4f 	dsb	sy
 80091b8:	60fb      	str	r3, [r7, #12]
}
 80091ba:	bf00      	nop
 80091bc:	e7fe      	b.n	80091bc <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80091be:	f000 fe81 	bl	8009ec4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80091c2:	4b1d      	ldr	r3, [pc, #116]	; (8009238 <xTaskCheckForTimeOut+0xbc>)
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	685b      	ldr	r3, [r3, #4]
 80091cc:	69ba      	ldr	r2, [r7, #24]
 80091ce:	1ad3      	subs	r3, r2, r3
 80091d0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80091d2:	683b      	ldr	r3, [r7, #0]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091da:	d102      	bne.n	80091e2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80091dc:	2300      	movs	r3, #0
 80091de:	61fb      	str	r3, [r7, #28]
 80091e0:	e023      	b.n	800922a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	681a      	ldr	r2, [r3, #0]
 80091e6:	4b15      	ldr	r3, [pc, #84]	; (800923c <xTaskCheckForTimeOut+0xc0>)
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	429a      	cmp	r2, r3
 80091ec:	d007      	beq.n	80091fe <xTaskCheckForTimeOut+0x82>
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	685b      	ldr	r3, [r3, #4]
 80091f2:	69ba      	ldr	r2, [r7, #24]
 80091f4:	429a      	cmp	r2, r3
 80091f6:	d302      	bcc.n	80091fe <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80091f8:	2301      	movs	r3, #1
 80091fa:	61fb      	str	r3, [r7, #28]
 80091fc:	e015      	b.n	800922a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80091fe:	683b      	ldr	r3, [r7, #0]
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	697a      	ldr	r2, [r7, #20]
 8009204:	429a      	cmp	r2, r3
 8009206:	d20b      	bcs.n	8009220 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009208:	683b      	ldr	r3, [r7, #0]
 800920a:	681a      	ldr	r2, [r3, #0]
 800920c:	697b      	ldr	r3, [r7, #20]
 800920e:	1ad2      	subs	r2, r2, r3
 8009210:	683b      	ldr	r3, [r7, #0]
 8009212:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009214:	6878      	ldr	r0, [r7, #4]
 8009216:	f7ff ff9b 	bl	8009150 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800921a:	2300      	movs	r3, #0
 800921c:	61fb      	str	r3, [r7, #28]
 800921e:	e004      	b.n	800922a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8009220:	683b      	ldr	r3, [r7, #0]
 8009222:	2200      	movs	r2, #0
 8009224:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009226:	2301      	movs	r3, #1
 8009228:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800922a:	f000 fe7b 	bl	8009f24 <vPortExitCritical>

	return xReturn;
 800922e:	69fb      	ldr	r3, [r7, #28]
}
 8009230:	4618      	mov	r0, r3
 8009232:	3720      	adds	r7, #32
 8009234:	46bd      	mov	sp, r7
 8009236:	bd80      	pop	{r7, pc}
 8009238:	20001924 	.word	0x20001924
 800923c:	20001938 	.word	0x20001938

08009240 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009240:	b480      	push	{r7}
 8009242:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009244:	4b03      	ldr	r3, [pc, #12]	; (8009254 <vTaskMissedYield+0x14>)
 8009246:	2201      	movs	r2, #1
 8009248:	601a      	str	r2, [r3, #0]
}
 800924a:	bf00      	nop
 800924c:	46bd      	mov	sp, r7
 800924e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009252:	4770      	bx	lr
 8009254:	20001934 	.word	0x20001934

08009258 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009258:	b580      	push	{r7, lr}
 800925a:	b082      	sub	sp, #8
 800925c:	af00      	add	r7, sp, #0
 800925e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009260:	f000 f852 	bl	8009308 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009264:	4b06      	ldr	r3, [pc, #24]	; (8009280 <prvIdleTask+0x28>)
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	2b01      	cmp	r3, #1
 800926a:	d9f9      	bls.n	8009260 <prvIdleTask+0x8>
			{
				taskYIELD();
 800926c:	4b05      	ldr	r3, [pc, #20]	; (8009284 <prvIdleTask+0x2c>)
 800926e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009272:	601a      	str	r2, [r3, #0]
 8009274:	f3bf 8f4f 	dsb	sy
 8009278:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800927c:	e7f0      	b.n	8009260 <prvIdleTask+0x8>
 800927e:	bf00      	nop
 8009280:	20001450 	.word	0x20001450
 8009284:	e000ed04 	.word	0xe000ed04

08009288 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009288:	b580      	push	{r7, lr}
 800928a:	b082      	sub	sp, #8
 800928c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800928e:	2300      	movs	r3, #0
 8009290:	607b      	str	r3, [r7, #4]
 8009292:	e00c      	b.n	80092ae <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009294:	687a      	ldr	r2, [r7, #4]
 8009296:	4613      	mov	r3, r2
 8009298:	009b      	lsls	r3, r3, #2
 800929a:	4413      	add	r3, r2
 800929c:	009b      	lsls	r3, r3, #2
 800929e:	4a12      	ldr	r2, [pc, #72]	; (80092e8 <prvInitialiseTaskLists+0x60>)
 80092a0:	4413      	add	r3, r2
 80092a2:	4618      	mov	r0, r3
 80092a4:	f7fe fcca 	bl	8007c3c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	3301      	adds	r3, #1
 80092ac:	607b      	str	r3, [r7, #4]
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	2b37      	cmp	r3, #55	; 0x37
 80092b2:	d9ef      	bls.n	8009294 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80092b4:	480d      	ldr	r0, [pc, #52]	; (80092ec <prvInitialiseTaskLists+0x64>)
 80092b6:	f7fe fcc1 	bl	8007c3c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80092ba:	480d      	ldr	r0, [pc, #52]	; (80092f0 <prvInitialiseTaskLists+0x68>)
 80092bc:	f7fe fcbe 	bl	8007c3c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80092c0:	480c      	ldr	r0, [pc, #48]	; (80092f4 <prvInitialiseTaskLists+0x6c>)
 80092c2:	f7fe fcbb 	bl	8007c3c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80092c6:	480c      	ldr	r0, [pc, #48]	; (80092f8 <prvInitialiseTaskLists+0x70>)
 80092c8:	f7fe fcb8 	bl	8007c3c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80092cc:	480b      	ldr	r0, [pc, #44]	; (80092fc <prvInitialiseTaskLists+0x74>)
 80092ce:	f7fe fcb5 	bl	8007c3c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80092d2:	4b0b      	ldr	r3, [pc, #44]	; (8009300 <prvInitialiseTaskLists+0x78>)
 80092d4:	4a05      	ldr	r2, [pc, #20]	; (80092ec <prvInitialiseTaskLists+0x64>)
 80092d6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80092d8:	4b0a      	ldr	r3, [pc, #40]	; (8009304 <prvInitialiseTaskLists+0x7c>)
 80092da:	4a05      	ldr	r2, [pc, #20]	; (80092f0 <prvInitialiseTaskLists+0x68>)
 80092dc:	601a      	str	r2, [r3, #0]
}
 80092de:	bf00      	nop
 80092e0:	3708      	adds	r7, #8
 80092e2:	46bd      	mov	sp, r7
 80092e4:	bd80      	pop	{r7, pc}
 80092e6:	bf00      	nop
 80092e8:	20001450 	.word	0x20001450
 80092ec:	200018b0 	.word	0x200018b0
 80092f0:	200018c4 	.word	0x200018c4
 80092f4:	200018e0 	.word	0x200018e0
 80092f8:	200018f4 	.word	0x200018f4
 80092fc:	2000190c 	.word	0x2000190c
 8009300:	200018d8 	.word	0x200018d8
 8009304:	200018dc 	.word	0x200018dc

08009308 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009308:	b580      	push	{r7, lr}
 800930a:	b082      	sub	sp, #8
 800930c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800930e:	e019      	b.n	8009344 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009310:	f000 fdd8 	bl	8009ec4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009314:	4b10      	ldr	r3, [pc, #64]	; (8009358 <prvCheckTasksWaitingTermination+0x50>)
 8009316:	68db      	ldr	r3, [r3, #12]
 8009318:	68db      	ldr	r3, [r3, #12]
 800931a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	3304      	adds	r3, #4
 8009320:	4618      	mov	r0, r3
 8009322:	f7fe fd15 	bl	8007d50 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009326:	4b0d      	ldr	r3, [pc, #52]	; (800935c <prvCheckTasksWaitingTermination+0x54>)
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	3b01      	subs	r3, #1
 800932c:	4a0b      	ldr	r2, [pc, #44]	; (800935c <prvCheckTasksWaitingTermination+0x54>)
 800932e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009330:	4b0b      	ldr	r3, [pc, #44]	; (8009360 <prvCheckTasksWaitingTermination+0x58>)
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	3b01      	subs	r3, #1
 8009336:	4a0a      	ldr	r2, [pc, #40]	; (8009360 <prvCheckTasksWaitingTermination+0x58>)
 8009338:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800933a:	f000 fdf3 	bl	8009f24 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800933e:	6878      	ldr	r0, [r7, #4]
 8009340:	f000 f810 	bl	8009364 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009344:	4b06      	ldr	r3, [pc, #24]	; (8009360 <prvCheckTasksWaitingTermination+0x58>)
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	2b00      	cmp	r3, #0
 800934a:	d1e1      	bne.n	8009310 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800934c:	bf00      	nop
 800934e:	bf00      	nop
 8009350:	3708      	adds	r7, #8
 8009352:	46bd      	mov	sp, r7
 8009354:	bd80      	pop	{r7, pc}
 8009356:	bf00      	nop
 8009358:	200018f4 	.word	0x200018f4
 800935c:	20001920 	.word	0x20001920
 8009360:	20001908 	.word	0x20001908

08009364 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009364:	b580      	push	{r7, lr}
 8009366:	b084      	sub	sp, #16
 8009368:	af00      	add	r7, sp, #0
 800936a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	3354      	adds	r3, #84	; 0x54
 8009370:	4618      	mov	r0, r3
 8009372:	f001 fbcd 	bl	800ab10 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800937c:	2b00      	cmp	r3, #0
 800937e:	d108      	bne.n	8009392 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009384:	4618      	mov	r0, r3
 8009386:	f000 ff8b 	bl	800a2a0 <vPortFree>
				vPortFree( pxTCB );
 800938a:	6878      	ldr	r0, [r7, #4]
 800938c:	f000 ff88 	bl	800a2a0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009390:	e018      	b.n	80093c4 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8009398:	2b01      	cmp	r3, #1
 800939a:	d103      	bne.n	80093a4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800939c:	6878      	ldr	r0, [r7, #4]
 800939e:	f000 ff7f 	bl	800a2a0 <vPortFree>
	}
 80093a2:	e00f      	b.n	80093c4 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80093aa:	2b02      	cmp	r3, #2
 80093ac:	d00a      	beq.n	80093c4 <prvDeleteTCB+0x60>
	__asm volatile
 80093ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093b2:	f383 8811 	msr	BASEPRI, r3
 80093b6:	f3bf 8f6f 	isb	sy
 80093ba:	f3bf 8f4f 	dsb	sy
 80093be:	60fb      	str	r3, [r7, #12]
}
 80093c0:	bf00      	nop
 80093c2:	e7fe      	b.n	80093c2 <prvDeleteTCB+0x5e>
	}
 80093c4:	bf00      	nop
 80093c6:	3710      	adds	r7, #16
 80093c8:	46bd      	mov	sp, r7
 80093ca:	bd80      	pop	{r7, pc}

080093cc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80093cc:	b480      	push	{r7}
 80093ce:	b083      	sub	sp, #12
 80093d0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80093d2:	4b0c      	ldr	r3, [pc, #48]	; (8009404 <prvResetNextTaskUnblockTime+0x38>)
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d104      	bne.n	80093e6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80093dc:	4b0a      	ldr	r3, [pc, #40]	; (8009408 <prvResetNextTaskUnblockTime+0x3c>)
 80093de:	f04f 32ff 	mov.w	r2, #4294967295
 80093e2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80093e4:	e008      	b.n	80093f8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80093e6:	4b07      	ldr	r3, [pc, #28]	; (8009404 <prvResetNextTaskUnblockTime+0x38>)
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	68db      	ldr	r3, [r3, #12]
 80093ec:	68db      	ldr	r3, [r3, #12]
 80093ee:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	685b      	ldr	r3, [r3, #4]
 80093f4:	4a04      	ldr	r2, [pc, #16]	; (8009408 <prvResetNextTaskUnblockTime+0x3c>)
 80093f6:	6013      	str	r3, [r2, #0]
}
 80093f8:	bf00      	nop
 80093fa:	370c      	adds	r7, #12
 80093fc:	46bd      	mov	sp, r7
 80093fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009402:	4770      	bx	lr
 8009404:	200018d8 	.word	0x200018d8
 8009408:	20001940 	.word	0x20001940

0800940c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800940c:	b480      	push	{r7}
 800940e:	b083      	sub	sp, #12
 8009410:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009412:	4b0b      	ldr	r3, [pc, #44]	; (8009440 <xTaskGetSchedulerState+0x34>)
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	2b00      	cmp	r3, #0
 8009418:	d102      	bne.n	8009420 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800941a:	2301      	movs	r3, #1
 800941c:	607b      	str	r3, [r7, #4]
 800941e:	e008      	b.n	8009432 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009420:	4b08      	ldr	r3, [pc, #32]	; (8009444 <xTaskGetSchedulerState+0x38>)
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	2b00      	cmp	r3, #0
 8009426:	d102      	bne.n	800942e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009428:	2302      	movs	r3, #2
 800942a:	607b      	str	r3, [r7, #4]
 800942c:	e001      	b.n	8009432 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800942e:	2300      	movs	r3, #0
 8009430:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009432:	687b      	ldr	r3, [r7, #4]
	}
 8009434:	4618      	mov	r0, r3
 8009436:	370c      	adds	r7, #12
 8009438:	46bd      	mov	sp, r7
 800943a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800943e:	4770      	bx	lr
 8009440:	2000192c 	.word	0x2000192c
 8009444:	20001948 	.word	0x20001948

08009448 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009448:	b580      	push	{r7, lr}
 800944a:	b086      	sub	sp, #24
 800944c:	af00      	add	r7, sp, #0
 800944e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009454:	2300      	movs	r3, #0
 8009456:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	2b00      	cmp	r3, #0
 800945c:	d056      	beq.n	800950c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800945e:	4b2e      	ldr	r3, [pc, #184]	; (8009518 <xTaskPriorityDisinherit+0xd0>)
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	693a      	ldr	r2, [r7, #16]
 8009464:	429a      	cmp	r2, r3
 8009466:	d00a      	beq.n	800947e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8009468:	f04f 0350 	mov.w	r3, #80	; 0x50
 800946c:	f383 8811 	msr	BASEPRI, r3
 8009470:	f3bf 8f6f 	isb	sy
 8009474:	f3bf 8f4f 	dsb	sy
 8009478:	60fb      	str	r3, [r7, #12]
}
 800947a:	bf00      	nop
 800947c:	e7fe      	b.n	800947c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800947e:	693b      	ldr	r3, [r7, #16]
 8009480:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009482:	2b00      	cmp	r3, #0
 8009484:	d10a      	bne.n	800949c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8009486:	f04f 0350 	mov.w	r3, #80	; 0x50
 800948a:	f383 8811 	msr	BASEPRI, r3
 800948e:	f3bf 8f6f 	isb	sy
 8009492:	f3bf 8f4f 	dsb	sy
 8009496:	60bb      	str	r3, [r7, #8]
}
 8009498:	bf00      	nop
 800949a:	e7fe      	b.n	800949a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800949c:	693b      	ldr	r3, [r7, #16]
 800949e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80094a0:	1e5a      	subs	r2, r3, #1
 80094a2:	693b      	ldr	r3, [r7, #16]
 80094a4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80094a6:	693b      	ldr	r3, [r7, #16]
 80094a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80094aa:	693b      	ldr	r3, [r7, #16]
 80094ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80094ae:	429a      	cmp	r2, r3
 80094b0:	d02c      	beq.n	800950c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80094b2:	693b      	ldr	r3, [r7, #16]
 80094b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d128      	bne.n	800950c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80094ba:	693b      	ldr	r3, [r7, #16]
 80094bc:	3304      	adds	r3, #4
 80094be:	4618      	mov	r0, r3
 80094c0:	f7fe fc46 	bl	8007d50 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80094c4:	693b      	ldr	r3, [r7, #16]
 80094c6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80094c8:	693b      	ldr	r3, [r7, #16]
 80094ca:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80094cc:	693b      	ldr	r3, [r7, #16]
 80094ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094d0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80094d4:	693b      	ldr	r3, [r7, #16]
 80094d6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80094d8:	693b      	ldr	r3, [r7, #16]
 80094da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80094dc:	4b0f      	ldr	r3, [pc, #60]	; (800951c <xTaskPriorityDisinherit+0xd4>)
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	429a      	cmp	r2, r3
 80094e2:	d903      	bls.n	80094ec <xTaskPriorityDisinherit+0xa4>
 80094e4:	693b      	ldr	r3, [r7, #16]
 80094e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094e8:	4a0c      	ldr	r2, [pc, #48]	; (800951c <xTaskPriorityDisinherit+0xd4>)
 80094ea:	6013      	str	r3, [r2, #0]
 80094ec:	693b      	ldr	r3, [r7, #16]
 80094ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80094f0:	4613      	mov	r3, r2
 80094f2:	009b      	lsls	r3, r3, #2
 80094f4:	4413      	add	r3, r2
 80094f6:	009b      	lsls	r3, r3, #2
 80094f8:	4a09      	ldr	r2, [pc, #36]	; (8009520 <xTaskPriorityDisinherit+0xd8>)
 80094fa:	441a      	add	r2, r3
 80094fc:	693b      	ldr	r3, [r7, #16]
 80094fe:	3304      	adds	r3, #4
 8009500:	4619      	mov	r1, r3
 8009502:	4610      	mov	r0, r2
 8009504:	f7fe fbc7 	bl	8007c96 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009508:	2301      	movs	r3, #1
 800950a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800950c:	697b      	ldr	r3, [r7, #20]
	}
 800950e:	4618      	mov	r0, r3
 8009510:	3718      	adds	r7, #24
 8009512:	46bd      	mov	sp, r7
 8009514:	bd80      	pop	{r7, pc}
 8009516:	bf00      	nop
 8009518:	2000144c 	.word	0x2000144c
 800951c:	20001928 	.word	0x20001928
 8009520:	20001450 	.word	0x20001450

08009524 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009524:	b580      	push	{r7, lr}
 8009526:	b084      	sub	sp, #16
 8009528:	af00      	add	r7, sp, #0
 800952a:	6078      	str	r0, [r7, #4]
 800952c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800952e:	4b21      	ldr	r3, [pc, #132]	; (80095b4 <prvAddCurrentTaskToDelayedList+0x90>)
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009534:	4b20      	ldr	r3, [pc, #128]	; (80095b8 <prvAddCurrentTaskToDelayedList+0x94>)
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	3304      	adds	r3, #4
 800953a:	4618      	mov	r0, r3
 800953c:	f7fe fc08 	bl	8007d50 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009546:	d10a      	bne.n	800955e <prvAddCurrentTaskToDelayedList+0x3a>
 8009548:	683b      	ldr	r3, [r7, #0]
 800954a:	2b00      	cmp	r3, #0
 800954c:	d007      	beq.n	800955e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800954e:	4b1a      	ldr	r3, [pc, #104]	; (80095b8 <prvAddCurrentTaskToDelayedList+0x94>)
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	3304      	adds	r3, #4
 8009554:	4619      	mov	r1, r3
 8009556:	4819      	ldr	r0, [pc, #100]	; (80095bc <prvAddCurrentTaskToDelayedList+0x98>)
 8009558:	f7fe fb9d 	bl	8007c96 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800955c:	e026      	b.n	80095ac <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800955e:	68fa      	ldr	r2, [r7, #12]
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	4413      	add	r3, r2
 8009564:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009566:	4b14      	ldr	r3, [pc, #80]	; (80095b8 <prvAddCurrentTaskToDelayedList+0x94>)
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	68ba      	ldr	r2, [r7, #8]
 800956c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800956e:	68ba      	ldr	r2, [r7, #8]
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	429a      	cmp	r2, r3
 8009574:	d209      	bcs.n	800958a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009576:	4b12      	ldr	r3, [pc, #72]	; (80095c0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8009578:	681a      	ldr	r2, [r3, #0]
 800957a:	4b0f      	ldr	r3, [pc, #60]	; (80095b8 <prvAddCurrentTaskToDelayedList+0x94>)
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	3304      	adds	r3, #4
 8009580:	4619      	mov	r1, r3
 8009582:	4610      	mov	r0, r2
 8009584:	f7fe fbab 	bl	8007cde <vListInsert>
}
 8009588:	e010      	b.n	80095ac <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800958a:	4b0e      	ldr	r3, [pc, #56]	; (80095c4 <prvAddCurrentTaskToDelayedList+0xa0>)
 800958c:	681a      	ldr	r2, [r3, #0]
 800958e:	4b0a      	ldr	r3, [pc, #40]	; (80095b8 <prvAddCurrentTaskToDelayedList+0x94>)
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	3304      	adds	r3, #4
 8009594:	4619      	mov	r1, r3
 8009596:	4610      	mov	r0, r2
 8009598:	f7fe fba1 	bl	8007cde <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800959c:	4b0a      	ldr	r3, [pc, #40]	; (80095c8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	68ba      	ldr	r2, [r7, #8]
 80095a2:	429a      	cmp	r2, r3
 80095a4:	d202      	bcs.n	80095ac <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80095a6:	4a08      	ldr	r2, [pc, #32]	; (80095c8 <prvAddCurrentTaskToDelayedList+0xa4>)
 80095a8:	68bb      	ldr	r3, [r7, #8]
 80095aa:	6013      	str	r3, [r2, #0]
}
 80095ac:	bf00      	nop
 80095ae:	3710      	adds	r7, #16
 80095b0:	46bd      	mov	sp, r7
 80095b2:	bd80      	pop	{r7, pc}
 80095b4:	20001924 	.word	0x20001924
 80095b8:	2000144c 	.word	0x2000144c
 80095bc:	2000190c 	.word	0x2000190c
 80095c0:	200018dc 	.word	0x200018dc
 80095c4:	200018d8 	.word	0x200018d8
 80095c8:	20001940 	.word	0x20001940

080095cc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80095cc:	b580      	push	{r7, lr}
 80095ce:	b08a      	sub	sp, #40	; 0x28
 80095d0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80095d2:	2300      	movs	r3, #0
 80095d4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80095d6:	f000 fb07 	bl	8009be8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80095da:	4b1c      	ldr	r3, [pc, #112]	; (800964c <xTimerCreateTimerTask+0x80>)
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	2b00      	cmp	r3, #0
 80095e0:	d021      	beq.n	8009626 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80095e2:	2300      	movs	r3, #0
 80095e4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80095e6:	2300      	movs	r3, #0
 80095e8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80095ea:	1d3a      	adds	r2, r7, #4
 80095ec:	f107 0108 	add.w	r1, r7, #8
 80095f0:	f107 030c 	add.w	r3, r7, #12
 80095f4:	4618      	mov	r0, r3
 80095f6:	f7fe fb07 	bl	8007c08 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80095fa:	6879      	ldr	r1, [r7, #4]
 80095fc:	68bb      	ldr	r3, [r7, #8]
 80095fe:	68fa      	ldr	r2, [r7, #12]
 8009600:	9202      	str	r2, [sp, #8]
 8009602:	9301      	str	r3, [sp, #4]
 8009604:	2302      	movs	r3, #2
 8009606:	9300      	str	r3, [sp, #0]
 8009608:	2300      	movs	r3, #0
 800960a:	460a      	mov	r2, r1
 800960c:	4910      	ldr	r1, [pc, #64]	; (8009650 <xTimerCreateTimerTask+0x84>)
 800960e:	4811      	ldr	r0, [pc, #68]	; (8009654 <xTimerCreateTimerTask+0x88>)
 8009610:	f7ff f8b4 	bl	800877c <xTaskCreateStatic>
 8009614:	4603      	mov	r3, r0
 8009616:	4a10      	ldr	r2, [pc, #64]	; (8009658 <xTimerCreateTimerTask+0x8c>)
 8009618:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800961a:	4b0f      	ldr	r3, [pc, #60]	; (8009658 <xTimerCreateTimerTask+0x8c>)
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	2b00      	cmp	r3, #0
 8009620:	d001      	beq.n	8009626 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8009622:	2301      	movs	r3, #1
 8009624:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8009626:	697b      	ldr	r3, [r7, #20]
 8009628:	2b00      	cmp	r3, #0
 800962a:	d10a      	bne.n	8009642 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800962c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009630:	f383 8811 	msr	BASEPRI, r3
 8009634:	f3bf 8f6f 	isb	sy
 8009638:	f3bf 8f4f 	dsb	sy
 800963c:	613b      	str	r3, [r7, #16]
}
 800963e:	bf00      	nop
 8009640:	e7fe      	b.n	8009640 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8009642:	697b      	ldr	r3, [r7, #20]
}
 8009644:	4618      	mov	r0, r3
 8009646:	3718      	adds	r7, #24
 8009648:	46bd      	mov	sp, r7
 800964a:	bd80      	pop	{r7, pc}
 800964c:	2000197c 	.word	0x2000197c
 8009650:	0800aed0 	.word	0x0800aed0
 8009654:	08009791 	.word	0x08009791
 8009658:	20001980 	.word	0x20001980

0800965c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800965c:	b580      	push	{r7, lr}
 800965e:	b08a      	sub	sp, #40	; 0x28
 8009660:	af00      	add	r7, sp, #0
 8009662:	60f8      	str	r0, [r7, #12]
 8009664:	60b9      	str	r1, [r7, #8]
 8009666:	607a      	str	r2, [r7, #4]
 8009668:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800966a:	2300      	movs	r3, #0
 800966c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	2b00      	cmp	r3, #0
 8009672:	d10a      	bne.n	800968a <xTimerGenericCommand+0x2e>
	__asm volatile
 8009674:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009678:	f383 8811 	msr	BASEPRI, r3
 800967c:	f3bf 8f6f 	isb	sy
 8009680:	f3bf 8f4f 	dsb	sy
 8009684:	623b      	str	r3, [r7, #32]
}
 8009686:	bf00      	nop
 8009688:	e7fe      	b.n	8009688 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800968a:	4b1a      	ldr	r3, [pc, #104]	; (80096f4 <xTimerGenericCommand+0x98>)
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	2b00      	cmp	r3, #0
 8009690:	d02a      	beq.n	80096e8 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8009692:	68bb      	ldr	r3, [r7, #8]
 8009694:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800969e:	68bb      	ldr	r3, [r7, #8]
 80096a0:	2b05      	cmp	r3, #5
 80096a2:	dc18      	bgt.n	80096d6 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80096a4:	f7ff feb2 	bl	800940c <xTaskGetSchedulerState>
 80096a8:	4603      	mov	r3, r0
 80096aa:	2b02      	cmp	r3, #2
 80096ac:	d109      	bne.n	80096c2 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80096ae:	4b11      	ldr	r3, [pc, #68]	; (80096f4 <xTimerGenericCommand+0x98>)
 80096b0:	6818      	ldr	r0, [r3, #0]
 80096b2:	f107 0110 	add.w	r1, r7, #16
 80096b6:	2300      	movs	r3, #0
 80096b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80096ba:	f7fe fc77 	bl	8007fac <xQueueGenericSend>
 80096be:	6278      	str	r0, [r7, #36]	; 0x24
 80096c0:	e012      	b.n	80096e8 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80096c2:	4b0c      	ldr	r3, [pc, #48]	; (80096f4 <xTimerGenericCommand+0x98>)
 80096c4:	6818      	ldr	r0, [r3, #0]
 80096c6:	f107 0110 	add.w	r1, r7, #16
 80096ca:	2300      	movs	r3, #0
 80096cc:	2200      	movs	r2, #0
 80096ce:	f7fe fc6d 	bl	8007fac <xQueueGenericSend>
 80096d2:	6278      	str	r0, [r7, #36]	; 0x24
 80096d4:	e008      	b.n	80096e8 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80096d6:	4b07      	ldr	r3, [pc, #28]	; (80096f4 <xTimerGenericCommand+0x98>)
 80096d8:	6818      	ldr	r0, [r3, #0]
 80096da:	f107 0110 	add.w	r1, r7, #16
 80096de:	2300      	movs	r3, #0
 80096e0:	683a      	ldr	r2, [r7, #0]
 80096e2:	f7fe fd61 	bl	80081a8 <xQueueGenericSendFromISR>
 80096e6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80096e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80096ea:	4618      	mov	r0, r3
 80096ec:	3728      	adds	r7, #40	; 0x28
 80096ee:	46bd      	mov	sp, r7
 80096f0:	bd80      	pop	{r7, pc}
 80096f2:	bf00      	nop
 80096f4:	2000197c 	.word	0x2000197c

080096f8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80096f8:	b580      	push	{r7, lr}
 80096fa:	b088      	sub	sp, #32
 80096fc:	af02      	add	r7, sp, #8
 80096fe:	6078      	str	r0, [r7, #4]
 8009700:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009702:	4b22      	ldr	r3, [pc, #136]	; (800978c <prvProcessExpiredTimer+0x94>)
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	68db      	ldr	r3, [r3, #12]
 8009708:	68db      	ldr	r3, [r3, #12]
 800970a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800970c:	697b      	ldr	r3, [r7, #20]
 800970e:	3304      	adds	r3, #4
 8009710:	4618      	mov	r0, r3
 8009712:	f7fe fb1d 	bl	8007d50 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009716:	697b      	ldr	r3, [r7, #20]
 8009718:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800971c:	f003 0304 	and.w	r3, r3, #4
 8009720:	2b00      	cmp	r3, #0
 8009722:	d022      	beq.n	800976a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009724:	697b      	ldr	r3, [r7, #20]
 8009726:	699a      	ldr	r2, [r3, #24]
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	18d1      	adds	r1, r2, r3
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	683a      	ldr	r2, [r7, #0]
 8009730:	6978      	ldr	r0, [r7, #20]
 8009732:	f000 f8d1 	bl	80098d8 <prvInsertTimerInActiveList>
 8009736:	4603      	mov	r3, r0
 8009738:	2b00      	cmp	r3, #0
 800973a:	d01f      	beq.n	800977c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800973c:	2300      	movs	r3, #0
 800973e:	9300      	str	r3, [sp, #0]
 8009740:	2300      	movs	r3, #0
 8009742:	687a      	ldr	r2, [r7, #4]
 8009744:	2100      	movs	r1, #0
 8009746:	6978      	ldr	r0, [r7, #20]
 8009748:	f7ff ff88 	bl	800965c <xTimerGenericCommand>
 800974c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800974e:	693b      	ldr	r3, [r7, #16]
 8009750:	2b00      	cmp	r3, #0
 8009752:	d113      	bne.n	800977c <prvProcessExpiredTimer+0x84>
	__asm volatile
 8009754:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009758:	f383 8811 	msr	BASEPRI, r3
 800975c:	f3bf 8f6f 	isb	sy
 8009760:	f3bf 8f4f 	dsb	sy
 8009764:	60fb      	str	r3, [r7, #12]
}
 8009766:	bf00      	nop
 8009768:	e7fe      	b.n	8009768 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800976a:	697b      	ldr	r3, [r7, #20]
 800976c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009770:	f023 0301 	bic.w	r3, r3, #1
 8009774:	b2da      	uxtb	r2, r3
 8009776:	697b      	ldr	r3, [r7, #20]
 8009778:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800977c:	697b      	ldr	r3, [r7, #20]
 800977e:	6a1b      	ldr	r3, [r3, #32]
 8009780:	6978      	ldr	r0, [r7, #20]
 8009782:	4798      	blx	r3
}
 8009784:	bf00      	nop
 8009786:	3718      	adds	r7, #24
 8009788:	46bd      	mov	sp, r7
 800978a:	bd80      	pop	{r7, pc}
 800978c:	20001974 	.word	0x20001974

08009790 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8009790:	b580      	push	{r7, lr}
 8009792:	b084      	sub	sp, #16
 8009794:	af00      	add	r7, sp, #0
 8009796:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009798:	f107 0308 	add.w	r3, r7, #8
 800979c:	4618      	mov	r0, r3
 800979e:	f000 f857 	bl	8009850 <prvGetNextExpireTime>
 80097a2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80097a4:	68bb      	ldr	r3, [r7, #8]
 80097a6:	4619      	mov	r1, r3
 80097a8:	68f8      	ldr	r0, [r7, #12]
 80097aa:	f000 f803 	bl	80097b4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80097ae:	f000 f8d5 	bl	800995c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80097b2:	e7f1      	b.n	8009798 <prvTimerTask+0x8>

080097b4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80097b4:	b580      	push	{r7, lr}
 80097b6:	b084      	sub	sp, #16
 80097b8:	af00      	add	r7, sp, #0
 80097ba:	6078      	str	r0, [r7, #4]
 80097bc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80097be:	f7ff fa39 	bl	8008c34 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80097c2:	f107 0308 	add.w	r3, r7, #8
 80097c6:	4618      	mov	r0, r3
 80097c8:	f000 f866 	bl	8009898 <prvSampleTimeNow>
 80097cc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80097ce:	68bb      	ldr	r3, [r7, #8]
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d130      	bne.n	8009836 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80097d4:	683b      	ldr	r3, [r7, #0]
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d10a      	bne.n	80097f0 <prvProcessTimerOrBlockTask+0x3c>
 80097da:	687a      	ldr	r2, [r7, #4]
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	429a      	cmp	r2, r3
 80097e0:	d806      	bhi.n	80097f0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80097e2:	f7ff fa35 	bl	8008c50 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80097e6:	68f9      	ldr	r1, [r7, #12]
 80097e8:	6878      	ldr	r0, [r7, #4]
 80097ea:	f7ff ff85 	bl	80096f8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80097ee:	e024      	b.n	800983a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80097f0:	683b      	ldr	r3, [r7, #0]
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d008      	beq.n	8009808 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80097f6:	4b13      	ldr	r3, [pc, #76]	; (8009844 <prvProcessTimerOrBlockTask+0x90>)
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	d101      	bne.n	8009804 <prvProcessTimerOrBlockTask+0x50>
 8009800:	2301      	movs	r3, #1
 8009802:	e000      	b.n	8009806 <prvProcessTimerOrBlockTask+0x52>
 8009804:	2300      	movs	r3, #0
 8009806:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009808:	4b0f      	ldr	r3, [pc, #60]	; (8009848 <prvProcessTimerOrBlockTask+0x94>)
 800980a:	6818      	ldr	r0, [r3, #0]
 800980c:	687a      	ldr	r2, [r7, #4]
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	1ad3      	subs	r3, r2, r3
 8009812:	683a      	ldr	r2, [r7, #0]
 8009814:	4619      	mov	r1, r3
 8009816:	f7fe ff7d 	bl	8008714 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800981a:	f7ff fa19 	bl	8008c50 <xTaskResumeAll>
 800981e:	4603      	mov	r3, r0
 8009820:	2b00      	cmp	r3, #0
 8009822:	d10a      	bne.n	800983a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009824:	4b09      	ldr	r3, [pc, #36]	; (800984c <prvProcessTimerOrBlockTask+0x98>)
 8009826:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800982a:	601a      	str	r2, [r3, #0]
 800982c:	f3bf 8f4f 	dsb	sy
 8009830:	f3bf 8f6f 	isb	sy
}
 8009834:	e001      	b.n	800983a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8009836:	f7ff fa0b 	bl	8008c50 <xTaskResumeAll>
}
 800983a:	bf00      	nop
 800983c:	3710      	adds	r7, #16
 800983e:	46bd      	mov	sp, r7
 8009840:	bd80      	pop	{r7, pc}
 8009842:	bf00      	nop
 8009844:	20001978 	.word	0x20001978
 8009848:	2000197c 	.word	0x2000197c
 800984c:	e000ed04 	.word	0xe000ed04

08009850 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009850:	b480      	push	{r7}
 8009852:	b085      	sub	sp, #20
 8009854:	af00      	add	r7, sp, #0
 8009856:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009858:	4b0e      	ldr	r3, [pc, #56]	; (8009894 <prvGetNextExpireTime+0x44>)
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	2b00      	cmp	r3, #0
 8009860:	d101      	bne.n	8009866 <prvGetNextExpireTime+0x16>
 8009862:	2201      	movs	r2, #1
 8009864:	e000      	b.n	8009868 <prvGetNextExpireTime+0x18>
 8009866:	2200      	movs	r2, #0
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	2b00      	cmp	r3, #0
 8009872:	d105      	bne.n	8009880 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009874:	4b07      	ldr	r3, [pc, #28]	; (8009894 <prvGetNextExpireTime+0x44>)
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	68db      	ldr	r3, [r3, #12]
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	60fb      	str	r3, [r7, #12]
 800987e:	e001      	b.n	8009884 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009880:	2300      	movs	r3, #0
 8009882:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009884:	68fb      	ldr	r3, [r7, #12]
}
 8009886:	4618      	mov	r0, r3
 8009888:	3714      	adds	r7, #20
 800988a:	46bd      	mov	sp, r7
 800988c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009890:	4770      	bx	lr
 8009892:	bf00      	nop
 8009894:	20001974 	.word	0x20001974

08009898 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009898:	b580      	push	{r7, lr}
 800989a:	b084      	sub	sp, #16
 800989c:	af00      	add	r7, sp, #0
 800989e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80098a0:	f7ff fa74 	bl	8008d8c <xTaskGetTickCount>
 80098a4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80098a6:	4b0b      	ldr	r3, [pc, #44]	; (80098d4 <prvSampleTimeNow+0x3c>)
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	68fa      	ldr	r2, [r7, #12]
 80098ac:	429a      	cmp	r2, r3
 80098ae:	d205      	bcs.n	80098bc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80098b0:	f000 f936 	bl	8009b20 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	2201      	movs	r2, #1
 80098b8:	601a      	str	r2, [r3, #0]
 80098ba:	e002      	b.n	80098c2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	2200      	movs	r2, #0
 80098c0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80098c2:	4a04      	ldr	r2, [pc, #16]	; (80098d4 <prvSampleTimeNow+0x3c>)
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80098c8:	68fb      	ldr	r3, [r7, #12]
}
 80098ca:	4618      	mov	r0, r3
 80098cc:	3710      	adds	r7, #16
 80098ce:	46bd      	mov	sp, r7
 80098d0:	bd80      	pop	{r7, pc}
 80098d2:	bf00      	nop
 80098d4:	20001984 	.word	0x20001984

080098d8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80098d8:	b580      	push	{r7, lr}
 80098da:	b086      	sub	sp, #24
 80098dc:	af00      	add	r7, sp, #0
 80098de:	60f8      	str	r0, [r7, #12]
 80098e0:	60b9      	str	r1, [r7, #8]
 80098e2:	607a      	str	r2, [r7, #4]
 80098e4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80098e6:	2300      	movs	r3, #0
 80098e8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	68ba      	ldr	r2, [r7, #8]
 80098ee:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	68fa      	ldr	r2, [r7, #12]
 80098f4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80098f6:	68ba      	ldr	r2, [r7, #8]
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	429a      	cmp	r2, r3
 80098fc:	d812      	bhi.n	8009924 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80098fe:	687a      	ldr	r2, [r7, #4]
 8009900:	683b      	ldr	r3, [r7, #0]
 8009902:	1ad2      	subs	r2, r2, r3
 8009904:	68fb      	ldr	r3, [r7, #12]
 8009906:	699b      	ldr	r3, [r3, #24]
 8009908:	429a      	cmp	r2, r3
 800990a:	d302      	bcc.n	8009912 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800990c:	2301      	movs	r3, #1
 800990e:	617b      	str	r3, [r7, #20]
 8009910:	e01b      	b.n	800994a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009912:	4b10      	ldr	r3, [pc, #64]	; (8009954 <prvInsertTimerInActiveList+0x7c>)
 8009914:	681a      	ldr	r2, [r3, #0]
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	3304      	adds	r3, #4
 800991a:	4619      	mov	r1, r3
 800991c:	4610      	mov	r0, r2
 800991e:	f7fe f9de 	bl	8007cde <vListInsert>
 8009922:	e012      	b.n	800994a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009924:	687a      	ldr	r2, [r7, #4]
 8009926:	683b      	ldr	r3, [r7, #0]
 8009928:	429a      	cmp	r2, r3
 800992a:	d206      	bcs.n	800993a <prvInsertTimerInActiveList+0x62>
 800992c:	68ba      	ldr	r2, [r7, #8]
 800992e:	683b      	ldr	r3, [r7, #0]
 8009930:	429a      	cmp	r2, r3
 8009932:	d302      	bcc.n	800993a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009934:	2301      	movs	r3, #1
 8009936:	617b      	str	r3, [r7, #20]
 8009938:	e007      	b.n	800994a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800993a:	4b07      	ldr	r3, [pc, #28]	; (8009958 <prvInsertTimerInActiveList+0x80>)
 800993c:	681a      	ldr	r2, [r3, #0]
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	3304      	adds	r3, #4
 8009942:	4619      	mov	r1, r3
 8009944:	4610      	mov	r0, r2
 8009946:	f7fe f9ca 	bl	8007cde <vListInsert>
		}
	}

	return xProcessTimerNow;
 800994a:	697b      	ldr	r3, [r7, #20]
}
 800994c:	4618      	mov	r0, r3
 800994e:	3718      	adds	r7, #24
 8009950:	46bd      	mov	sp, r7
 8009952:	bd80      	pop	{r7, pc}
 8009954:	20001978 	.word	0x20001978
 8009958:	20001974 	.word	0x20001974

0800995c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800995c:	b580      	push	{r7, lr}
 800995e:	b08e      	sub	sp, #56	; 0x38
 8009960:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009962:	e0ca      	b.n	8009afa <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	2b00      	cmp	r3, #0
 8009968:	da18      	bge.n	800999c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800996a:	1d3b      	adds	r3, r7, #4
 800996c:	3304      	adds	r3, #4
 800996e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009970:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009972:	2b00      	cmp	r3, #0
 8009974:	d10a      	bne.n	800998c <prvProcessReceivedCommands+0x30>
	__asm volatile
 8009976:	f04f 0350 	mov.w	r3, #80	; 0x50
 800997a:	f383 8811 	msr	BASEPRI, r3
 800997e:	f3bf 8f6f 	isb	sy
 8009982:	f3bf 8f4f 	dsb	sy
 8009986:	61fb      	str	r3, [r7, #28]
}
 8009988:	bf00      	nop
 800998a:	e7fe      	b.n	800998a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800998c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009992:	6850      	ldr	r0, [r2, #4]
 8009994:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009996:	6892      	ldr	r2, [r2, #8]
 8009998:	4611      	mov	r1, r2
 800999a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	2b00      	cmp	r3, #0
 80099a0:	f2c0 80aa 	blt.w	8009af8 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80099a4:	68fb      	ldr	r3, [r7, #12]
 80099a6:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80099a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099aa:	695b      	ldr	r3, [r3, #20]
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d004      	beq.n	80099ba <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80099b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099b2:	3304      	adds	r3, #4
 80099b4:	4618      	mov	r0, r3
 80099b6:	f7fe f9cb 	bl	8007d50 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80099ba:	463b      	mov	r3, r7
 80099bc:	4618      	mov	r0, r3
 80099be:	f7ff ff6b 	bl	8009898 <prvSampleTimeNow>
 80099c2:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	2b09      	cmp	r3, #9
 80099c8:	f200 8097 	bhi.w	8009afa <prvProcessReceivedCommands+0x19e>
 80099cc:	a201      	add	r2, pc, #4	; (adr r2, 80099d4 <prvProcessReceivedCommands+0x78>)
 80099ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099d2:	bf00      	nop
 80099d4:	080099fd 	.word	0x080099fd
 80099d8:	080099fd 	.word	0x080099fd
 80099dc:	080099fd 	.word	0x080099fd
 80099e0:	08009a71 	.word	0x08009a71
 80099e4:	08009a85 	.word	0x08009a85
 80099e8:	08009acf 	.word	0x08009acf
 80099ec:	080099fd 	.word	0x080099fd
 80099f0:	080099fd 	.word	0x080099fd
 80099f4:	08009a71 	.word	0x08009a71
 80099f8:	08009a85 	.word	0x08009a85
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80099fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099fe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009a02:	f043 0301 	orr.w	r3, r3, #1
 8009a06:	b2da      	uxtb	r2, r3
 8009a08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a0a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009a0e:	68ba      	ldr	r2, [r7, #8]
 8009a10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a12:	699b      	ldr	r3, [r3, #24]
 8009a14:	18d1      	adds	r1, r2, r3
 8009a16:	68bb      	ldr	r3, [r7, #8]
 8009a18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009a1a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009a1c:	f7ff ff5c 	bl	80098d8 <prvInsertTimerInActiveList>
 8009a20:	4603      	mov	r3, r0
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	d069      	beq.n	8009afa <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009a26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a28:	6a1b      	ldr	r3, [r3, #32]
 8009a2a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009a2c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009a2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a30:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009a34:	f003 0304 	and.w	r3, r3, #4
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	d05e      	beq.n	8009afa <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009a3c:	68ba      	ldr	r2, [r7, #8]
 8009a3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a40:	699b      	ldr	r3, [r3, #24]
 8009a42:	441a      	add	r2, r3
 8009a44:	2300      	movs	r3, #0
 8009a46:	9300      	str	r3, [sp, #0]
 8009a48:	2300      	movs	r3, #0
 8009a4a:	2100      	movs	r1, #0
 8009a4c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009a4e:	f7ff fe05 	bl	800965c <xTimerGenericCommand>
 8009a52:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009a54:	6a3b      	ldr	r3, [r7, #32]
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d14f      	bne.n	8009afa <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8009a5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a5e:	f383 8811 	msr	BASEPRI, r3
 8009a62:	f3bf 8f6f 	isb	sy
 8009a66:	f3bf 8f4f 	dsb	sy
 8009a6a:	61bb      	str	r3, [r7, #24]
}
 8009a6c:	bf00      	nop
 8009a6e:	e7fe      	b.n	8009a6e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009a70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a72:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009a76:	f023 0301 	bic.w	r3, r3, #1
 8009a7a:	b2da      	uxtb	r2, r3
 8009a7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a7e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8009a82:	e03a      	b.n	8009afa <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009a84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a86:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009a8a:	f043 0301 	orr.w	r3, r3, #1
 8009a8e:	b2da      	uxtb	r2, r3
 8009a90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a92:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009a96:	68ba      	ldr	r2, [r7, #8]
 8009a98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a9a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009a9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a9e:	699b      	ldr	r3, [r3, #24]
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d10a      	bne.n	8009aba <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8009aa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009aa8:	f383 8811 	msr	BASEPRI, r3
 8009aac:	f3bf 8f6f 	isb	sy
 8009ab0:	f3bf 8f4f 	dsb	sy
 8009ab4:	617b      	str	r3, [r7, #20]
}
 8009ab6:	bf00      	nop
 8009ab8:	e7fe      	b.n	8009ab8 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009aba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009abc:	699a      	ldr	r2, [r3, #24]
 8009abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ac0:	18d1      	adds	r1, r2, r3
 8009ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ac4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009ac6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009ac8:	f7ff ff06 	bl	80098d8 <prvInsertTimerInActiveList>
					break;
 8009acc:	e015      	b.n	8009afa <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8009ace:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ad0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009ad4:	f003 0302 	and.w	r3, r3, #2
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	d103      	bne.n	8009ae4 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8009adc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009ade:	f000 fbdf 	bl	800a2a0 <vPortFree>
 8009ae2:	e00a      	b.n	8009afa <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009ae4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ae6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009aea:	f023 0301 	bic.w	r3, r3, #1
 8009aee:	b2da      	uxtb	r2, r3
 8009af0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009af2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8009af6:	e000      	b.n	8009afa <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8009af8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009afa:	4b08      	ldr	r3, [pc, #32]	; (8009b1c <prvProcessReceivedCommands+0x1c0>)
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	1d39      	adds	r1, r7, #4
 8009b00:	2200      	movs	r2, #0
 8009b02:	4618      	mov	r0, r3
 8009b04:	f7fe fbec 	bl	80082e0 <xQueueReceive>
 8009b08:	4603      	mov	r3, r0
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	f47f af2a 	bne.w	8009964 <prvProcessReceivedCommands+0x8>
	}
}
 8009b10:	bf00      	nop
 8009b12:	bf00      	nop
 8009b14:	3730      	adds	r7, #48	; 0x30
 8009b16:	46bd      	mov	sp, r7
 8009b18:	bd80      	pop	{r7, pc}
 8009b1a:	bf00      	nop
 8009b1c:	2000197c 	.word	0x2000197c

08009b20 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009b20:	b580      	push	{r7, lr}
 8009b22:	b088      	sub	sp, #32
 8009b24:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009b26:	e048      	b.n	8009bba <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009b28:	4b2d      	ldr	r3, [pc, #180]	; (8009be0 <prvSwitchTimerLists+0xc0>)
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	68db      	ldr	r3, [r3, #12]
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009b32:	4b2b      	ldr	r3, [pc, #172]	; (8009be0 <prvSwitchTimerLists+0xc0>)
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	68db      	ldr	r3, [r3, #12]
 8009b38:	68db      	ldr	r3, [r3, #12]
 8009b3a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009b3c:	68fb      	ldr	r3, [r7, #12]
 8009b3e:	3304      	adds	r3, #4
 8009b40:	4618      	mov	r0, r3
 8009b42:	f7fe f905 	bl	8007d50 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009b46:	68fb      	ldr	r3, [r7, #12]
 8009b48:	6a1b      	ldr	r3, [r3, #32]
 8009b4a:	68f8      	ldr	r0, [r7, #12]
 8009b4c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009b4e:	68fb      	ldr	r3, [r7, #12]
 8009b50:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009b54:	f003 0304 	and.w	r3, r3, #4
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	d02e      	beq.n	8009bba <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009b5c:	68fb      	ldr	r3, [r7, #12]
 8009b5e:	699b      	ldr	r3, [r3, #24]
 8009b60:	693a      	ldr	r2, [r7, #16]
 8009b62:	4413      	add	r3, r2
 8009b64:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8009b66:	68ba      	ldr	r2, [r7, #8]
 8009b68:	693b      	ldr	r3, [r7, #16]
 8009b6a:	429a      	cmp	r2, r3
 8009b6c:	d90e      	bls.n	8009b8c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009b6e:	68fb      	ldr	r3, [r7, #12]
 8009b70:	68ba      	ldr	r2, [r7, #8]
 8009b72:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009b74:	68fb      	ldr	r3, [r7, #12]
 8009b76:	68fa      	ldr	r2, [r7, #12]
 8009b78:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009b7a:	4b19      	ldr	r3, [pc, #100]	; (8009be0 <prvSwitchTimerLists+0xc0>)
 8009b7c:	681a      	ldr	r2, [r3, #0]
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	3304      	adds	r3, #4
 8009b82:	4619      	mov	r1, r3
 8009b84:	4610      	mov	r0, r2
 8009b86:	f7fe f8aa 	bl	8007cde <vListInsert>
 8009b8a:	e016      	b.n	8009bba <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009b8c:	2300      	movs	r3, #0
 8009b8e:	9300      	str	r3, [sp, #0]
 8009b90:	2300      	movs	r3, #0
 8009b92:	693a      	ldr	r2, [r7, #16]
 8009b94:	2100      	movs	r1, #0
 8009b96:	68f8      	ldr	r0, [r7, #12]
 8009b98:	f7ff fd60 	bl	800965c <xTimerGenericCommand>
 8009b9c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	d10a      	bne.n	8009bba <prvSwitchTimerLists+0x9a>
	__asm volatile
 8009ba4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ba8:	f383 8811 	msr	BASEPRI, r3
 8009bac:	f3bf 8f6f 	isb	sy
 8009bb0:	f3bf 8f4f 	dsb	sy
 8009bb4:	603b      	str	r3, [r7, #0]
}
 8009bb6:	bf00      	nop
 8009bb8:	e7fe      	b.n	8009bb8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009bba:	4b09      	ldr	r3, [pc, #36]	; (8009be0 <prvSwitchTimerLists+0xc0>)
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	d1b1      	bne.n	8009b28 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009bc4:	4b06      	ldr	r3, [pc, #24]	; (8009be0 <prvSwitchTimerLists+0xc0>)
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8009bca:	4b06      	ldr	r3, [pc, #24]	; (8009be4 <prvSwitchTimerLists+0xc4>)
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	4a04      	ldr	r2, [pc, #16]	; (8009be0 <prvSwitchTimerLists+0xc0>)
 8009bd0:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009bd2:	4a04      	ldr	r2, [pc, #16]	; (8009be4 <prvSwitchTimerLists+0xc4>)
 8009bd4:	697b      	ldr	r3, [r7, #20]
 8009bd6:	6013      	str	r3, [r2, #0]
}
 8009bd8:	bf00      	nop
 8009bda:	3718      	adds	r7, #24
 8009bdc:	46bd      	mov	sp, r7
 8009bde:	bd80      	pop	{r7, pc}
 8009be0:	20001974 	.word	0x20001974
 8009be4:	20001978 	.word	0x20001978

08009be8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009be8:	b580      	push	{r7, lr}
 8009bea:	b082      	sub	sp, #8
 8009bec:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8009bee:	f000 f969 	bl	8009ec4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009bf2:	4b15      	ldr	r3, [pc, #84]	; (8009c48 <prvCheckForValidListAndQueue+0x60>)
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	d120      	bne.n	8009c3c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8009bfa:	4814      	ldr	r0, [pc, #80]	; (8009c4c <prvCheckForValidListAndQueue+0x64>)
 8009bfc:	f7fe f81e 	bl	8007c3c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009c00:	4813      	ldr	r0, [pc, #76]	; (8009c50 <prvCheckForValidListAndQueue+0x68>)
 8009c02:	f7fe f81b 	bl	8007c3c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009c06:	4b13      	ldr	r3, [pc, #76]	; (8009c54 <prvCheckForValidListAndQueue+0x6c>)
 8009c08:	4a10      	ldr	r2, [pc, #64]	; (8009c4c <prvCheckForValidListAndQueue+0x64>)
 8009c0a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009c0c:	4b12      	ldr	r3, [pc, #72]	; (8009c58 <prvCheckForValidListAndQueue+0x70>)
 8009c0e:	4a10      	ldr	r2, [pc, #64]	; (8009c50 <prvCheckForValidListAndQueue+0x68>)
 8009c10:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009c12:	2300      	movs	r3, #0
 8009c14:	9300      	str	r3, [sp, #0]
 8009c16:	4b11      	ldr	r3, [pc, #68]	; (8009c5c <prvCheckForValidListAndQueue+0x74>)
 8009c18:	4a11      	ldr	r2, [pc, #68]	; (8009c60 <prvCheckForValidListAndQueue+0x78>)
 8009c1a:	2110      	movs	r1, #16
 8009c1c:	200a      	movs	r0, #10
 8009c1e:	f7fe f929 	bl	8007e74 <xQueueGenericCreateStatic>
 8009c22:	4603      	mov	r3, r0
 8009c24:	4a08      	ldr	r2, [pc, #32]	; (8009c48 <prvCheckForValidListAndQueue+0x60>)
 8009c26:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009c28:	4b07      	ldr	r3, [pc, #28]	; (8009c48 <prvCheckForValidListAndQueue+0x60>)
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	d005      	beq.n	8009c3c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009c30:	4b05      	ldr	r3, [pc, #20]	; (8009c48 <prvCheckForValidListAndQueue+0x60>)
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	490b      	ldr	r1, [pc, #44]	; (8009c64 <prvCheckForValidListAndQueue+0x7c>)
 8009c36:	4618      	mov	r0, r3
 8009c38:	f7fe fd42 	bl	80086c0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009c3c:	f000 f972 	bl	8009f24 <vPortExitCritical>
}
 8009c40:	bf00      	nop
 8009c42:	46bd      	mov	sp, r7
 8009c44:	bd80      	pop	{r7, pc}
 8009c46:	bf00      	nop
 8009c48:	2000197c 	.word	0x2000197c
 8009c4c:	2000194c 	.word	0x2000194c
 8009c50:	20001960 	.word	0x20001960
 8009c54:	20001974 	.word	0x20001974
 8009c58:	20001978 	.word	0x20001978
 8009c5c:	20001a28 	.word	0x20001a28
 8009c60:	20001988 	.word	0x20001988
 8009c64:	0800aed8 	.word	0x0800aed8

08009c68 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009c68:	b480      	push	{r7}
 8009c6a:	b085      	sub	sp, #20
 8009c6c:	af00      	add	r7, sp, #0
 8009c6e:	60f8      	str	r0, [r7, #12]
 8009c70:	60b9      	str	r1, [r7, #8]
 8009c72:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009c74:	68fb      	ldr	r3, [r7, #12]
 8009c76:	3b04      	subs	r3, #4
 8009c78:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009c7a:	68fb      	ldr	r3, [r7, #12]
 8009c7c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009c80:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009c82:	68fb      	ldr	r3, [r7, #12]
 8009c84:	3b04      	subs	r3, #4
 8009c86:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009c88:	68bb      	ldr	r3, [r7, #8]
 8009c8a:	f023 0201 	bic.w	r2, r3, #1
 8009c8e:	68fb      	ldr	r3, [r7, #12]
 8009c90:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009c92:	68fb      	ldr	r3, [r7, #12]
 8009c94:	3b04      	subs	r3, #4
 8009c96:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009c98:	4a0c      	ldr	r2, [pc, #48]	; (8009ccc <pxPortInitialiseStack+0x64>)
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	3b14      	subs	r3, #20
 8009ca2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009ca4:	687a      	ldr	r2, [r7, #4]
 8009ca6:	68fb      	ldr	r3, [r7, #12]
 8009ca8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	3b04      	subs	r3, #4
 8009cae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	f06f 0202 	mvn.w	r2, #2
 8009cb6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009cb8:	68fb      	ldr	r3, [r7, #12]
 8009cba:	3b20      	subs	r3, #32
 8009cbc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009cbe:	68fb      	ldr	r3, [r7, #12]
}
 8009cc0:	4618      	mov	r0, r3
 8009cc2:	3714      	adds	r7, #20
 8009cc4:	46bd      	mov	sp, r7
 8009cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cca:	4770      	bx	lr
 8009ccc:	08009cd1 	.word	0x08009cd1

08009cd0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009cd0:	b480      	push	{r7}
 8009cd2:	b085      	sub	sp, #20
 8009cd4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009cd6:	2300      	movs	r3, #0
 8009cd8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009cda:	4b12      	ldr	r3, [pc, #72]	; (8009d24 <prvTaskExitError+0x54>)
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ce2:	d00a      	beq.n	8009cfa <prvTaskExitError+0x2a>
	__asm volatile
 8009ce4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ce8:	f383 8811 	msr	BASEPRI, r3
 8009cec:	f3bf 8f6f 	isb	sy
 8009cf0:	f3bf 8f4f 	dsb	sy
 8009cf4:	60fb      	str	r3, [r7, #12]
}
 8009cf6:	bf00      	nop
 8009cf8:	e7fe      	b.n	8009cf8 <prvTaskExitError+0x28>
	__asm volatile
 8009cfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cfe:	f383 8811 	msr	BASEPRI, r3
 8009d02:	f3bf 8f6f 	isb	sy
 8009d06:	f3bf 8f4f 	dsb	sy
 8009d0a:	60bb      	str	r3, [r7, #8]
}
 8009d0c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009d0e:	bf00      	nop
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	d0fc      	beq.n	8009d10 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009d16:	bf00      	nop
 8009d18:	bf00      	nop
 8009d1a:	3714      	adds	r7, #20
 8009d1c:	46bd      	mov	sp, r7
 8009d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d22:	4770      	bx	lr
 8009d24:	2000000c 	.word	0x2000000c
	...

08009d30 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009d30:	4b07      	ldr	r3, [pc, #28]	; (8009d50 <pxCurrentTCBConst2>)
 8009d32:	6819      	ldr	r1, [r3, #0]
 8009d34:	6808      	ldr	r0, [r1, #0]
 8009d36:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d3a:	f380 8809 	msr	PSP, r0
 8009d3e:	f3bf 8f6f 	isb	sy
 8009d42:	f04f 0000 	mov.w	r0, #0
 8009d46:	f380 8811 	msr	BASEPRI, r0
 8009d4a:	4770      	bx	lr
 8009d4c:	f3af 8000 	nop.w

08009d50 <pxCurrentTCBConst2>:
 8009d50:	2000144c 	.word	0x2000144c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009d54:	bf00      	nop
 8009d56:	bf00      	nop

08009d58 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009d58:	4808      	ldr	r0, [pc, #32]	; (8009d7c <prvPortStartFirstTask+0x24>)
 8009d5a:	6800      	ldr	r0, [r0, #0]
 8009d5c:	6800      	ldr	r0, [r0, #0]
 8009d5e:	f380 8808 	msr	MSP, r0
 8009d62:	f04f 0000 	mov.w	r0, #0
 8009d66:	f380 8814 	msr	CONTROL, r0
 8009d6a:	b662      	cpsie	i
 8009d6c:	b661      	cpsie	f
 8009d6e:	f3bf 8f4f 	dsb	sy
 8009d72:	f3bf 8f6f 	isb	sy
 8009d76:	df00      	svc	0
 8009d78:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8009d7a:	bf00      	nop
 8009d7c:	e000ed08 	.word	0xe000ed08

08009d80 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009d80:	b580      	push	{r7, lr}
 8009d82:	b086      	sub	sp, #24
 8009d84:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009d86:	4b46      	ldr	r3, [pc, #280]	; (8009ea0 <xPortStartScheduler+0x120>)
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	4a46      	ldr	r2, [pc, #280]	; (8009ea4 <xPortStartScheduler+0x124>)
 8009d8c:	4293      	cmp	r3, r2
 8009d8e:	d10a      	bne.n	8009da6 <xPortStartScheduler+0x26>
	__asm volatile
 8009d90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d94:	f383 8811 	msr	BASEPRI, r3
 8009d98:	f3bf 8f6f 	isb	sy
 8009d9c:	f3bf 8f4f 	dsb	sy
 8009da0:	613b      	str	r3, [r7, #16]
}
 8009da2:	bf00      	nop
 8009da4:	e7fe      	b.n	8009da4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009da6:	4b3e      	ldr	r3, [pc, #248]	; (8009ea0 <xPortStartScheduler+0x120>)
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	4a3f      	ldr	r2, [pc, #252]	; (8009ea8 <xPortStartScheduler+0x128>)
 8009dac:	4293      	cmp	r3, r2
 8009dae:	d10a      	bne.n	8009dc6 <xPortStartScheduler+0x46>
	__asm volatile
 8009db0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009db4:	f383 8811 	msr	BASEPRI, r3
 8009db8:	f3bf 8f6f 	isb	sy
 8009dbc:	f3bf 8f4f 	dsb	sy
 8009dc0:	60fb      	str	r3, [r7, #12]
}
 8009dc2:	bf00      	nop
 8009dc4:	e7fe      	b.n	8009dc4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009dc6:	4b39      	ldr	r3, [pc, #228]	; (8009eac <xPortStartScheduler+0x12c>)
 8009dc8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009dca:	697b      	ldr	r3, [r7, #20]
 8009dcc:	781b      	ldrb	r3, [r3, #0]
 8009dce:	b2db      	uxtb	r3, r3
 8009dd0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009dd2:	697b      	ldr	r3, [r7, #20]
 8009dd4:	22ff      	movs	r2, #255	; 0xff
 8009dd6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009dd8:	697b      	ldr	r3, [r7, #20]
 8009dda:	781b      	ldrb	r3, [r3, #0]
 8009ddc:	b2db      	uxtb	r3, r3
 8009dde:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009de0:	78fb      	ldrb	r3, [r7, #3]
 8009de2:	b2db      	uxtb	r3, r3
 8009de4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009de8:	b2da      	uxtb	r2, r3
 8009dea:	4b31      	ldr	r3, [pc, #196]	; (8009eb0 <xPortStartScheduler+0x130>)
 8009dec:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009dee:	4b31      	ldr	r3, [pc, #196]	; (8009eb4 <xPortStartScheduler+0x134>)
 8009df0:	2207      	movs	r2, #7
 8009df2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009df4:	e009      	b.n	8009e0a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8009df6:	4b2f      	ldr	r3, [pc, #188]	; (8009eb4 <xPortStartScheduler+0x134>)
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	3b01      	subs	r3, #1
 8009dfc:	4a2d      	ldr	r2, [pc, #180]	; (8009eb4 <xPortStartScheduler+0x134>)
 8009dfe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009e00:	78fb      	ldrb	r3, [r7, #3]
 8009e02:	b2db      	uxtb	r3, r3
 8009e04:	005b      	lsls	r3, r3, #1
 8009e06:	b2db      	uxtb	r3, r3
 8009e08:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009e0a:	78fb      	ldrb	r3, [r7, #3]
 8009e0c:	b2db      	uxtb	r3, r3
 8009e0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009e12:	2b80      	cmp	r3, #128	; 0x80
 8009e14:	d0ef      	beq.n	8009df6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009e16:	4b27      	ldr	r3, [pc, #156]	; (8009eb4 <xPortStartScheduler+0x134>)
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	f1c3 0307 	rsb	r3, r3, #7
 8009e1e:	2b04      	cmp	r3, #4
 8009e20:	d00a      	beq.n	8009e38 <xPortStartScheduler+0xb8>
	__asm volatile
 8009e22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e26:	f383 8811 	msr	BASEPRI, r3
 8009e2a:	f3bf 8f6f 	isb	sy
 8009e2e:	f3bf 8f4f 	dsb	sy
 8009e32:	60bb      	str	r3, [r7, #8]
}
 8009e34:	bf00      	nop
 8009e36:	e7fe      	b.n	8009e36 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009e38:	4b1e      	ldr	r3, [pc, #120]	; (8009eb4 <xPortStartScheduler+0x134>)
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	021b      	lsls	r3, r3, #8
 8009e3e:	4a1d      	ldr	r2, [pc, #116]	; (8009eb4 <xPortStartScheduler+0x134>)
 8009e40:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009e42:	4b1c      	ldr	r3, [pc, #112]	; (8009eb4 <xPortStartScheduler+0x134>)
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009e4a:	4a1a      	ldr	r2, [pc, #104]	; (8009eb4 <xPortStartScheduler+0x134>)
 8009e4c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	b2da      	uxtb	r2, r3
 8009e52:	697b      	ldr	r3, [r7, #20]
 8009e54:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009e56:	4b18      	ldr	r3, [pc, #96]	; (8009eb8 <xPortStartScheduler+0x138>)
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	4a17      	ldr	r2, [pc, #92]	; (8009eb8 <xPortStartScheduler+0x138>)
 8009e5c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009e60:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009e62:	4b15      	ldr	r3, [pc, #84]	; (8009eb8 <xPortStartScheduler+0x138>)
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	4a14      	ldr	r2, [pc, #80]	; (8009eb8 <xPortStartScheduler+0x138>)
 8009e68:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8009e6c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009e6e:	f000 f8dd 	bl	800a02c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009e72:	4b12      	ldr	r3, [pc, #72]	; (8009ebc <xPortStartScheduler+0x13c>)
 8009e74:	2200      	movs	r2, #0
 8009e76:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009e78:	f000 f8fc 	bl	800a074 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009e7c:	4b10      	ldr	r3, [pc, #64]	; (8009ec0 <xPortStartScheduler+0x140>)
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	4a0f      	ldr	r2, [pc, #60]	; (8009ec0 <xPortStartScheduler+0x140>)
 8009e82:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8009e86:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009e88:	f7ff ff66 	bl	8009d58 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009e8c:	f7ff f848 	bl	8008f20 <vTaskSwitchContext>
	prvTaskExitError();
 8009e90:	f7ff ff1e 	bl	8009cd0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009e94:	2300      	movs	r3, #0
}
 8009e96:	4618      	mov	r0, r3
 8009e98:	3718      	adds	r7, #24
 8009e9a:	46bd      	mov	sp, r7
 8009e9c:	bd80      	pop	{r7, pc}
 8009e9e:	bf00      	nop
 8009ea0:	e000ed00 	.word	0xe000ed00
 8009ea4:	410fc271 	.word	0x410fc271
 8009ea8:	410fc270 	.word	0x410fc270
 8009eac:	e000e400 	.word	0xe000e400
 8009eb0:	20001a78 	.word	0x20001a78
 8009eb4:	20001a7c 	.word	0x20001a7c
 8009eb8:	e000ed20 	.word	0xe000ed20
 8009ebc:	2000000c 	.word	0x2000000c
 8009ec0:	e000ef34 	.word	0xe000ef34

08009ec4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009ec4:	b480      	push	{r7}
 8009ec6:	b083      	sub	sp, #12
 8009ec8:	af00      	add	r7, sp, #0
	__asm volatile
 8009eca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ece:	f383 8811 	msr	BASEPRI, r3
 8009ed2:	f3bf 8f6f 	isb	sy
 8009ed6:	f3bf 8f4f 	dsb	sy
 8009eda:	607b      	str	r3, [r7, #4]
}
 8009edc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009ede:	4b0f      	ldr	r3, [pc, #60]	; (8009f1c <vPortEnterCritical+0x58>)
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	3301      	adds	r3, #1
 8009ee4:	4a0d      	ldr	r2, [pc, #52]	; (8009f1c <vPortEnterCritical+0x58>)
 8009ee6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009ee8:	4b0c      	ldr	r3, [pc, #48]	; (8009f1c <vPortEnterCritical+0x58>)
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	2b01      	cmp	r3, #1
 8009eee:	d10f      	bne.n	8009f10 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009ef0:	4b0b      	ldr	r3, [pc, #44]	; (8009f20 <vPortEnterCritical+0x5c>)
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	b2db      	uxtb	r3, r3
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	d00a      	beq.n	8009f10 <vPortEnterCritical+0x4c>
	__asm volatile
 8009efa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009efe:	f383 8811 	msr	BASEPRI, r3
 8009f02:	f3bf 8f6f 	isb	sy
 8009f06:	f3bf 8f4f 	dsb	sy
 8009f0a:	603b      	str	r3, [r7, #0]
}
 8009f0c:	bf00      	nop
 8009f0e:	e7fe      	b.n	8009f0e <vPortEnterCritical+0x4a>
	}
}
 8009f10:	bf00      	nop
 8009f12:	370c      	adds	r7, #12
 8009f14:	46bd      	mov	sp, r7
 8009f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f1a:	4770      	bx	lr
 8009f1c:	2000000c 	.word	0x2000000c
 8009f20:	e000ed04 	.word	0xe000ed04

08009f24 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009f24:	b480      	push	{r7}
 8009f26:	b083      	sub	sp, #12
 8009f28:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009f2a:	4b12      	ldr	r3, [pc, #72]	; (8009f74 <vPortExitCritical+0x50>)
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	d10a      	bne.n	8009f48 <vPortExitCritical+0x24>
	__asm volatile
 8009f32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f36:	f383 8811 	msr	BASEPRI, r3
 8009f3a:	f3bf 8f6f 	isb	sy
 8009f3e:	f3bf 8f4f 	dsb	sy
 8009f42:	607b      	str	r3, [r7, #4]
}
 8009f44:	bf00      	nop
 8009f46:	e7fe      	b.n	8009f46 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009f48:	4b0a      	ldr	r3, [pc, #40]	; (8009f74 <vPortExitCritical+0x50>)
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	3b01      	subs	r3, #1
 8009f4e:	4a09      	ldr	r2, [pc, #36]	; (8009f74 <vPortExitCritical+0x50>)
 8009f50:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009f52:	4b08      	ldr	r3, [pc, #32]	; (8009f74 <vPortExitCritical+0x50>)
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d105      	bne.n	8009f66 <vPortExitCritical+0x42>
 8009f5a:	2300      	movs	r3, #0
 8009f5c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009f5e:	683b      	ldr	r3, [r7, #0]
 8009f60:	f383 8811 	msr	BASEPRI, r3
}
 8009f64:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009f66:	bf00      	nop
 8009f68:	370c      	adds	r7, #12
 8009f6a:	46bd      	mov	sp, r7
 8009f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f70:	4770      	bx	lr
 8009f72:	bf00      	nop
 8009f74:	2000000c 	.word	0x2000000c
	...

08009f80 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009f80:	f3ef 8009 	mrs	r0, PSP
 8009f84:	f3bf 8f6f 	isb	sy
 8009f88:	4b15      	ldr	r3, [pc, #84]	; (8009fe0 <pxCurrentTCBConst>)
 8009f8a:	681a      	ldr	r2, [r3, #0]
 8009f8c:	f01e 0f10 	tst.w	lr, #16
 8009f90:	bf08      	it	eq
 8009f92:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009f96:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f9a:	6010      	str	r0, [r2, #0]
 8009f9c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009fa0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009fa4:	f380 8811 	msr	BASEPRI, r0
 8009fa8:	f3bf 8f4f 	dsb	sy
 8009fac:	f3bf 8f6f 	isb	sy
 8009fb0:	f7fe ffb6 	bl	8008f20 <vTaskSwitchContext>
 8009fb4:	f04f 0000 	mov.w	r0, #0
 8009fb8:	f380 8811 	msr	BASEPRI, r0
 8009fbc:	bc09      	pop	{r0, r3}
 8009fbe:	6819      	ldr	r1, [r3, #0]
 8009fc0:	6808      	ldr	r0, [r1, #0]
 8009fc2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fc6:	f01e 0f10 	tst.w	lr, #16
 8009fca:	bf08      	it	eq
 8009fcc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009fd0:	f380 8809 	msr	PSP, r0
 8009fd4:	f3bf 8f6f 	isb	sy
 8009fd8:	4770      	bx	lr
 8009fda:	bf00      	nop
 8009fdc:	f3af 8000 	nop.w

08009fe0 <pxCurrentTCBConst>:
 8009fe0:	2000144c 	.word	0x2000144c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009fe4:	bf00      	nop
 8009fe6:	bf00      	nop

08009fe8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009fe8:	b580      	push	{r7, lr}
 8009fea:	b082      	sub	sp, #8
 8009fec:	af00      	add	r7, sp, #0
	__asm volatile
 8009fee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ff2:	f383 8811 	msr	BASEPRI, r3
 8009ff6:	f3bf 8f6f 	isb	sy
 8009ffa:	f3bf 8f4f 	dsb	sy
 8009ffe:	607b      	str	r3, [r7, #4]
}
 800a000:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a002:	f7fe fed3 	bl	8008dac <xTaskIncrementTick>
 800a006:	4603      	mov	r3, r0
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d003      	beq.n	800a014 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a00c:	4b06      	ldr	r3, [pc, #24]	; (800a028 <xPortSysTickHandler+0x40>)
 800a00e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a012:	601a      	str	r2, [r3, #0]
 800a014:	2300      	movs	r3, #0
 800a016:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a018:	683b      	ldr	r3, [r7, #0]
 800a01a:	f383 8811 	msr	BASEPRI, r3
}
 800a01e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a020:	bf00      	nop
 800a022:	3708      	adds	r7, #8
 800a024:	46bd      	mov	sp, r7
 800a026:	bd80      	pop	{r7, pc}
 800a028:	e000ed04 	.word	0xe000ed04

0800a02c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a02c:	b480      	push	{r7}
 800a02e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a030:	4b0b      	ldr	r3, [pc, #44]	; (800a060 <vPortSetupTimerInterrupt+0x34>)
 800a032:	2200      	movs	r2, #0
 800a034:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a036:	4b0b      	ldr	r3, [pc, #44]	; (800a064 <vPortSetupTimerInterrupt+0x38>)
 800a038:	2200      	movs	r2, #0
 800a03a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a03c:	4b0a      	ldr	r3, [pc, #40]	; (800a068 <vPortSetupTimerInterrupt+0x3c>)
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	4a0a      	ldr	r2, [pc, #40]	; (800a06c <vPortSetupTimerInterrupt+0x40>)
 800a042:	fba2 2303 	umull	r2, r3, r2, r3
 800a046:	099b      	lsrs	r3, r3, #6
 800a048:	4a09      	ldr	r2, [pc, #36]	; (800a070 <vPortSetupTimerInterrupt+0x44>)
 800a04a:	3b01      	subs	r3, #1
 800a04c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a04e:	4b04      	ldr	r3, [pc, #16]	; (800a060 <vPortSetupTimerInterrupt+0x34>)
 800a050:	2207      	movs	r2, #7
 800a052:	601a      	str	r2, [r3, #0]
}
 800a054:	bf00      	nop
 800a056:	46bd      	mov	sp, r7
 800a058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a05c:	4770      	bx	lr
 800a05e:	bf00      	nop
 800a060:	e000e010 	.word	0xe000e010
 800a064:	e000e018 	.word	0xe000e018
 800a068:	20000000 	.word	0x20000000
 800a06c:	10624dd3 	.word	0x10624dd3
 800a070:	e000e014 	.word	0xe000e014

0800a074 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a074:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800a084 <vPortEnableVFP+0x10>
 800a078:	6801      	ldr	r1, [r0, #0]
 800a07a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800a07e:	6001      	str	r1, [r0, #0]
 800a080:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a082:	bf00      	nop
 800a084:	e000ed88 	.word	0xe000ed88

0800a088 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a088:	b480      	push	{r7}
 800a08a:	b085      	sub	sp, #20
 800a08c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a08e:	f3ef 8305 	mrs	r3, IPSR
 800a092:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a094:	68fb      	ldr	r3, [r7, #12]
 800a096:	2b0f      	cmp	r3, #15
 800a098:	d914      	bls.n	800a0c4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a09a:	4a17      	ldr	r2, [pc, #92]	; (800a0f8 <vPortValidateInterruptPriority+0x70>)
 800a09c:	68fb      	ldr	r3, [r7, #12]
 800a09e:	4413      	add	r3, r2
 800a0a0:	781b      	ldrb	r3, [r3, #0]
 800a0a2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a0a4:	4b15      	ldr	r3, [pc, #84]	; (800a0fc <vPortValidateInterruptPriority+0x74>)
 800a0a6:	781b      	ldrb	r3, [r3, #0]
 800a0a8:	7afa      	ldrb	r2, [r7, #11]
 800a0aa:	429a      	cmp	r2, r3
 800a0ac:	d20a      	bcs.n	800a0c4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800a0ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0b2:	f383 8811 	msr	BASEPRI, r3
 800a0b6:	f3bf 8f6f 	isb	sy
 800a0ba:	f3bf 8f4f 	dsb	sy
 800a0be:	607b      	str	r3, [r7, #4]
}
 800a0c0:	bf00      	nop
 800a0c2:	e7fe      	b.n	800a0c2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a0c4:	4b0e      	ldr	r3, [pc, #56]	; (800a100 <vPortValidateInterruptPriority+0x78>)
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800a0cc:	4b0d      	ldr	r3, [pc, #52]	; (800a104 <vPortValidateInterruptPriority+0x7c>)
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	429a      	cmp	r2, r3
 800a0d2:	d90a      	bls.n	800a0ea <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800a0d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0d8:	f383 8811 	msr	BASEPRI, r3
 800a0dc:	f3bf 8f6f 	isb	sy
 800a0e0:	f3bf 8f4f 	dsb	sy
 800a0e4:	603b      	str	r3, [r7, #0]
}
 800a0e6:	bf00      	nop
 800a0e8:	e7fe      	b.n	800a0e8 <vPortValidateInterruptPriority+0x60>
	}
 800a0ea:	bf00      	nop
 800a0ec:	3714      	adds	r7, #20
 800a0ee:	46bd      	mov	sp, r7
 800a0f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0f4:	4770      	bx	lr
 800a0f6:	bf00      	nop
 800a0f8:	e000e3f0 	.word	0xe000e3f0
 800a0fc:	20001a78 	.word	0x20001a78
 800a100:	e000ed0c 	.word	0xe000ed0c
 800a104:	20001a7c 	.word	0x20001a7c

0800a108 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a108:	b580      	push	{r7, lr}
 800a10a:	b08a      	sub	sp, #40	; 0x28
 800a10c:	af00      	add	r7, sp, #0
 800a10e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a110:	2300      	movs	r3, #0
 800a112:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a114:	f7fe fd8e 	bl	8008c34 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a118:	4b5b      	ldr	r3, [pc, #364]	; (800a288 <pvPortMalloc+0x180>)
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	d101      	bne.n	800a124 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a120:	f000 f920 	bl	800a364 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a124:	4b59      	ldr	r3, [pc, #356]	; (800a28c <pvPortMalloc+0x184>)
 800a126:	681a      	ldr	r2, [r3, #0]
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	4013      	ands	r3, r2
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	f040 8093 	bne.w	800a258 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	2b00      	cmp	r3, #0
 800a136:	d01d      	beq.n	800a174 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800a138:	2208      	movs	r2, #8
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	4413      	add	r3, r2
 800a13e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	f003 0307 	and.w	r3, r3, #7
 800a146:	2b00      	cmp	r3, #0
 800a148:	d014      	beq.n	800a174 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	f023 0307 	bic.w	r3, r3, #7
 800a150:	3308      	adds	r3, #8
 800a152:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	f003 0307 	and.w	r3, r3, #7
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	d00a      	beq.n	800a174 <pvPortMalloc+0x6c>
	__asm volatile
 800a15e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a162:	f383 8811 	msr	BASEPRI, r3
 800a166:	f3bf 8f6f 	isb	sy
 800a16a:	f3bf 8f4f 	dsb	sy
 800a16e:	617b      	str	r3, [r7, #20]
}
 800a170:	bf00      	nop
 800a172:	e7fe      	b.n	800a172 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	2b00      	cmp	r3, #0
 800a178:	d06e      	beq.n	800a258 <pvPortMalloc+0x150>
 800a17a:	4b45      	ldr	r3, [pc, #276]	; (800a290 <pvPortMalloc+0x188>)
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	687a      	ldr	r2, [r7, #4]
 800a180:	429a      	cmp	r2, r3
 800a182:	d869      	bhi.n	800a258 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a184:	4b43      	ldr	r3, [pc, #268]	; (800a294 <pvPortMalloc+0x18c>)
 800a186:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a188:	4b42      	ldr	r3, [pc, #264]	; (800a294 <pvPortMalloc+0x18c>)
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a18e:	e004      	b.n	800a19a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800a190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a192:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a19a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a19c:	685b      	ldr	r3, [r3, #4]
 800a19e:	687a      	ldr	r2, [r7, #4]
 800a1a0:	429a      	cmp	r2, r3
 800a1a2:	d903      	bls.n	800a1ac <pvPortMalloc+0xa4>
 800a1a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d1f1      	bne.n	800a190 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a1ac:	4b36      	ldr	r3, [pc, #216]	; (800a288 <pvPortMalloc+0x180>)
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a1b2:	429a      	cmp	r2, r3
 800a1b4:	d050      	beq.n	800a258 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a1b6:	6a3b      	ldr	r3, [r7, #32]
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	2208      	movs	r2, #8
 800a1bc:	4413      	add	r3, r2
 800a1be:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a1c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1c2:	681a      	ldr	r2, [r3, #0]
 800a1c4:	6a3b      	ldr	r3, [r7, #32]
 800a1c6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a1c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1ca:	685a      	ldr	r2, [r3, #4]
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	1ad2      	subs	r2, r2, r3
 800a1d0:	2308      	movs	r3, #8
 800a1d2:	005b      	lsls	r3, r3, #1
 800a1d4:	429a      	cmp	r2, r3
 800a1d6:	d91f      	bls.n	800a218 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a1d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	4413      	add	r3, r2
 800a1de:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a1e0:	69bb      	ldr	r3, [r7, #24]
 800a1e2:	f003 0307 	and.w	r3, r3, #7
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	d00a      	beq.n	800a200 <pvPortMalloc+0xf8>
	__asm volatile
 800a1ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1ee:	f383 8811 	msr	BASEPRI, r3
 800a1f2:	f3bf 8f6f 	isb	sy
 800a1f6:	f3bf 8f4f 	dsb	sy
 800a1fa:	613b      	str	r3, [r7, #16]
}
 800a1fc:	bf00      	nop
 800a1fe:	e7fe      	b.n	800a1fe <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a202:	685a      	ldr	r2, [r3, #4]
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	1ad2      	subs	r2, r2, r3
 800a208:	69bb      	ldr	r3, [r7, #24]
 800a20a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a20c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a20e:	687a      	ldr	r2, [r7, #4]
 800a210:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a212:	69b8      	ldr	r0, [r7, #24]
 800a214:	f000 f908 	bl	800a428 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a218:	4b1d      	ldr	r3, [pc, #116]	; (800a290 <pvPortMalloc+0x188>)
 800a21a:	681a      	ldr	r2, [r3, #0]
 800a21c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a21e:	685b      	ldr	r3, [r3, #4]
 800a220:	1ad3      	subs	r3, r2, r3
 800a222:	4a1b      	ldr	r2, [pc, #108]	; (800a290 <pvPortMalloc+0x188>)
 800a224:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a226:	4b1a      	ldr	r3, [pc, #104]	; (800a290 <pvPortMalloc+0x188>)
 800a228:	681a      	ldr	r2, [r3, #0]
 800a22a:	4b1b      	ldr	r3, [pc, #108]	; (800a298 <pvPortMalloc+0x190>)
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	429a      	cmp	r2, r3
 800a230:	d203      	bcs.n	800a23a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a232:	4b17      	ldr	r3, [pc, #92]	; (800a290 <pvPortMalloc+0x188>)
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	4a18      	ldr	r2, [pc, #96]	; (800a298 <pvPortMalloc+0x190>)
 800a238:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a23a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a23c:	685a      	ldr	r2, [r3, #4]
 800a23e:	4b13      	ldr	r3, [pc, #76]	; (800a28c <pvPortMalloc+0x184>)
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	431a      	orrs	r2, r3
 800a244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a246:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a24a:	2200      	movs	r2, #0
 800a24c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800a24e:	4b13      	ldr	r3, [pc, #76]	; (800a29c <pvPortMalloc+0x194>)
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	3301      	adds	r3, #1
 800a254:	4a11      	ldr	r2, [pc, #68]	; (800a29c <pvPortMalloc+0x194>)
 800a256:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a258:	f7fe fcfa 	bl	8008c50 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a25c:	69fb      	ldr	r3, [r7, #28]
 800a25e:	f003 0307 	and.w	r3, r3, #7
 800a262:	2b00      	cmp	r3, #0
 800a264:	d00a      	beq.n	800a27c <pvPortMalloc+0x174>
	__asm volatile
 800a266:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a26a:	f383 8811 	msr	BASEPRI, r3
 800a26e:	f3bf 8f6f 	isb	sy
 800a272:	f3bf 8f4f 	dsb	sy
 800a276:	60fb      	str	r3, [r7, #12]
}
 800a278:	bf00      	nop
 800a27a:	e7fe      	b.n	800a27a <pvPortMalloc+0x172>
	return pvReturn;
 800a27c:	69fb      	ldr	r3, [r7, #28]
}
 800a27e:	4618      	mov	r0, r3
 800a280:	3728      	adds	r7, #40	; 0x28
 800a282:	46bd      	mov	sp, r7
 800a284:	bd80      	pop	{r7, pc}
 800a286:	bf00      	nop
 800a288:	20005688 	.word	0x20005688
 800a28c:	2000569c 	.word	0x2000569c
 800a290:	2000568c 	.word	0x2000568c
 800a294:	20005680 	.word	0x20005680
 800a298:	20005690 	.word	0x20005690
 800a29c:	20005694 	.word	0x20005694

0800a2a0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a2a0:	b580      	push	{r7, lr}
 800a2a2:	b086      	sub	sp, #24
 800a2a4:	af00      	add	r7, sp, #0
 800a2a6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d04d      	beq.n	800a34e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a2b2:	2308      	movs	r3, #8
 800a2b4:	425b      	negs	r3, r3
 800a2b6:	697a      	ldr	r2, [r7, #20]
 800a2b8:	4413      	add	r3, r2
 800a2ba:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a2bc:	697b      	ldr	r3, [r7, #20]
 800a2be:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a2c0:	693b      	ldr	r3, [r7, #16]
 800a2c2:	685a      	ldr	r2, [r3, #4]
 800a2c4:	4b24      	ldr	r3, [pc, #144]	; (800a358 <vPortFree+0xb8>)
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	4013      	ands	r3, r2
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	d10a      	bne.n	800a2e4 <vPortFree+0x44>
	__asm volatile
 800a2ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2d2:	f383 8811 	msr	BASEPRI, r3
 800a2d6:	f3bf 8f6f 	isb	sy
 800a2da:	f3bf 8f4f 	dsb	sy
 800a2de:	60fb      	str	r3, [r7, #12]
}
 800a2e0:	bf00      	nop
 800a2e2:	e7fe      	b.n	800a2e2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a2e4:	693b      	ldr	r3, [r7, #16]
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	d00a      	beq.n	800a302 <vPortFree+0x62>
	__asm volatile
 800a2ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2f0:	f383 8811 	msr	BASEPRI, r3
 800a2f4:	f3bf 8f6f 	isb	sy
 800a2f8:	f3bf 8f4f 	dsb	sy
 800a2fc:	60bb      	str	r3, [r7, #8]
}
 800a2fe:	bf00      	nop
 800a300:	e7fe      	b.n	800a300 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a302:	693b      	ldr	r3, [r7, #16]
 800a304:	685a      	ldr	r2, [r3, #4]
 800a306:	4b14      	ldr	r3, [pc, #80]	; (800a358 <vPortFree+0xb8>)
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	4013      	ands	r3, r2
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	d01e      	beq.n	800a34e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a310:	693b      	ldr	r3, [r7, #16]
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	2b00      	cmp	r3, #0
 800a316:	d11a      	bne.n	800a34e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a318:	693b      	ldr	r3, [r7, #16]
 800a31a:	685a      	ldr	r2, [r3, #4]
 800a31c:	4b0e      	ldr	r3, [pc, #56]	; (800a358 <vPortFree+0xb8>)
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	43db      	mvns	r3, r3
 800a322:	401a      	ands	r2, r3
 800a324:	693b      	ldr	r3, [r7, #16]
 800a326:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a328:	f7fe fc84 	bl	8008c34 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a32c:	693b      	ldr	r3, [r7, #16]
 800a32e:	685a      	ldr	r2, [r3, #4]
 800a330:	4b0a      	ldr	r3, [pc, #40]	; (800a35c <vPortFree+0xbc>)
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	4413      	add	r3, r2
 800a336:	4a09      	ldr	r2, [pc, #36]	; (800a35c <vPortFree+0xbc>)
 800a338:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a33a:	6938      	ldr	r0, [r7, #16]
 800a33c:	f000 f874 	bl	800a428 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800a340:	4b07      	ldr	r3, [pc, #28]	; (800a360 <vPortFree+0xc0>)
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	3301      	adds	r3, #1
 800a346:	4a06      	ldr	r2, [pc, #24]	; (800a360 <vPortFree+0xc0>)
 800a348:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800a34a:	f7fe fc81 	bl	8008c50 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a34e:	bf00      	nop
 800a350:	3718      	adds	r7, #24
 800a352:	46bd      	mov	sp, r7
 800a354:	bd80      	pop	{r7, pc}
 800a356:	bf00      	nop
 800a358:	2000569c 	.word	0x2000569c
 800a35c:	2000568c 	.word	0x2000568c
 800a360:	20005698 	.word	0x20005698

0800a364 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a364:	b480      	push	{r7}
 800a366:	b085      	sub	sp, #20
 800a368:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a36a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800a36e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a370:	4b27      	ldr	r3, [pc, #156]	; (800a410 <prvHeapInit+0xac>)
 800a372:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a374:	68fb      	ldr	r3, [r7, #12]
 800a376:	f003 0307 	and.w	r3, r3, #7
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	d00c      	beq.n	800a398 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a37e:	68fb      	ldr	r3, [r7, #12]
 800a380:	3307      	adds	r3, #7
 800a382:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a384:	68fb      	ldr	r3, [r7, #12]
 800a386:	f023 0307 	bic.w	r3, r3, #7
 800a38a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a38c:	68ba      	ldr	r2, [r7, #8]
 800a38e:	68fb      	ldr	r3, [r7, #12]
 800a390:	1ad3      	subs	r3, r2, r3
 800a392:	4a1f      	ldr	r2, [pc, #124]	; (800a410 <prvHeapInit+0xac>)
 800a394:	4413      	add	r3, r2
 800a396:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a398:	68fb      	ldr	r3, [r7, #12]
 800a39a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a39c:	4a1d      	ldr	r2, [pc, #116]	; (800a414 <prvHeapInit+0xb0>)
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a3a2:	4b1c      	ldr	r3, [pc, #112]	; (800a414 <prvHeapInit+0xb0>)
 800a3a4:	2200      	movs	r2, #0
 800a3a6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	68ba      	ldr	r2, [r7, #8]
 800a3ac:	4413      	add	r3, r2
 800a3ae:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a3b0:	2208      	movs	r2, #8
 800a3b2:	68fb      	ldr	r3, [r7, #12]
 800a3b4:	1a9b      	subs	r3, r3, r2
 800a3b6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a3b8:	68fb      	ldr	r3, [r7, #12]
 800a3ba:	f023 0307 	bic.w	r3, r3, #7
 800a3be:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a3c0:	68fb      	ldr	r3, [r7, #12]
 800a3c2:	4a15      	ldr	r2, [pc, #84]	; (800a418 <prvHeapInit+0xb4>)
 800a3c4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a3c6:	4b14      	ldr	r3, [pc, #80]	; (800a418 <prvHeapInit+0xb4>)
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	2200      	movs	r2, #0
 800a3cc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a3ce:	4b12      	ldr	r3, [pc, #72]	; (800a418 <prvHeapInit+0xb4>)
 800a3d0:	681b      	ldr	r3, [r3, #0]
 800a3d2:	2200      	movs	r2, #0
 800a3d4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a3da:	683b      	ldr	r3, [r7, #0]
 800a3dc:	68fa      	ldr	r2, [r7, #12]
 800a3de:	1ad2      	subs	r2, r2, r3
 800a3e0:	683b      	ldr	r3, [r7, #0]
 800a3e2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a3e4:	4b0c      	ldr	r3, [pc, #48]	; (800a418 <prvHeapInit+0xb4>)
 800a3e6:	681a      	ldr	r2, [r3, #0]
 800a3e8:	683b      	ldr	r3, [r7, #0]
 800a3ea:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a3ec:	683b      	ldr	r3, [r7, #0]
 800a3ee:	685b      	ldr	r3, [r3, #4]
 800a3f0:	4a0a      	ldr	r2, [pc, #40]	; (800a41c <prvHeapInit+0xb8>)
 800a3f2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a3f4:	683b      	ldr	r3, [r7, #0]
 800a3f6:	685b      	ldr	r3, [r3, #4]
 800a3f8:	4a09      	ldr	r2, [pc, #36]	; (800a420 <prvHeapInit+0xbc>)
 800a3fa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a3fc:	4b09      	ldr	r3, [pc, #36]	; (800a424 <prvHeapInit+0xc0>)
 800a3fe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800a402:	601a      	str	r2, [r3, #0]
}
 800a404:	bf00      	nop
 800a406:	3714      	adds	r7, #20
 800a408:	46bd      	mov	sp, r7
 800a40a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a40e:	4770      	bx	lr
 800a410:	20001a80 	.word	0x20001a80
 800a414:	20005680 	.word	0x20005680
 800a418:	20005688 	.word	0x20005688
 800a41c:	20005690 	.word	0x20005690
 800a420:	2000568c 	.word	0x2000568c
 800a424:	2000569c 	.word	0x2000569c

0800a428 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a428:	b480      	push	{r7}
 800a42a:	b085      	sub	sp, #20
 800a42c:	af00      	add	r7, sp, #0
 800a42e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a430:	4b28      	ldr	r3, [pc, #160]	; (800a4d4 <prvInsertBlockIntoFreeList+0xac>)
 800a432:	60fb      	str	r3, [r7, #12]
 800a434:	e002      	b.n	800a43c <prvInsertBlockIntoFreeList+0x14>
 800a436:	68fb      	ldr	r3, [r7, #12]
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	60fb      	str	r3, [r7, #12]
 800a43c:	68fb      	ldr	r3, [r7, #12]
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	687a      	ldr	r2, [r7, #4]
 800a442:	429a      	cmp	r2, r3
 800a444:	d8f7      	bhi.n	800a436 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a446:	68fb      	ldr	r3, [r7, #12]
 800a448:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a44a:	68fb      	ldr	r3, [r7, #12]
 800a44c:	685b      	ldr	r3, [r3, #4]
 800a44e:	68ba      	ldr	r2, [r7, #8]
 800a450:	4413      	add	r3, r2
 800a452:	687a      	ldr	r2, [r7, #4]
 800a454:	429a      	cmp	r2, r3
 800a456:	d108      	bne.n	800a46a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a458:	68fb      	ldr	r3, [r7, #12]
 800a45a:	685a      	ldr	r2, [r3, #4]
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	685b      	ldr	r3, [r3, #4]
 800a460:	441a      	add	r2, r3
 800a462:	68fb      	ldr	r3, [r7, #12]
 800a464:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a466:	68fb      	ldr	r3, [r7, #12]
 800a468:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	685b      	ldr	r3, [r3, #4]
 800a472:	68ba      	ldr	r2, [r7, #8]
 800a474:	441a      	add	r2, r3
 800a476:	68fb      	ldr	r3, [r7, #12]
 800a478:	681b      	ldr	r3, [r3, #0]
 800a47a:	429a      	cmp	r2, r3
 800a47c:	d118      	bne.n	800a4b0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a47e:	68fb      	ldr	r3, [r7, #12]
 800a480:	681a      	ldr	r2, [r3, #0]
 800a482:	4b15      	ldr	r3, [pc, #84]	; (800a4d8 <prvInsertBlockIntoFreeList+0xb0>)
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	429a      	cmp	r2, r3
 800a488:	d00d      	beq.n	800a4a6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	685a      	ldr	r2, [r3, #4]
 800a48e:	68fb      	ldr	r3, [r7, #12]
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	685b      	ldr	r3, [r3, #4]
 800a494:	441a      	add	r2, r3
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a49a:	68fb      	ldr	r3, [r7, #12]
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	681a      	ldr	r2, [r3, #0]
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	601a      	str	r2, [r3, #0]
 800a4a4:	e008      	b.n	800a4b8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a4a6:	4b0c      	ldr	r3, [pc, #48]	; (800a4d8 <prvInsertBlockIntoFreeList+0xb0>)
 800a4a8:	681a      	ldr	r2, [r3, #0]
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	601a      	str	r2, [r3, #0]
 800a4ae:	e003      	b.n	800a4b8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	681a      	ldr	r2, [r3, #0]
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a4b8:	68fa      	ldr	r2, [r7, #12]
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	429a      	cmp	r2, r3
 800a4be:	d002      	beq.n	800a4c6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a4c0:	68fb      	ldr	r3, [r7, #12]
 800a4c2:	687a      	ldr	r2, [r7, #4]
 800a4c4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a4c6:	bf00      	nop
 800a4c8:	3714      	adds	r7, #20
 800a4ca:	46bd      	mov	sp, r7
 800a4cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4d0:	4770      	bx	lr
 800a4d2:	bf00      	nop
 800a4d4:	20005680 	.word	0x20005680
 800a4d8:	20005688 	.word	0x20005688

0800a4dc <__cxa_pure_virtual>:
 800a4dc:	b508      	push	{r3, lr}
 800a4de:	f000 f985 	bl	800a7ec <_ZSt9terminatev>

0800a4e2 <_ZNSaIcEC1Ev>:
 800a4e2:	4770      	bx	lr

0800a4e4 <_ZNSaIcED1Ev>:
 800a4e4:	4770      	bx	lr

0800a4e6 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>:
 800a4e6:	b10a      	cbz	r2, 800a4ec <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0+0x6>
 800a4e8:	f000 b9ec 	b.w	800a8c4 <memcpy>
 800a4ec:	4770      	bx	lr
	...

0800a4f0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
 800a4f0:	b508      	push	{r3, lr}
 800a4f2:	680b      	ldr	r3, [r1, #0]
 800a4f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a4f8:	d302      	bcc.n	800a500 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x10>
 800a4fa:	480d      	ldr	r0, [pc, #52]	; (800a530 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x40>)
 800a4fc:	f000 f992 	bl	800a824 <_ZSt20__throw_length_errorPKc>
 800a500:	4293      	cmp	r3, r2
 800a502:	d90b      	bls.n	800a51c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 800a504:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
 800a508:	ea4f 0042 	mov.w	r0, r2, lsl #1
 800a50c:	d206      	bcs.n	800a51c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 800a50e:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800a512:	bf2a      	itet	cs
 800a514:	f06f 4340 	mvncs.w	r3, #3221225472	; 0xc0000000
 800a518:	6008      	strcc	r0, [r1, #0]
 800a51a:	600b      	strcs	r3, [r1, #0]
 800a51c:	6808      	ldr	r0, [r1, #0]
 800a51e:	3001      	adds	r0, #1
 800a520:	d501      	bpl.n	800a526 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x36>
 800a522:	f000 f979 	bl	800a818 <_ZSt17__throw_bad_allocv>
 800a526:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800a52a:	f000 b964 	b.w	800a7f6 <_Znwj>
 800a52e:	bf00      	nop
 800a530:	0800b0b8 	.word	0x0800b0b8

0800a534 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
 800a534:	f850 3b08 	ldr.w	r3, [r0], #8
 800a538:	4283      	cmp	r3, r0
 800a53a:	d002      	beq.n	800a542 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0xe>
 800a53c:	4618      	mov	r0, r3
 800a53e:	f000 b946 	b.w	800a7ce <_ZdlPv>
 800a542:	4770      	bx	lr

0800a544 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>:
 800a544:	6840      	ldr	r0, [r0, #4]
 800a546:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 800a54a:	3901      	subs	r1, #1
 800a54c:	1a09      	subs	r1, r1, r0
 800a54e:	4291      	cmp	r1, r2
 800a550:	b508      	push	{r3, lr}
 800a552:	d202      	bcs.n	800a55a <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc+0x16>
 800a554:	4618      	mov	r0, r3
 800a556:	f000 f965 	bl	800a824 <_ZSt20__throw_length_errorPKc>
 800a55a:	bd08      	pop	{r3, pc}

0800a55c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc>:
 800a55c:	6803      	ldr	r3, [r0, #0]
 800a55e:	428b      	cmp	r3, r1
 800a560:	d806      	bhi.n	800a570 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc+0x14>
 800a562:	6840      	ldr	r0, [r0, #4]
 800a564:	4418      	add	r0, r3
 800a566:	4281      	cmp	r1, r0
 800a568:	bf94      	ite	ls
 800a56a:	2000      	movls	r0, #0
 800a56c:	2001      	movhi	r0, #1
 800a56e:	4770      	bx	lr
 800a570:	2001      	movs	r0, #1
 800a572:	4770      	bx	lr

0800a574 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>:
 800a574:	2a01      	cmp	r2, #1
 800a576:	b410      	push	{r4}
 800a578:	d104      	bne.n	800a584 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0x10>
 800a57a:	780a      	ldrb	r2, [r1, #0]
 800a57c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a580:	7002      	strb	r2, [r0, #0]
 800a582:	4770      	bx	lr
 800a584:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a588:	f7ff bfad 	b.w	800a4e6 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>

0800a58c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>:
 800a58c:	2a01      	cmp	r2, #1
 800a58e:	b430      	push	{r4, r5}
 800a590:	d103      	bne.n	800a59a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj+0xe>
 800a592:	780b      	ldrb	r3, [r1, #0]
 800a594:	7003      	strb	r3, [r0, #0]
 800a596:	bc30      	pop	{r4, r5}
 800a598:	4770      	bx	lr
 800a59a:	2a00      	cmp	r2, #0
 800a59c:	d0fb      	beq.n	800a596 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj+0xa>
 800a59e:	bc30      	pop	{r4, r5}
 800a5a0:	f000 b99e 	b.w	800a8e0 <memmove>

0800a5a4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>:
 800a5a4:	b508      	push	{r3, lr}
 800a5a6:	1a52      	subs	r2, r2, r1
 800a5a8:	f7ff ffe4 	bl	800a574 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 800a5ac:	bd08      	pop	{r3, pc}

0800a5ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>:
 800a5ae:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 800a5b2:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800a5b4:	461f      	mov	r7, r3
 800a5b6:	6843      	ldr	r3, [r0, #4]
 800a5b8:	eb01 0802 	add.w	r8, r1, r2
 800a5bc:	1ab2      	subs	r2, r6, r2
 800a5be:	441a      	add	r2, r3
 800a5c0:	eba3 0908 	sub.w	r9, r3, r8
 800a5c4:	4603      	mov	r3, r0
 800a5c6:	9201      	str	r2, [sp, #4]
 800a5c8:	f853 2b08 	ldr.w	r2, [r3], #8
 800a5cc:	429a      	cmp	r2, r3
 800a5ce:	bf18      	it	ne
 800a5d0:	6882      	ldrne	r2, [r0, #8]
 800a5d2:	460d      	mov	r5, r1
 800a5d4:	bf08      	it	eq
 800a5d6:	220f      	moveq	r2, #15
 800a5d8:	a901      	add	r1, sp, #4
 800a5da:	4604      	mov	r4, r0
 800a5dc:	f7ff ff88 	bl	800a4f0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 800a5e0:	4682      	mov	sl, r0
 800a5e2:	b11d      	cbz	r5, 800a5ec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x3e>
 800a5e4:	6821      	ldr	r1, [r4, #0]
 800a5e6:	462a      	mov	r2, r5
 800a5e8:	f7ff ffc4 	bl	800a574 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 800a5ec:	b137      	cbz	r7, 800a5fc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x4e>
 800a5ee:	b12e      	cbz	r6, 800a5fc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x4e>
 800a5f0:	4632      	mov	r2, r6
 800a5f2:	4639      	mov	r1, r7
 800a5f4:	eb0a 0005 	add.w	r0, sl, r5
 800a5f8:	f7ff ffbc 	bl	800a574 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 800a5fc:	f1b9 0f00 	cmp.w	r9, #0
 800a600:	d007      	beq.n	800a612 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x64>
 800a602:	6821      	ldr	r1, [r4, #0]
 800a604:	4435      	add	r5, r6
 800a606:	464a      	mov	r2, r9
 800a608:	4441      	add	r1, r8
 800a60a:	eb0a 0005 	add.w	r0, sl, r5
 800a60e:	f7ff ffb1 	bl	800a574 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 800a612:	4620      	mov	r0, r4
 800a614:	f7ff ff8e 	bl	800a534 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 800a618:	9b01      	ldr	r3, [sp, #4]
 800a61a:	f8c4 a000 	str.w	sl, [r4]
 800a61e:	60a3      	str	r3, [r4, #8]
 800a620:	b002      	add	sp, #8
 800a622:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800a626 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>:
 800a626:	b510      	push	{r4, lr}
 800a628:	4604      	mov	r4, r0
 800a62a:	f7ff ff83 	bl	800a534 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 800a62e:	4620      	mov	r0, r4
 800a630:	bd10      	pop	{r4, pc}
	...

0800a634 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj>:
 800a634:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a638:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a63a:	4614      	mov	r4, r2
 800a63c:	4680      	mov	r8, r0
 800a63e:	462a      	mov	r2, r5
 800a640:	4689      	mov	r9, r1
 800a642:	461f      	mov	r7, r3
 800a644:	4621      	mov	r1, r4
 800a646:	4b39      	ldr	r3, [pc, #228]	; (800a72c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xf8>)
 800a648:	f7ff ff7c 	bl	800a544 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>
 800a64c:	4642      	mov	r2, r8
 800a64e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800a652:	f852 6b08 	ldr.w	r6, [r2], #8
 800a656:	4296      	cmp	r6, r2
 800a658:	bf18      	it	ne
 800a65a:	f8d8 2008 	ldrne.w	r2, [r8, #8]
 800a65e:	eba5 0b04 	sub.w	fp, r5, r4
 800a662:	eb03 0a0b 	add.w	sl, r3, fp
 800a666:	bf08      	it	eq
 800a668:	220f      	moveq	r2, #15
 800a66a:	4552      	cmp	r2, sl
 800a66c:	d351      	bcc.n	800a712 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xde>
 800a66e:	444e      	add	r6, r9
 800a670:	4639      	mov	r1, r7
 800a672:	44a1      	add	r9, r4
 800a674:	4640      	mov	r0, r8
 800a676:	eba3 0909 	sub.w	r9, r3, r9
 800a67a:	f7ff ff6f 	bl	800a55c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc>
 800a67e:	b180      	cbz	r0, 800a6a2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x6e>
 800a680:	f1b9 0f00 	cmp.w	r9, #0
 800a684:	d006      	beq.n	800a694 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x60>
 800a686:	42ac      	cmp	r4, r5
 800a688:	d004      	beq.n	800a694 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x60>
 800a68a:	464a      	mov	r2, r9
 800a68c:	1931      	adds	r1, r6, r4
 800a68e:	1970      	adds	r0, r6, r5
 800a690:	f7ff ff7c 	bl	800a58c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 800a694:	b315      	cbz	r5, 800a6dc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa8>
 800a696:	462a      	mov	r2, r5
 800a698:	4639      	mov	r1, r7
 800a69a:	4630      	mov	r0, r6
 800a69c:	f7ff ff6a 	bl	800a574 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 800a6a0:	e01c      	b.n	800a6dc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa8>
 800a6a2:	b135      	cbz	r5, 800a6b2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x7e>
 800a6a4:	42ac      	cmp	r4, r5
 800a6a6:	d33c      	bcc.n	800a722 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xee>
 800a6a8:	462a      	mov	r2, r5
 800a6aa:	4639      	mov	r1, r7
 800a6ac:	4630      	mov	r0, r6
 800a6ae:	f7ff ff6d 	bl	800a58c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 800a6b2:	f1b9 0f00 	cmp.w	r9, #0
 800a6b6:	d011      	beq.n	800a6dc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa8>
 800a6b8:	42ac      	cmp	r4, r5
 800a6ba:	d00f      	beq.n	800a6dc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa8>
 800a6bc:	464a      	mov	r2, r9
 800a6be:	1931      	adds	r1, r6, r4
 800a6c0:	1970      	adds	r0, r6, r5
 800a6c2:	f7ff ff63 	bl	800a58c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 800a6c6:	42ac      	cmp	r4, r5
 800a6c8:	d208      	bcs.n	800a6dc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa8>
 800a6ca:	4434      	add	r4, r6
 800a6cc:	197b      	adds	r3, r7, r5
 800a6ce:	429c      	cmp	r4, r3
 800a6d0:	d30f      	bcc.n	800a6f2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xbe>
 800a6d2:	462a      	mov	r2, r5
 800a6d4:	4639      	mov	r1, r7
 800a6d6:	4630      	mov	r0, r6
 800a6d8:	f7ff ff58 	bl	800a58c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 800a6dc:	f8d8 3000 	ldr.w	r3, [r8]
 800a6e0:	f8c8 a004 	str.w	sl, [r8, #4]
 800a6e4:	2200      	movs	r2, #0
 800a6e6:	4640      	mov	r0, r8
 800a6e8:	f803 200a 	strb.w	r2, [r3, sl]
 800a6ec:	b003      	add	sp, #12
 800a6ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a6f2:	42bc      	cmp	r4, r7
 800a6f4:	d803      	bhi.n	800a6fe <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xca>
 800a6f6:	462a      	mov	r2, r5
 800a6f8:	eb07 010b 	add.w	r1, r7, fp
 800a6fc:	e7cd      	b.n	800a69a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x66>
 800a6fe:	1be4      	subs	r4, r4, r7
 800a700:	4622      	mov	r2, r4
 800a702:	4639      	mov	r1, r7
 800a704:	4630      	mov	r0, r6
 800a706:	f7ff ff41 	bl	800a58c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 800a70a:	1b2a      	subs	r2, r5, r4
 800a70c:	1971      	adds	r1, r6, r5
 800a70e:	1930      	adds	r0, r6, r4
 800a710:	e7c4      	b.n	800a69c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x68>
 800a712:	9500      	str	r5, [sp, #0]
 800a714:	463b      	mov	r3, r7
 800a716:	4622      	mov	r2, r4
 800a718:	4649      	mov	r1, r9
 800a71a:	4640      	mov	r0, r8
 800a71c:	f7ff ff47 	bl	800a5ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>
 800a720:	e7dc      	b.n	800a6dc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa8>
 800a722:	f1b9 0f00 	cmp.w	r9, #0
 800a726:	d0d0      	beq.n	800a6ca <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x96>
 800a728:	e7c8      	b.n	800a6bc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x88>
 800a72a:	bf00      	nop
 800a72c:	0800b0d0 	.word	0x0800b0d0

0800a730 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6assignEPKc>:
 800a730:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a732:	4604      	mov	r4, r0
 800a734:	4608      	mov	r0, r1
 800a736:	9103      	str	r1, [sp, #12]
 800a738:	f7f5 fd52 	bl	80001e0 <strlen>
 800a73c:	9b03      	ldr	r3, [sp, #12]
 800a73e:	9000      	str	r0, [sp, #0]
 800a740:	6862      	ldr	r2, [r4, #4]
 800a742:	2100      	movs	r1, #0
 800a744:	4620      	mov	r0, r4
 800a746:	f7ff ff75 	bl	800a634 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj>
 800a74a:	b004      	add	sp, #16
 800a74c:	bd10      	pop	{r4, pc}

0800a74e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>:
 800a74e:	b508      	push	{r3, lr}
 800a750:	f7ff ffee 	bl	800a730 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6assignEPKc>
 800a754:	bd08      	pop	{r3, pc}

0800a756 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>:
 800a756:	6800      	ldr	r0, [r0, #0]
 800a758:	4770      	bx	lr
	...

0800a75c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>:
 800a75c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a75e:	4604      	mov	r4, r0
 800a760:	4616      	mov	r6, r2
 800a762:	460d      	mov	r5, r1
 800a764:	b919      	cbnz	r1, 800a76e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
 800a766:	b112      	cbz	r2, 800a76e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
 800a768:	480d      	ldr	r0, [pc, #52]	; (800a7a0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x44>)
 800a76a:	f000 f858 	bl	800a81e <_ZSt19__throw_logic_errorPKc>
 800a76e:	1b73      	subs	r3, r6, r5
 800a770:	2b0f      	cmp	r3, #15
 800a772:	9301      	str	r3, [sp, #4]
 800a774:	d907      	bls.n	800a786 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x2a>
 800a776:	2200      	movs	r2, #0
 800a778:	a901      	add	r1, sp, #4
 800a77a:	4620      	mov	r0, r4
 800a77c:	f7ff feb8 	bl	800a4f0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 800a780:	9b01      	ldr	r3, [sp, #4]
 800a782:	6020      	str	r0, [r4, #0]
 800a784:	60a3      	str	r3, [r4, #8]
 800a786:	4632      	mov	r2, r6
 800a788:	4629      	mov	r1, r5
 800a78a:	6820      	ldr	r0, [r4, #0]
 800a78c:	f7ff ff0a 	bl	800a5a4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>
 800a790:	9b01      	ldr	r3, [sp, #4]
 800a792:	6822      	ldr	r2, [r4, #0]
 800a794:	6063      	str	r3, [r4, #4]
 800a796:	2100      	movs	r1, #0
 800a798:	54d1      	strb	r1, [r2, r3]
 800a79a:	b002      	add	sp, #8
 800a79c:	bd70      	pop	{r4, r5, r6, pc}
 800a79e:	bf00      	nop
 800a7a0:	0800b0e9 	.word	0x0800b0e9

0800a7a4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>:
 800a7a4:	b538      	push	{r3, r4, r5, lr}
 800a7a6:	f100 0308 	add.w	r3, r0, #8
 800a7aa:	4604      	mov	r4, r0
 800a7ac:	6003      	str	r3, [r0, #0]
 800a7ae:	460d      	mov	r5, r1
 800a7b0:	b159      	cbz	r1, 800a7ca <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x26>
 800a7b2:	4608      	mov	r0, r1
 800a7b4:	f7f5 fd14 	bl	80001e0 <strlen>
 800a7b8:	182a      	adds	r2, r5, r0
 800a7ba:	4620      	mov	r0, r4
 800a7bc:	f04f 0300 	mov.w	r3, #0
 800a7c0:	4629      	mov	r1, r5
 800a7c2:	f7ff ffcb 	bl	800a75c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>
 800a7c6:	4620      	mov	r0, r4
 800a7c8:	bd38      	pop	{r3, r4, r5, pc}
 800a7ca:	2201      	movs	r2, #1
 800a7cc:	e7f5      	b.n	800a7ba <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x16>

0800a7ce <_ZdlPv>:
 800a7ce:	f000 b871 	b.w	800a8b4 <free>

0800a7d2 <_ZN10__cxxabiv111__terminateEPFvvE>:
 800a7d2:	b508      	push	{r3, lr}
 800a7d4:	4780      	blx	r0
 800a7d6:	f000 f831 	bl	800a83c <abort>
	...

0800a7dc <_ZSt13get_terminatev>:
 800a7dc:	4b02      	ldr	r3, [pc, #8]	; (800a7e8 <_ZSt13get_terminatev+0xc>)
 800a7de:	6818      	ldr	r0, [r3, #0]
 800a7e0:	f3bf 8f5b 	dmb	ish
 800a7e4:	4770      	bx	lr
 800a7e6:	bf00      	nop
 800a7e8:	20000010 	.word	0x20000010

0800a7ec <_ZSt9terminatev>:
 800a7ec:	b508      	push	{r3, lr}
 800a7ee:	f7ff fff5 	bl	800a7dc <_ZSt13get_terminatev>
 800a7f2:	f7ff ffee 	bl	800a7d2 <_ZN10__cxxabiv111__terminateEPFvvE>

0800a7f6 <_Znwj>:
 800a7f6:	2801      	cmp	r0, #1
 800a7f8:	bf38      	it	cc
 800a7fa:	2001      	movcc	r0, #1
 800a7fc:	b510      	push	{r4, lr}
 800a7fe:	4604      	mov	r4, r0
 800a800:	4620      	mov	r0, r4
 800a802:	f000 f84f 	bl	800a8a4 <malloc>
 800a806:	b930      	cbnz	r0, 800a816 <_Znwj+0x20>
 800a808:	f000 f810 	bl	800a82c <_ZSt15get_new_handlerv>
 800a80c:	b908      	cbnz	r0, 800a812 <_Znwj+0x1c>
 800a80e:	f000 f815 	bl	800a83c <abort>
 800a812:	4780      	blx	r0
 800a814:	e7f4      	b.n	800a800 <_Znwj+0xa>
 800a816:	bd10      	pop	{r4, pc}

0800a818 <_ZSt17__throw_bad_allocv>:
 800a818:	b508      	push	{r3, lr}
 800a81a:	f000 f80f 	bl	800a83c <abort>

0800a81e <_ZSt19__throw_logic_errorPKc>:
 800a81e:	b508      	push	{r3, lr}
 800a820:	f000 f80c 	bl	800a83c <abort>

0800a824 <_ZSt20__throw_length_errorPKc>:
 800a824:	b508      	push	{r3, lr}
 800a826:	f000 f809 	bl	800a83c <abort>
	...

0800a82c <_ZSt15get_new_handlerv>:
 800a82c:	4b02      	ldr	r3, [pc, #8]	; (800a838 <_ZSt15get_new_handlerv+0xc>)
 800a82e:	6818      	ldr	r0, [r3, #0]
 800a830:	f3bf 8f5b 	dmb	ish
 800a834:	4770      	bx	lr
 800a836:	bf00      	nop
 800a838:	200056a0 	.word	0x200056a0

0800a83c <abort>:
 800a83c:	b508      	push	{r3, lr}
 800a83e:	2006      	movs	r0, #6
 800a840:	f000 f9fa 	bl	800ac38 <raise>
 800a844:	2001      	movs	r0, #1
 800a846:	f7f8 feef 	bl	8003628 <_exit>
	...

0800a84c <__errno>:
 800a84c:	4b01      	ldr	r3, [pc, #4]	; (800a854 <__errno+0x8>)
 800a84e:	6818      	ldr	r0, [r3, #0]
 800a850:	4770      	bx	lr
 800a852:	bf00      	nop
 800a854:	20000014 	.word	0x20000014

0800a858 <__libc_init_array>:
 800a858:	b570      	push	{r4, r5, r6, lr}
 800a85a:	4d0d      	ldr	r5, [pc, #52]	; (800a890 <__libc_init_array+0x38>)
 800a85c:	4c0d      	ldr	r4, [pc, #52]	; (800a894 <__libc_init_array+0x3c>)
 800a85e:	1b64      	subs	r4, r4, r5
 800a860:	10a4      	asrs	r4, r4, #2
 800a862:	2600      	movs	r6, #0
 800a864:	42a6      	cmp	r6, r4
 800a866:	d109      	bne.n	800a87c <__libc_init_array+0x24>
 800a868:	4d0b      	ldr	r5, [pc, #44]	; (800a898 <__libc_init_array+0x40>)
 800a86a:	4c0c      	ldr	r4, [pc, #48]	; (800a89c <__libc_init_array+0x44>)
 800a86c:	f000 fa44 	bl	800acf8 <_init>
 800a870:	1b64      	subs	r4, r4, r5
 800a872:	10a4      	asrs	r4, r4, #2
 800a874:	2600      	movs	r6, #0
 800a876:	42a6      	cmp	r6, r4
 800a878:	d105      	bne.n	800a886 <__libc_init_array+0x2e>
 800a87a:	bd70      	pop	{r4, r5, r6, pc}
 800a87c:	f855 3b04 	ldr.w	r3, [r5], #4
 800a880:	4798      	blx	r3
 800a882:	3601      	adds	r6, #1
 800a884:	e7ee      	b.n	800a864 <__libc_init_array+0xc>
 800a886:	f855 3b04 	ldr.w	r3, [r5], #4
 800a88a:	4798      	blx	r3
 800a88c:	3601      	adds	r6, #1
 800a88e:	e7f2      	b.n	800a876 <__libc_init_array+0x1e>
 800a890:	0800b17c 	.word	0x0800b17c
 800a894:	0800b17c 	.word	0x0800b17c
 800a898:	0800b17c 	.word	0x0800b17c
 800a89c:	0800b184 	.word	0x0800b184

0800a8a0 <__retarget_lock_acquire_recursive>:
 800a8a0:	4770      	bx	lr

0800a8a2 <__retarget_lock_release_recursive>:
 800a8a2:	4770      	bx	lr

0800a8a4 <malloc>:
 800a8a4:	4b02      	ldr	r3, [pc, #8]	; (800a8b0 <malloc+0xc>)
 800a8a6:	4601      	mov	r1, r0
 800a8a8:	6818      	ldr	r0, [r3, #0]
 800a8aa:	f000 b8a7 	b.w	800a9fc <_malloc_r>
 800a8ae:	bf00      	nop
 800a8b0:	20000014 	.word	0x20000014

0800a8b4 <free>:
 800a8b4:	4b02      	ldr	r3, [pc, #8]	; (800a8c0 <free+0xc>)
 800a8b6:	4601      	mov	r1, r0
 800a8b8:	6818      	ldr	r0, [r3, #0]
 800a8ba:	f000 b833 	b.w	800a924 <_free_r>
 800a8be:	bf00      	nop
 800a8c0:	20000014 	.word	0x20000014

0800a8c4 <memcpy>:
 800a8c4:	440a      	add	r2, r1
 800a8c6:	4291      	cmp	r1, r2
 800a8c8:	f100 33ff 	add.w	r3, r0, #4294967295
 800a8cc:	d100      	bne.n	800a8d0 <memcpy+0xc>
 800a8ce:	4770      	bx	lr
 800a8d0:	b510      	push	{r4, lr}
 800a8d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a8d6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a8da:	4291      	cmp	r1, r2
 800a8dc:	d1f9      	bne.n	800a8d2 <memcpy+0xe>
 800a8de:	bd10      	pop	{r4, pc}

0800a8e0 <memmove>:
 800a8e0:	4288      	cmp	r0, r1
 800a8e2:	b510      	push	{r4, lr}
 800a8e4:	eb01 0402 	add.w	r4, r1, r2
 800a8e8:	d902      	bls.n	800a8f0 <memmove+0x10>
 800a8ea:	4284      	cmp	r4, r0
 800a8ec:	4623      	mov	r3, r4
 800a8ee:	d807      	bhi.n	800a900 <memmove+0x20>
 800a8f0:	1e43      	subs	r3, r0, #1
 800a8f2:	42a1      	cmp	r1, r4
 800a8f4:	d008      	beq.n	800a908 <memmove+0x28>
 800a8f6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a8fa:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a8fe:	e7f8      	b.n	800a8f2 <memmove+0x12>
 800a900:	4402      	add	r2, r0
 800a902:	4601      	mov	r1, r0
 800a904:	428a      	cmp	r2, r1
 800a906:	d100      	bne.n	800a90a <memmove+0x2a>
 800a908:	bd10      	pop	{r4, pc}
 800a90a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a90e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a912:	e7f7      	b.n	800a904 <memmove+0x24>

0800a914 <memset>:
 800a914:	4402      	add	r2, r0
 800a916:	4603      	mov	r3, r0
 800a918:	4293      	cmp	r3, r2
 800a91a:	d100      	bne.n	800a91e <memset+0xa>
 800a91c:	4770      	bx	lr
 800a91e:	f803 1b01 	strb.w	r1, [r3], #1
 800a922:	e7f9      	b.n	800a918 <memset+0x4>

0800a924 <_free_r>:
 800a924:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a926:	2900      	cmp	r1, #0
 800a928:	d044      	beq.n	800a9b4 <_free_r+0x90>
 800a92a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a92e:	9001      	str	r0, [sp, #4]
 800a930:	2b00      	cmp	r3, #0
 800a932:	f1a1 0404 	sub.w	r4, r1, #4
 800a936:	bfb8      	it	lt
 800a938:	18e4      	addlt	r4, r4, r3
 800a93a:	f000 f999 	bl	800ac70 <__malloc_lock>
 800a93e:	4a1e      	ldr	r2, [pc, #120]	; (800a9b8 <_free_r+0x94>)
 800a940:	9801      	ldr	r0, [sp, #4]
 800a942:	6813      	ldr	r3, [r2, #0]
 800a944:	b933      	cbnz	r3, 800a954 <_free_r+0x30>
 800a946:	6063      	str	r3, [r4, #4]
 800a948:	6014      	str	r4, [r2, #0]
 800a94a:	b003      	add	sp, #12
 800a94c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a950:	f000 b994 	b.w	800ac7c <__malloc_unlock>
 800a954:	42a3      	cmp	r3, r4
 800a956:	d908      	bls.n	800a96a <_free_r+0x46>
 800a958:	6825      	ldr	r5, [r4, #0]
 800a95a:	1961      	adds	r1, r4, r5
 800a95c:	428b      	cmp	r3, r1
 800a95e:	bf01      	itttt	eq
 800a960:	6819      	ldreq	r1, [r3, #0]
 800a962:	685b      	ldreq	r3, [r3, #4]
 800a964:	1949      	addeq	r1, r1, r5
 800a966:	6021      	streq	r1, [r4, #0]
 800a968:	e7ed      	b.n	800a946 <_free_r+0x22>
 800a96a:	461a      	mov	r2, r3
 800a96c:	685b      	ldr	r3, [r3, #4]
 800a96e:	b10b      	cbz	r3, 800a974 <_free_r+0x50>
 800a970:	42a3      	cmp	r3, r4
 800a972:	d9fa      	bls.n	800a96a <_free_r+0x46>
 800a974:	6811      	ldr	r1, [r2, #0]
 800a976:	1855      	adds	r5, r2, r1
 800a978:	42a5      	cmp	r5, r4
 800a97a:	d10b      	bne.n	800a994 <_free_r+0x70>
 800a97c:	6824      	ldr	r4, [r4, #0]
 800a97e:	4421      	add	r1, r4
 800a980:	1854      	adds	r4, r2, r1
 800a982:	42a3      	cmp	r3, r4
 800a984:	6011      	str	r1, [r2, #0]
 800a986:	d1e0      	bne.n	800a94a <_free_r+0x26>
 800a988:	681c      	ldr	r4, [r3, #0]
 800a98a:	685b      	ldr	r3, [r3, #4]
 800a98c:	6053      	str	r3, [r2, #4]
 800a98e:	4421      	add	r1, r4
 800a990:	6011      	str	r1, [r2, #0]
 800a992:	e7da      	b.n	800a94a <_free_r+0x26>
 800a994:	d902      	bls.n	800a99c <_free_r+0x78>
 800a996:	230c      	movs	r3, #12
 800a998:	6003      	str	r3, [r0, #0]
 800a99a:	e7d6      	b.n	800a94a <_free_r+0x26>
 800a99c:	6825      	ldr	r5, [r4, #0]
 800a99e:	1961      	adds	r1, r4, r5
 800a9a0:	428b      	cmp	r3, r1
 800a9a2:	bf04      	itt	eq
 800a9a4:	6819      	ldreq	r1, [r3, #0]
 800a9a6:	685b      	ldreq	r3, [r3, #4]
 800a9a8:	6063      	str	r3, [r4, #4]
 800a9aa:	bf04      	itt	eq
 800a9ac:	1949      	addeq	r1, r1, r5
 800a9ae:	6021      	streq	r1, [r4, #0]
 800a9b0:	6054      	str	r4, [r2, #4]
 800a9b2:	e7ca      	b.n	800a94a <_free_r+0x26>
 800a9b4:	b003      	add	sp, #12
 800a9b6:	bd30      	pop	{r4, r5, pc}
 800a9b8:	200056a8 	.word	0x200056a8

0800a9bc <sbrk_aligned>:
 800a9bc:	b570      	push	{r4, r5, r6, lr}
 800a9be:	4e0e      	ldr	r6, [pc, #56]	; (800a9f8 <sbrk_aligned+0x3c>)
 800a9c0:	460c      	mov	r4, r1
 800a9c2:	6831      	ldr	r1, [r6, #0]
 800a9c4:	4605      	mov	r5, r0
 800a9c6:	b911      	cbnz	r1, 800a9ce <sbrk_aligned+0x12>
 800a9c8:	f000 f8fe 	bl	800abc8 <_sbrk_r>
 800a9cc:	6030      	str	r0, [r6, #0]
 800a9ce:	4621      	mov	r1, r4
 800a9d0:	4628      	mov	r0, r5
 800a9d2:	f000 f8f9 	bl	800abc8 <_sbrk_r>
 800a9d6:	1c43      	adds	r3, r0, #1
 800a9d8:	d00a      	beq.n	800a9f0 <sbrk_aligned+0x34>
 800a9da:	1cc4      	adds	r4, r0, #3
 800a9dc:	f024 0403 	bic.w	r4, r4, #3
 800a9e0:	42a0      	cmp	r0, r4
 800a9e2:	d007      	beq.n	800a9f4 <sbrk_aligned+0x38>
 800a9e4:	1a21      	subs	r1, r4, r0
 800a9e6:	4628      	mov	r0, r5
 800a9e8:	f000 f8ee 	bl	800abc8 <_sbrk_r>
 800a9ec:	3001      	adds	r0, #1
 800a9ee:	d101      	bne.n	800a9f4 <sbrk_aligned+0x38>
 800a9f0:	f04f 34ff 	mov.w	r4, #4294967295
 800a9f4:	4620      	mov	r0, r4
 800a9f6:	bd70      	pop	{r4, r5, r6, pc}
 800a9f8:	200056ac 	.word	0x200056ac

0800a9fc <_malloc_r>:
 800a9fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aa00:	1ccd      	adds	r5, r1, #3
 800aa02:	f025 0503 	bic.w	r5, r5, #3
 800aa06:	3508      	adds	r5, #8
 800aa08:	2d0c      	cmp	r5, #12
 800aa0a:	bf38      	it	cc
 800aa0c:	250c      	movcc	r5, #12
 800aa0e:	2d00      	cmp	r5, #0
 800aa10:	4607      	mov	r7, r0
 800aa12:	db01      	blt.n	800aa18 <_malloc_r+0x1c>
 800aa14:	42a9      	cmp	r1, r5
 800aa16:	d905      	bls.n	800aa24 <_malloc_r+0x28>
 800aa18:	230c      	movs	r3, #12
 800aa1a:	603b      	str	r3, [r7, #0]
 800aa1c:	2600      	movs	r6, #0
 800aa1e:	4630      	mov	r0, r6
 800aa20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aa24:	4e2e      	ldr	r6, [pc, #184]	; (800aae0 <_malloc_r+0xe4>)
 800aa26:	f000 f923 	bl	800ac70 <__malloc_lock>
 800aa2a:	6833      	ldr	r3, [r6, #0]
 800aa2c:	461c      	mov	r4, r3
 800aa2e:	bb34      	cbnz	r4, 800aa7e <_malloc_r+0x82>
 800aa30:	4629      	mov	r1, r5
 800aa32:	4638      	mov	r0, r7
 800aa34:	f7ff ffc2 	bl	800a9bc <sbrk_aligned>
 800aa38:	1c43      	adds	r3, r0, #1
 800aa3a:	4604      	mov	r4, r0
 800aa3c:	d14d      	bne.n	800aada <_malloc_r+0xde>
 800aa3e:	6834      	ldr	r4, [r6, #0]
 800aa40:	4626      	mov	r6, r4
 800aa42:	2e00      	cmp	r6, #0
 800aa44:	d140      	bne.n	800aac8 <_malloc_r+0xcc>
 800aa46:	6823      	ldr	r3, [r4, #0]
 800aa48:	4631      	mov	r1, r6
 800aa4a:	4638      	mov	r0, r7
 800aa4c:	eb04 0803 	add.w	r8, r4, r3
 800aa50:	f000 f8ba 	bl	800abc8 <_sbrk_r>
 800aa54:	4580      	cmp	r8, r0
 800aa56:	d13a      	bne.n	800aace <_malloc_r+0xd2>
 800aa58:	6821      	ldr	r1, [r4, #0]
 800aa5a:	3503      	adds	r5, #3
 800aa5c:	1a6d      	subs	r5, r5, r1
 800aa5e:	f025 0503 	bic.w	r5, r5, #3
 800aa62:	3508      	adds	r5, #8
 800aa64:	2d0c      	cmp	r5, #12
 800aa66:	bf38      	it	cc
 800aa68:	250c      	movcc	r5, #12
 800aa6a:	4629      	mov	r1, r5
 800aa6c:	4638      	mov	r0, r7
 800aa6e:	f7ff ffa5 	bl	800a9bc <sbrk_aligned>
 800aa72:	3001      	adds	r0, #1
 800aa74:	d02b      	beq.n	800aace <_malloc_r+0xd2>
 800aa76:	6823      	ldr	r3, [r4, #0]
 800aa78:	442b      	add	r3, r5
 800aa7a:	6023      	str	r3, [r4, #0]
 800aa7c:	e00e      	b.n	800aa9c <_malloc_r+0xa0>
 800aa7e:	6822      	ldr	r2, [r4, #0]
 800aa80:	1b52      	subs	r2, r2, r5
 800aa82:	d41e      	bmi.n	800aac2 <_malloc_r+0xc6>
 800aa84:	2a0b      	cmp	r2, #11
 800aa86:	d916      	bls.n	800aab6 <_malloc_r+0xba>
 800aa88:	1961      	adds	r1, r4, r5
 800aa8a:	42a3      	cmp	r3, r4
 800aa8c:	6025      	str	r5, [r4, #0]
 800aa8e:	bf18      	it	ne
 800aa90:	6059      	strne	r1, [r3, #4]
 800aa92:	6863      	ldr	r3, [r4, #4]
 800aa94:	bf08      	it	eq
 800aa96:	6031      	streq	r1, [r6, #0]
 800aa98:	5162      	str	r2, [r4, r5]
 800aa9a:	604b      	str	r3, [r1, #4]
 800aa9c:	4638      	mov	r0, r7
 800aa9e:	f104 060b 	add.w	r6, r4, #11
 800aaa2:	f000 f8eb 	bl	800ac7c <__malloc_unlock>
 800aaa6:	f026 0607 	bic.w	r6, r6, #7
 800aaaa:	1d23      	adds	r3, r4, #4
 800aaac:	1af2      	subs	r2, r6, r3
 800aaae:	d0b6      	beq.n	800aa1e <_malloc_r+0x22>
 800aab0:	1b9b      	subs	r3, r3, r6
 800aab2:	50a3      	str	r3, [r4, r2]
 800aab4:	e7b3      	b.n	800aa1e <_malloc_r+0x22>
 800aab6:	6862      	ldr	r2, [r4, #4]
 800aab8:	42a3      	cmp	r3, r4
 800aaba:	bf0c      	ite	eq
 800aabc:	6032      	streq	r2, [r6, #0]
 800aabe:	605a      	strne	r2, [r3, #4]
 800aac0:	e7ec      	b.n	800aa9c <_malloc_r+0xa0>
 800aac2:	4623      	mov	r3, r4
 800aac4:	6864      	ldr	r4, [r4, #4]
 800aac6:	e7b2      	b.n	800aa2e <_malloc_r+0x32>
 800aac8:	4634      	mov	r4, r6
 800aaca:	6876      	ldr	r6, [r6, #4]
 800aacc:	e7b9      	b.n	800aa42 <_malloc_r+0x46>
 800aace:	230c      	movs	r3, #12
 800aad0:	603b      	str	r3, [r7, #0]
 800aad2:	4638      	mov	r0, r7
 800aad4:	f000 f8d2 	bl	800ac7c <__malloc_unlock>
 800aad8:	e7a1      	b.n	800aa1e <_malloc_r+0x22>
 800aada:	6025      	str	r5, [r4, #0]
 800aadc:	e7de      	b.n	800aa9c <_malloc_r+0xa0>
 800aade:	bf00      	nop
 800aae0:	200056a8 	.word	0x200056a8

0800aae4 <realloc>:
 800aae4:	4b02      	ldr	r3, [pc, #8]	; (800aaf0 <realloc+0xc>)
 800aae6:	460a      	mov	r2, r1
 800aae8:	4601      	mov	r1, r0
 800aaea:	6818      	ldr	r0, [r3, #0]
 800aaec:	f000 b8cc 	b.w	800ac88 <_realloc_r>
 800aaf0:	20000014 	.word	0x20000014

0800aaf4 <cleanup_glue>:
 800aaf4:	b538      	push	{r3, r4, r5, lr}
 800aaf6:	460c      	mov	r4, r1
 800aaf8:	6809      	ldr	r1, [r1, #0]
 800aafa:	4605      	mov	r5, r0
 800aafc:	b109      	cbz	r1, 800ab02 <cleanup_glue+0xe>
 800aafe:	f7ff fff9 	bl	800aaf4 <cleanup_glue>
 800ab02:	4621      	mov	r1, r4
 800ab04:	4628      	mov	r0, r5
 800ab06:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ab0a:	f7ff bf0b 	b.w	800a924 <_free_r>
	...

0800ab10 <_reclaim_reent>:
 800ab10:	4b2c      	ldr	r3, [pc, #176]	; (800abc4 <_reclaim_reent+0xb4>)
 800ab12:	681b      	ldr	r3, [r3, #0]
 800ab14:	4283      	cmp	r3, r0
 800ab16:	b570      	push	{r4, r5, r6, lr}
 800ab18:	4604      	mov	r4, r0
 800ab1a:	d051      	beq.n	800abc0 <_reclaim_reent+0xb0>
 800ab1c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800ab1e:	b143      	cbz	r3, 800ab32 <_reclaim_reent+0x22>
 800ab20:	68db      	ldr	r3, [r3, #12]
 800ab22:	2b00      	cmp	r3, #0
 800ab24:	d14a      	bne.n	800abbc <_reclaim_reent+0xac>
 800ab26:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ab28:	6819      	ldr	r1, [r3, #0]
 800ab2a:	b111      	cbz	r1, 800ab32 <_reclaim_reent+0x22>
 800ab2c:	4620      	mov	r0, r4
 800ab2e:	f7ff fef9 	bl	800a924 <_free_r>
 800ab32:	6961      	ldr	r1, [r4, #20]
 800ab34:	b111      	cbz	r1, 800ab3c <_reclaim_reent+0x2c>
 800ab36:	4620      	mov	r0, r4
 800ab38:	f7ff fef4 	bl	800a924 <_free_r>
 800ab3c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800ab3e:	b111      	cbz	r1, 800ab46 <_reclaim_reent+0x36>
 800ab40:	4620      	mov	r0, r4
 800ab42:	f7ff feef 	bl	800a924 <_free_r>
 800ab46:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800ab48:	b111      	cbz	r1, 800ab50 <_reclaim_reent+0x40>
 800ab4a:	4620      	mov	r0, r4
 800ab4c:	f7ff feea 	bl	800a924 <_free_r>
 800ab50:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800ab52:	b111      	cbz	r1, 800ab5a <_reclaim_reent+0x4a>
 800ab54:	4620      	mov	r0, r4
 800ab56:	f7ff fee5 	bl	800a924 <_free_r>
 800ab5a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800ab5c:	b111      	cbz	r1, 800ab64 <_reclaim_reent+0x54>
 800ab5e:	4620      	mov	r0, r4
 800ab60:	f7ff fee0 	bl	800a924 <_free_r>
 800ab64:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800ab66:	b111      	cbz	r1, 800ab6e <_reclaim_reent+0x5e>
 800ab68:	4620      	mov	r0, r4
 800ab6a:	f7ff fedb 	bl	800a924 <_free_r>
 800ab6e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800ab70:	b111      	cbz	r1, 800ab78 <_reclaim_reent+0x68>
 800ab72:	4620      	mov	r0, r4
 800ab74:	f7ff fed6 	bl	800a924 <_free_r>
 800ab78:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ab7a:	b111      	cbz	r1, 800ab82 <_reclaim_reent+0x72>
 800ab7c:	4620      	mov	r0, r4
 800ab7e:	f7ff fed1 	bl	800a924 <_free_r>
 800ab82:	69a3      	ldr	r3, [r4, #24]
 800ab84:	b1e3      	cbz	r3, 800abc0 <_reclaim_reent+0xb0>
 800ab86:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800ab88:	4620      	mov	r0, r4
 800ab8a:	4798      	blx	r3
 800ab8c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800ab8e:	b1b9      	cbz	r1, 800abc0 <_reclaim_reent+0xb0>
 800ab90:	4620      	mov	r0, r4
 800ab92:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ab96:	f7ff bfad 	b.w	800aaf4 <cleanup_glue>
 800ab9a:	5949      	ldr	r1, [r1, r5]
 800ab9c:	b941      	cbnz	r1, 800abb0 <_reclaim_reent+0xa0>
 800ab9e:	3504      	adds	r5, #4
 800aba0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800aba2:	2d80      	cmp	r5, #128	; 0x80
 800aba4:	68d9      	ldr	r1, [r3, #12]
 800aba6:	d1f8      	bne.n	800ab9a <_reclaim_reent+0x8a>
 800aba8:	4620      	mov	r0, r4
 800abaa:	f7ff febb 	bl	800a924 <_free_r>
 800abae:	e7ba      	b.n	800ab26 <_reclaim_reent+0x16>
 800abb0:	680e      	ldr	r6, [r1, #0]
 800abb2:	4620      	mov	r0, r4
 800abb4:	f7ff feb6 	bl	800a924 <_free_r>
 800abb8:	4631      	mov	r1, r6
 800abba:	e7ef      	b.n	800ab9c <_reclaim_reent+0x8c>
 800abbc:	2500      	movs	r5, #0
 800abbe:	e7ef      	b.n	800aba0 <_reclaim_reent+0x90>
 800abc0:	bd70      	pop	{r4, r5, r6, pc}
 800abc2:	bf00      	nop
 800abc4:	20000014 	.word	0x20000014

0800abc8 <_sbrk_r>:
 800abc8:	b538      	push	{r3, r4, r5, lr}
 800abca:	4d06      	ldr	r5, [pc, #24]	; (800abe4 <_sbrk_r+0x1c>)
 800abcc:	2300      	movs	r3, #0
 800abce:	4604      	mov	r4, r0
 800abd0:	4608      	mov	r0, r1
 800abd2:	602b      	str	r3, [r5, #0]
 800abd4:	f7f8 fd32 	bl	800363c <_sbrk>
 800abd8:	1c43      	adds	r3, r0, #1
 800abda:	d102      	bne.n	800abe2 <_sbrk_r+0x1a>
 800abdc:	682b      	ldr	r3, [r5, #0]
 800abde:	b103      	cbz	r3, 800abe2 <_sbrk_r+0x1a>
 800abe0:	6023      	str	r3, [r4, #0]
 800abe2:	bd38      	pop	{r3, r4, r5, pc}
 800abe4:	200056b0 	.word	0x200056b0

0800abe8 <_raise_r>:
 800abe8:	291f      	cmp	r1, #31
 800abea:	b538      	push	{r3, r4, r5, lr}
 800abec:	4604      	mov	r4, r0
 800abee:	460d      	mov	r5, r1
 800abf0:	d904      	bls.n	800abfc <_raise_r+0x14>
 800abf2:	2316      	movs	r3, #22
 800abf4:	6003      	str	r3, [r0, #0]
 800abf6:	f04f 30ff 	mov.w	r0, #4294967295
 800abfa:	bd38      	pop	{r3, r4, r5, pc}
 800abfc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800abfe:	b112      	cbz	r2, 800ac06 <_raise_r+0x1e>
 800ac00:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ac04:	b94b      	cbnz	r3, 800ac1a <_raise_r+0x32>
 800ac06:	4620      	mov	r0, r4
 800ac08:	f000 f830 	bl	800ac6c <_getpid_r>
 800ac0c:	462a      	mov	r2, r5
 800ac0e:	4601      	mov	r1, r0
 800ac10:	4620      	mov	r0, r4
 800ac12:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ac16:	f000 b817 	b.w	800ac48 <_kill_r>
 800ac1a:	2b01      	cmp	r3, #1
 800ac1c:	d00a      	beq.n	800ac34 <_raise_r+0x4c>
 800ac1e:	1c59      	adds	r1, r3, #1
 800ac20:	d103      	bne.n	800ac2a <_raise_r+0x42>
 800ac22:	2316      	movs	r3, #22
 800ac24:	6003      	str	r3, [r0, #0]
 800ac26:	2001      	movs	r0, #1
 800ac28:	e7e7      	b.n	800abfa <_raise_r+0x12>
 800ac2a:	2400      	movs	r4, #0
 800ac2c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ac30:	4628      	mov	r0, r5
 800ac32:	4798      	blx	r3
 800ac34:	2000      	movs	r0, #0
 800ac36:	e7e0      	b.n	800abfa <_raise_r+0x12>

0800ac38 <raise>:
 800ac38:	4b02      	ldr	r3, [pc, #8]	; (800ac44 <raise+0xc>)
 800ac3a:	4601      	mov	r1, r0
 800ac3c:	6818      	ldr	r0, [r3, #0]
 800ac3e:	f7ff bfd3 	b.w	800abe8 <_raise_r>
 800ac42:	bf00      	nop
 800ac44:	20000014 	.word	0x20000014

0800ac48 <_kill_r>:
 800ac48:	b538      	push	{r3, r4, r5, lr}
 800ac4a:	4d07      	ldr	r5, [pc, #28]	; (800ac68 <_kill_r+0x20>)
 800ac4c:	2300      	movs	r3, #0
 800ac4e:	4604      	mov	r4, r0
 800ac50:	4608      	mov	r0, r1
 800ac52:	4611      	mov	r1, r2
 800ac54:	602b      	str	r3, [r5, #0]
 800ac56:	f7f8 fcd7 	bl	8003608 <_kill>
 800ac5a:	1c43      	adds	r3, r0, #1
 800ac5c:	d102      	bne.n	800ac64 <_kill_r+0x1c>
 800ac5e:	682b      	ldr	r3, [r5, #0]
 800ac60:	b103      	cbz	r3, 800ac64 <_kill_r+0x1c>
 800ac62:	6023      	str	r3, [r4, #0]
 800ac64:	bd38      	pop	{r3, r4, r5, pc}
 800ac66:	bf00      	nop
 800ac68:	200056b0 	.word	0x200056b0

0800ac6c <_getpid_r>:
 800ac6c:	f7f8 bcc4 	b.w	80035f8 <_getpid>

0800ac70 <__malloc_lock>:
 800ac70:	4801      	ldr	r0, [pc, #4]	; (800ac78 <__malloc_lock+0x8>)
 800ac72:	f7ff be15 	b.w	800a8a0 <__retarget_lock_acquire_recursive>
 800ac76:	bf00      	nop
 800ac78:	200056a4 	.word	0x200056a4

0800ac7c <__malloc_unlock>:
 800ac7c:	4801      	ldr	r0, [pc, #4]	; (800ac84 <__malloc_unlock+0x8>)
 800ac7e:	f7ff be10 	b.w	800a8a2 <__retarget_lock_release_recursive>
 800ac82:	bf00      	nop
 800ac84:	200056a4 	.word	0x200056a4

0800ac88 <_realloc_r>:
 800ac88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ac8c:	4680      	mov	r8, r0
 800ac8e:	4614      	mov	r4, r2
 800ac90:	460e      	mov	r6, r1
 800ac92:	b921      	cbnz	r1, 800ac9e <_realloc_r+0x16>
 800ac94:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ac98:	4611      	mov	r1, r2
 800ac9a:	f7ff beaf 	b.w	800a9fc <_malloc_r>
 800ac9e:	b92a      	cbnz	r2, 800acac <_realloc_r+0x24>
 800aca0:	f7ff fe40 	bl	800a924 <_free_r>
 800aca4:	4625      	mov	r5, r4
 800aca6:	4628      	mov	r0, r5
 800aca8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800acac:	f000 f81b 	bl	800ace6 <_malloc_usable_size_r>
 800acb0:	4284      	cmp	r4, r0
 800acb2:	4607      	mov	r7, r0
 800acb4:	d802      	bhi.n	800acbc <_realloc_r+0x34>
 800acb6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800acba:	d812      	bhi.n	800ace2 <_realloc_r+0x5a>
 800acbc:	4621      	mov	r1, r4
 800acbe:	4640      	mov	r0, r8
 800acc0:	f7ff fe9c 	bl	800a9fc <_malloc_r>
 800acc4:	4605      	mov	r5, r0
 800acc6:	2800      	cmp	r0, #0
 800acc8:	d0ed      	beq.n	800aca6 <_realloc_r+0x1e>
 800acca:	42bc      	cmp	r4, r7
 800accc:	4622      	mov	r2, r4
 800acce:	4631      	mov	r1, r6
 800acd0:	bf28      	it	cs
 800acd2:	463a      	movcs	r2, r7
 800acd4:	f7ff fdf6 	bl	800a8c4 <memcpy>
 800acd8:	4631      	mov	r1, r6
 800acda:	4640      	mov	r0, r8
 800acdc:	f7ff fe22 	bl	800a924 <_free_r>
 800ace0:	e7e1      	b.n	800aca6 <_realloc_r+0x1e>
 800ace2:	4635      	mov	r5, r6
 800ace4:	e7df      	b.n	800aca6 <_realloc_r+0x1e>

0800ace6 <_malloc_usable_size_r>:
 800ace6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800acea:	1f18      	subs	r0, r3, #4
 800acec:	2b00      	cmp	r3, #0
 800acee:	bfbc      	itt	lt
 800acf0:	580b      	ldrlt	r3, [r1, r0]
 800acf2:	18c0      	addlt	r0, r0, r3
 800acf4:	4770      	bx	lr
	...

0800acf8 <_init>:
 800acf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800acfa:	bf00      	nop
 800acfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800acfe:	bc08      	pop	{r3}
 800ad00:	469e      	mov	lr, r3
 800ad02:	4770      	bx	lr

0800ad04 <_fini>:
 800ad04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad06:	bf00      	nop
 800ad08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ad0a:	bc08      	pop	{r3}
 800ad0c:	469e      	mov	lr, r3
 800ad0e:	4770      	bx	lr
