
FreeRtos_Integration.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b0c4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000524  0800b264  0800b264  0001b264  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b788  0800b788  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  0800b788  0800b788  0001b788  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b790  0800b790  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800b790  0800b790  0001b790  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  0800b798  0800b798  0001b798  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  0800b7a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005678  20000078  0800b818  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200056f0  0800b818  000256f0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00029b94  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000044c3  00000000  00000000  00049c3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001900  00000000  00000000  0004e100  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000017c0  00000000  00000000  0004fa00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00006d6a  00000000  00000000  000511c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b244  00000000  00000000  00057f2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b6734  00000000  00000000  0007316e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001298a2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008570  00000000  00000000  001298f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000078 	.word	0x20000078
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800b24c 	.word	0x0800b24c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000007c 	.word	0x2000007c
 80001dc:	0800b24c 	.word	0x0800b24c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <__aeabi_dmul>:
 80001f0:	b570      	push	{r4, r5, r6, lr}
 80001f2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80001f6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80001fa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80001fe:	bf1d      	ittte	ne
 8000200:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000204:	ea94 0f0c 	teqne	r4, ip
 8000208:	ea95 0f0c 	teqne	r5, ip
 800020c:	f000 f8de 	bleq	80003cc <__aeabi_dmul+0x1dc>
 8000210:	442c      	add	r4, r5
 8000212:	ea81 0603 	eor.w	r6, r1, r3
 8000216:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800021a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800021e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000222:	bf18      	it	ne
 8000224:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000228:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800022c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000230:	d038      	beq.n	80002a4 <__aeabi_dmul+0xb4>
 8000232:	fba0 ce02 	umull	ip, lr, r0, r2
 8000236:	f04f 0500 	mov.w	r5, #0
 800023a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800023e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000242:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000246:	f04f 0600 	mov.w	r6, #0
 800024a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800024e:	f09c 0f00 	teq	ip, #0
 8000252:	bf18      	it	ne
 8000254:	f04e 0e01 	orrne.w	lr, lr, #1
 8000258:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800025c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000260:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000264:	d204      	bcs.n	8000270 <__aeabi_dmul+0x80>
 8000266:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800026a:	416d      	adcs	r5, r5
 800026c:	eb46 0606 	adc.w	r6, r6, r6
 8000270:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000274:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000278:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800027c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000280:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000284:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000288:	bf88      	it	hi
 800028a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800028e:	d81e      	bhi.n	80002ce <__aeabi_dmul+0xde>
 8000290:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000294:	bf08      	it	eq
 8000296:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800029a:	f150 0000 	adcs.w	r0, r0, #0
 800029e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002a2:	bd70      	pop	{r4, r5, r6, pc}
 80002a4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80002a8:	ea46 0101 	orr.w	r1, r6, r1
 80002ac:	ea40 0002 	orr.w	r0, r0, r2
 80002b0:	ea81 0103 	eor.w	r1, r1, r3
 80002b4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002b8:	bfc2      	ittt	gt
 80002ba:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002be:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002c2:	bd70      	popgt	{r4, r5, r6, pc}
 80002c4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002c8:	f04f 0e00 	mov.w	lr, #0
 80002cc:	3c01      	subs	r4, #1
 80002ce:	f300 80ab 	bgt.w	8000428 <__aeabi_dmul+0x238>
 80002d2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80002d6:	bfde      	ittt	le
 80002d8:	2000      	movle	r0, #0
 80002da:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80002de:	bd70      	pople	{r4, r5, r6, pc}
 80002e0:	f1c4 0400 	rsb	r4, r4, #0
 80002e4:	3c20      	subs	r4, #32
 80002e6:	da35      	bge.n	8000354 <__aeabi_dmul+0x164>
 80002e8:	340c      	adds	r4, #12
 80002ea:	dc1b      	bgt.n	8000324 <__aeabi_dmul+0x134>
 80002ec:	f104 0414 	add.w	r4, r4, #20
 80002f0:	f1c4 0520 	rsb	r5, r4, #32
 80002f4:	fa00 f305 	lsl.w	r3, r0, r5
 80002f8:	fa20 f004 	lsr.w	r0, r0, r4
 80002fc:	fa01 f205 	lsl.w	r2, r1, r5
 8000300:	ea40 0002 	orr.w	r0, r0, r2
 8000304:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000308:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800030c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000310:	fa21 f604 	lsr.w	r6, r1, r4
 8000314:	eb42 0106 	adc.w	r1, r2, r6
 8000318:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800031c:	bf08      	it	eq
 800031e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000322:	bd70      	pop	{r4, r5, r6, pc}
 8000324:	f1c4 040c 	rsb	r4, r4, #12
 8000328:	f1c4 0520 	rsb	r5, r4, #32
 800032c:	fa00 f304 	lsl.w	r3, r0, r4
 8000330:	fa20 f005 	lsr.w	r0, r0, r5
 8000334:	fa01 f204 	lsl.w	r2, r1, r4
 8000338:	ea40 0002 	orr.w	r0, r0, r2
 800033c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000340:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000344:	f141 0100 	adc.w	r1, r1, #0
 8000348:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800034c:	bf08      	it	eq
 800034e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000352:	bd70      	pop	{r4, r5, r6, pc}
 8000354:	f1c4 0520 	rsb	r5, r4, #32
 8000358:	fa00 f205 	lsl.w	r2, r0, r5
 800035c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000360:	fa20 f304 	lsr.w	r3, r0, r4
 8000364:	fa01 f205 	lsl.w	r2, r1, r5
 8000368:	ea43 0302 	orr.w	r3, r3, r2
 800036c:	fa21 f004 	lsr.w	r0, r1, r4
 8000370:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000374:	fa21 f204 	lsr.w	r2, r1, r4
 8000378:	ea20 0002 	bic.w	r0, r0, r2
 800037c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000380:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000384:	bf08      	it	eq
 8000386:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800038a:	bd70      	pop	{r4, r5, r6, pc}
 800038c:	f094 0f00 	teq	r4, #0
 8000390:	d10f      	bne.n	80003b2 <__aeabi_dmul+0x1c2>
 8000392:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000396:	0040      	lsls	r0, r0, #1
 8000398:	eb41 0101 	adc.w	r1, r1, r1
 800039c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003a0:	bf08      	it	eq
 80003a2:	3c01      	subeq	r4, #1
 80003a4:	d0f7      	beq.n	8000396 <__aeabi_dmul+0x1a6>
 80003a6:	ea41 0106 	orr.w	r1, r1, r6
 80003aa:	f095 0f00 	teq	r5, #0
 80003ae:	bf18      	it	ne
 80003b0:	4770      	bxne	lr
 80003b2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80003b6:	0052      	lsls	r2, r2, #1
 80003b8:	eb43 0303 	adc.w	r3, r3, r3
 80003bc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80003c0:	bf08      	it	eq
 80003c2:	3d01      	subeq	r5, #1
 80003c4:	d0f7      	beq.n	80003b6 <__aeabi_dmul+0x1c6>
 80003c6:	ea43 0306 	orr.w	r3, r3, r6
 80003ca:	4770      	bx	lr
 80003cc:	ea94 0f0c 	teq	r4, ip
 80003d0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003d4:	bf18      	it	ne
 80003d6:	ea95 0f0c 	teqne	r5, ip
 80003da:	d00c      	beq.n	80003f6 <__aeabi_dmul+0x206>
 80003dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003e0:	bf18      	it	ne
 80003e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003e6:	d1d1      	bne.n	800038c <__aeabi_dmul+0x19c>
 80003e8:	ea81 0103 	eor.w	r1, r1, r3
 80003ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003f0:	f04f 0000 	mov.w	r0, #0
 80003f4:	bd70      	pop	{r4, r5, r6, pc}
 80003f6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003fa:	bf06      	itte	eq
 80003fc:	4610      	moveq	r0, r2
 80003fe:	4619      	moveq	r1, r3
 8000400:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000404:	d019      	beq.n	800043a <__aeabi_dmul+0x24a>
 8000406:	ea94 0f0c 	teq	r4, ip
 800040a:	d102      	bne.n	8000412 <__aeabi_dmul+0x222>
 800040c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000410:	d113      	bne.n	800043a <__aeabi_dmul+0x24a>
 8000412:	ea95 0f0c 	teq	r5, ip
 8000416:	d105      	bne.n	8000424 <__aeabi_dmul+0x234>
 8000418:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800041c:	bf1c      	itt	ne
 800041e:	4610      	movne	r0, r2
 8000420:	4619      	movne	r1, r3
 8000422:	d10a      	bne.n	800043a <__aeabi_dmul+0x24a>
 8000424:	ea81 0103 	eor.w	r1, r1, r3
 8000428:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800042c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000430:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000434:	f04f 0000 	mov.w	r0, #0
 8000438:	bd70      	pop	{r4, r5, r6, pc}
 800043a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800043e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000442:	bd70      	pop	{r4, r5, r6, pc}

08000444 <__aeabi_drsub>:
 8000444:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000448:	e002      	b.n	8000450 <__adddf3>
 800044a:	bf00      	nop

0800044c <__aeabi_dsub>:
 800044c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000450 <__adddf3>:
 8000450:	b530      	push	{r4, r5, lr}
 8000452:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000456:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800045a:	ea94 0f05 	teq	r4, r5
 800045e:	bf08      	it	eq
 8000460:	ea90 0f02 	teqeq	r0, r2
 8000464:	bf1f      	itttt	ne
 8000466:	ea54 0c00 	orrsne.w	ip, r4, r0
 800046a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800046e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000472:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000476:	f000 80e2 	beq.w	800063e <__adddf3+0x1ee>
 800047a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800047e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000482:	bfb8      	it	lt
 8000484:	426d      	neglt	r5, r5
 8000486:	dd0c      	ble.n	80004a2 <__adddf3+0x52>
 8000488:	442c      	add	r4, r5
 800048a:	ea80 0202 	eor.w	r2, r0, r2
 800048e:	ea81 0303 	eor.w	r3, r1, r3
 8000492:	ea82 0000 	eor.w	r0, r2, r0
 8000496:	ea83 0101 	eor.w	r1, r3, r1
 800049a:	ea80 0202 	eor.w	r2, r0, r2
 800049e:	ea81 0303 	eor.w	r3, r1, r3
 80004a2:	2d36      	cmp	r5, #54	; 0x36
 80004a4:	bf88      	it	hi
 80004a6:	bd30      	pophi	{r4, r5, pc}
 80004a8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80004ac:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80004b0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80004b4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004b8:	d002      	beq.n	80004c0 <__adddf3+0x70>
 80004ba:	4240      	negs	r0, r0
 80004bc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004c0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80004c4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004c8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004cc:	d002      	beq.n	80004d4 <__adddf3+0x84>
 80004ce:	4252      	negs	r2, r2
 80004d0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004d4:	ea94 0f05 	teq	r4, r5
 80004d8:	f000 80a7 	beq.w	800062a <__adddf3+0x1da>
 80004dc:	f1a4 0401 	sub.w	r4, r4, #1
 80004e0:	f1d5 0e20 	rsbs	lr, r5, #32
 80004e4:	db0d      	blt.n	8000502 <__adddf3+0xb2>
 80004e6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004ea:	fa22 f205 	lsr.w	r2, r2, r5
 80004ee:	1880      	adds	r0, r0, r2
 80004f0:	f141 0100 	adc.w	r1, r1, #0
 80004f4:	fa03 f20e 	lsl.w	r2, r3, lr
 80004f8:	1880      	adds	r0, r0, r2
 80004fa:	fa43 f305 	asr.w	r3, r3, r5
 80004fe:	4159      	adcs	r1, r3
 8000500:	e00e      	b.n	8000520 <__adddf3+0xd0>
 8000502:	f1a5 0520 	sub.w	r5, r5, #32
 8000506:	f10e 0e20 	add.w	lr, lr, #32
 800050a:	2a01      	cmp	r2, #1
 800050c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000510:	bf28      	it	cs
 8000512:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000516:	fa43 f305 	asr.w	r3, r3, r5
 800051a:	18c0      	adds	r0, r0, r3
 800051c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000520:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000524:	d507      	bpl.n	8000536 <__adddf3+0xe6>
 8000526:	f04f 0e00 	mov.w	lr, #0
 800052a:	f1dc 0c00 	rsbs	ip, ip, #0
 800052e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000532:	eb6e 0101 	sbc.w	r1, lr, r1
 8000536:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800053a:	d31b      	bcc.n	8000574 <__adddf3+0x124>
 800053c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000540:	d30c      	bcc.n	800055c <__adddf3+0x10c>
 8000542:	0849      	lsrs	r1, r1, #1
 8000544:	ea5f 0030 	movs.w	r0, r0, rrx
 8000548:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800054c:	f104 0401 	add.w	r4, r4, #1
 8000550:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000554:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000558:	f080 809a 	bcs.w	8000690 <__adddf3+0x240>
 800055c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000560:	bf08      	it	eq
 8000562:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000566:	f150 0000 	adcs.w	r0, r0, #0
 800056a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800056e:	ea41 0105 	orr.w	r1, r1, r5
 8000572:	bd30      	pop	{r4, r5, pc}
 8000574:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000578:	4140      	adcs	r0, r0
 800057a:	eb41 0101 	adc.w	r1, r1, r1
 800057e:	3c01      	subs	r4, #1
 8000580:	bf28      	it	cs
 8000582:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000586:	d2e9      	bcs.n	800055c <__adddf3+0x10c>
 8000588:	f091 0f00 	teq	r1, #0
 800058c:	bf04      	itt	eq
 800058e:	4601      	moveq	r1, r0
 8000590:	2000      	moveq	r0, #0
 8000592:	fab1 f381 	clz	r3, r1
 8000596:	bf08      	it	eq
 8000598:	3320      	addeq	r3, #32
 800059a:	f1a3 030b 	sub.w	r3, r3, #11
 800059e:	f1b3 0220 	subs.w	r2, r3, #32
 80005a2:	da0c      	bge.n	80005be <__adddf3+0x16e>
 80005a4:	320c      	adds	r2, #12
 80005a6:	dd08      	ble.n	80005ba <__adddf3+0x16a>
 80005a8:	f102 0c14 	add.w	ip, r2, #20
 80005ac:	f1c2 020c 	rsb	r2, r2, #12
 80005b0:	fa01 f00c 	lsl.w	r0, r1, ip
 80005b4:	fa21 f102 	lsr.w	r1, r1, r2
 80005b8:	e00c      	b.n	80005d4 <__adddf3+0x184>
 80005ba:	f102 0214 	add.w	r2, r2, #20
 80005be:	bfd8      	it	le
 80005c0:	f1c2 0c20 	rsble	ip, r2, #32
 80005c4:	fa01 f102 	lsl.w	r1, r1, r2
 80005c8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005cc:	bfdc      	itt	le
 80005ce:	ea41 010c 	orrle.w	r1, r1, ip
 80005d2:	4090      	lslle	r0, r2
 80005d4:	1ae4      	subs	r4, r4, r3
 80005d6:	bfa2      	ittt	ge
 80005d8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005dc:	4329      	orrge	r1, r5
 80005de:	bd30      	popge	{r4, r5, pc}
 80005e0:	ea6f 0404 	mvn.w	r4, r4
 80005e4:	3c1f      	subs	r4, #31
 80005e6:	da1c      	bge.n	8000622 <__adddf3+0x1d2>
 80005e8:	340c      	adds	r4, #12
 80005ea:	dc0e      	bgt.n	800060a <__adddf3+0x1ba>
 80005ec:	f104 0414 	add.w	r4, r4, #20
 80005f0:	f1c4 0220 	rsb	r2, r4, #32
 80005f4:	fa20 f004 	lsr.w	r0, r0, r4
 80005f8:	fa01 f302 	lsl.w	r3, r1, r2
 80005fc:	ea40 0003 	orr.w	r0, r0, r3
 8000600:	fa21 f304 	lsr.w	r3, r1, r4
 8000604:	ea45 0103 	orr.w	r1, r5, r3
 8000608:	bd30      	pop	{r4, r5, pc}
 800060a:	f1c4 040c 	rsb	r4, r4, #12
 800060e:	f1c4 0220 	rsb	r2, r4, #32
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 f304 	lsl.w	r3, r1, r4
 800061a:	ea40 0003 	orr.w	r0, r0, r3
 800061e:	4629      	mov	r1, r5
 8000620:	bd30      	pop	{r4, r5, pc}
 8000622:	fa21 f004 	lsr.w	r0, r1, r4
 8000626:	4629      	mov	r1, r5
 8000628:	bd30      	pop	{r4, r5, pc}
 800062a:	f094 0f00 	teq	r4, #0
 800062e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000632:	bf06      	itte	eq
 8000634:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000638:	3401      	addeq	r4, #1
 800063a:	3d01      	subne	r5, #1
 800063c:	e74e      	b.n	80004dc <__adddf3+0x8c>
 800063e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000642:	bf18      	it	ne
 8000644:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000648:	d029      	beq.n	800069e <__adddf3+0x24e>
 800064a:	ea94 0f05 	teq	r4, r5
 800064e:	bf08      	it	eq
 8000650:	ea90 0f02 	teqeq	r0, r2
 8000654:	d005      	beq.n	8000662 <__adddf3+0x212>
 8000656:	ea54 0c00 	orrs.w	ip, r4, r0
 800065a:	bf04      	itt	eq
 800065c:	4619      	moveq	r1, r3
 800065e:	4610      	moveq	r0, r2
 8000660:	bd30      	pop	{r4, r5, pc}
 8000662:	ea91 0f03 	teq	r1, r3
 8000666:	bf1e      	ittt	ne
 8000668:	2100      	movne	r1, #0
 800066a:	2000      	movne	r0, #0
 800066c:	bd30      	popne	{r4, r5, pc}
 800066e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000672:	d105      	bne.n	8000680 <__adddf3+0x230>
 8000674:	0040      	lsls	r0, r0, #1
 8000676:	4149      	adcs	r1, r1
 8000678:	bf28      	it	cs
 800067a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800067e:	bd30      	pop	{r4, r5, pc}
 8000680:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000684:	bf3c      	itt	cc
 8000686:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800068a:	bd30      	popcc	{r4, r5, pc}
 800068c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000690:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000694:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000698:	f04f 0000 	mov.w	r0, #0
 800069c:	bd30      	pop	{r4, r5, pc}
 800069e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006a2:	bf1a      	itte	ne
 80006a4:	4619      	movne	r1, r3
 80006a6:	4610      	movne	r0, r2
 80006a8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80006ac:	bf1c      	itt	ne
 80006ae:	460b      	movne	r3, r1
 80006b0:	4602      	movne	r2, r0
 80006b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80006b6:	bf06      	itte	eq
 80006b8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006bc:	ea91 0f03 	teqeq	r1, r3
 80006c0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80006c4:	bd30      	pop	{r4, r5, pc}
 80006c6:	bf00      	nop

080006c8 <__aeabi_ui2d>:
 80006c8:	f090 0f00 	teq	r0, #0
 80006cc:	bf04      	itt	eq
 80006ce:	2100      	moveq	r1, #0
 80006d0:	4770      	bxeq	lr
 80006d2:	b530      	push	{r4, r5, lr}
 80006d4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006d8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006dc:	f04f 0500 	mov.w	r5, #0
 80006e0:	f04f 0100 	mov.w	r1, #0
 80006e4:	e750      	b.n	8000588 <__adddf3+0x138>
 80006e6:	bf00      	nop

080006e8 <__aeabi_i2d>:
 80006e8:	f090 0f00 	teq	r0, #0
 80006ec:	bf04      	itt	eq
 80006ee:	2100      	moveq	r1, #0
 80006f0:	4770      	bxeq	lr
 80006f2:	b530      	push	{r4, r5, lr}
 80006f4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006f8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006fc:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000700:	bf48      	it	mi
 8000702:	4240      	negmi	r0, r0
 8000704:	f04f 0100 	mov.w	r1, #0
 8000708:	e73e      	b.n	8000588 <__adddf3+0x138>
 800070a:	bf00      	nop

0800070c <__aeabi_f2d>:
 800070c:	0042      	lsls	r2, r0, #1
 800070e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000712:	ea4f 0131 	mov.w	r1, r1, rrx
 8000716:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800071a:	bf1f      	itttt	ne
 800071c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000720:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000724:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000728:	4770      	bxne	lr
 800072a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800072e:	bf08      	it	eq
 8000730:	4770      	bxeq	lr
 8000732:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000736:	bf04      	itt	eq
 8000738:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800073c:	4770      	bxeq	lr
 800073e:	b530      	push	{r4, r5, lr}
 8000740:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000744:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000748:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800074c:	e71c      	b.n	8000588 <__adddf3+0x138>
 800074e:	bf00      	nop

08000750 <__aeabi_ul2d>:
 8000750:	ea50 0201 	orrs.w	r2, r0, r1
 8000754:	bf08      	it	eq
 8000756:	4770      	bxeq	lr
 8000758:	b530      	push	{r4, r5, lr}
 800075a:	f04f 0500 	mov.w	r5, #0
 800075e:	e00a      	b.n	8000776 <__aeabi_l2d+0x16>

08000760 <__aeabi_l2d>:
 8000760:	ea50 0201 	orrs.w	r2, r0, r1
 8000764:	bf08      	it	eq
 8000766:	4770      	bxeq	lr
 8000768:	b530      	push	{r4, r5, lr}
 800076a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800076e:	d502      	bpl.n	8000776 <__aeabi_l2d+0x16>
 8000770:	4240      	negs	r0, r0
 8000772:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000776:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800077a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800077e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000782:	f43f aed8 	beq.w	8000536 <__adddf3+0xe6>
 8000786:	f04f 0203 	mov.w	r2, #3
 800078a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800078e:	bf18      	it	ne
 8000790:	3203      	addne	r2, #3
 8000792:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000796:	bf18      	it	ne
 8000798:	3203      	addne	r2, #3
 800079a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800079e:	f1c2 0320 	rsb	r3, r2, #32
 80007a2:	fa00 fc03 	lsl.w	ip, r0, r3
 80007a6:	fa20 f002 	lsr.w	r0, r0, r2
 80007aa:	fa01 fe03 	lsl.w	lr, r1, r3
 80007ae:	ea40 000e 	orr.w	r0, r0, lr
 80007b2:	fa21 f102 	lsr.w	r1, r1, r2
 80007b6:	4414      	add	r4, r2
 80007b8:	e6bd      	b.n	8000536 <__adddf3+0xe6>
 80007ba:	bf00      	nop

080007bc <__aeabi_d2f>:
 80007bc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80007c0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80007c4:	bf24      	itt	cs
 80007c6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80007ca:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80007ce:	d90d      	bls.n	80007ec <__aeabi_d2f+0x30>
 80007d0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80007d4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80007d8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80007dc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80007e0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80007e4:	bf08      	it	eq
 80007e6:	f020 0001 	biceq.w	r0, r0, #1
 80007ea:	4770      	bx	lr
 80007ec:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80007f0:	d121      	bne.n	8000836 <__aeabi_d2f+0x7a>
 80007f2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80007f6:	bfbc      	itt	lt
 80007f8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80007fc:	4770      	bxlt	lr
 80007fe:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000802:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000806:	f1c2 0218 	rsb	r2, r2, #24
 800080a:	f1c2 0c20 	rsb	ip, r2, #32
 800080e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000812:	fa20 f002 	lsr.w	r0, r0, r2
 8000816:	bf18      	it	ne
 8000818:	f040 0001 	orrne.w	r0, r0, #1
 800081c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000820:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000824:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000828:	ea40 000c 	orr.w	r0, r0, ip
 800082c:	fa23 f302 	lsr.w	r3, r3, r2
 8000830:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000834:	e7cc      	b.n	80007d0 <__aeabi_d2f+0x14>
 8000836:	ea7f 5362 	mvns.w	r3, r2, asr #21
 800083a:	d107      	bne.n	800084c <__aeabi_d2f+0x90>
 800083c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000840:	bf1e      	ittt	ne
 8000842:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000846:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 800084a:	4770      	bxne	lr
 800084c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000850:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000854:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000858:	4770      	bx	lr
 800085a:	bf00      	nop

0800085c <__aeabi_uldivmod>:
 800085c:	b953      	cbnz	r3, 8000874 <__aeabi_uldivmod+0x18>
 800085e:	b94a      	cbnz	r2, 8000874 <__aeabi_uldivmod+0x18>
 8000860:	2900      	cmp	r1, #0
 8000862:	bf08      	it	eq
 8000864:	2800      	cmpeq	r0, #0
 8000866:	bf1c      	itt	ne
 8000868:	f04f 31ff 	movne.w	r1, #4294967295
 800086c:	f04f 30ff 	movne.w	r0, #4294967295
 8000870:	f000 b974 	b.w	8000b5c <__aeabi_idiv0>
 8000874:	f1ad 0c08 	sub.w	ip, sp, #8
 8000878:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800087c:	f000 f806 	bl	800088c <__udivmoddi4>
 8000880:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000884:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000888:	b004      	add	sp, #16
 800088a:	4770      	bx	lr

0800088c <__udivmoddi4>:
 800088c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000890:	9d08      	ldr	r5, [sp, #32]
 8000892:	4604      	mov	r4, r0
 8000894:	468e      	mov	lr, r1
 8000896:	2b00      	cmp	r3, #0
 8000898:	d14d      	bne.n	8000936 <__udivmoddi4+0xaa>
 800089a:	428a      	cmp	r2, r1
 800089c:	4694      	mov	ip, r2
 800089e:	d969      	bls.n	8000974 <__udivmoddi4+0xe8>
 80008a0:	fab2 f282 	clz	r2, r2
 80008a4:	b152      	cbz	r2, 80008bc <__udivmoddi4+0x30>
 80008a6:	fa01 f302 	lsl.w	r3, r1, r2
 80008aa:	f1c2 0120 	rsb	r1, r2, #32
 80008ae:	fa20 f101 	lsr.w	r1, r0, r1
 80008b2:	fa0c fc02 	lsl.w	ip, ip, r2
 80008b6:	ea41 0e03 	orr.w	lr, r1, r3
 80008ba:	4094      	lsls	r4, r2
 80008bc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80008c0:	0c21      	lsrs	r1, r4, #16
 80008c2:	fbbe f6f8 	udiv	r6, lr, r8
 80008c6:	fa1f f78c 	uxth.w	r7, ip
 80008ca:	fb08 e316 	mls	r3, r8, r6, lr
 80008ce:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80008d2:	fb06 f107 	mul.w	r1, r6, r7
 80008d6:	4299      	cmp	r1, r3
 80008d8:	d90a      	bls.n	80008f0 <__udivmoddi4+0x64>
 80008da:	eb1c 0303 	adds.w	r3, ip, r3
 80008de:	f106 30ff 	add.w	r0, r6, #4294967295
 80008e2:	f080 811f 	bcs.w	8000b24 <__udivmoddi4+0x298>
 80008e6:	4299      	cmp	r1, r3
 80008e8:	f240 811c 	bls.w	8000b24 <__udivmoddi4+0x298>
 80008ec:	3e02      	subs	r6, #2
 80008ee:	4463      	add	r3, ip
 80008f0:	1a5b      	subs	r3, r3, r1
 80008f2:	b2a4      	uxth	r4, r4
 80008f4:	fbb3 f0f8 	udiv	r0, r3, r8
 80008f8:	fb08 3310 	mls	r3, r8, r0, r3
 80008fc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000900:	fb00 f707 	mul.w	r7, r0, r7
 8000904:	42a7      	cmp	r7, r4
 8000906:	d90a      	bls.n	800091e <__udivmoddi4+0x92>
 8000908:	eb1c 0404 	adds.w	r4, ip, r4
 800090c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000910:	f080 810a 	bcs.w	8000b28 <__udivmoddi4+0x29c>
 8000914:	42a7      	cmp	r7, r4
 8000916:	f240 8107 	bls.w	8000b28 <__udivmoddi4+0x29c>
 800091a:	4464      	add	r4, ip
 800091c:	3802      	subs	r0, #2
 800091e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000922:	1be4      	subs	r4, r4, r7
 8000924:	2600      	movs	r6, #0
 8000926:	b11d      	cbz	r5, 8000930 <__udivmoddi4+0xa4>
 8000928:	40d4      	lsrs	r4, r2
 800092a:	2300      	movs	r3, #0
 800092c:	e9c5 4300 	strd	r4, r3, [r5]
 8000930:	4631      	mov	r1, r6
 8000932:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000936:	428b      	cmp	r3, r1
 8000938:	d909      	bls.n	800094e <__udivmoddi4+0xc2>
 800093a:	2d00      	cmp	r5, #0
 800093c:	f000 80ef 	beq.w	8000b1e <__udivmoddi4+0x292>
 8000940:	2600      	movs	r6, #0
 8000942:	e9c5 0100 	strd	r0, r1, [r5]
 8000946:	4630      	mov	r0, r6
 8000948:	4631      	mov	r1, r6
 800094a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800094e:	fab3 f683 	clz	r6, r3
 8000952:	2e00      	cmp	r6, #0
 8000954:	d14a      	bne.n	80009ec <__udivmoddi4+0x160>
 8000956:	428b      	cmp	r3, r1
 8000958:	d302      	bcc.n	8000960 <__udivmoddi4+0xd4>
 800095a:	4282      	cmp	r2, r0
 800095c:	f200 80f9 	bhi.w	8000b52 <__udivmoddi4+0x2c6>
 8000960:	1a84      	subs	r4, r0, r2
 8000962:	eb61 0303 	sbc.w	r3, r1, r3
 8000966:	2001      	movs	r0, #1
 8000968:	469e      	mov	lr, r3
 800096a:	2d00      	cmp	r5, #0
 800096c:	d0e0      	beq.n	8000930 <__udivmoddi4+0xa4>
 800096e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000972:	e7dd      	b.n	8000930 <__udivmoddi4+0xa4>
 8000974:	b902      	cbnz	r2, 8000978 <__udivmoddi4+0xec>
 8000976:	deff      	udf	#255	; 0xff
 8000978:	fab2 f282 	clz	r2, r2
 800097c:	2a00      	cmp	r2, #0
 800097e:	f040 8092 	bne.w	8000aa6 <__udivmoddi4+0x21a>
 8000982:	eba1 010c 	sub.w	r1, r1, ip
 8000986:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800098a:	fa1f fe8c 	uxth.w	lr, ip
 800098e:	2601      	movs	r6, #1
 8000990:	0c20      	lsrs	r0, r4, #16
 8000992:	fbb1 f3f7 	udiv	r3, r1, r7
 8000996:	fb07 1113 	mls	r1, r7, r3, r1
 800099a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800099e:	fb0e f003 	mul.w	r0, lr, r3
 80009a2:	4288      	cmp	r0, r1
 80009a4:	d908      	bls.n	80009b8 <__udivmoddi4+0x12c>
 80009a6:	eb1c 0101 	adds.w	r1, ip, r1
 80009aa:	f103 38ff 	add.w	r8, r3, #4294967295
 80009ae:	d202      	bcs.n	80009b6 <__udivmoddi4+0x12a>
 80009b0:	4288      	cmp	r0, r1
 80009b2:	f200 80cb 	bhi.w	8000b4c <__udivmoddi4+0x2c0>
 80009b6:	4643      	mov	r3, r8
 80009b8:	1a09      	subs	r1, r1, r0
 80009ba:	b2a4      	uxth	r4, r4
 80009bc:	fbb1 f0f7 	udiv	r0, r1, r7
 80009c0:	fb07 1110 	mls	r1, r7, r0, r1
 80009c4:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80009c8:	fb0e fe00 	mul.w	lr, lr, r0
 80009cc:	45a6      	cmp	lr, r4
 80009ce:	d908      	bls.n	80009e2 <__udivmoddi4+0x156>
 80009d0:	eb1c 0404 	adds.w	r4, ip, r4
 80009d4:	f100 31ff 	add.w	r1, r0, #4294967295
 80009d8:	d202      	bcs.n	80009e0 <__udivmoddi4+0x154>
 80009da:	45a6      	cmp	lr, r4
 80009dc:	f200 80bb 	bhi.w	8000b56 <__udivmoddi4+0x2ca>
 80009e0:	4608      	mov	r0, r1
 80009e2:	eba4 040e 	sub.w	r4, r4, lr
 80009e6:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80009ea:	e79c      	b.n	8000926 <__udivmoddi4+0x9a>
 80009ec:	f1c6 0720 	rsb	r7, r6, #32
 80009f0:	40b3      	lsls	r3, r6
 80009f2:	fa22 fc07 	lsr.w	ip, r2, r7
 80009f6:	ea4c 0c03 	orr.w	ip, ip, r3
 80009fa:	fa20 f407 	lsr.w	r4, r0, r7
 80009fe:	fa01 f306 	lsl.w	r3, r1, r6
 8000a02:	431c      	orrs	r4, r3
 8000a04:	40f9      	lsrs	r1, r7
 8000a06:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000a0a:	fa00 f306 	lsl.w	r3, r0, r6
 8000a0e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000a12:	0c20      	lsrs	r0, r4, #16
 8000a14:	fa1f fe8c 	uxth.w	lr, ip
 8000a18:	fb09 1118 	mls	r1, r9, r8, r1
 8000a1c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000a20:	fb08 f00e 	mul.w	r0, r8, lr
 8000a24:	4288      	cmp	r0, r1
 8000a26:	fa02 f206 	lsl.w	r2, r2, r6
 8000a2a:	d90b      	bls.n	8000a44 <__udivmoddi4+0x1b8>
 8000a2c:	eb1c 0101 	adds.w	r1, ip, r1
 8000a30:	f108 3aff 	add.w	sl, r8, #4294967295
 8000a34:	f080 8088 	bcs.w	8000b48 <__udivmoddi4+0x2bc>
 8000a38:	4288      	cmp	r0, r1
 8000a3a:	f240 8085 	bls.w	8000b48 <__udivmoddi4+0x2bc>
 8000a3e:	f1a8 0802 	sub.w	r8, r8, #2
 8000a42:	4461      	add	r1, ip
 8000a44:	1a09      	subs	r1, r1, r0
 8000a46:	b2a4      	uxth	r4, r4
 8000a48:	fbb1 f0f9 	udiv	r0, r1, r9
 8000a4c:	fb09 1110 	mls	r1, r9, r0, r1
 8000a50:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000a54:	fb00 fe0e 	mul.w	lr, r0, lr
 8000a58:	458e      	cmp	lr, r1
 8000a5a:	d908      	bls.n	8000a6e <__udivmoddi4+0x1e2>
 8000a5c:	eb1c 0101 	adds.w	r1, ip, r1
 8000a60:	f100 34ff 	add.w	r4, r0, #4294967295
 8000a64:	d26c      	bcs.n	8000b40 <__udivmoddi4+0x2b4>
 8000a66:	458e      	cmp	lr, r1
 8000a68:	d96a      	bls.n	8000b40 <__udivmoddi4+0x2b4>
 8000a6a:	3802      	subs	r0, #2
 8000a6c:	4461      	add	r1, ip
 8000a6e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000a72:	fba0 9402 	umull	r9, r4, r0, r2
 8000a76:	eba1 010e 	sub.w	r1, r1, lr
 8000a7a:	42a1      	cmp	r1, r4
 8000a7c:	46c8      	mov	r8, r9
 8000a7e:	46a6      	mov	lr, r4
 8000a80:	d356      	bcc.n	8000b30 <__udivmoddi4+0x2a4>
 8000a82:	d053      	beq.n	8000b2c <__udivmoddi4+0x2a0>
 8000a84:	b15d      	cbz	r5, 8000a9e <__udivmoddi4+0x212>
 8000a86:	ebb3 0208 	subs.w	r2, r3, r8
 8000a8a:	eb61 010e 	sbc.w	r1, r1, lr
 8000a8e:	fa01 f707 	lsl.w	r7, r1, r7
 8000a92:	fa22 f306 	lsr.w	r3, r2, r6
 8000a96:	40f1      	lsrs	r1, r6
 8000a98:	431f      	orrs	r7, r3
 8000a9a:	e9c5 7100 	strd	r7, r1, [r5]
 8000a9e:	2600      	movs	r6, #0
 8000aa0:	4631      	mov	r1, r6
 8000aa2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000aa6:	f1c2 0320 	rsb	r3, r2, #32
 8000aaa:	40d8      	lsrs	r0, r3
 8000aac:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ab0:	fa21 f303 	lsr.w	r3, r1, r3
 8000ab4:	4091      	lsls	r1, r2
 8000ab6:	4301      	orrs	r1, r0
 8000ab8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000abc:	fa1f fe8c 	uxth.w	lr, ip
 8000ac0:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ac4:	fb07 3610 	mls	r6, r7, r0, r3
 8000ac8:	0c0b      	lsrs	r3, r1, #16
 8000aca:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000ace:	fb00 f60e 	mul.w	r6, r0, lr
 8000ad2:	429e      	cmp	r6, r3
 8000ad4:	fa04 f402 	lsl.w	r4, r4, r2
 8000ad8:	d908      	bls.n	8000aec <__udivmoddi4+0x260>
 8000ada:	eb1c 0303 	adds.w	r3, ip, r3
 8000ade:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ae2:	d22f      	bcs.n	8000b44 <__udivmoddi4+0x2b8>
 8000ae4:	429e      	cmp	r6, r3
 8000ae6:	d92d      	bls.n	8000b44 <__udivmoddi4+0x2b8>
 8000ae8:	3802      	subs	r0, #2
 8000aea:	4463      	add	r3, ip
 8000aec:	1b9b      	subs	r3, r3, r6
 8000aee:	b289      	uxth	r1, r1
 8000af0:	fbb3 f6f7 	udiv	r6, r3, r7
 8000af4:	fb07 3316 	mls	r3, r7, r6, r3
 8000af8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000afc:	fb06 f30e 	mul.w	r3, r6, lr
 8000b00:	428b      	cmp	r3, r1
 8000b02:	d908      	bls.n	8000b16 <__udivmoddi4+0x28a>
 8000b04:	eb1c 0101 	adds.w	r1, ip, r1
 8000b08:	f106 38ff 	add.w	r8, r6, #4294967295
 8000b0c:	d216      	bcs.n	8000b3c <__udivmoddi4+0x2b0>
 8000b0e:	428b      	cmp	r3, r1
 8000b10:	d914      	bls.n	8000b3c <__udivmoddi4+0x2b0>
 8000b12:	3e02      	subs	r6, #2
 8000b14:	4461      	add	r1, ip
 8000b16:	1ac9      	subs	r1, r1, r3
 8000b18:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000b1c:	e738      	b.n	8000990 <__udivmoddi4+0x104>
 8000b1e:	462e      	mov	r6, r5
 8000b20:	4628      	mov	r0, r5
 8000b22:	e705      	b.n	8000930 <__udivmoddi4+0xa4>
 8000b24:	4606      	mov	r6, r0
 8000b26:	e6e3      	b.n	80008f0 <__udivmoddi4+0x64>
 8000b28:	4618      	mov	r0, r3
 8000b2a:	e6f8      	b.n	800091e <__udivmoddi4+0x92>
 8000b2c:	454b      	cmp	r3, r9
 8000b2e:	d2a9      	bcs.n	8000a84 <__udivmoddi4+0x1f8>
 8000b30:	ebb9 0802 	subs.w	r8, r9, r2
 8000b34:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000b38:	3801      	subs	r0, #1
 8000b3a:	e7a3      	b.n	8000a84 <__udivmoddi4+0x1f8>
 8000b3c:	4646      	mov	r6, r8
 8000b3e:	e7ea      	b.n	8000b16 <__udivmoddi4+0x28a>
 8000b40:	4620      	mov	r0, r4
 8000b42:	e794      	b.n	8000a6e <__udivmoddi4+0x1e2>
 8000b44:	4640      	mov	r0, r8
 8000b46:	e7d1      	b.n	8000aec <__udivmoddi4+0x260>
 8000b48:	46d0      	mov	r8, sl
 8000b4a:	e77b      	b.n	8000a44 <__udivmoddi4+0x1b8>
 8000b4c:	3b02      	subs	r3, #2
 8000b4e:	4461      	add	r1, ip
 8000b50:	e732      	b.n	80009b8 <__udivmoddi4+0x12c>
 8000b52:	4630      	mov	r0, r6
 8000b54:	e709      	b.n	800096a <__udivmoddi4+0xde>
 8000b56:	4464      	add	r4, ip
 8000b58:	3802      	subs	r0, #2
 8000b5a:	e742      	b.n	80009e2 <__udivmoddi4+0x156>

08000b5c <__aeabi_idiv0>:
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop

08000b60 <_ZN3ros16normalizeSecNSecERmS0_>:
#include "ros/time.h"

namespace ros
{
void normalizeSecNSec(uint32_t& sec, uint32_t& nsec)
{
 8000b60:	b480      	push	{r7}
 8000b62:	b085      	sub	sp, #20
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
 8000b68:	6039      	str	r1, [r7, #0]
  uint32_t nsec_part = nsec % 1000000000UL;
 8000b6a:	683b      	ldr	r3, [r7, #0]
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	0a5a      	lsrs	r2, r3, #9
 8000b70:	490f      	ldr	r1, [pc, #60]	; (8000bb0 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 8000b72:	fba1 1202 	umull	r1, r2, r1, r2
 8000b76:	09d2      	lsrs	r2, r2, #7
 8000b78:	490e      	ldr	r1, [pc, #56]	; (8000bb4 <_ZN3ros16normalizeSecNSecERmS0_+0x54>)
 8000b7a:	fb01 f202 	mul.w	r2, r1, r2
 8000b7e:	1a9b      	subs	r3, r3, r2
 8000b80:	60fb      	str	r3, [r7, #12]
  uint32_t sec_part = nsec / 1000000000UL;
 8000b82:	683b      	ldr	r3, [r7, #0]
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	0a5b      	lsrs	r3, r3, #9
 8000b88:	4a09      	ldr	r2, [pc, #36]	; (8000bb0 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 8000b8a:	fba2 2303 	umull	r2, r3, r2, r3
 8000b8e:	09db      	lsrs	r3, r3, #7
 8000b90:	60bb      	str	r3, [r7, #8]
  sec += sec_part;
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	681a      	ldr	r2, [r3, #0]
 8000b96:	68bb      	ldr	r3, [r7, #8]
 8000b98:	441a      	add	r2, r3
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	601a      	str	r2, [r3, #0]
  nsec = nsec_part;
 8000b9e:	683b      	ldr	r3, [r7, #0]
 8000ba0:	68fa      	ldr	r2, [r7, #12]
 8000ba2:	601a      	str	r2, [r3, #0]
}
 8000ba4:	bf00      	nop
 8000ba6:	3714      	adds	r7, #20
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bae:	4770      	bx	lr
 8000bb0:	00044b83 	.word	0x00044b83
 8000bb4:	3b9aca00 	.word	0x3b9aca00

08000bb8 <_ZN3ros4TimeC1Ev>:
class Time
{
public:
  uint32_t sec, nsec;

  Time() : sec(0), nsec(0) {}
 8000bb8:	b480      	push	{r7}
 8000bba:	b083      	sub	sp, #12
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	601a      	str	r2, [r3, #0]
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	2200      	movs	r2, #0
 8000bca:	605a      	str	r2, [r3, #4]
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	4618      	mov	r0, r3
 8000bd0:	370c      	adds	r7, #12
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd8:	4770      	bx	lr
	...

08000bdc <_ZN3ros3MsgC1Ev>:

namespace ros
{

/* Base Message Type */
class Msg
 8000bdc:	b480      	push	{r7}
 8000bde:	b083      	sub	sp, #12
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
 8000be4:	4a04      	ldr	r2, [pc, #16]	; (8000bf8 <_ZN3ros3MsgC1Ev+0x1c>)
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	601a      	str	r2, [r3, #0]
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	4618      	mov	r0, r3
 8000bee:	370c      	adds	r7, #12
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf6:	4770      	bx	lr
 8000bf8:	0800b69c 	.word	0x0800b69c

08000bfc <_ZN8std_msgs4TimeC1Ev>:
  {
    public:
      typedef ros::Time _data_type;
      _data_type data;

    Time():
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b082      	sub	sp, #8
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
      data()
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	4618      	mov	r0, r3
 8000c08:	f7ff ffe8 	bl	8000bdc <_ZN3ros3MsgC1Ev>
 8000c0c:	4a06      	ldr	r2, [pc, #24]	; (8000c28 <_ZN8std_msgs4TimeC1Ev+0x2c>)
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	601a      	str	r2, [r3, #0]
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	3304      	adds	r3, #4
 8000c16:	4618      	mov	r0, r3
 8000c18:	f7ff ffce 	bl	8000bb8 <_ZN3ros4TimeC1Ev>
    {
    }
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	4618      	mov	r0, r3
 8000c20:	3708      	adds	r7, #8
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bd80      	pop	{r7, pc}
 8000c26:	bf00      	nop
 8000c28:	0800b684 	.word	0x0800b684

08000c2c <_ZNK8std_msgs4Time9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8000c2c:	b480      	push	{r7}
 8000c2e:	b085      	sub	sp, #20
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
 8000c34:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000c36:	2300      	movs	r3, #0
 8000c38:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.sec >> (8 * 0)) & 0xFF;
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	6859      	ldr	r1, [r3, #4]
 8000c3e:	68fb      	ldr	r3, [r7, #12]
 8000c40:	683a      	ldr	r2, [r7, #0]
 8000c42:	4413      	add	r3, r2
 8000c44:	b2ca      	uxtb	r2, r1
 8000c46:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.sec >> (8 * 1)) & 0xFF;
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	685b      	ldr	r3, [r3, #4]
 8000c4c:	0a19      	lsrs	r1, r3, #8
 8000c4e:	68fb      	ldr	r3, [r7, #12]
 8000c50:	3301      	adds	r3, #1
 8000c52:	683a      	ldr	r2, [r7, #0]
 8000c54:	4413      	add	r3, r2
 8000c56:	b2ca      	uxtb	r2, r1
 8000c58:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.sec >> (8 * 2)) & 0xFF;
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	685b      	ldr	r3, [r3, #4]
 8000c5e:	0c19      	lsrs	r1, r3, #16
 8000c60:	68fb      	ldr	r3, [r7, #12]
 8000c62:	3302      	adds	r3, #2
 8000c64:	683a      	ldr	r2, [r7, #0]
 8000c66:	4413      	add	r3, r2
 8000c68:	b2ca      	uxtb	r2, r1
 8000c6a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	685b      	ldr	r3, [r3, #4]
 8000c70:	0e19      	lsrs	r1, r3, #24
 8000c72:	68fb      	ldr	r3, [r7, #12]
 8000c74:	3303      	adds	r3, #3
 8000c76:	683a      	ldr	r2, [r7, #0]
 8000c78:	4413      	add	r3, r2
 8000c7a:	b2ca      	uxtb	r2, r1
 8000c7c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.sec);
 8000c7e:	68fb      	ldr	r3, [r7, #12]
 8000c80:	3304      	adds	r3, #4
 8000c82:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	6899      	ldr	r1, [r3, #8]
 8000c88:	68fb      	ldr	r3, [r7, #12]
 8000c8a:	683a      	ldr	r2, [r7, #0]
 8000c8c:	4413      	add	r3, r2
 8000c8e:	b2ca      	uxtb	r2, r1
 8000c90:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	689b      	ldr	r3, [r3, #8]
 8000c96:	0a19      	lsrs	r1, r3, #8
 8000c98:	68fb      	ldr	r3, [r7, #12]
 8000c9a:	3301      	adds	r3, #1
 8000c9c:	683a      	ldr	r2, [r7, #0]
 8000c9e:	4413      	add	r3, r2
 8000ca0:	b2ca      	uxtb	r2, r1
 8000ca2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	689b      	ldr	r3, [r3, #8]
 8000ca8:	0c19      	lsrs	r1, r3, #16
 8000caa:	68fb      	ldr	r3, [r7, #12]
 8000cac:	3302      	adds	r3, #2
 8000cae:	683a      	ldr	r2, [r7, #0]
 8000cb0:	4413      	add	r3, r2
 8000cb2:	b2ca      	uxtb	r2, r1
 8000cb4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	689b      	ldr	r3, [r3, #8]
 8000cba:	0e19      	lsrs	r1, r3, #24
 8000cbc:	68fb      	ldr	r3, [r7, #12]
 8000cbe:	3303      	adds	r3, #3
 8000cc0:	683a      	ldr	r2, [r7, #0]
 8000cc2:	4413      	add	r3, r2
 8000cc4:	b2ca      	uxtb	r2, r1
 8000cc6:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.nsec);
 8000cc8:	68fb      	ldr	r3, [r7, #12]
 8000cca:	3304      	adds	r3, #4
 8000ccc:	60fb      	str	r3, [r7, #12]
      return offset;
 8000cce:	68fb      	ldr	r3, [r7, #12]
    }
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	3714      	adds	r7, #20
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cda:	4770      	bx	lr

08000cdc <_ZN8std_msgs4Time11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8000cdc:	b480      	push	{r7}
 8000cde:	b085      	sub	sp, #20
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
 8000ce4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	60fb      	str	r3, [r7, #12]
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 8000cea:	68fb      	ldr	r3, [r7, #12]
 8000cec:	683a      	ldr	r2, [r7, #0]
 8000cee:	4413      	add	r3, r2
 8000cf0:	781b      	ldrb	r3, [r3, #0]
 8000cf2:	461a      	mov	r2, r3
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	685a      	ldr	r2, [r3, #4]
 8000cfc:	68fb      	ldr	r3, [r7, #12]
 8000cfe:	3301      	adds	r3, #1
 8000d00:	6839      	ldr	r1, [r7, #0]
 8000d02:	440b      	add	r3, r1
 8000d04:	781b      	ldrb	r3, [r3, #0]
 8000d06:	021b      	lsls	r3, r3, #8
 8000d08:	431a      	orrs	r2, r3
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	685a      	ldr	r2, [r3, #4]
 8000d12:	68fb      	ldr	r3, [r7, #12]
 8000d14:	3302      	adds	r3, #2
 8000d16:	6839      	ldr	r1, [r7, #0]
 8000d18:	440b      	add	r3, r1
 8000d1a:	781b      	ldrb	r3, [r3, #0]
 8000d1c:	041b      	lsls	r3, r3, #16
 8000d1e:	431a      	orrs	r2, r3
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	685a      	ldr	r2, [r3, #4]
 8000d28:	68fb      	ldr	r3, [r7, #12]
 8000d2a:	3303      	adds	r3, #3
 8000d2c:	6839      	ldr	r1, [r7, #0]
 8000d2e:	440b      	add	r3, r1
 8000d30:	781b      	ldrb	r3, [r3, #0]
 8000d32:	061b      	lsls	r3, r3, #24
 8000d34:	431a      	orrs	r2, r3
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data.sec);
 8000d3a:	68fb      	ldr	r3, [r7, #12]
 8000d3c:	3304      	adds	r3, #4
 8000d3e:	60fb      	str	r3, [r7, #12]
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 8000d40:	68fb      	ldr	r3, [r7, #12]
 8000d42:	683a      	ldr	r2, [r7, #0]
 8000d44:	4413      	add	r3, r2
 8000d46:	781b      	ldrb	r3, [r3, #0]
 8000d48:	461a      	mov	r2, r3
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	689a      	ldr	r2, [r3, #8]
 8000d52:	68fb      	ldr	r3, [r7, #12]
 8000d54:	3301      	adds	r3, #1
 8000d56:	6839      	ldr	r1, [r7, #0]
 8000d58:	440b      	add	r3, r1
 8000d5a:	781b      	ldrb	r3, [r3, #0]
 8000d5c:	021b      	lsls	r3, r3, #8
 8000d5e:	431a      	orrs	r2, r3
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	689a      	ldr	r2, [r3, #8]
 8000d68:	68fb      	ldr	r3, [r7, #12]
 8000d6a:	3302      	adds	r3, #2
 8000d6c:	6839      	ldr	r1, [r7, #0]
 8000d6e:	440b      	add	r3, r1
 8000d70:	781b      	ldrb	r3, [r3, #0]
 8000d72:	041b      	lsls	r3, r3, #16
 8000d74:	431a      	orrs	r2, r3
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	689a      	ldr	r2, [r3, #8]
 8000d7e:	68fb      	ldr	r3, [r7, #12]
 8000d80:	3303      	adds	r3, #3
 8000d82:	6839      	ldr	r1, [r7, #0]
 8000d84:	440b      	add	r3, r1
 8000d86:	781b      	ldrb	r3, [r3, #0]
 8000d88:	061b      	lsls	r3, r3, #24
 8000d8a:	431a      	orrs	r2, r3
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->data.nsec);
 8000d90:	68fb      	ldr	r3, [r7, #12]
 8000d92:	3304      	adds	r3, #4
 8000d94:	60fb      	str	r3, [r7, #12]
     return offset;
 8000d96:	68fb      	ldr	r3, [r7, #12]
    }
 8000d98:	4618      	mov	r0, r3
 8000d9a:	3714      	adds	r7, #20
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da2:	4770      	bx	lr

08000da4 <_ZN8std_msgs4Time7getTypeEv>:

    const char * getType(){ return "std_msgs/Time"; };
 8000da4:	b480      	push	{r7}
 8000da6:	b083      	sub	sp, #12
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
 8000dac:	4b03      	ldr	r3, [pc, #12]	; (8000dbc <_ZN8std_msgs4Time7getTypeEv+0x18>)
 8000dae:	4618      	mov	r0, r3
 8000db0:	370c      	adds	r7, #12
 8000db2:	46bd      	mov	sp, r7
 8000db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db8:	4770      	bx	lr
 8000dba:	bf00      	nop
 8000dbc:	0800b264 	.word	0x0800b264

08000dc0 <_ZN8std_msgs4Time6getMD5Ev>:
    const char * getMD5(){ return "cd7166c74c552c311fbcc2fe5a7bc289"; };
 8000dc0:	b480      	push	{r7}
 8000dc2:	b083      	sub	sp, #12
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
 8000dc8:	4b03      	ldr	r3, [pc, #12]	; (8000dd8 <_ZN8std_msgs4Time6getMD5Ev+0x18>)
 8000dca:	4618      	mov	r0, r3
 8000dcc:	370c      	adds	r7, #12
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd4:	4770      	bx	lr
 8000dd6:	bf00      	nop
 8000dd8:	0800b274 	.word	0x0800b274

08000ddc <_ZN14rosserial_msgs9TopicInfoC1Ev>:
      enum { ID_PARAMETER_REQUEST = 6 };
      enum { ID_LOG = 7 };
      enum { ID_TIME = 10 };
      enum { ID_TX_STOP = 11 };

    TopicInfo():
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b082      	sub	sp, #8
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
      topic_id(0),
      topic_name(""),
      message_type(""),
      md5sum(""),
      buffer_size(0)
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	4618      	mov	r0, r3
 8000de8:	f7ff fef8 	bl	8000bdc <_ZN3ros3MsgC1Ev>
 8000dec:	4a0b      	ldr	r2, [pc, #44]	; (8000e1c <_ZN14rosserial_msgs9TopicInfoC1Ev+0x40>)
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	601a      	str	r2, [r3, #0]
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	2200      	movs	r2, #0
 8000df6:	809a      	strh	r2, [r3, #4]
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	4a09      	ldr	r2, [pc, #36]	; (8000e20 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8000dfc:	609a      	str	r2, [r3, #8]
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	4a07      	ldr	r2, [pc, #28]	; (8000e20 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8000e02:	60da      	str	r2, [r3, #12]
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	4a06      	ldr	r2, [pc, #24]	; (8000e20 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8000e08:	611a      	str	r2, [r3, #16]
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	615a      	str	r2, [r3, #20]
    {
    }
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	4618      	mov	r0, r3
 8000e14:	3708      	adds	r7, #8
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	bf00      	nop
 8000e1c:	0800b66c 	.word	0x0800b66c
 8000e20:	0800b298 	.word	0x0800b298

08000e24 <_ZNK14rosserial_msgs9TopicInfo9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b088      	sub	sp, #32
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
 8000e2c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	61fb      	str	r3, [r7, #28]
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	8899      	ldrh	r1, [r3, #4]
 8000e36:	69fb      	ldr	r3, [r7, #28]
 8000e38:	683a      	ldr	r2, [r7, #0]
 8000e3a:	4413      	add	r3, r2
 8000e3c:	b2ca      	uxtb	r2, r1
 8000e3e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	889b      	ldrh	r3, [r3, #4]
 8000e44:	0a1b      	lsrs	r3, r3, #8
 8000e46:	b299      	uxth	r1, r3
 8000e48:	69fb      	ldr	r3, [r7, #28]
 8000e4a:	3301      	adds	r3, #1
 8000e4c:	683a      	ldr	r2, [r7, #0]
 8000e4e:	4413      	add	r3, r2
 8000e50:	b2ca      	uxtb	r2, r1
 8000e52:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->topic_id);
 8000e54:	69fb      	ldr	r3, [r7, #28]
 8000e56:	3302      	adds	r3, #2
 8000e58:	61fb      	str	r3, [r7, #28]
      uint32_t length_topic_name = strlen(this->topic_name);
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	689b      	ldr	r3, [r3, #8]
 8000e5e:	4618      	mov	r0, r3
 8000e60:	f7ff f9be 	bl	80001e0 <strlen>
 8000e64:	61b8      	str	r0, [r7, #24]
      varToArr(outbuffer + offset, length_topic_name);
 8000e66:	69fb      	ldr	r3, [r7, #28]
 8000e68:	683a      	ldr	r2, [r7, #0]
 8000e6a:	4413      	add	r3, r2
 8000e6c:	69b9      	ldr	r1, [r7, #24]
 8000e6e:	4618      	mov	r0, r3
 8000e70:	f001 fd97 	bl	80029a2 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8000e74:	69fb      	ldr	r3, [r7, #28]
 8000e76:	3304      	adds	r3, #4
 8000e78:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 8000e7a:	69fb      	ldr	r3, [r7, #28]
 8000e7c:	683a      	ldr	r2, [r7, #0]
 8000e7e:	18d0      	adds	r0, r2, r3
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	689b      	ldr	r3, [r3, #8]
 8000e84:	69ba      	ldr	r2, [r7, #24]
 8000e86:	4619      	mov	r1, r3
 8000e88:	f009 ffc6 	bl	800ae18 <memcpy>
      offset += length_topic_name;
 8000e8c:	69fa      	ldr	r2, [r7, #28]
 8000e8e:	69bb      	ldr	r3, [r7, #24]
 8000e90:	4413      	add	r3, r2
 8000e92:	61fb      	str	r3, [r7, #28]
      uint32_t length_message_type = strlen(this->message_type);
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	68db      	ldr	r3, [r3, #12]
 8000e98:	4618      	mov	r0, r3
 8000e9a:	f7ff f9a1 	bl	80001e0 <strlen>
 8000e9e:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_message_type);
 8000ea0:	69fb      	ldr	r3, [r7, #28]
 8000ea2:	683a      	ldr	r2, [r7, #0]
 8000ea4:	4413      	add	r3, r2
 8000ea6:	6979      	ldr	r1, [r7, #20]
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	f001 fd7a 	bl	80029a2 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8000eae:	69fb      	ldr	r3, [r7, #28]
 8000eb0:	3304      	adds	r3, #4
 8000eb2:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 8000eb4:	69fb      	ldr	r3, [r7, #28]
 8000eb6:	683a      	ldr	r2, [r7, #0]
 8000eb8:	18d0      	adds	r0, r2, r3
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	68db      	ldr	r3, [r3, #12]
 8000ebe:	697a      	ldr	r2, [r7, #20]
 8000ec0:	4619      	mov	r1, r3
 8000ec2:	f009 ffa9 	bl	800ae18 <memcpy>
      offset += length_message_type;
 8000ec6:	69fa      	ldr	r2, [r7, #28]
 8000ec8:	697b      	ldr	r3, [r7, #20]
 8000eca:	4413      	add	r3, r2
 8000ecc:	61fb      	str	r3, [r7, #28]
      uint32_t length_md5sum = strlen(this->md5sum);
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	691b      	ldr	r3, [r3, #16]
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	f7ff f984 	bl	80001e0 <strlen>
 8000ed8:	6138      	str	r0, [r7, #16]
      varToArr(outbuffer + offset, length_md5sum);
 8000eda:	69fb      	ldr	r3, [r7, #28]
 8000edc:	683a      	ldr	r2, [r7, #0]
 8000ede:	4413      	add	r3, r2
 8000ee0:	6939      	ldr	r1, [r7, #16]
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	f001 fd5d 	bl	80029a2 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8000ee8:	69fb      	ldr	r3, [r7, #28]
 8000eea:	3304      	adds	r3, #4
 8000eec:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 8000eee:	69fb      	ldr	r3, [r7, #28]
 8000ef0:	683a      	ldr	r2, [r7, #0]
 8000ef2:	18d0      	adds	r0, r2, r3
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	691b      	ldr	r3, [r3, #16]
 8000ef8:	693a      	ldr	r2, [r7, #16]
 8000efa:	4619      	mov	r1, r3
 8000efc:	f009 ff8c 	bl	800ae18 <memcpy>
      offset += length_md5sum;
 8000f00:	69fa      	ldr	r2, [r7, #28]
 8000f02:	693b      	ldr	r3, [r7, #16]
 8000f04:	4413      	add	r3, r2
 8000f06:	61fb      	str	r3, [r7, #28]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	695b      	ldr	r3, [r3, #20]
 8000f0c:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 8000f0e:	68f9      	ldr	r1, [r7, #12]
 8000f10:	69fb      	ldr	r3, [r7, #28]
 8000f12:	683a      	ldr	r2, [r7, #0]
 8000f14:	4413      	add	r3, r2
 8000f16:	b2ca      	uxtb	r2, r1
 8000f18:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 8000f1a:	68fb      	ldr	r3, [r7, #12]
 8000f1c:	0a19      	lsrs	r1, r3, #8
 8000f1e:	69fb      	ldr	r3, [r7, #28]
 8000f20:	3301      	adds	r3, #1
 8000f22:	683a      	ldr	r2, [r7, #0]
 8000f24:	4413      	add	r3, r2
 8000f26:	b2ca      	uxtb	r2, r1
 8000f28:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 8000f2a:	68fb      	ldr	r3, [r7, #12]
 8000f2c:	0c19      	lsrs	r1, r3, #16
 8000f2e:	69fb      	ldr	r3, [r7, #28]
 8000f30:	3302      	adds	r3, #2
 8000f32:	683a      	ldr	r2, [r7, #0]
 8000f34:	4413      	add	r3, r2
 8000f36:	b2ca      	uxtb	r2, r1
 8000f38:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 8000f3a:	68fb      	ldr	r3, [r7, #12]
 8000f3c:	0e19      	lsrs	r1, r3, #24
 8000f3e:	69fb      	ldr	r3, [r7, #28]
 8000f40:	3303      	adds	r3, #3
 8000f42:	683a      	ldr	r2, [r7, #0]
 8000f44:	4413      	add	r3, r2
 8000f46:	b2ca      	uxtb	r2, r1
 8000f48:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->buffer_size);
 8000f4a:	69fb      	ldr	r3, [r7, #28]
 8000f4c:	3304      	adds	r3, #4
 8000f4e:	61fb      	str	r3, [r7, #28]
      return offset;
 8000f50:	69fb      	ldr	r3, [r7, #28]
    }
 8000f52:	4618      	mov	r0, r3
 8000f54:	3720      	adds	r7, #32
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}

08000f5a <_ZN14rosserial_msgs9TopicInfo11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8000f5a:	b580      	push	{r7, lr}
 8000f5c:	b08a      	sub	sp, #40	; 0x28
 8000f5e:	af00      	add	r7, sp, #0
 8000f60:	6078      	str	r0, [r7, #4]
 8000f62:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000f64:	2300      	movs	r3, #0
 8000f66:	61bb      	str	r3, [r7, #24]
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 8000f68:	69bb      	ldr	r3, [r7, #24]
 8000f6a:	683a      	ldr	r2, [r7, #0]
 8000f6c:	4413      	add	r3, r2
 8000f6e:	781b      	ldrb	r3, [r3, #0]
 8000f70:	b29a      	uxth	r2, r3
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	809a      	strh	r2, [r3, #4]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	889b      	ldrh	r3, [r3, #4]
 8000f7a:	b21a      	sxth	r2, r3
 8000f7c:	69bb      	ldr	r3, [r7, #24]
 8000f7e:	3301      	adds	r3, #1
 8000f80:	6839      	ldr	r1, [r7, #0]
 8000f82:	440b      	add	r3, r1
 8000f84:	781b      	ldrb	r3, [r3, #0]
 8000f86:	021b      	lsls	r3, r3, #8
 8000f88:	b21b      	sxth	r3, r3
 8000f8a:	4313      	orrs	r3, r2
 8000f8c:	b21b      	sxth	r3, r3
 8000f8e:	b29a      	uxth	r2, r3
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->topic_id);
 8000f94:	69bb      	ldr	r3, [r7, #24]
 8000f96:	3302      	adds	r3, #2
 8000f98:	61bb      	str	r3, [r7, #24]
      uint32_t length_topic_name;
      arrToVar(length_topic_name, (inbuffer + offset));
 8000f9a:	69bb      	ldr	r3, [r7, #24]
 8000f9c:	683a      	ldr	r2, [r7, #0]
 8000f9e:	441a      	add	r2, r3
 8000fa0:	f107 0314 	add.w	r3, r7, #20
 8000fa4:	4611      	mov	r1, r2
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	f001 fd19 	bl	80029de <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8000fac:	69bb      	ldr	r3, [r7, #24]
 8000fae:	3304      	adds	r3, #4
 8000fb0:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8000fb2:	69bb      	ldr	r3, [r7, #24]
 8000fb4:	627b      	str	r3, [r7, #36]	; 0x24
 8000fb6:	69ba      	ldr	r2, [r7, #24]
 8000fb8:	697b      	ldr	r3, [r7, #20]
 8000fba:	4413      	add	r3, r2
 8000fbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000fbe:	429a      	cmp	r2, r3
 8000fc0:	d20c      	bcs.n	8000fdc <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x82>
          inbuffer[k-1]=inbuffer[k];
 8000fc2:	683a      	ldr	r2, [r7, #0]
 8000fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fc6:	441a      	add	r2, r3
 8000fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fca:	3b01      	subs	r3, #1
 8000fcc:	6839      	ldr	r1, [r7, #0]
 8000fce:	440b      	add	r3, r1
 8000fd0:	7812      	ldrb	r2, [r2, #0]
 8000fd2:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8000fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fd6:	3301      	adds	r3, #1
 8000fd8:	627b      	str	r3, [r7, #36]	; 0x24
 8000fda:	e7ec      	b.n	8000fb6 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x5c>
      }
      inbuffer[offset+length_topic_name-1]=0;
 8000fdc:	69ba      	ldr	r2, [r7, #24]
 8000fde:	697b      	ldr	r3, [r7, #20]
 8000fe0:	4413      	add	r3, r2
 8000fe2:	3b01      	subs	r3, #1
 8000fe4:	683a      	ldr	r2, [r7, #0]
 8000fe6:	4413      	add	r3, r2
 8000fe8:	2200      	movs	r2, #0
 8000fea:	701a      	strb	r2, [r3, #0]
      this->topic_name = (char *)(inbuffer + offset-1);
 8000fec:	69bb      	ldr	r3, [r7, #24]
 8000fee:	3b01      	subs	r3, #1
 8000ff0:	683a      	ldr	r2, [r7, #0]
 8000ff2:	441a      	add	r2, r3
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	609a      	str	r2, [r3, #8]
      offset += length_topic_name;
 8000ff8:	69ba      	ldr	r2, [r7, #24]
 8000ffa:	697b      	ldr	r3, [r7, #20]
 8000ffc:	4413      	add	r3, r2
 8000ffe:	61bb      	str	r3, [r7, #24]
      uint32_t length_message_type;
      arrToVar(length_message_type, (inbuffer + offset));
 8001000:	69bb      	ldr	r3, [r7, #24]
 8001002:	683a      	ldr	r2, [r7, #0]
 8001004:	441a      	add	r2, r3
 8001006:	f107 0310 	add.w	r3, r7, #16
 800100a:	4611      	mov	r1, r2
 800100c:	4618      	mov	r0, r3
 800100e:	f001 fce6 	bl	80029de <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001012:	69bb      	ldr	r3, [r7, #24]
 8001014:	3304      	adds	r3, #4
 8001016:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8001018:	69bb      	ldr	r3, [r7, #24]
 800101a:	623b      	str	r3, [r7, #32]
 800101c:	69ba      	ldr	r2, [r7, #24]
 800101e:	693b      	ldr	r3, [r7, #16]
 8001020:	4413      	add	r3, r2
 8001022:	6a3a      	ldr	r2, [r7, #32]
 8001024:	429a      	cmp	r2, r3
 8001026:	d20c      	bcs.n	8001042 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xe8>
          inbuffer[k-1]=inbuffer[k];
 8001028:	683a      	ldr	r2, [r7, #0]
 800102a:	6a3b      	ldr	r3, [r7, #32]
 800102c:	441a      	add	r2, r3
 800102e:	6a3b      	ldr	r3, [r7, #32]
 8001030:	3b01      	subs	r3, #1
 8001032:	6839      	ldr	r1, [r7, #0]
 8001034:	440b      	add	r3, r1
 8001036:	7812      	ldrb	r2, [r2, #0]
 8001038:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 800103a:	6a3b      	ldr	r3, [r7, #32]
 800103c:	3301      	adds	r3, #1
 800103e:	623b      	str	r3, [r7, #32]
 8001040:	e7ec      	b.n	800101c <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xc2>
      }
      inbuffer[offset+length_message_type-1]=0;
 8001042:	69ba      	ldr	r2, [r7, #24]
 8001044:	693b      	ldr	r3, [r7, #16]
 8001046:	4413      	add	r3, r2
 8001048:	3b01      	subs	r3, #1
 800104a:	683a      	ldr	r2, [r7, #0]
 800104c:	4413      	add	r3, r2
 800104e:	2200      	movs	r2, #0
 8001050:	701a      	strb	r2, [r3, #0]
      this->message_type = (char *)(inbuffer + offset-1);
 8001052:	69bb      	ldr	r3, [r7, #24]
 8001054:	3b01      	subs	r3, #1
 8001056:	683a      	ldr	r2, [r7, #0]
 8001058:	441a      	add	r2, r3
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	60da      	str	r2, [r3, #12]
      offset += length_message_type;
 800105e:	69ba      	ldr	r2, [r7, #24]
 8001060:	693b      	ldr	r3, [r7, #16]
 8001062:	4413      	add	r3, r2
 8001064:	61bb      	str	r3, [r7, #24]
      uint32_t length_md5sum;
      arrToVar(length_md5sum, (inbuffer + offset));
 8001066:	69bb      	ldr	r3, [r7, #24]
 8001068:	683a      	ldr	r2, [r7, #0]
 800106a:	441a      	add	r2, r3
 800106c:	f107 030c 	add.w	r3, r7, #12
 8001070:	4611      	mov	r1, r2
 8001072:	4618      	mov	r0, r3
 8001074:	f001 fcb3 	bl	80029de <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001078:	69bb      	ldr	r3, [r7, #24]
 800107a:	3304      	adds	r3, #4
 800107c:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 800107e:	69bb      	ldr	r3, [r7, #24]
 8001080:	61fb      	str	r3, [r7, #28]
 8001082:	69ba      	ldr	r2, [r7, #24]
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	4413      	add	r3, r2
 8001088:	69fa      	ldr	r2, [r7, #28]
 800108a:	429a      	cmp	r2, r3
 800108c:	d20c      	bcs.n	80010a8 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x14e>
          inbuffer[k-1]=inbuffer[k];
 800108e:	683a      	ldr	r2, [r7, #0]
 8001090:	69fb      	ldr	r3, [r7, #28]
 8001092:	441a      	add	r2, r3
 8001094:	69fb      	ldr	r3, [r7, #28]
 8001096:	3b01      	subs	r3, #1
 8001098:	6839      	ldr	r1, [r7, #0]
 800109a:	440b      	add	r3, r1
 800109c:	7812      	ldrb	r2, [r2, #0]
 800109e:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 80010a0:	69fb      	ldr	r3, [r7, #28]
 80010a2:	3301      	adds	r3, #1
 80010a4:	61fb      	str	r3, [r7, #28]
 80010a6:	e7ec      	b.n	8001082 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x128>
      }
      inbuffer[offset+length_md5sum-1]=0;
 80010a8:	69ba      	ldr	r2, [r7, #24]
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	4413      	add	r3, r2
 80010ae:	3b01      	subs	r3, #1
 80010b0:	683a      	ldr	r2, [r7, #0]
 80010b2:	4413      	add	r3, r2
 80010b4:	2200      	movs	r2, #0
 80010b6:	701a      	strb	r2, [r3, #0]
      this->md5sum = (char *)(inbuffer + offset-1);
 80010b8:	69bb      	ldr	r3, [r7, #24]
 80010ba:	3b01      	subs	r3, #1
 80010bc:	683a      	ldr	r2, [r7, #0]
 80010be:	441a      	add	r2, r3
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	611a      	str	r2, [r3, #16]
      offset += length_md5sum;
 80010c4:	69ba      	ldr	r2, [r7, #24]
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	4413      	add	r3, r2
 80010ca:	61bb      	str	r3, [r7, #24]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.base = 0;
 80010cc:	2300      	movs	r3, #0
 80010ce:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80010d0:	68bb      	ldr	r3, [r7, #8]
 80010d2:	69ba      	ldr	r2, [r7, #24]
 80010d4:	6839      	ldr	r1, [r7, #0]
 80010d6:	440a      	add	r2, r1
 80010d8:	7812      	ldrb	r2, [r2, #0]
 80010da:	4313      	orrs	r3, r2
 80010dc:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80010de:	68ba      	ldr	r2, [r7, #8]
 80010e0:	69bb      	ldr	r3, [r7, #24]
 80010e2:	3301      	adds	r3, #1
 80010e4:	6839      	ldr	r1, [r7, #0]
 80010e6:	440b      	add	r3, r1
 80010e8:	781b      	ldrb	r3, [r3, #0]
 80010ea:	021b      	lsls	r3, r3, #8
 80010ec:	4313      	orrs	r3, r2
 80010ee:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80010f0:	68ba      	ldr	r2, [r7, #8]
 80010f2:	69bb      	ldr	r3, [r7, #24]
 80010f4:	3302      	adds	r3, #2
 80010f6:	6839      	ldr	r1, [r7, #0]
 80010f8:	440b      	add	r3, r1
 80010fa:	781b      	ldrb	r3, [r3, #0]
 80010fc:	041b      	lsls	r3, r3, #16
 80010fe:	4313      	orrs	r3, r2
 8001100:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001102:	68ba      	ldr	r2, [r7, #8]
 8001104:	69bb      	ldr	r3, [r7, #24]
 8001106:	3303      	adds	r3, #3
 8001108:	6839      	ldr	r1, [r7, #0]
 800110a:	440b      	add	r3, r1
 800110c:	781b      	ldrb	r3, [r3, #0]
 800110e:	061b      	lsls	r3, r3, #24
 8001110:	4313      	orrs	r3, r2
 8001112:	60bb      	str	r3, [r7, #8]
      this->buffer_size = u_buffer_size.real;
 8001114:	68ba      	ldr	r2, [r7, #8]
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->buffer_size);
 800111a:	69bb      	ldr	r3, [r7, #24]
 800111c:	3304      	adds	r3, #4
 800111e:	61bb      	str	r3, [r7, #24]
     return offset;
 8001120:	69bb      	ldr	r3, [r7, #24]
    }
 8001122:	4618      	mov	r0, r3
 8001124:	3728      	adds	r7, #40	; 0x28
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}
	...

0800112c <_ZN14rosserial_msgs9TopicInfo7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/TopicInfo"; };
 800112c:	b480      	push	{r7}
 800112e:	b083      	sub	sp, #12
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
 8001134:	4b03      	ldr	r3, [pc, #12]	; (8001144 <_ZN14rosserial_msgs9TopicInfo7getTypeEv+0x18>)
 8001136:	4618      	mov	r0, r3
 8001138:	370c      	adds	r7, #12
 800113a:	46bd      	mov	sp, r7
 800113c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001140:	4770      	bx	lr
 8001142:	bf00      	nop
 8001144:	0800b29c 	.word	0x0800b29c

08001148 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev>:
    const char * getMD5(){ return "0ad51f88fc44892f8c10684077646005"; };
 8001148:	b480      	push	{r7}
 800114a:	b083      	sub	sp, #12
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
 8001150:	4b03      	ldr	r3, [pc, #12]	; (8001160 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev+0x18>)
 8001152:	4618      	mov	r0, r3
 8001154:	370c      	adds	r7, #12
 8001156:	46bd      	mov	sp, r7
 8001158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115c:	4770      	bx	lr
 800115e:	bf00      	nop
 8001160:	0800b2b8 	.word	0x0800b2b8

08001164 <_ZN14rosserial_msgs3LogC1Ev>:
      enum { INFO = 1 };
      enum { WARN = 2 };
      enum { ERROR = 3 };
      enum { FATAL = 4 };

    Log():
 8001164:	b580      	push	{r7, lr}
 8001166:	b082      	sub	sp, #8
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
      level(0),
      msg("")
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	4618      	mov	r0, r3
 8001170:	f7ff fd34 	bl	8000bdc <_ZN3ros3MsgC1Ev>
 8001174:	4a06      	ldr	r2, [pc, #24]	; (8001190 <_ZN14rosserial_msgs3LogC1Ev+0x2c>)
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	601a      	str	r2, [r3, #0]
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	2200      	movs	r2, #0
 800117e:	711a      	strb	r2, [r3, #4]
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	4a04      	ldr	r2, [pc, #16]	; (8001194 <_ZN14rosserial_msgs3LogC1Ev+0x30>)
 8001184:	609a      	str	r2, [r3, #8]
    {
    }
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	4618      	mov	r0, r3
 800118a:	3708      	adds	r7, #8
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}
 8001190:	0800b654 	.word	0x0800b654
 8001194:	0800b298 	.word	0x0800b298

08001198 <_ZNK14rosserial_msgs3Log9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8001198:	b580      	push	{r7, lr}
 800119a:	b084      	sub	sp, #16
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
 80011a0:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80011a2:	2300      	movs	r3, #0
 80011a4:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	683a      	ldr	r2, [r7, #0]
 80011aa:	4413      	add	r3, r2
 80011ac:	687a      	ldr	r2, [r7, #4]
 80011ae:	7912      	ldrb	r2, [r2, #4]
 80011b0:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->level);
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	3301      	adds	r3, #1
 80011b6:	60fb      	str	r3, [r7, #12]
      uint32_t length_msg = strlen(this->msg);
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	689b      	ldr	r3, [r3, #8]
 80011bc:	4618      	mov	r0, r3
 80011be:	f7ff f80f 	bl	80001e0 <strlen>
 80011c2:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_msg);
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	683a      	ldr	r2, [r7, #0]
 80011c8:	4413      	add	r3, r2
 80011ca:	68b9      	ldr	r1, [r7, #8]
 80011cc:	4618      	mov	r0, r3
 80011ce:	f001 fbe8 	bl	80029a2 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	3304      	adds	r3, #4
 80011d6:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->msg, length_msg);
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	683a      	ldr	r2, [r7, #0]
 80011dc:	18d0      	adds	r0, r2, r3
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	689b      	ldr	r3, [r3, #8]
 80011e2:	68ba      	ldr	r2, [r7, #8]
 80011e4:	4619      	mov	r1, r3
 80011e6:	f009 fe17 	bl	800ae18 <memcpy>
      offset += length_msg;
 80011ea:	68fa      	ldr	r2, [r7, #12]
 80011ec:	68bb      	ldr	r3, [r7, #8]
 80011ee:	4413      	add	r3, r2
 80011f0:	60fb      	str	r3, [r7, #12]
      return offset;
 80011f2:	68fb      	ldr	r3, [r7, #12]
    }
 80011f4:	4618      	mov	r0, r3
 80011f6:	3710      	adds	r7, #16
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bd80      	pop	{r7, pc}

080011fc <_ZN14rosserial_msgs3Log11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b086      	sub	sp, #24
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
 8001204:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001206:	2300      	movs	r3, #0
 8001208:	613b      	str	r3, [r7, #16]
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 800120a:	693b      	ldr	r3, [r7, #16]
 800120c:	683a      	ldr	r2, [r7, #0]
 800120e:	4413      	add	r3, r2
 8001210:	781a      	ldrb	r2, [r3, #0]
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->level);
 8001216:	693b      	ldr	r3, [r7, #16]
 8001218:	3301      	adds	r3, #1
 800121a:	613b      	str	r3, [r7, #16]
      uint32_t length_msg;
      arrToVar(length_msg, (inbuffer + offset));
 800121c:	693b      	ldr	r3, [r7, #16]
 800121e:	683a      	ldr	r2, [r7, #0]
 8001220:	441a      	add	r2, r3
 8001222:	f107 030c 	add.w	r3, r7, #12
 8001226:	4611      	mov	r1, r2
 8001228:	4618      	mov	r0, r3
 800122a:	f001 fbd8 	bl	80029de <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 800122e:	693b      	ldr	r3, [r7, #16]
 8001230:	3304      	adds	r3, #4
 8001232:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8001234:	693b      	ldr	r3, [r7, #16]
 8001236:	617b      	str	r3, [r7, #20]
 8001238:	693a      	ldr	r2, [r7, #16]
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	4413      	add	r3, r2
 800123e:	697a      	ldr	r2, [r7, #20]
 8001240:	429a      	cmp	r2, r3
 8001242:	d20c      	bcs.n	800125e <_ZN14rosserial_msgs3Log11deserializeEPh+0x62>
          inbuffer[k-1]=inbuffer[k];
 8001244:	683a      	ldr	r2, [r7, #0]
 8001246:	697b      	ldr	r3, [r7, #20]
 8001248:	441a      	add	r2, r3
 800124a:	697b      	ldr	r3, [r7, #20]
 800124c:	3b01      	subs	r3, #1
 800124e:	6839      	ldr	r1, [r7, #0]
 8001250:	440b      	add	r3, r1
 8001252:	7812      	ldrb	r2, [r2, #0]
 8001254:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8001256:	697b      	ldr	r3, [r7, #20]
 8001258:	3301      	adds	r3, #1
 800125a:	617b      	str	r3, [r7, #20]
 800125c:	e7ec      	b.n	8001238 <_ZN14rosserial_msgs3Log11deserializeEPh+0x3c>
      }
      inbuffer[offset+length_msg-1]=0;
 800125e:	693a      	ldr	r2, [r7, #16]
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	4413      	add	r3, r2
 8001264:	3b01      	subs	r3, #1
 8001266:	683a      	ldr	r2, [r7, #0]
 8001268:	4413      	add	r3, r2
 800126a:	2200      	movs	r2, #0
 800126c:	701a      	strb	r2, [r3, #0]
      this->msg = (char *)(inbuffer + offset-1);
 800126e:	693b      	ldr	r3, [r7, #16]
 8001270:	3b01      	subs	r3, #1
 8001272:	683a      	ldr	r2, [r7, #0]
 8001274:	441a      	add	r2, r3
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	609a      	str	r2, [r3, #8]
      offset += length_msg;
 800127a:	693a      	ldr	r2, [r7, #16]
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	4413      	add	r3, r2
 8001280:	613b      	str	r3, [r7, #16]
     return offset;
 8001282:	693b      	ldr	r3, [r7, #16]
    }
 8001284:	4618      	mov	r0, r3
 8001286:	3718      	adds	r7, #24
 8001288:	46bd      	mov	sp, r7
 800128a:	bd80      	pop	{r7, pc}

0800128c <_ZN14rosserial_msgs3Log7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/Log"; };
 800128c:	b480      	push	{r7}
 800128e:	b083      	sub	sp, #12
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
 8001294:	4b03      	ldr	r3, [pc, #12]	; (80012a4 <_ZN14rosserial_msgs3Log7getTypeEv+0x18>)
 8001296:	4618      	mov	r0, r3
 8001298:	370c      	adds	r7, #12
 800129a:	46bd      	mov	sp, r7
 800129c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a0:	4770      	bx	lr
 80012a2:	bf00      	nop
 80012a4:	0800b2dc 	.word	0x0800b2dc

080012a8 <_ZN14rosserial_msgs3Log6getMD5Ev>:
    const char * getMD5(){ return "11abd731c25933261cd6183bd12d6295"; };
 80012a8:	b480      	push	{r7}
 80012aa:	b083      	sub	sp, #12
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
 80012b0:	4b03      	ldr	r3, [pc, #12]	; (80012c0 <_ZN14rosserial_msgs3Log6getMD5Ev+0x18>)
 80012b2:	4618      	mov	r0, r3
 80012b4:	370c      	adds	r7, #12
 80012b6:	46bd      	mov	sp, r7
 80012b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012bc:	4770      	bx	lr
 80012be:	bf00      	nop
 80012c0:	0800b2f0 	.word	0x0800b2f0

080012c4 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>:
      uint32_t strings_length;
      typedef char* _strings_type;
      _strings_type st_strings;
      _strings_type * strings;

    RequestParamResponse():
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b082      	sub	sp, #8
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
      ints_length(0), ints(NULL),
      floats_length(0), floats(NULL),
      strings_length(0), strings(NULL)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	4618      	mov	r0, r3
 80012d0:	f7ff fc84 	bl	8000bdc <_ZN3ros3MsgC1Ev>
 80012d4:	4a0c      	ldr	r2, [pc, #48]	; (8001308 <_ZN14rosserial_msgs20RequestParamResponseC1Ev+0x44>)
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	601a      	str	r2, [r3, #0]
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	2200      	movs	r2, #0
 80012de:	605a      	str	r2, [r3, #4]
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	2200      	movs	r2, #0
 80012e4:	60da      	str	r2, [r3, #12]
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	2200      	movs	r2, #0
 80012ea:	611a      	str	r2, [r3, #16]
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	2200      	movs	r2, #0
 80012f0:	619a      	str	r2, [r3, #24]
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	2200      	movs	r2, #0
 80012f6:	61da      	str	r2, [r3, #28]
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	2200      	movs	r2, #0
 80012fc:	625a      	str	r2, [r3, #36]	; 0x24
    {
    }
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	4618      	mov	r0, r3
 8001302:	3708      	adds	r7, #8
 8001304:	46bd      	mov	sp, r7
 8001306:	bd80      	pop	{r7, pc}
 8001308:	0800b63c 	.word	0x0800b63c

0800130c <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 800130c:	b580      	push	{r7, lr}
 800130e:	b08a      	sub	sp, #40	; 0x28
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
 8001314:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001316:	2300      	movs	r3, #0
 8001318:	627b      	str	r3, [r7, #36]	; 0x24
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	6859      	ldr	r1, [r3, #4]
 800131e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001320:	683a      	ldr	r2, [r7, #0]
 8001322:	4413      	add	r3, r2
 8001324:	b2ca      	uxtb	r2, r1
 8001326:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	685b      	ldr	r3, [r3, #4]
 800132c:	0a19      	lsrs	r1, r3, #8
 800132e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001330:	3301      	adds	r3, #1
 8001332:	683a      	ldr	r2, [r7, #0]
 8001334:	4413      	add	r3, r2
 8001336:	b2ca      	uxtb	r2, r1
 8001338:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	685b      	ldr	r3, [r3, #4]
 800133e:	0c19      	lsrs	r1, r3, #16
 8001340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001342:	3302      	adds	r3, #2
 8001344:	683a      	ldr	r2, [r7, #0]
 8001346:	4413      	add	r3, r2
 8001348:	b2ca      	uxtb	r2, r1
 800134a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	685b      	ldr	r3, [r3, #4]
 8001350:	0e19      	lsrs	r1, r3, #24
 8001352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001354:	3303      	adds	r3, #3
 8001356:	683a      	ldr	r2, [r7, #0]
 8001358:	4413      	add	r3, r2
 800135a:	b2ca      	uxtb	r2, r1
 800135c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints_length);
 800135e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001360:	3304      	adds	r3, #4
 8001362:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8001364:	2300      	movs	r3, #0
 8001366:	623b      	str	r3, [r7, #32]
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	685b      	ldr	r3, [r3, #4]
 800136c:	6a3a      	ldr	r2, [r7, #32]
 800136e:	429a      	cmp	r2, r3
 8001370:	d22b      	bcs.n	80013ca <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xbe>
      union {
        int32_t real;
        uint32_t base;
      } u_intsi;
      u_intsi.real = this->ints[i];
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	68da      	ldr	r2, [r3, #12]
 8001376:	6a3b      	ldr	r3, [r7, #32]
 8001378:	009b      	lsls	r3, r3, #2
 800137a:	4413      	add	r3, r2
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
 8001380:	6939      	ldr	r1, [r7, #16]
 8001382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001384:	683a      	ldr	r2, [r7, #0]
 8001386:	4413      	add	r3, r2
 8001388:	b2ca      	uxtb	r2, r1
 800138a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 800138c:	693b      	ldr	r3, [r7, #16]
 800138e:	0a19      	lsrs	r1, r3, #8
 8001390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001392:	3301      	adds	r3, #1
 8001394:	683a      	ldr	r2, [r7, #0]
 8001396:	4413      	add	r3, r2
 8001398:	b2ca      	uxtb	r2, r1
 800139a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 800139c:	693b      	ldr	r3, [r7, #16]
 800139e:	0c19      	lsrs	r1, r3, #16
 80013a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013a2:	3302      	adds	r3, #2
 80013a4:	683a      	ldr	r2, [r7, #0]
 80013a6:	4413      	add	r3, r2
 80013a8:	b2ca      	uxtb	r2, r1
 80013aa:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 80013ac:	693b      	ldr	r3, [r7, #16]
 80013ae:	0e19      	lsrs	r1, r3, #24
 80013b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013b2:	3303      	adds	r3, #3
 80013b4:	683a      	ldr	r2, [r7, #0]
 80013b6:	4413      	add	r3, r2
 80013b8:	b2ca      	uxtb	r2, r1
 80013ba:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints[i]);
 80013bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013be:	3304      	adds	r3, #4
 80013c0:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 80013c2:	6a3b      	ldr	r3, [r7, #32]
 80013c4:	3301      	adds	r3, #1
 80013c6:	623b      	str	r3, [r7, #32]
 80013c8:	e7ce      	b.n	8001368 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x5c>
      }
      *(outbuffer + offset + 0) = (this->floats_length >> (8 * 0)) & 0xFF;
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	6919      	ldr	r1, [r3, #16]
 80013ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013d0:	683a      	ldr	r2, [r7, #0]
 80013d2:	4413      	add	r3, r2
 80013d4:	b2ca      	uxtb	r2, r1
 80013d6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->floats_length >> (8 * 1)) & 0xFF;
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	691b      	ldr	r3, [r3, #16]
 80013dc:	0a19      	lsrs	r1, r3, #8
 80013de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013e0:	3301      	adds	r3, #1
 80013e2:	683a      	ldr	r2, [r7, #0]
 80013e4:	4413      	add	r3, r2
 80013e6:	b2ca      	uxtb	r2, r1
 80013e8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->floats_length >> (8 * 2)) & 0xFF;
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	691b      	ldr	r3, [r3, #16]
 80013ee:	0c19      	lsrs	r1, r3, #16
 80013f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013f2:	3302      	adds	r3, #2
 80013f4:	683a      	ldr	r2, [r7, #0]
 80013f6:	4413      	add	r3, r2
 80013f8:	b2ca      	uxtb	r2, r1
 80013fa:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->floats_length >> (8 * 3)) & 0xFF;
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	691b      	ldr	r3, [r3, #16]
 8001400:	0e19      	lsrs	r1, r3, #24
 8001402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001404:	3303      	adds	r3, #3
 8001406:	683a      	ldr	r2, [r7, #0]
 8001408:	4413      	add	r3, r2
 800140a:	b2ca      	uxtb	r2, r1
 800140c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats_length);
 800140e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001410:	3304      	adds	r3, #4
 8001412:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8001414:	2300      	movs	r3, #0
 8001416:	61fb      	str	r3, [r7, #28]
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	691b      	ldr	r3, [r3, #16]
 800141c:	69fa      	ldr	r2, [r7, #28]
 800141e:	429a      	cmp	r2, r3
 8001420:	d22b      	bcs.n	800147a <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x16e>
      union {
        float real;
        uint32_t base;
      } u_floatsi;
      u_floatsi.real = this->floats[i];
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	699a      	ldr	r2, [r3, #24]
 8001426:	69fb      	ldr	r3, [r7, #28]
 8001428:	009b      	lsls	r3, r3, #2
 800142a:	4413      	add	r3, r2
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 8001430:	68f9      	ldr	r1, [r7, #12]
 8001432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001434:	683a      	ldr	r2, [r7, #0]
 8001436:	4413      	add	r3, r2
 8001438:	b2ca      	uxtb	r2, r1
 800143a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	0a19      	lsrs	r1, r3, #8
 8001440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001442:	3301      	adds	r3, #1
 8001444:	683a      	ldr	r2, [r7, #0]
 8001446:	4413      	add	r3, r2
 8001448:	b2ca      	uxtb	r2, r1
 800144a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	0c19      	lsrs	r1, r3, #16
 8001450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001452:	3302      	adds	r3, #2
 8001454:	683a      	ldr	r2, [r7, #0]
 8001456:	4413      	add	r3, r2
 8001458:	b2ca      	uxtb	r2, r1
 800145a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	0e19      	lsrs	r1, r3, #24
 8001460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001462:	3303      	adds	r3, #3
 8001464:	683a      	ldr	r2, [r7, #0]
 8001466:	4413      	add	r3, r2
 8001468:	b2ca      	uxtb	r2, r1
 800146a:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats[i]);
 800146c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800146e:	3304      	adds	r3, #4
 8001470:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8001472:	69fb      	ldr	r3, [r7, #28]
 8001474:	3301      	adds	r3, #1
 8001476:	61fb      	str	r3, [r7, #28]
 8001478:	e7ce      	b.n	8001418 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x10c>
      }
      *(outbuffer + offset + 0) = (this->strings_length >> (8 * 0)) & 0xFF;
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	69d9      	ldr	r1, [r3, #28]
 800147e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001480:	683a      	ldr	r2, [r7, #0]
 8001482:	4413      	add	r3, r2
 8001484:	b2ca      	uxtb	r2, r1
 8001486:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->strings_length >> (8 * 1)) & 0xFF;
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	69db      	ldr	r3, [r3, #28]
 800148c:	0a19      	lsrs	r1, r3, #8
 800148e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001490:	3301      	adds	r3, #1
 8001492:	683a      	ldr	r2, [r7, #0]
 8001494:	4413      	add	r3, r2
 8001496:	b2ca      	uxtb	r2, r1
 8001498:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->strings_length >> (8 * 2)) & 0xFF;
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	69db      	ldr	r3, [r3, #28]
 800149e:	0c19      	lsrs	r1, r3, #16
 80014a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014a2:	3302      	adds	r3, #2
 80014a4:	683a      	ldr	r2, [r7, #0]
 80014a6:	4413      	add	r3, r2
 80014a8:	b2ca      	uxtb	r2, r1
 80014aa:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->strings_length >> (8 * 3)) & 0xFF;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	69db      	ldr	r3, [r3, #28]
 80014b0:	0e19      	lsrs	r1, r3, #24
 80014b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014b4:	3303      	adds	r3, #3
 80014b6:	683a      	ldr	r2, [r7, #0]
 80014b8:	4413      	add	r3, r2
 80014ba:	b2ca      	uxtb	r2, r1
 80014bc:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->strings_length);
 80014be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014c0:	3304      	adds	r3, #4
 80014c2:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 80014c4:	2300      	movs	r3, #0
 80014c6:	61bb      	str	r3, [r7, #24]
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	69db      	ldr	r3, [r3, #28]
 80014cc:	69ba      	ldr	r2, [r7, #24]
 80014ce:	429a      	cmp	r2, r3
 80014d0:	d228      	bcs.n	8001524 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x218>
      uint32_t length_stringsi = strlen(this->strings[i]);
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80014d6:	69bb      	ldr	r3, [r7, #24]
 80014d8:	009b      	lsls	r3, r3, #2
 80014da:	4413      	add	r3, r2
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	4618      	mov	r0, r3
 80014e0:	f7fe fe7e 	bl	80001e0 <strlen>
 80014e4:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_stringsi);
 80014e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014e8:	683a      	ldr	r2, [r7, #0]
 80014ea:	4413      	add	r3, r2
 80014ec:	6979      	ldr	r1, [r7, #20]
 80014ee:	4618      	mov	r0, r3
 80014f0:	f001 fa57 	bl	80029a2 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80014f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014f6:	3304      	adds	r3, #4
 80014f8:	627b      	str	r3, [r7, #36]	; 0x24
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 80014fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014fc:	683a      	ldr	r2, [r7, #0]
 80014fe:	18d0      	adds	r0, r2, r3
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001504:	69bb      	ldr	r3, [r7, #24]
 8001506:	009b      	lsls	r3, r3, #2
 8001508:	4413      	add	r3, r2
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	697a      	ldr	r2, [r7, #20]
 800150e:	4619      	mov	r1, r3
 8001510:	f009 fc82 	bl	800ae18 <memcpy>
      offset += length_stringsi;
 8001514:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001516:	697b      	ldr	r3, [r7, #20]
 8001518:	4413      	add	r3, r2
 800151a:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 800151c:	69bb      	ldr	r3, [r7, #24]
 800151e:	3301      	adds	r3, #1
 8001520:	61bb      	str	r3, [r7, #24]
 8001522:	e7d1      	b.n	80014c8 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x1bc>
      }
      return offset;
 8001524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8001526:	4618      	mov	r0, r3
 8001528:	3728      	adds	r7, #40	; 0x28
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}

0800152e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 800152e:	b580      	push	{r7, lr}
 8001530:	b08e      	sub	sp, #56	; 0x38
 8001532:	af00      	add	r7, sp, #0
 8001534:	6078      	str	r0, [r7, #4]
 8001536:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001538:	2300      	movs	r3, #0
 800153a:	637b      	str	r3, [r7, #52]	; 0x34
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 800153c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800153e:	683a      	ldr	r2, [r7, #0]
 8001540:	4413      	add	r3, r2
 8001542:	781b      	ldrb	r3, [r3, #0]
 8001544:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8001546:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001548:	3301      	adds	r3, #1
 800154a:	683a      	ldr	r2, [r7, #0]
 800154c:	4413      	add	r3, r2
 800154e:	781b      	ldrb	r3, [r3, #0]
 8001550:	021b      	lsls	r3, r3, #8
 8001552:	6a3a      	ldr	r2, [r7, #32]
 8001554:	4313      	orrs	r3, r2
 8001556:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8001558:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800155a:	3302      	adds	r3, #2
 800155c:	683a      	ldr	r2, [r7, #0]
 800155e:	4413      	add	r3, r2
 8001560:	781b      	ldrb	r3, [r3, #0]
 8001562:	041b      	lsls	r3, r3, #16
 8001564:	6a3a      	ldr	r2, [r7, #32]
 8001566:	4313      	orrs	r3, r2
 8001568:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 800156a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800156c:	3303      	adds	r3, #3
 800156e:	683a      	ldr	r2, [r7, #0]
 8001570:	4413      	add	r3, r2
 8001572:	781b      	ldrb	r3, [r3, #0]
 8001574:	061b      	lsls	r3, r3, #24
 8001576:	6a3a      	ldr	r2, [r7, #32]
 8001578:	4313      	orrs	r3, r2
 800157a:	623b      	str	r3, [r7, #32]
      offset += sizeof(this->ints_length);
 800157c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800157e:	3304      	adds	r3, #4
 8001580:	637b      	str	r3, [r7, #52]	; 0x34
      if(ints_lengthT > ints_length)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	685b      	ldr	r3, [r3, #4]
 8001586:	6a3a      	ldr	r2, [r7, #32]
 8001588:	429a      	cmp	r2, r3
 800158a:	d90a      	bls.n	80015a2 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x74>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	68da      	ldr	r2, [r3, #12]
 8001590:	6a3b      	ldr	r3, [r7, #32]
 8001592:	009b      	lsls	r3, r3, #2
 8001594:	4619      	mov	r1, r3
 8001596:	4610      	mov	r0, r2
 8001598:	f009 fd4e 	bl	800b038 <realloc>
 800159c:	4602      	mov	r2, r0
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	60da      	str	r2, [r3, #12]
      ints_length = ints_lengthT;
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	6a3a      	ldr	r2, [r7, #32]
 80015a6:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < ints_length; i++){
 80015a8:	2300      	movs	r3, #0
 80015aa:	633b      	str	r3, [r7, #48]	; 0x30
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	685b      	ldr	r3, [r3, #4]
 80015b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80015b2:	429a      	cmp	r2, r3
 80015b4:	d236      	bcs.n	8001624 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xf6>
      union {
        int32_t real;
        uint32_t base;
      } u_st_ints;
      u_st_ints.base = 0;
 80015b6:	2300      	movs	r3, #0
 80015b8:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80015ba:	697b      	ldr	r3, [r7, #20]
 80015bc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80015be:	6839      	ldr	r1, [r7, #0]
 80015c0:	440a      	add	r2, r1
 80015c2:	7812      	ldrb	r2, [r2, #0]
 80015c4:	4313      	orrs	r3, r2
 80015c6:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80015c8:	697a      	ldr	r2, [r7, #20]
 80015ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80015cc:	3301      	adds	r3, #1
 80015ce:	6839      	ldr	r1, [r7, #0]
 80015d0:	440b      	add	r3, r1
 80015d2:	781b      	ldrb	r3, [r3, #0]
 80015d4:	021b      	lsls	r3, r3, #8
 80015d6:	4313      	orrs	r3, r2
 80015d8:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80015da:	697a      	ldr	r2, [r7, #20]
 80015dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80015de:	3302      	adds	r3, #2
 80015e0:	6839      	ldr	r1, [r7, #0]
 80015e2:	440b      	add	r3, r1
 80015e4:	781b      	ldrb	r3, [r3, #0]
 80015e6:	041b      	lsls	r3, r3, #16
 80015e8:	4313      	orrs	r3, r2
 80015ea:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80015ec:	697a      	ldr	r2, [r7, #20]
 80015ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80015f0:	3303      	adds	r3, #3
 80015f2:	6839      	ldr	r1, [r7, #0]
 80015f4:	440b      	add	r3, r1
 80015f6:	781b      	ldrb	r3, [r3, #0]
 80015f8:	061b      	lsls	r3, r3, #24
 80015fa:	4313      	orrs	r3, r2
 80015fc:	617b      	str	r3, [r7, #20]
      this->st_ints = u_st_ints.real;
 80015fe:	697a      	ldr	r2, [r7, #20]
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->st_ints);
 8001604:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001606:	3304      	adds	r3, #4
 8001608:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	68da      	ldr	r2, [r3, #12]
 800160e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001610:	009b      	lsls	r3, r3, #2
 8001612:	4413      	add	r3, r2
 8001614:	687a      	ldr	r2, [r7, #4]
 8001616:	3208      	adds	r2, #8
 8001618:	6812      	ldr	r2, [r2, #0]
 800161a:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < ints_length; i++){
 800161c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800161e:	3301      	adds	r3, #1
 8001620:	633b      	str	r3, [r7, #48]	; 0x30
 8001622:	e7c3      	b.n	80015ac <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x7e>
      }
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8001624:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001626:	683a      	ldr	r2, [r7, #0]
 8001628:	4413      	add	r3, r2
 800162a:	781b      	ldrb	r3, [r3, #0]
 800162c:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 800162e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001630:	3301      	adds	r3, #1
 8001632:	683a      	ldr	r2, [r7, #0]
 8001634:	4413      	add	r3, r2
 8001636:	781b      	ldrb	r3, [r3, #0]
 8001638:	021b      	lsls	r3, r3, #8
 800163a:	69fa      	ldr	r2, [r7, #28]
 800163c:	4313      	orrs	r3, r2
 800163e:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8001640:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001642:	3302      	adds	r3, #2
 8001644:	683a      	ldr	r2, [r7, #0]
 8001646:	4413      	add	r3, r2
 8001648:	781b      	ldrb	r3, [r3, #0]
 800164a:	041b      	lsls	r3, r3, #16
 800164c:	69fa      	ldr	r2, [r7, #28]
 800164e:	4313      	orrs	r3, r2
 8001650:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8001652:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001654:	3303      	adds	r3, #3
 8001656:	683a      	ldr	r2, [r7, #0]
 8001658:	4413      	add	r3, r2
 800165a:	781b      	ldrb	r3, [r3, #0]
 800165c:	061b      	lsls	r3, r3, #24
 800165e:	69fa      	ldr	r2, [r7, #28]
 8001660:	4313      	orrs	r3, r2
 8001662:	61fb      	str	r3, [r7, #28]
      offset += sizeof(this->floats_length);
 8001664:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001666:	3304      	adds	r3, #4
 8001668:	637b      	str	r3, [r7, #52]	; 0x34
      if(floats_lengthT > floats_length)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	691b      	ldr	r3, [r3, #16]
 800166e:	69fa      	ldr	r2, [r7, #28]
 8001670:	429a      	cmp	r2, r3
 8001672:	d90a      	bls.n	800168a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x15c>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	699a      	ldr	r2, [r3, #24]
 8001678:	69fb      	ldr	r3, [r7, #28]
 800167a:	009b      	lsls	r3, r3, #2
 800167c:	4619      	mov	r1, r3
 800167e:	4610      	mov	r0, r2
 8001680:	f009 fcda 	bl	800b038 <realloc>
 8001684:	4602      	mov	r2, r0
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	619a      	str	r2, [r3, #24]
      floats_length = floats_lengthT;
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	69fa      	ldr	r2, [r7, #28]
 800168e:	611a      	str	r2, [r3, #16]
      for( uint32_t i = 0; i < floats_length; i++){
 8001690:	2300      	movs	r3, #0
 8001692:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	691b      	ldr	r3, [r3, #16]
 8001698:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800169a:	429a      	cmp	r2, r3
 800169c:	d236      	bcs.n	800170c <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1de>
      union {
        float real;
        uint32_t base;
      } u_st_floats;
      u_st_floats.base = 0;
 800169e:	2300      	movs	r3, #0
 80016a0:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80016a2:	693b      	ldr	r3, [r7, #16]
 80016a4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80016a6:	6839      	ldr	r1, [r7, #0]
 80016a8:	440a      	add	r2, r1
 80016aa:	7812      	ldrb	r2, [r2, #0]
 80016ac:	4313      	orrs	r3, r2
 80016ae:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80016b0:	693a      	ldr	r2, [r7, #16]
 80016b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80016b4:	3301      	adds	r3, #1
 80016b6:	6839      	ldr	r1, [r7, #0]
 80016b8:	440b      	add	r3, r1
 80016ba:	781b      	ldrb	r3, [r3, #0]
 80016bc:	021b      	lsls	r3, r3, #8
 80016be:	4313      	orrs	r3, r2
 80016c0:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80016c2:	693a      	ldr	r2, [r7, #16]
 80016c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80016c6:	3302      	adds	r3, #2
 80016c8:	6839      	ldr	r1, [r7, #0]
 80016ca:	440b      	add	r3, r1
 80016cc:	781b      	ldrb	r3, [r3, #0]
 80016ce:	041b      	lsls	r3, r3, #16
 80016d0:	4313      	orrs	r3, r2
 80016d2:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80016d4:	693a      	ldr	r2, [r7, #16]
 80016d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80016d8:	3303      	adds	r3, #3
 80016da:	6839      	ldr	r1, [r7, #0]
 80016dc:	440b      	add	r3, r1
 80016de:	781b      	ldrb	r3, [r3, #0]
 80016e0:	061b      	lsls	r3, r3, #24
 80016e2:	4313      	orrs	r3, r2
 80016e4:	613b      	str	r3, [r7, #16]
      this->st_floats = u_st_floats.real;
 80016e6:	693a      	ldr	r2, [r7, #16]
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->st_floats);
 80016ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80016ee:	3304      	adds	r3, #4
 80016f0:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	699a      	ldr	r2, [r3, #24]
 80016f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016f8:	009b      	lsls	r3, r3, #2
 80016fa:	4413      	add	r3, r2
 80016fc:	687a      	ldr	r2, [r7, #4]
 80016fe:	3214      	adds	r2, #20
 8001700:	6812      	ldr	r2, [r2, #0]
 8001702:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < floats_length; i++){
 8001704:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001706:	3301      	adds	r3, #1
 8001708:	62fb      	str	r3, [r7, #44]	; 0x2c
 800170a:	e7c3      	b.n	8001694 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x166>
      }
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 800170c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800170e:	683a      	ldr	r2, [r7, #0]
 8001710:	4413      	add	r3, r2
 8001712:	781b      	ldrb	r3, [r3, #0]
 8001714:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8001716:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001718:	3301      	adds	r3, #1
 800171a:	683a      	ldr	r2, [r7, #0]
 800171c:	4413      	add	r3, r2
 800171e:	781b      	ldrb	r3, [r3, #0]
 8001720:	021b      	lsls	r3, r3, #8
 8001722:	69ba      	ldr	r2, [r7, #24]
 8001724:	4313      	orrs	r3, r2
 8001726:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8001728:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800172a:	3302      	adds	r3, #2
 800172c:	683a      	ldr	r2, [r7, #0]
 800172e:	4413      	add	r3, r2
 8001730:	781b      	ldrb	r3, [r3, #0]
 8001732:	041b      	lsls	r3, r3, #16
 8001734:	69ba      	ldr	r2, [r7, #24]
 8001736:	4313      	orrs	r3, r2
 8001738:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 800173a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800173c:	3303      	adds	r3, #3
 800173e:	683a      	ldr	r2, [r7, #0]
 8001740:	4413      	add	r3, r2
 8001742:	781b      	ldrb	r3, [r3, #0]
 8001744:	061b      	lsls	r3, r3, #24
 8001746:	69ba      	ldr	r2, [r7, #24]
 8001748:	4313      	orrs	r3, r2
 800174a:	61bb      	str	r3, [r7, #24]
      offset += sizeof(this->strings_length);
 800174c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800174e:	3304      	adds	r3, #4
 8001750:	637b      	str	r3, [r7, #52]	; 0x34
      if(strings_lengthT > strings_length)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	69db      	ldr	r3, [r3, #28]
 8001756:	69ba      	ldr	r2, [r7, #24]
 8001758:	429a      	cmp	r2, r3
 800175a:	d90a      	bls.n	8001772 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x244>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001760:	69bb      	ldr	r3, [r7, #24]
 8001762:	009b      	lsls	r3, r3, #2
 8001764:	4619      	mov	r1, r3
 8001766:	4610      	mov	r0, r2
 8001768:	f009 fc66 	bl	800b038 <realloc>
 800176c:	4602      	mov	r2, r0
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	625a      	str	r2, [r3, #36]	; 0x24
      strings_length = strings_lengthT;
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	69ba      	ldr	r2, [r7, #24]
 8001776:	61da      	str	r2, [r3, #28]
      for( uint32_t i = 0; i < strings_length; i++){
 8001778:	2300      	movs	r3, #0
 800177a:	62bb      	str	r3, [r7, #40]	; 0x28
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	69db      	ldr	r3, [r3, #28]
 8001780:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001782:	429a      	cmp	r2, r3
 8001784:	d23f      	bcs.n	8001806 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x2d8>
      uint32_t length_st_strings;
      arrToVar(length_st_strings, (inbuffer + offset));
 8001786:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001788:	683a      	ldr	r2, [r7, #0]
 800178a:	441a      	add	r2, r3
 800178c:	f107 030c 	add.w	r3, r7, #12
 8001790:	4611      	mov	r1, r2
 8001792:	4618      	mov	r0, r3
 8001794:	f001 f923 	bl	80029de <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001798:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800179a:	3304      	adds	r3, #4
 800179c:	637b      	str	r3, [r7, #52]	; 0x34
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 800179e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80017a0:	627b      	str	r3, [r7, #36]	; 0x24
 80017a2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	4413      	add	r3, r2
 80017a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80017aa:	429a      	cmp	r2, r3
 80017ac:	d20c      	bcs.n	80017c8 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x29a>
          inbuffer[k-1]=inbuffer[k];
 80017ae:	683a      	ldr	r2, [r7, #0]
 80017b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017b2:	441a      	add	r2, r3
 80017b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017b6:	3b01      	subs	r3, #1
 80017b8:	6839      	ldr	r1, [r7, #0]
 80017ba:	440b      	add	r3, r1
 80017bc:	7812      	ldrb	r2, [r2, #0]
 80017be:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 80017c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017c2:	3301      	adds	r3, #1
 80017c4:	627b      	str	r3, [r7, #36]	; 0x24
 80017c6:	e7ec      	b.n	80017a2 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x274>
      }
      inbuffer[offset+length_st_strings-1]=0;
 80017c8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	4413      	add	r3, r2
 80017ce:	3b01      	subs	r3, #1
 80017d0:	683a      	ldr	r2, [r7, #0]
 80017d2:	4413      	add	r3, r2
 80017d4:	2200      	movs	r2, #0
 80017d6:	701a      	strb	r2, [r3, #0]
      this->st_strings = (char *)(inbuffer + offset-1);
 80017d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80017da:	3b01      	subs	r3, #1
 80017dc:	683a      	ldr	r2, [r7, #0]
 80017de:	441a      	add	r2, r3
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	621a      	str	r2, [r3, #32]
      offset += length_st_strings;
 80017e4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	4413      	add	r3, r2
 80017ea:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80017f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017f2:	009b      	lsls	r3, r3, #2
 80017f4:	4413      	add	r3, r2
 80017f6:	687a      	ldr	r2, [r7, #4]
 80017f8:	3220      	adds	r2, #32
 80017fa:	6812      	ldr	r2, [r2, #0]
 80017fc:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < strings_length; i++){
 80017fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001800:	3301      	adds	r3, #1
 8001802:	62bb      	str	r3, [r7, #40]	; 0x28
 8001804:	e7ba      	b.n	800177c <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x24e>
      }
     return offset;
 8001806:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 8001808:	4618      	mov	r0, r3
 800180a:	3738      	adds	r7, #56	; 0x38
 800180c:	46bd      	mov	sp, r7
 800180e:	bd80      	pop	{r7, pc}

08001810 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv>:

    const char * getType(){ return REQUESTPARAM; };
 8001810:	b480      	push	{r7}
 8001812:	b083      	sub	sp, #12
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
 8001818:	4b03      	ldr	r3, [pc, #12]	; (8001828 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv+0x18>)
 800181a:	4618      	mov	r0, r3
 800181c:	370c      	adds	r7, #12
 800181e:	46bd      	mov	sp, r7
 8001820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001824:	4770      	bx	lr
 8001826:	bf00      	nop
 8001828:	0800b464 	.word	0x0800b464

0800182c <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev>:
    const char * getMD5(){ return "9f0e98bda65981986ddf53afa7a40e49"; };
 800182c:	b480      	push	{r7}
 800182e:	b083      	sub	sp, #12
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
 8001834:	4b03      	ldr	r3, [pc, #12]	; (8001844 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev+0x18>)
 8001836:	4618      	mov	r0, r3
 8001838:	370c      	adds	r7, #12
 800183a:	46bd      	mov	sp, r7
 800183c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001840:	4770      	bx	lr
 8001842:	bf00      	nop
 8001844:	0800b314 	.word	0x0800b314

08001848 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>:

/* Generic Publisher */
class Publisher
{
public:
  Publisher(const char * topic_name, Msg * msg, int endpoint = rosserial_msgs::TopicInfo::ID_PUBLISHER) :
 8001848:	b480      	push	{r7}
 800184a:	b085      	sub	sp, #20
 800184c:	af00      	add	r7, sp, #0
 800184e:	60f8      	str	r0, [r7, #12]
 8001850:	60b9      	str	r1, [r7, #8]
 8001852:	607a      	str	r2, [r7, #4]
 8001854:	603b      	str	r3, [r7, #0]
    topic_(topic_name),
    msg_(msg),
    endpoint_(endpoint) {};
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	68ba      	ldr	r2, [r7, #8]
 800185a:	601a      	str	r2, [r3, #0]
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	687a      	ldr	r2, [r7, #4]
 8001860:	605a      	str	r2, [r3, #4]
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	683a      	ldr	r2, [r7, #0]
 8001866:	611a      	str	r2, [r3, #16]
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	4618      	mov	r0, r3
 800186c:	3714      	adds	r7, #20
 800186e:	46bd      	mov	sp, r7
 8001870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001874:	4770      	bx	lr

08001876 <_ZN3ros9Publisher7publishEPKNS_3MsgE>:

  int publish(const Msg * msg)
 8001876:	b580      	push	{r7, lr}
 8001878:	b082      	sub	sp, #8
 800187a:	af00      	add	r7, sp, #0
 800187c:	6078      	str	r0, [r7, #4]
 800187e:	6039      	str	r1, [r7, #0]
  {
    return nh_->publish(id_, msg);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	68d8      	ldr	r0, [r3, #12]
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	68db      	ldr	r3, [r3, #12]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	687a      	ldr	r2, [r7, #4]
 800188e:	6891      	ldr	r1, [r2, #8]
 8001890:	683a      	ldr	r2, [r7, #0]
 8001892:	4798      	blx	r3
 8001894:	4603      	mov	r3, r0
  };
 8001896:	4618      	mov	r0, r3
 8001898:	3708      	adds	r7, #8
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}

0800189e <_ZN3ros9Publisher15getEndpointTypeEv>:
  int getEndpointType()
 800189e:	b480      	push	{r7}
 80018a0:	b083      	sub	sp, #12
 80018a2:	af00      	add	r7, sp, #0
 80018a4:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	691b      	ldr	r3, [r3, #16]
  }
 80018aa:	4618      	mov	r0, r3
 80018ac:	370c      	adds	r7, #12
 80018ae:	46bd      	mov	sp, r7
 80018b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b4:	4770      	bx	lr

080018b6 <_ZN13STM32Hardware10getRdmaIndEv>:
    UART_HandleTypeDef *huart;

    const static uint16_t rbuflen = 512;
    uint8_t rbuf[rbuflen];
    uint32_t rind;
    inline uint32_t getRdmaInd(void){ return (rbuflen - __HAL_DMA_GET_COUNTER(huart->hdmarx)) & (rbuflen - 1); }
 80018b6:	b480      	push	{r7}
 80018b8:	b083      	sub	sp, #12
 80018ba:	af00      	add	r7, sp, #0
 80018bc:	6078      	str	r0, [r7, #4]
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	685b      	ldr	r3, [r3, #4]
 80018c8:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80018cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80018d0:	4618      	mov	r0, r3
 80018d2:	370c      	adds	r7, #12
 80018d4:	46bd      	mov	sp, r7
 80018d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018da:	4770      	bx	lr

080018dc <_ZN13STM32HardwareC1Ev>:
    const static uint16_t tbuflen = 512;
    uint8_t tbuf[tbuflen];
    uint32_t twind, tfind;

  public:
    STM32Hardware():
 80018dc:	b480      	push	{r7}
 80018de:	b083      	sub	sp, #12
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
      huart(&huart2), rind(0), twind(0), tfind(0){
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	4a0a      	ldr	r2, [pc, #40]	; (8001910 <_ZN13STM32HardwareC1Ev+0x34>)
 80018e8:	601a      	str	r2, [r3, #0]
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	2200      	movs	r2, #0
 80018ee:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	2200      	movs	r2, #0
 80018f6:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	2200      	movs	r2, #0
 80018fe:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
    }
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	4618      	mov	r0, r3
 8001906:	370c      	adds	r7, #12
 8001908:	46bd      	mov	sp, r7
 800190a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190e:	4770      	bx	lr
 8001910:	20000188 	.word	0x20000188

08001914 <_ZN13STM32Hardware4initEv>:

    STM32Hardware(UART_HandleTypeDef *huart_):
      huart(huart_), rind(0), twind(0), tfind(0){
    }
  
    void init(){
 8001914:	b580      	push	{r7, lr}
 8001916:	b082      	sub	sp, #8
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
      reset_rbuf();
 800191c:	6878      	ldr	r0, [r7, #4]
 800191e:	f000 f804 	bl	800192a <_ZN13STM32Hardware10reset_rbufEv>
    }
 8001922:	bf00      	nop
 8001924:	3708      	adds	r7, #8
 8001926:	46bd      	mov	sp, r7
 8001928:	bd80      	pop	{r7, pc}

0800192a <_ZN13STM32Hardware10reset_rbufEv>:

    void reset_rbuf(void){
 800192a:	b580      	push	{r7, lr}
 800192c:	b082      	sub	sp, #8
 800192e:	af00      	add	r7, sp, #0
 8001930:	6078      	str	r0, [r7, #4]
      HAL_UART_Receive_DMA(huart, rbuf, rbuflen);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	6818      	ldr	r0, [r3, #0]
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	3304      	adds	r3, #4
 800193a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800193e:	4619      	mov	r1, r3
 8001940:	f005 f9a6 	bl	8006c90 <HAL_UART_Receive_DMA>
    }
 8001944:	bf00      	nop
 8001946:	3708      	adds	r7, #8
 8001948:	46bd      	mov	sp, r7
 800194a:	bd80      	pop	{r7, pc}

0800194c <_ZN13STM32Hardware4readEv>:

    int read(){
 800194c:	b590      	push	{r4, r7, lr}
 800194e:	b085      	sub	sp, #20
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
      int c = -1;
 8001954:	f04f 33ff 	mov.w	r3, #4294967295
 8001958:	60fb      	str	r3, [r7, #12]
      if(rind != getRdmaInd()){
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	f8d3 4204 	ldr.w	r4, [r3, #516]	; 0x204
 8001960:	6878      	ldr	r0, [r7, #4]
 8001962:	f7ff ffa8 	bl	80018b6 <_ZN13STM32Hardware10getRdmaIndEv>
 8001966:	4603      	mov	r3, r0
 8001968:	429c      	cmp	r4, r3
 800196a:	bf14      	ite	ne
 800196c:	2301      	movne	r3, #1
 800196e:	2300      	moveq	r3, #0
 8001970:	b2db      	uxtb	r3, r3
 8001972:	2b00      	cmp	r3, #0
 8001974:	d012      	beq.n	800199c <_ZN13STM32Hardware4readEv+0x50>
        c = rbuf[rind++];
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800197c:	1c59      	adds	r1, r3, #1
 800197e:	687a      	ldr	r2, [r7, #4]
 8001980:	f8c2 1204 	str.w	r1, [r2, #516]	; 0x204
 8001984:	687a      	ldr	r2, [r7, #4]
 8001986:	4413      	add	r3, r2
 8001988:	791b      	ldrb	r3, [r3, #4]
 800198a:	60fb      	str	r3, [r7, #12]
        rind &= rbuflen - 1;
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001992:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
      }
      return c;
 800199c:	68fb      	ldr	r3, [r7, #12]
    }
 800199e:	4618      	mov	r0, r3
 80019a0:	3714      	adds	r7, #20
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd90      	pop	{r4, r7, pc}
	...

080019a8 <_ZN13STM32Hardware5flushEv>:

    void flush(void){
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b084      	sub	sp, #16
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
      static bool mutex = false;

      if((huart->gState == HAL_UART_STATE_READY) && !mutex){
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80019b8:	b2db      	uxtb	r3, r3
 80019ba:	2b20      	cmp	r3, #32
 80019bc:	d108      	bne.n	80019d0 <_ZN13STM32Hardware5flushEv+0x28>
 80019be:	4b33      	ldr	r3, [pc, #204]	; (8001a8c <_ZN13STM32Hardware5flushEv+0xe4>)
 80019c0:	781b      	ldrb	r3, [r3, #0]
 80019c2:	f083 0301 	eor.w	r3, r3, #1
 80019c6:	b2db      	uxtb	r3, r3
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d001      	beq.n	80019d0 <_ZN13STM32Hardware5flushEv+0x28>
 80019cc:	2301      	movs	r3, #1
 80019ce:	e000      	b.n	80019d2 <_ZN13STM32Hardware5flushEv+0x2a>
 80019d0:	2300      	movs	r3, #0
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d055      	beq.n	8001a82 <_ZN13STM32Hardware5flushEv+0xda>
        mutex = true;
 80019d6:	4b2d      	ldr	r3, [pc, #180]	; (8001a8c <_ZN13STM32Hardware5flushEv+0xe4>)
 80019d8:	2201      	movs	r2, #1
 80019da:	701a      	strb	r2, [r3, #0]

        if(twind != tfind){
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80019e8:	429a      	cmp	r2, r3
 80019ea:	d047      	beq.n	8001a7c <_ZN13STM32Hardware5flushEv+0xd4>
          uint16_t len = 0;
 80019ec:	2300      	movs	r3, #0
 80019ee:	81fb      	strh	r3, [r7, #14]
		  if(tfind < twind){
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 80019fc:	429a      	cmp	r2, r3
 80019fe:	d217      	bcs.n	8001a30 <_ZN13STM32Hardware5flushEv+0x88>
			len = twind - tfind;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8001a06:	b29a      	uxth	r2, r3
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8001a0e:	b29b      	uxth	r3, r3
 8001a10:	1ad3      	subs	r3, r2, r3
 8001a12:	81fb      	strh	r3, [r7, #14]
			HAL_UART_Transmit_DMA(huart, &(tbuf[tfind]), len);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	6818      	ldr	r0, [r3, #0]
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8001a1e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001a22:	687a      	ldr	r2, [r7, #4]
 8001a24:	4413      	add	r3, r2
 8001a26:	89fa      	ldrh	r2, [r7, #14]
 8001a28:	4619      	mov	r1, r3
 8001a2a:	f005 f8b3 	bl	8006b94 <HAL_UART_Transmit_DMA>
 8001a2e:	e01f      	b.n	8001a70 <_ZN13STM32Hardware5flushEv+0xc8>
		  }else{
			len = tbuflen - tfind;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8001a36:	b29b      	uxth	r3, r3
 8001a38:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8001a3c:	81fb      	strh	r3, [r7, #14]
			HAL_UART_Transmit_DMA(huart, &(tbuf[tfind]), len);
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	6818      	ldr	r0, [r3, #0]
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8001a48:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001a4c:	687a      	ldr	r2, [r7, #4]
 8001a4e:	4413      	add	r3, r2
 8001a50:	89fa      	ldrh	r2, [r7, #14]
 8001a52:	4619      	mov	r1, r3
 8001a54:	f005 f89e 	bl	8006b94 <HAL_UART_Transmit_DMA>
			HAL_UART_Transmit_DMA(huart, (tbuf), twind);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	6818      	ldr	r0, [r3, #0]
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	f503 7102 	add.w	r1, r3, #520	; 0x208
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8001a68:	b29b      	uxth	r3, r3
 8001a6a:	461a      	mov	r2, r3
 8001a6c:	f005 f892 	bl	8006b94 <HAL_UART_Transmit_DMA>
		  }
          tfind = twind;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
        }
        mutex = false;
 8001a7c:	4b03      	ldr	r3, [pc, #12]	; (8001a8c <_ZN13STM32Hardware5flushEv+0xe4>)
 8001a7e:	2200      	movs	r2, #0
 8001a80:	701a      	strb	r2, [r3, #0]
      }
    }
 8001a82:	bf00      	nop
 8001a84:	3710      	adds	r7, #16
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd80      	pop	{r7, pc}
 8001a8a:	bf00      	nop
 8001a8c:	20000094 	.word	0x20000094

08001a90 <_ZN13STM32Hardware5writeEPhi>:

    void write(uint8_t* data, int length){
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b086      	sub	sp, #24
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	60f8      	str	r0, [r7, #12]
 8001a98:	60b9      	str	r1, [r7, #8]
 8001a9a:	607a      	str	r2, [r7, #4]
      long unsigned int n = length;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	617b      	str	r3, [r7, #20]
      n = n <= tbuflen ? n : tbuflen;
 8001aa0:	697b      	ldr	r3, [r7, #20]
 8001aa2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001aa6:	bf28      	it	cs
 8001aa8:	f44f 7300 	movcs.w	r3, #512	; 0x200
 8001aac:	617b      	str	r3, [r7, #20]

      long unsigned int n_tail = n <= tbuflen - twind ? n : tbuflen - twind;
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8001ab4:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8001ab8:	697a      	ldr	r2, [r7, #20]
 8001aba:	4293      	cmp	r3, r2
 8001abc:	bf28      	it	cs
 8001abe:	4613      	movcs	r3, r2
 8001ac0:	613b      	str	r3, [r7, #16]
      memcpy(&(tbuf[twind]), data, n_tail);
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8001ac8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001acc:	68fa      	ldr	r2, [r7, #12]
 8001ace:	4413      	add	r3, r2
 8001ad0:	693a      	ldr	r2, [r7, #16]
 8001ad2:	68b9      	ldr	r1, [r7, #8]
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	f009 f99f 	bl	800ae18 <memcpy>
      twind = (twind + n) & (tbuflen - 1);
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8001ae0:	697b      	ldr	r3, [r7, #20]
 8001ae2:	4413      	add	r3, r2
 8001ae4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

      if(n != n_tail){
 8001aee:	697a      	ldr	r2, [r7, #20]
 8001af0:	693b      	ldr	r3, [r7, #16]
 8001af2:	429a      	cmp	r2, r3
 8001af4:	d00b      	beq.n	8001b0e <_ZN13STM32Hardware5writeEPhi+0x7e>
        memcpy(tbuf, &(data[n_tail]), n - n_tail);
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	f503 7002 	add.w	r0, r3, #520	; 0x208
 8001afc:	68ba      	ldr	r2, [r7, #8]
 8001afe:	693b      	ldr	r3, [r7, #16]
 8001b00:	18d1      	adds	r1, r2, r3
 8001b02:	697a      	ldr	r2, [r7, #20]
 8001b04:	693b      	ldr	r3, [r7, #16]
 8001b06:	1ad3      	subs	r3, r2, r3
 8001b08:	461a      	mov	r2, r3
 8001b0a:	f009 f985 	bl	800ae18 <memcpy>
      }

      flush();
 8001b0e:	68f8      	ldr	r0, [r7, #12]
 8001b10:	f7ff ff4a 	bl	80019a8 <_ZN13STM32Hardware5flushEv>
    }
 8001b14:	bf00      	nop
 8001b16:	3718      	adds	r7, #24
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	bd80      	pop	{r7, pc}

08001b1c <_ZN13STM32Hardware4timeEv>:

    unsigned long time(){ return HAL_GetTick();; }
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b082      	sub	sp, #8
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
 8001b24:	f002 f8e8 	bl	8003cf8 <HAL_GetTick>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	3708      	adds	r7, #8
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bd80      	pop	{r7, pc}
	...

08001b34 <_ZN8std_msgs6StringC1Ev>:
  {
    public:
      typedef const char* _data_type;
      _data_type data;

    String():
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b082      	sub	sp, #8
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
      data("")
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	4618      	mov	r0, r3
 8001b40:	f7ff f84c 	bl	8000bdc <_ZN3ros3MsgC1Ev>
 8001b44:	4a05      	ldr	r2, [pc, #20]	; (8001b5c <_ZN8std_msgs6StringC1Ev+0x28>)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	601a      	str	r2, [r3, #0]
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	4a04      	ldr	r2, [pc, #16]	; (8001b60 <_ZN8std_msgs6StringC1Ev+0x2c>)
 8001b4e:	605a      	str	r2, [r3, #4]
    {
    }
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	4618      	mov	r0, r3
 8001b54:	3708      	adds	r7, #8
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bd80      	pop	{r7, pc}
 8001b5a:	bf00      	nop
 8001b5c:	0800b5f8 	.word	0x0800b5f8
 8001b60:	0800b298 	.word	0x0800b298

08001b64 <_ZNK8std_msgs6String9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b084      	sub	sp, #16
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
 8001b6c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	60fb      	str	r3, [r7, #12]
      uint32_t length_data = strlen(this->data);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	685b      	ldr	r3, [r3, #4]
 8001b76:	4618      	mov	r0, r3
 8001b78:	f7fe fb32 	bl	80001e0 <strlen>
 8001b7c:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_data);
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	683a      	ldr	r2, [r7, #0]
 8001b82:	4413      	add	r3, r2
 8001b84:	68b9      	ldr	r1, [r7, #8]
 8001b86:	4618      	mov	r0, r3
 8001b88:	f000 ff0b 	bl	80029a2 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	3304      	adds	r3, #4
 8001b90:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->data, length_data);
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	683a      	ldr	r2, [r7, #0]
 8001b96:	18d0      	adds	r0, r2, r3
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	685b      	ldr	r3, [r3, #4]
 8001b9c:	68ba      	ldr	r2, [r7, #8]
 8001b9e:	4619      	mov	r1, r3
 8001ba0:	f009 f93a 	bl	800ae18 <memcpy>
      offset += length_data;
 8001ba4:	68fa      	ldr	r2, [r7, #12]
 8001ba6:	68bb      	ldr	r3, [r7, #8]
 8001ba8:	4413      	add	r3, r2
 8001baa:	60fb      	str	r3, [r7, #12]
      return offset;
 8001bac:	68fb      	ldr	r3, [r7, #12]
    }
 8001bae:	4618      	mov	r0, r3
 8001bb0:	3710      	adds	r7, #16
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bd80      	pop	{r7, pc}

08001bb6 <_ZN8std_msgs6String11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8001bb6:	b580      	push	{r7, lr}
 8001bb8:	b086      	sub	sp, #24
 8001bba:	af00      	add	r7, sp, #0
 8001bbc:	6078      	str	r0, [r7, #4]
 8001bbe:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	613b      	str	r3, [r7, #16]
      uint32_t length_data;
      arrToVar(length_data, (inbuffer + offset));
 8001bc4:	693b      	ldr	r3, [r7, #16]
 8001bc6:	683a      	ldr	r2, [r7, #0]
 8001bc8:	441a      	add	r2, r3
 8001bca:	f107 030c 	add.w	r3, r7, #12
 8001bce:	4611      	mov	r1, r2
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	f000 ff04 	bl	80029de <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001bd6:	693b      	ldr	r3, [r7, #16]
 8001bd8:	3304      	adds	r3, #4
 8001bda:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_data; ++k){
 8001bdc:	693b      	ldr	r3, [r7, #16]
 8001bde:	617b      	str	r3, [r7, #20]
 8001be0:	693a      	ldr	r2, [r7, #16]
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	4413      	add	r3, r2
 8001be6:	697a      	ldr	r2, [r7, #20]
 8001be8:	429a      	cmp	r2, r3
 8001bea:	d20c      	bcs.n	8001c06 <_ZN8std_msgs6String11deserializeEPh+0x50>
          inbuffer[k-1]=inbuffer[k];
 8001bec:	683a      	ldr	r2, [r7, #0]
 8001bee:	697b      	ldr	r3, [r7, #20]
 8001bf0:	441a      	add	r2, r3
 8001bf2:	697b      	ldr	r3, [r7, #20]
 8001bf4:	3b01      	subs	r3, #1
 8001bf6:	6839      	ldr	r1, [r7, #0]
 8001bf8:	440b      	add	r3, r1
 8001bfa:	7812      	ldrb	r2, [r2, #0]
 8001bfc:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_data; ++k){
 8001bfe:	697b      	ldr	r3, [r7, #20]
 8001c00:	3301      	adds	r3, #1
 8001c02:	617b      	str	r3, [r7, #20]
 8001c04:	e7ec      	b.n	8001be0 <_ZN8std_msgs6String11deserializeEPh+0x2a>
      }
      inbuffer[offset+length_data-1]=0;
 8001c06:	693a      	ldr	r2, [r7, #16]
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	4413      	add	r3, r2
 8001c0c:	3b01      	subs	r3, #1
 8001c0e:	683a      	ldr	r2, [r7, #0]
 8001c10:	4413      	add	r3, r2
 8001c12:	2200      	movs	r2, #0
 8001c14:	701a      	strb	r2, [r3, #0]
      this->data = (char *)(inbuffer + offset-1);
 8001c16:	693b      	ldr	r3, [r7, #16]
 8001c18:	3b01      	subs	r3, #1
 8001c1a:	683a      	ldr	r2, [r7, #0]
 8001c1c:	441a      	add	r2, r3
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	605a      	str	r2, [r3, #4]
      offset += length_data;
 8001c22:	693a      	ldr	r2, [r7, #16]
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	4413      	add	r3, r2
 8001c28:	613b      	str	r3, [r7, #16]
     return offset;
 8001c2a:	693b      	ldr	r3, [r7, #16]
    }
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	3718      	adds	r7, #24
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bd80      	pop	{r7, pc}

08001c34 <_ZN8std_msgs6String7getTypeEv>:

    const char * getType(){ return "std_msgs/String"; };
 8001c34:	b480      	push	{r7}
 8001c36:	b083      	sub	sp, #12
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
 8001c3c:	4b03      	ldr	r3, [pc, #12]	; (8001c4c <_ZN8std_msgs6String7getTypeEv+0x18>)
 8001c3e:	4618      	mov	r0, r3
 8001c40:	370c      	adds	r7, #12
 8001c42:	46bd      	mov	sp, r7
 8001c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c48:	4770      	bx	lr
 8001c4a:	bf00      	nop
 8001c4c:	0800b338 	.word	0x0800b338

08001c50 <_ZN8std_msgs6String6getMD5Ev>:
    const char * getMD5(){ return "992ce8a1687cec8c8bd883ec73ca41d1"; };
 8001c50:	b480      	push	{r7}
 8001c52:	b083      	sub	sp, #12
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
 8001c58:	4b03      	ldr	r3, [pc, #12]	; (8001c68 <_ZN8std_msgs6String6getMD5Ev+0x18>)
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	370c      	adds	r7, #12
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c64:	4770      	bx	lr
 8001c66:	bf00      	nop
 8001c68:	0800b348 	.word	0x0800b348

08001c6c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001c70:	f002 f80c 	bl	8003c8c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001c74:	f000 f8a2 	bl	8001dbc <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001c78:	f000 fa82 	bl	8002180 <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 8001c7c:	f000 fa42 	bl	8002104 <_ZL11MX_DMA_Initv>
  MX_ADC1_Init();
 8001c80:	f000 f906 	bl	8001e90 <_ZL12MX_ADC1_Initv>
  MX_TIM2_Init();
 8001c84:	f000 f972 	bl	8001f6c <_ZL12MX_TIM2_Initv>
  MX_USART2_UART_Init();
 8001c88:	f000 fa0e 	bl	80020a8 <_ZL19MX_USART2_UART_Initv>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8001c8c:	2100      	movs	r1, #0
 8001c8e:	482f      	ldr	r0, [pc, #188]	; (8001d4c <main+0xe0>)
 8001c90:	f004 f87a 	bl	8005d88 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8001c94:	2104      	movs	r1, #4
 8001c96:	482d      	ldr	r0, [pc, #180]	; (8001d4c <main+0xe0>)
 8001c98:	f004 f876 	bl	8005d88 <HAL_TIM_PWM_Start>
  setup();
 8001c9c:	f000 fbee 	bl	800247c <_Z5setupv>
  TIM2->CCR1 = 60;
 8001ca0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001ca4:	223c      	movs	r2, #60	; 0x3c
 8001ca6:	635a      	str	r2, [r3, #52]	; 0x34
  TIM2->CCR2 = 60;
 8001ca8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001cac:	223c      	movs	r2, #60	; 0x3c
 8001cae:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001cb0:	f006 f942 	bl	8007f38 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of TaskADC */
  TaskADCHandle = osThreadNew(StartTaskADC, NULL, &TaskADC_attributes);
 8001cb4:	4a26      	ldr	r2, [pc, #152]	; (8001d50 <main+0xe4>)
 8001cb6:	2100      	movs	r1, #0
 8001cb8:	4826      	ldr	r0, [pc, #152]	; (8001d54 <main+0xe8>)
 8001cba:	f006 f987 	bl	8007fcc <osThreadNew>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	4a25      	ldr	r2, [pc, #148]	; (8001d58 <main+0xec>)
 8001cc2:	6013      	str	r3, [r2, #0]

  /* creation of GripperOpenTask */
  GripperOpenTaskHandle = osThreadNew(StartGripperOpenTask, NULL, &GripperOpenTask_attributes);
 8001cc4:	4a25      	ldr	r2, [pc, #148]	; (8001d5c <main+0xf0>)
 8001cc6:	2100      	movs	r1, #0
 8001cc8:	4825      	ldr	r0, [pc, #148]	; (8001d60 <main+0xf4>)
 8001cca:	f006 f97f 	bl	8007fcc <osThreadNew>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	4a24      	ldr	r2, [pc, #144]	; (8001d64 <main+0xf8>)
 8001cd2:	6013      	str	r3, [r2, #0]

  /* creation of GripperClose */
  GripperCloseHandle = osThreadNew(StartGripperCloseTask, NULL, &GripperClose_attributes);
 8001cd4:	4a24      	ldr	r2, [pc, #144]	; (8001d68 <main+0xfc>)
 8001cd6:	2100      	movs	r1, #0
 8001cd8:	4824      	ldr	r0, [pc, #144]	; (8001d6c <main+0x100>)
 8001cda:	f006 f977 	bl	8007fcc <osThreadNew>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	4a23      	ldr	r2, [pc, #140]	; (8001d70 <main+0x104>)
 8001ce2:	6013      	str	r3, [r2, #0]

  /* creation of GripperGoToTask */
  GripperGoToTaskHandle = osThreadNew(StartGripperGoToTask, NULL, &GripperGoToTask_attributes);
 8001ce4:	4a23      	ldr	r2, [pc, #140]	; (8001d74 <main+0x108>)
 8001ce6:	2100      	movs	r1, #0
 8001ce8:	4823      	ldr	r0, [pc, #140]	; (8001d78 <main+0x10c>)
 8001cea:	f006 f96f 	bl	8007fcc <osThreadNew>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	4a22      	ldr	r2, [pc, #136]	; (8001d7c <main+0x110>)
 8001cf2:	6013      	str	r3, [r2, #0]

  /* creation of TaskRosserial */
  TaskRosserialHandle = osThreadNew(StartTaskRosserial, NULL, &TaskRosserial_attributes);
 8001cf4:	4a22      	ldr	r2, [pc, #136]	; (8001d80 <main+0x114>)
 8001cf6:	2100      	movs	r1, #0
 8001cf8:	4822      	ldr	r0, [pc, #136]	; (8001d84 <main+0x118>)
 8001cfa:	f006 f967 	bl	8007fcc <osThreadNew>
 8001cfe:	4603      	mov	r3, r0
 8001d00:	4a21      	ldr	r2, [pc, #132]	; (8001d88 <main+0x11c>)
 8001d02:	6013      	str	r3, [r2, #0]

  /* creation of ButtonTask */
  ButtonTaskHandle = osThreadNew(StartButtonTask, NULL, &ButtonTask_attributes);
 8001d04:	4a21      	ldr	r2, [pc, #132]	; (8001d8c <main+0x120>)
 8001d06:	2100      	movs	r1, #0
 8001d08:	4821      	ldr	r0, [pc, #132]	; (8001d90 <main+0x124>)
 8001d0a:	f006 f95f 	bl	8007fcc <osThreadNew>
 8001d0e:	4603      	mov	r3, r0
 8001d10:	4a20      	ldr	r2, [pc, #128]	; (8001d94 <main+0x128>)
 8001d12:	6013      	str	r3, [r2, #0]

  /* creation of ArtUpTask */
  ArtUpTaskHandle = osThreadNew(StartArtUpTask, NULL, &ArtUpTask_attributes);
 8001d14:	4a20      	ldr	r2, [pc, #128]	; (8001d98 <main+0x12c>)
 8001d16:	2100      	movs	r1, #0
 8001d18:	4820      	ldr	r0, [pc, #128]	; (8001d9c <main+0x130>)
 8001d1a:	f006 f957 	bl	8007fcc <osThreadNew>
 8001d1e:	4603      	mov	r3, r0
 8001d20:	4a1f      	ldr	r2, [pc, #124]	; (8001da0 <main+0x134>)
 8001d22:	6013      	str	r3, [r2, #0]

  /* creation of ArtDownTask */
  ArtDownTaskHandle = osThreadNew(StartArtDownTask, NULL, &ArtDownTask_attributes);
 8001d24:	4a1f      	ldr	r2, [pc, #124]	; (8001da4 <main+0x138>)
 8001d26:	2100      	movs	r1, #0
 8001d28:	481f      	ldr	r0, [pc, #124]	; (8001da8 <main+0x13c>)
 8001d2a:	f006 f94f 	bl	8007fcc <osThreadNew>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	4a1e      	ldr	r2, [pc, #120]	; (8001dac <main+0x140>)
 8001d32:	6013      	str	r3, [r2, #0]

  /* creation of ArtGoToTask */
  ArtGoToTaskHandle = osThreadNew(StartArtGoToTask, NULL, &ArtGoToTask_attributes);
 8001d34:	4a1e      	ldr	r2, [pc, #120]	; (8001db0 <main+0x144>)
 8001d36:	2100      	movs	r1, #0
 8001d38:	481e      	ldr	r0, [pc, #120]	; (8001db4 <main+0x148>)
 8001d3a:	f006 f947 	bl	8007fcc <osThreadNew>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	4a1d      	ldr	r2, [pc, #116]	; (8001db8 <main+0x14c>)
 8001d42:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001d44:	f006 f91c 	bl	8007f80 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001d48:	e7fe      	b.n	8001d48 <main+0xdc>
 8001d4a:	bf00      	nop
 8001d4c:	20000140 	.word	0x20000140
 8001d50:	0800b480 	.word	0x0800b480
 8001d54:	08002521 	.word	0x08002521
 8001d58:	2000028c 	.word	0x2000028c
 8001d5c:	0800b4a4 	.word	0x0800b4a4
 8001d60:	08002565 	.word	0x08002565
 8001d64:	20000290 	.word	0x20000290
 8001d68:	0800b4c8 	.word	0x0800b4c8
 8001d6c:	080025cd 	.word	0x080025cd
 8001d70:	20000294 	.word	0x20000294
 8001d74:	0800b4ec 	.word	0x0800b4ec
 8001d78:	08002659 	.word	0x08002659
 8001d7c:	20000298 	.word	0x20000298
 8001d80:	0800b510 	.word	0x0800b510
 8001d84:	080026cd 	.word	0x080026cd
 8001d88:	2000029c 	.word	0x2000029c
 8001d8c:	0800b534 	.word	0x0800b534
 8001d90:	080027f1 	.word	0x080027f1
 8001d94:	200002a0 	.word	0x200002a0
 8001d98:	0800b558 	.word	0x0800b558
 8001d9c:	08002825 	.word	0x08002825
 8001da0:	200002a4 	.word	0x200002a4
 8001da4:	0800b57c 	.word	0x0800b57c
 8001da8:	08002895 	.word	0x08002895
 8001dac:	200002a8 	.word	0x200002a8
 8001db0:	0800b5a0 	.word	0x0800b5a0
 8001db4:	080028fd 	.word	0x080028fd
 8001db8:	200002ac 	.word	0x200002ac

08001dbc <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b094      	sub	sp, #80	; 0x50
 8001dc0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001dc2:	f107 0320 	add.w	r3, r7, #32
 8001dc6:	2230      	movs	r2, #48	; 0x30
 8001dc8:	2100      	movs	r1, #0
 8001dca:	4618      	mov	r0, r3
 8001dcc:	f009 f84c 	bl	800ae68 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001dd0:	f107 030c 	add.w	r3, r7, #12
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	601a      	str	r2, [r3, #0]
 8001dd8:	605a      	str	r2, [r3, #4]
 8001dda:	609a      	str	r2, [r3, #8]
 8001ddc:	60da      	str	r2, [r3, #12]
 8001dde:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001de0:	2300      	movs	r3, #0
 8001de2:	60bb      	str	r3, [r7, #8]
 8001de4:	4b28      	ldr	r3, [pc, #160]	; (8001e88 <_Z18SystemClock_Configv+0xcc>)
 8001de6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001de8:	4a27      	ldr	r2, [pc, #156]	; (8001e88 <_Z18SystemClock_Configv+0xcc>)
 8001dea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001dee:	6413      	str	r3, [r2, #64]	; 0x40
 8001df0:	4b25      	ldr	r3, [pc, #148]	; (8001e88 <_Z18SystemClock_Configv+0xcc>)
 8001df2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001df4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001df8:	60bb      	str	r3, [r7, #8]
 8001dfa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	607b      	str	r3, [r7, #4]
 8001e00:	4b22      	ldr	r3, [pc, #136]	; (8001e8c <_Z18SystemClock_Configv+0xd0>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001e08:	4a20      	ldr	r2, [pc, #128]	; (8001e8c <_Z18SystemClock_Configv+0xd0>)
 8001e0a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e0e:	6013      	str	r3, [r2, #0]
 8001e10:	4b1e      	ldr	r3, [pc, #120]	; (8001e8c <_Z18SystemClock_Configv+0xd0>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001e18:	607b      	str	r3, [r7, #4]
 8001e1a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001e1c:	2302      	movs	r3, #2
 8001e1e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001e20:	2301      	movs	r3, #1
 8001e22:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001e24:	2310      	movs	r3, #16
 8001e26:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e2c:	f107 0320 	add.w	r3, r7, #32
 8001e30:	4618      	mov	r0, r3
 8001e32:	f003 fa13 	bl	800525c <HAL_RCC_OscConfig>
 8001e36:	4603      	mov	r3, r0
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	bf14      	ite	ne
 8001e3c:	2301      	movne	r3, #1
 8001e3e:	2300      	moveq	r3, #0
 8001e40:	b2db      	uxtb	r3, r3
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d001      	beq.n	8001e4a <_Z18SystemClock_Configv+0x8e>
  {
    Error_Handler();
 8001e46:	f000 fda7 	bl	8002998 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001e4a:	230f      	movs	r3, #15
 8001e4c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001e52:	2300      	movs	r3, #0
 8001e54:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001e56:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001e5a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001e60:	f107 030c 	add.w	r3, r7, #12
 8001e64:	2100      	movs	r1, #0
 8001e66:	4618      	mov	r0, r3
 8001e68:	f003 fc70 	bl	800574c <HAL_RCC_ClockConfig>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	bf14      	ite	ne
 8001e72:	2301      	movne	r3, #1
 8001e74:	2300      	moveq	r3, #0
 8001e76:	b2db      	uxtb	r3, r3
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d001      	beq.n	8001e80 <_Z18SystemClock_Configv+0xc4>
  {
    Error_Handler();
 8001e7c:	f000 fd8c 	bl	8002998 <Error_Handler>
  }
}
 8001e80:	bf00      	nop
 8001e82:	3750      	adds	r7, #80	; 0x50
 8001e84:	46bd      	mov	sp, r7
 8001e86:	bd80      	pop	{r7, pc}
 8001e88:	40023800 	.word	0x40023800
 8001e8c:	40007000 	.word	0x40007000

08001e90 <_ZL12MX_ADC1_Initv>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b084      	sub	sp, #16
 8001e94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001e96:	463b      	mov	r3, r7
 8001e98:	2200      	movs	r2, #0
 8001e9a:	601a      	str	r2, [r3, #0]
 8001e9c:	605a      	str	r2, [r3, #4]
 8001e9e:	609a      	str	r2, [r3, #8]
 8001ea0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001ea2:	4b2f      	ldr	r3, [pc, #188]	; (8001f60 <_ZL12MX_ADC1_Initv+0xd0>)
 8001ea4:	4a2f      	ldr	r2, [pc, #188]	; (8001f64 <_ZL12MX_ADC1_Initv+0xd4>)
 8001ea6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001ea8:	4b2d      	ldr	r3, [pc, #180]	; (8001f60 <_ZL12MX_ADC1_Initv+0xd0>)
 8001eaa:	2200      	movs	r2, #0
 8001eac:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001eae:	4b2c      	ldr	r3, [pc, #176]	; (8001f60 <_ZL12MX_ADC1_Initv+0xd0>)
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001eb4:	4b2a      	ldr	r3, [pc, #168]	; (8001f60 <_ZL12MX_ADC1_Initv+0xd0>)
 8001eb6:	2201      	movs	r2, #1
 8001eb8:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001eba:	4b29      	ldr	r3, [pc, #164]	; (8001f60 <_ZL12MX_ADC1_Initv+0xd0>)
 8001ebc:	2201      	movs	r2, #1
 8001ebe:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001ec0:	4b27      	ldr	r3, [pc, #156]	; (8001f60 <_ZL12MX_ADC1_Initv+0xd0>)
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001ec8:	4b25      	ldr	r3, [pc, #148]	; (8001f60 <_ZL12MX_ADC1_Initv+0xd0>)
 8001eca:	2200      	movs	r2, #0
 8001ecc:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001ece:	4b24      	ldr	r3, [pc, #144]	; (8001f60 <_ZL12MX_ADC1_Initv+0xd0>)
 8001ed0:	4a25      	ldr	r2, [pc, #148]	; (8001f68 <_ZL12MX_ADC1_Initv+0xd8>)
 8001ed2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001ed4:	4b22      	ldr	r3, [pc, #136]	; (8001f60 <_ZL12MX_ADC1_Initv+0xd0>)
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8001eda:	4b21      	ldr	r3, [pc, #132]	; (8001f60 <_ZL12MX_ADC1_Initv+0xd0>)
 8001edc:	2202      	movs	r2, #2
 8001ede:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001ee0:	4b1f      	ldr	r3, [pc, #124]	; (8001f60 <_ZL12MX_ADC1_Initv+0xd0>)
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001ee8:	4b1d      	ldr	r3, [pc, #116]	; (8001f60 <_ZL12MX_ADC1_Initv+0xd0>)
 8001eea:	2201      	movs	r2, #1
 8001eec:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001eee:	481c      	ldr	r0, [pc, #112]	; (8001f60 <_ZL12MX_ADC1_Initv+0xd0>)
 8001ef0:	f001 ff0e 	bl	8003d10 <HAL_ADC_Init>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	bf14      	ite	ne
 8001efa:	2301      	movne	r3, #1
 8001efc:	2300      	moveq	r3, #0
 8001efe:	b2db      	uxtb	r3, r3
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d001      	beq.n	8001f08 <_ZL12MX_ADC1_Initv+0x78>
  {
    Error_Handler();
 8001f04:	f000 fd48 	bl	8002998 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8001f08:	2308      	movs	r3, #8
 8001f0a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001f0c:	2301      	movs	r3, #1
 8001f0e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8001f10:	2307      	movs	r3, #7
 8001f12:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001f14:	463b      	mov	r3, r7
 8001f16:	4619      	mov	r1, r3
 8001f18:	4811      	ldr	r0, [pc, #68]	; (8001f60 <_ZL12MX_ADC1_Initv+0xd0>)
 8001f1a:	f002 f84b 	bl	8003fb4 <HAL_ADC_ConfigChannel>
 8001f1e:	4603      	mov	r3, r0
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	bf14      	ite	ne
 8001f24:	2301      	movne	r3, #1
 8001f26:	2300      	moveq	r3, #0
 8001f28:	b2db      	uxtb	r3, r3
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d001      	beq.n	8001f32 <_ZL12MX_ADC1_Initv+0xa2>
  {
    Error_Handler();
 8001f2e:	f000 fd33 	bl	8002998 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8001f32:	2309      	movs	r3, #9
 8001f34:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001f36:	2302      	movs	r3, #2
 8001f38:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001f3a:	463b      	mov	r3, r7
 8001f3c:	4619      	mov	r1, r3
 8001f3e:	4808      	ldr	r0, [pc, #32]	; (8001f60 <_ZL12MX_ADC1_Initv+0xd0>)
 8001f40:	f002 f838 	bl	8003fb4 <HAL_ADC_ConfigChannel>
 8001f44:	4603      	mov	r3, r0
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	bf14      	ite	ne
 8001f4a:	2301      	movne	r3, #1
 8001f4c:	2300      	moveq	r3, #0
 8001f4e:	b2db      	uxtb	r3, r3
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d001      	beq.n	8001f58 <_ZL12MX_ADC1_Initv+0xc8>
  {
    Error_Handler();
 8001f54:	f000 fd20 	bl	8002998 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001f58:	bf00      	nop
 8001f5a:	3710      	adds	r7, #16
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	bd80      	pop	{r7, pc}
 8001f60:	20000098 	.word	0x20000098
 8001f64:	40012000 	.word	0x40012000
 8001f68:	0f000001 	.word	0x0f000001

08001f6c <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b08e      	sub	sp, #56	; 0x38
 8001f70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f72:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001f76:	2200      	movs	r2, #0
 8001f78:	601a      	str	r2, [r3, #0]
 8001f7a:	605a      	str	r2, [r3, #4]
 8001f7c:	609a      	str	r2, [r3, #8]
 8001f7e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f80:	f107 0320 	add.w	r3, r7, #32
 8001f84:	2200      	movs	r2, #0
 8001f86:	601a      	str	r2, [r3, #0]
 8001f88:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001f8a:	1d3b      	adds	r3, r7, #4
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	601a      	str	r2, [r3, #0]
 8001f90:	605a      	str	r2, [r3, #4]
 8001f92:	609a      	str	r2, [r3, #8]
 8001f94:	60da      	str	r2, [r3, #12]
 8001f96:	611a      	str	r2, [r3, #16]
 8001f98:	615a      	str	r2, [r3, #20]
 8001f9a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001f9c:	4b41      	ldr	r3, [pc, #260]	; (80020a4 <_ZL12MX_TIM2_Initv+0x138>)
 8001f9e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001fa2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 64;
 8001fa4:	4b3f      	ldr	r3, [pc, #252]	; (80020a4 <_ZL12MX_TIM2_Initv+0x138>)
 8001fa6:	2240      	movs	r2, #64	; 0x40
 8001fa8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001faa:	4b3e      	ldr	r3, [pc, #248]	; (80020a4 <_ZL12MX_TIM2_Initv+0x138>)
 8001fac:	2200      	movs	r2, #0
 8001fae:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2499;
 8001fb0:	4b3c      	ldr	r3, [pc, #240]	; (80020a4 <_ZL12MX_TIM2_Initv+0x138>)
 8001fb2:	f640 12c3 	movw	r2, #2499	; 0x9c3
 8001fb6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001fb8:	4b3a      	ldr	r3, [pc, #232]	; (80020a4 <_ZL12MX_TIM2_Initv+0x138>)
 8001fba:	2200      	movs	r2, #0
 8001fbc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001fbe:	4b39      	ldr	r3, [pc, #228]	; (80020a4 <_ZL12MX_TIM2_Initv+0x138>)
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001fc4:	4837      	ldr	r0, [pc, #220]	; (80020a4 <_ZL12MX_TIM2_Initv+0x138>)
 8001fc6:	f003 fdd3 	bl	8005b70 <HAL_TIM_Base_Init>
 8001fca:	4603      	mov	r3, r0
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	bf14      	ite	ne
 8001fd0:	2301      	movne	r3, #1
 8001fd2:	2300      	moveq	r3, #0
 8001fd4:	b2db      	uxtb	r3, r3
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d001      	beq.n	8001fde <_ZL12MX_TIM2_Initv+0x72>
  {
    Error_Handler();
 8001fda:	f000 fcdd 	bl	8002998 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001fde:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001fe2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001fe4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001fe8:	4619      	mov	r1, r3
 8001fea:	482e      	ldr	r0, [pc, #184]	; (80020a4 <_ZL12MX_TIM2_Initv+0x138>)
 8001fec:	f004 f946 	bl	800627c <HAL_TIM_ConfigClockSource>
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	bf14      	ite	ne
 8001ff6:	2301      	movne	r3, #1
 8001ff8:	2300      	moveq	r3, #0
 8001ffa:	b2db      	uxtb	r3, r3
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d001      	beq.n	8002004 <_ZL12MX_TIM2_Initv+0x98>
  {
    Error_Handler();
 8002000:	f000 fcca 	bl	8002998 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002004:	4827      	ldr	r0, [pc, #156]	; (80020a4 <_ZL12MX_TIM2_Initv+0x138>)
 8002006:	f003 fe65 	bl	8005cd4 <HAL_TIM_PWM_Init>
 800200a:	4603      	mov	r3, r0
 800200c:	2b00      	cmp	r3, #0
 800200e:	bf14      	ite	ne
 8002010:	2301      	movne	r3, #1
 8002012:	2300      	moveq	r3, #0
 8002014:	b2db      	uxtb	r3, r3
 8002016:	2b00      	cmp	r3, #0
 8002018:	d001      	beq.n	800201e <_ZL12MX_TIM2_Initv+0xb2>
  {
    Error_Handler();
 800201a:	f000 fcbd 	bl	8002998 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800201e:	2300      	movs	r3, #0
 8002020:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002022:	2300      	movs	r3, #0
 8002024:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002026:	f107 0320 	add.w	r3, r7, #32
 800202a:	4619      	mov	r1, r3
 800202c:	481d      	ldr	r0, [pc, #116]	; (80020a4 <_ZL12MX_TIM2_Initv+0x138>)
 800202e:	f004 fce1 	bl	80069f4 <HAL_TIMEx_MasterConfigSynchronization>
 8002032:	4603      	mov	r3, r0
 8002034:	2b00      	cmp	r3, #0
 8002036:	bf14      	ite	ne
 8002038:	2301      	movne	r3, #1
 800203a:	2300      	moveq	r3, #0
 800203c:	b2db      	uxtb	r3, r3
 800203e:	2b00      	cmp	r3, #0
 8002040:	d001      	beq.n	8002046 <_ZL12MX_TIM2_Initv+0xda>
  {
    Error_Handler();
 8002042:	f000 fca9 	bl	8002998 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002046:	2360      	movs	r3, #96	; 0x60
 8002048:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800204a:	2300      	movs	r3, #0
 800204c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800204e:	2300      	movs	r3, #0
 8002050:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002052:	2300      	movs	r3, #0
 8002054:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002056:	1d3b      	adds	r3, r7, #4
 8002058:	2200      	movs	r2, #0
 800205a:	4619      	mov	r1, r3
 800205c:	4811      	ldr	r0, [pc, #68]	; (80020a4 <_ZL12MX_TIM2_Initv+0x138>)
 800205e:	f004 f84b 	bl	80060f8 <HAL_TIM_PWM_ConfigChannel>
 8002062:	4603      	mov	r3, r0
 8002064:	2b00      	cmp	r3, #0
 8002066:	bf14      	ite	ne
 8002068:	2301      	movne	r3, #1
 800206a:	2300      	moveq	r3, #0
 800206c:	b2db      	uxtb	r3, r3
 800206e:	2b00      	cmp	r3, #0
 8002070:	d001      	beq.n	8002076 <_ZL12MX_TIM2_Initv+0x10a>
  {
    Error_Handler();
 8002072:	f000 fc91 	bl	8002998 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002076:	1d3b      	adds	r3, r7, #4
 8002078:	2204      	movs	r2, #4
 800207a:	4619      	mov	r1, r3
 800207c:	4809      	ldr	r0, [pc, #36]	; (80020a4 <_ZL12MX_TIM2_Initv+0x138>)
 800207e:	f004 f83b 	bl	80060f8 <HAL_TIM_PWM_ConfigChannel>
 8002082:	4603      	mov	r3, r0
 8002084:	2b00      	cmp	r3, #0
 8002086:	bf14      	ite	ne
 8002088:	2301      	movne	r3, #1
 800208a:	2300      	moveq	r3, #0
 800208c:	b2db      	uxtb	r3, r3
 800208e:	2b00      	cmp	r3, #0
 8002090:	d001      	beq.n	8002096 <_ZL12MX_TIM2_Initv+0x12a>
  {
    Error_Handler();
 8002092:	f000 fc81 	bl	8002998 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002096:	4803      	ldr	r0, [pc, #12]	; (80020a4 <_ZL12MX_TIM2_Initv+0x138>)
 8002098:	f001 fbb4 	bl	8003804 <HAL_TIM_MspPostInit>

}
 800209c:	bf00      	nop
 800209e:	3738      	adds	r7, #56	; 0x38
 80020a0:	46bd      	mov	sp, r7
 80020a2:	bd80      	pop	{r7, pc}
 80020a4:	20000140 	.word	0x20000140

080020a8 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80020ac:	4b13      	ldr	r3, [pc, #76]	; (80020fc <_ZL19MX_USART2_UART_Initv+0x54>)
 80020ae:	4a14      	ldr	r2, [pc, #80]	; (8002100 <_ZL19MX_USART2_UART_Initv+0x58>)
 80020b0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 57600;
 80020b2:	4b12      	ldr	r3, [pc, #72]	; (80020fc <_ZL19MX_USART2_UART_Initv+0x54>)
 80020b4:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 80020b8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80020ba:	4b10      	ldr	r3, [pc, #64]	; (80020fc <_ZL19MX_USART2_UART_Initv+0x54>)
 80020bc:	2200      	movs	r2, #0
 80020be:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80020c0:	4b0e      	ldr	r3, [pc, #56]	; (80020fc <_ZL19MX_USART2_UART_Initv+0x54>)
 80020c2:	2200      	movs	r2, #0
 80020c4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80020c6:	4b0d      	ldr	r3, [pc, #52]	; (80020fc <_ZL19MX_USART2_UART_Initv+0x54>)
 80020c8:	2200      	movs	r2, #0
 80020ca:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80020cc:	4b0b      	ldr	r3, [pc, #44]	; (80020fc <_ZL19MX_USART2_UART_Initv+0x54>)
 80020ce:	220c      	movs	r2, #12
 80020d0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80020d2:	4b0a      	ldr	r3, [pc, #40]	; (80020fc <_ZL19MX_USART2_UART_Initv+0x54>)
 80020d4:	2200      	movs	r2, #0
 80020d6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80020d8:	4b08      	ldr	r3, [pc, #32]	; (80020fc <_ZL19MX_USART2_UART_Initv+0x54>)
 80020da:	2200      	movs	r2, #0
 80020dc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80020de:	4807      	ldr	r0, [pc, #28]	; (80020fc <_ZL19MX_USART2_UART_Initv+0x54>)
 80020e0:	f004 fd0a 	bl	8006af8 <HAL_UART_Init>
 80020e4:	4603      	mov	r3, r0
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	bf14      	ite	ne
 80020ea:	2301      	movne	r3, #1
 80020ec:	2300      	moveq	r3, #0
 80020ee:	b2db      	uxtb	r3, r3
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d001      	beq.n	80020f8 <_ZL19MX_USART2_UART_Initv+0x50>
  {
    Error_Handler();
 80020f4:	f000 fc50 	bl	8002998 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80020f8:	bf00      	nop
 80020fa:	bd80      	pop	{r7, pc}
 80020fc:	20000188 	.word	0x20000188
 8002100:	40004400 	.word	0x40004400

08002104 <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b082      	sub	sp, #8
 8002108:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800210a:	2300      	movs	r3, #0
 800210c:	607b      	str	r3, [r7, #4]
 800210e:	4b1b      	ldr	r3, [pc, #108]	; (800217c <_ZL11MX_DMA_Initv+0x78>)
 8002110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002112:	4a1a      	ldr	r2, [pc, #104]	; (800217c <_ZL11MX_DMA_Initv+0x78>)
 8002114:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002118:	6313      	str	r3, [r2, #48]	; 0x30
 800211a:	4b18      	ldr	r3, [pc, #96]	; (800217c <_ZL11MX_DMA_Initv+0x78>)
 800211c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800211e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002122:	607b      	str	r3, [r7, #4]
 8002124:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002126:	2300      	movs	r3, #0
 8002128:	603b      	str	r3, [r7, #0]
 800212a:	4b14      	ldr	r3, [pc, #80]	; (800217c <_ZL11MX_DMA_Initv+0x78>)
 800212c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800212e:	4a13      	ldr	r2, [pc, #76]	; (800217c <_ZL11MX_DMA_Initv+0x78>)
 8002130:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002134:	6313      	str	r3, [r2, #48]	; 0x30
 8002136:	4b11      	ldr	r3, [pc, #68]	; (800217c <_ZL11MX_DMA_Initv+0x78>)
 8002138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800213a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800213e:	603b      	str	r3, [r7, #0]
 8002140:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8002142:	2200      	movs	r2, #0
 8002144:	2105      	movs	r1, #5
 8002146:	2010      	movs	r0, #16
 8002148:	f002 fa8c 	bl	8004664 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 800214c:	2010      	movs	r0, #16
 800214e:	f002 faa5 	bl	800469c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 8002152:	2200      	movs	r2, #0
 8002154:	2105      	movs	r1, #5
 8002156:	2011      	movs	r0, #17
 8002158:	f002 fa84 	bl	8004664 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 800215c:	2011      	movs	r0, #17
 800215e:	f002 fa9d 	bl	800469c <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8002162:	2200      	movs	r2, #0
 8002164:	2105      	movs	r1, #5
 8002166:	2038      	movs	r0, #56	; 0x38
 8002168:	f002 fa7c 	bl	8004664 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800216c:	2038      	movs	r0, #56	; 0x38
 800216e:	f002 fa95 	bl	800469c <HAL_NVIC_EnableIRQ>

}
 8002172:	bf00      	nop
 8002174:	3708      	adds	r7, #8
 8002176:	46bd      	mov	sp, r7
 8002178:	bd80      	pop	{r7, pc}
 800217a:	bf00      	nop
 800217c:	40023800 	.word	0x40023800

08002180 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b088      	sub	sp, #32
 8002184:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002186:	f107 030c 	add.w	r3, r7, #12
 800218a:	2200      	movs	r2, #0
 800218c:	601a      	str	r2, [r3, #0]
 800218e:	605a      	str	r2, [r3, #4]
 8002190:	609a      	str	r2, [r3, #8]
 8002192:	60da      	str	r2, [r3, #12]
 8002194:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002196:	2300      	movs	r3, #0
 8002198:	60bb      	str	r3, [r7, #8]
 800219a:	4b27      	ldr	r3, [pc, #156]	; (8002238 <_ZL12MX_GPIO_Initv+0xb8>)
 800219c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800219e:	4a26      	ldr	r2, [pc, #152]	; (8002238 <_ZL12MX_GPIO_Initv+0xb8>)
 80021a0:	f043 0304 	orr.w	r3, r3, #4
 80021a4:	6313      	str	r3, [r2, #48]	; 0x30
 80021a6:	4b24      	ldr	r3, [pc, #144]	; (8002238 <_ZL12MX_GPIO_Initv+0xb8>)
 80021a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021aa:	f003 0304 	and.w	r3, r3, #4
 80021ae:	60bb      	str	r3, [r7, #8]
 80021b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80021b2:	2300      	movs	r3, #0
 80021b4:	607b      	str	r3, [r7, #4]
 80021b6:	4b20      	ldr	r3, [pc, #128]	; (8002238 <_ZL12MX_GPIO_Initv+0xb8>)
 80021b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ba:	4a1f      	ldr	r2, [pc, #124]	; (8002238 <_ZL12MX_GPIO_Initv+0xb8>)
 80021bc:	f043 0301 	orr.w	r3, r3, #1
 80021c0:	6313      	str	r3, [r2, #48]	; 0x30
 80021c2:	4b1d      	ldr	r3, [pc, #116]	; (8002238 <_ZL12MX_GPIO_Initv+0xb8>)
 80021c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021c6:	f003 0301 	and.w	r3, r3, #1
 80021ca:	607b      	str	r3, [r7, #4]
 80021cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80021ce:	2300      	movs	r3, #0
 80021d0:	603b      	str	r3, [r7, #0]
 80021d2:	4b19      	ldr	r3, [pc, #100]	; (8002238 <_ZL12MX_GPIO_Initv+0xb8>)
 80021d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021d6:	4a18      	ldr	r2, [pc, #96]	; (8002238 <_ZL12MX_GPIO_Initv+0xb8>)
 80021d8:	f043 0302 	orr.w	r3, r3, #2
 80021dc:	6313      	str	r3, [r2, #48]	; 0x30
 80021de:	4b16      	ldr	r3, [pc, #88]	; (8002238 <_ZL12MX_GPIO_Initv+0xb8>)
 80021e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021e2:	f003 0302 	and.w	r3, r3, #2
 80021e6:	603b      	str	r3, [r7, #0]
 80021e8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80021ea:	2200      	movs	r2, #0
 80021ec:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80021f0:	4812      	ldr	r0, [pc, #72]	; (800223c <_ZL12MX_GPIO_Initv+0xbc>)
 80021f2:	f002 ffff 	bl	80051f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80021f6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80021fa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021fc:	2301      	movs	r3, #1
 80021fe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002200:	2300      	movs	r3, #0
 8002202:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002204:	2300      	movs	r3, #0
 8002206:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8002208:	f107 030c 	add.w	r3, r7, #12
 800220c:	4619      	mov	r1, r3
 800220e:	480b      	ldr	r0, [pc, #44]	; (800223c <_ZL12MX_GPIO_Initv+0xbc>)
 8002210:	f002 fe54 	bl	8004ebc <HAL_GPIO_Init>

  /*Configure GPIO pin : Push_Button_Pin */
  GPIO_InitStruct.Pin = Push_Button_Pin;
 8002214:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002218:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800221a:	2300      	movs	r3, #0
 800221c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800221e:	2300      	movs	r3, #0
 8002220:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(Push_Button_GPIO_Port, &GPIO_InitStruct);
 8002222:	f107 030c 	add.w	r3, r7, #12
 8002226:	4619      	mov	r1, r3
 8002228:	4805      	ldr	r0, [pc, #20]	; (8002240 <_ZL12MX_GPIO_Initv+0xc0>)
 800222a:	f002 fe47 	bl	8004ebc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800222e:	bf00      	nop
 8002230:	3720      	adds	r7, #32
 8002232:	46bd      	mov	sp, r7
 8002234:	bd80      	pop	{r7, pc}
 8002236:	bf00      	nop
 8002238:	40023800 	.word	0x40023800
 800223c:	40020800 	.word	0x40020800
 8002240:	40020000 	.word	0x40020000

08002244 <_Z28get_servo_pos_liveExpressionv>:

/* USER CODE BEGIN 4 */ //here
void get_servo_pos_liveExpression(){
 8002244:	b480      	push	{r7}
 8002246:	af00      	add	r7, sp, #0
		gripper =  TIM2->CCR1;
 8002248:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800224c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800224e:	461a      	mov	r2, r3
 8002250:	4b06      	ldr	r3, [pc, #24]	; (800226c <_Z28get_servo_pos_liveExpressionv+0x28>)
 8002252:	601a      	str	r2, [r3, #0]
		art = TIM2->CCR2;
 8002254:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002258:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800225a:	461a      	mov	r2, r3
 800225c:	4b04      	ldr	r3, [pc, #16]	; (8002270 <_Z28get_servo_pos_liveExpressionv+0x2c>)
 800225e:	601a      	str	r2, [r3, #0]
}
 8002260:	bf00      	nop
 8002262:	46bd      	mov	sp, r7
 8002264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002268:	4770      	bx	lr
 800226a:	bf00      	nop
 800226c:	200002c4 	.word	0x200002c4
 8002270:	200002c8 	.word	0x200002c8

08002274 <_Z10pwm_to_angi>:
float pwm_to_ang(int n){
 8002274:	b580      	push	{r7, lr}
 8002276:	b084      	sub	sp, #16
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
	float out = 0;
 800227c:	f04f 0300 	mov.w	r3, #0
 8002280:	60fb      	str	r3, [r7, #12]
	if (n == 0){
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	2b00      	cmp	r3, #0
 8002286:	d11b      	bne.n	80022c0 <_Z10pwm_to_angi+0x4c>
		out = (180.0/240.0)*((float)TIM2->CCR1 - 60);
 8002288:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800228c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800228e:	ee07 3a90 	vmov	s15, r3
 8002292:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002296:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8002324 <_Z10pwm_to_angi+0xb0>
 800229a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800229e:	ee17 0a90 	vmov	r0, s15
 80022a2:	f7fe fa33 	bl	800070c <__aeabi_f2d>
 80022a6:	f04f 0200 	mov.w	r2, #0
 80022aa:	4b1f      	ldr	r3, [pc, #124]	; (8002328 <_Z10pwm_to_angi+0xb4>)
 80022ac:	f7fd ffa0 	bl	80001f0 <__aeabi_dmul>
 80022b0:	4602      	mov	r2, r0
 80022b2:	460b      	mov	r3, r1
 80022b4:	4610      	mov	r0, r2
 80022b6:	4619      	mov	r1, r3
 80022b8:	f7fe fa80 	bl	80007bc <__aeabi_d2f>
 80022bc:	4603      	mov	r3, r0
 80022be:	60fb      	str	r3, [r7, #12]
	}
	if(n == 1){
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2b01      	cmp	r3, #1
 80022c4:	d11b      	bne.n	80022fe <_Z10pwm_to_angi+0x8a>
		out = (180.0/240.0)*((float)TIM2->CCR2 - 60);
 80022c6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80022ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022cc:	ee07 3a90 	vmov	s15, r3
 80022d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80022d4:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8002324 <_Z10pwm_to_angi+0xb0>
 80022d8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80022dc:	ee17 0a90 	vmov	r0, s15
 80022e0:	f7fe fa14 	bl	800070c <__aeabi_f2d>
 80022e4:	f04f 0200 	mov.w	r2, #0
 80022e8:	4b0f      	ldr	r3, [pc, #60]	; (8002328 <_Z10pwm_to_angi+0xb4>)
 80022ea:	f7fd ff81 	bl	80001f0 <__aeabi_dmul>
 80022ee:	4602      	mov	r2, r0
 80022f0:	460b      	mov	r3, r1
 80022f2:	4610      	mov	r0, r2
 80022f4:	4619      	mov	r1, r3
 80022f6:	f7fe fa61 	bl	80007bc <__aeabi_d2f>
 80022fa:	4603      	mov	r3, r0
 80022fc:	60fb      	str	r3, [r7, #12]
	}
	return out < 0 ? 0 : out;
 80022fe:	edd7 7a03 	vldr	s15, [r7, #12]
 8002302:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002306:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800230a:	d502      	bpl.n	8002312 <_Z10pwm_to_angi+0x9e>
 800230c:	f04f 0300 	mov.w	r3, #0
 8002310:	e000      	b.n	8002314 <_Z10pwm_to_angi+0xa0>
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	ee07 3a90 	vmov	s15, r3
}
 8002318:	eeb0 0a67 	vmov.f32	s0, s15
 800231c:	3710      	adds	r7, #16
 800231e:	46bd      	mov	sp, r7
 8002320:	bd80      	pop	{r7, pc}
 8002322:	bf00      	nop
 8002324:	42700000 	.word	0x42700000
 8002328:	3fe80000 	.word	0x3fe80000
 800232c:	00000000 	.word	0x00000000

08002330 <_Z10ang_to_pwmi>:
float ang_to_pwm(int ang){
 8002330:	b580      	push	{r7, lr}
 8002332:	b082      	sub	sp, #8
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
	return ang*(240.0/180.0)+60;
 8002338:	6878      	ldr	r0, [r7, #4]
 800233a:	f7fe f9d5 	bl	80006e8 <__aeabi_i2d>
 800233e:	a30f      	add	r3, pc, #60	; (adr r3, 800237c <_Z10ang_to_pwmi+0x4c>)
 8002340:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002344:	f7fd ff54 	bl	80001f0 <__aeabi_dmul>
 8002348:	4602      	mov	r2, r0
 800234a:	460b      	mov	r3, r1
 800234c:	4610      	mov	r0, r2
 800234e:	4619      	mov	r1, r3
 8002350:	f04f 0200 	mov.w	r2, #0
 8002354:	4b08      	ldr	r3, [pc, #32]	; (8002378 <_Z10ang_to_pwmi+0x48>)
 8002356:	f7fe f87b 	bl	8000450 <__adddf3>
 800235a:	4602      	mov	r2, r0
 800235c:	460b      	mov	r3, r1
 800235e:	4610      	mov	r0, r2
 8002360:	4619      	mov	r1, r3
 8002362:	f7fe fa2b 	bl	80007bc <__aeabi_d2f>
 8002366:	4603      	mov	r3, r0
 8002368:	ee07 3a90 	vmov	s15, r3

}
 800236c:	eeb0 0a67 	vmov.f32	s0, s15
 8002370:	3708      	adds	r7, #8
 8002372:	46bd      	mov	sp, r7
 8002374:	bd80      	pop	{r7, pc}
 8002376:	bf00      	nop
 8002378:	404e0000 	.word	0x404e0000
 800237c:	55555555 	.word	0x55555555
 8002380:	3ff55555 	.word	0x3ff55555

08002384 <_Z13move_servo_toii>:
void move_servo_to(int n, int pwm){
 8002384:	b480      	push	{r7}
 8002386:	b083      	sub	sp, #12
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
 800238c:	6039      	str	r1, [r7, #0]
	if (n == 0){
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	2b00      	cmp	r3, #0
 8002392:	d104      	bne.n	800239e <_Z13move_servo_toii+0x1a>
		TIM2->CCR1 = pwm;
 8002394:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	6353      	str	r3, [r2, #52]	; 0x34
	}
	else if(n == 1){
		TIM2->CCR2 = pwm;
	}
}
 800239c:	e006      	b.n	80023ac <_Z13move_servo_toii+0x28>
	else if(n == 1){
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	2b01      	cmp	r3, #1
 80023a2:	d103      	bne.n	80023ac <_Z13move_servo_toii+0x28>
		TIM2->CCR2 = pwm;
 80023a4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	6393      	str	r3, [r2, #56]	; 0x38
}
 80023ac:	bf00      	nop
 80023ae:	370c      	adds	r7, #12
 80023b0:	46bd      	mov	sp, r7
 80023b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b6:	4770      	bx	lr

080023b8 <_Z13move_servo_fwi>:
void move_servo_fw(int n){
 80023b8:	b480      	push	{r7}
 80023ba:	b083      	sub	sp, #12
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
	if (n == 0){
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d107      	bne.n	80023d6 <_Z13move_servo_fwi+0x1e>
		TIM2->CCR1 += 1;
 80023c6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80023ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023cc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80023d0:	3301      	adds	r3, #1
 80023d2:	6353      	str	r3, [r2, #52]	; 0x34
	}
	else if(n == 1){
		TIM2->CCR2 += 1;
	}
}
 80023d4:	e009      	b.n	80023ea <_Z13move_servo_fwi+0x32>
	else if(n == 1){
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	2b01      	cmp	r3, #1
 80023da:	d106      	bne.n	80023ea <_Z13move_servo_fwi+0x32>
		TIM2->CCR2 += 1;
 80023dc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80023e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023e2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80023e6:	3301      	adds	r3, #1
 80023e8:	6393      	str	r3, [r2, #56]	; 0x38
}
 80023ea:	bf00      	nop
 80023ec:	370c      	adds	r7, #12
 80023ee:	46bd      	mov	sp, r7
 80023f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f4:	4770      	bx	lr

080023f6 <_Z13move_servo_bwi>:
void move_servo_bw(int n){
 80023f6:	b480      	push	{r7}
 80023f8:	b083      	sub	sp, #12
 80023fa:	af00      	add	r7, sp, #0
 80023fc:	6078      	str	r0, [r7, #4]
	if (n == 0){
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	2b00      	cmp	r3, #0
 8002402:	d107      	bne.n	8002414 <_Z13move_servo_bwi+0x1e>
		TIM2->CCR1 -= 1;
 8002404:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002408:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800240a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800240e:	3b01      	subs	r3, #1
 8002410:	6353      	str	r3, [r2, #52]	; 0x34
	}
	else if(n == 1){
		TIM2->CCR2 -= 1;
	}
}
 8002412:	e009      	b.n	8002428 <_Z13move_servo_bwi+0x32>
	else if(n == 1){
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2b01      	cmp	r3, #1
 8002418:	d106      	bne.n	8002428 <_Z13move_servo_bwi+0x32>
		TIM2->CCR2 -= 1;
 800241a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800241e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002420:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002424:	3b01      	subs	r3, #1
 8002426:	6393      	str	r3, [r2, #56]	; 0x38
}
 8002428:	bf00      	nop
 800242a:	370c      	adds	r7, #12
 800242c:	46bd      	mov	sp, r7
 800242e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002432:	4770      	bx	lr

08002434 <HAL_UART_TxCpltCallback>:

// ROS serial functions
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 8002434:	b580      	push	{r7, lr}
 8002436:	b082      	sub	sp, #8
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
  nh.getHardware()->flush();
 800243c:	4805      	ldr	r0, [pc, #20]	; (8002454 <HAL_UART_TxCpltCallback+0x20>)
 800243e:	f000 fbb7 	bl	8002bb0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 8002442:	4603      	mov	r3, r0
 8002444:	4618      	mov	r0, r3
 8002446:	f7ff faaf 	bl	80019a8 <_ZN13STM32Hardware5flushEv>
}
 800244a:	bf00      	nop
 800244c:	3708      	adds	r7, #8
 800244e:	46bd      	mov	sp, r7
 8002450:	bd80      	pop	{r7, pc}
 8002452:	bf00      	nop
 8002454:	200002d8 	.word	0x200002d8

08002458 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8002458:	b580      	push	{r7, lr}
 800245a:	b082      	sub	sp, #8
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
  nh.getHardware()->reset_rbuf();
 8002460:	4805      	ldr	r0, [pc, #20]	; (8002478 <HAL_UART_RxCpltCallback+0x20>)
 8002462:	f000 fba5 	bl	8002bb0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 8002466:	4603      	mov	r3, r0
 8002468:	4618      	mov	r0, r3
 800246a:	f7ff fa5e 	bl	800192a <_ZN13STM32Hardware10reset_rbufEv>
}
 800246e:	bf00      	nop
 8002470:	3708      	adds	r7, #8
 8002472:	46bd      	mov	sp, r7
 8002474:	bd80      	pop	{r7, pc}
 8002476:	bf00      	nop
 8002478:	200002d8 	.word	0x200002d8

0800247c <_Z5setupv>:

void setup(void)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	af00      	add	r7, sp, #0
  nh.initNode();
 8002480:	4806      	ldr	r0, [pc, #24]	; (800249c <_Z5setupv+0x20>)
 8002482:	f000 fba1 	bl	8002bc8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>
  nh.advertise(chatter);
 8002486:	4906      	ldr	r1, [pc, #24]	; (80024a0 <_Z5setupv+0x24>)
 8002488:	4804      	ldr	r0, [pc, #16]	; (800249c <_Z5setupv+0x20>)
 800248a:	f000 fbba 	bl	8002c02 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>
  nh.subscribe(stm32_comms);
 800248e:	4905      	ldr	r1, [pc, #20]	; (80024a4 <_Z5setupv+0x28>)
 8002490:	4802      	ldr	r0, [pc, #8]	; (800249c <_Z5setupv+0x20>)
 8002492:	f000 fbe6 	bl	8002c62 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E>
}
 8002496:	bf00      	nop
 8002498:	bd80      	pop	{r7, pc}
 800249a:	bf00      	nop
 800249c:	200002d8 	.word	0x200002d8
 80024a0:	20000c1c 	.word	0x20000c1c
 80024a4:	20000c30 	.word	0x20000c30

080024a8 <_Z4loopv>:

void loop(void)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b082      	sub	sp, #8
 80024ac:	af00      	add	r7, sp, #0
  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80024ae:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80024b2:	480a      	ldr	r0, [pc, #40]	; (80024dc <_Z4loopv+0x34>)
 80024b4:	f002 feb7 	bl	8005226 <HAL_GPIO_TogglePin>
  const char* str = hello.c_str();
 80024b8:	4809      	ldr	r0, [pc, #36]	; (80024e0 <_Z4loopv+0x38>)
 80024ba:	f008 fbf6 	bl	800acaa <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 80024be:	6078      	str	r0, [r7, #4]
  str_msg.data = str;
 80024c0:	4a08      	ldr	r2, [pc, #32]	; (80024e4 <_Z4loopv+0x3c>)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6053      	str	r3, [r2, #4]
  chatter.publish(&str_msg);
 80024c6:	4907      	ldr	r1, [pc, #28]	; (80024e4 <_Z4loopv+0x3c>)
 80024c8:	4807      	ldr	r0, [pc, #28]	; (80024e8 <_Z4loopv+0x40>)
 80024ca:	f7ff f9d4 	bl	8001876 <_ZN3ros9Publisher7publishEPKNS_3MsgE>
  nh.spinOnce();
 80024ce:	4807      	ldr	r0, [pc, #28]	; (80024ec <_Z4loopv+0x44>)
 80024d0:	f000 fbf2 	bl	8002cb8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>
}
 80024d4:	bf00      	nop
 80024d6:	3708      	adds	r7, #8
 80024d8:	46bd      	mov	sp, r7
 80024da:	bd80      	pop	{r7, pc}
 80024dc:	40020800 	.word	0x40020800
 80024e0:	20000c4c 	.word	0x20000c4c
 80024e4:	20000c14 	.word	0x20000c14
 80024e8:	20000c1c 	.word	0x20000c1c
 80024ec:	200002d8 	.word	0x200002d8

080024f0 <_Z11str_act_msgRKN8std_msgs6StringE>:

void str_act_msg(const std_msgs::String& msg){
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b082      	sub	sp, #8
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
	hello = msg.data;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	4619      	mov	r1, r3
 80024fe:	4806      	ldr	r0, [pc, #24]	; (8002518 <_Z11str_act_msgRKN8std_msgs6StringE+0x28>)
 8002500:	f008 fbcf 	bl	800aca2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
	global_msg = msg.data;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	4619      	mov	r1, r3
 800250a:	4804      	ldr	r0, [pc, #16]	; (800251c <_Z11str_act_msgRKN8std_msgs6StringE+0x2c>)
 800250c:	f008 fbc9 	bl	800aca2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
}
 8002510:	bf00      	nop
 8002512:	3708      	adds	r7, #8
 8002514:	46bd      	mov	sp, r7
 8002516:	bd80      	pop	{r7, pc}
 8002518:	20000c4c 	.word	0x20000c4c
 800251c:	20000c64 	.word	0x20000c64

08002520 <_Z12StartTaskADCPv>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartTaskADC */
void StartTaskADC(void *argument)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b082      	sub	sp, #8
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */ //here
  /* Infinite loop */
  for(;;)
  {
	  if (gripper_instruction_flag != 0 || art_instruction_flag !=0){
 8002528:	4b0a      	ldr	r3, [pc, #40]	; (8002554 <_Z12StartTaskADCPv+0x34>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	2b00      	cmp	r3, #0
 800252e:	d103      	bne.n	8002538 <_Z12StartTaskADCPv+0x18>
 8002530:	4b09      	ldr	r3, [pc, #36]	; (8002558 <_Z12StartTaskADCPv+0x38>)
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	2b00      	cmp	r3, #0
 8002536:	d008      	beq.n	800254a <_Z12StartTaskADCPv+0x2a>
		  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_result, adc_channel_count);
 8002538:	2202      	movs	r2, #2
 800253a:	4908      	ldr	r1, [pc, #32]	; (800255c <_Z12StartTaskADCPv+0x3c>)
 800253c:	4808      	ldr	r0, [pc, #32]	; (8002560 <_Z12StartTaskADCPv+0x40>)
 800253e:	f001 fc2b 	bl	8003d98 <HAL_ADC_Start_DMA>
		  osDelay(100);
 8002542:	2064      	movs	r0, #100	; 0x64
 8002544:	f005 fdd4 	bl	80080f0 <osDelay>
 8002548:	e003      	b.n	8002552 <_Z12StartTaskADCPv+0x32>
	  }
	  else{
		  osDelay(500);
 800254a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800254e:	f005 fdcf 	bl	80080f0 <osDelay>
	  if (gripper_instruction_flag != 0 || art_instruction_flag !=0){
 8002552:	e7e9      	b.n	8002528 <_Z12StartTaskADCPv+0x8>
 8002554:	200002cc 	.word	0x200002cc
 8002558:	200002d0 	.word	0x200002d0
 800255c:	200002b8 	.word	0x200002b8
 8002560:	20000098 	.word	0x20000098

08002564 <_Z20StartGripperOpenTaskPv>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartGripperOpenTask */
void StartGripperOpenTask(void *argument)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b082      	sub	sp, #8
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartGripperOpenTask */
  /* Infinite loop */
  for(;;)
	{
		if (!emergency_stop && gripper_instruction_flag == 1){
 800256c:	4b14      	ldr	r3, [pc, #80]	; (80025c0 <_Z20StartGripperOpenTaskPv+0x5c>)
 800256e:	781b      	ldrb	r3, [r3, #0]
 8002570:	f083 0301 	eor.w	r3, r3, #1
 8002574:	b2db      	uxtb	r3, r3
 8002576:	2b00      	cmp	r3, #0
 8002578:	d01e      	beq.n	80025b8 <_Z20StartGripperOpenTaskPv+0x54>
 800257a:	4b12      	ldr	r3, [pc, #72]	; (80025c4 <_Z20StartGripperOpenTaskPv+0x60>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	2b01      	cmp	r3, #1
 8002580:	d11a      	bne.n	80025b8 <_Z20StartGripperOpenTaskPv+0x54>
			do{
				move_servo_bw(0);
 8002582:	2000      	movs	r0, #0
 8002584:	f7ff ff37 	bl	80023f6 <_Z13move_servo_bwi>
				osDelay(50);
 8002588:	2032      	movs	r0, #50	; 0x32
 800258a:	f005 fdb1 	bl	80080f0 <osDelay>
				ang[0] = pwm_to_ang(0);
 800258e:	2000      	movs	r0, #0
 8002590:	f7ff fe70 	bl	8002274 <_Z10pwm_to_angi>
 8002594:	eef0 7a40 	vmov.f32	s15, s0
 8002598:	4b0b      	ldr	r3, [pc, #44]	; (80025c8 <_Z20StartGripperOpenTaskPv+0x64>)
 800259a:	edc3 7a00 	vstr	s15, [r3]
			}
			while(ang[0] > GRIPPER_OPENED_ANG);
 800259e:	4b0a      	ldr	r3, [pc, #40]	; (80025c8 <_Z20StartGripperOpenTaskPv+0x64>)
 80025a0:	edd3 7a00 	vldr	s15, [r3]
 80025a4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80025a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025ac:	dd00      	ble.n	80025b0 <_Z20StartGripperOpenTaskPv+0x4c>
			do{
 80025ae:	e7e8      	b.n	8002582 <_Z20StartGripperOpenTaskPv+0x1e>
			gripper_instruction_flag = 0;
 80025b0:	4b04      	ldr	r3, [pc, #16]	; (80025c4 <_Z20StartGripperOpenTaskPv+0x60>)
 80025b2:	2200      	movs	r2, #0
 80025b4:	601a      	str	r2, [r3, #0]
 80025b6:	e002      	b.n	80025be <_Z20StartGripperOpenTaskPv+0x5a>
		}
		else{
		  osDelay(200);
 80025b8:	20c8      	movs	r0, #200	; 0xc8
 80025ba:	f005 fd99 	bl	80080f0 <osDelay>
		if (!emergency_stop && gripper_instruction_flag == 1){
 80025be:	e7d5      	b.n	800256c <_Z20StartGripperOpenTaskPv+0x8>
 80025c0:	200002d5 	.word	0x200002d5
 80025c4:	200002cc 	.word	0x200002cc
 80025c8:	200002b0 	.word	0x200002b0

080025cc <_Z21StartGripperCloseTaskPv>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartGripperCloseTask */
void StartGripperCloseTask(void *argument)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b082      	sub	sp, #8
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartGripperCloseTask */
  /* Infinite loop */
  for(;;)
  {
	if (!emergency_stop && gripper_instruction_flag == 2){
 80025d4:	4b1b      	ldr	r3, [pc, #108]	; (8002644 <_Z21StartGripperCloseTaskPv+0x78>)
 80025d6:	781b      	ldrb	r3, [r3, #0]
 80025d8:	f083 0301 	eor.w	r3, r3, #1
 80025dc:	b2db      	uxtb	r3, r3
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d02c      	beq.n	800263c <_Z21StartGripperCloseTaskPv+0x70>
 80025e2:	4b19      	ldr	r3, [pc, #100]	; (8002648 <_Z21StartGripperCloseTaskPv+0x7c>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	2b02      	cmp	r3, #2
 80025e8:	d128      	bne.n	800263c <_Z21StartGripperCloseTaskPv+0x70>
			do{
				move_servo_fw(0);
 80025ea:	2000      	movs	r0, #0
 80025ec:	f7ff fee4 	bl	80023b8 <_Z13move_servo_fwi>
				osDelay(50);
 80025f0:	2032      	movs	r0, #50	; 0x32
 80025f2:	f005 fd7d 	bl	80080f0 <osDelay>
				ang[0] = pwm_to_ang(0);
 80025f6:	2000      	movs	r0, #0
 80025f8:	f7ff fe3c 	bl	8002274 <_Z10pwm_to_angi>
 80025fc:	eef0 7a40 	vmov.f32	s15, s0
 8002600:	4b12      	ldr	r3, [pc, #72]	; (800264c <_Z21StartGripperCloseTaskPv+0x80>)
 8002602:	edc3 7a00 	vstr	s15, [r3]
			}
			while(ang[0] < GRIPPER_CLOSED_ANG && !button_pressed);
 8002606:	4b11      	ldr	r3, [pc, #68]	; (800264c <_Z21StartGripperCloseTaskPv+0x80>)
 8002608:	edd3 7a00 	vldr	s15, [r3]
 800260c:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8002650 <_Z21StartGripperCloseTaskPv+0x84>
 8002610:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002614:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002618:	bf4c      	ite	mi
 800261a:	2301      	movmi	r3, #1
 800261c:	2300      	movpl	r3, #0
 800261e:	b2db      	uxtb	r3, r3
 8002620:	f083 0301 	eor.w	r3, r3, #1
 8002624:	b2db      	uxtb	r3, r3
 8002626:	2b00      	cmp	r3, #0
 8002628:	d104      	bne.n	8002634 <_Z21StartGripperCloseTaskPv+0x68>
 800262a:	4b0a      	ldr	r3, [pc, #40]	; (8002654 <_Z21StartGripperCloseTaskPv+0x88>)
 800262c:	781b      	ldrb	r3, [r3, #0]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d100      	bne.n	8002634 <_Z21StartGripperCloseTaskPv+0x68>
			do{
 8002632:	e7da      	b.n	80025ea <_Z21StartGripperCloseTaskPv+0x1e>
			gripper_instruction_flag = 0;
 8002634:	4b04      	ldr	r3, [pc, #16]	; (8002648 <_Z21StartGripperCloseTaskPv+0x7c>)
 8002636:	2200      	movs	r2, #0
 8002638:	601a      	str	r2, [r3, #0]
 800263a:	e002      	b.n	8002642 <_Z21StartGripperCloseTaskPv+0x76>
		}
		else{
		  osDelay(200);
 800263c:	20c8      	movs	r0, #200	; 0xc8
 800263e:	f005 fd57 	bl	80080f0 <osDelay>
	if (!emergency_stop && gripper_instruction_flag == 2){
 8002642:	e7c7      	b.n	80025d4 <_Z21StartGripperCloseTaskPv+0x8>
 8002644:	200002d5 	.word	0x200002d5
 8002648:	200002cc 	.word	0x200002cc
 800264c:	200002b0 	.word	0x200002b0
 8002650:	429c0000 	.word	0x429c0000
 8002654:	200002d4 	.word	0x200002d4

08002658 <_Z20StartGripperGoToTaskPv>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartGripperGoToTask */
void StartGripperGoToTask(void *argument)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b082      	sub	sp, #8
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartGripperGoToTask */
  /* Infinite loop */
  for(;;)
  {
	  if (!emergency_stop && gripper_instruction_flag == 3){
 8002660:	4b16      	ldr	r3, [pc, #88]	; (80026bc <_Z20StartGripperGoToTaskPv+0x64>)
 8002662:	781b      	ldrb	r3, [r3, #0]
 8002664:	f083 0301 	eor.w	r3, r3, #1
 8002668:	b2db      	uxtb	r3, r3
 800266a:	2b00      	cmp	r3, #0
 800266c:	d021      	beq.n	80026b2 <_Z20StartGripperGoToTaskPv+0x5a>
 800266e:	4b14      	ldr	r3, [pc, #80]	; (80026c0 <_Z20StartGripperGoToTaskPv+0x68>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	2b03      	cmp	r3, #3
 8002674:	d11d      	bne.n	80026b2 <_Z20StartGripperGoToTaskPv+0x5a>
			move_servo_to(0, ang_to_pwm(gripper_go_to));
 8002676:	4b13      	ldr	r3, [pc, #76]	; (80026c4 <_Z20StartGripperGoToTaskPv+0x6c>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	4618      	mov	r0, r3
 800267c:	f7ff fe58 	bl	8002330 <_Z10ang_to_pwmi>
 8002680:	eef0 7a40 	vmov.f32	s15, s0
 8002684:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002688:	ee17 1a90 	vmov	r1, s15
 800268c:	2000      	movs	r0, #0
 800268e:	f7ff fe79 	bl	8002384 <_Z13move_servo_toii>
			osDelay(500);
 8002692:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002696:	f005 fd2b 	bl	80080f0 <osDelay>
			ang[0] = pwm_to_ang(0);
 800269a:	2000      	movs	r0, #0
 800269c:	f7ff fdea 	bl	8002274 <_Z10pwm_to_angi>
 80026a0:	eef0 7a40 	vmov.f32	s15, s0
 80026a4:	4b08      	ldr	r3, [pc, #32]	; (80026c8 <_Z20StartGripperGoToTaskPv+0x70>)
 80026a6:	edc3 7a00 	vstr	s15, [r3]
			gripper_instruction_flag = 0;
 80026aa:	4b05      	ldr	r3, [pc, #20]	; (80026c0 <_Z20StartGripperGoToTaskPv+0x68>)
 80026ac:	2200      	movs	r2, #0
 80026ae:	601a      	str	r2, [r3, #0]
 80026b0:	e002      	b.n	80026b8 <_Z20StartGripperGoToTaskPv+0x60>
		}
		else{
		  osDelay(200);
 80026b2:	20c8      	movs	r0, #200	; 0xc8
 80026b4:	f005 fd1c 	bl	80080f0 <osDelay>
	  if (!emergency_stop && gripper_instruction_flag == 3){
 80026b8:	e7d2      	b.n	8002660 <_Z20StartGripperGoToTaskPv+0x8>
 80026ba:	bf00      	nop
 80026bc:	200002d5 	.word	0x200002d5
 80026c0:	200002cc 	.word	0x200002cc
 80026c4:	200002bc 	.word	0x200002bc
 80026c8:	200002b0 	.word	0x200002b0

080026cc <_Z18StartTaskRosserialPv>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskRosserial */
void StartTaskRosserial(void *argument)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b082      	sub	sp, #8
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskRosserial */
  /* Infinite loop */
  for(;;)
  {
	loop();
 80026d4:	f7ff fee8 	bl	80024a8 <_Z4loopv>
	get_servo_pos_liveExpression();
 80026d8:	f7ff fdb4 	bl	8002244 <_Z28get_servo_pos_liveExpressionv>
	if (global_msg[0] == 'g'){
 80026dc:	2100      	movs	r1, #0
 80026de:	483f      	ldr	r0, [pc, #252]	; (80027dc <_Z18StartTaskRosserialPv+0x110>)
 80026e0:	f008 fa4f 	bl	800ab82 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 80026e4:	4603      	mov	r3, r0
 80026e6:	781b      	ldrb	r3, [r3, #0]
 80026e8:	2b67      	cmp	r3, #103	; 0x67
 80026ea:	bf0c      	ite	eq
 80026ec:	2301      	moveq	r3, #1
 80026ee:	2300      	movne	r3, #0
 80026f0:	b2db      	uxtb	r3, r3
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d021      	beq.n	800273a <_Z18StartTaskRosserialPv+0x6e>
		if(global_msg[1] == 'o'){
 80026f6:	2101      	movs	r1, #1
 80026f8:	4838      	ldr	r0, [pc, #224]	; (80027dc <_Z18StartTaskRosserialPv+0x110>)
 80026fa:	f008 fa42 	bl	800ab82 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 80026fe:	4603      	mov	r3, r0
 8002700:	781b      	ldrb	r3, [r3, #0]
 8002702:	2b6f      	cmp	r3, #111	; 0x6f
 8002704:	bf0c      	ite	eq
 8002706:	2301      	moveq	r3, #1
 8002708:	2300      	movne	r3, #0
 800270a:	b2db      	uxtb	r3, r3
 800270c:	2b00      	cmp	r3, #0
 800270e:	d003      	beq.n	8002718 <_Z18StartTaskRosserialPv+0x4c>
			gripper_instruction_flag = 1;
 8002710:	4b33      	ldr	r3, [pc, #204]	; (80027e0 <_Z18StartTaskRosserialPv+0x114>)
 8002712:	2201      	movs	r2, #1
 8002714:	601a      	str	r2, [r3, #0]
 8002716:	e058      	b.n	80027ca <_Z18StartTaskRosserialPv+0xfe>
		}
		else if (global_msg[1] == 'c'){
 8002718:	2101      	movs	r1, #1
 800271a:	4830      	ldr	r0, [pc, #192]	; (80027dc <_Z18StartTaskRosserialPv+0x110>)
 800271c:	f008 fa31 	bl	800ab82 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 8002720:	4603      	mov	r3, r0
 8002722:	781b      	ldrb	r3, [r3, #0]
 8002724:	2b63      	cmp	r3, #99	; 0x63
 8002726:	bf0c      	ite	eq
 8002728:	2301      	moveq	r3, #1
 800272a:	2300      	movne	r3, #0
 800272c:	b2db      	uxtb	r3, r3
 800272e:	2b00      	cmp	r3, #0
 8002730:	d04b      	beq.n	80027ca <_Z18StartTaskRosserialPv+0xfe>
			gripper_instruction_flag = 2;
 8002732:	4b2b      	ldr	r3, [pc, #172]	; (80027e0 <_Z18StartTaskRosserialPv+0x114>)
 8002734:	2202      	movs	r2, #2
 8002736:	601a      	str	r2, [r3, #0]
 8002738:	e047      	b.n	80027ca <_Z18StartTaskRosserialPv+0xfe>

		}
	}
	else if (global_msg[0] == 'p'){
 800273a:	2100      	movs	r1, #0
 800273c:	4827      	ldr	r0, [pc, #156]	; (80027dc <_Z18StartTaskRosserialPv+0x110>)
 800273e:	f008 fa20 	bl	800ab82 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 8002742:	4603      	mov	r3, r0
 8002744:	781b      	ldrb	r3, [r3, #0]
 8002746:	2b70      	cmp	r3, #112	; 0x70
 8002748:	bf0c      	ite	eq
 800274a:	2301      	moveq	r3, #1
 800274c:	2300      	movne	r3, #0
 800274e:	b2db      	uxtb	r3, r3
 8002750:	2b00      	cmp	r3, #0
 8002752:	d00c      	beq.n	800276e <_Z18StartTaskRosserialPv+0xa2>
		gripper_instruction_flag = 3;
 8002754:	4b22      	ldr	r3, [pc, #136]	; (80027e0 <_Z18StartTaskRosserialPv+0x114>)
 8002756:	2203      	movs	r2, #3
 8002758:	601a      	str	r2, [r3, #0]
		gripper_go_to = (int)global_msg[1];
 800275a:	2101      	movs	r1, #1
 800275c:	481f      	ldr	r0, [pc, #124]	; (80027dc <_Z18StartTaskRosserialPv+0x110>)
 800275e:	f008 fa10 	bl	800ab82 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 8002762:	4603      	mov	r3, r0
 8002764:	781b      	ldrb	r3, [r3, #0]
 8002766:	461a      	mov	r2, r3
 8002768:	4b1e      	ldr	r3, [pc, #120]	; (80027e4 <_Z18StartTaskRosserialPv+0x118>)
 800276a:	601a      	str	r2, [r3, #0]
 800276c:	e02d      	b.n	80027ca <_Z18StartTaskRosserialPv+0xfe>

	}
	else if (global_msg[0] == 'a'){
 800276e:	2100      	movs	r1, #0
 8002770:	481a      	ldr	r0, [pc, #104]	; (80027dc <_Z18StartTaskRosserialPv+0x110>)
 8002772:	f008 fa06 	bl	800ab82 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 8002776:	4603      	mov	r3, r0
 8002778:	781b      	ldrb	r3, [r3, #0]
 800277a:	2b61      	cmp	r3, #97	; 0x61
 800277c:	bf0c      	ite	eq
 800277e:	2301      	moveq	r3, #1
 8002780:	2300      	movne	r3, #0
 8002782:	b2db      	uxtb	r3, r3
 8002784:	2b00      	cmp	r3, #0
 8002786:	d020      	beq.n	80027ca <_Z18StartTaskRosserialPv+0xfe>
		if(global_msg[1] == 'd'){
 8002788:	2101      	movs	r1, #1
 800278a:	4814      	ldr	r0, [pc, #80]	; (80027dc <_Z18StartTaskRosserialPv+0x110>)
 800278c:	f008 f9f9 	bl	800ab82 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 8002790:	4603      	mov	r3, r0
 8002792:	781b      	ldrb	r3, [r3, #0]
 8002794:	2b64      	cmp	r3, #100	; 0x64
 8002796:	bf0c      	ite	eq
 8002798:	2301      	moveq	r3, #1
 800279a:	2300      	movne	r3, #0
 800279c:	b2db      	uxtb	r3, r3
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d003      	beq.n	80027aa <_Z18StartTaskRosserialPv+0xde>
			art_instruction_flag = 1;
 80027a2:	4b11      	ldr	r3, [pc, #68]	; (80027e8 <_Z18StartTaskRosserialPv+0x11c>)
 80027a4:	2201      	movs	r2, #1
 80027a6:	601a      	str	r2, [r3, #0]
 80027a8:	e00f      	b.n	80027ca <_Z18StartTaskRosserialPv+0xfe>
		}
		else if (global_msg[1] == 'u'){
 80027aa:	2101      	movs	r1, #1
 80027ac:	480b      	ldr	r0, [pc, #44]	; (80027dc <_Z18StartTaskRosserialPv+0x110>)
 80027ae:	f008 f9e8 	bl	800ab82 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 80027b2:	4603      	mov	r3, r0
 80027b4:	781b      	ldrb	r3, [r3, #0]
 80027b6:	2b75      	cmp	r3, #117	; 0x75
 80027b8:	bf0c      	ite	eq
 80027ba:	2301      	moveq	r3, #1
 80027bc:	2300      	movne	r3, #0
 80027be:	b2db      	uxtb	r3, r3
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d002      	beq.n	80027ca <_Z18StartTaskRosserialPv+0xfe>
			art_instruction_flag = 2;
 80027c4:	4b08      	ldr	r3, [pc, #32]	; (80027e8 <_Z18StartTaskRosserialPv+0x11c>)
 80027c6:	2202      	movs	r2, #2
 80027c8:	601a      	str	r2, [r3, #0]
		}
	}
	global_msg = "";
 80027ca:	4908      	ldr	r1, [pc, #32]	; (80027ec <_Z18StartTaskRosserialPv+0x120>)
 80027cc:	4803      	ldr	r0, [pc, #12]	; (80027dc <_Z18StartTaskRosserialPv+0x110>)
 80027ce:	f008 fa68 	bl	800aca2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
	osDelay(300);
 80027d2:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80027d6:	f005 fc8b 	bl	80080f0 <osDelay>
	loop();
 80027da:	e77b      	b.n	80026d4 <_Z18StartTaskRosserialPv+0x8>
 80027dc:	20000c64 	.word	0x20000c64
 80027e0:	200002cc 	.word	0x200002cc
 80027e4:	200002bc 	.word	0x200002bc
 80027e8:	200002d0 	.word	0x200002d0
 80027ec:	0800b298 	.word	0x0800b298

080027f0 <_Z15StartButtonTaskPv>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartButtonTask */
void StartButtonTask(void *argument)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b082      	sub	sp, #8
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartButtonTask */
  /* Infinite loop */
  for(;;)
  {
	button_pressed = HAL_GPIO_ReadPin(Push_Button_GPIO_Port, Push_Button_Pin);
 80027f8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80027fc:	4807      	ldr	r0, [pc, #28]	; (800281c <_Z15StartButtonTaskPv+0x2c>)
 80027fe:	f002 fce1 	bl	80051c4 <HAL_GPIO_ReadPin>
 8002802:	4603      	mov	r3, r0
 8002804:	2b00      	cmp	r3, #0
 8002806:	bf14      	ite	ne
 8002808:	2301      	movne	r3, #1
 800280a:	2300      	moveq	r3, #0
 800280c:	b2da      	uxtb	r2, r3
 800280e:	4b04      	ldr	r3, [pc, #16]	; (8002820 <_Z15StartButtonTaskPv+0x30>)
 8002810:	701a      	strb	r2, [r3, #0]
    osDelay(100);
 8002812:	2064      	movs	r0, #100	; 0x64
 8002814:	f005 fc6c 	bl	80080f0 <osDelay>
	button_pressed = HAL_GPIO_ReadPin(Push_Button_GPIO_Port, Push_Button_Pin);
 8002818:	e7ee      	b.n	80027f8 <_Z15StartButtonTaskPv+0x8>
 800281a:	bf00      	nop
 800281c:	40020000 	.word	0x40020000
 8002820:	200002d4 	.word	0x200002d4

08002824 <_Z14StartArtUpTaskPv>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartArtUpTask */
void StartArtUpTask(void *argument)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b082      	sub	sp, #8
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartArtUpTask */
  /* Infinite loop */
  for(;;)
  {
  	if (!emergency_stop && art_instruction_flag == 2){
 800282c:	4b15      	ldr	r3, [pc, #84]	; (8002884 <_Z14StartArtUpTaskPv+0x60>)
 800282e:	781b      	ldrb	r3, [r3, #0]
 8002830:	f083 0301 	eor.w	r3, r3, #1
 8002834:	b2db      	uxtb	r3, r3
 8002836:	2b00      	cmp	r3, #0
 8002838:	d020      	beq.n	800287c <_Z14StartArtUpTaskPv+0x58>
 800283a:	4b13      	ldr	r3, [pc, #76]	; (8002888 <_Z14StartArtUpTaskPv+0x64>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	2b02      	cmp	r3, #2
 8002840:	d11c      	bne.n	800287c <_Z14StartArtUpTaskPv+0x58>
  			do{
  				move_servo_fw(1);
 8002842:	2001      	movs	r0, #1
 8002844:	f7ff fdb8 	bl	80023b8 <_Z13move_servo_fwi>
  				osDelay(50);
 8002848:	2032      	movs	r0, #50	; 0x32
 800284a:	f005 fc51 	bl	80080f0 <osDelay>
  				ang[1] = pwm_to_ang(1);
 800284e:	2001      	movs	r0, #1
 8002850:	f7ff fd10 	bl	8002274 <_Z10pwm_to_angi>
 8002854:	eef0 7a40 	vmov.f32	s15, s0
 8002858:	4b0c      	ldr	r3, [pc, #48]	; (800288c <_Z14StartArtUpTaskPv+0x68>)
 800285a:	edc3 7a01 	vstr	s15, [r3, #4]
  			}
  			while(ang[1] < ART_UP_ANG);
 800285e:	4b0b      	ldr	r3, [pc, #44]	; (800288c <_Z14StartArtUpTaskPv+0x68>)
 8002860:	edd3 7a01 	vldr	s15, [r3, #4]
 8002864:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8002890 <_Z14StartArtUpTaskPv+0x6c>
 8002868:	eef4 7ac7 	vcmpe.f32	s15, s14
 800286c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002870:	d500      	bpl.n	8002874 <_Z14StartArtUpTaskPv+0x50>
  			do{
 8002872:	e7e6      	b.n	8002842 <_Z14StartArtUpTaskPv+0x1e>
  			art_instruction_flag = 0;
 8002874:	4b04      	ldr	r3, [pc, #16]	; (8002888 <_Z14StartArtUpTaskPv+0x64>)
 8002876:	2200      	movs	r2, #0
 8002878:	601a      	str	r2, [r3, #0]
 800287a:	e002      	b.n	8002882 <_Z14StartArtUpTaskPv+0x5e>
  		}
  		else{
  		  osDelay(200);
 800287c:	20c8      	movs	r0, #200	; 0xc8
 800287e:	f005 fc37 	bl	80080f0 <osDelay>
  	if (!emergency_stop && art_instruction_flag == 2){
 8002882:	e7d3      	b.n	800282c <_Z14StartArtUpTaskPv+0x8>
 8002884:	200002d5 	.word	0x200002d5
 8002888:	200002d0 	.word	0x200002d0
 800288c:	200002b0 	.word	0x200002b0
 8002890:	42b40000 	.word	0x42b40000

08002894 <_Z16StartArtDownTaskPv>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartArtDownTask */
void StartArtDownTask(void *argument)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b082      	sub	sp, #8
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartArtDownTask */
  /* Infinite loop */
  for(;;)
	{
		if (!emergency_stop && art_instruction_flag == 1){
 800289c:	4b14      	ldr	r3, [pc, #80]	; (80028f0 <_Z16StartArtDownTaskPv+0x5c>)
 800289e:	781b      	ldrb	r3, [r3, #0]
 80028a0:	f083 0301 	eor.w	r3, r3, #1
 80028a4:	b2db      	uxtb	r3, r3
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d01e      	beq.n	80028e8 <_Z16StartArtDownTaskPv+0x54>
 80028aa:	4b12      	ldr	r3, [pc, #72]	; (80028f4 <_Z16StartArtDownTaskPv+0x60>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	2b01      	cmp	r3, #1
 80028b0:	d11a      	bne.n	80028e8 <_Z16StartArtDownTaskPv+0x54>
			do{
				move_servo_bw(1);
 80028b2:	2001      	movs	r0, #1
 80028b4:	f7ff fd9f 	bl	80023f6 <_Z13move_servo_bwi>
				osDelay(50);
 80028b8:	2032      	movs	r0, #50	; 0x32
 80028ba:	f005 fc19 	bl	80080f0 <osDelay>
				ang[1] = pwm_to_ang(1);
 80028be:	2001      	movs	r0, #1
 80028c0:	f7ff fcd8 	bl	8002274 <_Z10pwm_to_angi>
 80028c4:	eef0 7a40 	vmov.f32	s15, s0
 80028c8:	4b0b      	ldr	r3, [pc, #44]	; (80028f8 <_Z16StartArtDownTaskPv+0x64>)
 80028ca:	edc3 7a01 	vstr	s15, [r3, #4]
			}
			while(ang[1] > ART_DOWN_ANG);
 80028ce:	4b0a      	ldr	r3, [pc, #40]	; (80028f8 <_Z16StartArtDownTaskPv+0x64>)
 80028d0:	edd3 7a01 	vldr	s15, [r3, #4]
 80028d4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80028d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028dc:	dd00      	ble.n	80028e0 <_Z16StartArtDownTaskPv+0x4c>
			do{
 80028de:	e7e8      	b.n	80028b2 <_Z16StartArtDownTaskPv+0x1e>
			art_instruction_flag = 0;
 80028e0:	4b04      	ldr	r3, [pc, #16]	; (80028f4 <_Z16StartArtDownTaskPv+0x60>)
 80028e2:	2200      	movs	r2, #0
 80028e4:	601a      	str	r2, [r3, #0]
 80028e6:	e002      	b.n	80028ee <_Z16StartArtDownTaskPv+0x5a>
		}
		else{
		  osDelay(200);
 80028e8:	20c8      	movs	r0, #200	; 0xc8
 80028ea:	f005 fc01 	bl	80080f0 <osDelay>
		if (!emergency_stop && art_instruction_flag == 1){
 80028ee:	e7d5      	b.n	800289c <_Z16StartArtDownTaskPv+0x8>
 80028f0:	200002d5 	.word	0x200002d5
 80028f4:	200002d0 	.word	0x200002d0
 80028f8:	200002b0 	.word	0x200002b0

080028fc <_Z16StartArtGoToTaskPv>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartArtGoToTask */
void StartArtGoToTask(void *argument)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b082      	sub	sp, #8
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartArtGoToTask */
  /* Infinite loop */
  for(;;)
  {
  	  if (!emergency_stop && art_instruction_flag == 3){
 8002904:	4b16      	ldr	r3, [pc, #88]	; (8002960 <_Z16StartArtGoToTaskPv+0x64>)
 8002906:	781b      	ldrb	r3, [r3, #0]
 8002908:	f083 0301 	eor.w	r3, r3, #1
 800290c:	b2db      	uxtb	r3, r3
 800290e:	2b00      	cmp	r3, #0
 8002910:	d021      	beq.n	8002956 <_Z16StartArtGoToTaskPv+0x5a>
 8002912:	4b14      	ldr	r3, [pc, #80]	; (8002964 <_Z16StartArtGoToTaskPv+0x68>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	2b03      	cmp	r3, #3
 8002918:	d11d      	bne.n	8002956 <_Z16StartArtGoToTaskPv+0x5a>
  			move_servo_to(1, ang_to_pwm(art_go_to));
 800291a:	4b13      	ldr	r3, [pc, #76]	; (8002968 <_Z16StartArtGoToTaskPv+0x6c>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	4618      	mov	r0, r3
 8002920:	f7ff fd06 	bl	8002330 <_Z10ang_to_pwmi>
 8002924:	eef0 7a40 	vmov.f32	s15, s0
 8002928:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800292c:	ee17 1a90 	vmov	r1, s15
 8002930:	2001      	movs	r0, #1
 8002932:	f7ff fd27 	bl	8002384 <_Z13move_servo_toii>
  			osDelay(2000);
 8002936:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800293a:	f005 fbd9 	bl	80080f0 <osDelay>
  			ang[1] = pwm_to_ang(1);
 800293e:	2001      	movs	r0, #1
 8002940:	f7ff fc98 	bl	8002274 <_Z10pwm_to_angi>
 8002944:	eef0 7a40 	vmov.f32	s15, s0
 8002948:	4b08      	ldr	r3, [pc, #32]	; (800296c <_Z16StartArtGoToTaskPv+0x70>)
 800294a:	edc3 7a01 	vstr	s15, [r3, #4]
  			gripper_instruction_flag = 0;
 800294e:	4b08      	ldr	r3, [pc, #32]	; (8002970 <_Z16StartArtGoToTaskPv+0x74>)
 8002950:	2200      	movs	r2, #0
 8002952:	601a      	str	r2, [r3, #0]
 8002954:	e002      	b.n	800295c <_Z16StartArtGoToTaskPv+0x60>
  		}
  		else{
  		  osDelay(200);
 8002956:	20c8      	movs	r0, #200	; 0xc8
 8002958:	f005 fbca 	bl	80080f0 <osDelay>
  	  if (!emergency_stop && art_instruction_flag == 3){
 800295c:	e7d2      	b.n	8002904 <_Z16StartArtGoToTaskPv+0x8>
 800295e:	bf00      	nop
 8002960:	200002d5 	.word	0x200002d5
 8002964:	200002d0 	.word	0x200002d0
 8002968:	200002c0 	.word	0x200002c0
 800296c:	200002b0 	.word	0x200002b0
 8002970:	200002cc 	.word	0x200002cc

08002974 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b082      	sub	sp, #8
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5) {
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	4a04      	ldr	r2, [pc, #16]	; (8002994 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002982:	4293      	cmp	r3, r2
 8002984:	d101      	bne.n	800298a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002986:	f001 f9a3 	bl	8003cd0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800298a:	bf00      	nop
 800298c:	3708      	adds	r7, #8
 800298e:	46bd      	mov	sp, r7
 8002990:	bd80      	pop	{r7, pc}
 8002992:	bf00      	nop
 8002994:	40000c00 	.word	0x40000c00

08002998 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002998:	b480      	push	{r7}
 800299a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800299c:	b672      	cpsid	i
}
 800299e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80029a0:	e7fe      	b.n	80029a0 <Error_Handler+0x8>

080029a2 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>:
    return 8;
  }

  // Copy data from variable into a byte array
  template<typename A, typename V>
  static void varToArr(A arr, const V var)
 80029a2:	b480      	push	{r7}
 80029a4:	b085      	sub	sp, #20
 80029a6:	af00      	add	r7, sp, #0
 80029a8:	6078      	str	r0, [r7, #4]
 80029aa:	6039      	str	r1, [r7, #0]
  {
    for (size_t i = 0; i < sizeof(V); i++)
 80029ac:	2300      	movs	r3, #0
 80029ae:	60fb      	str	r3, [r7, #12]
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	2b03      	cmp	r3, #3
 80029b4:	d80d      	bhi.n	80029d2 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x30>
      arr[i] = (var >> (8 * i));
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	00db      	lsls	r3, r3, #3
 80029ba:	683a      	ldr	r2, [r7, #0]
 80029bc:	fa22 f103 	lsr.w	r1, r2, r3
 80029c0:	687a      	ldr	r2, [r7, #4]
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	4413      	add	r3, r2
 80029c6:	b2ca      	uxtb	r2, r1
 80029c8:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	3301      	adds	r3, #1
 80029ce:	60fb      	str	r3, [r7, #12]
 80029d0:	e7ee      	b.n	80029b0 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0xe>
  }
 80029d2:	bf00      	nop
 80029d4:	3714      	adds	r7, #20
 80029d6:	46bd      	mov	sp, r7
 80029d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029dc:	4770      	bx	lr

080029de <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>:

  // Copy data from a byte array into variable
  template<typename V, typename A>
  static void arrToVar(V& var, const A arr)
 80029de:	b480      	push	{r7}
 80029e0:	b085      	sub	sp, #20
 80029e2:	af00      	add	r7, sp, #0
 80029e4:	6078      	str	r0, [r7, #4]
 80029e6:	6039      	str	r1, [r7, #0]
  {
    var = 0;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2200      	movs	r2, #0
 80029ec:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 80029ee:	2300      	movs	r3, #0
 80029f0:	60fb      	str	r3, [r7, #12]
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	2b03      	cmp	r3, #3
 80029f6:	d811      	bhi.n	8002a1c <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x3e>
      var |= (arr[i] << (8 * i));
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	6839      	ldr	r1, [r7, #0]
 80029fe:	68fa      	ldr	r2, [r7, #12]
 8002a00:	440a      	add	r2, r1
 8002a02:	7812      	ldrb	r2, [r2, #0]
 8002a04:	4611      	mov	r1, r2
 8002a06:	68fa      	ldr	r2, [r7, #12]
 8002a08:	00d2      	lsls	r2, r2, #3
 8002a0a:	fa01 f202 	lsl.w	r2, r1, r2
 8002a0e:	431a      	orrs	r2, r3
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	3301      	adds	r3, #1
 8002a18:	60fb      	str	r3, [r7, #12]
 8002a1a:	e7ea      	b.n	80029f2 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x14>
  }
 8002a1c:	bf00      	nop
 8002a1e:	3714      	adds	r7, #20
 8002a20:	46bd      	mov	sp, r7
 8002a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a26:	4770      	bx	lr

08002a28 <_ZN3ros15NodeHandleBase_C1Ev>:
#include "ros/msg.h"

namespace ros
{

class NodeHandleBase_
 8002a28:	b480      	push	{r7}
 8002a2a:	b083      	sub	sp, #12
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
 8002a30:	4a04      	ldr	r2, [pc, #16]	; (8002a44 <_ZN3ros15NodeHandleBase_C1Ev+0x1c>)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	601a      	str	r2, [r3, #0]
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	4618      	mov	r0, r3
 8002a3a:	370c      	adds	r7, #12
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a42:	4770      	bx	lr
 8002a44:	0800b628 	.word	0x0800b628

08002a48 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>:

  /*
   * Setup Functions
   */
public:
  NodeHandle_() : configured_(false)
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b086      	sub	sp, #24
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	4618      	mov	r0, r3
 8002a54:	f7ff ffe8 	bl	8002a28 <_ZN3ros15NodeHandleBase_C1Ev>
 8002a58:	4a3a      	ldr	r2, [pc, #232]	; (8002b44 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xfc>)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	601a      	str	r2, [r3, #0]
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	3304      	adds	r3, #4
 8002a62:	4618      	mov	r0, r3
 8002a64:	f7fe ff3a 	bl	80018dc <_ZN13STM32HardwareC1Ev>
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	f603 1314 	addw	r3, r3, #2324	; 0x914
 8002a76:	4618      	mov	r0, r3
 8002a78:	f7fe fc24 	bl	80012c4 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>
  {

    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	617b      	str	r3, [r7, #20]
 8002a80:	697b      	ldr	r3, [r7, #20]
 8002a82:	2b18      	cmp	r3, #24
 8002a84:	d80b      	bhi.n	8002a9e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x56>
      publishers[i] = 0;
 8002a86:	687a      	ldr	r2, [r7, #4]
 8002a88:	697b      	ldr	r3, [r7, #20]
 8002a8a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002a8e:	009b      	lsls	r3, r3, #2
 8002a90:	4413      	add	r3, r2
 8002a92:	2200      	movs	r2, #0
 8002a94:	605a      	str	r2, [r3, #4]
    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 8002a96:	697b      	ldr	r3, [r7, #20]
 8002a98:	3301      	adds	r3, #1
 8002a9a:	617b      	str	r3, [r7, #20]
 8002a9c:	e7f0      	b.n	8002a80 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x38>

    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	613b      	str	r3, [r7, #16]
 8002aa2:	693b      	ldr	r3, [r7, #16]
 8002aa4:	2b18      	cmp	r3, #24
 8002aa6:	d80a      	bhi.n	8002abe <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x76>
      subscribers[i] = 0;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	693a      	ldr	r2, [r7, #16]
 8002aac:	f202 2222 	addw	r2, r2, #546	; 0x222
 8002ab0:	2100      	movs	r1, #0
 8002ab2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 8002ab6:	693b      	ldr	r3, [r7, #16]
 8002ab8:	3301      	adds	r3, #1
 8002aba:	613b      	str	r3, [r7, #16]
 8002abc:	e7f1      	b.n	8002aa2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x5a>

    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 8002abe:	2300      	movs	r3, #0
 8002ac0:	60fb      	str	r3, [r7, #12]
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ac8:	d20a      	bcs.n	8002ae0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x98>
      message_in[i] = 0;
 8002aca:	687a      	ldr	r2, [r7, #4]
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	4413      	add	r3, r2
 8002ad0:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	3301      	adds	r3, #1
 8002adc:	60fb      	str	r3, [r7, #12]
 8002ade:	e7f0      	b.n	8002ac2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x7a>

    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	60bb      	str	r3, [r7, #8]
 8002ae4:	68bb      	ldr	r3, [r7, #8]
 8002ae6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002aea:	d20a      	bcs.n	8002b02 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xba>
      message_out[i] = 0;
 8002aec:	687a      	ldr	r2, [r7, #4]
 8002aee:	68bb      	ldr	r3, [r7, #8]
 8002af0:	4413      	add	r3, r2
 8002af2:	f203 6324 	addw	r3, r3, #1572	; 0x624
 8002af6:	2200      	movs	r2, #0
 8002af8:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 8002afa:	68bb      	ldr	r3, [r7, #8]
 8002afc:	3301      	adds	r3, #1
 8002afe:	60bb      	str	r3, [r7, #8]
 8002b00:	e7f0      	b.n	8002ae4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x9c>

    req_param_resp.ints_length = 0;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	2200      	movs	r2, #0
 8002b06:	f8c3 2918 	str.w	r2, [r3, #2328]	; 0x918
    req_param_resp.ints = NULL;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	f8c3 2920 	str.w	r2, [r3, #2336]	; 0x920
    req_param_resp.floats_length = 0;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	2200      	movs	r2, #0
 8002b16:	f8c3 2924 	str.w	r2, [r3, #2340]	; 0x924
    req_param_resp.floats = NULL;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	f8c3 292c 	str.w	r2, [r3, #2348]	; 0x92c
    req_param_resp.ints_length = 0;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	2200      	movs	r2, #0
 8002b26:	f8c3 2918 	str.w	r2, [r3, #2328]	; 0x918
    req_param_resp.ints = NULL;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	f8c3 2920 	str.w	r2, [r3, #2336]	; 0x920

    spin_timeout_ = 0;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	2200      	movs	r2, #0
 8002b36:	f8c3 2420 	str.w	r2, [r3, #1056]	; 0x420
  }
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	3718      	adds	r7, #24
 8002b40:	46bd      	mov	sp, r7
 8002b42:	bd80      	pop	{r7, pc}
 8002b44:	0800b5e4 	.word	0x0800b5e4

08002b48 <_ZN3ros11Subscriber_C1Ev>:

namespace ros
{

/* Base class for objects subscribers. */
class Subscriber_
 8002b48:	b480      	push	{r7}
 8002b4a:	b083      	sub	sp, #12
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
 8002b50:	4a04      	ldr	r2, [pc, #16]	; (8002b64 <_ZN3ros11Subscriber_C1Ev+0x1c>)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	601a      	str	r2, [r3, #0]
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	4618      	mov	r0, r3
 8002b5a:	370c      	adds	r7, #12
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b62:	4770      	bx	lr
 8002b64:	0800b610 	.word	0x0800b610

08002b68 <_ZN3ros10SubscriberIN8std_msgs6StringEvEC1EPKcPFvRKS2_Ei>:
{
public:
  typedef void(*CallbackT)(const MsgT&);
  MsgT msg;

  Subscriber(const char * topic_name, CallbackT cb, int endpoint = rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b084      	sub	sp, #16
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	60f8      	str	r0, [r7, #12]
 8002b70:	60b9      	str	r1, [r7, #8]
 8002b72:	607a      	str	r2, [r7, #4]
 8002b74:	603b      	str	r3, [r7, #0]
    cb_(cb),
    endpoint_(endpoint)
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	4618      	mov	r0, r3
 8002b7a:	f7ff ffe5 	bl	8002b48 <_ZN3ros11Subscriber_C1Ev>
 8002b7e:	4a0b      	ldr	r2, [pc, #44]	; (8002bac <_ZN3ros10SubscriberIN8std_msgs6StringEvEC1EPKcPFvRKS2_Ei+0x44>)
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	601a      	str	r2, [r3, #0]
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	330c      	adds	r3, #12
 8002b88:	4618      	mov	r0, r3
 8002b8a:	f7fe ffd3 	bl	8001b34 <_ZN8std_msgs6StringC1Ev>
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	687a      	ldr	r2, [r7, #4]
 8002b92:	615a      	str	r2, [r3, #20]
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	683a      	ldr	r2, [r7, #0]
 8002b98:	619a      	str	r2, [r3, #24]
  {
    topic_ = topic_name;
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	68ba      	ldr	r2, [r7, #8]
 8002b9e:	609a      	str	r2, [r3, #8]
  };
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	3710      	adds	r7, #16
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bd80      	pop	{r7, pc}
 8002baa:	bf00      	nop
 8002bac:	0800b5cc 	.word	0x0800b5cc

08002bb0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>:

  Hardware* getHardware()
 8002bb0:	b480      	push	{r7}
 8002bb2:	b083      	sub	sp, #12
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
  {
    return &hardware_;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	3304      	adds	r3, #4
  }
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	370c      	adds	r7, #12
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc6:	4770      	bx	lr

08002bc8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>:

  /* Start serial, initialize buffers */
  void initNode()
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b082      	sub	sp, #8
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
  {
    hardware_.init();
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	3304      	adds	r3, #4
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	f7fe fe9d 	bl	8001914 <_ZN13STM32Hardware4initEv>
    mode_ = 0;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	2200      	movs	r2, #0
 8002bde:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
    bytes_ = 0;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2200      	movs	r2, #0
 8002be6:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
    index_ = 0;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	2200      	movs	r2, #0
 8002bee:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
    topic_ = 0;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
  };
 8002bfa:	bf00      	nop
 8002bfc:	3708      	adds	r7, #8
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	bd80      	pop	{r7, pc}

08002c02 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>:
  /********************************************************************
   * Topic Management
   */

  /* Register a new publisher */
  bool advertise(Publisher & p)
 8002c02:	b480      	push	{r7}
 8002c04:	b085      	sub	sp, #20
 8002c06:	af00      	add	r7, sp, #0
 8002c08:	6078      	str	r0, [r7, #4]
 8002c0a:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	60fb      	str	r3, [r7, #12]
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	2b18      	cmp	r3, #24
 8002c14:	dc1e      	bgt.n	8002c54 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x52>
    {
      if (publishers[i] == 0) // empty slot
 8002c16:	687a      	ldr	r2, [r7, #4]
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002c1e:	009b      	lsls	r3, r3, #2
 8002c20:	4413      	add	r3, r2
 8002c22:	685b      	ldr	r3, [r3, #4]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d111      	bne.n	8002c4c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x4a>
      {
        publishers[i] = &p;
 8002c28:	687a      	ldr	r2, [r7, #4]
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002c30:	009b      	lsls	r3, r3, #2
 8002c32:	4413      	add	r3, r2
 8002c34:	683a      	ldr	r2, [r7, #0]
 8002c36:	605a      	str	r2, [r3, #4]
        p.id_ = i + 100 + MAX_SUBSCRIBERS;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	f103 027d 	add.w	r2, r3, #125	; 0x7d
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	609a      	str	r2, [r3, #8]
        p.nh_ = this;
 8002c42:	687a      	ldr	r2, [r7, #4]
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	60da      	str	r2, [r3, #12]
        return true;
 8002c48:	2301      	movs	r3, #1
 8002c4a:	e004      	b.n	8002c56 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x54>
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	3301      	adds	r3, #1
 8002c50:	60fb      	str	r3, [r7, #12]
 8002c52:	e7dd      	b.n	8002c10 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0xe>
      }
    }
    return false;
 8002c54:	2300      	movs	r3, #0
  }
 8002c56:	4618      	mov	r0, r3
 8002c58:	3714      	adds	r7, #20
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c60:	4770      	bx	lr

08002c62 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E>:

  /* Register a new subscriber */
  bool subscribe(Subscriber_& s)
 8002c62:	b480      	push	{r7}
 8002c64:	b085      	sub	sp, #20
 8002c66:	af00      	add	r7, sp, #0
 8002c68:	6078      	str	r0, [r7, #4]
 8002c6a:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	60fb      	str	r3, [r7, #12]
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	2b18      	cmp	r3, #24
 8002c74:	dc19      	bgt.n	8002caa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E+0x48>
    {
      if (subscribers[i] == 0) // empty slot
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	68fa      	ldr	r2, [r7, #12]
 8002c7a:	f202 2222 	addw	r2, r2, #546	; 0x222
 8002c7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d10d      	bne.n	8002ca2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E+0x40>
      {
        subscribers[i] = &s;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	68fa      	ldr	r2, [r7, #12]
 8002c8a:	f202 2222 	addw	r2, r2, #546	; 0x222
 8002c8e:	6839      	ldr	r1, [r7, #0]
 8002c90:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        s.id_ = i + 100;
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	f103 0264 	add.w	r2, r3, #100	; 0x64
 8002c9a:	683b      	ldr	r3, [r7, #0]
 8002c9c:	605a      	str	r2, [r3, #4]
        return true;
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	e004      	b.n	8002cac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E+0x4a>
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	3301      	adds	r3, #1
 8002ca6:	60fb      	str	r3, [r7, #12]
 8002ca8:	e7e2      	b.n	8002c70 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E+0xe>
      }
    }
    return false;
 8002caa:	2300      	movs	r3, #0
  }
 8002cac:	4618      	mov	r0, r3
 8002cae:	3714      	adds	r7, #20
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb6:	4770      	bx	lr

08002cb8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>:
  virtual int spinOnce()
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b084      	sub	sp, #16
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
    uint32_t c_time = hardware_.time();
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	3304      	adds	r3, #4
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	f7fe ff29 	bl	8001b1c <_ZN13STM32Hardware4timeEv>
 8002cca:	60f8      	str	r0, [r7, #12]
    if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200))
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	f8d3 3908 	ldr.w	r3, [r3, #2312]	; 0x908
 8002cd2:	68fa      	ldr	r2, [r7, #12]
 8002cd4:	1ad3      	subs	r3, r2, r3
 8002cd6:	f642 22f8 	movw	r2, #11000	; 0x2af8
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d903      	bls.n	8002ce6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2e>
      configured_ = false;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
    if (mode_ != MODE_FIRST_FF)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d009      	beq.n	8002d04 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      if (c_time > last_msg_timeout_time)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	f8d3 390c 	ldr.w	r3, [r3, #2316]	; 0x90c
 8002cf6:	68fa      	ldr	r2, [r7, #12]
 8002cf8:	429a      	cmp	r2, r3
 8002cfa:	d903      	bls.n	8002d04 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2200      	movs	r2, #0
 8002d00:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
      if (spin_timeout_ > 0)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d014      	beq.n	8002d38 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x80>
        if ((hardware_.time() - c_time) > spin_timeout_)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	3304      	adds	r3, #4
 8002d12:	4618      	mov	r0, r3
 8002d14:	f7fe ff02 	bl	8001b1c <_ZN13STM32Hardware4timeEv>
 8002d18:	4602      	mov	r2, r0
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	1ad2      	subs	r2, r2, r3
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 8002d24:	429a      	cmp	r2, r3
 8002d26:	bf8c      	ite	hi
 8002d28:	2301      	movhi	r3, #1
 8002d2a:	2300      	movls	r3, #0
 8002d2c:	b2db      	uxtb	r3, r3
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d002      	beq.n	8002d38 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x80>
          return SPIN_TIMEOUT;
 8002d32:	f06f 0301 	mvn.w	r3, #1
 8002d36:	e194      	b.n	8003062 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
      int data = hardware_.read();
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	3304      	adds	r3, #4
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	f7fe fe05 	bl	800194c <_ZN13STM32Hardware4readEv>
 8002d42:	60b8      	str	r0, [r7, #8]
      if (data < 0)
 8002d44:	68bb      	ldr	r3, [r7, #8]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	f2c0 8174 	blt.w	8003034 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x37c>
      checksum_ += data;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	f8d3 28fc 	ldr.w	r2, [r3, #2300]	; 0x8fc
 8002d52:	68bb      	ldr	r3, [r7, #8]
 8002d54:	441a      	add	r2, r3
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8002d62:	2b07      	cmp	r3, #7
 8002d64:	d11e      	bne.n	8002da4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0xec>
        message_in[index_++] = data;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	f8d3 38f8 	ldr.w	r3, [r3, #2296]	; 0x8f8
 8002d6c:	1c59      	adds	r1, r3, #1
 8002d6e:	687a      	ldr	r2, [r7, #4]
 8002d70:	f8c2 18f8 	str.w	r1, [r2, #2296]	; 0x8f8
 8002d74:	68ba      	ldr	r2, [r7, #8]
 8002d76:	b2d1      	uxtb	r1, r2
 8002d78:	687a      	ldr	r2, [r7, #4]
 8002d7a:	4413      	add	r3, r2
 8002d7c:	460a      	mov	r2, r1
 8002d7e:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
        bytes_--;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 8002d88:	1e5a      	subs	r2, r3, #1
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        if (bytes_ == 0)                 /* is message complete? if so, checksum */
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d1b4      	bne.n	8002d04 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	2208      	movs	r2, #8
 8002d9e:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8002da2:	e7af      	b.n	8002d04 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_FIRST_FF)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d128      	bne.n	8002e00 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x148>
        if (data == 0xff)
 8002dae:	68bb      	ldr	r3, [r7, #8]
 8002db0:	2bff      	cmp	r3, #255	; 0xff
 8002db2:	d10d      	bne.n	8002dd0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x118>
          mode_++;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8002dba:	1c5a      	adds	r2, r3, #1
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	f103 0214 	add.w	r2, r3, #20
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	f8c3 290c 	str.w	r2, [r3, #2316]	; 0x90c
 8002dce:	e799      	b.n	8002d04 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000))
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	3304      	adds	r3, #4
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	f7fe fea1 	bl	8001b1c <_ZN13STM32Hardware4timeEv>
 8002dda:	4602      	mov	r2, r0
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	1ad3      	subs	r3, r2, r3
 8002de0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002de4:	4293      	cmp	r3, r2
 8002de6:	bf8c      	ite	hi
 8002de8:	2301      	movhi	r3, #1
 8002dea:	2300      	movls	r3, #0
 8002dec:	b2db      	uxtb	r3, r3
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d088      	beq.n	8002d04 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          configured_ = false;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	2200      	movs	r2, #0
 8002df6:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
          return SPIN_TIMEOUT;
 8002dfa:	f06f 0301 	mvn.w	r3, #1
 8002dfe:	e130      	b.n	8003062 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
      else if (mode_ == MODE_PROTOCOL_VER)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8002e06:	2b01      	cmp	r3, #1
 8002e08:	d118      	bne.n	8002e3c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x184>
        if (data == PROTOCOL_VER)
 8002e0a:	68bb      	ldr	r3, [r7, #8]
 8002e0c:	2bfe      	cmp	r3, #254	; 0xfe
 8002e0e:	d107      	bne.n	8002e20 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x168>
          mode_++;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8002e16:	1c5a      	adds	r2, r3, #1
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8002e1e:	e771      	b.n	8002d04 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2200      	movs	r2, #0
 8002e24:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
          if (configured_ == false)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	f47f af68 	bne.w	8002d04 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            requestSyncTime();  /* send a msg back showing our protocol version */
 8002e34:	6878      	ldr	r0, [r7, #4]
 8002e36:	f000 f918 	bl	800306a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
 8002e3a:	e763      	b.n	8002d04 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_L)      /* bottom half of message size */
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8002e42:	2b02      	cmp	r3, #2
 8002e44:	d113      	bne.n	8002e6e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1b6>
        bytes_ = data;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	68ba      	ldr	r2, [r7, #8]
 8002e4a:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        index_ = 0;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2200      	movs	r2, #0
 8002e52:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
        mode_++;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8002e5c:	1c5a      	adds	r2, r3, #1
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        checksum_ = data;               /* first byte for calculating size checksum */
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	68ba      	ldr	r2, [r7, #8]
 8002e68:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
 8002e6c:	e74a      	b.n	8002d04 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_H)      /* top half of message size */
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8002e74:	2b03      	cmp	r3, #3
 8002e76:	d110      	bne.n	8002e9a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1e2>
        bytes_ += data << 8;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	f8d3 28f0 	ldr.w	r2, [r3, #2288]	; 0x8f0
 8002e7e:	68bb      	ldr	r3, [r7, #8]
 8002e80:	021b      	lsls	r3, r3, #8
 8002e82:	441a      	add	r2, r3
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        mode_++;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8002e90:	1c5a      	adds	r2, r3, #1
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8002e98:	e734      	b.n	8002d04 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_CHECKSUM)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8002ea0:	2b04      	cmp	r3, #4
 8002ea2:	d116      	bne.n	8002ed2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x21a>
        if ((checksum_ % 256) == 255)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	; 0x8fc
 8002eaa:	425a      	negs	r2, r3
 8002eac:	b2db      	uxtb	r3, r3
 8002eae:	b2d2      	uxtb	r2, r2
 8002eb0:	bf58      	it	pl
 8002eb2:	4253      	negpl	r3, r2
 8002eb4:	2bff      	cmp	r3, #255	; 0xff
 8002eb6:	d107      	bne.n	8002ec8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x210>
          mode_++;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8002ebe:	1c5a      	adds	r2, r3, #1
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8002ec6:	e71d      	b.n	8002d04 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2200      	movs	r2, #0
 8002ecc:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8002ed0:	e718      	b.n	8002d04 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_L)     /* bottom half of topic id */
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8002ed8:	2b05      	cmp	r3, #5
 8002eda:	d10f      	bne.n	8002efc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x244>
        topic_ = data;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	68ba      	ldr	r2, [r7, #8]
 8002ee0:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
        mode_++;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8002eea:	1c5a      	adds	r2, r3, #1
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        checksum_ = data;               /* first byte included in checksum */
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	68ba      	ldr	r2, [r7, #8]
 8002ef6:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
 8002efa:	e703      	b.n	8002d04 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_H)     /* top half of topic id */
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8002f02:	2b06      	cmp	r3, #6
 8002f04:	d117      	bne.n	8002f36 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x27e>
        topic_ += data << 8;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	f8d3 28f4 	ldr.w	r2, [r3, #2292]	; 0x8f4
 8002f0c:	68bb      	ldr	r3, [r7, #8]
 8002f0e:	021b      	lsls	r3, r3, #8
 8002f10:	441a      	add	r2, r3
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
        mode_ = MODE_MESSAGE;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2207      	movs	r2, #7
 8002f1c:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        if (bytes_ == 0)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	f47f aeec 	bne.w	8002d04 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2208      	movs	r2, #8
 8002f30:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8002f34:	e6e6      	b.n	8002d04 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_MSG_CHECKSUM)    /* do checksum */
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8002f3c:	2b08      	cmp	r3, #8
 8002f3e:	f47f aee1 	bne.w	8002d04 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	2200      	movs	r2, #0
 8002f46:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        if ((checksum_ % 256) == 255)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	; 0x8fc
 8002f50:	425a      	negs	r2, r3
 8002f52:	b2db      	uxtb	r3, r3
 8002f54:	b2d2      	uxtb	r2, r2
 8002f56:	bf58      	it	pl
 8002f58:	4253      	negpl	r3, r2
 8002f5a:	2bff      	cmp	r3, #255	; 0xff
 8002f5c:	f47f aed2 	bne.w	8002d04 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          if (topic_ == TopicInfo::ID_PUBLISHER)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d110      	bne.n	8002f8c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2d4>
            requestSyncTime();
 8002f6a:	6878      	ldr	r0, [r7, #4]
 8002f6c:	f000 f87d 	bl	800306a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
            negotiateTopics();
 8002f70:	6878      	ldr	r0, [r7, #4]
 8002f72:	f000 f898 	bl	80030a6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>
            last_sync_time = c_time;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	68fa      	ldr	r2, [r7, #12]
 8002f7a:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
            last_sync_receive_time = c_time;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	68fa      	ldr	r2, [r7, #12]
 8002f82:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
            return SPIN_ERR;
 8002f86:	f04f 33ff 	mov.w	r3, #4294967295
 8002f8a:	e06a      	b.n	8003062 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
          else if (topic_ == TopicInfo::ID_TIME)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8002f92:	2b0a      	cmp	r3, #10
 8002f94:	d107      	bne.n	8002fa6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2ee>
            syncTime(message_in);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8002f9c:	4619      	mov	r1, r3
 8002f9e:	6878      	ldr	r0, [r7, #4]
 8002fa0:	f000 f960 	bl	8003264 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>
 8002fa4:	e6ae      	b.n	8002d04 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8002fac:	2b06      	cmp	r3, #6
 8002fae:	d10e      	bne.n	8002fce <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x316>
            req_param_resp.deserialize(message_in);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	f603 1214 	addw	r2, r3, #2324	; 0x914
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8002fbc:	4619      	mov	r1, r3
 8002fbe:	4610      	mov	r0, r2
 8002fc0:	f7fe fab5 	bl	800152e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>
            param_recieved = true;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2201      	movs	r2, #1
 8002fc8:	f883 2910 	strb.w	r2, [r3, #2320]	; 0x910
 8002fcc:	e69a      	b.n	8002d04 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_TX_STOP)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8002fd4:	2b0b      	cmp	r3, #11
 8002fd6:	d104      	bne.n	8002fe2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x32a>
            configured_ = false;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2200      	movs	r2, #0
 8002fdc:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
 8002fe0:	e690      	b.n	8002d04 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            if (subscribers[topic_ - 100])
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8002fe8:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	f202 2222 	addw	r2, r2, #546	; 0x222
 8002ff2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	f43f ae84 	beq.w	8002d04 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
              subscribers[topic_ - 100]->callback(message_in);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8003002:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	f202 2222 	addw	r2, r2, #546	; 0x222
 800300c:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8003016:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003020:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	687a      	ldr	r2, [r7, #4]
 800302a:	f202 4224 	addw	r2, r2, #1060	; 0x424
 800302e:	4611      	mov	r1, r2
 8003030:	4798      	blx	r3
    while (true)
 8003032:	e667      	b.n	8002d04 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        break;
 8003034:	bf00      	nop
    if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 800303c:	2b00      	cmp	r3, #0
 800303e:	d00f      	beq.n	8003060 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3a8>
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	f8d3 3904 	ldr.w	r3, [r3, #2308]	; 0x904
 8003046:	68fa      	ldr	r2, [r7, #12]
 8003048:	1ad3      	subs	r3, r2, r3
 800304a:	f640 12c4 	movw	r2, #2500	; 0x9c4
 800304e:	4293      	cmp	r3, r2
 8003050:	d906      	bls.n	8003060 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3a8>
      requestSyncTime();
 8003052:	6878      	ldr	r0, [r7, #4]
 8003054:	f000 f809 	bl	800306a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
      last_sync_time = c_time;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	68fa      	ldr	r2, [r7, #12]
 800305c:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
    return SPIN_OK;
 8003060:	2300      	movs	r3, #0
  }
 8003062:	4618      	mov	r0, r3
 8003064:	3710      	adds	r7, #16
 8003066:	46bd      	mov	sp, r7
 8003068:	bd80      	pop	{r7, pc}

0800306a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>:
  void requestSyncTime()
 800306a:	b580      	push	{r7, lr}
 800306c:	b086      	sub	sp, #24
 800306e:	af00      	add	r7, sp, #0
 8003070:	6078      	str	r0, [r7, #4]
    std_msgs::Time t;
 8003072:	f107 030c 	add.w	r3, r7, #12
 8003076:	4618      	mov	r0, r3
 8003078:	f7fd fdc0 	bl	8000bfc <_ZN8std_msgs4TimeC1Ev>
    publish(TopicInfo::ID_TIME, &t);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f107 020c 	add.w	r2, r7, #12
 8003086:	210a      	movs	r1, #10
 8003088:	6878      	ldr	r0, [r7, #4]
 800308a:	4798      	blx	r3
    rt_time = hardware_.time();
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	3304      	adds	r3, #4
 8003090:	4618      	mov	r0, r3
 8003092:	f7fe fd43 	bl	8001b1c <_ZN13STM32Hardware4timeEv>
 8003096:	4602      	mov	r2, r0
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
  }
 800309e:	bf00      	nop
 80030a0:	3718      	adds	r7, #24
 80030a2:	46bd      	mov	sp, r7
 80030a4:	bd80      	pop	{r7, pc}

080030a6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>:
    bool v = advertise(srv.pub);
    bool w = subscribe(srv);
    return v && w;
  }

  void negotiateTopics()
 80030a6:	b590      	push	{r4, r7, lr}
 80030a8:	b08b      	sub	sp, #44	; 0x2c
 80030aa:	af00      	add	r7, sp, #0
 80030ac:	6078      	str	r0, [r7, #4]
  {
    rosserial_msgs::TopicInfo ti;
 80030ae:	f107 030c 	add.w	r3, r7, #12
 80030b2:	4618      	mov	r0, r3
 80030b4:	f7fd fe92 	bl	8000ddc <_ZN14rosserial_msgs9TopicInfoC1Ev>
    int i;
    for (i = 0; i < MAX_PUBLISHERS; i++)
 80030b8:	2300      	movs	r3, #0
 80030ba:	627b      	str	r3, [r7, #36]	; 0x24
 80030bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030be:	2b18      	cmp	r3, #24
 80030c0:	dc63      	bgt.n	800318a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xe4>
    {
      if (publishers[i] != 0) // non-empty slot
 80030c2:	687a      	ldr	r2, [r7, #4]
 80030c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030c6:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80030ca:	009b      	lsls	r3, r3, #2
 80030cc:	4413      	add	r3, r2
 80030ce:	685b      	ldr	r3, [r3, #4]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d056      	beq.n	8003182 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xdc>
      {
        ti.topic_id = publishers[i]->id_;
 80030d4:	687a      	ldr	r2, [r7, #4]
 80030d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030d8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80030dc:	009b      	lsls	r3, r3, #2
 80030de:	4413      	add	r3, r2
 80030e0:	685b      	ldr	r3, [r3, #4]
 80030e2:	689b      	ldr	r3, [r3, #8]
 80030e4:	b29b      	uxth	r3, r3
 80030e6:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) publishers[i]->topic_;
 80030e8:	687a      	ldr	r2, [r7, #4]
 80030ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ec:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80030f0:	009b      	lsls	r3, r3, #2
 80030f2:	4413      	add	r3, r2
 80030f4:	685b      	ldr	r3, [r3, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) publishers[i]->msg_->getType();
 80030fa:	687a      	ldr	r2, [r7, #4]
 80030fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030fe:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003102:	009b      	lsls	r3, r3, #2
 8003104:	4413      	add	r3, r2
 8003106:	685b      	ldr	r3, [r3, #4]
 8003108:	6859      	ldr	r1, [r3, #4]
 800310a:	687a      	ldr	r2, [r7, #4]
 800310c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800310e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003112:	009b      	lsls	r3, r3, #2
 8003114:	4413      	add	r3, r2
 8003116:	685b      	ldr	r3, [r3, #4]
 8003118:	685b      	ldr	r3, [r3, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	3308      	adds	r3, #8
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4608      	mov	r0, r1
 8003122:	4798      	blx	r3
 8003124:	4603      	mov	r3, r0
 8003126:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 8003128:	687a      	ldr	r2, [r7, #4]
 800312a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800312c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003130:	009b      	lsls	r3, r3, #2
 8003132:	4413      	add	r3, r2
 8003134:	685b      	ldr	r3, [r3, #4]
 8003136:	6859      	ldr	r1, [r3, #4]
 8003138:	687a      	ldr	r2, [r7, #4]
 800313a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800313c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003140:	009b      	lsls	r3, r3, #2
 8003142:	4413      	add	r3, r2
 8003144:	685b      	ldr	r3, [r3, #4]
 8003146:	685b      	ldr	r3, [r3, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	330c      	adds	r3, #12
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	4608      	mov	r0, r1
 8003150:	4798      	blx	r3
 8003152:	4603      	mov	r3, r0
 8003154:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = OUTPUT_SIZE;
 8003156:	f44f 7300 	mov.w	r3, #512	; 0x200
 800315a:	623b      	str	r3, [r7, #32]
        publish(publishers[i]->getEndpointType(), &ti);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	681c      	ldr	r4, [r3, #0]
 8003162:	687a      	ldr	r2, [r7, #4]
 8003164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003166:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800316a:	009b      	lsls	r3, r3, #2
 800316c:	4413      	add	r3, r2
 800316e:	685b      	ldr	r3, [r3, #4]
 8003170:	4618      	mov	r0, r3
 8003172:	f7fe fb94 	bl	800189e <_ZN3ros9Publisher15getEndpointTypeEv>
 8003176:	4601      	mov	r1, r0
 8003178:	f107 030c 	add.w	r3, r7, #12
 800317c:	461a      	mov	r2, r3
 800317e:	6878      	ldr	r0, [r7, #4]
 8003180:	47a0      	blx	r4
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8003182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003184:	3301      	adds	r3, #1
 8003186:	627b      	str	r3, [r7, #36]	; 0x24
 8003188:	e798      	b.n	80030bc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x16>
      }
    }
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 800318a:	2300      	movs	r3, #0
 800318c:	627b      	str	r3, [r7, #36]	; 0x24
 800318e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003190:	2b18      	cmp	r3, #24
 8003192:	dc5f      	bgt.n	8003254 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1ae>
    {
      if (subscribers[i] != 0) // non-empty slot
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003198:	f202 2222 	addw	r2, r2, #546	; 0x222
 800319c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d053      	beq.n	800324c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1a6>
      {
        ti.topic_id = subscribers[i]->id_;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031a8:	f202 2222 	addw	r2, r2, #546	; 0x222
 80031ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80031b0:	685b      	ldr	r3, [r3, #4]
 80031b2:	b29b      	uxth	r3, r3
 80031b4:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) subscribers[i]->topic_;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031ba:	f202 2222 	addw	r2, r2, #546	; 0x222
 80031be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80031c2:	689b      	ldr	r3, [r3, #8]
 80031c4:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) subscribers[i]->getMsgType();
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031ca:	f202 2222 	addw	r2, r2, #546	; 0x222
 80031ce:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031d6:	f202 2222 	addw	r2, r2, #546	; 0x222
 80031da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	3308      	adds	r3, #8
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	4608      	mov	r0, r1
 80031e6:	4798      	blx	r3
 80031e8:	4603      	mov	r3, r0
 80031ea:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031f0:	f202 2222 	addw	r2, r2, #546	; 0x222
 80031f4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031fc:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003200:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	330c      	adds	r3, #12
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	4608      	mov	r0, r1
 800320c:	4798      	blx	r3
 800320e:	4603      	mov	r3, r0
 8003210:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = INPUT_SIZE;
 8003212:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003216:	623b      	str	r3, [r7, #32]
        publish(subscribers[i]->getEndpointType(), &ti);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	681c      	ldr	r4, [r3, #0]
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003222:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003226:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800322e:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003232:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	3304      	adds	r3, #4
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	4608      	mov	r0, r1
 800323e:	4798      	blx	r3
 8003240:	4601      	mov	r1, r0
 8003242:	f107 030c 	add.w	r3, r7, #12
 8003246:	461a      	mov	r2, r3
 8003248:	6878      	ldr	r0, [r7, #4]
 800324a:	47a0      	blx	r4
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 800324c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800324e:	3301      	adds	r3, #1
 8003250:	627b      	str	r3, [r7, #36]	; 0x24
 8003252:	e79c      	b.n	800318e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xe8>
      }
    }
    configured_ = true;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2201      	movs	r2, #1
 8003258:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
  }
 800325c:	bf00      	nop
 800325e:	372c      	adds	r7, #44	; 0x2c
 8003260:	46bd      	mov	sp, r7
 8003262:	bd90      	pop	{r4, r7, pc}

08003264 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>:
  void syncTime(uint8_t * data)
 8003264:	b580      	push	{r7, lr}
 8003266:	b086      	sub	sp, #24
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
 800326c:	6039      	str	r1, [r7, #0]
    std_msgs::Time t;
 800326e:	f107 0308 	add.w	r3, r7, #8
 8003272:	4618      	mov	r0, r3
 8003274:	f7fd fcc2 	bl	8000bfc <_ZN8std_msgs4TimeC1Ev>
    uint32_t offset = hardware_.time() - rt_time;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	3304      	adds	r3, #4
 800327c:	4618      	mov	r0, r3
 800327e:	f7fe fc4d 	bl	8001b1c <_ZN13STM32Hardware4timeEv>
 8003282:	4602      	mov	r2, r0
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 800328a:	1ad3      	subs	r3, r2, r3
 800328c:	617b      	str	r3, [r7, #20]
    t.deserialize(data);
 800328e:	f107 0308 	add.w	r3, r7, #8
 8003292:	6839      	ldr	r1, [r7, #0]
 8003294:	4618      	mov	r0, r3
 8003296:	f7fd fd21 	bl	8000cdc <_ZN8std_msgs4Time11deserializeEPh>
    t.data.sec += offset / 1000;
 800329a:	68fa      	ldr	r2, [r7, #12]
 800329c:	697b      	ldr	r3, [r7, #20]
 800329e:	4915      	ldr	r1, [pc, #84]	; (80032f4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 80032a0:	fba1 1303 	umull	r1, r3, r1, r3
 80032a4:	099b      	lsrs	r3, r3, #6
 80032a6:	4413      	add	r3, r2
 80032a8:	60fb      	str	r3, [r7, #12]
    t.data.nsec += (offset % 1000) * 1000000UL;
 80032aa:	6939      	ldr	r1, [r7, #16]
 80032ac:	697a      	ldr	r2, [r7, #20]
 80032ae:	4b11      	ldr	r3, [pc, #68]	; (80032f4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 80032b0:	fba3 0302 	umull	r0, r3, r3, r2
 80032b4:	099b      	lsrs	r3, r3, #6
 80032b6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80032ba:	fb00 f303 	mul.w	r3, r0, r3
 80032be:	1ad3      	subs	r3, r2, r3
 80032c0:	4a0d      	ldr	r2, [pc, #52]	; (80032f8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x94>)
 80032c2:	fb02 f303 	mul.w	r3, r2, r3
 80032c6:	440b      	add	r3, r1
 80032c8:	613b      	str	r3, [r7, #16]
    this->setNow(t.data);
 80032ca:	f107 0308 	add.w	r3, r7, #8
 80032ce:	3304      	adds	r3, #4
 80032d0:	4619      	mov	r1, r3
 80032d2:	6878      	ldr	r0, [r7, #4]
 80032d4:	f000 f8a6 	bl	8003424 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE>
    last_sync_receive_time = hardware_.time();
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	3304      	adds	r3, #4
 80032dc:	4618      	mov	r0, r3
 80032de:	f7fe fc1d 	bl	8001b1c <_ZN13STM32Hardware4timeEv>
 80032e2:	4602      	mov	r2, r0
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
  }
 80032ea:	bf00      	nop
 80032ec:	3718      	adds	r7, #24
 80032ee:	46bd      	mov	sp, r7
 80032f0:	bd80      	pop	{r7, pc}
 80032f2:	bf00      	nop
 80032f4:	10624dd3 	.word	0x10624dd3
 80032f8:	000f4240 	.word	0x000f4240

080032fc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE>:

  virtual int publish(int id, const Msg * msg)
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b088      	sub	sp, #32
 8003300:	af00      	add	r7, sp, #0
 8003302:	60f8      	str	r0, [r7, #12]
 8003304:	60b9      	str	r1, [r7, #8]
 8003306:	607a      	str	r2, [r7, #4]
  {
    if (id >= 100 && !configured_)
 8003308:	68bb      	ldr	r3, [r7, #8]
 800330a:	2b63      	cmp	r3, #99	; 0x63
 800330c:	dd09      	ble.n	8003322 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 8003314:	f083 0301 	eor.w	r3, r3, #1
 8003318:	b2db      	uxtb	r3, r3
 800331a:	2b00      	cmp	r3, #0
 800331c:	d001      	beq.n	8003322 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
      return 0;
 800331e:	2300      	movs	r3, #0
 8003320:	e079      	b.n	8003416 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x11a>

    /* serialize message */
    int l = msg->serialize(message_out + 7);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	68fa      	ldr	r2, [r7, #12]
 800332a:	f202 6224 	addw	r2, r2, #1572	; 0x624
 800332e:	3207      	adds	r2, #7
 8003330:	4611      	mov	r1, r2
 8003332:	6878      	ldr	r0, [r7, #4]
 8003334:	4798      	blx	r3
 8003336:	6178      	str	r0, [r7, #20]

    /* setup the header */
    message_out[0] = 0xff;
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	22ff      	movs	r2, #255	; 0xff
 800333c:	f883 2624 	strb.w	r2, [r3, #1572]	; 0x624
    message_out[1] = PROTOCOL_VER;
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	22fe      	movs	r2, #254	; 0xfe
 8003344:	f883 2625 	strb.w	r2, [r3, #1573]	; 0x625
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 8003348:	697b      	ldr	r3, [r7, #20]
 800334a:	b2da      	uxtb	r2, r3
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	f883 2626 	strb.w	r2, [r3, #1574]	; 0x626
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 8003352:	697b      	ldr	r3, [r7, #20]
 8003354:	b29b      	uxth	r3, r3
 8003356:	0a1b      	lsrs	r3, r3, #8
 8003358:	b29b      	uxth	r3, r3
 800335a:	b2da      	uxtb	r2, r3
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	f883 2627 	strb.w	r2, [r3, #1575]	; 0x627
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	f893 2626 	ldrb.w	r2, [r3, #1574]	; 0x626
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	f893 3627 	ldrb.w	r3, [r3, #1575]	; 0x627
 800336e:	4413      	add	r3, r2
 8003370:	b2db      	uxtb	r3, r3
 8003372:	43db      	mvns	r3, r3
 8003374:	b2da      	uxtb	r2, r3
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	f883 2628 	strb.w	r2, [r3, #1576]	; 0x628
    message_out[5] = (uint8_t)((int16_t)id & 255);
 800337c:	68bb      	ldr	r3, [r7, #8]
 800337e:	b2da      	uxtb	r2, r3
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	f883 2629 	strb.w	r2, [r3, #1577]	; 0x629
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 8003386:	68bb      	ldr	r3, [r7, #8]
 8003388:	b21b      	sxth	r3, r3
 800338a:	121b      	asrs	r3, r3, #8
 800338c:	b21b      	sxth	r3, r3
 800338e:	b2da      	uxtb	r2, r3
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	f883 262a 	strb.w	r2, [r3, #1578]	; 0x62a

    /* calculate checksum */
    int chk = 0;
 8003396:	2300      	movs	r3, #0
 8003398:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 800339a:	2305      	movs	r3, #5
 800339c:	61bb      	str	r3, [r7, #24]
 800339e:	697b      	ldr	r3, [r7, #20]
 80033a0:	3306      	adds	r3, #6
 80033a2:	69ba      	ldr	r2, [r7, #24]
 80033a4:	429a      	cmp	r2, r3
 80033a6:	dc0d      	bgt.n	80033c4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xc8>
      chk += message_out[i];
 80033a8:	68fa      	ldr	r2, [r7, #12]
 80033aa:	69bb      	ldr	r3, [r7, #24]
 80033ac:	4413      	add	r3, r2
 80033ae:	f203 6324 	addw	r3, r3, #1572	; 0x624
 80033b2:	781b      	ldrb	r3, [r3, #0]
 80033b4:	461a      	mov	r2, r3
 80033b6:	69fb      	ldr	r3, [r7, #28]
 80033b8:	4413      	add	r3, r2
 80033ba:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 80033bc:	69bb      	ldr	r3, [r7, #24]
 80033be:	3301      	adds	r3, #1
 80033c0:	61bb      	str	r3, [r7, #24]
 80033c2:	e7ec      	b.n	800339e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xa2>
    l += 7;
 80033c4:	697b      	ldr	r3, [r7, #20]
 80033c6:	3307      	adds	r3, #7
 80033c8:	617b      	str	r3, [r7, #20]
    message_out[l++] = 255 - (chk % 256);
 80033ca:	69fb      	ldr	r3, [r7, #28]
 80033cc:	425a      	negs	r2, r3
 80033ce:	b2db      	uxtb	r3, r3
 80033d0:	b2d2      	uxtb	r2, r2
 80033d2:	bf58      	it	pl
 80033d4:	4253      	negpl	r3, r2
 80033d6:	b2da      	uxtb	r2, r3
 80033d8:	697b      	ldr	r3, [r7, #20]
 80033da:	1c59      	adds	r1, r3, #1
 80033dc:	6179      	str	r1, [r7, #20]
 80033de:	43d2      	mvns	r2, r2
 80033e0:	b2d1      	uxtb	r1, r2
 80033e2:	68fa      	ldr	r2, [r7, #12]
 80033e4:	4413      	add	r3, r2
 80033e6:	460a      	mov	r2, r1
 80033e8:	f883 2624 	strb.w	r2, [r3, #1572]	; 0x624

    if (l <= OUTPUT_SIZE)
 80033ec:	697b      	ldr	r3, [r7, #20]
 80033ee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80033f2:	dc0a      	bgt.n	800340a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x10e>
    {
      hardware_.write(message_out, l);
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	1d18      	adds	r0, r3, #4
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	f203 6324 	addw	r3, r3, #1572	; 0x624
 80033fe:	697a      	ldr	r2, [r7, #20]
 8003400:	4619      	mov	r1, r3
 8003402:	f7fe fb45 	bl	8001a90 <_ZN13STM32Hardware5writeEPhi>
      return l;
 8003406:	697b      	ldr	r3, [r7, #20]
 8003408:	e005      	b.n	8003416 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x11a>
    }
    else
    {
      logerror("Message from device dropped: message larger than buffer.");
 800340a:	4905      	ldr	r1, [pc, #20]	; (8003420 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x124>)
 800340c:	68f8      	ldr	r0, [r7, #12]
 800340e:	f000 f849 	bl	80034a4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>
      return -1;
 8003412:	f04f 33ff 	mov.w	r3, #4294967295
    }
  }
 8003416:	4618      	mov	r0, r3
 8003418:	3720      	adds	r7, #32
 800341a:	46bd      	mov	sp, r7
 800341c:	bd80      	pop	{r7, pc}
 800341e:	bf00      	nop
 8003420:	0800b3e4 	.word	0x0800b3e4

08003424 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE>:
  void setNow(Time & new_now)
 8003424:	b580      	push	{r7, lr}
 8003426:	b084      	sub	sp, #16
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
 800342c:	6039      	str	r1, [r7, #0]
    uint32_t ms = hardware_.time();
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	3304      	adds	r3, #4
 8003432:	4618      	mov	r0, r3
 8003434:	f7fe fb72 	bl	8001b1c <_ZN13STM32Hardware4timeEv>
 8003438:	60f8      	str	r0, [r7, #12]
    sec_offset = new_now.sec - ms / 1000 - 1;
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	681a      	ldr	r2, [r3, #0]
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	4915      	ldr	r1, [pc, #84]	; (8003498 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x74>)
 8003442:	fba1 1303 	umull	r1, r3, r1, r3
 8003446:	099b      	lsrs	r3, r3, #6
 8003448:	1ad3      	subs	r3, r2, r3
 800344a:	1e5a      	subs	r2, r3, #1
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 8003452:	683b      	ldr	r3, [r7, #0]
 8003454:	6859      	ldr	r1, [r3, #4]
 8003456:	68fa      	ldr	r2, [r7, #12]
 8003458:	4b0f      	ldr	r3, [pc, #60]	; (8003498 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x74>)
 800345a:	fba3 0302 	umull	r0, r3, r3, r2
 800345e:	099b      	lsrs	r3, r3, #6
 8003460:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003464:	fb00 f303 	mul.w	r3, r0, r3
 8003468:	1ad3      	subs	r3, r2, r3
 800346a:	4a0c      	ldr	r2, [pc, #48]	; (800349c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x78>)
 800346c:	fb02 f303 	mul.w	r3, r2, r3
 8003470:	1aca      	subs	r2, r1, r3
 8003472:	4b0b      	ldr	r3, [pc, #44]	; (80034a0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x7c>)
 8003474:	4413      	add	r3, r2
 8003476:	687a      	ldr	r2, [r7, #4]
 8003478:	f8c2 341c 	str.w	r3, [r2, #1052]	; 0x41c
    normalizeSecNSec(sec_offset, nsec_offset);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	f503 6283 	add.w	r2, r3, #1048	; 0x418
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	f203 431c 	addw	r3, r3, #1052	; 0x41c
 8003488:	4619      	mov	r1, r3
 800348a:	4610      	mov	r0, r2
 800348c:	f7fd fb68 	bl	8000b60 <_ZN3ros16normalizeSecNSecERmS0_>
  }
 8003490:	bf00      	nop
 8003492:	3710      	adds	r7, #16
 8003494:	46bd      	mov	sp, r7
 8003496:	bd80      	pop	{r7, pc}
 8003498:	10624dd3 	.word	0x10624dd3
 800349c:	000f4240 	.word	0x000f4240
 80034a0:	3b9aca00 	.word	0x3b9aca00

080034a4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>:
  }
  void logwarn(const char *msg)
  {
    log(rosserial_msgs::Log::WARN, msg);
  }
  void logerror(const char*msg)
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b082      	sub	sp, #8
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
 80034ac:	6039      	str	r1, [r7, #0]
  {
    log(rosserial_msgs::Log::ERROR, msg);
 80034ae:	683a      	ldr	r2, [r7, #0]
 80034b0:	2103      	movs	r1, #3
 80034b2:	6878      	ldr	r0, [r7, #4]
 80034b4:	f000 f804 	bl	80034c0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>
  }
 80034b8:	bf00      	nop
 80034ba:	3708      	adds	r7, #8
 80034bc:	46bd      	mov	sp, r7
 80034be:	bd80      	pop	{r7, pc}

080034c0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>:
  void log(char byte, const char * msg)
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b088      	sub	sp, #32
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	60f8      	str	r0, [r7, #12]
 80034c8:	460b      	mov	r3, r1
 80034ca:	607a      	str	r2, [r7, #4]
 80034cc:	72fb      	strb	r3, [r7, #11]
    rosserial_msgs::Log l;
 80034ce:	f107 0314 	add.w	r3, r7, #20
 80034d2:	4618      	mov	r0, r3
 80034d4:	f7fd fe46 	bl	8001164 <_ZN14rosserial_msgs3LogC1Ev>
    l.level = byte;
 80034d8:	7afb      	ldrb	r3, [r7, #11]
 80034da:	763b      	strb	r3, [r7, #24]
    l.msg = (char*)msg;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	61fb      	str	r3, [r7, #28]
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f107 0214 	add.w	r2, r7, #20
 80034ea:	2107      	movs	r1, #7
 80034ec:	68f8      	ldr	r0, [r7, #12]
 80034ee:	4798      	blx	r3
  }
 80034f0:	bf00      	nop
 80034f2:	3720      	adds	r7, #32
 80034f4:	46bd      	mov	sp, r7
 80034f6:	bd80      	pop	{r7, pc}

080034f8 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b084      	sub	sp, #16
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
 8003500:	6039      	str	r1, [r7, #0]
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	2b01      	cmp	r3, #1
 8003506:	d138      	bne.n	800357a <_Z41__static_initialization_and_destruction_0ii+0x82>
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800350e:	4293      	cmp	r3, r2
 8003510:	d133      	bne.n	800357a <_Z41__static_initialization_and_destruction_0ii+0x82>
ros::NodeHandle nh;
 8003512:	4823      	ldr	r0, [pc, #140]	; (80035a0 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 8003514:	f7ff fa98 	bl	8002a48 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>
std_msgs::String str_msg;
 8003518:	4822      	ldr	r0, [pc, #136]	; (80035a4 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 800351a:	f7fe fb0b 	bl	8001b34 <_ZN8std_msgs6StringC1Ev>
ros::Publisher chatter("chatter", &str_msg);
 800351e:	2300      	movs	r3, #0
 8003520:	4a20      	ldr	r2, [pc, #128]	; (80035a4 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 8003522:	4921      	ldr	r1, [pc, #132]	; (80035a8 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 8003524:	4821      	ldr	r0, [pc, #132]	; (80035ac <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 8003526:	f7fe f98f 	bl	8001848 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
ros::Subscriber<std_msgs::String> stm32_comms("gripper_action", &str_act_msg);
 800352a:	2301      	movs	r3, #1
 800352c:	4a20      	ldr	r2, [pc, #128]	; (80035b0 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 800352e:	4921      	ldr	r1, [pc, #132]	; (80035b4 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 8003530:	4821      	ldr	r0, [pc, #132]	; (80035b8 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
 8003532:	f7ff fb19 	bl	8002b68 <_ZN3ros10SubscriberIN8std_msgs6StringEvEC1EPKcPFvRKS2_Ei>
std::string hello = "STM32 to Jetson!";
 8003536:	f107 0308 	add.w	r3, r7, #8
 800353a:	4618      	mov	r0, r3
 800353c:	f007 fa79 	bl	800aa32 <_ZNSaIcEC1Ev>
 8003540:	f107 0308 	add.w	r3, r7, #8
 8003544:	461a      	mov	r2, r3
 8003546:	491d      	ldr	r1, [pc, #116]	; (80035bc <_Z41__static_initialization_and_destruction_0ii+0xc4>)
 8003548:	481d      	ldr	r0, [pc, #116]	; (80035c0 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
 800354a:	f007 fbd5 	bl	800acf8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800354e:	f107 0308 	add.w	r3, r7, #8
 8003552:	4618      	mov	r0, r3
 8003554:	f007 fa6e 	bl	800aa34 <_ZNSaIcED1Ev>
std::string global_msg = "";
 8003558:	f107 030c 	add.w	r3, r7, #12
 800355c:	4618      	mov	r0, r3
 800355e:	f007 fa68 	bl	800aa32 <_ZNSaIcEC1Ev>
 8003562:	f107 030c 	add.w	r3, r7, #12
 8003566:	461a      	mov	r2, r3
 8003568:	4916      	ldr	r1, [pc, #88]	; (80035c4 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
 800356a:	4817      	ldr	r0, [pc, #92]	; (80035c8 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
 800356c:	f007 fbc4 	bl	800acf8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8003570:	f107 030c 	add.w	r3, r7, #12
 8003574:	4618      	mov	r0, r3
 8003576:	f007 fa5d 	bl	800aa34 <_ZNSaIcED1Ev>
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	2b00      	cmp	r3, #0
 800357e:	d10a      	bne.n	8003596 <_Z41__static_initialization_and_destruction_0ii+0x9e>
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003586:	4293      	cmp	r3, r2
 8003588:	d105      	bne.n	8003596 <_Z41__static_initialization_and_destruction_0ii+0x9e>
 800358a:	480f      	ldr	r0, [pc, #60]	; (80035c8 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
 800358c:	f007 faf3 	bl	800ab76 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
std::string hello = "STM32 to Jetson!";
 8003590:	480b      	ldr	r0, [pc, #44]	; (80035c0 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
 8003592:	f007 faf0 	bl	800ab76 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
}
 8003596:	bf00      	nop
 8003598:	3710      	adds	r7, #16
 800359a:	46bd      	mov	sp, r7
 800359c:	bd80      	pop	{r7, pc}
 800359e:	bf00      	nop
 80035a0:	200002d8 	.word	0x200002d8
 80035a4:	20000c14 	.word	0x20000c14
 80035a8:	0800b420 	.word	0x0800b420
 80035ac:	20000c1c 	.word	0x20000c1c
 80035b0:	080024f1 	.word	0x080024f1
 80035b4:	0800b428 	.word	0x0800b428
 80035b8:	20000c30 	.word	0x20000c30
 80035bc:	0800b438 	.word	0x0800b438
 80035c0:	20000c4c 	.word	0x20000c4c
 80035c4:	0800b298 	.word	0x0800b298
 80035c8:	20000c64 	.word	0x20000c64

080035cc <_ZN3ros10SubscriberIN8std_msgs6StringEvE8callbackEPh>:

  virtual void callback(unsigned char* data)
 80035cc:	b580      	push	{r7, lr}
 80035ce:	b082      	sub	sp, #8
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
 80035d4:	6039      	str	r1, [r7, #0]
  {
    msg.deserialize(data);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	330c      	adds	r3, #12
 80035da:	6839      	ldr	r1, [r7, #0]
 80035dc:	4618      	mov	r0, r3
 80035de:	f7fe faea 	bl	8001bb6 <_ZN8std_msgs6String11deserializeEPh>
    this->cb_(msg);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	695b      	ldr	r3, [r3, #20]
 80035e6:	687a      	ldr	r2, [r7, #4]
 80035e8:	320c      	adds	r2, #12
 80035ea:	4610      	mov	r0, r2
 80035ec:	4798      	blx	r3
  }
 80035ee:	bf00      	nop
 80035f0:	3708      	adds	r7, #8
 80035f2:	46bd      	mov	sp, r7
 80035f4:	bd80      	pop	{r7, pc}

080035f6 <_ZN3ros10SubscriberIN8std_msgs6StringEvE15getEndpointTypeEv>:
  }
  virtual const char * getMsgMD5()
  {
    return this->msg.getMD5();
  }
  virtual int getEndpointType()
 80035f6:	b480      	push	{r7}
 80035f8:	b083      	sub	sp, #12
 80035fa:	af00      	add	r7, sp, #0
 80035fc:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	699b      	ldr	r3, [r3, #24]
  }
 8003602:	4618      	mov	r0, r3
 8003604:	370c      	adds	r7, #12
 8003606:	46bd      	mov	sp, r7
 8003608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360c:	4770      	bx	lr

0800360e <_ZN3ros10SubscriberIN8std_msgs6StringEvE10getMsgTypeEv>:
  virtual const char * getMsgType()
 800360e:	b580      	push	{r7, lr}
 8003610:	b082      	sub	sp, #8
 8003612:	af00      	add	r7, sp, #0
 8003614:	6078      	str	r0, [r7, #4]
    return this->msg.getType();
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	330c      	adds	r3, #12
 800361a:	4618      	mov	r0, r3
 800361c:	f7fe fb0a 	bl	8001c34 <_ZN8std_msgs6String7getTypeEv>
 8003620:	4603      	mov	r3, r0
  }
 8003622:	4618      	mov	r0, r3
 8003624:	3708      	adds	r7, #8
 8003626:	46bd      	mov	sp, r7
 8003628:	bd80      	pop	{r7, pc}

0800362a <_ZN3ros10SubscriberIN8std_msgs6StringEvE9getMsgMD5Ev>:
  virtual const char * getMsgMD5()
 800362a:	b580      	push	{r7, lr}
 800362c:	b082      	sub	sp, #8
 800362e:	af00      	add	r7, sp, #0
 8003630:	6078      	str	r0, [r7, #4]
    return this->msg.getMD5();
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	330c      	adds	r3, #12
 8003636:	4618      	mov	r0, r3
 8003638:	f7fe fb0a 	bl	8001c50 <_ZN8std_msgs6String6getMD5Ev>
 800363c:	4603      	mov	r3, r0
  }
 800363e:	4618      	mov	r0, r3
 8003640:	3708      	adds	r7, #8
 8003642:	46bd      	mov	sp, r7
 8003644:	bd80      	pop	{r7, pc}

08003646 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9connectedEv>:
  virtual bool connected()
 8003646:	b480      	push	{r7}
 8003648:	b083      	sub	sp, #12
 800364a:	af00      	add	r7, sp, #0
 800364c:	6078      	str	r0, [r7, #4]
    return configured_;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
  };
 8003654:	4618      	mov	r0, r3
 8003656:	370c      	adds	r7, #12
 8003658:	46bd      	mov	sp, r7
 800365a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365e:	4770      	bx	lr

08003660 <_GLOBAL__sub_I_hadc1>:
 8003660:	b580      	push	{r7, lr}
 8003662:	af00      	add	r7, sp, #0
 8003664:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003668:	2001      	movs	r0, #1
 800366a:	f7ff ff45 	bl	80034f8 <_Z41__static_initialization_and_destruction_0ii>
 800366e:	bd80      	pop	{r7, pc}

08003670 <_GLOBAL__sub_D_hadc1>:
 8003670:	b580      	push	{r7, lr}
 8003672:	af00      	add	r7, sp, #0
 8003674:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003678:	2000      	movs	r0, #0
 800367a:	f7ff ff3d 	bl	80034f8 <_Z41__static_initialization_and_destruction_0ii>
 800367e:	bd80      	pop	{r7, pc}

08003680 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b082      	sub	sp, #8
 8003684:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003686:	2300      	movs	r3, #0
 8003688:	607b      	str	r3, [r7, #4]
 800368a:	4b12      	ldr	r3, [pc, #72]	; (80036d4 <HAL_MspInit+0x54>)
 800368c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800368e:	4a11      	ldr	r2, [pc, #68]	; (80036d4 <HAL_MspInit+0x54>)
 8003690:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003694:	6453      	str	r3, [r2, #68]	; 0x44
 8003696:	4b0f      	ldr	r3, [pc, #60]	; (80036d4 <HAL_MspInit+0x54>)
 8003698:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800369a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800369e:	607b      	str	r3, [r7, #4]
 80036a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80036a2:	2300      	movs	r3, #0
 80036a4:	603b      	str	r3, [r7, #0]
 80036a6:	4b0b      	ldr	r3, [pc, #44]	; (80036d4 <HAL_MspInit+0x54>)
 80036a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036aa:	4a0a      	ldr	r2, [pc, #40]	; (80036d4 <HAL_MspInit+0x54>)
 80036ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036b0:	6413      	str	r3, [r2, #64]	; 0x40
 80036b2:	4b08      	ldr	r3, [pc, #32]	; (80036d4 <HAL_MspInit+0x54>)
 80036b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036ba:	603b      	str	r3, [r7, #0]
 80036bc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80036be:	2200      	movs	r2, #0
 80036c0:	210f      	movs	r1, #15
 80036c2:	f06f 0001 	mvn.w	r0, #1
 80036c6:	f000 ffcd 	bl	8004664 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80036ca:	bf00      	nop
 80036cc:	3708      	adds	r7, #8
 80036ce:	46bd      	mov	sp, r7
 80036d0:	bd80      	pop	{r7, pc}
 80036d2:	bf00      	nop
 80036d4:	40023800 	.word	0x40023800

080036d8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80036d8:	b580      	push	{r7, lr}
 80036da:	b08a      	sub	sp, #40	; 0x28
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036e0:	f107 0314 	add.w	r3, r7, #20
 80036e4:	2200      	movs	r2, #0
 80036e6:	601a      	str	r2, [r3, #0]
 80036e8:	605a      	str	r2, [r3, #4]
 80036ea:	609a      	str	r2, [r3, #8]
 80036ec:	60da      	str	r2, [r3, #12]
 80036ee:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	4a2e      	ldr	r2, [pc, #184]	; (80037b0 <HAL_ADC_MspInit+0xd8>)
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d156      	bne.n	80037a8 <HAL_ADC_MspInit+0xd0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80036fa:	2300      	movs	r3, #0
 80036fc:	613b      	str	r3, [r7, #16]
 80036fe:	4b2d      	ldr	r3, [pc, #180]	; (80037b4 <HAL_ADC_MspInit+0xdc>)
 8003700:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003702:	4a2c      	ldr	r2, [pc, #176]	; (80037b4 <HAL_ADC_MspInit+0xdc>)
 8003704:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003708:	6453      	str	r3, [r2, #68]	; 0x44
 800370a:	4b2a      	ldr	r3, [pc, #168]	; (80037b4 <HAL_ADC_MspInit+0xdc>)
 800370c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800370e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003712:	613b      	str	r3, [r7, #16]
 8003714:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003716:	2300      	movs	r3, #0
 8003718:	60fb      	str	r3, [r7, #12]
 800371a:	4b26      	ldr	r3, [pc, #152]	; (80037b4 <HAL_ADC_MspInit+0xdc>)
 800371c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800371e:	4a25      	ldr	r2, [pc, #148]	; (80037b4 <HAL_ADC_MspInit+0xdc>)
 8003720:	f043 0302 	orr.w	r3, r3, #2
 8003724:	6313      	str	r3, [r2, #48]	; 0x30
 8003726:	4b23      	ldr	r3, [pc, #140]	; (80037b4 <HAL_ADC_MspInit+0xdc>)
 8003728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800372a:	f003 0302 	and.w	r3, r3, #2
 800372e:	60fb      	str	r3, [r7, #12]
 8003730:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = Gripper_Pot_Pin|Art_Pot_Pin;
 8003732:	2303      	movs	r3, #3
 8003734:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003736:	2303      	movs	r3, #3
 8003738:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800373a:	2300      	movs	r3, #0
 800373c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800373e:	f107 0314 	add.w	r3, r7, #20
 8003742:	4619      	mov	r1, r3
 8003744:	481c      	ldr	r0, [pc, #112]	; (80037b8 <HAL_ADC_MspInit+0xe0>)
 8003746:	f001 fbb9 	bl	8004ebc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800374a:	4b1c      	ldr	r3, [pc, #112]	; (80037bc <HAL_ADC_MspInit+0xe4>)
 800374c:	4a1c      	ldr	r2, [pc, #112]	; (80037c0 <HAL_ADC_MspInit+0xe8>)
 800374e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8003750:	4b1a      	ldr	r3, [pc, #104]	; (80037bc <HAL_ADC_MspInit+0xe4>)
 8003752:	2200      	movs	r2, #0
 8003754:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003756:	4b19      	ldr	r3, [pc, #100]	; (80037bc <HAL_ADC_MspInit+0xe4>)
 8003758:	2200      	movs	r2, #0
 800375a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800375c:	4b17      	ldr	r3, [pc, #92]	; (80037bc <HAL_ADC_MspInit+0xe4>)
 800375e:	2200      	movs	r2, #0
 8003760:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8003762:	4b16      	ldr	r3, [pc, #88]	; (80037bc <HAL_ADC_MspInit+0xe4>)
 8003764:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003768:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800376a:	4b14      	ldr	r3, [pc, #80]	; (80037bc <HAL_ADC_MspInit+0xe4>)
 800376c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003770:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003772:	4b12      	ldr	r3, [pc, #72]	; (80037bc <HAL_ADC_MspInit+0xe4>)
 8003774:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003778:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 800377a:	4b10      	ldr	r3, [pc, #64]	; (80037bc <HAL_ADC_MspInit+0xe4>)
 800377c:	2200      	movs	r2, #0
 800377e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8003780:	4b0e      	ldr	r3, [pc, #56]	; (80037bc <HAL_ADC_MspInit+0xe4>)
 8003782:	2200      	movs	r2, #0
 8003784:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003786:	4b0d      	ldr	r3, [pc, #52]	; (80037bc <HAL_ADC_MspInit+0xe4>)
 8003788:	2200      	movs	r2, #0
 800378a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800378c:	480b      	ldr	r0, [pc, #44]	; (80037bc <HAL_ADC_MspInit+0xe4>)
 800378e:	f000 ff93 	bl	80046b8 <HAL_DMA_Init>
 8003792:	4603      	mov	r3, r0
 8003794:	2b00      	cmp	r3, #0
 8003796:	d001      	beq.n	800379c <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 8003798:	f7ff f8fe 	bl	8002998 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	4a07      	ldr	r2, [pc, #28]	; (80037bc <HAL_ADC_MspInit+0xe4>)
 80037a0:	639a      	str	r2, [r3, #56]	; 0x38
 80037a2:	4a06      	ldr	r2, [pc, #24]	; (80037bc <HAL_ADC_MspInit+0xe4>)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80037a8:	bf00      	nop
 80037aa:	3728      	adds	r7, #40	; 0x28
 80037ac:	46bd      	mov	sp, r7
 80037ae:	bd80      	pop	{r7, pc}
 80037b0:	40012000 	.word	0x40012000
 80037b4:	40023800 	.word	0x40023800
 80037b8:	40020400 	.word	0x40020400
 80037bc:	200000e0 	.word	0x200000e0
 80037c0:	40026410 	.word	0x40026410

080037c4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80037c4:	b480      	push	{r7}
 80037c6:	b085      	sub	sp, #20
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037d4:	d10d      	bne.n	80037f2 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80037d6:	2300      	movs	r3, #0
 80037d8:	60fb      	str	r3, [r7, #12]
 80037da:	4b09      	ldr	r3, [pc, #36]	; (8003800 <HAL_TIM_Base_MspInit+0x3c>)
 80037dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037de:	4a08      	ldr	r2, [pc, #32]	; (8003800 <HAL_TIM_Base_MspInit+0x3c>)
 80037e0:	f043 0301 	orr.w	r3, r3, #1
 80037e4:	6413      	str	r3, [r2, #64]	; 0x40
 80037e6:	4b06      	ldr	r3, [pc, #24]	; (8003800 <HAL_TIM_Base_MspInit+0x3c>)
 80037e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ea:	f003 0301 	and.w	r3, r3, #1
 80037ee:	60fb      	str	r3, [r7, #12]
 80037f0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80037f2:	bf00      	nop
 80037f4:	3714      	adds	r7, #20
 80037f6:	46bd      	mov	sp, r7
 80037f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fc:	4770      	bx	lr
 80037fe:	bf00      	nop
 8003800:	40023800 	.word	0x40023800

08003804 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003804:	b580      	push	{r7, lr}
 8003806:	b088      	sub	sp, #32
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800380c:	f107 030c 	add.w	r3, r7, #12
 8003810:	2200      	movs	r2, #0
 8003812:	601a      	str	r2, [r3, #0]
 8003814:	605a      	str	r2, [r3, #4]
 8003816:	609a      	str	r2, [r3, #8]
 8003818:	60da      	str	r2, [r3, #12]
 800381a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003824:	d11d      	bne.n	8003862 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003826:	2300      	movs	r3, #0
 8003828:	60bb      	str	r3, [r7, #8]
 800382a:	4b10      	ldr	r3, [pc, #64]	; (800386c <HAL_TIM_MspPostInit+0x68>)
 800382c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800382e:	4a0f      	ldr	r2, [pc, #60]	; (800386c <HAL_TIM_MspPostInit+0x68>)
 8003830:	f043 0301 	orr.w	r3, r3, #1
 8003834:	6313      	str	r3, [r2, #48]	; 0x30
 8003836:	4b0d      	ldr	r3, [pc, #52]	; (800386c <HAL_TIM_MspPostInit+0x68>)
 8003838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800383a:	f003 0301 	and.w	r3, r3, #1
 800383e:	60bb      	str	r3, [r7, #8]
 8003840:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = Gripper_Servo_Pin|Art_Servo_Pin;
 8003842:	2303      	movs	r3, #3
 8003844:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003846:	2302      	movs	r3, #2
 8003848:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800384a:	2300      	movs	r3, #0
 800384c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800384e:	2300      	movs	r3, #0
 8003850:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003852:	2301      	movs	r3, #1
 8003854:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003856:	f107 030c 	add.w	r3, r7, #12
 800385a:	4619      	mov	r1, r3
 800385c:	4804      	ldr	r0, [pc, #16]	; (8003870 <HAL_TIM_MspPostInit+0x6c>)
 800385e:	f001 fb2d 	bl	8004ebc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8003862:	bf00      	nop
 8003864:	3720      	adds	r7, #32
 8003866:	46bd      	mov	sp, r7
 8003868:	bd80      	pop	{r7, pc}
 800386a:	bf00      	nop
 800386c:	40023800 	.word	0x40023800
 8003870:	40020000 	.word	0x40020000

08003874 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	b08a      	sub	sp, #40	; 0x28
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800387c:	f107 0314 	add.w	r3, r7, #20
 8003880:	2200      	movs	r2, #0
 8003882:	601a      	str	r2, [r3, #0]
 8003884:	605a      	str	r2, [r3, #4]
 8003886:	609a      	str	r2, [r3, #8]
 8003888:	60da      	str	r2, [r3, #12]
 800388a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	4a4b      	ldr	r2, [pc, #300]	; (80039c0 <HAL_UART_MspInit+0x14c>)
 8003892:	4293      	cmp	r3, r2
 8003894:	f040 8090 	bne.w	80039b8 <HAL_UART_MspInit+0x144>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003898:	2300      	movs	r3, #0
 800389a:	613b      	str	r3, [r7, #16]
 800389c:	4b49      	ldr	r3, [pc, #292]	; (80039c4 <HAL_UART_MspInit+0x150>)
 800389e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038a0:	4a48      	ldr	r2, [pc, #288]	; (80039c4 <HAL_UART_MspInit+0x150>)
 80038a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80038a6:	6413      	str	r3, [r2, #64]	; 0x40
 80038a8:	4b46      	ldr	r3, [pc, #280]	; (80039c4 <HAL_UART_MspInit+0x150>)
 80038aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038b0:	613b      	str	r3, [r7, #16]
 80038b2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80038b4:	2300      	movs	r3, #0
 80038b6:	60fb      	str	r3, [r7, #12]
 80038b8:	4b42      	ldr	r3, [pc, #264]	; (80039c4 <HAL_UART_MspInit+0x150>)
 80038ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038bc:	4a41      	ldr	r2, [pc, #260]	; (80039c4 <HAL_UART_MspInit+0x150>)
 80038be:	f043 0301 	orr.w	r3, r3, #1
 80038c2:	6313      	str	r3, [r2, #48]	; 0x30
 80038c4:	4b3f      	ldr	r3, [pc, #252]	; (80039c4 <HAL_UART_MspInit+0x150>)
 80038c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038c8:	f003 0301 	and.w	r3, r3, #1
 80038cc:	60fb      	str	r3, [r7, #12]
 80038ce:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80038d0:	230c      	movs	r3, #12
 80038d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038d4:	2302      	movs	r3, #2
 80038d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038d8:	2300      	movs	r3, #0
 80038da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80038dc:	2303      	movs	r3, #3
 80038de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80038e0:	2307      	movs	r3, #7
 80038e2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80038e4:	f107 0314 	add.w	r3, r7, #20
 80038e8:	4619      	mov	r1, r3
 80038ea:	4837      	ldr	r0, [pc, #220]	; (80039c8 <HAL_UART_MspInit+0x154>)
 80038ec:	f001 fae6 	bl	8004ebc <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 80038f0:	4b36      	ldr	r3, [pc, #216]	; (80039cc <HAL_UART_MspInit+0x158>)
 80038f2:	4a37      	ldr	r2, [pc, #220]	; (80039d0 <HAL_UART_MspInit+0x15c>)
 80038f4:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 80038f6:	4b35      	ldr	r3, [pc, #212]	; (80039cc <HAL_UART_MspInit+0x158>)
 80038f8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80038fc:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80038fe:	4b33      	ldr	r3, [pc, #204]	; (80039cc <HAL_UART_MspInit+0x158>)
 8003900:	2200      	movs	r2, #0
 8003902:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003904:	4b31      	ldr	r3, [pc, #196]	; (80039cc <HAL_UART_MspInit+0x158>)
 8003906:	2200      	movs	r2, #0
 8003908:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800390a:	4b30      	ldr	r3, [pc, #192]	; (80039cc <HAL_UART_MspInit+0x158>)
 800390c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003910:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003912:	4b2e      	ldr	r3, [pc, #184]	; (80039cc <HAL_UART_MspInit+0x158>)
 8003914:	2200      	movs	r2, #0
 8003916:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003918:	4b2c      	ldr	r3, [pc, #176]	; (80039cc <HAL_UART_MspInit+0x158>)
 800391a:	2200      	movs	r2, #0
 800391c:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 800391e:	4b2b      	ldr	r3, [pc, #172]	; (80039cc <HAL_UART_MspInit+0x158>)
 8003920:	2200      	movs	r2, #0
 8003922:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003924:	4b29      	ldr	r3, [pc, #164]	; (80039cc <HAL_UART_MspInit+0x158>)
 8003926:	2200      	movs	r2, #0
 8003928:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800392a:	4b28      	ldr	r3, [pc, #160]	; (80039cc <HAL_UART_MspInit+0x158>)
 800392c:	2200      	movs	r2, #0
 800392e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8003930:	4826      	ldr	r0, [pc, #152]	; (80039cc <HAL_UART_MspInit+0x158>)
 8003932:	f000 fec1 	bl	80046b8 <HAL_DMA_Init>
 8003936:	4603      	mov	r3, r0
 8003938:	2b00      	cmp	r3, #0
 800393a:	d001      	beq.n	8003940 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 800393c:	f7ff f82c 	bl	8002998 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	4a22      	ldr	r2, [pc, #136]	; (80039cc <HAL_UART_MspInit+0x158>)
 8003944:	639a      	str	r2, [r3, #56]	; 0x38
 8003946:	4a21      	ldr	r2, [pc, #132]	; (80039cc <HAL_UART_MspInit+0x158>)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 800394c:	4b21      	ldr	r3, [pc, #132]	; (80039d4 <HAL_UART_MspInit+0x160>)
 800394e:	4a22      	ldr	r2, [pc, #136]	; (80039d8 <HAL_UART_MspInit+0x164>)
 8003950:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8003952:	4b20      	ldr	r3, [pc, #128]	; (80039d4 <HAL_UART_MspInit+0x160>)
 8003954:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003958:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800395a:	4b1e      	ldr	r3, [pc, #120]	; (80039d4 <HAL_UART_MspInit+0x160>)
 800395c:	2240      	movs	r2, #64	; 0x40
 800395e:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003960:	4b1c      	ldr	r3, [pc, #112]	; (80039d4 <HAL_UART_MspInit+0x160>)
 8003962:	2200      	movs	r2, #0
 8003964:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003966:	4b1b      	ldr	r3, [pc, #108]	; (80039d4 <HAL_UART_MspInit+0x160>)
 8003968:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800396c:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800396e:	4b19      	ldr	r3, [pc, #100]	; (80039d4 <HAL_UART_MspInit+0x160>)
 8003970:	2200      	movs	r2, #0
 8003972:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003974:	4b17      	ldr	r3, [pc, #92]	; (80039d4 <HAL_UART_MspInit+0x160>)
 8003976:	2200      	movs	r2, #0
 8003978:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800397a:	4b16      	ldr	r3, [pc, #88]	; (80039d4 <HAL_UART_MspInit+0x160>)
 800397c:	2200      	movs	r2, #0
 800397e:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003980:	4b14      	ldr	r3, [pc, #80]	; (80039d4 <HAL_UART_MspInit+0x160>)
 8003982:	2200      	movs	r2, #0
 8003984:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003986:	4b13      	ldr	r3, [pc, #76]	; (80039d4 <HAL_UART_MspInit+0x160>)
 8003988:	2200      	movs	r2, #0
 800398a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800398c:	4811      	ldr	r0, [pc, #68]	; (80039d4 <HAL_UART_MspInit+0x160>)
 800398e:	f000 fe93 	bl	80046b8 <HAL_DMA_Init>
 8003992:	4603      	mov	r3, r0
 8003994:	2b00      	cmp	r3, #0
 8003996:	d001      	beq.n	800399c <HAL_UART_MspInit+0x128>
    {
      Error_Handler();
 8003998:	f7fe fffe 	bl	8002998 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	4a0d      	ldr	r2, [pc, #52]	; (80039d4 <HAL_UART_MspInit+0x160>)
 80039a0:	635a      	str	r2, [r3, #52]	; 0x34
 80039a2:	4a0c      	ldr	r2, [pc, #48]	; (80039d4 <HAL_UART_MspInit+0x160>)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 80039a8:	2200      	movs	r2, #0
 80039aa:	2105      	movs	r1, #5
 80039ac:	2026      	movs	r0, #38	; 0x26
 80039ae:	f000 fe59 	bl	8004664 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80039b2:	2026      	movs	r0, #38	; 0x26
 80039b4:	f000 fe72 	bl	800469c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80039b8:	bf00      	nop
 80039ba:	3728      	adds	r7, #40	; 0x28
 80039bc:	46bd      	mov	sp, r7
 80039be:	bd80      	pop	{r7, pc}
 80039c0:	40004400 	.word	0x40004400
 80039c4:	40023800 	.word	0x40023800
 80039c8:	40020000 	.word	0x40020000
 80039cc:	200001cc 	.word	0x200001cc
 80039d0:	40026088 	.word	0x40026088
 80039d4:	2000022c 	.word	0x2000022c
 80039d8:	400260a0 	.word	0x400260a0

080039dc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	b08e      	sub	sp, #56	; 0x38
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80039e4:	2300      	movs	r3, #0
 80039e6:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80039e8:	2300      	movs	r3, #0
 80039ea:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 80039ec:	2300      	movs	r3, #0
 80039ee:	60fb      	str	r3, [r7, #12]
 80039f0:	4b33      	ldr	r3, [pc, #204]	; (8003ac0 <HAL_InitTick+0xe4>)
 80039f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039f4:	4a32      	ldr	r2, [pc, #200]	; (8003ac0 <HAL_InitTick+0xe4>)
 80039f6:	f043 0308 	orr.w	r3, r3, #8
 80039fa:	6413      	str	r3, [r2, #64]	; 0x40
 80039fc:	4b30      	ldr	r3, [pc, #192]	; (8003ac0 <HAL_InitTick+0xe4>)
 80039fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a00:	f003 0308 	and.w	r3, r3, #8
 8003a04:	60fb      	str	r3, [r7, #12]
 8003a06:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003a08:	f107 0210 	add.w	r2, r7, #16
 8003a0c:	f107 0314 	add.w	r3, r7, #20
 8003a10:	4611      	mov	r1, r2
 8003a12:	4618      	mov	r0, r3
 8003a14:	f002 f87a 	bl	8005b0c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8003a18:	6a3b      	ldr	r3, [r7, #32]
 8003a1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM5 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8003a1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d103      	bne.n	8003a2a <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8003a22:	f002 f84b 	bl	8005abc <HAL_RCC_GetPCLK1Freq>
 8003a26:	6378      	str	r0, [r7, #52]	; 0x34
 8003a28:	e004      	b.n	8003a34 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8003a2a:	f002 f847 	bl	8005abc <HAL_RCC_GetPCLK1Freq>
 8003a2e:	4603      	mov	r3, r0
 8003a30:	005b      	lsls	r3, r3, #1
 8003a32:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003a34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a36:	4a23      	ldr	r2, [pc, #140]	; (8003ac4 <HAL_InitTick+0xe8>)
 8003a38:	fba2 2303 	umull	r2, r3, r2, r3
 8003a3c:	0c9b      	lsrs	r3, r3, #18
 8003a3e:	3b01      	subs	r3, #1
 8003a40:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 8003a42:	4b21      	ldr	r3, [pc, #132]	; (8003ac8 <HAL_InitTick+0xec>)
 8003a44:	4a21      	ldr	r2, [pc, #132]	; (8003acc <HAL_InitTick+0xf0>)
 8003a46:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000U / 1000U) - 1U;
 8003a48:	4b1f      	ldr	r3, [pc, #124]	; (8003ac8 <HAL_InitTick+0xec>)
 8003a4a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003a4e:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 8003a50:	4a1d      	ldr	r2, [pc, #116]	; (8003ac8 <HAL_InitTick+0xec>)
 8003a52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a54:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 8003a56:	4b1c      	ldr	r3, [pc, #112]	; (8003ac8 <HAL_InitTick+0xec>)
 8003a58:	2200      	movs	r2, #0
 8003a5a:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003a5c:	4b1a      	ldr	r3, [pc, #104]	; (8003ac8 <HAL_InitTick+0xec>)
 8003a5e:	2200      	movs	r2, #0
 8003a60:	609a      	str	r2, [r3, #8]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003a62:	4b19      	ldr	r3, [pc, #100]	; (8003ac8 <HAL_InitTick+0xec>)
 8003a64:	2200      	movs	r2, #0
 8003a66:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim5);
 8003a68:	4817      	ldr	r0, [pc, #92]	; (8003ac8 <HAL_InitTick+0xec>)
 8003a6a:	f002 f881 	bl	8005b70 <HAL_TIM_Base_Init>
 8003a6e:	4603      	mov	r3, r0
 8003a70:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8003a74:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d11b      	bne.n	8003ab4 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim5);
 8003a7c:	4812      	ldr	r0, [pc, #72]	; (8003ac8 <HAL_InitTick+0xec>)
 8003a7e:	f002 f8c7 	bl	8005c10 <HAL_TIM_Base_Start_IT>
 8003a82:	4603      	mov	r3, r0
 8003a84:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8003a88:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d111      	bne.n	8003ab4 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM5 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8003a90:	2032      	movs	r0, #50	; 0x32
 8003a92:	f000 fe03 	bl	800469c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	2b0f      	cmp	r3, #15
 8003a9a:	d808      	bhi.n	8003aae <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority, 0U);
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	6879      	ldr	r1, [r7, #4]
 8003aa0:	2032      	movs	r0, #50	; 0x32
 8003aa2:	f000 fddf 	bl	8004664 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003aa6:	4a0a      	ldr	r2, [pc, #40]	; (8003ad0 <HAL_InitTick+0xf4>)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6013      	str	r3, [r2, #0]
 8003aac:	e002      	b.n	8003ab4 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8003aae:	2301      	movs	r3, #1
 8003ab0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8003ab4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8003ab8:	4618      	mov	r0, r3
 8003aba:	3738      	adds	r7, #56	; 0x38
 8003abc:	46bd      	mov	sp, r7
 8003abe:	bd80      	pop	{r7, pc}
 8003ac0:	40023800 	.word	0x40023800
 8003ac4:	431bde83 	.word	0x431bde83
 8003ac8:	20000c7c 	.word	0x20000c7c
 8003acc:	40000c00 	.word	0x40000c00
 8003ad0:	20000004 	.word	0x20000004

08003ad4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003ad4:	b480      	push	{r7}
 8003ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003ad8:	e7fe      	b.n	8003ad8 <NMI_Handler+0x4>

08003ada <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003ada:	b480      	push	{r7}
 8003adc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003ade:	e7fe      	b.n	8003ade <HardFault_Handler+0x4>

08003ae0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003ae0:	b480      	push	{r7}
 8003ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003ae4:	e7fe      	b.n	8003ae4 <MemManage_Handler+0x4>

08003ae6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003ae6:	b480      	push	{r7}
 8003ae8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003aea:	e7fe      	b.n	8003aea <BusFault_Handler+0x4>

08003aec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003aec:	b480      	push	{r7}
 8003aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003af0:	e7fe      	b.n	8003af0 <UsageFault_Handler+0x4>

08003af2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003af2:	b480      	push	{r7}
 8003af4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003af6:	bf00      	nop
 8003af8:	46bd      	mov	sp, r7
 8003afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afe:	4770      	bx	lr

08003b00 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8003b04:	4802      	ldr	r0, [pc, #8]	; (8003b10 <DMA1_Stream5_IRQHandler+0x10>)
 8003b06:	f000 ff6f 	bl	80049e8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8003b0a:	bf00      	nop
 8003b0c:	bd80      	pop	{r7, pc}
 8003b0e:	bf00      	nop
 8003b10:	200001cc 	.word	0x200001cc

08003b14 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8003b18:	4802      	ldr	r0, [pc, #8]	; (8003b24 <DMA1_Stream6_IRQHandler+0x10>)
 8003b1a:	f000 ff65 	bl	80049e8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8003b1e:	bf00      	nop
 8003b20:	bd80      	pop	{r7, pc}
 8003b22:	bf00      	nop
 8003b24:	2000022c 	.word	0x2000022c

08003b28 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003b2c:	4802      	ldr	r0, [pc, #8]	; (8003b38 <USART2_IRQHandler+0x10>)
 8003b2e:	f003 f8df 	bl	8006cf0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003b32:	bf00      	nop
 8003b34:	bd80      	pop	{r7, pc}
 8003b36:	bf00      	nop
 8003b38:	20000188 	.word	0x20000188

08003b3c <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8003b40:	4802      	ldr	r0, [pc, #8]	; (8003b4c <TIM5_IRQHandler+0x10>)
 8003b42:	f002 f9d1 	bl	8005ee8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8003b46:	bf00      	nop
 8003b48:	bd80      	pop	{r7, pc}
 8003b4a:	bf00      	nop
 8003b4c:	20000c7c 	.word	0x20000c7c

08003b50 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003b54:	4802      	ldr	r0, [pc, #8]	; (8003b60 <DMA2_Stream0_IRQHandler+0x10>)
 8003b56:	f000 ff47 	bl	80049e8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8003b5a:	bf00      	nop
 8003b5c:	bd80      	pop	{r7, pc}
 8003b5e:	bf00      	nop
 8003b60:	200000e0 	.word	0x200000e0

08003b64 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003b64:	b480      	push	{r7}
 8003b66:	af00      	add	r7, sp, #0
  return 1;
 8003b68:	2301      	movs	r3, #1
}
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b72:	4770      	bx	lr

08003b74 <_kill>:

int _kill(int pid, int sig)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b082      	sub	sp, #8
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
 8003b7c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003b7e:	f007 f90f 	bl	800ada0 <__errno>
 8003b82:	4603      	mov	r3, r0
 8003b84:	2216      	movs	r2, #22
 8003b86:	601a      	str	r2, [r3, #0]
  return -1;
 8003b88:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	3708      	adds	r7, #8
 8003b90:	46bd      	mov	sp, r7
 8003b92:	bd80      	pop	{r7, pc}

08003b94 <_exit>:

void _exit (int status)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b082      	sub	sp, #8
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003b9c:	f04f 31ff 	mov.w	r1, #4294967295
 8003ba0:	6878      	ldr	r0, [r7, #4]
 8003ba2:	f7ff ffe7 	bl	8003b74 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003ba6:	e7fe      	b.n	8003ba6 <_exit+0x12>

08003ba8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	b086      	sub	sp, #24
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003bb0:	4a14      	ldr	r2, [pc, #80]	; (8003c04 <_sbrk+0x5c>)
 8003bb2:	4b15      	ldr	r3, [pc, #84]	; (8003c08 <_sbrk+0x60>)
 8003bb4:	1ad3      	subs	r3, r2, r3
 8003bb6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003bb8:	697b      	ldr	r3, [r7, #20]
 8003bba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003bbc:	4b13      	ldr	r3, [pc, #76]	; (8003c0c <_sbrk+0x64>)
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d102      	bne.n	8003bca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003bc4:	4b11      	ldr	r3, [pc, #68]	; (8003c0c <_sbrk+0x64>)
 8003bc6:	4a12      	ldr	r2, [pc, #72]	; (8003c10 <_sbrk+0x68>)
 8003bc8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003bca:	4b10      	ldr	r3, [pc, #64]	; (8003c0c <_sbrk+0x64>)
 8003bcc:	681a      	ldr	r2, [r3, #0]
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	4413      	add	r3, r2
 8003bd2:	693a      	ldr	r2, [r7, #16]
 8003bd4:	429a      	cmp	r2, r3
 8003bd6:	d207      	bcs.n	8003be8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003bd8:	f007 f8e2 	bl	800ada0 <__errno>
 8003bdc:	4603      	mov	r3, r0
 8003bde:	220c      	movs	r2, #12
 8003be0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003be2:	f04f 33ff 	mov.w	r3, #4294967295
 8003be6:	e009      	b.n	8003bfc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003be8:	4b08      	ldr	r3, [pc, #32]	; (8003c0c <_sbrk+0x64>)
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003bee:	4b07      	ldr	r3, [pc, #28]	; (8003c0c <_sbrk+0x64>)
 8003bf0:	681a      	ldr	r2, [r3, #0]
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	4413      	add	r3, r2
 8003bf6:	4a05      	ldr	r2, [pc, #20]	; (8003c0c <_sbrk+0x64>)
 8003bf8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003bfa:	68fb      	ldr	r3, [r7, #12]
}
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	3718      	adds	r7, #24
 8003c00:	46bd      	mov	sp, r7
 8003c02:	bd80      	pop	{r7, pc}
 8003c04:	20010000 	.word	0x20010000
 8003c08:	00000400 	.word	0x00000400
 8003c0c:	20000cc4 	.word	0x20000cc4
 8003c10:	200056f0 	.word	0x200056f0

08003c14 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003c14:	b480      	push	{r7}
 8003c16:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003c18:	4b06      	ldr	r3, [pc, #24]	; (8003c34 <SystemInit+0x20>)
 8003c1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c1e:	4a05      	ldr	r2, [pc, #20]	; (8003c34 <SystemInit+0x20>)
 8003c20:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003c24:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003c28:	bf00      	nop
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c30:	4770      	bx	lr
 8003c32:	bf00      	nop
 8003c34:	e000ed00 	.word	0xe000ed00

08003c38 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003c38:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003c70 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003c3c:	480d      	ldr	r0, [pc, #52]	; (8003c74 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003c3e:	490e      	ldr	r1, [pc, #56]	; (8003c78 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003c40:	4a0e      	ldr	r2, [pc, #56]	; (8003c7c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003c42:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003c44:	e002      	b.n	8003c4c <LoopCopyDataInit>

08003c46 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003c46:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003c48:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003c4a:	3304      	adds	r3, #4

08003c4c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003c4c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003c4e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003c50:	d3f9      	bcc.n	8003c46 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003c52:	4a0b      	ldr	r2, [pc, #44]	; (8003c80 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003c54:	4c0b      	ldr	r4, [pc, #44]	; (8003c84 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003c56:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003c58:	e001      	b.n	8003c5e <LoopFillZerobss>

08003c5a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003c5a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003c5c:	3204      	adds	r2, #4

08003c5e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003c5e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003c60:	d3fb      	bcc.n	8003c5a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003c62:	f7ff ffd7 	bl	8003c14 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003c66:	f007 f8a1 	bl	800adac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003c6a:	f7fd ffff 	bl	8001c6c <main>
  bx  lr    
 8003c6e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003c70:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8003c74:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003c78:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8003c7c:	0800b7a0 	.word	0x0800b7a0
  ldr r2, =_sbss
 8003c80:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8003c84:	200056f0 	.word	0x200056f0

08003c88 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003c88:	e7fe      	b.n	8003c88 <ADC_IRQHandler>
	...

08003c8c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003c90:	4b0e      	ldr	r3, [pc, #56]	; (8003ccc <HAL_Init+0x40>)
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	4a0d      	ldr	r2, [pc, #52]	; (8003ccc <HAL_Init+0x40>)
 8003c96:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003c9a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003c9c:	4b0b      	ldr	r3, [pc, #44]	; (8003ccc <HAL_Init+0x40>)
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	4a0a      	ldr	r2, [pc, #40]	; (8003ccc <HAL_Init+0x40>)
 8003ca2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003ca6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003ca8:	4b08      	ldr	r3, [pc, #32]	; (8003ccc <HAL_Init+0x40>)
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	4a07      	ldr	r2, [pc, #28]	; (8003ccc <HAL_Init+0x40>)
 8003cae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003cb2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003cb4:	2003      	movs	r0, #3
 8003cb6:	f000 fcca 	bl	800464e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003cba:	200f      	movs	r0, #15
 8003cbc:	f7ff fe8e 	bl	80039dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003cc0:	f7ff fcde 	bl	8003680 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003cc4:	2300      	movs	r3, #0
}
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	bd80      	pop	{r7, pc}
 8003cca:	bf00      	nop
 8003ccc:	40023c00 	.word	0x40023c00

08003cd0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003cd0:	b480      	push	{r7}
 8003cd2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003cd4:	4b06      	ldr	r3, [pc, #24]	; (8003cf0 <HAL_IncTick+0x20>)
 8003cd6:	781b      	ldrb	r3, [r3, #0]
 8003cd8:	461a      	mov	r2, r3
 8003cda:	4b06      	ldr	r3, [pc, #24]	; (8003cf4 <HAL_IncTick+0x24>)
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	4413      	add	r3, r2
 8003ce0:	4a04      	ldr	r2, [pc, #16]	; (8003cf4 <HAL_IncTick+0x24>)
 8003ce2:	6013      	str	r3, [r2, #0]
}
 8003ce4:	bf00      	nop
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cec:	4770      	bx	lr
 8003cee:	bf00      	nop
 8003cf0:	20000008 	.word	0x20000008
 8003cf4:	20000cc8 	.word	0x20000cc8

08003cf8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003cf8:	b480      	push	{r7}
 8003cfa:	af00      	add	r7, sp, #0
  return uwTick;
 8003cfc:	4b03      	ldr	r3, [pc, #12]	; (8003d0c <HAL_GetTick+0x14>)
 8003cfe:	681b      	ldr	r3, [r3, #0]
}
 8003d00:	4618      	mov	r0, r3
 8003d02:	46bd      	mov	sp, r7
 8003d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d08:	4770      	bx	lr
 8003d0a:	bf00      	nop
 8003d0c:	20000cc8 	.word	0x20000cc8

08003d10 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b084      	sub	sp, #16
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003d18:	2300      	movs	r3, #0
 8003d1a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d101      	bne.n	8003d26 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003d22:	2301      	movs	r3, #1
 8003d24:	e033      	b.n	8003d8e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d109      	bne.n	8003d42 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003d2e:	6878      	ldr	r0, [r7, #4]
 8003d30:	f7ff fcd2 	bl	80036d8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2200      	movs	r2, #0
 8003d38:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d46:	f003 0310 	and.w	r3, r3, #16
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d118      	bne.n	8003d80 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d52:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003d56:	f023 0302 	bic.w	r3, r3, #2
 8003d5a:	f043 0202 	orr.w	r2, r3, #2
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003d62:	6878      	ldr	r0, [r7, #4]
 8003d64:	f000 fa48 	bl	80041f8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d72:	f023 0303 	bic.w	r3, r3, #3
 8003d76:	f043 0201 	orr.w	r2, r3, #1
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	641a      	str	r2, [r3, #64]	; 0x40
 8003d7e:	e001      	b.n	8003d84 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003d80:	2301      	movs	r3, #1
 8003d82:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2200      	movs	r2, #0
 8003d88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003d8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d8e:	4618      	mov	r0, r3
 8003d90:	3710      	adds	r7, #16
 8003d92:	46bd      	mov	sp, r7
 8003d94:	bd80      	pop	{r7, pc}
	...

08003d98 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b086      	sub	sp, #24
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	60f8      	str	r0, [r7, #12]
 8003da0:	60b9      	str	r1, [r7, #8]
 8003da2:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8003da4:	2300      	movs	r3, #0
 8003da6:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003dae:	2b01      	cmp	r3, #1
 8003db0:	d101      	bne.n	8003db6 <HAL_ADC_Start_DMA+0x1e>
 8003db2:	2302      	movs	r3, #2
 8003db4:	e0ce      	b.n	8003f54 <HAL_ADC_Start_DMA+0x1bc>
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	2201      	movs	r2, #1
 8003dba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	689b      	ldr	r3, [r3, #8]
 8003dc4:	f003 0301 	and.w	r3, r3, #1
 8003dc8:	2b01      	cmp	r3, #1
 8003dca:	d018      	beq.n	8003dfe <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	689a      	ldr	r2, [r3, #8]
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f042 0201 	orr.w	r2, r2, #1
 8003dda:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003ddc:	4b5f      	ldr	r3, [pc, #380]	; (8003f5c <HAL_ADC_Start_DMA+0x1c4>)
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	4a5f      	ldr	r2, [pc, #380]	; (8003f60 <HAL_ADC_Start_DMA+0x1c8>)
 8003de2:	fba2 2303 	umull	r2, r3, r2, r3
 8003de6:	0c9a      	lsrs	r2, r3, #18
 8003de8:	4613      	mov	r3, r2
 8003dea:	005b      	lsls	r3, r3, #1
 8003dec:	4413      	add	r3, r2
 8003dee:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8003df0:	e002      	b.n	8003df8 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8003df2:	693b      	ldr	r3, [r7, #16]
 8003df4:	3b01      	subs	r3, #1
 8003df6:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8003df8:	693b      	ldr	r3, [r7, #16]
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d1f9      	bne.n	8003df2 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	689b      	ldr	r3, [r3, #8]
 8003e04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e08:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e0c:	d107      	bne.n	8003e1e <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	689a      	ldr	r2, [r3, #8]
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003e1c:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	689b      	ldr	r3, [r3, #8]
 8003e24:	f003 0301 	and.w	r3, r3, #1
 8003e28:	2b01      	cmp	r3, #1
 8003e2a:	f040 8086 	bne.w	8003f3a <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e32:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003e36:	f023 0301 	bic.w	r3, r3, #1
 8003e3a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	685b      	ldr	r3, [r3, #4]
 8003e48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d007      	beq.n	8003e60 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e54:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003e58:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e64:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003e68:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e6c:	d106      	bne.n	8003e7c <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e72:	f023 0206 	bic.w	r2, r3, #6
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	645a      	str	r2, [r3, #68]	; 0x44
 8003e7a:	e002      	b.n	8003e82 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	2200      	movs	r2, #0
 8003e80:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	2200      	movs	r2, #0
 8003e86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003e8a:	4b36      	ldr	r3, [pc, #216]	; (8003f64 <HAL_ADC_Start_DMA+0x1cc>)
 8003e8c:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e92:	4a35      	ldr	r2, [pc, #212]	; (8003f68 <HAL_ADC_Start_DMA+0x1d0>)
 8003e94:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e9a:	4a34      	ldr	r2, [pc, #208]	; (8003f6c <HAL_ADC_Start_DMA+0x1d4>)
 8003e9c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ea2:	4a33      	ldr	r2, [pc, #204]	; (8003f70 <HAL_ADC_Start_DMA+0x1d8>)
 8003ea4:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8003eae:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	685a      	ldr	r2, [r3, #4]
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8003ebe:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	689a      	ldr	r2, [r3, #8]
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003ece:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	334c      	adds	r3, #76	; 0x4c
 8003eda:	4619      	mov	r1, r3
 8003edc:	68ba      	ldr	r2, [r7, #8]
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	f000 fc98 	bl	8004814 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003ee4:	697b      	ldr	r3, [r7, #20]
 8003ee6:	685b      	ldr	r3, [r3, #4]
 8003ee8:	f003 031f 	and.w	r3, r3, #31
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d10f      	bne.n	8003f10 <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	689b      	ldr	r3, [r3, #8]
 8003ef6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d129      	bne.n	8003f52 <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	689a      	ldr	r2, [r3, #8]
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003f0c:	609a      	str	r2, [r3, #8]
 8003f0e:	e020      	b.n	8003f52 <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	4a17      	ldr	r2, [pc, #92]	; (8003f74 <HAL_ADC_Start_DMA+0x1dc>)
 8003f16:	4293      	cmp	r3, r2
 8003f18:	d11b      	bne.n	8003f52 <HAL_ADC_Start_DMA+0x1ba>
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	689b      	ldr	r3, [r3, #8]
 8003f20:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d114      	bne.n	8003f52 <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	689a      	ldr	r2, [r3, #8]
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003f36:	609a      	str	r2, [r3, #8]
 8003f38:	e00b      	b.n	8003f52 <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f3e:	f043 0210 	orr.w	r2, r3, #16
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f4a:	f043 0201 	orr.w	r2, r3, #1
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8003f52:	2300      	movs	r3, #0
}
 8003f54:	4618      	mov	r0, r3
 8003f56:	3718      	adds	r7, #24
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	bd80      	pop	{r7, pc}
 8003f5c:	20000000 	.word	0x20000000
 8003f60:	431bde83 	.word	0x431bde83
 8003f64:	40012300 	.word	0x40012300
 8003f68:	080043f1 	.word	0x080043f1
 8003f6c:	080044ab 	.word	0x080044ab
 8003f70:	080044c7 	.word	0x080044c7
 8003f74:	40012000 	.word	0x40012000

08003f78 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003f78:	b480      	push	{r7}
 8003f7a:	b083      	sub	sp, #12
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8003f80:	bf00      	nop
 8003f82:	370c      	adds	r7, #12
 8003f84:	46bd      	mov	sp, r7
 8003f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8a:	4770      	bx	lr

08003f8c <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003f8c:	b480      	push	{r7}
 8003f8e:	b083      	sub	sp, #12
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8003f94:	bf00      	nop
 8003f96:	370c      	adds	r7, #12
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9e:	4770      	bx	lr

08003fa0 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003fa0:	b480      	push	{r7}
 8003fa2:	b083      	sub	sp, #12
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8003fa8:	bf00      	nop
 8003faa:	370c      	adds	r7, #12
 8003fac:	46bd      	mov	sp, r7
 8003fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb2:	4770      	bx	lr

08003fb4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003fb4:	b480      	push	{r7}
 8003fb6:	b085      	sub	sp, #20
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
 8003fbc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003fc8:	2b01      	cmp	r3, #1
 8003fca:	d101      	bne.n	8003fd0 <HAL_ADC_ConfigChannel+0x1c>
 8003fcc:	2302      	movs	r3, #2
 8003fce:	e105      	b.n	80041dc <HAL_ADC_ConfigChannel+0x228>
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2201      	movs	r2, #1
 8003fd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003fd8:	683b      	ldr	r3, [r7, #0]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	2b09      	cmp	r3, #9
 8003fde:	d925      	bls.n	800402c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	68d9      	ldr	r1, [r3, #12]
 8003fe6:	683b      	ldr	r3, [r7, #0]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	b29b      	uxth	r3, r3
 8003fec:	461a      	mov	r2, r3
 8003fee:	4613      	mov	r3, r2
 8003ff0:	005b      	lsls	r3, r3, #1
 8003ff2:	4413      	add	r3, r2
 8003ff4:	3b1e      	subs	r3, #30
 8003ff6:	2207      	movs	r2, #7
 8003ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8003ffc:	43da      	mvns	r2, r3
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	400a      	ands	r2, r1
 8004004:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	68d9      	ldr	r1, [r3, #12]
 800400c:	683b      	ldr	r3, [r7, #0]
 800400e:	689a      	ldr	r2, [r3, #8]
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	b29b      	uxth	r3, r3
 8004016:	4618      	mov	r0, r3
 8004018:	4603      	mov	r3, r0
 800401a:	005b      	lsls	r3, r3, #1
 800401c:	4403      	add	r3, r0
 800401e:	3b1e      	subs	r3, #30
 8004020:	409a      	lsls	r2, r3
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	430a      	orrs	r2, r1
 8004028:	60da      	str	r2, [r3, #12]
 800402a:	e022      	b.n	8004072 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	6919      	ldr	r1, [r3, #16]
 8004032:	683b      	ldr	r3, [r7, #0]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	b29b      	uxth	r3, r3
 8004038:	461a      	mov	r2, r3
 800403a:	4613      	mov	r3, r2
 800403c:	005b      	lsls	r3, r3, #1
 800403e:	4413      	add	r3, r2
 8004040:	2207      	movs	r2, #7
 8004042:	fa02 f303 	lsl.w	r3, r2, r3
 8004046:	43da      	mvns	r2, r3
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	400a      	ands	r2, r1
 800404e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	6919      	ldr	r1, [r3, #16]
 8004056:	683b      	ldr	r3, [r7, #0]
 8004058:	689a      	ldr	r2, [r3, #8]
 800405a:	683b      	ldr	r3, [r7, #0]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	b29b      	uxth	r3, r3
 8004060:	4618      	mov	r0, r3
 8004062:	4603      	mov	r3, r0
 8004064:	005b      	lsls	r3, r3, #1
 8004066:	4403      	add	r3, r0
 8004068:	409a      	lsls	r2, r3
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	430a      	orrs	r2, r1
 8004070:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8004072:	683b      	ldr	r3, [r7, #0]
 8004074:	685b      	ldr	r3, [r3, #4]
 8004076:	2b06      	cmp	r3, #6
 8004078:	d824      	bhi.n	80040c4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	685a      	ldr	r2, [r3, #4]
 8004084:	4613      	mov	r3, r2
 8004086:	009b      	lsls	r3, r3, #2
 8004088:	4413      	add	r3, r2
 800408a:	3b05      	subs	r3, #5
 800408c:	221f      	movs	r2, #31
 800408e:	fa02 f303 	lsl.w	r3, r2, r3
 8004092:	43da      	mvns	r2, r3
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	400a      	ands	r2, r1
 800409a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80040a2:	683b      	ldr	r3, [r7, #0]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	b29b      	uxth	r3, r3
 80040a8:	4618      	mov	r0, r3
 80040aa:	683b      	ldr	r3, [r7, #0]
 80040ac:	685a      	ldr	r2, [r3, #4]
 80040ae:	4613      	mov	r3, r2
 80040b0:	009b      	lsls	r3, r3, #2
 80040b2:	4413      	add	r3, r2
 80040b4:	3b05      	subs	r3, #5
 80040b6:	fa00 f203 	lsl.w	r2, r0, r3
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	430a      	orrs	r2, r1
 80040c0:	635a      	str	r2, [r3, #52]	; 0x34
 80040c2:	e04c      	b.n	800415e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	685b      	ldr	r3, [r3, #4]
 80040c8:	2b0c      	cmp	r3, #12
 80040ca:	d824      	bhi.n	8004116 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	685a      	ldr	r2, [r3, #4]
 80040d6:	4613      	mov	r3, r2
 80040d8:	009b      	lsls	r3, r3, #2
 80040da:	4413      	add	r3, r2
 80040dc:	3b23      	subs	r3, #35	; 0x23
 80040de:	221f      	movs	r2, #31
 80040e0:	fa02 f303 	lsl.w	r3, r2, r3
 80040e4:	43da      	mvns	r2, r3
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	400a      	ands	r2, r1
 80040ec:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	b29b      	uxth	r3, r3
 80040fa:	4618      	mov	r0, r3
 80040fc:	683b      	ldr	r3, [r7, #0]
 80040fe:	685a      	ldr	r2, [r3, #4]
 8004100:	4613      	mov	r3, r2
 8004102:	009b      	lsls	r3, r3, #2
 8004104:	4413      	add	r3, r2
 8004106:	3b23      	subs	r3, #35	; 0x23
 8004108:	fa00 f203 	lsl.w	r2, r0, r3
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	430a      	orrs	r2, r1
 8004112:	631a      	str	r2, [r3, #48]	; 0x30
 8004114:	e023      	b.n	800415e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	685a      	ldr	r2, [r3, #4]
 8004120:	4613      	mov	r3, r2
 8004122:	009b      	lsls	r3, r3, #2
 8004124:	4413      	add	r3, r2
 8004126:	3b41      	subs	r3, #65	; 0x41
 8004128:	221f      	movs	r2, #31
 800412a:	fa02 f303 	lsl.w	r3, r2, r3
 800412e:	43da      	mvns	r2, r3
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	400a      	ands	r2, r1
 8004136:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800413e:	683b      	ldr	r3, [r7, #0]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	b29b      	uxth	r3, r3
 8004144:	4618      	mov	r0, r3
 8004146:	683b      	ldr	r3, [r7, #0]
 8004148:	685a      	ldr	r2, [r3, #4]
 800414a:	4613      	mov	r3, r2
 800414c:	009b      	lsls	r3, r3, #2
 800414e:	4413      	add	r3, r2
 8004150:	3b41      	subs	r3, #65	; 0x41
 8004152:	fa00 f203 	lsl.w	r2, r0, r3
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	430a      	orrs	r2, r1
 800415c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800415e:	4b22      	ldr	r3, [pc, #136]	; (80041e8 <HAL_ADC_ConfigChannel+0x234>)
 8004160:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	4a21      	ldr	r2, [pc, #132]	; (80041ec <HAL_ADC_ConfigChannel+0x238>)
 8004168:	4293      	cmp	r3, r2
 800416a:	d109      	bne.n	8004180 <HAL_ADC_ConfigChannel+0x1cc>
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	2b12      	cmp	r3, #18
 8004172:	d105      	bne.n	8004180 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	685b      	ldr	r3, [r3, #4]
 8004178:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	4a19      	ldr	r2, [pc, #100]	; (80041ec <HAL_ADC_ConfigChannel+0x238>)
 8004186:	4293      	cmp	r3, r2
 8004188:	d123      	bne.n	80041d2 <HAL_ADC_ConfigChannel+0x21e>
 800418a:	683b      	ldr	r3, [r7, #0]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	2b10      	cmp	r3, #16
 8004190:	d003      	beq.n	800419a <HAL_ADC_ConfigChannel+0x1e6>
 8004192:	683b      	ldr	r3, [r7, #0]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	2b11      	cmp	r3, #17
 8004198:	d11b      	bne.n	80041d2 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	685b      	ldr	r3, [r3, #4]
 800419e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80041a6:	683b      	ldr	r3, [r7, #0]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	2b10      	cmp	r3, #16
 80041ac:	d111      	bne.n	80041d2 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80041ae:	4b10      	ldr	r3, [pc, #64]	; (80041f0 <HAL_ADC_ConfigChannel+0x23c>)
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	4a10      	ldr	r2, [pc, #64]	; (80041f4 <HAL_ADC_ConfigChannel+0x240>)
 80041b4:	fba2 2303 	umull	r2, r3, r2, r3
 80041b8:	0c9a      	lsrs	r2, r3, #18
 80041ba:	4613      	mov	r3, r2
 80041bc:	009b      	lsls	r3, r3, #2
 80041be:	4413      	add	r3, r2
 80041c0:	005b      	lsls	r3, r3, #1
 80041c2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80041c4:	e002      	b.n	80041cc <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80041c6:	68bb      	ldr	r3, [r7, #8]
 80041c8:	3b01      	subs	r3, #1
 80041ca:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80041cc:	68bb      	ldr	r3, [r7, #8]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d1f9      	bne.n	80041c6 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	2200      	movs	r2, #0
 80041d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80041da:	2300      	movs	r3, #0
}
 80041dc:	4618      	mov	r0, r3
 80041de:	3714      	adds	r7, #20
 80041e0:	46bd      	mov	sp, r7
 80041e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e6:	4770      	bx	lr
 80041e8:	40012300 	.word	0x40012300
 80041ec:	40012000 	.word	0x40012000
 80041f0:	20000000 	.word	0x20000000
 80041f4:	431bde83 	.word	0x431bde83

080041f8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80041f8:	b480      	push	{r7}
 80041fa:	b085      	sub	sp, #20
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004200:	4b79      	ldr	r3, [pc, #484]	; (80043e8 <ADC_Init+0x1f0>)
 8004202:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	685b      	ldr	r3, [r3, #4]
 8004208:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	685a      	ldr	r2, [r3, #4]
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	685b      	ldr	r3, [r3, #4]
 8004218:	431a      	orrs	r2, r3
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	685a      	ldr	r2, [r3, #4]
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800422c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	6859      	ldr	r1, [r3, #4]
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	691b      	ldr	r3, [r3, #16]
 8004238:	021a      	lsls	r2, r3, #8
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	430a      	orrs	r2, r1
 8004240:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	685a      	ldr	r2, [r3, #4]
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8004250:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	6859      	ldr	r1, [r3, #4]
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	689a      	ldr	r2, [r3, #8]
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	430a      	orrs	r2, r1
 8004262:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	689a      	ldr	r2, [r3, #8]
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004272:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	6899      	ldr	r1, [r3, #8]
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	68da      	ldr	r2, [r3, #12]
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	430a      	orrs	r2, r1
 8004284:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800428a:	4a58      	ldr	r2, [pc, #352]	; (80043ec <ADC_Init+0x1f4>)
 800428c:	4293      	cmp	r3, r2
 800428e:	d022      	beq.n	80042d6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	689a      	ldr	r2, [r3, #8]
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800429e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	6899      	ldr	r1, [r3, #8]
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	430a      	orrs	r2, r1
 80042b0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	689a      	ldr	r2, [r3, #8]
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80042c0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	6899      	ldr	r1, [r3, #8]
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	430a      	orrs	r2, r1
 80042d2:	609a      	str	r2, [r3, #8]
 80042d4:	e00f      	b.n	80042f6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	689a      	ldr	r2, [r3, #8]
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80042e4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	689a      	ldr	r2, [r3, #8]
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80042f4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	689a      	ldr	r2, [r3, #8]
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f022 0202 	bic.w	r2, r2, #2
 8004304:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	6899      	ldr	r1, [r3, #8]
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	7e1b      	ldrb	r3, [r3, #24]
 8004310:	005a      	lsls	r2, r3, #1
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	430a      	orrs	r2, r1
 8004318:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004320:	2b00      	cmp	r3, #0
 8004322:	d01b      	beq.n	800435c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	685a      	ldr	r2, [r3, #4]
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004332:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	685a      	ldr	r2, [r3, #4]
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8004342:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	6859      	ldr	r1, [r3, #4]
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800434e:	3b01      	subs	r3, #1
 8004350:	035a      	lsls	r2, r3, #13
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	430a      	orrs	r2, r1
 8004358:	605a      	str	r2, [r3, #4]
 800435a:	e007      	b.n	800436c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	685a      	ldr	r2, [r3, #4]
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800436a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800437a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	69db      	ldr	r3, [r3, #28]
 8004386:	3b01      	subs	r3, #1
 8004388:	051a      	lsls	r2, r3, #20
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	430a      	orrs	r2, r1
 8004390:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	689a      	ldr	r2, [r3, #8]
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80043a0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	6899      	ldr	r1, [r3, #8]
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80043ae:	025a      	lsls	r2, r3, #9
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	430a      	orrs	r2, r1
 80043b6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	689a      	ldr	r2, [r3, #8]
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80043c6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	6899      	ldr	r1, [r3, #8]
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	695b      	ldr	r3, [r3, #20]
 80043d2:	029a      	lsls	r2, r3, #10
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	430a      	orrs	r2, r1
 80043da:	609a      	str	r2, [r3, #8]
}
 80043dc:	bf00      	nop
 80043de:	3714      	adds	r7, #20
 80043e0:	46bd      	mov	sp, r7
 80043e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e6:	4770      	bx	lr
 80043e8:	40012300 	.word	0x40012300
 80043ec:	0f000001 	.word	0x0f000001

080043f0 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80043f0:	b580      	push	{r7, lr}
 80043f2:	b084      	sub	sp, #16
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043fc:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004402:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004406:	2b00      	cmp	r3, #0
 8004408:	d13c      	bne.n	8004484 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800440e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	689b      	ldr	r3, [r3, #8]
 800441c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004420:	2b00      	cmp	r3, #0
 8004422:	d12b      	bne.n	800447c <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004428:	2b00      	cmp	r3, #0
 800442a:	d127      	bne.n	800447c <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004432:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004436:	2b00      	cmp	r3, #0
 8004438:	d006      	beq.n	8004448 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	689b      	ldr	r3, [r3, #8]
 8004440:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004444:	2b00      	cmp	r3, #0
 8004446:	d119      	bne.n	800447c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	685a      	ldr	r2, [r3, #4]
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f022 0220 	bic.w	r2, r2, #32
 8004456:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800445c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004468:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800446c:	2b00      	cmp	r3, #0
 800446e:	d105      	bne.n	800447c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004474:	f043 0201 	orr.w	r2, r3, #1
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800447c:	68f8      	ldr	r0, [r7, #12]
 800447e:	f7ff fd7b 	bl	8003f78 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004482:	e00e      	b.n	80044a2 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004488:	f003 0310 	and.w	r3, r3, #16
 800448c:	2b00      	cmp	r3, #0
 800448e:	d003      	beq.n	8004498 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8004490:	68f8      	ldr	r0, [r7, #12]
 8004492:	f7ff fd85 	bl	8003fa0 <HAL_ADC_ErrorCallback>
}
 8004496:	e004      	b.n	80044a2 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800449c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800449e:	6878      	ldr	r0, [r7, #4]
 80044a0:	4798      	blx	r3
}
 80044a2:	bf00      	nop
 80044a4:	3710      	adds	r7, #16
 80044a6:	46bd      	mov	sp, r7
 80044a8:	bd80      	pop	{r7, pc}

080044aa <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80044aa:	b580      	push	{r7, lr}
 80044ac:	b084      	sub	sp, #16
 80044ae:	af00      	add	r7, sp, #0
 80044b0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044b6:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80044b8:	68f8      	ldr	r0, [r7, #12]
 80044ba:	f7ff fd67 	bl	8003f8c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80044be:	bf00      	nop
 80044c0:	3710      	adds	r7, #16
 80044c2:	46bd      	mov	sp, r7
 80044c4:	bd80      	pop	{r7, pc}

080044c6 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80044c6:	b580      	push	{r7, lr}
 80044c8:	b084      	sub	sp, #16
 80044ca:	af00      	add	r7, sp, #0
 80044cc:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044d2:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	2240      	movs	r2, #64	; 0x40
 80044d8:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044de:	f043 0204 	orr.w	r2, r3, #4
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80044e6:	68f8      	ldr	r0, [r7, #12]
 80044e8:	f7ff fd5a 	bl	8003fa0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80044ec:	bf00      	nop
 80044ee:	3710      	adds	r7, #16
 80044f0:	46bd      	mov	sp, r7
 80044f2:	bd80      	pop	{r7, pc}

080044f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80044f4:	b480      	push	{r7}
 80044f6:	b085      	sub	sp, #20
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	f003 0307 	and.w	r3, r3, #7
 8004502:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004504:	4b0c      	ldr	r3, [pc, #48]	; (8004538 <__NVIC_SetPriorityGrouping+0x44>)
 8004506:	68db      	ldr	r3, [r3, #12]
 8004508:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800450a:	68ba      	ldr	r2, [r7, #8]
 800450c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004510:	4013      	ands	r3, r2
 8004512:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004518:	68bb      	ldr	r3, [r7, #8]
 800451a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800451c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004520:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004524:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004526:	4a04      	ldr	r2, [pc, #16]	; (8004538 <__NVIC_SetPriorityGrouping+0x44>)
 8004528:	68bb      	ldr	r3, [r7, #8]
 800452a:	60d3      	str	r3, [r2, #12]
}
 800452c:	bf00      	nop
 800452e:	3714      	adds	r7, #20
 8004530:	46bd      	mov	sp, r7
 8004532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004536:	4770      	bx	lr
 8004538:	e000ed00 	.word	0xe000ed00

0800453c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800453c:	b480      	push	{r7}
 800453e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004540:	4b04      	ldr	r3, [pc, #16]	; (8004554 <__NVIC_GetPriorityGrouping+0x18>)
 8004542:	68db      	ldr	r3, [r3, #12]
 8004544:	0a1b      	lsrs	r3, r3, #8
 8004546:	f003 0307 	and.w	r3, r3, #7
}
 800454a:	4618      	mov	r0, r3
 800454c:	46bd      	mov	sp, r7
 800454e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004552:	4770      	bx	lr
 8004554:	e000ed00 	.word	0xe000ed00

08004558 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004558:	b480      	push	{r7}
 800455a:	b083      	sub	sp, #12
 800455c:	af00      	add	r7, sp, #0
 800455e:	4603      	mov	r3, r0
 8004560:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004562:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004566:	2b00      	cmp	r3, #0
 8004568:	db0b      	blt.n	8004582 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800456a:	79fb      	ldrb	r3, [r7, #7]
 800456c:	f003 021f 	and.w	r2, r3, #31
 8004570:	4907      	ldr	r1, [pc, #28]	; (8004590 <__NVIC_EnableIRQ+0x38>)
 8004572:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004576:	095b      	lsrs	r3, r3, #5
 8004578:	2001      	movs	r0, #1
 800457a:	fa00 f202 	lsl.w	r2, r0, r2
 800457e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004582:	bf00      	nop
 8004584:	370c      	adds	r7, #12
 8004586:	46bd      	mov	sp, r7
 8004588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458c:	4770      	bx	lr
 800458e:	bf00      	nop
 8004590:	e000e100 	.word	0xe000e100

08004594 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004594:	b480      	push	{r7}
 8004596:	b083      	sub	sp, #12
 8004598:	af00      	add	r7, sp, #0
 800459a:	4603      	mov	r3, r0
 800459c:	6039      	str	r1, [r7, #0]
 800459e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80045a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	db0a      	blt.n	80045be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	b2da      	uxtb	r2, r3
 80045ac:	490c      	ldr	r1, [pc, #48]	; (80045e0 <__NVIC_SetPriority+0x4c>)
 80045ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045b2:	0112      	lsls	r2, r2, #4
 80045b4:	b2d2      	uxtb	r2, r2
 80045b6:	440b      	add	r3, r1
 80045b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80045bc:	e00a      	b.n	80045d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	b2da      	uxtb	r2, r3
 80045c2:	4908      	ldr	r1, [pc, #32]	; (80045e4 <__NVIC_SetPriority+0x50>)
 80045c4:	79fb      	ldrb	r3, [r7, #7]
 80045c6:	f003 030f 	and.w	r3, r3, #15
 80045ca:	3b04      	subs	r3, #4
 80045cc:	0112      	lsls	r2, r2, #4
 80045ce:	b2d2      	uxtb	r2, r2
 80045d0:	440b      	add	r3, r1
 80045d2:	761a      	strb	r2, [r3, #24]
}
 80045d4:	bf00      	nop
 80045d6:	370c      	adds	r7, #12
 80045d8:	46bd      	mov	sp, r7
 80045da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045de:	4770      	bx	lr
 80045e0:	e000e100 	.word	0xe000e100
 80045e4:	e000ed00 	.word	0xe000ed00

080045e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80045e8:	b480      	push	{r7}
 80045ea:	b089      	sub	sp, #36	; 0x24
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	60f8      	str	r0, [r7, #12]
 80045f0:	60b9      	str	r1, [r7, #8]
 80045f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	f003 0307 	and.w	r3, r3, #7
 80045fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80045fc:	69fb      	ldr	r3, [r7, #28]
 80045fe:	f1c3 0307 	rsb	r3, r3, #7
 8004602:	2b04      	cmp	r3, #4
 8004604:	bf28      	it	cs
 8004606:	2304      	movcs	r3, #4
 8004608:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800460a:	69fb      	ldr	r3, [r7, #28]
 800460c:	3304      	adds	r3, #4
 800460e:	2b06      	cmp	r3, #6
 8004610:	d902      	bls.n	8004618 <NVIC_EncodePriority+0x30>
 8004612:	69fb      	ldr	r3, [r7, #28]
 8004614:	3b03      	subs	r3, #3
 8004616:	e000      	b.n	800461a <NVIC_EncodePriority+0x32>
 8004618:	2300      	movs	r3, #0
 800461a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800461c:	f04f 32ff 	mov.w	r2, #4294967295
 8004620:	69bb      	ldr	r3, [r7, #24]
 8004622:	fa02 f303 	lsl.w	r3, r2, r3
 8004626:	43da      	mvns	r2, r3
 8004628:	68bb      	ldr	r3, [r7, #8]
 800462a:	401a      	ands	r2, r3
 800462c:	697b      	ldr	r3, [r7, #20]
 800462e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004630:	f04f 31ff 	mov.w	r1, #4294967295
 8004634:	697b      	ldr	r3, [r7, #20]
 8004636:	fa01 f303 	lsl.w	r3, r1, r3
 800463a:	43d9      	mvns	r1, r3
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004640:	4313      	orrs	r3, r2
         );
}
 8004642:	4618      	mov	r0, r3
 8004644:	3724      	adds	r7, #36	; 0x24
 8004646:	46bd      	mov	sp, r7
 8004648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464c:	4770      	bx	lr

0800464e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800464e:	b580      	push	{r7, lr}
 8004650:	b082      	sub	sp, #8
 8004652:	af00      	add	r7, sp, #0
 8004654:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004656:	6878      	ldr	r0, [r7, #4]
 8004658:	f7ff ff4c 	bl	80044f4 <__NVIC_SetPriorityGrouping>
}
 800465c:	bf00      	nop
 800465e:	3708      	adds	r7, #8
 8004660:	46bd      	mov	sp, r7
 8004662:	bd80      	pop	{r7, pc}

08004664 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004664:	b580      	push	{r7, lr}
 8004666:	b086      	sub	sp, #24
 8004668:	af00      	add	r7, sp, #0
 800466a:	4603      	mov	r3, r0
 800466c:	60b9      	str	r1, [r7, #8]
 800466e:	607a      	str	r2, [r7, #4]
 8004670:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004672:	2300      	movs	r3, #0
 8004674:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004676:	f7ff ff61 	bl	800453c <__NVIC_GetPriorityGrouping>
 800467a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800467c:	687a      	ldr	r2, [r7, #4]
 800467e:	68b9      	ldr	r1, [r7, #8]
 8004680:	6978      	ldr	r0, [r7, #20]
 8004682:	f7ff ffb1 	bl	80045e8 <NVIC_EncodePriority>
 8004686:	4602      	mov	r2, r0
 8004688:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800468c:	4611      	mov	r1, r2
 800468e:	4618      	mov	r0, r3
 8004690:	f7ff ff80 	bl	8004594 <__NVIC_SetPriority>
}
 8004694:	bf00      	nop
 8004696:	3718      	adds	r7, #24
 8004698:	46bd      	mov	sp, r7
 800469a:	bd80      	pop	{r7, pc}

0800469c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800469c:	b580      	push	{r7, lr}
 800469e:	b082      	sub	sp, #8
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	4603      	mov	r3, r0
 80046a4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80046a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046aa:	4618      	mov	r0, r3
 80046ac:	f7ff ff54 	bl	8004558 <__NVIC_EnableIRQ>
}
 80046b0:	bf00      	nop
 80046b2:	3708      	adds	r7, #8
 80046b4:	46bd      	mov	sp, r7
 80046b6:	bd80      	pop	{r7, pc}

080046b8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80046b8:	b580      	push	{r7, lr}
 80046ba:	b086      	sub	sp, #24
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80046c0:	2300      	movs	r3, #0
 80046c2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80046c4:	f7ff fb18 	bl	8003cf8 <HAL_GetTick>
 80046c8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d101      	bne.n	80046d4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80046d0:	2301      	movs	r3, #1
 80046d2:	e099      	b.n	8004808 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2202      	movs	r2, #2
 80046d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2200      	movs	r2, #0
 80046e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	681a      	ldr	r2, [r3, #0]
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f022 0201 	bic.w	r2, r2, #1
 80046f2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80046f4:	e00f      	b.n	8004716 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80046f6:	f7ff faff 	bl	8003cf8 <HAL_GetTick>
 80046fa:	4602      	mov	r2, r0
 80046fc:	693b      	ldr	r3, [r7, #16]
 80046fe:	1ad3      	subs	r3, r2, r3
 8004700:	2b05      	cmp	r3, #5
 8004702:	d908      	bls.n	8004716 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2220      	movs	r2, #32
 8004708:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	2203      	movs	r2, #3
 800470e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8004712:	2303      	movs	r3, #3
 8004714:	e078      	b.n	8004808 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f003 0301 	and.w	r3, r3, #1
 8004720:	2b00      	cmp	r3, #0
 8004722:	d1e8      	bne.n	80046f6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800472c:	697a      	ldr	r2, [r7, #20]
 800472e:	4b38      	ldr	r3, [pc, #224]	; (8004810 <HAL_DMA_Init+0x158>)
 8004730:	4013      	ands	r3, r2
 8004732:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	685a      	ldr	r2, [r3, #4]
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	689b      	ldr	r3, [r3, #8]
 800473c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004742:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	691b      	ldr	r3, [r3, #16]
 8004748:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800474e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	699b      	ldr	r3, [r3, #24]
 8004754:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800475a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	6a1b      	ldr	r3, [r3, #32]
 8004760:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004762:	697a      	ldr	r2, [r7, #20]
 8004764:	4313      	orrs	r3, r2
 8004766:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800476c:	2b04      	cmp	r3, #4
 800476e:	d107      	bne.n	8004780 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004778:	4313      	orrs	r3, r2
 800477a:	697a      	ldr	r2, [r7, #20]
 800477c:	4313      	orrs	r3, r2
 800477e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	697a      	ldr	r2, [r7, #20]
 8004786:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	695b      	ldr	r3, [r3, #20]
 800478e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004790:	697b      	ldr	r3, [r7, #20]
 8004792:	f023 0307 	bic.w	r3, r3, #7
 8004796:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800479c:	697a      	ldr	r2, [r7, #20]
 800479e:	4313      	orrs	r3, r2
 80047a0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047a6:	2b04      	cmp	r3, #4
 80047a8:	d117      	bne.n	80047da <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047ae:	697a      	ldr	r2, [r7, #20]
 80047b0:	4313      	orrs	r3, r2
 80047b2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d00e      	beq.n	80047da <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80047bc:	6878      	ldr	r0, [r7, #4]
 80047be:	f000 fb01 	bl	8004dc4 <DMA_CheckFifoParam>
 80047c2:	4603      	mov	r3, r0
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d008      	beq.n	80047da <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	2240      	movs	r2, #64	; 0x40
 80047cc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	2201      	movs	r2, #1
 80047d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80047d6:	2301      	movs	r3, #1
 80047d8:	e016      	b.n	8004808 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	697a      	ldr	r2, [r7, #20]
 80047e0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80047e2:	6878      	ldr	r0, [r7, #4]
 80047e4:	f000 fab8 	bl	8004d58 <DMA_CalcBaseAndBitshift>
 80047e8:	4603      	mov	r3, r0
 80047ea:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047f0:	223f      	movs	r2, #63	; 0x3f
 80047f2:	409a      	lsls	r2, r3
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2200      	movs	r2, #0
 80047fc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	2201      	movs	r2, #1
 8004802:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004806:	2300      	movs	r3, #0
}
 8004808:	4618      	mov	r0, r3
 800480a:	3718      	adds	r7, #24
 800480c:	46bd      	mov	sp, r7
 800480e:	bd80      	pop	{r7, pc}
 8004810:	f010803f 	.word	0xf010803f

08004814 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004814:	b580      	push	{r7, lr}
 8004816:	b086      	sub	sp, #24
 8004818:	af00      	add	r7, sp, #0
 800481a:	60f8      	str	r0, [r7, #12]
 800481c:	60b9      	str	r1, [r7, #8]
 800481e:	607a      	str	r2, [r7, #4]
 8004820:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004822:	2300      	movs	r3, #0
 8004824:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800482a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004832:	2b01      	cmp	r3, #1
 8004834:	d101      	bne.n	800483a <HAL_DMA_Start_IT+0x26>
 8004836:	2302      	movs	r3, #2
 8004838:	e040      	b.n	80048bc <HAL_DMA_Start_IT+0xa8>
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	2201      	movs	r2, #1
 800483e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004848:	b2db      	uxtb	r3, r3
 800484a:	2b01      	cmp	r3, #1
 800484c:	d12f      	bne.n	80048ae <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	2202      	movs	r2, #2
 8004852:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	2200      	movs	r2, #0
 800485a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800485c:	683b      	ldr	r3, [r7, #0]
 800485e:	687a      	ldr	r2, [r7, #4]
 8004860:	68b9      	ldr	r1, [r7, #8]
 8004862:	68f8      	ldr	r0, [r7, #12]
 8004864:	f000 fa4a 	bl	8004cfc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800486c:	223f      	movs	r2, #63	; 0x3f
 800486e:	409a      	lsls	r2, r3
 8004870:	693b      	ldr	r3, [r7, #16]
 8004872:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	681a      	ldr	r2, [r3, #0]
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f042 0216 	orr.w	r2, r2, #22
 8004882:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004888:	2b00      	cmp	r3, #0
 800488a:	d007      	beq.n	800489c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	681a      	ldr	r2, [r3, #0]
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f042 0208 	orr.w	r2, r2, #8
 800489a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	681a      	ldr	r2, [r3, #0]
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f042 0201 	orr.w	r2, r2, #1
 80048aa:	601a      	str	r2, [r3, #0]
 80048ac:	e005      	b.n	80048ba <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	2200      	movs	r2, #0
 80048b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80048b6:	2302      	movs	r3, #2
 80048b8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80048ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80048bc:	4618      	mov	r0, r3
 80048be:	3718      	adds	r7, #24
 80048c0:	46bd      	mov	sp, r7
 80048c2:	bd80      	pop	{r7, pc}

080048c4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80048c4:	b580      	push	{r7, lr}
 80048c6:	b084      	sub	sp, #16
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048d0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80048d2:	f7ff fa11 	bl	8003cf8 <HAL_GetTick>
 80048d6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80048de:	b2db      	uxtb	r3, r3
 80048e0:	2b02      	cmp	r3, #2
 80048e2:	d008      	beq.n	80048f6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2280      	movs	r2, #128	; 0x80
 80048e8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	2200      	movs	r2, #0
 80048ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80048f2:	2301      	movs	r3, #1
 80048f4:	e052      	b.n	800499c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	681a      	ldr	r2, [r3, #0]
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f022 0216 	bic.w	r2, r2, #22
 8004904:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	695a      	ldr	r2, [r3, #20]
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004914:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800491a:	2b00      	cmp	r3, #0
 800491c:	d103      	bne.n	8004926 <HAL_DMA_Abort+0x62>
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004922:	2b00      	cmp	r3, #0
 8004924:	d007      	beq.n	8004936 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	681a      	ldr	r2, [r3, #0]
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f022 0208 	bic.w	r2, r2, #8
 8004934:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	681a      	ldr	r2, [r3, #0]
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f022 0201 	bic.w	r2, r2, #1
 8004944:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004946:	e013      	b.n	8004970 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004948:	f7ff f9d6 	bl	8003cf8 <HAL_GetTick>
 800494c:	4602      	mov	r2, r0
 800494e:	68bb      	ldr	r3, [r7, #8]
 8004950:	1ad3      	subs	r3, r2, r3
 8004952:	2b05      	cmp	r3, #5
 8004954:	d90c      	bls.n	8004970 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	2220      	movs	r2, #32
 800495a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2203      	movs	r2, #3
 8004960:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2200      	movs	r2, #0
 8004968:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800496c:	2303      	movs	r3, #3
 800496e:	e015      	b.n	800499c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f003 0301 	and.w	r3, r3, #1
 800497a:	2b00      	cmp	r3, #0
 800497c:	d1e4      	bne.n	8004948 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004982:	223f      	movs	r2, #63	; 0x3f
 8004984:	409a      	lsls	r2, r3
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	2201      	movs	r2, #1
 800498e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	2200      	movs	r2, #0
 8004996:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800499a:	2300      	movs	r3, #0
}
 800499c:	4618      	mov	r0, r3
 800499e:	3710      	adds	r7, #16
 80049a0:	46bd      	mov	sp, r7
 80049a2:	bd80      	pop	{r7, pc}

080049a4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80049a4:	b480      	push	{r7}
 80049a6:	b083      	sub	sp, #12
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80049b2:	b2db      	uxtb	r3, r3
 80049b4:	2b02      	cmp	r3, #2
 80049b6:	d004      	beq.n	80049c2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2280      	movs	r2, #128	; 0x80
 80049bc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80049be:	2301      	movs	r3, #1
 80049c0:	e00c      	b.n	80049dc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	2205      	movs	r2, #5
 80049c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	681a      	ldr	r2, [r3, #0]
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f022 0201 	bic.w	r2, r2, #1
 80049d8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80049da:	2300      	movs	r3, #0
}
 80049dc:	4618      	mov	r0, r3
 80049de:	370c      	adds	r7, #12
 80049e0:	46bd      	mov	sp, r7
 80049e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e6:	4770      	bx	lr

080049e8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80049e8:	b580      	push	{r7, lr}
 80049ea:	b086      	sub	sp, #24
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80049f0:	2300      	movs	r3, #0
 80049f2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80049f4:	4b8e      	ldr	r3, [pc, #568]	; (8004c30 <HAL_DMA_IRQHandler+0x248>)
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	4a8e      	ldr	r2, [pc, #568]	; (8004c34 <HAL_DMA_IRQHandler+0x24c>)
 80049fa:	fba2 2303 	umull	r2, r3, r2, r3
 80049fe:	0a9b      	lsrs	r3, r3, #10
 8004a00:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a06:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004a08:	693b      	ldr	r3, [r7, #16]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a12:	2208      	movs	r2, #8
 8004a14:	409a      	lsls	r2, r3
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	4013      	ands	r3, r2
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d01a      	beq.n	8004a54 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f003 0304 	and.w	r3, r3, #4
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d013      	beq.n	8004a54 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	681a      	ldr	r2, [r3, #0]
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f022 0204 	bic.w	r2, r2, #4
 8004a3a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a40:	2208      	movs	r2, #8
 8004a42:	409a      	lsls	r2, r3
 8004a44:	693b      	ldr	r3, [r7, #16]
 8004a46:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a4c:	f043 0201 	orr.w	r2, r3, #1
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a58:	2201      	movs	r2, #1
 8004a5a:	409a      	lsls	r2, r3
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	4013      	ands	r3, r2
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d012      	beq.n	8004a8a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	695b      	ldr	r3, [r3, #20]
 8004a6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d00b      	beq.n	8004a8a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a76:	2201      	movs	r2, #1
 8004a78:	409a      	lsls	r2, r3
 8004a7a:	693b      	ldr	r3, [r7, #16]
 8004a7c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a82:	f043 0202 	orr.w	r2, r3, #2
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a8e:	2204      	movs	r2, #4
 8004a90:	409a      	lsls	r2, r3
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	4013      	ands	r3, r2
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d012      	beq.n	8004ac0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f003 0302 	and.w	r3, r3, #2
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d00b      	beq.n	8004ac0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004aac:	2204      	movs	r2, #4
 8004aae:	409a      	lsls	r2, r3
 8004ab0:	693b      	ldr	r3, [r7, #16]
 8004ab2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ab8:	f043 0204 	orr.w	r2, r3, #4
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ac4:	2210      	movs	r2, #16
 8004ac6:	409a      	lsls	r2, r3
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	4013      	ands	r3, r2
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d043      	beq.n	8004b58 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f003 0308 	and.w	r3, r3, #8
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d03c      	beq.n	8004b58 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ae2:	2210      	movs	r2, #16
 8004ae4:	409a      	lsls	r2, r3
 8004ae6:	693b      	ldr	r3, [r7, #16]
 8004ae8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d018      	beq.n	8004b2a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d108      	bne.n	8004b18 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d024      	beq.n	8004b58 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b12:	6878      	ldr	r0, [r7, #4]
 8004b14:	4798      	blx	r3
 8004b16:	e01f      	b.n	8004b58 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d01b      	beq.n	8004b58 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b24:	6878      	ldr	r0, [r7, #4]
 8004b26:	4798      	blx	r3
 8004b28:	e016      	b.n	8004b58 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d107      	bne.n	8004b48 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	681a      	ldr	r2, [r3, #0]
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f022 0208 	bic.w	r2, r2, #8
 8004b46:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d003      	beq.n	8004b58 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b54:	6878      	ldr	r0, [r7, #4]
 8004b56:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b5c:	2220      	movs	r2, #32
 8004b5e:	409a      	lsls	r2, r3
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	4013      	ands	r3, r2
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	f000 808f 	beq.w	8004c88 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f003 0310 	and.w	r3, r3, #16
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	f000 8087 	beq.w	8004c88 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b7e:	2220      	movs	r2, #32
 8004b80:	409a      	lsls	r2, r3
 8004b82:	693b      	ldr	r3, [r7, #16]
 8004b84:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004b8c:	b2db      	uxtb	r3, r3
 8004b8e:	2b05      	cmp	r3, #5
 8004b90:	d136      	bne.n	8004c00 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	681a      	ldr	r2, [r3, #0]
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f022 0216 	bic.w	r2, r2, #22
 8004ba0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	695a      	ldr	r2, [r3, #20]
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004bb0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d103      	bne.n	8004bc2 <HAL_DMA_IRQHandler+0x1da>
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d007      	beq.n	8004bd2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	681a      	ldr	r2, [r3, #0]
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f022 0208 	bic.w	r2, r2, #8
 8004bd0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bd6:	223f      	movs	r2, #63	; 0x3f
 8004bd8:	409a      	lsls	r2, r3
 8004bda:	693b      	ldr	r3, [r7, #16]
 8004bdc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	2201      	movs	r2, #1
 8004be2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	2200      	movs	r2, #0
 8004bea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d07e      	beq.n	8004cf4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004bfa:	6878      	ldr	r0, [r7, #4]
 8004bfc:	4798      	blx	r3
        }
        return;
 8004bfe:	e079      	b.n	8004cf4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d01d      	beq.n	8004c4a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d10d      	bne.n	8004c38 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d031      	beq.n	8004c88 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c28:	6878      	ldr	r0, [r7, #4]
 8004c2a:	4798      	blx	r3
 8004c2c:	e02c      	b.n	8004c88 <HAL_DMA_IRQHandler+0x2a0>
 8004c2e:	bf00      	nop
 8004c30:	20000000 	.word	0x20000000
 8004c34:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d023      	beq.n	8004c88 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c44:	6878      	ldr	r0, [r7, #4]
 8004c46:	4798      	blx	r3
 8004c48:	e01e      	b.n	8004c88 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d10f      	bne.n	8004c78 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	681a      	ldr	r2, [r3, #0]
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f022 0210 	bic.w	r2, r2, #16
 8004c66:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2201      	movs	r2, #1
 8004c6c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2200      	movs	r2, #0
 8004c74:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d003      	beq.n	8004c88 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c84:	6878      	ldr	r0, [r7, #4]
 8004c86:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d032      	beq.n	8004cf6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c94:	f003 0301 	and.w	r3, r3, #1
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d022      	beq.n	8004ce2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2205      	movs	r2, #5
 8004ca0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	681a      	ldr	r2, [r3, #0]
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f022 0201 	bic.w	r2, r2, #1
 8004cb2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004cb4:	68bb      	ldr	r3, [r7, #8]
 8004cb6:	3301      	adds	r3, #1
 8004cb8:	60bb      	str	r3, [r7, #8]
 8004cba:	697a      	ldr	r2, [r7, #20]
 8004cbc:	429a      	cmp	r2, r3
 8004cbe:	d307      	bcc.n	8004cd0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f003 0301 	and.w	r3, r3, #1
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d1f2      	bne.n	8004cb4 <HAL_DMA_IRQHandler+0x2cc>
 8004cce:	e000      	b.n	8004cd2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004cd0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	2201      	movs	r2, #1
 8004cd6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	2200      	movs	r2, #0
 8004cde:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d005      	beq.n	8004cf6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004cee:	6878      	ldr	r0, [r7, #4]
 8004cf0:	4798      	blx	r3
 8004cf2:	e000      	b.n	8004cf6 <HAL_DMA_IRQHandler+0x30e>
        return;
 8004cf4:	bf00      	nop
    }
  }
}
 8004cf6:	3718      	adds	r7, #24
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	bd80      	pop	{r7, pc}

08004cfc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004cfc:	b480      	push	{r7}
 8004cfe:	b085      	sub	sp, #20
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	60f8      	str	r0, [r7, #12]
 8004d04:	60b9      	str	r1, [r7, #8]
 8004d06:	607a      	str	r2, [r7, #4]
 8004d08:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	681a      	ldr	r2, [r3, #0]
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004d18:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	683a      	ldr	r2, [r7, #0]
 8004d20:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	689b      	ldr	r3, [r3, #8]
 8004d26:	2b40      	cmp	r3, #64	; 0x40
 8004d28:	d108      	bne.n	8004d3c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	687a      	ldr	r2, [r7, #4]
 8004d30:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	68ba      	ldr	r2, [r7, #8]
 8004d38:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004d3a:	e007      	b.n	8004d4c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	68ba      	ldr	r2, [r7, #8]
 8004d42:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	687a      	ldr	r2, [r7, #4]
 8004d4a:	60da      	str	r2, [r3, #12]
}
 8004d4c:	bf00      	nop
 8004d4e:	3714      	adds	r7, #20
 8004d50:	46bd      	mov	sp, r7
 8004d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d56:	4770      	bx	lr

08004d58 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004d58:	b480      	push	{r7}
 8004d5a:	b085      	sub	sp, #20
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	b2db      	uxtb	r3, r3
 8004d66:	3b10      	subs	r3, #16
 8004d68:	4a14      	ldr	r2, [pc, #80]	; (8004dbc <DMA_CalcBaseAndBitshift+0x64>)
 8004d6a:	fba2 2303 	umull	r2, r3, r2, r3
 8004d6e:	091b      	lsrs	r3, r3, #4
 8004d70:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004d72:	4a13      	ldr	r2, [pc, #76]	; (8004dc0 <DMA_CalcBaseAndBitshift+0x68>)
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	4413      	add	r3, r2
 8004d78:	781b      	ldrb	r3, [r3, #0]
 8004d7a:	461a      	mov	r2, r3
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	2b03      	cmp	r3, #3
 8004d84:	d909      	bls.n	8004d9a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004d8e:	f023 0303 	bic.w	r3, r3, #3
 8004d92:	1d1a      	adds	r2, r3, #4
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	659a      	str	r2, [r3, #88]	; 0x58
 8004d98:	e007      	b.n	8004daa <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004da2:	f023 0303 	bic.w	r3, r3, #3
 8004da6:	687a      	ldr	r2, [r7, #4]
 8004da8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004dae:	4618      	mov	r0, r3
 8004db0:	3714      	adds	r7, #20
 8004db2:	46bd      	mov	sp, r7
 8004db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db8:	4770      	bx	lr
 8004dba:	bf00      	nop
 8004dbc:	aaaaaaab 	.word	0xaaaaaaab
 8004dc0:	0800b6c4 	.word	0x0800b6c4

08004dc4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004dc4:	b480      	push	{r7}
 8004dc6:	b085      	sub	sp, #20
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004dcc:	2300      	movs	r3, #0
 8004dce:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dd4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	699b      	ldr	r3, [r3, #24]
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d11f      	bne.n	8004e1e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004dde:	68bb      	ldr	r3, [r7, #8]
 8004de0:	2b03      	cmp	r3, #3
 8004de2:	d856      	bhi.n	8004e92 <DMA_CheckFifoParam+0xce>
 8004de4:	a201      	add	r2, pc, #4	; (adr r2, 8004dec <DMA_CheckFifoParam+0x28>)
 8004de6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dea:	bf00      	nop
 8004dec:	08004dfd 	.word	0x08004dfd
 8004df0:	08004e0f 	.word	0x08004e0f
 8004df4:	08004dfd 	.word	0x08004dfd
 8004df8:	08004e93 	.word	0x08004e93
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e00:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d046      	beq.n	8004e96 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004e08:	2301      	movs	r3, #1
 8004e0a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004e0c:	e043      	b.n	8004e96 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e12:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004e16:	d140      	bne.n	8004e9a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004e18:	2301      	movs	r3, #1
 8004e1a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004e1c:	e03d      	b.n	8004e9a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	699b      	ldr	r3, [r3, #24]
 8004e22:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e26:	d121      	bne.n	8004e6c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004e28:	68bb      	ldr	r3, [r7, #8]
 8004e2a:	2b03      	cmp	r3, #3
 8004e2c:	d837      	bhi.n	8004e9e <DMA_CheckFifoParam+0xda>
 8004e2e:	a201      	add	r2, pc, #4	; (adr r2, 8004e34 <DMA_CheckFifoParam+0x70>)
 8004e30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e34:	08004e45 	.word	0x08004e45
 8004e38:	08004e4b 	.word	0x08004e4b
 8004e3c:	08004e45 	.word	0x08004e45
 8004e40:	08004e5d 	.word	0x08004e5d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004e44:	2301      	movs	r3, #1
 8004e46:	73fb      	strb	r3, [r7, #15]
      break;
 8004e48:	e030      	b.n	8004eac <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e4e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d025      	beq.n	8004ea2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004e56:	2301      	movs	r3, #1
 8004e58:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004e5a:	e022      	b.n	8004ea2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e60:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004e64:	d11f      	bne.n	8004ea6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004e66:	2301      	movs	r3, #1
 8004e68:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004e6a:	e01c      	b.n	8004ea6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004e6c:	68bb      	ldr	r3, [r7, #8]
 8004e6e:	2b02      	cmp	r3, #2
 8004e70:	d903      	bls.n	8004e7a <DMA_CheckFifoParam+0xb6>
 8004e72:	68bb      	ldr	r3, [r7, #8]
 8004e74:	2b03      	cmp	r3, #3
 8004e76:	d003      	beq.n	8004e80 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004e78:	e018      	b.n	8004eac <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004e7a:	2301      	movs	r3, #1
 8004e7c:	73fb      	strb	r3, [r7, #15]
      break;
 8004e7e:	e015      	b.n	8004eac <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e84:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d00e      	beq.n	8004eaa <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004e8c:	2301      	movs	r3, #1
 8004e8e:	73fb      	strb	r3, [r7, #15]
      break;
 8004e90:	e00b      	b.n	8004eaa <DMA_CheckFifoParam+0xe6>
      break;
 8004e92:	bf00      	nop
 8004e94:	e00a      	b.n	8004eac <DMA_CheckFifoParam+0xe8>
      break;
 8004e96:	bf00      	nop
 8004e98:	e008      	b.n	8004eac <DMA_CheckFifoParam+0xe8>
      break;
 8004e9a:	bf00      	nop
 8004e9c:	e006      	b.n	8004eac <DMA_CheckFifoParam+0xe8>
      break;
 8004e9e:	bf00      	nop
 8004ea0:	e004      	b.n	8004eac <DMA_CheckFifoParam+0xe8>
      break;
 8004ea2:	bf00      	nop
 8004ea4:	e002      	b.n	8004eac <DMA_CheckFifoParam+0xe8>
      break;   
 8004ea6:	bf00      	nop
 8004ea8:	e000      	b.n	8004eac <DMA_CheckFifoParam+0xe8>
      break;
 8004eaa:	bf00      	nop
    }
  } 
  
  return status; 
 8004eac:	7bfb      	ldrb	r3, [r7, #15]
}
 8004eae:	4618      	mov	r0, r3
 8004eb0:	3714      	adds	r7, #20
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb8:	4770      	bx	lr
 8004eba:	bf00      	nop

08004ebc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004ebc:	b480      	push	{r7}
 8004ebe:	b089      	sub	sp, #36	; 0x24
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	6078      	str	r0, [r7, #4]
 8004ec4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004ec6:	2300      	movs	r3, #0
 8004ec8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004eca:	2300      	movs	r3, #0
 8004ecc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004ece:	2300      	movs	r3, #0
 8004ed0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004ed2:	2300      	movs	r3, #0
 8004ed4:	61fb      	str	r3, [r7, #28]
 8004ed6:	e159      	b.n	800518c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004ed8:	2201      	movs	r2, #1
 8004eda:	69fb      	ldr	r3, [r7, #28]
 8004edc:	fa02 f303 	lsl.w	r3, r2, r3
 8004ee0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004ee2:	683b      	ldr	r3, [r7, #0]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	697a      	ldr	r2, [r7, #20]
 8004ee8:	4013      	ands	r3, r2
 8004eea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004eec:	693a      	ldr	r2, [r7, #16]
 8004eee:	697b      	ldr	r3, [r7, #20]
 8004ef0:	429a      	cmp	r2, r3
 8004ef2:	f040 8148 	bne.w	8005186 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004ef6:	683b      	ldr	r3, [r7, #0]
 8004ef8:	685b      	ldr	r3, [r3, #4]
 8004efa:	f003 0303 	and.w	r3, r3, #3
 8004efe:	2b01      	cmp	r3, #1
 8004f00:	d005      	beq.n	8004f0e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004f02:	683b      	ldr	r3, [r7, #0]
 8004f04:	685b      	ldr	r3, [r3, #4]
 8004f06:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004f0a:	2b02      	cmp	r3, #2
 8004f0c:	d130      	bne.n	8004f70 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	689b      	ldr	r3, [r3, #8]
 8004f12:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004f14:	69fb      	ldr	r3, [r7, #28]
 8004f16:	005b      	lsls	r3, r3, #1
 8004f18:	2203      	movs	r2, #3
 8004f1a:	fa02 f303 	lsl.w	r3, r2, r3
 8004f1e:	43db      	mvns	r3, r3
 8004f20:	69ba      	ldr	r2, [r7, #24]
 8004f22:	4013      	ands	r3, r2
 8004f24:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004f26:	683b      	ldr	r3, [r7, #0]
 8004f28:	68da      	ldr	r2, [r3, #12]
 8004f2a:	69fb      	ldr	r3, [r7, #28]
 8004f2c:	005b      	lsls	r3, r3, #1
 8004f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8004f32:	69ba      	ldr	r2, [r7, #24]
 8004f34:	4313      	orrs	r3, r2
 8004f36:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	69ba      	ldr	r2, [r7, #24]
 8004f3c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	685b      	ldr	r3, [r3, #4]
 8004f42:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004f44:	2201      	movs	r2, #1
 8004f46:	69fb      	ldr	r3, [r7, #28]
 8004f48:	fa02 f303 	lsl.w	r3, r2, r3
 8004f4c:	43db      	mvns	r3, r3
 8004f4e:	69ba      	ldr	r2, [r7, #24]
 8004f50:	4013      	ands	r3, r2
 8004f52:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004f54:	683b      	ldr	r3, [r7, #0]
 8004f56:	685b      	ldr	r3, [r3, #4]
 8004f58:	091b      	lsrs	r3, r3, #4
 8004f5a:	f003 0201 	and.w	r2, r3, #1
 8004f5e:	69fb      	ldr	r3, [r7, #28]
 8004f60:	fa02 f303 	lsl.w	r3, r2, r3
 8004f64:	69ba      	ldr	r2, [r7, #24]
 8004f66:	4313      	orrs	r3, r2
 8004f68:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	69ba      	ldr	r2, [r7, #24]
 8004f6e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004f70:	683b      	ldr	r3, [r7, #0]
 8004f72:	685b      	ldr	r3, [r3, #4]
 8004f74:	f003 0303 	and.w	r3, r3, #3
 8004f78:	2b03      	cmp	r3, #3
 8004f7a:	d017      	beq.n	8004fac <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	68db      	ldr	r3, [r3, #12]
 8004f80:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004f82:	69fb      	ldr	r3, [r7, #28]
 8004f84:	005b      	lsls	r3, r3, #1
 8004f86:	2203      	movs	r2, #3
 8004f88:	fa02 f303 	lsl.w	r3, r2, r3
 8004f8c:	43db      	mvns	r3, r3
 8004f8e:	69ba      	ldr	r2, [r7, #24]
 8004f90:	4013      	ands	r3, r2
 8004f92:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004f94:	683b      	ldr	r3, [r7, #0]
 8004f96:	689a      	ldr	r2, [r3, #8]
 8004f98:	69fb      	ldr	r3, [r7, #28]
 8004f9a:	005b      	lsls	r3, r3, #1
 8004f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8004fa0:	69ba      	ldr	r2, [r7, #24]
 8004fa2:	4313      	orrs	r3, r2
 8004fa4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	69ba      	ldr	r2, [r7, #24]
 8004faa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004fac:	683b      	ldr	r3, [r7, #0]
 8004fae:	685b      	ldr	r3, [r3, #4]
 8004fb0:	f003 0303 	and.w	r3, r3, #3
 8004fb4:	2b02      	cmp	r3, #2
 8004fb6:	d123      	bne.n	8005000 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004fb8:	69fb      	ldr	r3, [r7, #28]
 8004fba:	08da      	lsrs	r2, r3, #3
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	3208      	adds	r2, #8
 8004fc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004fc4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004fc6:	69fb      	ldr	r3, [r7, #28]
 8004fc8:	f003 0307 	and.w	r3, r3, #7
 8004fcc:	009b      	lsls	r3, r3, #2
 8004fce:	220f      	movs	r2, #15
 8004fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8004fd4:	43db      	mvns	r3, r3
 8004fd6:	69ba      	ldr	r2, [r7, #24]
 8004fd8:	4013      	ands	r3, r2
 8004fda:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004fdc:	683b      	ldr	r3, [r7, #0]
 8004fde:	691a      	ldr	r2, [r3, #16]
 8004fe0:	69fb      	ldr	r3, [r7, #28]
 8004fe2:	f003 0307 	and.w	r3, r3, #7
 8004fe6:	009b      	lsls	r3, r3, #2
 8004fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8004fec:	69ba      	ldr	r2, [r7, #24]
 8004fee:	4313      	orrs	r3, r2
 8004ff0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004ff2:	69fb      	ldr	r3, [r7, #28]
 8004ff4:	08da      	lsrs	r2, r3, #3
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	3208      	adds	r2, #8
 8004ffa:	69b9      	ldr	r1, [r7, #24]
 8004ffc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005006:	69fb      	ldr	r3, [r7, #28]
 8005008:	005b      	lsls	r3, r3, #1
 800500a:	2203      	movs	r2, #3
 800500c:	fa02 f303 	lsl.w	r3, r2, r3
 8005010:	43db      	mvns	r3, r3
 8005012:	69ba      	ldr	r2, [r7, #24]
 8005014:	4013      	ands	r3, r2
 8005016:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005018:	683b      	ldr	r3, [r7, #0]
 800501a:	685b      	ldr	r3, [r3, #4]
 800501c:	f003 0203 	and.w	r2, r3, #3
 8005020:	69fb      	ldr	r3, [r7, #28]
 8005022:	005b      	lsls	r3, r3, #1
 8005024:	fa02 f303 	lsl.w	r3, r2, r3
 8005028:	69ba      	ldr	r2, [r7, #24]
 800502a:	4313      	orrs	r3, r2
 800502c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	69ba      	ldr	r2, [r7, #24]
 8005032:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005034:	683b      	ldr	r3, [r7, #0]
 8005036:	685b      	ldr	r3, [r3, #4]
 8005038:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800503c:	2b00      	cmp	r3, #0
 800503e:	f000 80a2 	beq.w	8005186 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005042:	2300      	movs	r3, #0
 8005044:	60fb      	str	r3, [r7, #12]
 8005046:	4b57      	ldr	r3, [pc, #348]	; (80051a4 <HAL_GPIO_Init+0x2e8>)
 8005048:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800504a:	4a56      	ldr	r2, [pc, #344]	; (80051a4 <HAL_GPIO_Init+0x2e8>)
 800504c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005050:	6453      	str	r3, [r2, #68]	; 0x44
 8005052:	4b54      	ldr	r3, [pc, #336]	; (80051a4 <HAL_GPIO_Init+0x2e8>)
 8005054:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005056:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800505a:	60fb      	str	r3, [r7, #12]
 800505c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800505e:	4a52      	ldr	r2, [pc, #328]	; (80051a8 <HAL_GPIO_Init+0x2ec>)
 8005060:	69fb      	ldr	r3, [r7, #28]
 8005062:	089b      	lsrs	r3, r3, #2
 8005064:	3302      	adds	r3, #2
 8005066:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800506a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800506c:	69fb      	ldr	r3, [r7, #28]
 800506e:	f003 0303 	and.w	r3, r3, #3
 8005072:	009b      	lsls	r3, r3, #2
 8005074:	220f      	movs	r2, #15
 8005076:	fa02 f303 	lsl.w	r3, r2, r3
 800507a:	43db      	mvns	r3, r3
 800507c:	69ba      	ldr	r2, [r7, #24]
 800507e:	4013      	ands	r3, r2
 8005080:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	4a49      	ldr	r2, [pc, #292]	; (80051ac <HAL_GPIO_Init+0x2f0>)
 8005086:	4293      	cmp	r3, r2
 8005088:	d019      	beq.n	80050be <HAL_GPIO_Init+0x202>
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	4a48      	ldr	r2, [pc, #288]	; (80051b0 <HAL_GPIO_Init+0x2f4>)
 800508e:	4293      	cmp	r3, r2
 8005090:	d013      	beq.n	80050ba <HAL_GPIO_Init+0x1fe>
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	4a47      	ldr	r2, [pc, #284]	; (80051b4 <HAL_GPIO_Init+0x2f8>)
 8005096:	4293      	cmp	r3, r2
 8005098:	d00d      	beq.n	80050b6 <HAL_GPIO_Init+0x1fa>
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	4a46      	ldr	r2, [pc, #280]	; (80051b8 <HAL_GPIO_Init+0x2fc>)
 800509e:	4293      	cmp	r3, r2
 80050a0:	d007      	beq.n	80050b2 <HAL_GPIO_Init+0x1f6>
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	4a45      	ldr	r2, [pc, #276]	; (80051bc <HAL_GPIO_Init+0x300>)
 80050a6:	4293      	cmp	r3, r2
 80050a8:	d101      	bne.n	80050ae <HAL_GPIO_Init+0x1f2>
 80050aa:	2304      	movs	r3, #4
 80050ac:	e008      	b.n	80050c0 <HAL_GPIO_Init+0x204>
 80050ae:	2307      	movs	r3, #7
 80050b0:	e006      	b.n	80050c0 <HAL_GPIO_Init+0x204>
 80050b2:	2303      	movs	r3, #3
 80050b4:	e004      	b.n	80050c0 <HAL_GPIO_Init+0x204>
 80050b6:	2302      	movs	r3, #2
 80050b8:	e002      	b.n	80050c0 <HAL_GPIO_Init+0x204>
 80050ba:	2301      	movs	r3, #1
 80050bc:	e000      	b.n	80050c0 <HAL_GPIO_Init+0x204>
 80050be:	2300      	movs	r3, #0
 80050c0:	69fa      	ldr	r2, [r7, #28]
 80050c2:	f002 0203 	and.w	r2, r2, #3
 80050c6:	0092      	lsls	r2, r2, #2
 80050c8:	4093      	lsls	r3, r2
 80050ca:	69ba      	ldr	r2, [r7, #24]
 80050cc:	4313      	orrs	r3, r2
 80050ce:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80050d0:	4935      	ldr	r1, [pc, #212]	; (80051a8 <HAL_GPIO_Init+0x2ec>)
 80050d2:	69fb      	ldr	r3, [r7, #28]
 80050d4:	089b      	lsrs	r3, r3, #2
 80050d6:	3302      	adds	r3, #2
 80050d8:	69ba      	ldr	r2, [r7, #24]
 80050da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80050de:	4b38      	ldr	r3, [pc, #224]	; (80051c0 <HAL_GPIO_Init+0x304>)
 80050e0:	689b      	ldr	r3, [r3, #8]
 80050e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80050e4:	693b      	ldr	r3, [r7, #16]
 80050e6:	43db      	mvns	r3, r3
 80050e8:	69ba      	ldr	r2, [r7, #24]
 80050ea:	4013      	ands	r3, r2
 80050ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80050ee:	683b      	ldr	r3, [r7, #0]
 80050f0:	685b      	ldr	r3, [r3, #4]
 80050f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d003      	beq.n	8005102 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80050fa:	69ba      	ldr	r2, [r7, #24]
 80050fc:	693b      	ldr	r3, [r7, #16]
 80050fe:	4313      	orrs	r3, r2
 8005100:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005102:	4a2f      	ldr	r2, [pc, #188]	; (80051c0 <HAL_GPIO_Init+0x304>)
 8005104:	69bb      	ldr	r3, [r7, #24]
 8005106:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005108:	4b2d      	ldr	r3, [pc, #180]	; (80051c0 <HAL_GPIO_Init+0x304>)
 800510a:	68db      	ldr	r3, [r3, #12]
 800510c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800510e:	693b      	ldr	r3, [r7, #16]
 8005110:	43db      	mvns	r3, r3
 8005112:	69ba      	ldr	r2, [r7, #24]
 8005114:	4013      	ands	r3, r2
 8005116:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005118:	683b      	ldr	r3, [r7, #0]
 800511a:	685b      	ldr	r3, [r3, #4]
 800511c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005120:	2b00      	cmp	r3, #0
 8005122:	d003      	beq.n	800512c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8005124:	69ba      	ldr	r2, [r7, #24]
 8005126:	693b      	ldr	r3, [r7, #16]
 8005128:	4313      	orrs	r3, r2
 800512a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800512c:	4a24      	ldr	r2, [pc, #144]	; (80051c0 <HAL_GPIO_Init+0x304>)
 800512e:	69bb      	ldr	r3, [r7, #24]
 8005130:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005132:	4b23      	ldr	r3, [pc, #140]	; (80051c0 <HAL_GPIO_Init+0x304>)
 8005134:	685b      	ldr	r3, [r3, #4]
 8005136:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005138:	693b      	ldr	r3, [r7, #16]
 800513a:	43db      	mvns	r3, r3
 800513c:	69ba      	ldr	r2, [r7, #24]
 800513e:	4013      	ands	r3, r2
 8005140:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005142:	683b      	ldr	r3, [r7, #0]
 8005144:	685b      	ldr	r3, [r3, #4]
 8005146:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800514a:	2b00      	cmp	r3, #0
 800514c:	d003      	beq.n	8005156 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800514e:	69ba      	ldr	r2, [r7, #24]
 8005150:	693b      	ldr	r3, [r7, #16]
 8005152:	4313      	orrs	r3, r2
 8005154:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005156:	4a1a      	ldr	r2, [pc, #104]	; (80051c0 <HAL_GPIO_Init+0x304>)
 8005158:	69bb      	ldr	r3, [r7, #24]
 800515a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800515c:	4b18      	ldr	r3, [pc, #96]	; (80051c0 <HAL_GPIO_Init+0x304>)
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005162:	693b      	ldr	r3, [r7, #16]
 8005164:	43db      	mvns	r3, r3
 8005166:	69ba      	ldr	r2, [r7, #24]
 8005168:	4013      	ands	r3, r2
 800516a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800516c:	683b      	ldr	r3, [r7, #0]
 800516e:	685b      	ldr	r3, [r3, #4]
 8005170:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005174:	2b00      	cmp	r3, #0
 8005176:	d003      	beq.n	8005180 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8005178:	69ba      	ldr	r2, [r7, #24]
 800517a:	693b      	ldr	r3, [r7, #16]
 800517c:	4313      	orrs	r3, r2
 800517e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005180:	4a0f      	ldr	r2, [pc, #60]	; (80051c0 <HAL_GPIO_Init+0x304>)
 8005182:	69bb      	ldr	r3, [r7, #24]
 8005184:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005186:	69fb      	ldr	r3, [r7, #28]
 8005188:	3301      	adds	r3, #1
 800518a:	61fb      	str	r3, [r7, #28]
 800518c:	69fb      	ldr	r3, [r7, #28]
 800518e:	2b0f      	cmp	r3, #15
 8005190:	f67f aea2 	bls.w	8004ed8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005194:	bf00      	nop
 8005196:	bf00      	nop
 8005198:	3724      	adds	r7, #36	; 0x24
 800519a:	46bd      	mov	sp, r7
 800519c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a0:	4770      	bx	lr
 80051a2:	bf00      	nop
 80051a4:	40023800 	.word	0x40023800
 80051a8:	40013800 	.word	0x40013800
 80051ac:	40020000 	.word	0x40020000
 80051b0:	40020400 	.word	0x40020400
 80051b4:	40020800 	.word	0x40020800
 80051b8:	40020c00 	.word	0x40020c00
 80051bc:	40021000 	.word	0x40021000
 80051c0:	40013c00 	.word	0x40013c00

080051c4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80051c4:	b480      	push	{r7}
 80051c6:	b085      	sub	sp, #20
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	6078      	str	r0, [r7, #4]
 80051cc:	460b      	mov	r3, r1
 80051ce:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	691a      	ldr	r2, [r3, #16]
 80051d4:	887b      	ldrh	r3, [r7, #2]
 80051d6:	4013      	ands	r3, r2
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d002      	beq.n	80051e2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80051dc:	2301      	movs	r3, #1
 80051de:	73fb      	strb	r3, [r7, #15]
 80051e0:	e001      	b.n	80051e6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80051e2:	2300      	movs	r3, #0
 80051e4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80051e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80051e8:	4618      	mov	r0, r3
 80051ea:	3714      	adds	r7, #20
 80051ec:	46bd      	mov	sp, r7
 80051ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f2:	4770      	bx	lr

080051f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80051f4:	b480      	push	{r7}
 80051f6:	b083      	sub	sp, #12
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	6078      	str	r0, [r7, #4]
 80051fc:	460b      	mov	r3, r1
 80051fe:	807b      	strh	r3, [r7, #2]
 8005200:	4613      	mov	r3, r2
 8005202:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005204:	787b      	ldrb	r3, [r7, #1]
 8005206:	2b00      	cmp	r3, #0
 8005208:	d003      	beq.n	8005212 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800520a:	887a      	ldrh	r2, [r7, #2]
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005210:	e003      	b.n	800521a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005212:	887b      	ldrh	r3, [r7, #2]
 8005214:	041a      	lsls	r2, r3, #16
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	619a      	str	r2, [r3, #24]
}
 800521a:	bf00      	nop
 800521c:	370c      	adds	r7, #12
 800521e:	46bd      	mov	sp, r7
 8005220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005224:	4770      	bx	lr

08005226 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005226:	b480      	push	{r7}
 8005228:	b085      	sub	sp, #20
 800522a:	af00      	add	r7, sp, #0
 800522c:	6078      	str	r0, [r7, #4]
 800522e:	460b      	mov	r3, r1
 8005230:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	695b      	ldr	r3, [r3, #20]
 8005236:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005238:	887a      	ldrh	r2, [r7, #2]
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	4013      	ands	r3, r2
 800523e:	041a      	lsls	r2, r3, #16
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	43d9      	mvns	r1, r3
 8005244:	887b      	ldrh	r3, [r7, #2]
 8005246:	400b      	ands	r3, r1
 8005248:	431a      	orrs	r2, r3
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	619a      	str	r2, [r3, #24]
}
 800524e:	bf00      	nop
 8005250:	3714      	adds	r7, #20
 8005252:	46bd      	mov	sp, r7
 8005254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005258:	4770      	bx	lr
	...

0800525c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800525c:	b580      	push	{r7, lr}
 800525e:	b086      	sub	sp, #24
 8005260:	af00      	add	r7, sp, #0
 8005262:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2b00      	cmp	r3, #0
 8005268:	d101      	bne.n	800526e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800526a:	2301      	movs	r3, #1
 800526c:	e267      	b.n	800573e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	f003 0301 	and.w	r3, r3, #1
 8005276:	2b00      	cmp	r3, #0
 8005278:	d075      	beq.n	8005366 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800527a:	4b88      	ldr	r3, [pc, #544]	; (800549c <HAL_RCC_OscConfig+0x240>)
 800527c:	689b      	ldr	r3, [r3, #8]
 800527e:	f003 030c 	and.w	r3, r3, #12
 8005282:	2b04      	cmp	r3, #4
 8005284:	d00c      	beq.n	80052a0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005286:	4b85      	ldr	r3, [pc, #532]	; (800549c <HAL_RCC_OscConfig+0x240>)
 8005288:	689b      	ldr	r3, [r3, #8]
 800528a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800528e:	2b08      	cmp	r3, #8
 8005290:	d112      	bne.n	80052b8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005292:	4b82      	ldr	r3, [pc, #520]	; (800549c <HAL_RCC_OscConfig+0x240>)
 8005294:	685b      	ldr	r3, [r3, #4]
 8005296:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800529a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800529e:	d10b      	bne.n	80052b8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80052a0:	4b7e      	ldr	r3, [pc, #504]	; (800549c <HAL_RCC_OscConfig+0x240>)
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d05b      	beq.n	8005364 <HAL_RCC_OscConfig+0x108>
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	685b      	ldr	r3, [r3, #4]
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d157      	bne.n	8005364 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80052b4:	2301      	movs	r3, #1
 80052b6:	e242      	b.n	800573e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	685b      	ldr	r3, [r3, #4]
 80052bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80052c0:	d106      	bne.n	80052d0 <HAL_RCC_OscConfig+0x74>
 80052c2:	4b76      	ldr	r3, [pc, #472]	; (800549c <HAL_RCC_OscConfig+0x240>)
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	4a75      	ldr	r2, [pc, #468]	; (800549c <HAL_RCC_OscConfig+0x240>)
 80052c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80052cc:	6013      	str	r3, [r2, #0]
 80052ce:	e01d      	b.n	800530c <HAL_RCC_OscConfig+0xb0>
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	685b      	ldr	r3, [r3, #4]
 80052d4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80052d8:	d10c      	bne.n	80052f4 <HAL_RCC_OscConfig+0x98>
 80052da:	4b70      	ldr	r3, [pc, #448]	; (800549c <HAL_RCC_OscConfig+0x240>)
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	4a6f      	ldr	r2, [pc, #444]	; (800549c <HAL_RCC_OscConfig+0x240>)
 80052e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80052e4:	6013      	str	r3, [r2, #0]
 80052e6:	4b6d      	ldr	r3, [pc, #436]	; (800549c <HAL_RCC_OscConfig+0x240>)
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	4a6c      	ldr	r2, [pc, #432]	; (800549c <HAL_RCC_OscConfig+0x240>)
 80052ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80052f0:	6013      	str	r3, [r2, #0]
 80052f2:	e00b      	b.n	800530c <HAL_RCC_OscConfig+0xb0>
 80052f4:	4b69      	ldr	r3, [pc, #420]	; (800549c <HAL_RCC_OscConfig+0x240>)
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	4a68      	ldr	r2, [pc, #416]	; (800549c <HAL_RCC_OscConfig+0x240>)
 80052fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80052fe:	6013      	str	r3, [r2, #0]
 8005300:	4b66      	ldr	r3, [pc, #408]	; (800549c <HAL_RCC_OscConfig+0x240>)
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	4a65      	ldr	r2, [pc, #404]	; (800549c <HAL_RCC_OscConfig+0x240>)
 8005306:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800530a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	685b      	ldr	r3, [r3, #4]
 8005310:	2b00      	cmp	r3, #0
 8005312:	d013      	beq.n	800533c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005314:	f7fe fcf0 	bl	8003cf8 <HAL_GetTick>
 8005318:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800531a:	e008      	b.n	800532e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800531c:	f7fe fcec 	bl	8003cf8 <HAL_GetTick>
 8005320:	4602      	mov	r2, r0
 8005322:	693b      	ldr	r3, [r7, #16]
 8005324:	1ad3      	subs	r3, r2, r3
 8005326:	2b64      	cmp	r3, #100	; 0x64
 8005328:	d901      	bls.n	800532e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800532a:	2303      	movs	r3, #3
 800532c:	e207      	b.n	800573e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800532e:	4b5b      	ldr	r3, [pc, #364]	; (800549c <HAL_RCC_OscConfig+0x240>)
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005336:	2b00      	cmp	r3, #0
 8005338:	d0f0      	beq.n	800531c <HAL_RCC_OscConfig+0xc0>
 800533a:	e014      	b.n	8005366 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800533c:	f7fe fcdc 	bl	8003cf8 <HAL_GetTick>
 8005340:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005342:	e008      	b.n	8005356 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005344:	f7fe fcd8 	bl	8003cf8 <HAL_GetTick>
 8005348:	4602      	mov	r2, r0
 800534a:	693b      	ldr	r3, [r7, #16]
 800534c:	1ad3      	subs	r3, r2, r3
 800534e:	2b64      	cmp	r3, #100	; 0x64
 8005350:	d901      	bls.n	8005356 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005352:	2303      	movs	r3, #3
 8005354:	e1f3      	b.n	800573e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005356:	4b51      	ldr	r3, [pc, #324]	; (800549c <HAL_RCC_OscConfig+0x240>)
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800535e:	2b00      	cmp	r3, #0
 8005360:	d1f0      	bne.n	8005344 <HAL_RCC_OscConfig+0xe8>
 8005362:	e000      	b.n	8005366 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005364:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f003 0302 	and.w	r3, r3, #2
 800536e:	2b00      	cmp	r3, #0
 8005370:	d063      	beq.n	800543a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005372:	4b4a      	ldr	r3, [pc, #296]	; (800549c <HAL_RCC_OscConfig+0x240>)
 8005374:	689b      	ldr	r3, [r3, #8]
 8005376:	f003 030c 	and.w	r3, r3, #12
 800537a:	2b00      	cmp	r3, #0
 800537c:	d00b      	beq.n	8005396 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800537e:	4b47      	ldr	r3, [pc, #284]	; (800549c <HAL_RCC_OscConfig+0x240>)
 8005380:	689b      	ldr	r3, [r3, #8]
 8005382:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005386:	2b08      	cmp	r3, #8
 8005388:	d11c      	bne.n	80053c4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800538a:	4b44      	ldr	r3, [pc, #272]	; (800549c <HAL_RCC_OscConfig+0x240>)
 800538c:	685b      	ldr	r3, [r3, #4]
 800538e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005392:	2b00      	cmp	r3, #0
 8005394:	d116      	bne.n	80053c4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005396:	4b41      	ldr	r3, [pc, #260]	; (800549c <HAL_RCC_OscConfig+0x240>)
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f003 0302 	and.w	r3, r3, #2
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d005      	beq.n	80053ae <HAL_RCC_OscConfig+0x152>
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	68db      	ldr	r3, [r3, #12]
 80053a6:	2b01      	cmp	r3, #1
 80053a8:	d001      	beq.n	80053ae <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80053aa:	2301      	movs	r3, #1
 80053ac:	e1c7      	b.n	800573e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80053ae:	4b3b      	ldr	r3, [pc, #236]	; (800549c <HAL_RCC_OscConfig+0x240>)
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	691b      	ldr	r3, [r3, #16]
 80053ba:	00db      	lsls	r3, r3, #3
 80053bc:	4937      	ldr	r1, [pc, #220]	; (800549c <HAL_RCC_OscConfig+0x240>)
 80053be:	4313      	orrs	r3, r2
 80053c0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80053c2:	e03a      	b.n	800543a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	68db      	ldr	r3, [r3, #12]
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d020      	beq.n	800540e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80053cc:	4b34      	ldr	r3, [pc, #208]	; (80054a0 <HAL_RCC_OscConfig+0x244>)
 80053ce:	2201      	movs	r2, #1
 80053d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053d2:	f7fe fc91 	bl	8003cf8 <HAL_GetTick>
 80053d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80053d8:	e008      	b.n	80053ec <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80053da:	f7fe fc8d 	bl	8003cf8 <HAL_GetTick>
 80053de:	4602      	mov	r2, r0
 80053e0:	693b      	ldr	r3, [r7, #16]
 80053e2:	1ad3      	subs	r3, r2, r3
 80053e4:	2b02      	cmp	r3, #2
 80053e6:	d901      	bls.n	80053ec <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80053e8:	2303      	movs	r3, #3
 80053ea:	e1a8      	b.n	800573e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80053ec:	4b2b      	ldr	r3, [pc, #172]	; (800549c <HAL_RCC_OscConfig+0x240>)
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	f003 0302 	and.w	r3, r3, #2
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d0f0      	beq.n	80053da <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80053f8:	4b28      	ldr	r3, [pc, #160]	; (800549c <HAL_RCC_OscConfig+0x240>)
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	691b      	ldr	r3, [r3, #16]
 8005404:	00db      	lsls	r3, r3, #3
 8005406:	4925      	ldr	r1, [pc, #148]	; (800549c <HAL_RCC_OscConfig+0x240>)
 8005408:	4313      	orrs	r3, r2
 800540a:	600b      	str	r3, [r1, #0]
 800540c:	e015      	b.n	800543a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800540e:	4b24      	ldr	r3, [pc, #144]	; (80054a0 <HAL_RCC_OscConfig+0x244>)
 8005410:	2200      	movs	r2, #0
 8005412:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005414:	f7fe fc70 	bl	8003cf8 <HAL_GetTick>
 8005418:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800541a:	e008      	b.n	800542e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800541c:	f7fe fc6c 	bl	8003cf8 <HAL_GetTick>
 8005420:	4602      	mov	r2, r0
 8005422:	693b      	ldr	r3, [r7, #16]
 8005424:	1ad3      	subs	r3, r2, r3
 8005426:	2b02      	cmp	r3, #2
 8005428:	d901      	bls.n	800542e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800542a:	2303      	movs	r3, #3
 800542c:	e187      	b.n	800573e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800542e:	4b1b      	ldr	r3, [pc, #108]	; (800549c <HAL_RCC_OscConfig+0x240>)
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	f003 0302 	and.w	r3, r3, #2
 8005436:	2b00      	cmp	r3, #0
 8005438:	d1f0      	bne.n	800541c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	f003 0308 	and.w	r3, r3, #8
 8005442:	2b00      	cmp	r3, #0
 8005444:	d036      	beq.n	80054b4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	695b      	ldr	r3, [r3, #20]
 800544a:	2b00      	cmp	r3, #0
 800544c:	d016      	beq.n	800547c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800544e:	4b15      	ldr	r3, [pc, #84]	; (80054a4 <HAL_RCC_OscConfig+0x248>)
 8005450:	2201      	movs	r2, #1
 8005452:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005454:	f7fe fc50 	bl	8003cf8 <HAL_GetTick>
 8005458:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800545a:	e008      	b.n	800546e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800545c:	f7fe fc4c 	bl	8003cf8 <HAL_GetTick>
 8005460:	4602      	mov	r2, r0
 8005462:	693b      	ldr	r3, [r7, #16]
 8005464:	1ad3      	subs	r3, r2, r3
 8005466:	2b02      	cmp	r3, #2
 8005468:	d901      	bls.n	800546e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800546a:	2303      	movs	r3, #3
 800546c:	e167      	b.n	800573e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800546e:	4b0b      	ldr	r3, [pc, #44]	; (800549c <HAL_RCC_OscConfig+0x240>)
 8005470:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005472:	f003 0302 	and.w	r3, r3, #2
 8005476:	2b00      	cmp	r3, #0
 8005478:	d0f0      	beq.n	800545c <HAL_RCC_OscConfig+0x200>
 800547a:	e01b      	b.n	80054b4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800547c:	4b09      	ldr	r3, [pc, #36]	; (80054a4 <HAL_RCC_OscConfig+0x248>)
 800547e:	2200      	movs	r2, #0
 8005480:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005482:	f7fe fc39 	bl	8003cf8 <HAL_GetTick>
 8005486:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005488:	e00e      	b.n	80054a8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800548a:	f7fe fc35 	bl	8003cf8 <HAL_GetTick>
 800548e:	4602      	mov	r2, r0
 8005490:	693b      	ldr	r3, [r7, #16]
 8005492:	1ad3      	subs	r3, r2, r3
 8005494:	2b02      	cmp	r3, #2
 8005496:	d907      	bls.n	80054a8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005498:	2303      	movs	r3, #3
 800549a:	e150      	b.n	800573e <HAL_RCC_OscConfig+0x4e2>
 800549c:	40023800 	.word	0x40023800
 80054a0:	42470000 	.word	0x42470000
 80054a4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80054a8:	4b88      	ldr	r3, [pc, #544]	; (80056cc <HAL_RCC_OscConfig+0x470>)
 80054aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80054ac:	f003 0302 	and.w	r3, r3, #2
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d1ea      	bne.n	800548a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f003 0304 	and.w	r3, r3, #4
 80054bc:	2b00      	cmp	r3, #0
 80054be:	f000 8097 	beq.w	80055f0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80054c2:	2300      	movs	r3, #0
 80054c4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80054c6:	4b81      	ldr	r3, [pc, #516]	; (80056cc <HAL_RCC_OscConfig+0x470>)
 80054c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d10f      	bne.n	80054f2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80054d2:	2300      	movs	r3, #0
 80054d4:	60bb      	str	r3, [r7, #8]
 80054d6:	4b7d      	ldr	r3, [pc, #500]	; (80056cc <HAL_RCC_OscConfig+0x470>)
 80054d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054da:	4a7c      	ldr	r2, [pc, #496]	; (80056cc <HAL_RCC_OscConfig+0x470>)
 80054dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80054e0:	6413      	str	r3, [r2, #64]	; 0x40
 80054e2:	4b7a      	ldr	r3, [pc, #488]	; (80056cc <HAL_RCC_OscConfig+0x470>)
 80054e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80054ea:	60bb      	str	r3, [r7, #8]
 80054ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80054ee:	2301      	movs	r3, #1
 80054f0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80054f2:	4b77      	ldr	r3, [pc, #476]	; (80056d0 <HAL_RCC_OscConfig+0x474>)
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d118      	bne.n	8005530 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80054fe:	4b74      	ldr	r3, [pc, #464]	; (80056d0 <HAL_RCC_OscConfig+0x474>)
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	4a73      	ldr	r2, [pc, #460]	; (80056d0 <HAL_RCC_OscConfig+0x474>)
 8005504:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005508:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800550a:	f7fe fbf5 	bl	8003cf8 <HAL_GetTick>
 800550e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005510:	e008      	b.n	8005524 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005512:	f7fe fbf1 	bl	8003cf8 <HAL_GetTick>
 8005516:	4602      	mov	r2, r0
 8005518:	693b      	ldr	r3, [r7, #16]
 800551a:	1ad3      	subs	r3, r2, r3
 800551c:	2b02      	cmp	r3, #2
 800551e:	d901      	bls.n	8005524 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005520:	2303      	movs	r3, #3
 8005522:	e10c      	b.n	800573e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005524:	4b6a      	ldr	r3, [pc, #424]	; (80056d0 <HAL_RCC_OscConfig+0x474>)
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800552c:	2b00      	cmp	r3, #0
 800552e:	d0f0      	beq.n	8005512 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	689b      	ldr	r3, [r3, #8]
 8005534:	2b01      	cmp	r3, #1
 8005536:	d106      	bne.n	8005546 <HAL_RCC_OscConfig+0x2ea>
 8005538:	4b64      	ldr	r3, [pc, #400]	; (80056cc <HAL_RCC_OscConfig+0x470>)
 800553a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800553c:	4a63      	ldr	r2, [pc, #396]	; (80056cc <HAL_RCC_OscConfig+0x470>)
 800553e:	f043 0301 	orr.w	r3, r3, #1
 8005542:	6713      	str	r3, [r2, #112]	; 0x70
 8005544:	e01c      	b.n	8005580 <HAL_RCC_OscConfig+0x324>
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	689b      	ldr	r3, [r3, #8]
 800554a:	2b05      	cmp	r3, #5
 800554c:	d10c      	bne.n	8005568 <HAL_RCC_OscConfig+0x30c>
 800554e:	4b5f      	ldr	r3, [pc, #380]	; (80056cc <HAL_RCC_OscConfig+0x470>)
 8005550:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005552:	4a5e      	ldr	r2, [pc, #376]	; (80056cc <HAL_RCC_OscConfig+0x470>)
 8005554:	f043 0304 	orr.w	r3, r3, #4
 8005558:	6713      	str	r3, [r2, #112]	; 0x70
 800555a:	4b5c      	ldr	r3, [pc, #368]	; (80056cc <HAL_RCC_OscConfig+0x470>)
 800555c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800555e:	4a5b      	ldr	r2, [pc, #364]	; (80056cc <HAL_RCC_OscConfig+0x470>)
 8005560:	f043 0301 	orr.w	r3, r3, #1
 8005564:	6713      	str	r3, [r2, #112]	; 0x70
 8005566:	e00b      	b.n	8005580 <HAL_RCC_OscConfig+0x324>
 8005568:	4b58      	ldr	r3, [pc, #352]	; (80056cc <HAL_RCC_OscConfig+0x470>)
 800556a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800556c:	4a57      	ldr	r2, [pc, #348]	; (80056cc <HAL_RCC_OscConfig+0x470>)
 800556e:	f023 0301 	bic.w	r3, r3, #1
 8005572:	6713      	str	r3, [r2, #112]	; 0x70
 8005574:	4b55      	ldr	r3, [pc, #340]	; (80056cc <HAL_RCC_OscConfig+0x470>)
 8005576:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005578:	4a54      	ldr	r2, [pc, #336]	; (80056cc <HAL_RCC_OscConfig+0x470>)
 800557a:	f023 0304 	bic.w	r3, r3, #4
 800557e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	689b      	ldr	r3, [r3, #8]
 8005584:	2b00      	cmp	r3, #0
 8005586:	d015      	beq.n	80055b4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005588:	f7fe fbb6 	bl	8003cf8 <HAL_GetTick>
 800558c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800558e:	e00a      	b.n	80055a6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005590:	f7fe fbb2 	bl	8003cf8 <HAL_GetTick>
 8005594:	4602      	mov	r2, r0
 8005596:	693b      	ldr	r3, [r7, #16]
 8005598:	1ad3      	subs	r3, r2, r3
 800559a:	f241 3288 	movw	r2, #5000	; 0x1388
 800559e:	4293      	cmp	r3, r2
 80055a0:	d901      	bls.n	80055a6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80055a2:	2303      	movs	r3, #3
 80055a4:	e0cb      	b.n	800573e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80055a6:	4b49      	ldr	r3, [pc, #292]	; (80056cc <HAL_RCC_OscConfig+0x470>)
 80055a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055aa:	f003 0302 	and.w	r3, r3, #2
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d0ee      	beq.n	8005590 <HAL_RCC_OscConfig+0x334>
 80055b2:	e014      	b.n	80055de <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80055b4:	f7fe fba0 	bl	8003cf8 <HAL_GetTick>
 80055b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80055ba:	e00a      	b.n	80055d2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80055bc:	f7fe fb9c 	bl	8003cf8 <HAL_GetTick>
 80055c0:	4602      	mov	r2, r0
 80055c2:	693b      	ldr	r3, [r7, #16]
 80055c4:	1ad3      	subs	r3, r2, r3
 80055c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80055ca:	4293      	cmp	r3, r2
 80055cc:	d901      	bls.n	80055d2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80055ce:	2303      	movs	r3, #3
 80055d0:	e0b5      	b.n	800573e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80055d2:	4b3e      	ldr	r3, [pc, #248]	; (80056cc <HAL_RCC_OscConfig+0x470>)
 80055d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055d6:	f003 0302 	and.w	r3, r3, #2
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d1ee      	bne.n	80055bc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80055de:	7dfb      	ldrb	r3, [r7, #23]
 80055e0:	2b01      	cmp	r3, #1
 80055e2:	d105      	bne.n	80055f0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80055e4:	4b39      	ldr	r3, [pc, #228]	; (80056cc <HAL_RCC_OscConfig+0x470>)
 80055e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055e8:	4a38      	ldr	r2, [pc, #224]	; (80056cc <HAL_RCC_OscConfig+0x470>)
 80055ea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80055ee:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	699b      	ldr	r3, [r3, #24]
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	f000 80a1 	beq.w	800573c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80055fa:	4b34      	ldr	r3, [pc, #208]	; (80056cc <HAL_RCC_OscConfig+0x470>)
 80055fc:	689b      	ldr	r3, [r3, #8]
 80055fe:	f003 030c 	and.w	r3, r3, #12
 8005602:	2b08      	cmp	r3, #8
 8005604:	d05c      	beq.n	80056c0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	699b      	ldr	r3, [r3, #24]
 800560a:	2b02      	cmp	r3, #2
 800560c:	d141      	bne.n	8005692 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800560e:	4b31      	ldr	r3, [pc, #196]	; (80056d4 <HAL_RCC_OscConfig+0x478>)
 8005610:	2200      	movs	r2, #0
 8005612:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005614:	f7fe fb70 	bl	8003cf8 <HAL_GetTick>
 8005618:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800561a:	e008      	b.n	800562e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800561c:	f7fe fb6c 	bl	8003cf8 <HAL_GetTick>
 8005620:	4602      	mov	r2, r0
 8005622:	693b      	ldr	r3, [r7, #16]
 8005624:	1ad3      	subs	r3, r2, r3
 8005626:	2b02      	cmp	r3, #2
 8005628:	d901      	bls.n	800562e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800562a:	2303      	movs	r3, #3
 800562c:	e087      	b.n	800573e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800562e:	4b27      	ldr	r3, [pc, #156]	; (80056cc <HAL_RCC_OscConfig+0x470>)
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005636:	2b00      	cmp	r3, #0
 8005638:	d1f0      	bne.n	800561c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	69da      	ldr	r2, [r3, #28]
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	6a1b      	ldr	r3, [r3, #32]
 8005642:	431a      	orrs	r2, r3
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005648:	019b      	lsls	r3, r3, #6
 800564a:	431a      	orrs	r2, r3
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005650:	085b      	lsrs	r3, r3, #1
 8005652:	3b01      	subs	r3, #1
 8005654:	041b      	lsls	r3, r3, #16
 8005656:	431a      	orrs	r2, r3
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800565c:	061b      	lsls	r3, r3, #24
 800565e:	491b      	ldr	r1, [pc, #108]	; (80056cc <HAL_RCC_OscConfig+0x470>)
 8005660:	4313      	orrs	r3, r2
 8005662:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005664:	4b1b      	ldr	r3, [pc, #108]	; (80056d4 <HAL_RCC_OscConfig+0x478>)
 8005666:	2201      	movs	r2, #1
 8005668:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800566a:	f7fe fb45 	bl	8003cf8 <HAL_GetTick>
 800566e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005670:	e008      	b.n	8005684 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005672:	f7fe fb41 	bl	8003cf8 <HAL_GetTick>
 8005676:	4602      	mov	r2, r0
 8005678:	693b      	ldr	r3, [r7, #16]
 800567a:	1ad3      	subs	r3, r2, r3
 800567c:	2b02      	cmp	r3, #2
 800567e:	d901      	bls.n	8005684 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005680:	2303      	movs	r3, #3
 8005682:	e05c      	b.n	800573e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005684:	4b11      	ldr	r3, [pc, #68]	; (80056cc <HAL_RCC_OscConfig+0x470>)
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800568c:	2b00      	cmp	r3, #0
 800568e:	d0f0      	beq.n	8005672 <HAL_RCC_OscConfig+0x416>
 8005690:	e054      	b.n	800573c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005692:	4b10      	ldr	r3, [pc, #64]	; (80056d4 <HAL_RCC_OscConfig+0x478>)
 8005694:	2200      	movs	r2, #0
 8005696:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005698:	f7fe fb2e 	bl	8003cf8 <HAL_GetTick>
 800569c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800569e:	e008      	b.n	80056b2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80056a0:	f7fe fb2a 	bl	8003cf8 <HAL_GetTick>
 80056a4:	4602      	mov	r2, r0
 80056a6:	693b      	ldr	r3, [r7, #16]
 80056a8:	1ad3      	subs	r3, r2, r3
 80056aa:	2b02      	cmp	r3, #2
 80056ac:	d901      	bls.n	80056b2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80056ae:	2303      	movs	r3, #3
 80056b0:	e045      	b.n	800573e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80056b2:	4b06      	ldr	r3, [pc, #24]	; (80056cc <HAL_RCC_OscConfig+0x470>)
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d1f0      	bne.n	80056a0 <HAL_RCC_OscConfig+0x444>
 80056be:	e03d      	b.n	800573c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	699b      	ldr	r3, [r3, #24]
 80056c4:	2b01      	cmp	r3, #1
 80056c6:	d107      	bne.n	80056d8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80056c8:	2301      	movs	r3, #1
 80056ca:	e038      	b.n	800573e <HAL_RCC_OscConfig+0x4e2>
 80056cc:	40023800 	.word	0x40023800
 80056d0:	40007000 	.word	0x40007000
 80056d4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80056d8:	4b1b      	ldr	r3, [pc, #108]	; (8005748 <HAL_RCC_OscConfig+0x4ec>)
 80056da:	685b      	ldr	r3, [r3, #4]
 80056dc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	699b      	ldr	r3, [r3, #24]
 80056e2:	2b01      	cmp	r3, #1
 80056e4:	d028      	beq.n	8005738 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80056f0:	429a      	cmp	r2, r3
 80056f2:	d121      	bne.n	8005738 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80056fe:	429a      	cmp	r2, r3
 8005700:	d11a      	bne.n	8005738 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005702:	68fa      	ldr	r2, [r7, #12]
 8005704:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005708:	4013      	ands	r3, r2
 800570a:	687a      	ldr	r2, [r7, #4]
 800570c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800570e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005710:	4293      	cmp	r3, r2
 8005712:	d111      	bne.n	8005738 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800571e:	085b      	lsrs	r3, r3, #1
 8005720:	3b01      	subs	r3, #1
 8005722:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005724:	429a      	cmp	r2, r3
 8005726:	d107      	bne.n	8005738 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005732:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005734:	429a      	cmp	r2, r3
 8005736:	d001      	beq.n	800573c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005738:	2301      	movs	r3, #1
 800573a:	e000      	b.n	800573e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800573c:	2300      	movs	r3, #0
}
 800573e:	4618      	mov	r0, r3
 8005740:	3718      	adds	r7, #24
 8005742:	46bd      	mov	sp, r7
 8005744:	bd80      	pop	{r7, pc}
 8005746:	bf00      	nop
 8005748:	40023800 	.word	0x40023800

0800574c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800574c:	b580      	push	{r7, lr}
 800574e:	b084      	sub	sp, #16
 8005750:	af00      	add	r7, sp, #0
 8005752:	6078      	str	r0, [r7, #4]
 8005754:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	2b00      	cmp	r3, #0
 800575a:	d101      	bne.n	8005760 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800575c:	2301      	movs	r3, #1
 800575e:	e0cc      	b.n	80058fa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005760:	4b68      	ldr	r3, [pc, #416]	; (8005904 <HAL_RCC_ClockConfig+0x1b8>)
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	f003 0307 	and.w	r3, r3, #7
 8005768:	683a      	ldr	r2, [r7, #0]
 800576a:	429a      	cmp	r2, r3
 800576c:	d90c      	bls.n	8005788 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800576e:	4b65      	ldr	r3, [pc, #404]	; (8005904 <HAL_RCC_ClockConfig+0x1b8>)
 8005770:	683a      	ldr	r2, [r7, #0]
 8005772:	b2d2      	uxtb	r2, r2
 8005774:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005776:	4b63      	ldr	r3, [pc, #396]	; (8005904 <HAL_RCC_ClockConfig+0x1b8>)
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	f003 0307 	and.w	r3, r3, #7
 800577e:	683a      	ldr	r2, [r7, #0]
 8005780:	429a      	cmp	r2, r3
 8005782:	d001      	beq.n	8005788 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005784:	2301      	movs	r3, #1
 8005786:	e0b8      	b.n	80058fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	f003 0302 	and.w	r3, r3, #2
 8005790:	2b00      	cmp	r3, #0
 8005792:	d020      	beq.n	80057d6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	f003 0304 	and.w	r3, r3, #4
 800579c:	2b00      	cmp	r3, #0
 800579e:	d005      	beq.n	80057ac <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80057a0:	4b59      	ldr	r3, [pc, #356]	; (8005908 <HAL_RCC_ClockConfig+0x1bc>)
 80057a2:	689b      	ldr	r3, [r3, #8]
 80057a4:	4a58      	ldr	r2, [pc, #352]	; (8005908 <HAL_RCC_ClockConfig+0x1bc>)
 80057a6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80057aa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	f003 0308 	and.w	r3, r3, #8
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d005      	beq.n	80057c4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80057b8:	4b53      	ldr	r3, [pc, #332]	; (8005908 <HAL_RCC_ClockConfig+0x1bc>)
 80057ba:	689b      	ldr	r3, [r3, #8]
 80057bc:	4a52      	ldr	r2, [pc, #328]	; (8005908 <HAL_RCC_ClockConfig+0x1bc>)
 80057be:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80057c2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80057c4:	4b50      	ldr	r3, [pc, #320]	; (8005908 <HAL_RCC_ClockConfig+0x1bc>)
 80057c6:	689b      	ldr	r3, [r3, #8]
 80057c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	689b      	ldr	r3, [r3, #8]
 80057d0:	494d      	ldr	r1, [pc, #308]	; (8005908 <HAL_RCC_ClockConfig+0x1bc>)
 80057d2:	4313      	orrs	r3, r2
 80057d4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	f003 0301 	and.w	r3, r3, #1
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d044      	beq.n	800586c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	685b      	ldr	r3, [r3, #4]
 80057e6:	2b01      	cmp	r3, #1
 80057e8:	d107      	bne.n	80057fa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80057ea:	4b47      	ldr	r3, [pc, #284]	; (8005908 <HAL_RCC_ClockConfig+0x1bc>)
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d119      	bne.n	800582a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80057f6:	2301      	movs	r3, #1
 80057f8:	e07f      	b.n	80058fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	685b      	ldr	r3, [r3, #4]
 80057fe:	2b02      	cmp	r3, #2
 8005800:	d003      	beq.n	800580a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005806:	2b03      	cmp	r3, #3
 8005808:	d107      	bne.n	800581a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800580a:	4b3f      	ldr	r3, [pc, #252]	; (8005908 <HAL_RCC_ClockConfig+0x1bc>)
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005812:	2b00      	cmp	r3, #0
 8005814:	d109      	bne.n	800582a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005816:	2301      	movs	r3, #1
 8005818:	e06f      	b.n	80058fa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800581a:	4b3b      	ldr	r3, [pc, #236]	; (8005908 <HAL_RCC_ClockConfig+0x1bc>)
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	f003 0302 	and.w	r3, r3, #2
 8005822:	2b00      	cmp	r3, #0
 8005824:	d101      	bne.n	800582a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005826:	2301      	movs	r3, #1
 8005828:	e067      	b.n	80058fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800582a:	4b37      	ldr	r3, [pc, #220]	; (8005908 <HAL_RCC_ClockConfig+0x1bc>)
 800582c:	689b      	ldr	r3, [r3, #8]
 800582e:	f023 0203 	bic.w	r2, r3, #3
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	685b      	ldr	r3, [r3, #4]
 8005836:	4934      	ldr	r1, [pc, #208]	; (8005908 <HAL_RCC_ClockConfig+0x1bc>)
 8005838:	4313      	orrs	r3, r2
 800583a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800583c:	f7fe fa5c 	bl	8003cf8 <HAL_GetTick>
 8005840:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005842:	e00a      	b.n	800585a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005844:	f7fe fa58 	bl	8003cf8 <HAL_GetTick>
 8005848:	4602      	mov	r2, r0
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	1ad3      	subs	r3, r2, r3
 800584e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005852:	4293      	cmp	r3, r2
 8005854:	d901      	bls.n	800585a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005856:	2303      	movs	r3, #3
 8005858:	e04f      	b.n	80058fa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800585a:	4b2b      	ldr	r3, [pc, #172]	; (8005908 <HAL_RCC_ClockConfig+0x1bc>)
 800585c:	689b      	ldr	r3, [r3, #8]
 800585e:	f003 020c 	and.w	r2, r3, #12
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	685b      	ldr	r3, [r3, #4]
 8005866:	009b      	lsls	r3, r3, #2
 8005868:	429a      	cmp	r2, r3
 800586a:	d1eb      	bne.n	8005844 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800586c:	4b25      	ldr	r3, [pc, #148]	; (8005904 <HAL_RCC_ClockConfig+0x1b8>)
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f003 0307 	and.w	r3, r3, #7
 8005874:	683a      	ldr	r2, [r7, #0]
 8005876:	429a      	cmp	r2, r3
 8005878:	d20c      	bcs.n	8005894 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800587a:	4b22      	ldr	r3, [pc, #136]	; (8005904 <HAL_RCC_ClockConfig+0x1b8>)
 800587c:	683a      	ldr	r2, [r7, #0]
 800587e:	b2d2      	uxtb	r2, r2
 8005880:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005882:	4b20      	ldr	r3, [pc, #128]	; (8005904 <HAL_RCC_ClockConfig+0x1b8>)
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	f003 0307 	and.w	r3, r3, #7
 800588a:	683a      	ldr	r2, [r7, #0]
 800588c:	429a      	cmp	r2, r3
 800588e:	d001      	beq.n	8005894 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005890:	2301      	movs	r3, #1
 8005892:	e032      	b.n	80058fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	f003 0304 	and.w	r3, r3, #4
 800589c:	2b00      	cmp	r3, #0
 800589e:	d008      	beq.n	80058b2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80058a0:	4b19      	ldr	r3, [pc, #100]	; (8005908 <HAL_RCC_ClockConfig+0x1bc>)
 80058a2:	689b      	ldr	r3, [r3, #8]
 80058a4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	68db      	ldr	r3, [r3, #12]
 80058ac:	4916      	ldr	r1, [pc, #88]	; (8005908 <HAL_RCC_ClockConfig+0x1bc>)
 80058ae:	4313      	orrs	r3, r2
 80058b0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f003 0308 	and.w	r3, r3, #8
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d009      	beq.n	80058d2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80058be:	4b12      	ldr	r3, [pc, #72]	; (8005908 <HAL_RCC_ClockConfig+0x1bc>)
 80058c0:	689b      	ldr	r3, [r3, #8]
 80058c2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	691b      	ldr	r3, [r3, #16]
 80058ca:	00db      	lsls	r3, r3, #3
 80058cc:	490e      	ldr	r1, [pc, #56]	; (8005908 <HAL_RCC_ClockConfig+0x1bc>)
 80058ce:	4313      	orrs	r3, r2
 80058d0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80058d2:	f000 f821 	bl	8005918 <HAL_RCC_GetSysClockFreq>
 80058d6:	4602      	mov	r2, r0
 80058d8:	4b0b      	ldr	r3, [pc, #44]	; (8005908 <HAL_RCC_ClockConfig+0x1bc>)
 80058da:	689b      	ldr	r3, [r3, #8]
 80058dc:	091b      	lsrs	r3, r3, #4
 80058de:	f003 030f 	and.w	r3, r3, #15
 80058e2:	490a      	ldr	r1, [pc, #40]	; (800590c <HAL_RCC_ClockConfig+0x1c0>)
 80058e4:	5ccb      	ldrb	r3, [r1, r3]
 80058e6:	fa22 f303 	lsr.w	r3, r2, r3
 80058ea:	4a09      	ldr	r2, [pc, #36]	; (8005910 <HAL_RCC_ClockConfig+0x1c4>)
 80058ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80058ee:	4b09      	ldr	r3, [pc, #36]	; (8005914 <HAL_RCC_ClockConfig+0x1c8>)
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	4618      	mov	r0, r3
 80058f4:	f7fe f872 	bl	80039dc <HAL_InitTick>

  return HAL_OK;
 80058f8:	2300      	movs	r3, #0
}
 80058fa:	4618      	mov	r0, r3
 80058fc:	3710      	adds	r7, #16
 80058fe:	46bd      	mov	sp, r7
 8005900:	bd80      	pop	{r7, pc}
 8005902:	bf00      	nop
 8005904:	40023c00 	.word	0x40023c00
 8005908:	40023800 	.word	0x40023800
 800590c:	0800b6ac 	.word	0x0800b6ac
 8005910:	20000000 	.word	0x20000000
 8005914:	20000004 	.word	0x20000004

08005918 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005918:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800591c:	b090      	sub	sp, #64	; 0x40
 800591e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005920:	2300      	movs	r3, #0
 8005922:	637b      	str	r3, [r7, #52]	; 0x34
 8005924:	2300      	movs	r3, #0
 8005926:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005928:	2300      	movs	r3, #0
 800592a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 800592c:	2300      	movs	r3, #0
 800592e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005930:	4b59      	ldr	r3, [pc, #356]	; (8005a98 <HAL_RCC_GetSysClockFreq+0x180>)
 8005932:	689b      	ldr	r3, [r3, #8]
 8005934:	f003 030c 	and.w	r3, r3, #12
 8005938:	2b08      	cmp	r3, #8
 800593a:	d00d      	beq.n	8005958 <HAL_RCC_GetSysClockFreq+0x40>
 800593c:	2b08      	cmp	r3, #8
 800593e:	f200 80a1 	bhi.w	8005a84 <HAL_RCC_GetSysClockFreq+0x16c>
 8005942:	2b00      	cmp	r3, #0
 8005944:	d002      	beq.n	800594c <HAL_RCC_GetSysClockFreq+0x34>
 8005946:	2b04      	cmp	r3, #4
 8005948:	d003      	beq.n	8005952 <HAL_RCC_GetSysClockFreq+0x3a>
 800594a:	e09b      	b.n	8005a84 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800594c:	4b53      	ldr	r3, [pc, #332]	; (8005a9c <HAL_RCC_GetSysClockFreq+0x184>)
 800594e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8005950:	e09b      	b.n	8005a8a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005952:	4b53      	ldr	r3, [pc, #332]	; (8005aa0 <HAL_RCC_GetSysClockFreq+0x188>)
 8005954:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005956:	e098      	b.n	8005a8a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005958:	4b4f      	ldr	r3, [pc, #316]	; (8005a98 <HAL_RCC_GetSysClockFreq+0x180>)
 800595a:	685b      	ldr	r3, [r3, #4]
 800595c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005960:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005962:	4b4d      	ldr	r3, [pc, #308]	; (8005a98 <HAL_RCC_GetSysClockFreq+0x180>)
 8005964:	685b      	ldr	r3, [r3, #4]
 8005966:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800596a:	2b00      	cmp	r3, #0
 800596c:	d028      	beq.n	80059c0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800596e:	4b4a      	ldr	r3, [pc, #296]	; (8005a98 <HAL_RCC_GetSysClockFreq+0x180>)
 8005970:	685b      	ldr	r3, [r3, #4]
 8005972:	099b      	lsrs	r3, r3, #6
 8005974:	2200      	movs	r2, #0
 8005976:	623b      	str	r3, [r7, #32]
 8005978:	627a      	str	r2, [r7, #36]	; 0x24
 800597a:	6a3b      	ldr	r3, [r7, #32]
 800597c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8005980:	2100      	movs	r1, #0
 8005982:	4b47      	ldr	r3, [pc, #284]	; (8005aa0 <HAL_RCC_GetSysClockFreq+0x188>)
 8005984:	fb03 f201 	mul.w	r2, r3, r1
 8005988:	2300      	movs	r3, #0
 800598a:	fb00 f303 	mul.w	r3, r0, r3
 800598e:	4413      	add	r3, r2
 8005990:	4a43      	ldr	r2, [pc, #268]	; (8005aa0 <HAL_RCC_GetSysClockFreq+0x188>)
 8005992:	fba0 1202 	umull	r1, r2, r0, r2
 8005996:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005998:	460a      	mov	r2, r1
 800599a:	62ba      	str	r2, [r7, #40]	; 0x28
 800599c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800599e:	4413      	add	r3, r2
 80059a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80059a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059a4:	2200      	movs	r2, #0
 80059a6:	61bb      	str	r3, [r7, #24]
 80059a8:	61fa      	str	r2, [r7, #28]
 80059aa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80059ae:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80059b2:	f7fa ff53 	bl	800085c <__aeabi_uldivmod>
 80059b6:	4602      	mov	r2, r0
 80059b8:	460b      	mov	r3, r1
 80059ba:	4613      	mov	r3, r2
 80059bc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80059be:	e053      	b.n	8005a68 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80059c0:	4b35      	ldr	r3, [pc, #212]	; (8005a98 <HAL_RCC_GetSysClockFreq+0x180>)
 80059c2:	685b      	ldr	r3, [r3, #4]
 80059c4:	099b      	lsrs	r3, r3, #6
 80059c6:	2200      	movs	r2, #0
 80059c8:	613b      	str	r3, [r7, #16]
 80059ca:	617a      	str	r2, [r7, #20]
 80059cc:	693b      	ldr	r3, [r7, #16]
 80059ce:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80059d2:	f04f 0b00 	mov.w	fp, #0
 80059d6:	4652      	mov	r2, sl
 80059d8:	465b      	mov	r3, fp
 80059da:	f04f 0000 	mov.w	r0, #0
 80059de:	f04f 0100 	mov.w	r1, #0
 80059e2:	0159      	lsls	r1, r3, #5
 80059e4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80059e8:	0150      	lsls	r0, r2, #5
 80059ea:	4602      	mov	r2, r0
 80059ec:	460b      	mov	r3, r1
 80059ee:	ebb2 080a 	subs.w	r8, r2, sl
 80059f2:	eb63 090b 	sbc.w	r9, r3, fp
 80059f6:	f04f 0200 	mov.w	r2, #0
 80059fa:	f04f 0300 	mov.w	r3, #0
 80059fe:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8005a02:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8005a06:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8005a0a:	ebb2 0408 	subs.w	r4, r2, r8
 8005a0e:	eb63 0509 	sbc.w	r5, r3, r9
 8005a12:	f04f 0200 	mov.w	r2, #0
 8005a16:	f04f 0300 	mov.w	r3, #0
 8005a1a:	00eb      	lsls	r3, r5, #3
 8005a1c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005a20:	00e2      	lsls	r2, r4, #3
 8005a22:	4614      	mov	r4, r2
 8005a24:	461d      	mov	r5, r3
 8005a26:	eb14 030a 	adds.w	r3, r4, sl
 8005a2a:	603b      	str	r3, [r7, #0]
 8005a2c:	eb45 030b 	adc.w	r3, r5, fp
 8005a30:	607b      	str	r3, [r7, #4]
 8005a32:	f04f 0200 	mov.w	r2, #0
 8005a36:	f04f 0300 	mov.w	r3, #0
 8005a3a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005a3e:	4629      	mov	r1, r5
 8005a40:	028b      	lsls	r3, r1, #10
 8005a42:	4621      	mov	r1, r4
 8005a44:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005a48:	4621      	mov	r1, r4
 8005a4a:	028a      	lsls	r2, r1, #10
 8005a4c:	4610      	mov	r0, r2
 8005a4e:	4619      	mov	r1, r3
 8005a50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a52:	2200      	movs	r2, #0
 8005a54:	60bb      	str	r3, [r7, #8]
 8005a56:	60fa      	str	r2, [r7, #12]
 8005a58:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005a5c:	f7fa fefe 	bl	800085c <__aeabi_uldivmod>
 8005a60:	4602      	mov	r2, r0
 8005a62:	460b      	mov	r3, r1
 8005a64:	4613      	mov	r3, r2
 8005a66:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005a68:	4b0b      	ldr	r3, [pc, #44]	; (8005a98 <HAL_RCC_GetSysClockFreq+0x180>)
 8005a6a:	685b      	ldr	r3, [r3, #4]
 8005a6c:	0c1b      	lsrs	r3, r3, #16
 8005a6e:	f003 0303 	and.w	r3, r3, #3
 8005a72:	3301      	adds	r3, #1
 8005a74:	005b      	lsls	r3, r3, #1
 8005a76:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8005a78:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005a7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a80:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005a82:	e002      	b.n	8005a8a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005a84:	4b05      	ldr	r3, [pc, #20]	; (8005a9c <HAL_RCC_GetSysClockFreq+0x184>)
 8005a86:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005a88:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005a8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8005a8c:	4618      	mov	r0, r3
 8005a8e:	3740      	adds	r7, #64	; 0x40
 8005a90:	46bd      	mov	sp, r7
 8005a92:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005a96:	bf00      	nop
 8005a98:	40023800 	.word	0x40023800
 8005a9c:	00f42400 	.word	0x00f42400
 8005aa0:	017d7840 	.word	0x017d7840

08005aa4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005aa4:	b480      	push	{r7}
 8005aa6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005aa8:	4b03      	ldr	r3, [pc, #12]	; (8005ab8 <HAL_RCC_GetHCLKFreq+0x14>)
 8005aaa:	681b      	ldr	r3, [r3, #0]
}
 8005aac:	4618      	mov	r0, r3
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab4:	4770      	bx	lr
 8005ab6:	bf00      	nop
 8005ab8:	20000000 	.word	0x20000000

08005abc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005abc:	b580      	push	{r7, lr}
 8005abe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005ac0:	f7ff fff0 	bl	8005aa4 <HAL_RCC_GetHCLKFreq>
 8005ac4:	4602      	mov	r2, r0
 8005ac6:	4b05      	ldr	r3, [pc, #20]	; (8005adc <HAL_RCC_GetPCLK1Freq+0x20>)
 8005ac8:	689b      	ldr	r3, [r3, #8]
 8005aca:	0a9b      	lsrs	r3, r3, #10
 8005acc:	f003 0307 	and.w	r3, r3, #7
 8005ad0:	4903      	ldr	r1, [pc, #12]	; (8005ae0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005ad2:	5ccb      	ldrb	r3, [r1, r3]
 8005ad4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005ad8:	4618      	mov	r0, r3
 8005ada:	bd80      	pop	{r7, pc}
 8005adc:	40023800 	.word	0x40023800
 8005ae0:	0800b6bc 	.word	0x0800b6bc

08005ae4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005ae4:	b580      	push	{r7, lr}
 8005ae6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005ae8:	f7ff ffdc 	bl	8005aa4 <HAL_RCC_GetHCLKFreq>
 8005aec:	4602      	mov	r2, r0
 8005aee:	4b05      	ldr	r3, [pc, #20]	; (8005b04 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005af0:	689b      	ldr	r3, [r3, #8]
 8005af2:	0b5b      	lsrs	r3, r3, #13
 8005af4:	f003 0307 	and.w	r3, r3, #7
 8005af8:	4903      	ldr	r1, [pc, #12]	; (8005b08 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005afa:	5ccb      	ldrb	r3, [r1, r3]
 8005afc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005b00:	4618      	mov	r0, r3
 8005b02:	bd80      	pop	{r7, pc}
 8005b04:	40023800 	.word	0x40023800
 8005b08:	0800b6bc 	.word	0x0800b6bc

08005b0c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005b0c:	b480      	push	{r7}
 8005b0e:	b083      	sub	sp, #12
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	6078      	str	r0, [r7, #4]
 8005b14:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	220f      	movs	r2, #15
 8005b1a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005b1c:	4b12      	ldr	r3, [pc, #72]	; (8005b68 <HAL_RCC_GetClockConfig+0x5c>)
 8005b1e:	689b      	ldr	r3, [r3, #8]
 8005b20:	f003 0203 	and.w	r2, r3, #3
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005b28:	4b0f      	ldr	r3, [pc, #60]	; (8005b68 <HAL_RCC_GetClockConfig+0x5c>)
 8005b2a:	689b      	ldr	r3, [r3, #8]
 8005b2c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005b34:	4b0c      	ldr	r3, [pc, #48]	; (8005b68 <HAL_RCC_GetClockConfig+0x5c>)
 8005b36:	689b      	ldr	r3, [r3, #8]
 8005b38:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8005b40:	4b09      	ldr	r3, [pc, #36]	; (8005b68 <HAL_RCC_GetClockConfig+0x5c>)
 8005b42:	689b      	ldr	r3, [r3, #8]
 8005b44:	08db      	lsrs	r3, r3, #3
 8005b46:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005b4e:	4b07      	ldr	r3, [pc, #28]	; (8005b6c <HAL_RCC_GetClockConfig+0x60>)
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	f003 0207 	and.w	r2, r3, #7
 8005b56:	683b      	ldr	r3, [r7, #0]
 8005b58:	601a      	str	r2, [r3, #0]
}
 8005b5a:	bf00      	nop
 8005b5c:	370c      	adds	r7, #12
 8005b5e:	46bd      	mov	sp, r7
 8005b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b64:	4770      	bx	lr
 8005b66:	bf00      	nop
 8005b68:	40023800 	.word	0x40023800
 8005b6c:	40023c00 	.word	0x40023c00

08005b70 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005b70:	b580      	push	{r7, lr}
 8005b72:	b082      	sub	sp, #8
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d101      	bne.n	8005b82 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005b7e:	2301      	movs	r3, #1
 8005b80:	e041      	b.n	8005c06 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b88:	b2db      	uxtb	r3, r3
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d106      	bne.n	8005b9c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	2200      	movs	r2, #0
 8005b92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005b96:	6878      	ldr	r0, [r7, #4]
 8005b98:	f7fd fe14 	bl	80037c4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	2202      	movs	r2, #2
 8005ba0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681a      	ldr	r2, [r3, #0]
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	3304      	adds	r3, #4
 8005bac:	4619      	mov	r1, r3
 8005bae:	4610      	mov	r0, r2
 8005bb0:	f000 fc54 	bl	800645c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2201      	movs	r2, #1
 8005bb8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	2201      	movs	r2, #1
 8005bc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	2201      	movs	r2, #1
 8005bc8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	2201      	movs	r2, #1
 8005bd0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	2201      	movs	r2, #1
 8005bd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	2201      	movs	r2, #1
 8005be0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	2201      	movs	r2, #1
 8005be8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	2201      	movs	r2, #1
 8005bf0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	2201      	movs	r2, #1
 8005bf8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	2201      	movs	r2, #1
 8005c00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005c04:	2300      	movs	r3, #0
}
 8005c06:	4618      	mov	r0, r3
 8005c08:	3708      	adds	r7, #8
 8005c0a:	46bd      	mov	sp, r7
 8005c0c:	bd80      	pop	{r7, pc}
	...

08005c10 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005c10:	b480      	push	{r7}
 8005c12:	b085      	sub	sp, #20
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c1e:	b2db      	uxtb	r3, r3
 8005c20:	2b01      	cmp	r3, #1
 8005c22:	d001      	beq.n	8005c28 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005c24:	2301      	movs	r3, #1
 8005c26:	e044      	b.n	8005cb2 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	2202      	movs	r2, #2
 8005c2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	68da      	ldr	r2, [r3, #12]
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	f042 0201 	orr.w	r2, r2, #1
 8005c3e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	4a1e      	ldr	r2, [pc, #120]	; (8005cc0 <HAL_TIM_Base_Start_IT+0xb0>)
 8005c46:	4293      	cmp	r3, r2
 8005c48:	d018      	beq.n	8005c7c <HAL_TIM_Base_Start_IT+0x6c>
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c52:	d013      	beq.n	8005c7c <HAL_TIM_Base_Start_IT+0x6c>
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	4a1a      	ldr	r2, [pc, #104]	; (8005cc4 <HAL_TIM_Base_Start_IT+0xb4>)
 8005c5a:	4293      	cmp	r3, r2
 8005c5c:	d00e      	beq.n	8005c7c <HAL_TIM_Base_Start_IT+0x6c>
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	4a19      	ldr	r2, [pc, #100]	; (8005cc8 <HAL_TIM_Base_Start_IT+0xb8>)
 8005c64:	4293      	cmp	r3, r2
 8005c66:	d009      	beq.n	8005c7c <HAL_TIM_Base_Start_IT+0x6c>
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	4a17      	ldr	r2, [pc, #92]	; (8005ccc <HAL_TIM_Base_Start_IT+0xbc>)
 8005c6e:	4293      	cmp	r3, r2
 8005c70:	d004      	beq.n	8005c7c <HAL_TIM_Base_Start_IT+0x6c>
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	4a16      	ldr	r2, [pc, #88]	; (8005cd0 <HAL_TIM_Base_Start_IT+0xc0>)
 8005c78:	4293      	cmp	r3, r2
 8005c7a:	d111      	bne.n	8005ca0 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	689b      	ldr	r3, [r3, #8]
 8005c82:	f003 0307 	and.w	r3, r3, #7
 8005c86:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	2b06      	cmp	r3, #6
 8005c8c:	d010      	beq.n	8005cb0 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	681a      	ldr	r2, [r3, #0]
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	f042 0201 	orr.w	r2, r2, #1
 8005c9c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c9e:	e007      	b.n	8005cb0 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	681a      	ldr	r2, [r3, #0]
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	f042 0201 	orr.w	r2, r2, #1
 8005cae:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005cb0:	2300      	movs	r3, #0
}
 8005cb2:	4618      	mov	r0, r3
 8005cb4:	3714      	adds	r7, #20
 8005cb6:	46bd      	mov	sp, r7
 8005cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cbc:	4770      	bx	lr
 8005cbe:	bf00      	nop
 8005cc0:	40010000 	.word	0x40010000
 8005cc4:	40000400 	.word	0x40000400
 8005cc8:	40000800 	.word	0x40000800
 8005ccc:	40000c00 	.word	0x40000c00
 8005cd0:	40014000 	.word	0x40014000

08005cd4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005cd4:	b580      	push	{r7, lr}
 8005cd6:	b082      	sub	sp, #8
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d101      	bne.n	8005ce6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005ce2:	2301      	movs	r3, #1
 8005ce4:	e041      	b.n	8005d6a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005cec:	b2db      	uxtb	r3, r3
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d106      	bne.n	8005d00 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	2200      	movs	r2, #0
 8005cf6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005cfa:	6878      	ldr	r0, [r7, #4]
 8005cfc:	f000 f839 	bl	8005d72 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	2202      	movs	r2, #2
 8005d04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681a      	ldr	r2, [r3, #0]
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	3304      	adds	r3, #4
 8005d10:	4619      	mov	r1, r3
 8005d12:	4610      	mov	r0, r2
 8005d14:	f000 fba2 	bl	800645c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	2201      	movs	r2, #1
 8005d1c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	2201      	movs	r2, #1
 8005d24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	2201      	movs	r2, #1
 8005d2c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	2201      	movs	r2, #1
 8005d34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	2201      	movs	r2, #1
 8005d3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	2201      	movs	r2, #1
 8005d44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	2201      	movs	r2, #1
 8005d4c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	2201      	movs	r2, #1
 8005d54:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	2201      	movs	r2, #1
 8005d5c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	2201      	movs	r2, #1
 8005d64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005d68:	2300      	movs	r3, #0
}
 8005d6a:	4618      	mov	r0, r3
 8005d6c:	3708      	adds	r7, #8
 8005d6e:	46bd      	mov	sp, r7
 8005d70:	bd80      	pop	{r7, pc}

08005d72 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005d72:	b480      	push	{r7}
 8005d74:	b083      	sub	sp, #12
 8005d76:	af00      	add	r7, sp, #0
 8005d78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005d7a:	bf00      	nop
 8005d7c:	370c      	adds	r7, #12
 8005d7e:	46bd      	mov	sp, r7
 8005d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d84:	4770      	bx	lr
	...

08005d88 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005d88:	b580      	push	{r7, lr}
 8005d8a:	b084      	sub	sp, #16
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	6078      	str	r0, [r7, #4]
 8005d90:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005d92:	683b      	ldr	r3, [r7, #0]
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d109      	bne.n	8005dac <HAL_TIM_PWM_Start+0x24>
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005d9e:	b2db      	uxtb	r3, r3
 8005da0:	2b01      	cmp	r3, #1
 8005da2:	bf14      	ite	ne
 8005da4:	2301      	movne	r3, #1
 8005da6:	2300      	moveq	r3, #0
 8005da8:	b2db      	uxtb	r3, r3
 8005daa:	e022      	b.n	8005df2 <HAL_TIM_PWM_Start+0x6a>
 8005dac:	683b      	ldr	r3, [r7, #0]
 8005dae:	2b04      	cmp	r3, #4
 8005db0:	d109      	bne.n	8005dc6 <HAL_TIM_PWM_Start+0x3e>
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005db8:	b2db      	uxtb	r3, r3
 8005dba:	2b01      	cmp	r3, #1
 8005dbc:	bf14      	ite	ne
 8005dbe:	2301      	movne	r3, #1
 8005dc0:	2300      	moveq	r3, #0
 8005dc2:	b2db      	uxtb	r3, r3
 8005dc4:	e015      	b.n	8005df2 <HAL_TIM_PWM_Start+0x6a>
 8005dc6:	683b      	ldr	r3, [r7, #0]
 8005dc8:	2b08      	cmp	r3, #8
 8005dca:	d109      	bne.n	8005de0 <HAL_TIM_PWM_Start+0x58>
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005dd2:	b2db      	uxtb	r3, r3
 8005dd4:	2b01      	cmp	r3, #1
 8005dd6:	bf14      	ite	ne
 8005dd8:	2301      	movne	r3, #1
 8005dda:	2300      	moveq	r3, #0
 8005ddc:	b2db      	uxtb	r3, r3
 8005dde:	e008      	b.n	8005df2 <HAL_TIM_PWM_Start+0x6a>
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005de6:	b2db      	uxtb	r3, r3
 8005de8:	2b01      	cmp	r3, #1
 8005dea:	bf14      	ite	ne
 8005dec:	2301      	movne	r3, #1
 8005dee:	2300      	moveq	r3, #0
 8005df0:	b2db      	uxtb	r3, r3
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d001      	beq.n	8005dfa <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005df6:	2301      	movs	r3, #1
 8005df8:	e068      	b.n	8005ecc <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005dfa:	683b      	ldr	r3, [r7, #0]
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d104      	bne.n	8005e0a <HAL_TIM_PWM_Start+0x82>
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	2202      	movs	r2, #2
 8005e04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005e08:	e013      	b.n	8005e32 <HAL_TIM_PWM_Start+0xaa>
 8005e0a:	683b      	ldr	r3, [r7, #0]
 8005e0c:	2b04      	cmp	r3, #4
 8005e0e:	d104      	bne.n	8005e1a <HAL_TIM_PWM_Start+0x92>
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	2202      	movs	r2, #2
 8005e14:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005e18:	e00b      	b.n	8005e32 <HAL_TIM_PWM_Start+0xaa>
 8005e1a:	683b      	ldr	r3, [r7, #0]
 8005e1c:	2b08      	cmp	r3, #8
 8005e1e:	d104      	bne.n	8005e2a <HAL_TIM_PWM_Start+0xa2>
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	2202      	movs	r2, #2
 8005e24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005e28:	e003      	b.n	8005e32 <HAL_TIM_PWM_Start+0xaa>
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	2202      	movs	r2, #2
 8005e2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	2201      	movs	r2, #1
 8005e38:	6839      	ldr	r1, [r7, #0]
 8005e3a:	4618      	mov	r0, r3
 8005e3c:	f000 fdb4 	bl	80069a8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	4a23      	ldr	r2, [pc, #140]	; (8005ed4 <HAL_TIM_PWM_Start+0x14c>)
 8005e46:	4293      	cmp	r3, r2
 8005e48:	d107      	bne.n	8005e5a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005e58:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	4a1d      	ldr	r2, [pc, #116]	; (8005ed4 <HAL_TIM_PWM_Start+0x14c>)
 8005e60:	4293      	cmp	r3, r2
 8005e62:	d018      	beq.n	8005e96 <HAL_TIM_PWM_Start+0x10e>
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e6c:	d013      	beq.n	8005e96 <HAL_TIM_PWM_Start+0x10e>
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	4a19      	ldr	r2, [pc, #100]	; (8005ed8 <HAL_TIM_PWM_Start+0x150>)
 8005e74:	4293      	cmp	r3, r2
 8005e76:	d00e      	beq.n	8005e96 <HAL_TIM_PWM_Start+0x10e>
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	4a17      	ldr	r2, [pc, #92]	; (8005edc <HAL_TIM_PWM_Start+0x154>)
 8005e7e:	4293      	cmp	r3, r2
 8005e80:	d009      	beq.n	8005e96 <HAL_TIM_PWM_Start+0x10e>
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	4a16      	ldr	r2, [pc, #88]	; (8005ee0 <HAL_TIM_PWM_Start+0x158>)
 8005e88:	4293      	cmp	r3, r2
 8005e8a:	d004      	beq.n	8005e96 <HAL_TIM_PWM_Start+0x10e>
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	4a14      	ldr	r2, [pc, #80]	; (8005ee4 <HAL_TIM_PWM_Start+0x15c>)
 8005e92:	4293      	cmp	r3, r2
 8005e94:	d111      	bne.n	8005eba <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	689b      	ldr	r3, [r3, #8]
 8005e9c:	f003 0307 	and.w	r3, r3, #7
 8005ea0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	2b06      	cmp	r3, #6
 8005ea6:	d010      	beq.n	8005eca <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	681a      	ldr	r2, [r3, #0]
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	f042 0201 	orr.w	r2, r2, #1
 8005eb6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005eb8:	e007      	b.n	8005eca <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	681a      	ldr	r2, [r3, #0]
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	f042 0201 	orr.w	r2, r2, #1
 8005ec8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005eca:	2300      	movs	r3, #0
}
 8005ecc:	4618      	mov	r0, r3
 8005ece:	3710      	adds	r7, #16
 8005ed0:	46bd      	mov	sp, r7
 8005ed2:	bd80      	pop	{r7, pc}
 8005ed4:	40010000 	.word	0x40010000
 8005ed8:	40000400 	.word	0x40000400
 8005edc:	40000800 	.word	0x40000800
 8005ee0:	40000c00 	.word	0x40000c00
 8005ee4:	40014000 	.word	0x40014000

08005ee8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005ee8:	b580      	push	{r7, lr}
 8005eea:	b082      	sub	sp, #8
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	691b      	ldr	r3, [r3, #16]
 8005ef6:	f003 0302 	and.w	r3, r3, #2
 8005efa:	2b02      	cmp	r3, #2
 8005efc:	d122      	bne.n	8005f44 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	68db      	ldr	r3, [r3, #12]
 8005f04:	f003 0302 	and.w	r3, r3, #2
 8005f08:	2b02      	cmp	r3, #2
 8005f0a:	d11b      	bne.n	8005f44 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	f06f 0202 	mvn.w	r2, #2
 8005f14:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	2201      	movs	r2, #1
 8005f1a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	699b      	ldr	r3, [r3, #24]
 8005f22:	f003 0303 	and.w	r3, r3, #3
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d003      	beq.n	8005f32 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005f2a:	6878      	ldr	r0, [r7, #4]
 8005f2c:	f000 fa77 	bl	800641e <HAL_TIM_IC_CaptureCallback>
 8005f30:	e005      	b.n	8005f3e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f32:	6878      	ldr	r0, [r7, #4]
 8005f34:	f000 fa69 	bl	800640a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f38:	6878      	ldr	r0, [r7, #4]
 8005f3a:	f000 fa7a 	bl	8006432 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	2200      	movs	r2, #0
 8005f42:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	691b      	ldr	r3, [r3, #16]
 8005f4a:	f003 0304 	and.w	r3, r3, #4
 8005f4e:	2b04      	cmp	r3, #4
 8005f50:	d122      	bne.n	8005f98 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	68db      	ldr	r3, [r3, #12]
 8005f58:	f003 0304 	and.w	r3, r3, #4
 8005f5c:	2b04      	cmp	r3, #4
 8005f5e:	d11b      	bne.n	8005f98 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	f06f 0204 	mvn.w	r2, #4
 8005f68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	2202      	movs	r2, #2
 8005f6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	699b      	ldr	r3, [r3, #24]
 8005f76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d003      	beq.n	8005f86 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f7e:	6878      	ldr	r0, [r7, #4]
 8005f80:	f000 fa4d 	bl	800641e <HAL_TIM_IC_CaptureCallback>
 8005f84:	e005      	b.n	8005f92 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f86:	6878      	ldr	r0, [r7, #4]
 8005f88:	f000 fa3f 	bl	800640a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f8c:	6878      	ldr	r0, [r7, #4]
 8005f8e:	f000 fa50 	bl	8006432 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	2200      	movs	r2, #0
 8005f96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	691b      	ldr	r3, [r3, #16]
 8005f9e:	f003 0308 	and.w	r3, r3, #8
 8005fa2:	2b08      	cmp	r3, #8
 8005fa4:	d122      	bne.n	8005fec <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	68db      	ldr	r3, [r3, #12]
 8005fac:	f003 0308 	and.w	r3, r3, #8
 8005fb0:	2b08      	cmp	r3, #8
 8005fb2:	d11b      	bne.n	8005fec <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	f06f 0208 	mvn.w	r2, #8
 8005fbc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	2204      	movs	r2, #4
 8005fc2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	69db      	ldr	r3, [r3, #28]
 8005fca:	f003 0303 	and.w	r3, r3, #3
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d003      	beq.n	8005fda <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005fd2:	6878      	ldr	r0, [r7, #4]
 8005fd4:	f000 fa23 	bl	800641e <HAL_TIM_IC_CaptureCallback>
 8005fd8:	e005      	b.n	8005fe6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005fda:	6878      	ldr	r0, [r7, #4]
 8005fdc:	f000 fa15 	bl	800640a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005fe0:	6878      	ldr	r0, [r7, #4]
 8005fe2:	f000 fa26 	bl	8006432 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	2200      	movs	r2, #0
 8005fea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	691b      	ldr	r3, [r3, #16]
 8005ff2:	f003 0310 	and.w	r3, r3, #16
 8005ff6:	2b10      	cmp	r3, #16
 8005ff8:	d122      	bne.n	8006040 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	68db      	ldr	r3, [r3, #12]
 8006000:	f003 0310 	and.w	r3, r3, #16
 8006004:	2b10      	cmp	r3, #16
 8006006:	d11b      	bne.n	8006040 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	f06f 0210 	mvn.w	r2, #16
 8006010:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	2208      	movs	r2, #8
 8006016:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	69db      	ldr	r3, [r3, #28]
 800601e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006022:	2b00      	cmp	r3, #0
 8006024:	d003      	beq.n	800602e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006026:	6878      	ldr	r0, [r7, #4]
 8006028:	f000 f9f9 	bl	800641e <HAL_TIM_IC_CaptureCallback>
 800602c:	e005      	b.n	800603a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800602e:	6878      	ldr	r0, [r7, #4]
 8006030:	f000 f9eb 	bl	800640a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006034:	6878      	ldr	r0, [r7, #4]
 8006036:	f000 f9fc 	bl	8006432 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	2200      	movs	r2, #0
 800603e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	691b      	ldr	r3, [r3, #16]
 8006046:	f003 0301 	and.w	r3, r3, #1
 800604a:	2b01      	cmp	r3, #1
 800604c:	d10e      	bne.n	800606c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	68db      	ldr	r3, [r3, #12]
 8006054:	f003 0301 	and.w	r3, r3, #1
 8006058:	2b01      	cmp	r3, #1
 800605a:	d107      	bne.n	800606c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	f06f 0201 	mvn.w	r2, #1
 8006064:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006066:	6878      	ldr	r0, [r7, #4]
 8006068:	f7fc fc84 	bl	8002974 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	691b      	ldr	r3, [r3, #16]
 8006072:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006076:	2b80      	cmp	r3, #128	; 0x80
 8006078:	d10e      	bne.n	8006098 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	68db      	ldr	r3, [r3, #12]
 8006080:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006084:	2b80      	cmp	r3, #128	; 0x80
 8006086:	d107      	bne.n	8006098 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006090:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006092:	6878      	ldr	r0, [r7, #4]
 8006094:	f000 fd26 	bl	8006ae4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	691b      	ldr	r3, [r3, #16]
 800609e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060a2:	2b40      	cmp	r3, #64	; 0x40
 80060a4:	d10e      	bne.n	80060c4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	68db      	ldr	r3, [r3, #12]
 80060ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060b0:	2b40      	cmp	r3, #64	; 0x40
 80060b2:	d107      	bne.n	80060c4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80060bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80060be:	6878      	ldr	r0, [r7, #4]
 80060c0:	f000 f9c1 	bl	8006446 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	691b      	ldr	r3, [r3, #16]
 80060ca:	f003 0320 	and.w	r3, r3, #32
 80060ce:	2b20      	cmp	r3, #32
 80060d0:	d10e      	bne.n	80060f0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	68db      	ldr	r3, [r3, #12]
 80060d8:	f003 0320 	and.w	r3, r3, #32
 80060dc:	2b20      	cmp	r3, #32
 80060de:	d107      	bne.n	80060f0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	f06f 0220 	mvn.w	r2, #32
 80060e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80060ea:	6878      	ldr	r0, [r7, #4]
 80060ec:	f000 fcf0 	bl	8006ad0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80060f0:	bf00      	nop
 80060f2:	3708      	adds	r7, #8
 80060f4:	46bd      	mov	sp, r7
 80060f6:	bd80      	pop	{r7, pc}

080060f8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80060f8:	b580      	push	{r7, lr}
 80060fa:	b086      	sub	sp, #24
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	60f8      	str	r0, [r7, #12]
 8006100:	60b9      	str	r1, [r7, #8]
 8006102:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006104:	2300      	movs	r3, #0
 8006106:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800610e:	2b01      	cmp	r3, #1
 8006110:	d101      	bne.n	8006116 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006112:	2302      	movs	r3, #2
 8006114:	e0ae      	b.n	8006274 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	2201      	movs	r2, #1
 800611a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	2b0c      	cmp	r3, #12
 8006122:	f200 809f 	bhi.w	8006264 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006126:	a201      	add	r2, pc, #4	; (adr r2, 800612c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006128:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800612c:	08006161 	.word	0x08006161
 8006130:	08006265 	.word	0x08006265
 8006134:	08006265 	.word	0x08006265
 8006138:	08006265 	.word	0x08006265
 800613c:	080061a1 	.word	0x080061a1
 8006140:	08006265 	.word	0x08006265
 8006144:	08006265 	.word	0x08006265
 8006148:	08006265 	.word	0x08006265
 800614c:	080061e3 	.word	0x080061e3
 8006150:	08006265 	.word	0x08006265
 8006154:	08006265 	.word	0x08006265
 8006158:	08006265 	.word	0x08006265
 800615c:	08006223 	.word	0x08006223
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	68b9      	ldr	r1, [r7, #8]
 8006166:	4618      	mov	r0, r3
 8006168:	f000 f9f8 	bl	800655c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	699a      	ldr	r2, [r3, #24]
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	f042 0208 	orr.w	r2, r2, #8
 800617a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	699a      	ldr	r2, [r3, #24]
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	f022 0204 	bic.w	r2, r2, #4
 800618a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	6999      	ldr	r1, [r3, #24]
 8006192:	68bb      	ldr	r3, [r7, #8]
 8006194:	691a      	ldr	r2, [r3, #16]
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	430a      	orrs	r2, r1
 800619c:	619a      	str	r2, [r3, #24]
      break;
 800619e:	e064      	b.n	800626a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	68b9      	ldr	r1, [r7, #8]
 80061a6:	4618      	mov	r0, r3
 80061a8:	f000 fa3e 	bl	8006628 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	699a      	ldr	r2, [r3, #24]
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80061ba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	699a      	ldr	r2, [r3, #24]
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80061ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	6999      	ldr	r1, [r3, #24]
 80061d2:	68bb      	ldr	r3, [r7, #8]
 80061d4:	691b      	ldr	r3, [r3, #16]
 80061d6:	021a      	lsls	r2, r3, #8
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	430a      	orrs	r2, r1
 80061de:	619a      	str	r2, [r3, #24]
      break;
 80061e0:	e043      	b.n	800626a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	68b9      	ldr	r1, [r7, #8]
 80061e8:	4618      	mov	r0, r3
 80061ea:	f000 fa89 	bl	8006700 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	69da      	ldr	r2, [r3, #28]
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	f042 0208 	orr.w	r2, r2, #8
 80061fc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	69da      	ldr	r2, [r3, #28]
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	f022 0204 	bic.w	r2, r2, #4
 800620c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	69d9      	ldr	r1, [r3, #28]
 8006214:	68bb      	ldr	r3, [r7, #8]
 8006216:	691a      	ldr	r2, [r3, #16]
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	430a      	orrs	r2, r1
 800621e:	61da      	str	r2, [r3, #28]
      break;
 8006220:	e023      	b.n	800626a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	68b9      	ldr	r1, [r7, #8]
 8006228:	4618      	mov	r0, r3
 800622a:	f000 fad3 	bl	80067d4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	69da      	ldr	r2, [r3, #28]
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800623c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	69da      	ldr	r2, [r3, #28]
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800624c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	69d9      	ldr	r1, [r3, #28]
 8006254:	68bb      	ldr	r3, [r7, #8]
 8006256:	691b      	ldr	r3, [r3, #16]
 8006258:	021a      	lsls	r2, r3, #8
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	430a      	orrs	r2, r1
 8006260:	61da      	str	r2, [r3, #28]
      break;
 8006262:	e002      	b.n	800626a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006264:	2301      	movs	r3, #1
 8006266:	75fb      	strb	r3, [r7, #23]
      break;
 8006268:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	2200      	movs	r2, #0
 800626e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006272:	7dfb      	ldrb	r3, [r7, #23]
}
 8006274:	4618      	mov	r0, r3
 8006276:	3718      	adds	r7, #24
 8006278:	46bd      	mov	sp, r7
 800627a:	bd80      	pop	{r7, pc}

0800627c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800627c:	b580      	push	{r7, lr}
 800627e:	b084      	sub	sp, #16
 8006280:	af00      	add	r7, sp, #0
 8006282:	6078      	str	r0, [r7, #4]
 8006284:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006286:	2300      	movs	r3, #0
 8006288:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006290:	2b01      	cmp	r3, #1
 8006292:	d101      	bne.n	8006298 <HAL_TIM_ConfigClockSource+0x1c>
 8006294:	2302      	movs	r3, #2
 8006296:	e0b4      	b.n	8006402 <HAL_TIM_ConfigClockSource+0x186>
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	2201      	movs	r2, #1
 800629c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	2202      	movs	r2, #2
 80062a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	689b      	ldr	r3, [r3, #8]
 80062ae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80062b0:	68bb      	ldr	r3, [r7, #8]
 80062b2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80062b6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80062b8:	68bb      	ldr	r3, [r7, #8]
 80062ba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80062be:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	68ba      	ldr	r2, [r7, #8]
 80062c6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80062c8:	683b      	ldr	r3, [r7, #0]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80062d0:	d03e      	beq.n	8006350 <HAL_TIM_ConfigClockSource+0xd4>
 80062d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80062d6:	f200 8087 	bhi.w	80063e8 <HAL_TIM_ConfigClockSource+0x16c>
 80062da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80062de:	f000 8086 	beq.w	80063ee <HAL_TIM_ConfigClockSource+0x172>
 80062e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80062e6:	d87f      	bhi.n	80063e8 <HAL_TIM_ConfigClockSource+0x16c>
 80062e8:	2b70      	cmp	r3, #112	; 0x70
 80062ea:	d01a      	beq.n	8006322 <HAL_TIM_ConfigClockSource+0xa6>
 80062ec:	2b70      	cmp	r3, #112	; 0x70
 80062ee:	d87b      	bhi.n	80063e8 <HAL_TIM_ConfigClockSource+0x16c>
 80062f0:	2b60      	cmp	r3, #96	; 0x60
 80062f2:	d050      	beq.n	8006396 <HAL_TIM_ConfigClockSource+0x11a>
 80062f4:	2b60      	cmp	r3, #96	; 0x60
 80062f6:	d877      	bhi.n	80063e8 <HAL_TIM_ConfigClockSource+0x16c>
 80062f8:	2b50      	cmp	r3, #80	; 0x50
 80062fa:	d03c      	beq.n	8006376 <HAL_TIM_ConfigClockSource+0xfa>
 80062fc:	2b50      	cmp	r3, #80	; 0x50
 80062fe:	d873      	bhi.n	80063e8 <HAL_TIM_ConfigClockSource+0x16c>
 8006300:	2b40      	cmp	r3, #64	; 0x40
 8006302:	d058      	beq.n	80063b6 <HAL_TIM_ConfigClockSource+0x13a>
 8006304:	2b40      	cmp	r3, #64	; 0x40
 8006306:	d86f      	bhi.n	80063e8 <HAL_TIM_ConfigClockSource+0x16c>
 8006308:	2b30      	cmp	r3, #48	; 0x30
 800630a:	d064      	beq.n	80063d6 <HAL_TIM_ConfigClockSource+0x15a>
 800630c:	2b30      	cmp	r3, #48	; 0x30
 800630e:	d86b      	bhi.n	80063e8 <HAL_TIM_ConfigClockSource+0x16c>
 8006310:	2b20      	cmp	r3, #32
 8006312:	d060      	beq.n	80063d6 <HAL_TIM_ConfigClockSource+0x15a>
 8006314:	2b20      	cmp	r3, #32
 8006316:	d867      	bhi.n	80063e8 <HAL_TIM_ConfigClockSource+0x16c>
 8006318:	2b00      	cmp	r3, #0
 800631a:	d05c      	beq.n	80063d6 <HAL_TIM_ConfigClockSource+0x15a>
 800631c:	2b10      	cmp	r3, #16
 800631e:	d05a      	beq.n	80063d6 <HAL_TIM_ConfigClockSource+0x15a>
 8006320:	e062      	b.n	80063e8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	6818      	ldr	r0, [r3, #0]
 8006326:	683b      	ldr	r3, [r7, #0]
 8006328:	6899      	ldr	r1, [r3, #8]
 800632a:	683b      	ldr	r3, [r7, #0]
 800632c:	685a      	ldr	r2, [r3, #4]
 800632e:	683b      	ldr	r3, [r7, #0]
 8006330:	68db      	ldr	r3, [r3, #12]
 8006332:	f000 fb19 	bl	8006968 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	689b      	ldr	r3, [r3, #8]
 800633c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800633e:	68bb      	ldr	r3, [r7, #8]
 8006340:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006344:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	68ba      	ldr	r2, [r7, #8]
 800634c:	609a      	str	r2, [r3, #8]
      break;
 800634e:	e04f      	b.n	80063f0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	6818      	ldr	r0, [r3, #0]
 8006354:	683b      	ldr	r3, [r7, #0]
 8006356:	6899      	ldr	r1, [r3, #8]
 8006358:	683b      	ldr	r3, [r7, #0]
 800635a:	685a      	ldr	r2, [r3, #4]
 800635c:	683b      	ldr	r3, [r7, #0]
 800635e:	68db      	ldr	r3, [r3, #12]
 8006360:	f000 fb02 	bl	8006968 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	689a      	ldr	r2, [r3, #8]
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006372:	609a      	str	r2, [r3, #8]
      break;
 8006374:	e03c      	b.n	80063f0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	6818      	ldr	r0, [r3, #0]
 800637a:	683b      	ldr	r3, [r7, #0]
 800637c:	6859      	ldr	r1, [r3, #4]
 800637e:	683b      	ldr	r3, [r7, #0]
 8006380:	68db      	ldr	r3, [r3, #12]
 8006382:	461a      	mov	r2, r3
 8006384:	f000 fa76 	bl	8006874 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	2150      	movs	r1, #80	; 0x50
 800638e:	4618      	mov	r0, r3
 8006390:	f000 facf 	bl	8006932 <TIM_ITRx_SetConfig>
      break;
 8006394:	e02c      	b.n	80063f0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	6818      	ldr	r0, [r3, #0]
 800639a:	683b      	ldr	r3, [r7, #0]
 800639c:	6859      	ldr	r1, [r3, #4]
 800639e:	683b      	ldr	r3, [r7, #0]
 80063a0:	68db      	ldr	r3, [r3, #12]
 80063a2:	461a      	mov	r2, r3
 80063a4:	f000 fa95 	bl	80068d2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	2160      	movs	r1, #96	; 0x60
 80063ae:	4618      	mov	r0, r3
 80063b0:	f000 fabf 	bl	8006932 <TIM_ITRx_SetConfig>
      break;
 80063b4:	e01c      	b.n	80063f0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	6818      	ldr	r0, [r3, #0]
 80063ba:	683b      	ldr	r3, [r7, #0]
 80063bc:	6859      	ldr	r1, [r3, #4]
 80063be:	683b      	ldr	r3, [r7, #0]
 80063c0:	68db      	ldr	r3, [r3, #12]
 80063c2:	461a      	mov	r2, r3
 80063c4:	f000 fa56 	bl	8006874 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	2140      	movs	r1, #64	; 0x40
 80063ce:	4618      	mov	r0, r3
 80063d0:	f000 faaf 	bl	8006932 <TIM_ITRx_SetConfig>
      break;
 80063d4:	e00c      	b.n	80063f0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681a      	ldr	r2, [r3, #0]
 80063da:	683b      	ldr	r3, [r7, #0]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	4619      	mov	r1, r3
 80063e0:	4610      	mov	r0, r2
 80063e2:	f000 faa6 	bl	8006932 <TIM_ITRx_SetConfig>
      break;
 80063e6:	e003      	b.n	80063f0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80063e8:	2301      	movs	r3, #1
 80063ea:	73fb      	strb	r3, [r7, #15]
      break;
 80063ec:	e000      	b.n	80063f0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80063ee:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	2201      	movs	r2, #1
 80063f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	2200      	movs	r2, #0
 80063fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006400:	7bfb      	ldrb	r3, [r7, #15]
}
 8006402:	4618      	mov	r0, r3
 8006404:	3710      	adds	r7, #16
 8006406:	46bd      	mov	sp, r7
 8006408:	bd80      	pop	{r7, pc}

0800640a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800640a:	b480      	push	{r7}
 800640c:	b083      	sub	sp, #12
 800640e:	af00      	add	r7, sp, #0
 8006410:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006412:	bf00      	nop
 8006414:	370c      	adds	r7, #12
 8006416:	46bd      	mov	sp, r7
 8006418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641c:	4770      	bx	lr

0800641e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800641e:	b480      	push	{r7}
 8006420:	b083      	sub	sp, #12
 8006422:	af00      	add	r7, sp, #0
 8006424:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006426:	bf00      	nop
 8006428:	370c      	adds	r7, #12
 800642a:	46bd      	mov	sp, r7
 800642c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006430:	4770      	bx	lr

08006432 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006432:	b480      	push	{r7}
 8006434:	b083      	sub	sp, #12
 8006436:	af00      	add	r7, sp, #0
 8006438:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800643a:	bf00      	nop
 800643c:	370c      	adds	r7, #12
 800643e:	46bd      	mov	sp, r7
 8006440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006444:	4770      	bx	lr

08006446 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006446:	b480      	push	{r7}
 8006448:	b083      	sub	sp, #12
 800644a:	af00      	add	r7, sp, #0
 800644c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800644e:	bf00      	nop
 8006450:	370c      	adds	r7, #12
 8006452:	46bd      	mov	sp, r7
 8006454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006458:	4770      	bx	lr
	...

0800645c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800645c:	b480      	push	{r7}
 800645e:	b085      	sub	sp, #20
 8006460:	af00      	add	r7, sp, #0
 8006462:	6078      	str	r0, [r7, #4]
 8006464:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	4a34      	ldr	r2, [pc, #208]	; (8006540 <TIM_Base_SetConfig+0xe4>)
 8006470:	4293      	cmp	r3, r2
 8006472:	d00f      	beq.n	8006494 <TIM_Base_SetConfig+0x38>
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800647a:	d00b      	beq.n	8006494 <TIM_Base_SetConfig+0x38>
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	4a31      	ldr	r2, [pc, #196]	; (8006544 <TIM_Base_SetConfig+0xe8>)
 8006480:	4293      	cmp	r3, r2
 8006482:	d007      	beq.n	8006494 <TIM_Base_SetConfig+0x38>
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	4a30      	ldr	r2, [pc, #192]	; (8006548 <TIM_Base_SetConfig+0xec>)
 8006488:	4293      	cmp	r3, r2
 800648a:	d003      	beq.n	8006494 <TIM_Base_SetConfig+0x38>
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	4a2f      	ldr	r2, [pc, #188]	; (800654c <TIM_Base_SetConfig+0xf0>)
 8006490:	4293      	cmp	r3, r2
 8006492:	d108      	bne.n	80064a6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800649a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800649c:	683b      	ldr	r3, [r7, #0]
 800649e:	685b      	ldr	r3, [r3, #4]
 80064a0:	68fa      	ldr	r2, [r7, #12]
 80064a2:	4313      	orrs	r3, r2
 80064a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	4a25      	ldr	r2, [pc, #148]	; (8006540 <TIM_Base_SetConfig+0xe4>)
 80064aa:	4293      	cmp	r3, r2
 80064ac:	d01b      	beq.n	80064e6 <TIM_Base_SetConfig+0x8a>
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80064b4:	d017      	beq.n	80064e6 <TIM_Base_SetConfig+0x8a>
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	4a22      	ldr	r2, [pc, #136]	; (8006544 <TIM_Base_SetConfig+0xe8>)
 80064ba:	4293      	cmp	r3, r2
 80064bc:	d013      	beq.n	80064e6 <TIM_Base_SetConfig+0x8a>
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	4a21      	ldr	r2, [pc, #132]	; (8006548 <TIM_Base_SetConfig+0xec>)
 80064c2:	4293      	cmp	r3, r2
 80064c4:	d00f      	beq.n	80064e6 <TIM_Base_SetConfig+0x8a>
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	4a20      	ldr	r2, [pc, #128]	; (800654c <TIM_Base_SetConfig+0xf0>)
 80064ca:	4293      	cmp	r3, r2
 80064cc:	d00b      	beq.n	80064e6 <TIM_Base_SetConfig+0x8a>
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	4a1f      	ldr	r2, [pc, #124]	; (8006550 <TIM_Base_SetConfig+0xf4>)
 80064d2:	4293      	cmp	r3, r2
 80064d4:	d007      	beq.n	80064e6 <TIM_Base_SetConfig+0x8a>
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	4a1e      	ldr	r2, [pc, #120]	; (8006554 <TIM_Base_SetConfig+0xf8>)
 80064da:	4293      	cmp	r3, r2
 80064dc:	d003      	beq.n	80064e6 <TIM_Base_SetConfig+0x8a>
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	4a1d      	ldr	r2, [pc, #116]	; (8006558 <TIM_Base_SetConfig+0xfc>)
 80064e2:	4293      	cmp	r3, r2
 80064e4:	d108      	bne.n	80064f8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80064ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80064ee:	683b      	ldr	r3, [r7, #0]
 80064f0:	68db      	ldr	r3, [r3, #12]
 80064f2:	68fa      	ldr	r2, [r7, #12]
 80064f4:	4313      	orrs	r3, r2
 80064f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80064fe:	683b      	ldr	r3, [r7, #0]
 8006500:	695b      	ldr	r3, [r3, #20]
 8006502:	4313      	orrs	r3, r2
 8006504:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	68fa      	ldr	r2, [r7, #12]
 800650a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800650c:	683b      	ldr	r3, [r7, #0]
 800650e:	689a      	ldr	r2, [r3, #8]
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006514:	683b      	ldr	r3, [r7, #0]
 8006516:	681a      	ldr	r2, [r3, #0]
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	4a08      	ldr	r2, [pc, #32]	; (8006540 <TIM_Base_SetConfig+0xe4>)
 8006520:	4293      	cmp	r3, r2
 8006522:	d103      	bne.n	800652c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006524:	683b      	ldr	r3, [r7, #0]
 8006526:	691a      	ldr	r2, [r3, #16]
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	2201      	movs	r2, #1
 8006530:	615a      	str	r2, [r3, #20]
}
 8006532:	bf00      	nop
 8006534:	3714      	adds	r7, #20
 8006536:	46bd      	mov	sp, r7
 8006538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653c:	4770      	bx	lr
 800653e:	bf00      	nop
 8006540:	40010000 	.word	0x40010000
 8006544:	40000400 	.word	0x40000400
 8006548:	40000800 	.word	0x40000800
 800654c:	40000c00 	.word	0x40000c00
 8006550:	40014000 	.word	0x40014000
 8006554:	40014400 	.word	0x40014400
 8006558:	40014800 	.word	0x40014800

0800655c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800655c:	b480      	push	{r7}
 800655e:	b087      	sub	sp, #28
 8006560:	af00      	add	r7, sp, #0
 8006562:	6078      	str	r0, [r7, #4]
 8006564:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	6a1b      	ldr	r3, [r3, #32]
 800656a:	f023 0201 	bic.w	r2, r3, #1
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	6a1b      	ldr	r3, [r3, #32]
 8006576:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	685b      	ldr	r3, [r3, #4]
 800657c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	699b      	ldr	r3, [r3, #24]
 8006582:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800658a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	f023 0303 	bic.w	r3, r3, #3
 8006592:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006594:	683b      	ldr	r3, [r7, #0]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	68fa      	ldr	r2, [r7, #12]
 800659a:	4313      	orrs	r3, r2
 800659c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800659e:	697b      	ldr	r3, [r7, #20]
 80065a0:	f023 0302 	bic.w	r3, r3, #2
 80065a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80065a6:	683b      	ldr	r3, [r7, #0]
 80065a8:	689b      	ldr	r3, [r3, #8]
 80065aa:	697a      	ldr	r2, [r7, #20]
 80065ac:	4313      	orrs	r3, r2
 80065ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	4a1c      	ldr	r2, [pc, #112]	; (8006624 <TIM_OC1_SetConfig+0xc8>)
 80065b4:	4293      	cmp	r3, r2
 80065b6:	d10c      	bne.n	80065d2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80065b8:	697b      	ldr	r3, [r7, #20]
 80065ba:	f023 0308 	bic.w	r3, r3, #8
 80065be:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80065c0:	683b      	ldr	r3, [r7, #0]
 80065c2:	68db      	ldr	r3, [r3, #12]
 80065c4:	697a      	ldr	r2, [r7, #20]
 80065c6:	4313      	orrs	r3, r2
 80065c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80065ca:	697b      	ldr	r3, [r7, #20]
 80065cc:	f023 0304 	bic.w	r3, r3, #4
 80065d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	4a13      	ldr	r2, [pc, #76]	; (8006624 <TIM_OC1_SetConfig+0xc8>)
 80065d6:	4293      	cmp	r3, r2
 80065d8:	d111      	bne.n	80065fe <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80065da:	693b      	ldr	r3, [r7, #16]
 80065dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80065e0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80065e2:	693b      	ldr	r3, [r7, #16]
 80065e4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80065e8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80065ea:	683b      	ldr	r3, [r7, #0]
 80065ec:	695b      	ldr	r3, [r3, #20]
 80065ee:	693a      	ldr	r2, [r7, #16]
 80065f0:	4313      	orrs	r3, r2
 80065f2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80065f4:	683b      	ldr	r3, [r7, #0]
 80065f6:	699b      	ldr	r3, [r3, #24]
 80065f8:	693a      	ldr	r2, [r7, #16]
 80065fa:	4313      	orrs	r3, r2
 80065fc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	693a      	ldr	r2, [r7, #16]
 8006602:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	68fa      	ldr	r2, [r7, #12]
 8006608:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800660a:	683b      	ldr	r3, [r7, #0]
 800660c:	685a      	ldr	r2, [r3, #4]
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	697a      	ldr	r2, [r7, #20]
 8006616:	621a      	str	r2, [r3, #32]
}
 8006618:	bf00      	nop
 800661a:	371c      	adds	r7, #28
 800661c:	46bd      	mov	sp, r7
 800661e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006622:	4770      	bx	lr
 8006624:	40010000 	.word	0x40010000

08006628 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006628:	b480      	push	{r7}
 800662a:	b087      	sub	sp, #28
 800662c:	af00      	add	r7, sp, #0
 800662e:	6078      	str	r0, [r7, #4]
 8006630:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	6a1b      	ldr	r3, [r3, #32]
 8006636:	f023 0210 	bic.w	r2, r3, #16
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	6a1b      	ldr	r3, [r3, #32]
 8006642:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	685b      	ldr	r3, [r3, #4]
 8006648:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	699b      	ldr	r3, [r3, #24]
 800664e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006656:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800665e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006660:	683b      	ldr	r3, [r7, #0]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	021b      	lsls	r3, r3, #8
 8006666:	68fa      	ldr	r2, [r7, #12]
 8006668:	4313      	orrs	r3, r2
 800666a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800666c:	697b      	ldr	r3, [r7, #20]
 800666e:	f023 0320 	bic.w	r3, r3, #32
 8006672:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006674:	683b      	ldr	r3, [r7, #0]
 8006676:	689b      	ldr	r3, [r3, #8]
 8006678:	011b      	lsls	r3, r3, #4
 800667a:	697a      	ldr	r2, [r7, #20]
 800667c:	4313      	orrs	r3, r2
 800667e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	4a1e      	ldr	r2, [pc, #120]	; (80066fc <TIM_OC2_SetConfig+0xd4>)
 8006684:	4293      	cmp	r3, r2
 8006686:	d10d      	bne.n	80066a4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006688:	697b      	ldr	r3, [r7, #20]
 800668a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800668e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006690:	683b      	ldr	r3, [r7, #0]
 8006692:	68db      	ldr	r3, [r3, #12]
 8006694:	011b      	lsls	r3, r3, #4
 8006696:	697a      	ldr	r2, [r7, #20]
 8006698:	4313      	orrs	r3, r2
 800669a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800669c:	697b      	ldr	r3, [r7, #20]
 800669e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80066a2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	4a15      	ldr	r2, [pc, #84]	; (80066fc <TIM_OC2_SetConfig+0xd4>)
 80066a8:	4293      	cmp	r3, r2
 80066aa:	d113      	bne.n	80066d4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80066ac:	693b      	ldr	r3, [r7, #16]
 80066ae:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80066b2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80066b4:	693b      	ldr	r3, [r7, #16]
 80066b6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80066ba:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80066bc:	683b      	ldr	r3, [r7, #0]
 80066be:	695b      	ldr	r3, [r3, #20]
 80066c0:	009b      	lsls	r3, r3, #2
 80066c2:	693a      	ldr	r2, [r7, #16]
 80066c4:	4313      	orrs	r3, r2
 80066c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80066c8:	683b      	ldr	r3, [r7, #0]
 80066ca:	699b      	ldr	r3, [r3, #24]
 80066cc:	009b      	lsls	r3, r3, #2
 80066ce:	693a      	ldr	r2, [r7, #16]
 80066d0:	4313      	orrs	r3, r2
 80066d2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	693a      	ldr	r2, [r7, #16]
 80066d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	68fa      	ldr	r2, [r7, #12]
 80066de:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80066e0:	683b      	ldr	r3, [r7, #0]
 80066e2:	685a      	ldr	r2, [r3, #4]
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	697a      	ldr	r2, [r7, #20]
 80066ec:	621a      	str	r2, [r3, #32]
}
 80066ee:	bf00      	nop
 80066f0:	371c      	adds	r7, #28
 80066f2:	46bd      	mov	sp, r7
 80066f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f8:	4770      	bx	lr
 80066fa:	bf00      	nop
 80066fc:	40010000 	.word	0x40010000

08006700 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006700:	b480      	push	{r7}
 8006702:	b087      	sub	sp, #28
 8006704:	af00      	add	r7, sp, #0
 8006706:	6078      	str	r0, [r7, #4]
 8006708:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	6a1b      	ldr	r3, [r3, #32]
 800670e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	6a1b      	ldr	r3, [r3, #32]
 800671a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	685b      	ldr	r3, [r3, #4]
 8006720:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	69db      	ldr	r3, [r3, #28]
 8006726:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800672e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	f023 0303 	bic.w	r3, r3, #3
 8006736:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006738:	683b      	ldr	r3, [r7, #0]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	68fa      	ldr	r2, [r7, #12]
 800673e:	4313      	orrs	r3, r2
 8006740:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006742:	697b      	ldr	r3, [r7, #20]
 8006744:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006748:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800674a:	683b      	ldr	r3, [r7, #0]
 800674c:	689b      	ldr	r3, [r3, #8]
 800674e:	021b      	lsls	r3, r3, #8
 8006750:	697a      	ldr	r2, [r7, #20]
 8006752:	4313      	orrs	r3, r2
 8006754:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	4a1d      	ldr	r2, [pc, #116]	; (80067d0 <TIM_OC3_SetConfig+0xd0>)
 800675a:	4293      	cmp	r3, r2
 800675c:	d10d      	bne.n	800677a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800675e:	697b      	ldr	r3, [r7, #20]
 8006760:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006764:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006766:	683b      	ldr	r3, [r7, #0]
 8006768:	68db      	ldr	r3, [r3, #12]
 800676a:	021b      	lsls	r3, r3, #8
 800676c:	697a      	ldr	r2, [r7, #20]
 800676e:	4313      	orrs	r3, r2
 8006770:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006772:	697b      	ldr	r3, [r7, #20]
 8006774:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006778:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	4a14      	ldr	r2, [pc, #80]	; (80067d0 <TIM_OC3_SetConfig+0xd0>)
 800677e:	4293      	cmp	r3, r2
 8006780:	d113      	bne.n	80067aa <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006782:	693b      	ldr	r3, [r7, #16]
 8006784:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006788:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800678a:	693b      	ldr	r3, [r7, #16]
 800678c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006790:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006792:	683b      	ldr	r3, [r7, #0]
 8006794:	695b      	ldr	r3, [r3, #20]
 8006796:	011b      	lsls	r3, r3, #4
 8006798:	693a      	ldr	r2, [r7, #16]
 800679a:	4313      	orrs	r3, r2
 800679c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800679e:	683b      	ldr	r3, [r7, #0]
 80067a0:	699b      	ldr	r3, [r3, #24]
 80067a2:	011b      	lsls	r3, r3, #4
 80067a4:	693a      	ldr	r2, [r7, #16]
 80067a6:	4313      	orrs	r3, r2
 80067a8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	693a      	ldr	r2, [r7, #16]
 80067ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	68fa      	ldr	r2, [r7, #12]
 80067b4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80067b6:	683b      	ldr	r3, [r7, #0]
 80067b8:	685a      	ldr	r2, [r3, #4]
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	697a      	ldr	r2, [r7, #20]
 80067c2:	621a      	str	r2, [r3, #32]
}
 80067c4:	bf00      	nop
 80067c6:	371c      	adds	r7, #28
 80067c8:	46bd      	mov	sp, r7
 80067ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ce:	4770      	bx	lr
 80067d0:	40010000 	.word	0x40010000

080067d4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80067d4:	b480      	push	{r7}
 80067d6:	b087      	sub	sp, #28
 80067d8:	af00      	add	r7, sp, #0
 80067da:	6078      	str	r0, [r7, #4]
 80067dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	6a1b      	ldr	r3, [r3, #32]
 80067e2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	6a1b      	ldr	r3, [r3, #32]
 80067ee:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	685b      	ldr	r3, [r3, #4]
 80067f4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	69db      	ldr	r3, [r3, #28]
 80067fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006802:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800680a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800680c:	683b      	ldr	r3, [r7, #0]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	021b      	lsls	r3, r3, #8
 8006812:	68fa      	ldr	r2, [r7, #12]
 8006814:	4313      	orrs	r3, r2
 8006816:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006818:	693b      	ldr	r3, [r7, #16]
 800681a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800681e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006820:	683b      	ldr	r3, [r7, #0]
 8006822:	689b      	ldr	r3, [r3, #8]
 8006824:	031b      	lsls	r3, r3, #12
 8006826:	693a      	ldr	r2, [r7, #16]
 8006828:	4313      	orrs	r3, r2
 800682a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	4a10      	ldr	r2, [pc, #64]	; (8006870 <TIM_OC4_SetConfig+0x9c>)
 8006830:	4293      	cmp	r3, r2
 8006832:	d109      	bne.n	8006848 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006834:	697b      	ldr	r3, [r7, #20]
 8006836:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800683a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800683c:	683b      	ldr	r3, [r7, #0]
 800683e:	695b      	ldr	r3, [r3, #20]
 8006840:	019b      	lsls	r3, r3, #6
 8006842:	697a      	ldr	r2, [r7, #20]
 8006844:	4313      	orrs	r3, r2
 8006846:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	697a      	ldr	r2, [r7, #20]
 800684c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	68fa      	ldr	r2, [r7, #12]
 8006852:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006854:	683b      	ldr	r3, [r7, #0]
 8006856:	685a      	ldr	r2, [r3, #4]
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	693a      	ldr	r2, [r7, #16]
 8006860:	621a      	str	r2, [r3, #32]
}
 8006862:	bf00      	nop
 8006864:	371c      	adds	r7, #28
 8006866:	46bd      	mov	sp, r7
 8006868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800686c:	4770      	bx	lr
 800686e:	bf00      	nop
 8006870:	40010000 	.word	0x40010000

08006874 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006874:	b480      	push	{r7}
 8006876:	b087      	sub	sp, #28
 8006878:	af00      	add	r7, sp, #0
 800687a:	60f8      	str	r0, [r7, #12]
 800687c:	60b9      	str	r1, [r7, #8]
 800687e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	6a1b      	ldr	r3, [r3, #32]
 8006884:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	6a1b      	ldr	r3, [r3, #32]
 800688a:	f023 0201 	bic.w	r2, r3, #1
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	699b      	ldr	r3, [r3, #24]
 8006896:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006898:	693b      	ldr	r3, [r7, #16]
 800689a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800689e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	011b      	lsls	r3, r3, #4
 80068a4:	693a      	ldr	r2, [r7, #16]
 80068a6:	4313      	orrs	r3, r2
 80068a8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80068aa:	697b      	ldr	r3, [r7, #20]
 80068ac:	f023 030a 	bic.w	r3, r3, #10
 80068b0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80068b2:	697a      	ldr	r2, [r7, #20]
 80068b4:	68bb      	ldr	r3, [r7, #8]
 80068b6:	4313      	orrs	r3, r2
 80068b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	693a      	ldr	r2, [r7, #16]
 80068be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	697a      	ldr	r2, [r7, #20]
 80068c4:	621a      	str	r2, [r3, #32]
}
 80068c6:	bf00      	nop
 80068c8:	371c      	adds	r7, #28
 80068ca:	46bd      	mov	sp, r7
 80068cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d0:	4770      	bx	lr

080068d2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80068d2:	b480      	push	{r7}
 80068d4:	b087      	sub	sp, #28
 80068d6:	af00      	add	r7, sp, #0
 80068d8:	60f8      	str	r0, [r7, #12]
 80068da:	60b9      	str	r1, [r7, #8]
 80068dc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	6a1b      	ldr	r3, [r3, #32]
 80068e2:	f023 0210 	bic.w	r2, r3, #16
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	699b      	ldr	r3, [r3, #24]
 80068ee:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	6a1b      	ldr	r3, [r3, #32]
 80068f4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80068f6:	697b      	ldr	r3, [r7, #20]
 80068f8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80068fc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	031b      	lsls	r3, r3, #12
 8006902:	697a      	ldr	r2, [r7, #20]
 8006904:	4313      	orrs	r3, r2
 8006906:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006908:	693b      	ldr	r3, [r7, #16]
 800690a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800690e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006910:	68bb      	ldr	r3, [r7, #8]
 8006912:	011b      	lsls	r3, r3, #4
 8006914:	693a      	ldr	r2, [r7, #16]
 8006916:	4313      	orrs	r3, r2
 8006918:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	697a      	ldr	r2, [r7, #20]
 800691e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	693a      	ldr	r2, [r7, #16]
 8006924:	621a      	str	r2, [r3, #32]
}
 8006926:	bf00      	nop
 8006928:	371c      	adds	r7, #28
 800692a:	46bd      	mov	sp, r7
 800692c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006930:	4770      	bx	lr

08006932 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006932:	b480      	push	{r7}
 8006934:	b085      	sub	sp, #20
 8006936:	af00      	add	r7, sp, #0
 8006938:	6078      	str	r0, [r7, #4]
 800693a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	689b      	ldr	r3, [r3, #8]
 8006940:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006948:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800694a:	683a      	ldr	r2, [r7, #0]
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	4313      	orrs	r3, r2
 8006950:	f043 0307 	orr.w	r3, r3, #7
 8006954:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	68fa      	ldr	r2, [r7, #12]
 800695a:	609a      	str	r2, [r3, #8]
}
 800695c:	bf00      	nop
 800695e:	3714      	adds	r7, #20
 8006960:	46bd      	mov	sp, r7
 8006962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006966:	4770      	bx	lr

08006968 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006968:	b480      	push	{r7}
 800696a:	b087      	sub	sp, #28
 800696c:	af00      	add	r7, sp, #0
 800696e:	60f8      	str	r0, [r7, #12]
 8006970:	60b9      	str	r1, [r7, #8]
 8006972:	607a      	str	r2, [r7, #4]
 8006974:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	689b      	ldr	r3, [r3, #8]
 800697a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800697c:	697b      	ldr	r3, [r7, #20]
 800697e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006982:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006984:	683b      	ldr	r3, [r7, #0]
 8006986:	021a      	lsls	r2, r3, #8
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	431a      	orrs	r2, r3
 800698c:	68bb      	ldr	r3, [r7, #8]
 800698e:	4313      	orrs	r3, r2
 8006990:	697a      	ldr	r2, [r7, #20]
 8006992:	4313      	orrs	r3, r2
 8006994:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	697a      	ldr	r2, [r7, #20]
 800699a:	609a      	str	r2, [r3, #8]
}
 800699c:	bf00      	nop
 800699e:	371c      	adds	r7, #28
 80069a0:	46bd      	mov	sp, r7
 80069a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a6:	4770      	bx	lr

080069a8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80069a8:	b480      	push	{r7}
 80069aa:	b087      	sub	sp, #28
 80069ac:	af00      	add	r7, sp, #0
 80069ae:	60f8      	str	r0, [r7, #12]
 80069b0:	60b9      	str	r1, [r7, #8]
 80069b2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80069b4:	68bb      	ldr	r3, [r7, #8]
 80069b6:	f003 031f 	and.w	r3, r3, #31
 80069ba:	2201      	movs	r2, #1
 80069bc:	fa02 f303 	lsl.w	r3, r2, r3
 80069c0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	6a1a      	ldr	r2, [r3, #32]
 80069c6:	697b      	ldr	r3, [r7, #20]
 80069c8:	43db      	mvns	r3, r3
 80069ca:	401a      	ands	r2, r3
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	6a1a      	ldr	r2, [r3, #32]
 80069d4:	68bb      	ldr	r3, [r7, #8]
 80069d6:	f003 031f 	and.w	r3, r3, #31
 80069da:	6879      	ldr	r1, [r7, #4]
 80069dc:	fa01 f303 	lsl.w	r3, r1, r3
 80069e0:	431a      	orrs	r2, r3
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	621a      	str	r2, [r3, #32]
}
 80069e6:	bf00      	nop
 80069e8:	371c      	adds	r7, #28
 80069ea:	46bd      	mov	sp, r7
 80069ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f0:	4770      	bx	lr
	...

080069f4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80069f4:	b480      	push	{r7}
 80069f6:	b085      	sub	sp, #20
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	6078      	str	r0, [r7, #4]
 80069fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006a04:	2b01      	cmp	r3, #1
 8006a06:	d101      	bne.n	8006a0c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006a08:	2302      	movs	r3, #2
 8006a0a:	e050      	b.n	8006aae <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	2201      	movs	r2, #1
 8006a10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	2202      	movs	r2, #2
 8006a18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	685b      	ldr	r3, [r3, #4]
 8006a22:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	689b      	ldr	r3, [r3, #8]
 8006a2a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a32:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006a34:	683b      	ldr	r3, [r7, #0]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	68fa      	ldr	r2, [r7, #12]
 8006a3a:	4313      	orrs	r3, r2
 8006a3c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	68fa      	ldr	r2, [r7, #12]
 8006a44:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	4a1c      	ldr	r2, [pc, #112]	; (8006abc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006a4c:	4293      	cmp	r3, r2
 8006a4e:	d018      	beq.n	8006a82 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a58:	d013      	beq.n	8006a82 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	4a18      	ldr	r2, [pc, #96]	; (8006ac0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006a60:	4293      	cmp	r3, r2
 8006a62:	d00e      	beq.n	8006a82 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	4a16      	ldr	r2, [pc, #88]	; (8006ac4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006a6a:	4293      	cmp	r3, r2
 8006a6c:	d009      	beq.n	8006a82 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	4a15      	ldr	r2, [pc, #84]	; (8006ac8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006a74:	4293      	cmp	r3, r2
 8006a76:	d004      	beq.n	8006a82 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	4a13      	ldr	r2, [pc, #76]	; (8006acc <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8006a7e:	4293      	cmp	r3, r2
 8006a80:	d10c      	bne.n	8006a9c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006a82:	68bb      	ldr	r3, [r7, #8]
 8006a84:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006a88:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006a8a:	683b      	ldr	r3, [r7, #0]
 8006a8c:	685b      	ldr	r3, [r3, #4]
 8006a8e:	68ba      	ldr	r2, [r7, #8]
 8006a90:	4313      	orrs	r3, r2
 8006a92:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	68ba      	ldr	r2, [r7, #8]
 8006a9a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	2201      	movs	r2, #1
 8006aa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	2200      	movs	r2, #0
 8006aa8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006aac:	2300      	movs	r3, #0
}
 8006aae:	4618      	mov	r0, r3
 8006ab0:	3714      	adds	r7, #20
 8006ab2:	46bd      	mov	sp, r7
 8006ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab8:	4770      	bx	lr
 8006aba:	bf00      	nop
 8006abc:	40010000 	.word	0x40010000
 8006ac0:	40000400 	.word	0x40000400
 8006ac4:	40000800 	.word	0x40000800
 8006ac8:	40000c00 	.word	0x40000c00
 8006acc:	40014000 	.word	0x40014000

08006ad0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006ad0:	b480      	push	{r7}
 8006ad2:	b083      	sub	sp, #12
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006ad8:	bf00      	nop
 8006ada:	370c      	adds	r7, #12
 8006adc:	46bd      	mov	sp, r7
 8006ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae2:	4770      	bx	lr

08006ae4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006ae4:	b480      	push	{r7}
 8006ae6:	b083      	sub	sp, #12
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006aec:	bf00      	nop
 8006aee:	370c      	adds	r7, #12
 8006af0:	46bd      	mov	sp, r7
 8006af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af6:	4770      	bx	lr

08006af8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006af8:	b580      	push	{r7, lr}
 8006afa:	b082      	sub	sp, #8
 8006afc:	af00      	add	r7, sp, #0
 8006afe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d101      	bne.n	8006b0a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006b06:	2301      	movs	r3, #1
 8006b08:	e03f      	b.n	8006b8a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b10:	b2db      	uxtb	r3, r3
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d106      	bne.n	8006b24 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	2200      	movs	r2, #0
 8006b1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006b1e:	6878      	ldr	r0, [r7, #4]
 8006b20:	f7fc fea8 	bl	8003874 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	2224      	movs	r2, #36	; 0x24
 8006b28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	68da      	ldr	r2, [r3, #12]
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006b3a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006b3c:	6878      	ldr	r0, [r7, #4]
 8006b3e:	f000 ff43 	bl	80079c8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	691a      	ldr	r2, [r3, #16]
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006b50:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	695a      	ldr	r2, [r3, #20]
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006b60:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	68da      	ldr	r2, [r3, #12]
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006b70:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	2200      	movs	r2, #0
 8006b76:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	2220      	movs	r2, #32
 8006b7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	2220      	movs	r2, #32
 8006b84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006b88:	2300      	movs	r3, #0
}
 8006b8a:	4618      	mov	r0, r3
 8006b8c:	3708      	adds	r7, #8
 8006b8e:	46bd      	mov	sp, r7
 8006b90:	bd80      	pop	{r7, pc}
	...

08006b94 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8006b94:	b580      	push	{r7, lr}
 8006b96:	b08c      	sub	sp, #48	; 0x30
 8006b98:	af00      	add	r7, sp, #0
 8006b9a:	60f8      	str	r0, [r7, #12]
 8006b9c:	60b9      	str	r1, [r7, #8]
 8006b9e:	4613      	mov	r3, r2
 8006ba0:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ba8:	b2db      	uxtb	r3, r3
 8006baa:	2b20      	cmp	r3, #32
 8006bac:	d165      	bne.n	8006c7a <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 8006bae:	68bb      	ldr	r3, [r7, #8]
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d002      	beq.n	8006bba <HAL_UART_Transmit_DMA+0x26>
 8006bb4:	88fb      	ldrh	r3, [r7, #6]
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d101      	bne.n	8006bbe <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8006bba:	2301      	movs	r3, #1
 8006bbc:	e05e      	b.n	8006c7c <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006bc4:	2b01      	cmp	r3, #1
 8006bc6:	d101      	bne.n	8006bcc <HAL_UART_Transmit_DMA+0x38>
 8006bc8:	2302      	movs	r3, #2
 8006bca:	e057      	b.n	8006c7c <HAL_UART_Transmit_DMA+0xe8>
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	2201      	movs	r2, #1
 8006bd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8006bd4:	68ba      	ldr	r2, [r7, #8]
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	88fa      	ldrh	r2, [r7, #6]
 8006bde:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	88fa      	ldrh	r2, [r7, #6]
 8006be4:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	2200      	movs	r2, #0
 8006bea:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	2221      	movs	r2, #33	; 0x21
 8006bf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006bf8:	4a22      	ldr	r2, [pc, #136]	; (8006c84 <HAL_UART_Transmit_DMA+0xf0>)
 8006bfa:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c00:	4a21      	ldr	r2, [pc, #132]	; (8006c88 <HAL_UART_Transmit_DMA+0xf4>)
 8006c02:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c08:	4a20      	ldr	r2, [pc, #128]	; (8006c8c <HAL_UART_Transmit_DMA+0xf8>)
 8006c0a:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c10:	2200      	movs	r2, #0
 8006c12:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8006c14:	f107 0308 	add.w	r3, r7, #8
 8006c18:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8006c1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c20:	6819      	ldr	r1, [r3, #0]
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	3304      	adds	r3, #4
 8006c28:	461a      	mov	r2, r3
 8006c2a:	88fb      	ldrh	r3, [r7, #6]
 8006c2c:	f7fd fdf2 	bl	8004814 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006c38:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	2200      	movs	r2, #0
 8006c3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	3314      	adds	r3, #20
 8006c48:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c4a:	69bb      	ldr	r3, [r7, #24]
 8006c4c:	e853 3f00 	ldrex	r3, [r3]
 8006c50:	617b      	str	r3, [r7, #20]
   return(result);
 8006c52:	697b      	ldr	r3, [r7, #20]
 8006c54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c58:	62bb      	str	r3, [r7, #40]	; 0x28
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	3314      	adds	r3, #20
 8006c60:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006c62:	627a      	str	r2, [r7, #36]	; 0x24
 8006c64:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c66:	6a39      	ldr	r1, [r7, #32]
 8006c68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c6a:	e841 2300 	strex	r3, r2, [r1]
 8006c6e:	61fb      	str	r3, [r7, #28]
   return(result);
 8006c70:	69fb      	ldr	r3, [r7, #28]
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d1e5      	bne.n	8006c42 <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 8006c76:	2300      	movs	r3, #0
 8006c78:	e000      	b.n	8006c7c <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 8006c7a:	2302      	movs	r3, #2
  }
}
 8006c7c:	4618      	mov	r0, r3
 8006c7e:	3730      	adds	r7, #48	; 0x30
 8006c80:	46bd      	mov	sp, r7
 8006c82:	bd80      	pop	{r7, pc}
 8006c84:	08007261 	.word	0x08007261
 8006c88:	080072fb 	.word	0x080072fb
 8006c8c:	08007473 	.word	0x08007473

08006c90 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006c90:	b580      	push	{r7, lr}
 8006c92:	b084      	sub	sp, #16
 8006c94:	af00      	add	r7, sp, #0
 8006c96:	60f8      	str	r0, [r7, #12]
 8006c98:	60b9      	str	r1, [r7, #8]
 8006c9a:	4613      	mov	r3, r2
 8006c9c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006ca4:	b2db      	uxtb	r3, r3
 8006ca6:	2b20      	cmp	r3, #32
 8006ca8:	d11d      	bne.n	8006ce6 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8006caa:	68bb      	ldr	r3, [r7, #8]
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d002      	beq.n	8006cb6 <HAL_UART_Receive_DMA+0x26>
 8006cb0:	88fb      	ldrh	r3, [r7, #6]
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d101      	bne.n	8006cba <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8006cb6:	2301      	movs	r3, #1
 8006cb8:	e016      	b.n	8006ce8 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006cc0:	2b01      	cmp	r3, #1
 8006cc2:	d101      	bne.n	8006cc8 <HAL_UART_Receive_DMA+0x38>
 8006cc4:	2302      	movs	r3, #2
 8006cc6:	e00f      	b.n	8006ce8 <HAL_UART_Receive_DMA+0x58>
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	2201      	movs	r2, #1
 8006ccc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	2200      	movs	r2, #0
 8006cd4:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8006cd6:	88fb      	ldrh	r3, [r7, #6]
 8006cd8:	461a      	mov	r2, r3
 8006cda:	68b9      	ldr	r1, [r7, #8]
 8006cdc:	68f8      	ldr	r0, [r7, #12]
 8006cde:	f000 fc13 	bl	8007508 <UART_Start_Receive_DMA>
 8006ce2:	4603      	mov	r3, r0
 8006ce4:	e000      	b.n	8006ce8 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8006ce6:	2302      	movs	r3, #2
  }
}
 8006ce8:	4618      	mov	r0, r3
 8006cea:	3710      	adds	r7, #16
 8006cec:	46bd      	mov	sp, r7
 8006cee:	bd80      	pop	{r7, pc}

08006cf0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006cf0:	b580      	push	{r7, lr}
 8006cf2:	b0ba      	sub	sp, #232	; 0xe8
 8006cf4:	af00      	add	r7, sp, #0
 8006cf6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	68db      	ldr	r3, [r3, #12]
 8006d08:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	695b      	ldr	r3, [r3, #20]
 8006d12:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8006d16:	2300      	movs	r3, #0
 8006d18:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8006d1c:	2300      	movs	r3, #0
 8006d1e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006d22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d26:	f003 030f 	and.w	r3, r3, #15
 8006d2a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8006d2e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d10f      	bne.n	8006d56 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006d36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d3a:	f003 0320 	and.w	r3, r3, #32
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d009      	beq.n	8006d56 <HAL_UART_IRQHandler+0x66>
 8006d42:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006d46:	f003 0320 	and.w	r3, r3, #32
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d003      	beq.n	8006d56 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006d4e:	6878      	ldr	r0, [r7, #4]
 8006d50:	f000 fd7f 	bl	8007852 <UART_Receive_IT>
      return;
 8006d54:	e256      	b.n	8007204 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006d56:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	f000 80de 	beq.w	8006f1c <HAL_UART_IRQHandler+0x22c>
 8006d60:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006d64:	f003 0301 	and.w	r3, r3, #1
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d106      	bne.n	8006d7a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006d6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006d70:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	f000 80d1 	beq.w	8006f1c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006d7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d7e:	f003 0301 	and.w	r3, r3, #1
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d00b      	beq.n	8006d9e <HAL_UART_IRQHandler+0xae>
 8006d86:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006d8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d005      	beq.n	8006d9e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d96:	f043 0201 	orr.w	r2, r3, #1
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006d9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006da2:	f003 0304 	and.w	r3, r3, #4
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d00b      	beq.n	8006dc2 <HAL_UART_IRQHandler+0xd2>
 8006daa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006dae:	f003 0301 	and.w	r3, r3, #1
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d005      	beq.n	8006dc2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dba:	f043 0202 	orr.w	r2, r3, #2
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006dc2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006dc6:	f003 0302 	and.w	r3, r3, #2
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d00b      	beq.n	8006de6 <HAL_UART_IRQHandler+0xf6>
 8006dce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006dd2:	f003 0301 	and.w	r3, r3, #1
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d005      	beq.n	8006de6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dde:	f043 0204 	orr.w	r2, r3, #4
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006de6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006dea:	f003 0308 	and.w	r3, r3, #8
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d011      	beq.n	8006e16 <HAL_UART_IRQHandler+0x126>
 8006df2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006df6:	f003 0320 	and.w	r3, r3, #32
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d105      	bne.n	8006e0a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006dfe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006e02:	f003 0301 	and.w	r3, r3, #1
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d005      	beq.n	8006e16 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e0e:	f043 0208 	orr.w	r2, r3, #8
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	f000 81ed 	beq.w	80071fa <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006e20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e24:	f003 0320 	and.w	r3, r3, #32
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d008      	beq.n	8006e3e <HAL_UART_IRQHandler+0x14e>
 8006e2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006e30:	f003 0320 	and.w	r3, r3, #32
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d002      	beq.n	8006e3e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006e38:	6878      	ldr	r0, [r7, #4]
 8006e3a:	f000 fd0a 	bl	8007852 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	695b      	ldr	r3, [r3, #20]
 8006e44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e48:	2b40      	cmp	r3, #64	; 0x40
 8006e4a:	bf0c      	ite	eq
 8006e4c:	2301      	moveq	r3, #1
 8006e4e:	2300      	movne	r3, #0
 8006e50:	b2db      	uxtb	r3, r3
 8006e52:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e5a:	f003 0308 	and.w	r3, r3, #8
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d103      	bne.n	8006e6a <HAL_UART_IRQHandler+0x17a>
 8006e62:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d04f      	beq.n	8006f0a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006e6a:	6878      	ldr	r0, [r7, #4]
 8006e6c:	f000 fc12 	bl	8007694 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	695b      	ldr	r3, [r3, #20]
 8006e76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e7a:	2b40      	cmp	r3, #64	; 0x40
 8006e7c:	d141      	bne.n	8006f02 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	3314      	adds	r3, #20
 8006e84:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e88:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006e8c:	e853 3f00 	ldrex	r3, [r3]
 8006e90:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006e94:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006e98:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006e9c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	3314      	adds	r3, #20
 8006ea6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006eaa:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006eae:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006eb2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006eb6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006eba:	e841 2300 	strex	r3, r2, [r1]
 8006ebe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006ec2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d1d9      	bne.n	8006e7e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d013      	beq.n	8006efa <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ed6:	4a7d      	ldr	r2, [pc, #500]	; (80070cc <HAL_UART_IRQHandler+0x3dc>)
 8006ed8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ede:	4618      	mov	r0, r3
 8006ee0:	f7fd fd60 	bl	80049a4 <HAL_DMA_Abort_IT>
 8006ee4:	4603      	mov	r3, r0
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d016      	beq.n	8006f18 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006eee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ef0:	687a      	ldr	r2, [r7, #4]
 8006ef2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006ef4:	4610      	mov	r0, r2
 8006ef6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ef8:	e00e      	b.n	8006f18 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006efa:	6878      	ldr	r0, [r7, #4]
 8006efc:	f000 f99a 	bl	8007234 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f00:	e00a      	b.n	8006f18 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006f02:	6878      	ldr	r0, [r7, #4]
 8006f04:	f000 f996 	bl	8007234 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f08:	e006      	b.n	8006f18 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006f0a:	6878      	ldr	r0, [r7, #4]
 8006f0c:	f000 f992 	bl	8007234 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	2200      	movs	r2, #0
 8006f14:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8006f16:	e170      	b.n	80071fa <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f18:	bf00      	nop
    return;
 8006f1a:	e16e      	b.n	80071fa <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f20:	2b01      	cmp	r3, #1
 8006f22:	f040 814a 	bne.w	80071ba <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006f26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f2a:	f003 0310 	and.w	r3, r3, #16
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	f000 8143 	beq.w	80071ba <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006f34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006f38:	f003 0310 	and.w	r3, r3, #16
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	f000 813c 	beq.w	80071ba <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006f42:	2300      	movs	r3, #0
 8006f44:	60bb      	str	r3, [r7, #8]
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	60bb      	str	r3, [r7, #8]
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	685b      	ldr	r3, [r3, #4]
 8006f54:	60bb      	str	r3, [r7, #8]
 8006f56:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	695b      	ldr	r3, [r3, #20]
 8006f5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f62:	2b40      	cmp	r3, #64	; 0x40
 8006f64:	f040 80b4 	bne.w	80070d0 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	685b      	ldr	r3, [r3, #4]
 8006f70:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006f74:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	f000 8140 	beq.w	80071fe <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006f82:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006f86:	429a      	cmp	r2, r3
 8006f88:	f080 8139 	bcs.w	80071fe <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006f92:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f98:	69db      	ldr	r3, [r3, #28]
 8006f9a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006f9e:	f000 8088 	beq.w	80070b2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	330c      	adds	r3, #12
 8006fa8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fac:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006fb0:	e853 3f00 	ldrex	r3, [r3]
 8006fb4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006fb8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006fbc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006fc0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	330c      	adds	r3, #12
 8006fca:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8006fce:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006fd2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fd6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006fda:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006fde:	e841 2300 	strex	r3, r2, [r1]
 8006fe2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006fe6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d1d9      	bne.n	8006fa2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	3314      	adds	r3, #20
 8006ff4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ff6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006ff8:	e853 3f00 	ldrex	r3, [r3]
 8006ffc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006ffe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007000:	f023 0301 	bic.w	r3, r3, #1
 8007004:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	3314      	adds	r3, #20
 800700e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007012:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007016:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007018:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800701a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800701e:	e841 2300 	strex	r3, r2, [r1]
 8007022:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007024:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007026:	2b00      	cmp	r3, #0
 8007028:	d1e1      	bne.n	8006fee <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	3314      	adds	r3, #20
 8007030:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007032:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007034:	e853 3f00 	ldrex	r3, [r3]
 8007038:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800703a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800703c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007040:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	3314      	adds	r3, #20
 800704a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800704e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007050:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007052:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007054:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007056:	e841 2300 	strex	r3, r2, [r1]
 800705a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800705c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800705e:	2b00      	cmp	r3, #0
 8007060:	d1e3      	bne.n	800702a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	2220      	movs	r2, #32
 8007066:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	2200      	movs	r2, #0
 800706e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	330c      	adds	r3, #12
 8007076:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007078:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800707a:	e853 3f00 	ldrex	r3, [r3]
 800707e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007080:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007082:	f023 0310 	bic.w	r3, r3, #16
 8007086:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	330c      	adds	r3, #12
 8007090:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8007094:	65ba      	str	r2, [r7, #88]	; 0x58
 8007096:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007098:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800709a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800709c:	e841 2300 	strex	r3, r2, [r1]
 80070a0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80070a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d1e3      	bne.n	8007070 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070ac:	4618      	mov	r0, r3
 80070ae:	f7fd fc09 	bl	80048c4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80070ba:	b29b      	uxth	r3, r3
 80070bc:	1ad3      	subs	r3, r2, r3
 80070be:	b29b      	uxth	r3, r3
 80070c0:	4619      	mov	r1, r3
 80070c2:	6878      	ldr	r0, [r7, #4]
 80070c4:	f000 f8c0 	bl	8007248 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80070c8:	e099      	b.n	80071fe <HAL_UART_IRQHandler+0x50e>
 80070ca:	bf00      	nop
 80070cc:	0800775b 	.word	0x0800775b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80070d8:	b29b      	uxth	r3, r3
 80070da:	1ad3      	subs	r3, r2, r3
 80070dc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80070e4:	b29b      	uxth	r3, r3
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	f000 808b 	beq.w	8007202 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80070ec:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	f000 8086 	beq.w	8007202 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	330c      	adds	r3, #12
 80070fc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007100:	e853 3f00 	ldrex	r3, [r3]
 8007104:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007106:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007108:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800710c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	330c      	adds	r3, #12
 8007116:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800711a:	647a      	str	r2, [r7, #68]	; 0x44
 800711c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800711e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007120:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007122:	e841 2300 	strex	r3, r2, [r1]
 8007126:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007128:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800712a:	2b00      	cmp	r3, #0
 800712c:	d1e3      	bne.n	80070f6 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	3314      	adds	r3, #20
 8007134:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007138:	e853 3f00 	ldrex	r3, [r3]
 800713c:	623b      	str	r3, [r7, #32]
   return(result);
 800713e:	6a3b      	ldr	r3, [r7, #32]
 8007140:	f023 0301 	bic.w	r3, r3, #1
 8007144:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	3314      	adds	r3, #20
 800714e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007152:	633a      	str	r2, [r7, #48]	; 0x30
 8007154:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007156:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007158:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800715a:	e841 2300 	strex	r3, r2, [r1]
 800715e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007160:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007162:	2b00      	cmp	r3, #0
 8007164:	d1e3      	bne.n	800712e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	2220      	movs	r2, #32
 800716a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	2200      	movs	r2, #0
 8007172:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	330c      	adds	r3, #12
 800717a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800717c:	693b      	ldr	r3, [r7, #16]
 800717e:	e853 3f00 	ldrex	r3, [r3]
 8007182:	60fb      	str	r3, [r7, #12]
   return(result);
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	f023 0310 	bic.w	r3, r3, #16
 800718a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	330c      	adds	r3, #12
 8007194:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8007198:	61fa      	str	r2, [r7, #28]
 800719a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800719c:	69b9      	ldr	r1, [r7, #24]
 800719e:	69fa      	ldr	r2, [r7, #28]
 80071a0:	e841 2300 	strex	r3, r2, [r1]
 80071a4:	617b      	str	r3, [r7, #20]
   return(result);
 80071a6:	697b      	ldr	r3, [r7, #20]
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d1e3      	bne.n	8007174 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80071ac:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80071b0:	4619      	mov	r1, r3
 80071b2:	6878      	ldr	r0, [r7, #4]
 80071b4:	f000 f848 	bl	8007248 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80071b8:	e023      	b.n	8007202 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80071ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80071be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d009      	beq.n	80071da <HAL_UART_IRQHandler+0x4ea>
 80071c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80071ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d003      	beq.n	80071da <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80071d2:	6878      	ldr	r0, [r7, #4]
 80071d4:	f000 fad5 	bl	8007782 <UART_Transmit_IT>
    return;
 80071d8:	e014      	b.n	8007204 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80071da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80071de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d00e      	beq.n	8007204 <HAL_UART_IRQHandler+0x514>
 80071e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80071ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d008      	beq.n	8007204 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80071f2:	6878      	ldr	r0, [r7, #4]
 80071f4:	f000 fb15 	bl	8007822 <UART_EndTransmit_IT>
    return;
 80071f8:	e004      	b.n	8007204 <HAL_UART_IRQHandler+0x514>
    return;
 80071fa:	bf00      	nop
 80071fc:	e002      	b.n	8007204 <HAL_UART_IRQHandler+0x514>
      return;
 80071fe:	bf00      	nop
 8007200:	e000      	b.n	8007204 <HAL_UART_IRQHandler+0x514>
      return;
 8007202:	bf00      	nop
  }
}
 8007204:	37e8      	adds	r7, #232	; 0xe8
 8007206:	46bd      	mov	sp, r7
 8007208:	bd80      	pop	{r7, pc}
 800720a:	bf00      	nop

0800720c <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800720c:	b480      	push	{r7}
 800720e:	b083      	sub	sp, #12
 8007210:	af00      	add	r7, sp, #0
 8007212:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8007214:	bf00      	nop
 8007216:	370c      	adds	r7, #12
 8007218:	46bd      	mov	sp, r7
 800721a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800721e:	4770      	bx	lr

08007220 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007220:	b480      	push	{r7}
 8007222:	b083      	sub	sp, #12
 8007224:	af00      	add	r7, sp, #0
 8007226:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8007228:	bf00      	nop
 800722a:	370c      	adds	r7, #12
 800722c:	46bd      	mov	sp, r7
 800722e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007232:	4770      	bx	lr

08007234 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007234:	b480      	push	{r7}
 8007236:	b083      	sub	sp, #12
 8007238:	af00      	add	r7, sp, #0
 800723a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800723c:	bf00      	nop
 800723e:	370c      	adds	r7, #12
 8007240:	46bd      	mov	sp, r7
 8007242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007246:	4770      	bx	lr

08007248 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007248:	b480      	push	{r7}
 800724a:	b083      	sub	sp, #12
 800724c:	af00      	add	r7, sp, #0
 800724e:	6078      	str	r0, [r7, #4]
 8007250:	460b      	mov	r3, r1
 8007252:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007254:	bf00      	nop
 8007256:	370c      	adds	r7, #12
 8007258:	46bd      	mov	sp, r7
 800725a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800725e:	4770      	bx	lr

08007260 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007260:	b580      	push	{r7, lr}
 8007262:	b090      	sub	sp, #64	; 0x40
 8007264:	af00      	add	r7, sp, #0
 8007266:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800726c:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007278:	2b00      	cmp	r3, #0
 800727a:	d137      	bne.n	80072ec <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 800727c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800727e:	2200      	movs	r2, #0
 8007280:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007282:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	3314      	adds	r3, #20
 8007288:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800728a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800728c:	e853 3f00 	ldrex	r3, [r3]
 8007290:	623b      	str	r3, [r7, #32]
   return(result);
 8007292:	6a3b      	ldr	r3, [r7, #32]
 8007294:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007298:	63bb      	str	r3, [r7, #56]	; 0x38
 800729a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	3314      	adds	r3, #20
 80072a0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80072a2:	633a      	str	r2, [r7, #48]	; 0x30
 80072a4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072a6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80072a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80072aa:	e841 2300 	strex	r3, r2, [r1]
 80072ae:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80072b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d1e5      	bne.n	8007282 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80072b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	330c      	adds	r3, #12
 80072bc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072be:	693b      	ldr	r3, [r7, #16]
 80072c0:	e853 3f00 	ldrex	r3, [r3]
 80072c4:	60fb      	str	r3, [r7, #12]
   return(result);
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80072cc:	637b      	str	r3, [r7, #52]	; 0x34
 80072ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	330c      	adds	r3, #12
 80072d4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80072d6:	61fa      	str	r2, [r7, #28]
 80072d8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072da:	69b9      	ldr	r1, [r7, #24]
 80072dc:	69fa      	ldr	r2, [r7, #28]
 80072de:	e841 2300 	strex	r3, r2, [r1]
 80072e2:	617b      	str	r3, [r7, #20]
   return(result);
 80072e4:	697b      	ldr	r3, [r7, #20]
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d1e5      	bne.n	80072b6 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80072ea:	e002      	b.n	80072f2 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 80072ec:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80072ee:	f7fb f8a1 	bl	8002434 <HAL_UART_TxCpltCallback>
}
 80072f2:	bf00      	nop
 80072f4:	3740      	adds	r7, #64	; 0x40
 80072f6:	46bd      	mov	sp, r7
 80072f8:	bd80      	pop	{r7, pc}

080072fa <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80072fa:	b580      	push	{r7, lr}
 80072fc:	b084      	sub	sp, #16
 80072fe:	af00      	add	r7, sp, #0
 8007300:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007306:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8007308:	68f8      	ldr	r0, [r7, #12]
 800730a:	f7ff ff7f 	bl	800720c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800730e:	bf00      	nop
 8007310:	3710      	adds	r7, #16
 8007312:	46bd      	mov	sp, r7
 8007314:	bd80      	pop	{r7, pc}

08007316 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007316:	b580      	push	{r7, lr}
 8007318:	b09c      	sub	sp, #112	; 0x70
 800731a:	af00      	add	r7, sp, #0
 800731c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007322:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800732e:	2b00      	cmp	r3, #0
 8007330:	d172      	bne.n	8007418 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8007332:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007334:	2200      	movs	r2, #0
 8007336:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007338:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	330c      	adds	r3, #12
 800733e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007340:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007342:	e853 3f00 	ldrex	r3, [r3]
 8007346:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007348:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800734a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800734e:	66bb      	str	r3, [r7, #104]	; 0x68
 8007350:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	330c      	adds	r3, #12
 8007356:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007358:	65ba      	str	r2, [r7, #88]	; 0x58
 800735a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800735c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800735e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007360:	e841 2300 	strex	r3, r2, [r1]
 8007364:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007366:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007368:	2b00      	cmp	r3, #0
 800736a:	d1e5      	bne.n	8007338 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800736c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	3314      	adds	r3, #20
 8007372:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007374:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007376:	e853 3f00 	ldrex	r3, [r3]
 800737a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800737c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800737e:	f023 0301 	bic.w	r3, r3, #1
 8007382:	667b      	str	r3, [r7, #100]	; 0x64
 8007384:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	3314      	adds	r3, #20
 800738a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800738c:	647a      	str	r2, [r7, #68]	; 0x44
 800738e:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007390:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007392:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007394:	e841 2300 	strex	r3, r2, [r1]
 8007398:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800739a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800739c:	2b00      	cmp	r3, #0
 800739e:	d1e5      	bne.n	800736c <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80073a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	3314      	adds	r3, #20
 80073a6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073aa:	e853 3f00 	ldrex	r3, [r3]
 80073ae:	623b      	str	r3, [r7, #32]
   return(result);
 80073b0:	6a3b      	ldr	r3, [r7, #32]
 80073b2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80073b6:	663b      	str	r3, [r7, #96]	; 0x60
 80073b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	3314      	adds	r3, #20
 80073be:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80073c0:	633a      	str	r2, [r7, #48]	; 0x30
 80073c2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073c4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80073c6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80073c8:	e841 2300 	strex	r3, r2, [r1]
 80073cc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80073ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d1e5      	bne.n	80073a0 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80073d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80073d6:	2220      	movs	r2, #32
 80073d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80073dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80073de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073e0:	2b01      	cmp	r3, #1
 80073e2:	d119      	bne.n	8007418 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80073e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	330c      	adds	r3, #12
 80073ea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073ec:	693b      	ldr	r3, [r7, #16]
 80073ee:	e853 3f00 	ldrex	r3, [r3]
 80073f2:	60fb      	str	r3, [r7, #12]
   return(result);
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	f023 0310 	bic.w	r3, r3, #16
 80073fa:	65fb      	str	r3, [r7, #92]	; 0x5c
 80073fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	330c      	adds	r3, #12
 8007402:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007404:	61fa      	str	r2, [r7, #28]
 8007406:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007408:	69b9      	ldr	r1, [r7, #24]
 800740a:	69fa      	ldr	r2, [r7, #28]
 800740c:	e841 2300 	strex	r3, r2, [r1]
 8007410:	617b      	str	r3, [r7, #20]
   return(result);
 8007412:	697b      	ldr	r3, [r7, #20]
 8007414:	2b00      	cmp	r3, #0
 8007416:	d1e5      	bne.n	80073e4 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007418:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800741a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800741c:	2b01      	cmp	r3, #1
 800741e:	d106      	bne.n	800742e <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007420:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007422:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007424:	4619      	mov	r1, r3
 8007426:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8007428:	f7ff ff0e 	bl	8007248 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800742c:	e002      	b.n	8007434 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 800742e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8007430:	f7fb f812 	bl	8002458 <HAL_UART_RxCpltCallback>
}
 8007434:	bf00      	nop
 8007436:	3770      	adds	r7, #112	; 0x70
 8007438:	46bd      	mov	sp, r7
 800743a:	bd80      	pop	{r7, pc}

0800743c <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800743c:	b580      	push	{r7, lr}
 800743e:	b084      	sub	sp, #16
 8007440:	af00      	add	r7, sp, #0
 8007442:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007448:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800744e:	2b01      	cmp	r3, #1
 8007450:	d108      	bne.n	8007464 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007456:	085b      	lsrs	r3, r3, #1
 8007458:	b29b      	uxth	r3, r3
 800745a:	4619      	mov	r1, r3
 800745c:	68f8      	ldr	r0, [r7, #12]
 800745e:	f7ff fef3 	bl	8007248 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007462:	e002      	b.n	800746a <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8007464:	68f8      	ldr	r0, [r7, #12]
 8007466:	f7ff fedb 	bl	8007220 <HAL_UART_RxHalfCpltCallback>
}
 800746a:	bf00      	nop
 800746c:	3710      	adds	r7, #16
 800746e:	46bd      	mov	sp, r7
 8007470:	bd80      	pop	{r7, pc}

08007472 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8007472:	b580      	push	{r7, lr}
 8007474:	b084      	sub	sp, #16
 8007476:	af00      	add	r7, sp, #0
 8007478:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800747a:	2300      	movs	r3, #0
 800747c:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007482:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8007484:	68bb      	ldr	r3, [r7, #8]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	695b      	ldr	r3, [r3, #20]
 800748a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800748e:	2b80      	cmp	r3, #128	; 0x80
 8007490:	bf0c      	ite	eq
 8007492:	2301      	moveq	r3, #1
 8007494:	2300      	movne	r3, #0
 8007496:	b2db      	uxtb	r3, r3
 8007498:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800749a:	68bb      	ldr	r3, [r7, #8]
 800749c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80074a0:	b2db      	uxtb	r3, r3
 80074a2:	2b21      	cmp	r3, #33	; 0x21
 80074a4:	d108      	bne.n	80074b8 <UART_DMAError+0x46>
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d005      	beq.n	80074b8 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80074ac:	68bb      	ldr	r3, [r7, #8]
 80074ae:	2200      	movs	r2, #0
 80074b0:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80074b2:	68b8      	ldr	r0, [r7, #8]
 80074b4:	f000 f8c6 	bl	8007644 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80074b8:	68bb      	ldr	r3, [r7, #8]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	695b      	ldr	r3, [r3, #20]
 80074be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074c2:	2b40      	cmp	r3, #64	; 0x40
 80074c4:	bf0c      	ite	eq
 80074c6:	2301      	moveq	r3, #1
 80074c8:	2300      	movne	r3, #0
 80074ca:	b2db      	uxtb	r3, r3
 80074cc:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80074ce:	68bb      	ldr	r3, [r7, #8]
 80074d0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80074d4:	b2db      	uxtb	r3, r3
 80074d6:	2b22      	cmp	r3, #34	; 0x22
 80074d8:	d108      	bne.n	80074ec <UART_DMAError+0x7a>
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d005      	beq.n	80074ec <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80074e0:	68bb      	ldr	r3, [r7, #8]
 80074e2:	2200      	movs	r2, #0
 80074e4:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80074e6:	68b8      	ldr	r0, [r7, #8]
 80074e8:	f000 f8d4 	bl	8007694 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80074ec:	68bb      	ldr	r3, [r7, #8]
 80074ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074f0:	f043 0210 	orr.w	r2, r3, #16
 80074f4:	68bb      	ldr	r3, [r7, #8]
 80074f6:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80074f8:	68b8      	ldr	r0, [r7, #8]
 80074fa:	f7ff fe9b 	bl	8007234 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80074fe:	bf00      	nop
 8007500:	3710      	adds	r7, #16
 8007502:	46bd      	mov	sp, r7
 8007504:	bd80      	pop	{r7, pc}
	...

08007508 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007508:	b580      	push	{r7, lr}
 800750a:	b098      	sub	sp, #96	; 0x60
 800750c:	af00      	add	r7, sp, #0
 800750e:	60f8      	str	r0, [r7, #12]
 8007510:	60b9      	str	r1, [r7, #8]
 8007512:	4613      	mov	r3, r2
 8007514:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8007516:	68ba      	ldr	r2, [r7, #8]
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	88fa      	ldrh	r2, [r7, #6]
 8007520:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	2200      	movs	r2, #0
 8007526:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	2222      	movs	r2, #34	; 0x22
 800752c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007534:	4a40      	ldr	r2, [pc, #256]	; (8007638 <UART_Start_Receive_DMA+0x130>)
 8007536:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800753c:	4a3f      	ldr	r2, [pc, #252]	; (800763c <UART_Start_Receive_DMA+0x134>)
 800753e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007544:	4a3e      	ldr	r2, [pc, #248]	; (8007640 <UART_Start_Receive_DMA+0x138>)
 8007546:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800754c:	2200      	movs	r2, #0
 800754e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8007550:	f107 0308 	add.w	r3, r7, #8
 8007554:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	3304      	adds	r3, #4
 8007560:	4619      	mov	r1, r3
 8007562:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007564:	681a      	ldr	r2, [r3, #0]
 8007566:	88fb      	ldrh	r3, [r7, #6]
 8007568:	f7fd f954 	bl	8004814 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800756c:	2300      	movs	r3, #0
 800756e:	613b      	str	r3, [r7, #16]
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	613b      	str	r3, [r7, #16]
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	685b      	ldr	r3, [r3, #4]
 800757e:	613b      	str	r3, [r7, #16]
 8007580:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	2200      	movs	r2, #0
 8007586:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	691b      	ldr	r3, [r3, #16]
 800758e:	2b00      	cmp	r3, #0
 8007590:	d019      	beq.n	80075c6 <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	330c      	adds	r3, #12
 8007598:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800759a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800759c:	e853 3f00 	ldrex	r3, [r3]
 80075a0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80075a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80075a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80075a8:	65bb      	str	r3, [r7, #88]	; 0x58
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	330c      	adds	r3, #12
 80075b0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80075b2:	64fa      	str	r2, [r7, #76]	; 0x4c
 80075b4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075b6:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80075b8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80075ba:	e841 2300 	strex	r3, r2, [r1]
 80075be:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80075c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d1e5      	bne.n	8007592 <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	3314      	adds	r3, #20
 80075cc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075d0:	e853 3f00 	ldrex	r3, [r3]
 80075d4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80075d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075d8:	f043 0301 	orr.w	r3, r3, #1
 80075dc:	657b      	str	r3, [r7, #84]	; 0x54
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	3314      	adds	r3, #20
 80075e4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80075e6:	63ba      	str	r2, [r7, #56]	; 0x38
 80075e8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075ea:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80075ec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80075ee:	e841 2300 	strex	r3, r2, [r1]
 80075f2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80075f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d1e5      	bne.n	80075c6 <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	3314      	adds	r3, #20
 8007600:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007602:	69bb      	ldr	r3, [r7, #24]
 8007604:	e853 3f00 	ldrex	r3, [r3]
 8007608:	617b      	str	r3, [r7, #20]
   return(result);
 800760a:	697b      	ldr	r3, [r7, #20]
 800760c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007610:	653b      	str	r3, [r7, #80]	; 0x50
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	3314      	adds	r3, #20
 8007618:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800761a:	627a      	str	r2, [r7, #36]	; 0x24
 800761c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800761e:	6a39      	ldr	r1, [r7, #32]
 8007620:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007622:	e841 2300 	strex	r3, r2, [r1]
 8007626:	61fb      	str	r3, [r7, #28]
   return(result);
 8007628:	69fb      	ldr	r3, [r7, #28]
 800762a:	2b00      	cmp	r3, #0
 800762c:	d1e5      	bne.n	80075fa <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 800762e:	2300      	movs	r3, #0
}
 8007630:	4618      	mov	r0, r3
 8007632:	3760      	adds	r7, #96	; 0x60
 8007634:	46bd      	mov	sp, r7
 8007636:	bd80      	pop	{r7, pc}
 8007638:	08007317 	.word	0x08007317
 800763c:	0800743d 	.word	0x0800743d
 8007640:	08007473 	.word	0x08007473

08007644 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007644:	b480      	push	{r7}
 8007646:	b089      	sub	sp, #36	; 0x24
 8007648:	af00      	add	r7, sp, #0
 800764a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	330c      	adds	r3, #12
 8007652:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	e853 3f00 	ldrex	r3, [r3]
 800765a:	60bb      	str	r3, [r7, #8]
   return(result);
 800765c:	68bb      	ldr	r3, [r7, #8]
 800765e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8007662:	61fb      	str	r3, [r7, #28]
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	330c      	adds	r3, #12
 800766a:	69fa      	ldr	r2, [r7, #28]
 800766c:	61ba      	str	r2, [r7, #24]
 800766e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007670:	6979      	ldr	r1, [r7, #20]
 8007672:	69ba      	ldr	r2, [r7, #24]
 8007674:	e841 2300 	strex	r3, r2, [r1]
 8007678:	613b      	str	r3, [r7, #16]
   return(result);
 800767a:	693b      	ldr	r3, [r7, #16]
 800767c:	2b00      	cmp	r3, #0
 800767e:	d1e5      	bne.n	800764c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	2220      	movs	r2, #32
 8007684:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8007688:	bf00      	nop
 800768a:	3724      	adds	r7, #36	; 0x24
 800768c:	46bd      	mov	sp, r7
 800768e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007692:	4770      	bx	lr

08007694 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007694:	b480      	push	{r7}
 8007696:	b095      	sub	sp, #84	; 0x54
 8007698:	af00      	add	r7, sp, #0
 800769a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	330c      	adds	r3, #12
 80076a2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80076a6:	e853 3f00 	ldrex	r3, [r3]
 80076aa:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80076ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076ae:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80076b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	330c      	adds	r3, #12
 80076ba:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80076bc:	643a      	str	r2, [r7, #64]	; 0x40
 80076be:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076c0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80076c2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80076c4:	e841 2300 	strex	r3, r2, [r1]
 80076c8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80076ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d1e5      	bne.n	800769c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	3314      	adds	r3, #20
 80076d6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076d8:	6a3b      	ldr	r3, [r7, #32]
 80076da:	e853 3f00 	ldrex	r3, [r3]
 80076de:	61fb      	str	r3, [r7, #28]
   return(result);
 80076e0:	69fb      	ldr	r3, [r7, #28]
 80076e2:	f023 0301 	bic.w	r3, r3, #1
 80076e6:	64bb      	str	r3, [r7, #72]	; 0x48
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	3314      	adds	r3, #20
 80076ee:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80076f0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80076f2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076f4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80076f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80076f8:	e841 2300 	strex	r3, r2, [r1]
 80076fc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80076fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007700:	2b00      	cmp	r3, #0
 8007702:	d1e5      	bne.n	80076d0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007708:	2b01      	cmp	r3, #1
 800770a:	d119      	bne.n	8007740 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	330c      	adds	r3, #12
 8007712:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	e853 3f00 	ldrex	r3, [r3]
 800771a:	60bb      	str	r3, [r7, #8]
   return(result);
 800771c:	68bb      	ldr	r3, [r7, #8]
 800771e:	f023 0310 	bic.w	r3, r3, #16
 8007722:	647b      	str	r3, [r7, #68]	; 0x44
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	330c      	adds	r3, #12
 800772a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800772c:	61ba      	str	r2, [r7, #24]
 800772e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007730:	6979      	ldr	r1, [r7, #20]
 8007732:	69ba      	ldr	r2, [r7, #24]
 8007734:	e841 2300 	strex	r3, r2, [r1]
 8007738:	613b      	str	r3, [r7, #16]
   return(result);
 800773a:	693b      	ldr	r3, [r7, #16]
 800773c:	2b00      	cmp	r3, #0
 800773e:	d1e5      	bne.n	800770c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	2220      	movs	r2, #32
 8007744:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	2200      	movs	r2, #0
 800774c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800774e:	bf00      	nop
 8007750:	3754      	adds	r7, #84	; 0x54
 8007752:	46bd      	mov	sp, r7
 8007754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007758:	4770      	bx	lr

0800775a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800775a:	b580      	push	{r7, lr}
 800775c:	b084      	sub	sp, #16
 800775e:	af00      	add	r7, sp, #0
 8007760:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007766:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	2200      	movs	r2, #0
 800776c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	2200      	movs	r2, #0
 8007772:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007774:	68f8      	ldr	r0, [r7, #12]
 8007776:	f7ff fd5d 	bl	8007234 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800777a:	bf00      	nop
 800777c:	3710      	adds	r7, #16
 800777e:	46bd      	mov	sp, r7
 8007780:	bd80      	pop	{r7, pc}

08007782 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007782:	b480      	push	{r7}
 8007784:	b085      	sub	sp, #20
 8007786:	af00      	add	r7, sp, #0
 8007788:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007790:	b2db      	uxtb	r3, r3
 8007792:	2b21      	cmp	r3, #33	; 0x21
 8007794:	d13e      	bne.n	8007814 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	689b      	ldr	r3, [r3, #8]
 800779a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800779e:	d114      	bne.n	80077ca <UART_Transmit_IT+0x48>
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	691b      	ldr	r3, [r3, #16]
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d110      	bne.n	80077ca <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	6a1b      	ldr	r3, [r3, #32]
 80077ac:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	881b      	ldrh	r3, [r3, #0]
 80077b2:	461a      	mov	r2, r3
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80077bc:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	6a1b      	ldr	r3, [r3, #32]
 80077c2:	1c9a      	adds	r2, r3, #2
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	621a      	str	r2, [r3, #32]
 80077c8:	e008      	b.n	80077dc <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	6a1b      	ldr	r3, [r3, #32]
 80077ce:	1c59      	adds	r1, r3, #1
 80077d0:	687a      	ldr	r2, [r7, #4]
 80077d2:	6211      	str	r1, [r2, #32]
 80077d4:	781a      	ldrb	r2, [r3, #0]
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80077e0:	b29b      	uxth	r3, r3
 80077e2:	3b01      	subs	r3, #1
 80077e4:	b29b      	uxth	r3, r3
 80077e6:	687a      	ldr	r2, [r7, #4]
 80077e8:	4619      	mov	r1, r3
 80077ea:	84d1      	strh	r1, [r2, #38]	; 0x26
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d10f      	bne.n	8007810 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	68da      	ldr	r2, [r3, #12]
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80077fe:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	68da      	ldr	r2, [r3, #12]
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800780e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007810:	2300      	movs	r3, #0
 8007812:	e000      	b.n	8007816 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007814:	2302      	movs	r3, #2
  }
}
 8007816:	4618      	mov	r0, r3
 8007818:	3714      	adds	r7, #20
 800781a:	46bd      	mov	sp, r7
 800781c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007820:	4770      	bx	lr

08007822 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007822:	b580      	push	{r7, lr}
 8007824:	b082      	sub	sp, #8
 8007826:	af00      	add	r7, sp, #0
 8007828:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	68da      	ldr	r2, [r3, #12]
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007838:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	2220      	movs	r2, #32
 800783e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007842:	6878      	ldr	r0, [r7, #4]
 8007844:	f7fa fdf6 	bl	8002434 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007848:	2300      	movs	r3, #0
}
 800784a:	4618      	mov	r0, r3
 800784c:	3708      	adds	r7, #8
 800784e:	46bd      	mov	sp, r7
 8007850:	bd80      	pop	{r7, pc}

08007852 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007852:	b580      	push	{r7, lr}
 8007854:	b08c      	sub	sp, #48	; 0x30
 8007856:	af00      	add	r7, sp, #0
 8007858:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007860:	b2db      	uxtb	r3, r3
 8007862:	2b22      	cmp	r3, #34	; 0x22
 8007864:	f040 80ab 	bne.w	80079be <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	689b      	ldr	r3, [r3, #8]
 800786c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007870:	d117      	bne.n	80078a2 <UART_Receive_IT+0x50>
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	691b      	ldr	r3, [r3, #16]
 8007876:	2b00      	cmp	r3, #0
 8007878:	d113      	bne.n	80078a2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800787a:	2300      	movs	r3, #0
 800787c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007882:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	685b      	ldr	r3, [r3, #4]
 800788a:	b29b      	uxth	r3, r3
 800788c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007890:	b29a      	uxth	r2, r3
 8007892:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007894:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800789a:	1c9a      	adds	r2, r3, #2
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	629a      	str	r2, [r3, #40]	; 0x28
 80078a0:	e026      	b.n	80078f0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078a6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80078a8:	2300      	movs	r3, #0
 80078aa:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	689b      	ldr	r3, [r3, #8]
 80078b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80078b4:	d007      	beq.n	80078c6 <UART_Receive_IT+0x74>
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	689b      	ldr	r3, [r3, #8]
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d10a      	bne.n	80078d4 <UART_Receive_IT+0x82>
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	691b      	ldr	r3, [r3, #16]
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d106      	bne.n	80078d4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	685b      	ldr	r3, [r3, #4]
 80078cc:	b2da      	uxtb	r2, r3
 80078ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078d0:	701a      	strb	r2, [r3, #0]
 80078d2:	e008      	b.n	80078e6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	685b      	ldr	r3, [r3, #4]
 80078da:	b2db      	uxtb	r3, r3
 80078dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80078e0:	b2da      	uxtb	r2, r3
 80078e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078e4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078ea:	1c5a      	adds	r2, r3, #1
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80078f4:	b29b      	uxth	r3, r3
 80078f6:	3b01      	subs	r3, #1
 80078f8:	b29b      	uxth	r3, r3
 80078fa:	687a      	ldr	r2, [r7, #4]
 80078fc:	4619      	mov	r1, r3
 80078fe:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007900:	2b00      	cmp	r3, #0
 8007902:	d15a      	bne.n	80079ba <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	68da      	ldr	r2, [r3, #12]
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	f022 0220 	bic.w	r2, r2, #32
 8007912:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	68da      	ldr	r2, [r3, #12]
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007922:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	695a      	ldr	r2, [r3, #20]
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	f022 0201 	bic.w	r2, r2, #1
 8007932:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	2220      	movs	r2, #32
 8007938:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007940:	2b01      	cmp	r3, #1
 8007942:	d135      	bne.n	80079b0 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	2200      	movs	r2, #0
 8007948:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	330c      	adds	r3, #12
 8007950:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007952:	697b      	ldr	r3, [r7, #20]
 8007954:	e853 3f00 	ldrex	r3, [r3]
 8007958:	613b      	str	r3, [r7, #16]
   return(result);
 800795a:	693b      	ldr	r3, [r7, #16]
 800795c:	f023 0310 	bic.w	r3, r3, #16
 8007960:	627b      	str	r3, [r7, #36]	; 0x24
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	330c      	adds	r3, #12
 8007968:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800796a:	623a      	str	r2, [r7, #32]
 800796c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800796e:	69f9      	ldr	r1, [r7, #28]
 8007970:	6a3a      	ldr	r2, [r7, #32]
 8007972:	e841 2300 	strex	r3, r2, [r1]
 8007976:	61bb      	str	r3, [r7, #24]
   return(result);
 8007978:	69bb      	ldr	r3, [r7, #24]
 800797a:	2b00      	cmp	r3, #0
 800797c:	d1e5      	bne.n	800794a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	f003 0310 	and.w	r3, r3, #16
 8007988:	2b10      	cmp	r3, #16
 800798a:	d10a      	bne.n	80079a2 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800798c:	2300      	movs	r3, #0
 800798e:	60fb      	str	r3, [r7, #12]
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	60fb      	str	r3, [r7, #12]
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	685b      	ldr	r3, [r3, #4]
 800799e:	60fb      	str	r3, [r7, #12]
 80079a0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80079a6:	4619      	mov	r1, r3
 80079a8:	6878      	ldr	r0, [r7, #4]
 80079aa:	f7ff fc4d 	bl	8007248 <HAL_UARTEx_RxEventCallback>
 80079ae:	e002      	b.n	80079b6 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80079b0:	6878      	ldr	r0, [r7, #4]
 80079b2:	f7fa fd51 	bl	8002458 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80079b6:	2300      	movs	r3, #0
 80079b8:	e002      	b.n	80079c0 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80079ba:	2300      	movs	r3, #0
 80079bc:	e000      	b.n	80079c0 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80079be:	2302      	movs	r3, #2
  }
}
 80079c0:	4618      	mov	r0, r3
 80079c2:	3730      	adds	r7, #48	; 0x30
 80079c4:	46bd      	mov	sp, r7
 80079c6:	bd80      	pop	{r7, pc}

080079c8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80079c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80079cc:	b0c0      	sub	sp, #256	; 0x100
 80079ce:	af00      	add	r7, sp, #0
 80079d0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80079d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	691b      	ldr	r3, [r3, #16]
 80079dc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80079e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80079e4:	68d9      	ldr	r1, [r3, #12]
 80079e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80079ea:	681a      	ldr	r2, [r3, #0]
 80079ec:	ea40 0301 	orr.w	r3, r0, r1
 80079f0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80079f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80079f6:	689a      	ldr	r2, [r3, #8]
 80079f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80079fc:	691b      	ldr	r3, [r3, #16]
 80079fe:	431a      	orrs	r2, r3
 8007a00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a04:	695b      	ldr	r3, [r3, #20]
 8007a06:	431a      	orrs	r2, r3
 8007a08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a0c:	69db      	ldr	r3, [r3, #28]
 8007a0e:	4313      	orrs	r3, r2
 8007a10:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007a14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	68db      	ldr	r3, [r3, #12]
 8007a1c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007a20:	f021 010c 	bic.w	r1, r1, #12
 8007a24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a28:	681a      	ldr	r2, [r3, #0]
 8007a2a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007a2e:	430b      	orrs	r3, r1
 8007a30:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007a32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	695b      	ldr	r3, [r3, #20]
 8007a3a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007a3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a42:	6999      	ldr	r1, [r3, #24]
 8007a44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a48:	681a      	ldr	r2, [r3, #0]
 8007a4a:	ea40 0301 	orr.w	r3, r0, r1
 8007a4e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007a50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a54:	681a      	ldr	r2, [r3, #0]
 8007a56:	4b8f      	ldr	r3, [pc, #572]	; (8007c94 <UART_SetConfig+0x2cc>)
 8007a58:	429a      	cmp	r2, r3
 8007a5a:	d005      	beq.n	8007a68 <UART_SetConfig+0xa0>
 8007a5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a60:	681a      	ldr	r2, [r3, #0]
 8007a62:	4b8d      	ldr	r3, [pc, #564]	; (8007c98 <UART_SetConfig+0x2d0>)
 8007a64:	429a      	cmp	r2, r3
 8007a66:	d104      	bne.n	8007a72 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007a68:	f7fe f83c 	bl	8005ae4 <HAL_RCC_GetPCLK2Freq>
 8007a6c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8007a70:	e003      	b.n	8007a7a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007a72:	f7fe f823 	bl	8005abc <HAL_RCC_GetPCLK1Freq>
 8007a76:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007a7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a7e:	69db      	ldr	r3, [r3, #28]
 8007a80:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007a84:	f040 810c 	bne.w	8007ca0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007a88:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007a8c:	2200      	movs	r2, #0
 8007a8e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007a92:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8007a96:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8007a9a:	4622      	mov	r2, r4
 8007a9c:	462b      	mov	r3, r5
 8007a9e:	1891      	adds	r1, r2, r2
 8007aa0:	65b9      	str	r1, [r7, #88]	; 0x58
 8007aa2:	415b      	adcs	r3, r3
 8007aa4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007aa6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007aaa:	4621      	mov	r1, r4
 8007aac:	eb12 0801 	adds.w	r8, r2, r1
 8007ab0:	4629      	mov	r1, r5
 8007ab2:	eb43 0901 	adc.w	r9, r3, r1
 8007ab6:	f04f 0200 	mov.w	r2, #0
 8007aba:	f04f 0300 	mov.w	r3, #0
 8007abe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007ac2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007ac6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007aca:	4690      	mov	r8, r2
 8007acc:	4699      	mov	r9, r3
 8007ace:	4623      	mov	r3, r4
 8007ad0:	eb18 0303 	adds.w	r3, r8, r3
 8007ad4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007ad8:	462b      	mov	r3, r5
 8007ada:	eb49 0303 	adc.w	r3, r9, r3
 8007ade:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007ae2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ae6:	685b      	ldr	r3, [r3, #4]
 8007ae8:	2200      	movs	r2, #0
 8007aea:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007aee:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8007af2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8007af6:	460b      	mov	r3, r1
 8007af8:	18db      	adds	r3, r3, r3
 8007afa:	653b      	str	r3, [r7, #80]	; 0x50
 8007afc:	4613      	mov	r3, r2
 8007afe:	eb42 0303 	adc.w	r3, r2, r3
 8007b02:	657b      	str	r3, [r7, #84]	; 0x54
 8007b04:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007b08:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007b0c:	f7f8 fea6 	bl	800085c <__aeabi_uldivmod>
 8007b10:	4602      	mov	r2, r0
 8007b12:	460b      	mov	r3, r1
 8007b14:	4b61      	ldr	r3, [pc, #388]	; (8007c9c <UART_SetConfig+0x2d4>)
 8007b16:	fba3 2302 	umull	r2, r3, r3, r2
 8007b1a:	095b      	lsrs	r3, r3, #5
 8007b1c:	011c      	lsls	r4, r3, #4
 8007b1e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007b22:	2200      	movs	r2, #0
 8007b24:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007b28:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8007b2c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8007b30:	4642      	mov	r2, r8
 8007b32:	464b      	mov	r3, r9
 8007b34:	1891      	adds	r1, r2, r2
 8007b36:	64b9      	str	r1, [r7, #72]	; 0x48
 8007b38:	415b      	adcs	r3, r3
 8007b3a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007b3c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007b40:	4641      	mov	r1, r8
 8007b42:	eb12 0a01 	adds.w	sl, r2, r1
 8007b46:	4649      	mov	r1, r9
 8007b48:	eb43 0b01 	adc.w	fp, r3, r1
 8007b4c:	f04f 0200 	mov.w	r2, #0
 8007b50:	f04f 0300 	mov.w	r3, #0
 8007b54:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007b58:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007b5c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007b60:	4692      	mov	sl, r2
 8007b62:	469b      	mov	fp, r3
 8007b64:	4643      	mov	r3, r8
 8007b66:	eb1a 0303 	adds.w	r3, sl, r3
 8007b6a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007b6e:	464b      	mov	r3, r9
 8007b70:	eb4b 0303 	adc.w	r3, fp, r3
 8007b74:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007b78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b7c:	685b      	ldr	r3, [r3, #4]
 8007b7e:	2200      	movs	r2, #0
 8007b80:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007b84:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8007b88:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8007b8c:	460b      	mov	r3, r1
 8007b8e:	18db      	adds	r3, r3, r3
 8007b90:	643b      	str	r3, [r7, #64]	; 0x40
 8007b92:	4613      	mov	r3, r2
 8007b94:	eb42 0303 	adc.w	r3, r2, r3
 8007b98:	647b      	str	r3, [r7, #68]	; 0x44
 8007b9a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007b9e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8007ba2:	f7f8 fe5b 	bl	800085c <__aeabi_uldivmod>
 8007ba6:	4602      	mov	r2, r0
 8007ba8:	460b      	mov	r3, r1
 8007baa:	4611      	mov	r1, r2
 8007bac:	4b3b      	ldr	r3, [pc, #236]	; (8007c9c <UART_SetConfig+0x2d4>)
 8007bae:	fba3 2301 	umull	r2, r3, r3, r1
 8007bb2:	095b      	lsrs	r3, r3, #5
 8007bb4:	2264      	movs	r2, #100	; 0x64
 8007bb6:	fb02 f303 	mul.w	r3, r2, r3
 8007bba:	1acb      	subs	r3, r1, r3
 8007bbc:	00db      	lsls	r3, r3, #3
 8007bbe:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8007bc2:	4b36      	ldr	r3, [pc, #216]	; (8007c9c <UART_SetConfig+0x2d4>)
 8007bc4:	fba3 2302 	umull	r2, r3, r3, r2
 8007bc8:	095b      	lsrs	r3, r3, #5
 8007bca:	005b      	lsls	r3, r3, #1
 8007bcc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007bd0:	441c      	add	r4, r3
 8007bd2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007bd6:	2200      	movs	r2, #0
 8007bd8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007bdc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8007be0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8007be4:	4642      	mov	r2, r8
 8007be6:	464b      	mov	r3, r9
 8007be8:	1891      	adds	r1, r2, r2
 8007bea:	63b9      	str	r1, [r7, #56]	; 0x38
 8007bec:	415b      	adcs	r3, r3
 8007bee:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007bf0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007bf4:	4641      	mov	r1, r8
 8007bf6:	1851      	adds	r1, r2, r1
 8007bf8:	6339      	str	r1, [r7, #48]	; 0x30
 8007bfa:	4649      	mov	r1, r9
 8007bfc:	414b      	adcs	r3, r1
 8007bfe:	637b      	str	r3, [r7, #52]	; 0x34
 8007c00:	f04f 0200 	mov.w	r2, #0
 8007c04:	f04f 0300 	mov.w	r3, #0
 8007c08:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8007c0c:	4659      	mov	r1, fp
 8007c0e:	00cb      	lsls	r3, r1, #3
 8007c10:	4651      	mov	r1, sl
 8007c12:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007c16:	4651      	mov	r1, sl
 8007c18:	00ca      	lsls	r2, r1, #3
 8007c1a:	4610      	mov	r0, r2
 8007c1c:	4619      	mov	r1, r3
 8007c1e:	4603      	mov	r3, r0
 8007c20:	4642      	mov	r2, r8
 8007c22:	189b      	adds	r3, r3, r2
 8007c24:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007c28:	464b      	mov	r3, r9
 8007c2a:	460a      	mov	r2, r1
 8007c2c:	eb42 0303 	adc.w	r3, r2, r3
 8007c30:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007c34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c38:	685b      	ldr	r3, [r3, #4]
 8007c3a:	2200      	movs	r2, #0
 8007c3c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007c40:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8007c44:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8007c48:	460b      	mov	r3, r1
 8007c4a:	18db      	adds	r3, r3, r3
 8007c4c:	62bb      	str	r3, [r7, #40]	; 0x28
 8007c4e:	4613      	mov	r3, r2
 8007c50:	eb42 0303 	adc.w	r3, r2, r3
 8007c54:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007c56:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007c5a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8007c5e:	f7f8 fdfd 	bl	800085c <__aeabi_uldivmod>
 8007c62:	4602      	mov	r2, r0
 8007c64:	460b      	mov	r3, r1
 8007c66:	4b0d      	ldr	r3, [pc, #52]	; (8007c9c <UART_SetConfig+0x2d4>)
 8007c68:	fba3 1302 	umull	r1, r3, r3, r2
 8007c6c:	095b      	lsrs	r3, r3, #5
 8007c6e:	2164      	movs	r1, #100	; 0x64
 8007c70:	fb01 f303 	mul.w	r3, r1, r3
 8007c74:	1ad3      	subs	r3, r2, r3
 8007c76:	00db      	lsls	r3, r3, #3
 8007c78:	3332      	adds	r3, #50	; 0x32
 8007c7a:	4a08      	ldr	r2, [pc, #32]	; (8007c9c <UART_SetConfig+0x2d4>)
 8007c7c:	fba2 2303 	umull	r2, r3, r2, r3
 8007c80:	095b      	lsrs	r3, r3, #5
 8007c82:	f003 0207 	and.w	r2, r3, #7
 8007c86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	4422      	add	r2, r4
 8007c8e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007c90:	e105      	b.n	8007e9e <UART_SetConfig+0x4d6>
 8007c92:	bf00      	nop
 8007c94:	40011000 	.word	0x40011000
 8007c98:	40011400 	.word	0x40011400
 8007c9c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007ca0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007ca4:	2200      	movs	r2, #0
 8007ca6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007caa:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8007cae:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8007cb2:	4642      	mov	r2, r8
 8007cb4:	464b      	mov	r3, r9
 8007cb6:	1891      	adds	r1, r2, r2
 8007cb8:	6239      	str	r1, [r7, #32]
 8007cba:	415b      	adcs	r3, r3
 8007cbc:	627b      	str	r3, [r7, #36]	; 0x24
 8007cbe:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007cc2:	4641      	mov	r1, r8
 8007cc4:	1854      	adds	r4, r2, r1
 8007cc6:	4649      	mov	r1, r9
 8007cc8:	eb43 0501 	adc.w	r5, r3, r1
 8007ccc:	f04f 0200 	mov.w	r2, #0
 8007cd0:	f04f 0300 	mov.w	r3, #0
 8007cd4:	00eb      	lsls	r3, r5, #3
 8007cd6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007cda:	00e2      	lsls	r2, r4, #3
 8007cdc:	4614      	mov	r4, r2
 8007cde:	461d      	mov	r5, r3
 8007ce0:	4643      	mov	r3, r8
 8007ce2:	18e3      	adds	r3, r4, r3
 8007ce4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007ce8:	464b      	mov	r3, r9
 8007cea:	eb45 0303 	adc.w	r3, r5, r3
 8007cee:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007cf2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007cf6:	685b      	ldr	r3, [r3, #4]
 8007cf8:	2200      	movs	r2, #0
 8007cfa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007cfe:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007d02:	f04f 0200 	mov.w	r2, #0
 8007d06:	f04f 0300 	mov.w	r3, #0
 8007d0a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8007d0e:	4629      	mov	r1, r5
 8007d10:	008b      	lsls	r3, r1, #2
 8007d12:	4621      	mov	r1, r4
 8007d14:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007d18:	4621      	mov	r1, r4
 8007d1a:	008a      	lsls	r2, r1, #2
 8007d1c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8007d20:	f7f8 fd9c 	bl	800085c <__aeabi_uldivmod>
 8007d24:	4602      	mov	r2, r0
 8007d26:	460b      	mov	r3, r1
 8007d28:	4b60      	ldr	r3, [pc, #384]	; (8007eac <UART_SetConfig+0x4e4>)
 8007d2a:	fba3 2302 	umull	r2, r3, r3, r2
 8007d2e:	095b      	lsrs	r3, r3, #5
 8007d30:	011c      	lsls	r4, r3, #4
 8007d32:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007d36:	2200      	movs	r2, #0
 8007d38:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007d3c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007d40:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8007d44:	4642      	mov	r2, r8
 8007d46:	464b      	mov	r3, r9
 8007d48:	1891      	adds	r1, r2, r2
 8007d4a:	61b9      	str	r1, [r7, #24]
 8007d4c:	415b      	adcs	r3, r3
 8007d4e:	61fb      	str	r3, [r7, #28]
 8007d50:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007d54:	4641      	mov	r1, r8
 8007d56:	1851      	adds	r1, r2, r1
 8007d58:	6139      	str	r1, [r7, #16]
 8007d5a:	4649      	mov	r1, r9
 8007d5c:	414b      	adcs	r3, r1
 8007d5e:	617b      	str	r3, [r7, #20]
 8007d60:	f04f 0200 	mov.w	r2, #0
 8007d64:	f04f 0300 	mov.w	r3, #0
 8007d68:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007d6c:	4659      	mov	r1, fp
 8007d6e:	00cb      	lsls	r3, r1, #3
 8007d70:	4651      	mov	r1, sl
 8007d72:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007d76:	4651      	mov	r1, sl
 8007d78:	00ca      	lsls	r2, r1, #3
 8007d7a:	4610      	mov	r0, r2
 8007d7c:	4619      	mov	r1, r3
 8007d7e:	4603      	mov	r3, r0
 8007d80:	4642      	mov	r2, r8
 8007d82:	189b      	adds	r3, r3, r2
 8007d84:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007d88:	464b      	mov	r3, r9
 8007d8a:	460a      	mov	r2, r1
 8007d8c:	eb42 0303 	adc.w	r3, r2, r3
 8007d90:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007d94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d98:	685b      	ldr	r3, [r3, #4]
 8007d9a:	2200      	movs	r2, #0
 8007d9c:	67bb      	str	r3, [r7, #120]	; 0x78
 8007d9e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8007da0:	f04f 0200 	mov.w	r2, #0
 8007da4:	f04f 0300 	mov.w	r3, #0
 8007da8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8007dac:	4649      	mov	r1, r9
 8007dae:	008b      	lsls	r3, r1, #2
 8007db0:	4641      	mov	r1, r8
 8007db2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007db6:	4641      	mov	r1, r8
 8007db8:	008a      	lsls	r2, r1, #2
 8007dba:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8007dbe:	f7f8 fd4d 	bl	800085c <__aeabi_uldivmod>
 8007dc2:	4602      	mov	r2, r0
 8007dc4:	460b      	mov	r3, r1
 8007dc6:	4b39      	ldr	r3, [pc, #228]	; (8007eac <UART_SetConfig+0x4e4>)
 8007dc8:	fba3 1302 	umull	r1, r3, r3, r2
 8007dcc:	095b      	lsrs	r3, r3, #5
 8007dce:	2164      	movs	r1, #100	; 0x64
 8007dd0:	fb01 f303 	mul.w	r3, r1, r3
 8007dd4:	1ad3      	subs	r3, r2, r3
 8007dd6:	011b      	lsls	r3, r3, #4
 8007dd8:	3332      	adds	r3, #50	; 0x32
 8007dda:	4a34      	ldr	r2, [pc, #208]	; (8007eac <UART_SetConfig+0x4e4>)
 8007ddc:	fba2 2303 	umull	r2, r3, r2, r3
 8007de0:	095b      	lsrs	r3, r3, #5
 8007de2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007de6:	441c      	add	r4, r3
 8007de8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007dec:	2200      	movs	r2, #0
 8007dee:	673b      	str	r3, [r7, #112]	; 0x70
 8007df0:	677a      	str	r2, [r7, #116]	; 0x74
 8007df2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8007df6:	4642      	mov	r2, r8
 8007df8:	464b      	mov	r3, r9
 8007dfa:	1891      	adds	r1, r2, r2
 8007dfc:	60b9      	str	r1, [r7, #8]
 8007dfe:	415b      	adcs	r3, r3
 8007e00:	60fb      	str	r3, [r7, #12]
 8007e02:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007e06:	4641      	mov	r1, r8
 8007e08:	1851      	adds	r1, r2, r1
 8007e0a:	6039      	str	r1, [r7, #0]
 8007e0c:	4649      	mov	r1, r9
 8007e0e:	414b      	adcs	r3, r1
 8007e10:	607b      	str	r3, [r7, #4]
 8007e12:	f04f 0200 	mov.w	r2, #0
 8007e16:	f04f 0300 	mov.w	r3, #0
 8007e1a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007e1e:	4659      	mov	r1, fp
 8007e20:	00cb      	lsls	r3, r1, #3
 8007e22:	4651      	mov	r1, sl
 8007e24:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007e28:	4651      	mov	r1, sl
 8007e2a:	00ca      	lsls	r2, r1, #3
 8007e2c:	4610      	mov	r0, r2
 8007e2e:	4619      	mov	r1, r3
 8007e30:	4603      	mov	r3, r0
 8007e32:	4642      	mov	r2, r8
 8007e34:	189b      	adds	r3, r3, r2
 8007e36:	66bb      	str	r3, [r7, #104]	; 0x68
 8007e38:	464b      	mov	r3, r9
 8007e3a:	460a      	mov	r2, r1
 8007e3c:	eb42 0303 	adc.w	r3, r2, r3
 8007e40:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007e42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e46:	685b      	ldr	r3, [r3, #4]
 8007e48:	2200      	movs	r2, #0
 8007e4a:	663b      	str	r3, [r7, #96]	; 0x60
 8007e4c:	667a      	str	r2, [r7, #100]	; 0x64
 8007e4e:	f04f 0200 	mov.w	r2, #0
 8007e52:	f04f 0300 	mov.w	r3, #0
 8007e56:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8007e5a:	4649      	mov	r1, r9
 8007e5c:	008b      	lsls	r3, r1, #2
 8007e5e:	4641      	mov	r1, r8
 8007e60:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007e64:	4641      	mov	r1, r8
 8007e66:	008a      	lsls	r2, r1, #2
 8007e68:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8007e6c:	f7f8 fcf6 	bl	800085c <__aeabi_uldivmod>
 8007e70:	4602      	mov	r2, r0
 8007e72:	460b      	mov	r3, r1
 8007e74:	4b0d      	ldr	r3, [pc, #52]	; (8007eac <UART_SetConfig+0x4e4>)
 8007e76:	fba3 1302 	umull	r1, r3, r3, r2
 8007e7a:	095b      	lsrs	r3, r3, #5
 8007e7c:	2164      	movs	r1, #100	; 0x64
 8007e7e:	fb01 f303 	mul.w	r3, r1, r3
 8007e82:	1ad3      	subs	r3, r2, r3
 8007e84:	011b      	lsls	r3, r3, #4
 8007e86:	3332      	adds	r3, #50	; 0x32
 8007e88:	4a08      	ldr	r2, [pc, #32]	; (8007eac <UART_SetConfig+0x4e4>)
 8007e8a:	fba2 2303 	umull	r2, r3, r2, r3
 8007e8e:	095b      	lsrs	r3, r3, #5
 8007e90:	f003 020f 	and.w	r2, r3, #15
 8007e94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	4422      	add	r2, r4
 8007e9c:	609a      	str	r2, [r3, #8]
}
 8007e9e:	bf00      	nop
 8007ea0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8007ea4:	46bd      	mov	sp, r7
 8007ea6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007eaa:	bf00      	nop
 8007eac:	51eb851f 	.word	0x51eb851f

08007eb0 <__NVIC_SetPriority>:
{
 8007eb0:	b480      	push	{r7}
 8007eb2:	b083      	sub	sp, #12
 8007eb4:	af00      	add	r7, sp, #0
 8007eb6:	4603      	mov	r3, r0
 8007eb8:	6039      	str	r1, [r7, #0]
 8007eba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007ebc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	db0a      	blt.n	8007eda <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007ec4:	683b      	ldr	r3, [r7, #0]
 8007ec6:	b2da      	uxtb	r2, r3
 8007ec8:	490c      	ldr	r1, [pc, #48]	; (8007efc <__NVIC_SetPriority+0x4c>)
 8007eca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007ece:	0112      	lsls	r2, r2, #4
 8007ed0:	b2d2      	uxtb	r2, r2
 8007ed2:	440b      	add	r3, r1
 8007ed4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8007ed8:	e00a      	b.n	8007ef0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007eda:	683b      	ldr	r3, [r7, #0]
 8007edc:	b2da      	uxtb	r2, r3
 8007ede:	4908      	ldr	r1, [pc, #32]	; (8007f00 <__NVIC_SetPriority+0x50>)
 8007ee0:	79fb      	ldrb	r3, [r7, #7]
 8007ee2:	f003 030f 	and.w	r3, r3, #15
 8007ee6:	3b04      	subs	r3, #4
 8007ee8:	0112      	lsls	r2, r2, #4
 8007eea:	b2d2      	uxtb	r2, r2
 8007eec:	440b      	add	r3, r1
 8007eee:	761a      	strb	r2, [r3, #24]
}
 8007ef0:	bf00      	nop
 8007ef2:	370c      	adds	r7, #12
 8007ef4:	46bd      	mov	sp, r7
 8007ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007efa:	4770      	bx	lr
 8007efc:	e000e100 	.word	0xe000e100
 8007f00:	e000ed00 	.word	0xe000ed00

08007f04 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8007f04:	b580      	push	{r7, lr}
 8007f06:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8007f08:	4b05      	ldr	r3, [pc, #20]	; (8007f20 <SysTick_Handler+0x1c>)
 8007f0a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8007f0c:	f001 fd28 	bl	8009960 <xTaskGetSchedulerState>
 8007f10:	4603      	mov	r3, r0
 8007f12:	2b01      	cmp	r3, #1
 8007f14:	d001      	beq.n	8007f1a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8007f16:	f002 fb0f 	bl	800a538 <xPortSysTickHandler>
  }
}
 8007f1a:	bf00      	nop
 8007f1c:	bd80      	pop	{r7, pc}
 8007f1e:	bf00      	nop
 8007f20:	e000e010 	.word	0xe000e010

08007f24 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8007f24:	b580      	push	{r7, lr}
 8007f26:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8007f28:	2100      	movs	r1, #0
 8007f2a:	f06f 0004 	mvn.w	r0, #4
 8007f2e:	f7ff ffbf 	bl	8007eb0 <__NVIC_SetPriority>
#endif
}
 8007f32:	bf00      	nop
 8007f34:	bd80      	pop	{r7, pc}
	...

08007f38 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8007f38:	b480      	push	{r7}
 8007f3a:	b083      	sub	sp, #12
 8007f3c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007f3e:	f3ef 8305 	mrs	r3, IPSR
 8007f42:	603b      	str	r3, [r7, #0]
  return(result);
 8007f44:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d003      	beq.n	8007f52 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8007f4a:	f06f 0305 	mvn.w	r3, #5
 8007f4e:	607b      	str	r3, [r7, #4]
 8007f50:	e00c      	b.n	8007f6c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8007f52:	4b0a      	ldr	r3, [pc, #40]	; (8007f7c <osKernelInitialize+0x44>)
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d105      	bne.n	8007f66 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8007f5a:	4b08      	ldr	r3, [pc, #32]	; (8007f7c <osKernelInitialize+0x44>)
 8007f5c:	2201      	movs	r2, #1
 8007f5e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8007f60:	2300      	movs	r3, #0
 8007f62:	607b      	str	r3, [r7, #4]
 8007f64:	e002      	b.n	8007f6c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8007f66:	f04f 33ff 	mov.w	r3, #4294967295
 8007f6a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007f6c:	687b      	ldr	r3, [r7, #4]
}
 8007f6e:	4618      	mov	r0, r3
 8007f70:	370c      	adds	r7, #12
 8007f72:	46bd      	mov	sp, r7
 8007f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f78:	4770      	bx	lr
 8007f7a:	bf00      	nop
 8007f7c:	20000ccc 	.word	0x20000ccc

08007f80 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8007f80:	b580      	push	{r7, lr}
 8007f82:	b082      	sub	sp, #8
 8007f84:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007f86:	f3ef 8305 	mrs	r3, IPSR
 8007f8a:	603b      	str	r3, [r7, #0]
  return(result);
 8007f8c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d003      	beq.n	8007f9a <osKernelStart+0x1a>
    stat = osErrorISR;
 8007f92:	f06f 0305 	mvn.w	r3, #5
 8007f96:	607b      	str	r3, [r7, #4]
 8007f98:	e010      	b.n	8007fbc <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8007f9a:	4b0b      	ldr	r3, [pc, #44]	; (8007fc8 <osKernelStart+0x48>)
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	2b01      	cmp	r3, #1
 8007fa0:	d109      	bne.n	8007fb6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8007fa2:	f7ff ffbf 	bl	8007f24 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8007fa6:	4b08      	ldr	r3, [pc, #32]	; (8007fc8 <osKernelStart+0x48>)
 8007fa8:	2202      	movs	r2, #2
 8007faa:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8007fac:	f001 f87c 	bl	80090a8 <vTaskStartScheduler>
      stat = osOK;
 8007fb0:	2300      	movs	r3, #0
 8007fb2:	607b      	str	r3, [r7, #4]
 8007fb4:	e002      	b.n	8007fbc <osKernelStart+0x3c>
    } else {
      stat = osError;
 8007fb6:	f04f 33ff 	mov.w	r3, #4294967295
 8007fba:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007fbc:	687b      	ldr	r3, [r7, #4]
}
 8007fbe:	4618      	mov	r0, r3
 8007fc0:	3708      	adds	r7, #8
 8007fc2:	46bd      	mov	sp, r7
 8007fc4:	bd80      	pop	{r7, pc}
 8007fc6:	bf00      	nop
 8007fc8:	20000ccc 	.word	0x20000ccc

08007fcc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8007fcc:	b580      	push	{r7, lr}
 8007fce:	b08e      	sub	sp, #56	; 0x38
 8007fd0:	af04      	add	r7, sp, #16
 8007fd2:	60f8      	str	r0, [r7, #12]
 8007fd4:	60b9      	str	r1, [r7, #8]
 8007fd6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8007fd8:	2300      	movs	r3, #0
 8007fda:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007fdc:	f3ef 8305 	mrs	r3, IPSR
 8007fe0:	617b      	str	r3, [r7, #20]
  return(result);
 8007fe2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d17e      	bne.n	80080e6 <osThreadNew+0x11a>
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d07b      	beq.n	80080e6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8007fee:	2380      	movs	r3, #128	; 0x80
 8007ff0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8007ff2:	2318      	movs	r3, #24
 8007ff4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8007ff6:	2300      	movs	r3, #0
 8007ff8:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8007ffa:	f04f 33ff 	mov.w	r3, #4294967295
 8007ffe:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	2b00      	cmp	r3, #0
 8008004:	d045      	beq.n	8008092 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	2b00      	cmp	r3, #0
 800800c:	d002      	beq.n	8008014 <osThreadNew+0x48>
        name = attr->name;
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	699b      	ldr	r3, [r3, #24]
 8008018:	2b00      	cmp	r3, #0
 800801a:	d002      	beq.n	8008022 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	699b      	ldr	r3, [r3, #24]
 8008020:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8008022:	69fb      	ldr	r3, [r7, #28]
 8008024:	2b00      	cmp	r3, #0
 8008026:	d008      	beq.n	800803a <osThreadNew+0x6e>
 8008028:	69fb      	ldr	r3, [r7, #28]
 800802a:	2b38      	cmp	r3, #56	; 0x38
 800802c:	d805      	bhi.n	800803a <osThreadNew+0x6e>
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	685b      	ldr	r3, [r3, #4]
 8008032:	f003 0301 	and.w	r3, r3, #1
 8008036:	2b00      	cmp	r3, #0
 8008038:	d001      	beq.n	800803e <osThreadNew+0x72>
        return (NULL);
 800803a:	2300      	movs	r3, #0
 800803c:	e054      	b.n	80080e8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	695b      	ldr	r3, [r3, #20]
 8008042:	2b00      	cmp	r3, #0
 8008044:	d003      	beq.n	800804e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	695b      	ldr	r3, [r3, #20]
 800804a:	089b      	lsrs	r3, r3, #2
 800804c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	689b      	ldr	r3, [r3, #8]
 8008052:	2b00      	cmp	r3, #0
 8008054:	d00e      	beq.n	8008074 <osThreadNew+0xa8>
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	68db      	ldr	r3, [r3, #12]
 800805a:	2bbb      	cmp	r3, #187	; 0xbb
 800805c:	d90a      	bls.n	8008074 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008062:	2b00      	cmp	r3, #0
 8008064:	d006      	beq.n	8008074 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	695b      	ldr	r3, [r3, #20]
 800806a:	2b00      	cmp	r3, #0
 800806c:	d002      	beq.n	8008074 <osThreadNew+0xa8>
        mem = 1;
 800806e:	2301      	movs	r3, #1
 8008070:	61bb      	str	r3, [r7, #24]
 8008072:	e010      	b.n	8008096 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	689b      	ldr	r3, [r3, #8]
 8008078:	2b00      	cmp	r3, #0
 800807a:	d10c      	bne.n	8008096 <osThreadNew+0xca>
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	68db      	ldr	r3, [r3, #12]
 8008080:	2b00      	cmp	r3, #0
 8008082:	d108      	bne.n	8008096 <osThreadNew+0xca>
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	691b      	ldr	r3, [r3, #16]
 8008088:	2b00      	cmp	r3, #0
 800808a:	d104      	bne.n	8008096 <osThreadNew+0xca>
          mem = 0;
 800808c:	2300      	movs	r3, #0
 800808e:	61bb      	str	r3, [r7, #24]
 8008090:	e001      	b.n	8008096 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8008092:	2300      	movs	r3, #0
 8008094:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8008096:	69bb      	ldr	r3, [r7, #24]
 8008098:	2b01      	cmp	r3, #1
 800809a:	d110      	bne.n	80080be <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80080a0:	687a      	ldr	r2, [r7, #4]
 80080a2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80080a4:	9202      	str	r2, [sp, #8]
 80080a6:	9301      	str	r3, [sp, #4]
 80080a8:	69fb      	ldr	r3, [r7, #28]
 80080aa:	9300      	str	r3, [sp, #0]
 80080ac:	68bb      	ldr	r3, [r7, #8]
 80080ae:	6a3a      	ldr	r2, [r7, #32]
 80080b0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80080b2:	68f8      	ldr	r0, [r7, #12]
 80080b4:	f000 fe0c 	bl	8008cd0 <xTaskCreateStatic>
 80080b8:	4603      	mov	r3, r0
 80080ba:	613b      	str	r3, [r7, #16]
 80080bc:	e013      	b.n	80080e6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80080be:	69bb      	ldr	r3, [r7, #24]
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d110      	bne.n	80080e6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80080c4:	6a3b      	ldr	r3, [r7, #32]
 80080c6:	b29a      	uxth	r2, r3
 80080c8:	f107 0310 	add.w	r3, r7, #16
 80080cc:	9301      	str	r3, [sp, #4]
 80080ce:	69fb      	ldr	r3, [r7, #28]
 80080d0:	9300      	str	r3, [sp, #0]
 80080d2:	68bb      	ldr	r3, [r7, #8]
 80080d4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80080d6:	68f8      	ldr	r0, [r7, #12]
 80080d8:	f000 fe57 	bl	8008d8a <xTaskCreate>
 80080dc:	4603      	mov	r3, r0
 80080de:	2b01      	cmp	r3, #1
 80080e0:	d001      	beq.n	80080e6 <osThreadNew+0x11a>
            hTask = NULL;
 80080e2:	2300      	movs	r3, #0
 80080e4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80080e6:	693b      	ldr	r3, [r7, #16]
}
 80080e8:	4618      	mov	r0, r3
 80080ea:	3728      	adds	r7, #40	; 0x28
 80080ec:	46bd      	mov	sp, r7
 80080ee:	bd80      	pop	{r7, pc}

080080f0 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80080f0:	b580      	push	{r7, lr}
 80080f2:	b084      	sub	sp, #16
 80080f4:	af00      	add	r7, sp, #0
 80080f6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80080f8:	f3ef 8305 	mrs	r3, IPSR
 80080fc:	60bb      	str	r3, [r7, #8]
  return(result);
 80080fe:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008100:	2b00      	cmp	r3, #0
 8008102:	d003      	beq.n	800810c <osDelay+0x1c>
    stat = osErrorISR;
 8008104:	f06f 0305 	mvn.w	r3, #5
 8008108:	60fb      	str	r3, [r7, #12]
 800810a:	e007      	b.n	800811c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800810c:	2300      	movs	r3, #0
 800810e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	2b00      	cmp	r3, #0
 8008114:	d002      	beq.n	800811c <osDelay+0x2c>
      vTaskDelay(ticks);
 8008116:	6878      	ldr	r0, [r7, #4]
 8008118:	f000 ff92 	bl	8009040 <vTaskDelay>
    }
  }

  return (stat);
 800811c:	68fb      	ldr	r3, [r7, #12]
}
 800811e:	4618      	mov	r0, r3
 8008120:	3710      	adds	r7, #16
 8008122:	46bd      	mov	sp, r7
 8008124:	bd80      	pop	{r7, pc}
	...

08008128 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8008128:	b480      	push	{r7}
 800812a:	b085      	sub	sp, #20
 800812c:	af00      	add	r7, sp, #0
 800812e:	60f8      	str	r0, [r7, #12]
 8008130:	60b9      	str	r1, [r7, #8]
 8008132:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	4a07      	ldr	r2, [pc, #28]	; (8008154 <vApplicationGetIdleTaskMemory+0x2c>)
 8008138:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800813a:	68bb      	ldr	r3, [r7, #8]
 800813c:	4a06      	ldr	r2, [pc, #24]	; (8008158 <vApplicationGetIdleTaskMemory+0x30>)
 800813e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	2280      	movs	r2, #128	; 0x80
 8008144:	601a      	str	r2, [r3, #0]
}
 8008146:	bf00      	nop
 8008148:	3714      	adds	r7, #20
 800814a:	46bd      	mov	sp, r7
 800814c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008150:	4770      	bx	lr
 8008152:	bf00      	nop
 8008154:	20000cd0 	.word	0x20000cd0
 8008158:	20000d8c 	.word	0x20000d8c

0800815c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800815c:	b480      	push	{r7}
 800815e:	b085      	sub	sp, #20
 8008160:	af00      	add	r7, sp, #0
 8008162:	60f8      	str	r0, [r7, #12]
 8008164:	60b9      	str	r1, [r7, #8]
 8008166:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	4a07      	ldr	r2, [pc, #28]	; (8008188 <vApplicationGetTimerTaskMemory+0x2c>)
 800816c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800816e:	68bb      	ldr	r3, [r7, #8]
 8008170:	4a06      	ldr	r2, [pc, #24]	; (800818c <vApplicationGetTimerTaskMemory+0x30>)
 8008172:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	f44f 7280 	mov.w	r2, #256	; 0x100
 800817a:	601a      	str	r2, [r3, #0]
}
 800817c:	bf00      	nop
 800817e:	3714      	adds	r7, #20
 8008180:	46bd      	mov	sp, r7
 8008182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008186:	4770      	bx	lr
 8008188:	20000f8c 	.word	0x20000f8c
 800818c:	20001048 	.word	0x20001048

08008190 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008190:	b480      	push	{r7}
 8008192:	b083      	sub	sp, #12
 8008194:	af00      	add	r7, sp, #0
 8008196:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	f103 0208 	add.w	r2, r3, #8
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	f04f 32ff 	mov.w	r2, #4294967295
 80081a8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	f103 0208 	add.w	r2, r3, #8
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	f103 0208 	add.w	r2, r3, #8
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	2200      	movs	r2, #0
 80081c2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80081c4:	bf00      	nop
 80081c6:	370c      	adds	r7, #12
 80081c8:	46bd      	mov	sp, r7
 80081ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ce:	4770      	bx	lr

080081d0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80081d0:	b480      	push	{r7}
 80081d2:	b083      	sub	sp, #12
 80081d4:	af00      	add	r7, sp, #0
 80081d6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	2200      	movs	r2, #0
 80081dc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80081de:	bf00      	nop
 80081e0:	370c      	adds	r7, #12
 80081e2:	46bd      	mov	sp, r7
 80081e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e8:	4770      	bx	lr

080081ea <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80081ea:	b480      	push	{r7}
 80081ec:	b085      	sub	sp, #20
 80081ee:	af00      	add	r7, sp, #0
 80081f0:	6078      	str	r0, [r7, #4]
 80081f2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	685b      	ldr	r3, [r3, #4]
 80081f8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80081fa:	683b      	ldr	r3, [r7, #0]
 80081fc:	68fa      	ldr	r2, [r7, #12]
 80081fe:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	689a      	ldr	r2, [r3, #8]
 8008204:	683b      	ldr	r3, [r7, #0]
 8008206:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	689b      	ldr	r3, [r3, #8]
 800820c:	683a      	ldr	r2, [r7, #0]
 800820e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	683a      	ldr	r2, [r7, #0]
 8008214:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008216:	683b      	ldr	r3, [r7, #0]
 8008218:	687a      	ldr	r2, [r7, #4]
 800821a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	1c5a      	adds	r2, r3, #1
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	601a      	str	r2, [r3, #0]
}
 8008226:	bf00      	nop
 8008228:	3714      	adds	r7, #20
 800822a:	46bd      	mov	sp, r7
 800822c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008230:	4770      	bx	lr

08008232 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008232:	b480      	push	{r7}
 8008234:	b085      	sub	sp, #20
 8008236:	af00      	add	r7, sp, #0
 8008238:	6078      	str	r0, [r7, #4]
 800823a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800823c:	683b      	ldr	r3, [r7, #0]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008242:	68bb      	ldr	r3, [r7, #8]
 8008244:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008248:	d103      	bne.n	8008252 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	691b      	ldr	r3, [r3, #16]
 800824e:	60fb      	str	r3, [r7, #12]
 8008250:	e00c      	b.n	800826c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	3308      	adds	r3, #8
 8008256:	60fb      	str	r3, [r7, #12]
 8008258:	e002      	b.n	8008260 <vListInsert+0x2e>
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	685b      	ldr	r3, [r3, #4]
 800825e:	60fb      	str	r3, [r7, #12]
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	685b      	ldr	r3, [r3, #4]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	68ba      	ldr	r2, [r7, #8]
 8008268:	429a      	cmp	r2, r3
 800826a:	d2f6      	bcs.n	800825a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	685a      	ldr	r2, [r3, #4]
 8008270:	683b      	ldr	r3, [r7, #0]
 8008272:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008274:	683b      	ldr	r3, [r7, #0]
 8008276:	685b      	ldr	r3, [r3, #4]
 8008278:	683a      	ldr	r2, [r7, #0]
 800827a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800827c:	683b      	ldr	r3, [r7, #0]
 800827e:	68fa      	ldr	r2, [r7, #12]
 8008280:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	683a      	ldr	r2, [r7, #0]
 8008286:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008288:	683b      	ldr	r3, [r7, #0]
 800828a:	687a      	ldr	r2, [r7, #4]
 800828c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	1c5a      	adds	r2, r3, #1
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	601a      	str	r2, [r3, #0]
}
 8008298:	bf00      	nop
 800829a:	3714      	adds	r7, #20
 800829c:	46bd      	mov	sp, r7
 800829e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082a2:	4770      	bx	lr

080082a4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80082a4:	b480      	push	{r7}
 80082a6:	b085      	sub	sp, #20
 80082a8:	af00      	add	r7, sp, #0
 80082aa:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	691b      	ldr	r3, [r3, #16]
 80082b0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	685b      	ldr	r3, [r3, #4]
 80082b6:	687a      	ldr	r2, [r7, #4]
 80082b8:	6892      	ldr	r2, [r2, #8]
 80082ba:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	689b      	ldr	r3, [r3, #8]
 80082c0:	687a      	ldr	r2, [r7, #4]
 80082c2:	6852      	ldr	r2, [r2, #4]
 80082c4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	685b      	ldr	r3, [r3, #4]
 80082ca:	687a      	ldr	r2, [r7, #4]
 80082cc:	429a      	cmp	r2, r3
 80082ce:	d103      	bne.n	80082d8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	689a      	ldr	r2, [r3, #8]
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	2200      	movs	r2, #0
 80082dc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	1e5a      	subs	r2, r3, #1
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	681b      	ldr	r3, [r3, #0]
}
 80082ec:	4618      	mov	r0, r3
 80082ee:	3714      	adds	r7, #20
 80082f0:	46bd      	mov	sp, r7
 80082f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082f6:	4770      	bx	lr

080082f8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80082f8:	b580      	push	{r7, lr}
 80082fa:	b084      	sub	sp, #16
 80082fc:	af00      	add	r7, sp, #0
 80082fe:	6078      	str	r0, [r7, #4]
 8008300:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	2b00      	cmp	r3, #0
 800830a:	d10a      	bne.n	8008322 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800830c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008310:	f383 8811 	msr	BASEPRI, r3
 8008314:	f3bf 8f6f 	isb	sy
 8008318:	f3bf 8f4f 	dsb	sy
 800831c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800831e:	bf00      	nop
 8008320:	e7fe      	b.n	8008320 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8008322:	f002 f877 	bl	800a414 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	681a      	ldr	r2, [r3, #0]
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800832e:	68f9      	ldr	r1, [r7, #12]
 8008330:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008332:	fb01 f303 	mul.w	r3, r1, r3
 8008336:	441a      	add	r2, r3
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	2200      	movs	r2, #0
 8008340:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	681a      	ldr	r2, [r3, #0]
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	681a      	ldr	r2, [r3, #0]
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008352:	3b01      	subs	r3, #1
 8008354:	68f9      	ldr	r1, [r7, #12]
 8008356:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008358:	fb01 f303 	mul.w	r3, r1, r3
 800835c:	441a      	add	r2, r3
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	22ff      	movs	r2, #255	; 0xff
 8008366:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	22ff      	movs	r2, #255	; 0xff
 800836e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8008372:	683b      	ldr	r3, [r7, #0]
 8008374:	2b00      	cmp	r3, #0
 8008376:	d114      	bne.n	80083a2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	691b      	ldr	r3, [r3, #16]
 800837c:	2b00      	cmp	r3, #0
 800837e:	d01a      	beq.n	80083b6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	3310      	adds	r3, #16
 8008384:	4618      	mov	r0, r3
 8008386:	f001 f929 	bl	80095dc <xTaskRemoveFromEventList>
 800838a:	4603      	mov	r3, r0
 800838c:	2b00      	cmp	r3, #0
 800838e:	d012      	beq.n	80083b6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008390:	4b0c      	ldr	r3, [pc, #48]	; (80083c4 <xQueueGenericReset+0xcc>)
 8008392:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008396:	601a      	str	r2, [r3, #0]
 8008398:	f3bf 8f4f 	dsb	sy
 800839c:	f3bf 8f6f 	isb	sy
 80083a0:	e009      	b.n	80083b6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	3310      	adds	r3, #16
 80083a6:	4618      	mov	r0, r3
 80083a8:	f7ff fef2 	bl	8008190 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	3324      	adds	r3, #36	; 0x24
 80083b0:	4618      	mov	r0, r3
 80083b2:	f7ff feed 	bl	8008190 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80083b6:	f002 f85d 	bl	800a474 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80083ba:	2301      	movs	r3, #1
}
 80083bc:	4618      	mov	r0, r3
 80083be:	3710      	adds	r7, #16
 80083c0:	46bd      	mov	sp, r7
 80083c2:	bd80      	pop	{r7, pc}
 80083c4:	e000ed04 	.word	0xe000ed04

080083c8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80083c8:	b580      	push	{r7, lr}
 80083ca:	b08e      	sub	sp, #56	; 0x38
 80083cc:	af02      	add	r7, sp, #8
 80083ce:	60f8      	str	r0, [r7, #12]
 80083d0:	60b9      	str	r1, [r7, #8]
 80083d2:	607a      	str	r2, [r7, #4]
 80083d4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d10a      	bne.n	80083f2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80083dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083e0:	f383 8811 	msr	BASEPRI, r3
 80083e4:	f3bf 8f6f 	isb	sy
 80083e8:	f3bf 8f4f 	dsb	sy
 80083ec:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80083ee:	bf00      	nop
 80083f0:	e7fe      	b.n	80083f0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80083f2:	683b      	ldr	r3, [r7, #0]
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d10a      	bne.n	800840e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80083f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083fc:	f383 8811 	msr	BASEPRI, r3
 8008400:	f3bf 8f6f 	isb	sy
 8008404:	f3bf 8f4f 	dsb	sy
 8008408:	627b      	str	r3, [r7, #36]	; 0x24
}
 800840a:	bf00      	nop
 800840c:	e7fe      	b.n	800840c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	2b00      	cmp	r3, #0
 8008412:	d002      	beq.n	800841a <xQueueGenericCreateStatic+0x52>
 8008414:	68bb      	ldr	r3, [r7, #8]
 8008416:	2b00      	cmp	r3, #0
 8008418:	d001      	beq.n	800841e <xQueueGenericCreateStatic+0x56>
 800841a:	2301      	movs	r3, #1
 800841c:	e000      	b.n	8008420 <xQueueGenericCreateStatic+0x58>
 800841e:	2300      	movs	r3, #0
 8008420:	2b00      	cmp	r3, #0
 8008422:	d10a      	bne.n	800843a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8008424:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008428:	f383 8811 	msr	BASEPRI, r3
 800842c:	f3bf 8f6f 	isb	sy
 8008430:	f3bf 8f4f 	dsb	sy
 8008434:	623b      	str	r3, [r7, #32]
}
 8008436:	bf00      	nop
 8008438:	e7fe      	b.n	8008438 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	2b00      	cmp	r3, #0
 800843e:	d102      	bne.n	8008446 <xQueueGenericCreateStatic+0x7e>
 8008440:	68bb      	ldr	r3, [r7, #8]
 8008442:	2b00      	cmp	r3, #0
 8008444:	d101      	bne.n	800844a <xQueueGenericCreateStatic+0x82>
 8008446:	2301      	movs	r3, #1
 8008448:	e000      	b.n	800844c <xQueueGenericCreateStatic+0x84>
 800844a:	2300      	movs	r3, #0
 800844c:	2b00      	cmp	r3, #0
 800844e:	d10a      	bne.n	8008466 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8008450:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008454:	f383 8811 	msr	BASEPRI, r3
 8008458:	f3bf 8f6f 	isb	sy
 800845c:	f3bf 8f4f 	dsb	sy
 8008460:	61fb      	str	r3, [r7, #28]
}
 8008462:	bf00      	nop
 8008464:	e7fe      	b.n	8008464 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008466:	2350      	movs	r3, #80	; 0x50
 8008468:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800846a:	697b      	ldr	r3, [r7, #20]
 800846c:	2b50      	cmp	r3, #80	; 0x50
 800846e:	d00a      	beq.n	8008486 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8008470:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008474:	f383 8811 	msr	BASEPRI, r3
 8008478:	f3bf 8f6f 	isb	sy
 800847c:	f3bf 8f4f 	dsb	sy
 8008480:	61bb      	str	r3, [r7, #24]
}
 8008482:	bf00      	nop
 8008484:	e7fe      	b.n	8008484 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8008486:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008488:	683b      	ldr	r3, [r7, #0]
 800848a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800848c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800848e:	2b00      	cmp	r3, #0
 8008490:	d00d      	beq.n	80084ae <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008492:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008494:	2201      	movs	r2, #1
 8008496:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800849a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800849e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084a0:	9300      	str	r3, [sp, #0]
 80084a2:	4613      	mov	r3, r2
 80084a4:	687a      	ldr	r2, [r7, #4]
 80084a6:	68b9      	ldr	r1, [r7, #8]
 80084a8:	68f8      	ldr	r0, [r7, #12]
 80084aa:	f000 f805 	bl	80084b8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80084ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80084b0:	4618      	mov	r0, r3
 80084b2:	3730      	adds	r7, #48	; 0x30
 80084b4:	46bd      	mov	sp, r7
 80084b6:	bd80      	pop	{r7, pc}

080084b8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80084b8:	b580      	push	{r7, lr}
 80084ba:	b084      	sub	sp, #16
 80084bc:	af00      	add	r7, sp, #0
 80084be:	60f8      	str	r0, [r7, #12]
 80084c0:	60b9      	str	r1, [r7, #8]
 80084c2:	607a      	str	r2, [r7, #4]
 80084c4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80084c6:	68bb      	ldr	r3, [r7, #8]
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d103      	bne.n	80084d4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80084cc:	69bb      	ldr	r3, [r7, #24]
 80084ce:	69ba      	ldr	r2, [r7, #24]
 80084d0:	601a      	str	r2, [r3, #0]
 80084d2:	e002      	b.n	80084da <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80084d4:	69bb      	ldr	r3, [r7, #24]
 80084d6:	687a      	ldr	r2, [r7, #4]
 80084d8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80084da:	69bb      	ldr	r3, [r7, #24]
 80084dc:	68fa      	ldr	r2, [r7, #12]
 80084de:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80084e0:	69bb      	ldr	r3, [r7, #24]
 80084e2:	68ba      	ldr	r2, [r7, #8]
 80084e4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80084e6:	2101      	movs	r1, #1
 80084e8:	69b8      	ldr	r0, [r7, #24]
 80084ea:	f7ff ff05 	bl	80082f8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80084ee:	69bb      	ldr	r3, [r7, #24]
 80084f0:	78fa      	ldrb	r2, [r7, #3]
 80084f2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80084f6:	bf00      	nop
 80084f8:	3710      	adds	r7, #16
 80084fa:	46bd      	mov	sp, r7
 80084fc:	bd80      	pop	{r7, pc}
	...

08008500 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008500:	b580      	push	{r7, lr}
 8008502:	b08e      	sub	sp, #56	; 0x38
 8008504:	af00      	add	r7, sp, #0
 8008506:	60f8      	str	r0, [r7, #12]
 8008508:	60b9      	str	r1, [r7, #8]
 800850a:	607a      	str	r2, [r7, #4]
 800850c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800850e:	2300      	movs	r3, #0
 8008510:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008516:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008518:	2b00      	cmp	r3, #0
 800851a:	d10a      	bne.n	8008532 <xQueueGenericSend+0x32>
	__asm volatile
 800851c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008520:	f383 8811 	msr	BASEPRI, r3
 8008524:	f3bf 8f6f 	isb	sy
 8008528:	f3bf 8f4f 	dsb	sy
 800852c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800852e:	bf00      	nop
 8008530:	e7fe      	b.n	8008530 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008532:	68bb      	ldr	r3, [r7, #8]
 8008534:	2b00      	cmp	r3, #0
 8008536:	d103      	bne.n	8008540 <xQueueGenericSend+0x40>
 8008538:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800853a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800853c:	2b00      	cmp	r3, #0
 800853e:	d101      	bne.n	8008544 <xQueueGenericSend+0x44>
 8008540:	2301      	movs	r3, #1
 8008542:	e000      	b.n	8008546 <xQueueGenericSend+0x46>
 8008544:	2300      	movs	r3, #0
 8008546:	2b00      	cmp	r3, #0
 8008548:	d10a      	bne.n	8008560 <xQueueGenericSend+0x60>
	__asm volatile
 800854a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800854e:	f383 8811 	msr	BASEPRI, r3
 8008552:	f3bf 8f6f 	isb	sy
 8008556:	f3bf 8f4f 	dsb	sy
 800855a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800855c:	bf00      	nop
 800855e:	e7fe      	b.n	800855e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008560:	683b      	ldr	r3, [r7, #0]
 8008562:	2b02      	cmp	r3, #2
 8008564:	d103      	bne.n	800856e <xQueueGenericSend+0x6e>
 8008566:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008568:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800856a:	2b01      	cmp	r3, #1
 800856c:	d101      	bne.n	8008572 <xQueueGenericSend+0x72>
 800856e:	2301      	movs	r3, #1
 8008570:	e000      	b.n	8008574 <xQueueGenericSend+0x74>
 8008572:	2300      	movs	r3, #0
 8008574:	2b00      	cmp	r3, #0
 8008576:	d10a      	bne.n	800858e <xQueueGenericSend+0x8e>
	__asm volatile
 8008578:	f04f 0350 	mov.w	r3, #80	; 0x50
 800857c:	f383 8811 	msr	BASEPRI, r3
 8008580:	f3bf 8f6f 	isb	sy
 8008584:	f3bf 8f4f 	dsb	sy
 8008588:	623b      	str	r3, [r7, #32]
}
 800858a:	bf00      	nop
 800858c:	e7fe      	b.n	800858c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800858e:	f001 f9e7 	bl	8009960 <xTaskGetSchedulerState>
 8008592:	4603      	mov	r3, r0
 8008594:	2b00      	cmp	r3, #0
 8008596:	d102      	bne.n	800859e <xQueueGenericSend+0x9e>
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	2b00      	cmp	r3, #0
 800859c:	d101      	bne.n	80085a2 <xQueueGenericSend+0xa2>
 800859e:	2301      	movs	r3, #1
 80085a0:	e000      	b.n	80085a4 <xQueueGenericSend+0xa4>
 80085a2:	2300      	movs	r3, #0
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d10a      	bne.n	80085be <xQueueGenericSend+0xbe>
	__asm volatile
 80085a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085ac:	f383 8811 	msr	BASEPRI, r3
 80085b0:	f3bf 8f6f 	isb	sy
 80085b4:	f3bf 8f4f 	dsb	sy
 80085b8:	61fb      	str	r3, [r7, #28]
}
 80085ba:	bf00      	nop
 80085bc:	e7fe      	b.n	80085bc <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80085be:	f001 ff29 	bl	800a414 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80085c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80085c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80085ca:	429a      	cmp	r2, r3
 80085cc:	d302      	bcc.n	80085d4 <xQueueGenericSend+0xd4>
 80085ce:	683b      	ldr	r3, [r7, #0]
 80085d0:	2b02      	cmp	r3, #2
 80085d2:	d129      	bne.n	8008628 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80085d4:	683a      	ldr	r2, [r7, #0]
 80085d6:	68b9      	ldr	r1, [r7, #8]
 80085d8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80085da:	f000 fa0b 	bl	80089f4 <prvCopyDataToQueue>
 80085de:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80085e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d010      	beq.n	800860a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80085e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085ea:	3324      	adds	r3, #36	; 0x24
 80085ec:	4618      	mov	r0, r3
 80085ee:	f000 fff5 	bl	80095dc <xTaskRemoveFromEventList>
 80085f2:	4603      	mov	r3, r0
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d013      	beq.n	8008620 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80085f8:	4b3f      	ldr	r3, [pc, #252]	; (80086f8 <xQueueGenericSend+0x1f8>)
 80085fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80085fe:	601a      	str	r2, [r3, #0]
 8008600:	f3bf 8f4f 	dsb	sy
 8008604:	f3bf 8f6f 	isb	sy
 8008608:	e00a      	b.n	8008620 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800860a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800860c:	2b00      	cmp	r3, #0
 800860e:	d007      	beq.n	8008620 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008610:	4b39      	ldr	r3, [pc, #228]	; (80086f8 <xQueueGenericSend+0x1f8>)
 8008612:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008616:	601a      	str	r2, [r3, #0]
 8008618:	f3bf 8f4f 	dsb	sy
 800861c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008620:	f001 ff28 	bl	800a474 <vPortExitCritical>
				return pdPASS;
 8008624:	2301      	movs	r3, #1
 8008626:	e063      	b.n	80086f0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	2b00      	cmp	r3, #0
 800862c:	d103      	bne.n	8008636 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800862e:	f001 ff21 	bl	800a474 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8008632:	2300      	movs	r3, #0
 8008634:	e05c      	b.n	80086f0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008636:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008638:	2b00      	cmp	r3, #0
 800863a:	d106      	bne.n	800864a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800863c:	f107 0314 	add.w	r3, r7, #20
 8008640:	4618      	mov	r0, r3
 8008642:	f001 f82f 	bl	80096a4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008646:	2301      	movs	r3, #1
 8008648:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800864a:	f001 ff13 	bl	800a474 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800864e:	f000 fd9b 	bl	8009188 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008652:	f001 fedf 	bl	800a414 <vPortEnterCritical>
 8008656:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008658:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800865c:	b25b      	sxtb	r3, r3
 800865e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008662:	d103      	bne.n	800866c <xQueueGenericSend+0x16c>
 8008664:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008666:	2200      	movs	r2, #0
 8008668:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800866c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800866e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008672:	b25b      	sxtb	r3, r3
 8008674:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008678:	d103      	bne.n	8008682 <xQueueGenericSend+0x182>
 800867a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800867c:	2200      	movs	r2, #0
 800867e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008682:	f001 fef7 	bl	800a474 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008686:	1d3a      	adds	r2, r7, #4
 8008688:	f107 0314 	add.w	r3, r7, #20
 800868c:	4611      	mov	r1, r2
 800868e:	4618      	mov	r0, r3
 8008690:	f001 f81e 	bl	80096d0 <xTaskCheckForTimeOut>
 8008694:	4603      	mov	r3, r0
 8008696:	2b00      	cmp	r3, #0
 8008698:	d124      	bne.n	80086e4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800869a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800869c:	f000 faa2 	bl	8008be4 <prvIsQueueFull>
 80086a0:	4603      	mov	r3, r0
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d018      	beq.n	80086d8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80086a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086a8:	3310      	adds	r3, #16
 80086aa:	687a      	ldr	r2, [r7, #4]
 80086ac:	4611      	mov	r1, r2
 80086ae:	4618      	mov	r0, r3
 80086b0:	f000 ff44 	bl	800953c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80086b4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80086b6:	f000 fa2d 	bl	8008b14 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80086ba:	f000 fd73 	bl	80091a4 <xTaskResumeAll>
 80086be:	4603      	mov	r3, r0
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	f47f af7c 	bne.w	80085be <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80086c6:	4b0c      	ldr	r3, [pc, #48]	; (80086f8 <xQueueGenericSend+0x1f8>)
 80086c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80086cc:	601a      	str	r2, [r3, #0]
 80086ce:	f3bf 8f4f 	dsb	sy
 80086d2:	f3bf 8f6f 	isb	sy
 80086d6:	e772      	b.n	80085be <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80086d8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80086da:	f000 fa1b 	bl	8008b14 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80086de:	f000 fd61 	bl	80091a4 <xTaskResumeAll>
 80086e2:	e76c      	b.n	80085be <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80086e4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80086e6:	f000 fa15 	bl	8008b14 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80086ea:	f000 fd5b 	bl	80091a4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80086ee:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80086f0:	4618      	mov	r0, r3
 80086f2:	3738      	adds	r7, #56	; 0x38
 80086f4:	46bd      	mov	sp, r7
 80086f6:	bd80      	pop	{r7, pc}
 80086f8:	e000ed04 	.word	0xe000ed04

080086fc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80086fc:	b580      	push	{r7, lr}
 80086fe:	b090      	sub	sp, #64	; 0x40
 8008700:	af00      	add	r7, sp, #0
 8008702:	60f8      	str	r0, [r7, #12]
 8008704:	60b9      	str	r1, [r7, #8]
 8008706:	607a      	str	r2, [r7, #4]
 8008708:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800870e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008710:	2b00      	cmp	r3, #0
 8008712:	d10a      	bne.n	800872a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8008714:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008718:	f383 8811 	msr	BASEPRI, r3
 800871c:	f3bf 8f6f 	isb	sy
 8008720:	f3bf 8f4f 	dsb	sy
 8008724:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008726:	bf00      	nop
 8008728:	e7fe      	b.n	8008728 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800872a:	68bb      	ldr	r3, [r7, #8]
 800872c:	2b00      	cmp	r3, #0
 800872e:	d103      	bne.n	8008738 <xQueueGenericSendFromISR+0x3c>
 8008730:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008732:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008734:	2b00      	cmp	r3, #0
 8008736:	d101      	bne.n	800873c <xQueueGenericSendFromISR+0x40>
 8008738:	2301      	movs	r3, #1
 800873a:	e000      	b.n	800873e <xQueueGenericSendFromISR+0x42>
 800873c:	2300      	movs	r3, #0
 800873e:	2b00      	cmp	r3, #0
 8008740:	d10a      	bne.n	8008758 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8008742:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008746:	f383 8811 	msr	BASEPRI, r3
 800874a:	f3bf 8f6f 	isb	sy
 800874e:	f3bf 8f4f 	dsb	sy
 8008752:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008754:	bf00      	nop
 8008756:	e7fe      	b.n	8008756 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008758:	683b      	ldr	r3, [r7, #0]
 800875a:	2b02      	cmp	r3, #2
 800875c:	d103      	bne.n	8008766 <xQueueGenericSendFromISR+0x6a>
 800875e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008760:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008762:	2b01      	cmp	r3, #1
 8008764:	d101      	bne.n	800876a <xQueueGenericSendFromISR+0x6e>
 8008766:	2301      	movs	r3, #1
 8008768:	e000      	b.n	800876c <xQueueGenericSendFromISR+0x70>
 800876a:	2300      	movs	r3, #0
 800876c:	2b00      	cmp	r3, #0
 800876e:	d10a      	bne.n	8008786 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8008770:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008774:	f383 8811 	msr	BASEPRI, r3
 8008778:	f3bf 8f6f 	isb	sy
 800877c:	f3bf 8f4f 	dsb	sy
 8008780:	623b      	str	r3, [r7, #32]
}
 8008782:	bf00      	nop
 8008784:	e7fe      	b.n	8008784 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008786:	f001 ff27 	bl	800a5d8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800878a:	f3ef 8211 	mrs	r2, BASEPRI
 800878e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008792:	f383 8811 	msr	BASEPRI, r3
 8008796:	f3bf 8f6f 	isb	sy
 800879a:	f3bf 8f4f 	dsb	sy
 800879e:	61fa      	str	r2, [r7, #28]
 80087a0:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80087a2:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80087a4:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80087a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80087aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80087ae:	429a      	cmp	r2, r3
 80087b0:	d302      	bcc.n	80087b8 <xQueueGenericSendFromISR+0xbc>
 80087b2:	683b      	ldr	r3, [r7, #0]
 80087b4:	2b02      	cmp	r3, #2
 80087b6:	d12f      	bne.n	8008818 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80087b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087ba:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80087be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80087c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087c6:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80087c8:	683a      	ldr	r2, [r7, #0]
 80087ca:	68b9      	ldr	r1, [r7, #8]
 80087cc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80087ce:	f000 f911 	bl	80089f4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80087d2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80087d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087da:	d112      	bne.n	8008802 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80087dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d016      	beq.n	8008812 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80087e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087e6:	3324      	adds	r3, #36	; 0x24
 80087e8:	4618      	mov	r0, r3
 80087ea:	f000 fef7 	bl	80095dc <xTaskRemoveFromEventList>
 80087ee:	4603      	mov	r3, r0
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d00e      	beq.n	8008812 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d00b      	beq.n	8008812 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	2201      	movs	r2, #1
 80087fe:	601a      	str	r2, [r3, #0]
 8008800:	e007      	b.n	8008812 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008802:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8008806:	3301      	adds	r3, #1
 8008808:	b2db      	uxtb	r3, r3
 800880a:	b25a      	sxtb	r2, r3
 800880c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800880e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8008812:	2301      	movs	r3, #1
 8008814:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8008816:	e001      	b.n	800881c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008818:	2300      	movs	r3, #0
 800881a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800881c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800881e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008820:	697b      	ldr	r3, [r7, #20]
 8008822:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008826:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008828:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800882a:	4618      	mov	r0, r3
 800882c:	3740      	adds	r7, #64	; 0x40
 800882e:	46bd      	mov	sp, r7
 8008830:	bd80      	pop	{r7, pc}
	...

08008834 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008834:	b580      	push	{r7, lr}
 8008836:	b08c      	sub	sp, #48	; 0x30
 8008838:	af00      	add	r7, sp, #0
 800883a:	60f8      	str	r0, [r7, #12]
 800883c:	60b9      	str	r1, [r7, #8]
 800883e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008840:	2300      	movs	r3, #0
 8008842:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008848:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800884a:	2b00      	cmp	r3, #0
 800884c:	d10a      	bne.n	8008864 <xQueueReceive+0x30>
	__asm volatile
 800884e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008852:	f383 8811 	msr	BASEPRI, r3
 8008856:	f3bf 8f6f 	isb	sy
 800885a:	f3bf 8f4f 	dsb	sy
 800885e:	623b      	str	r3, [r7, #32]
}
 8008860:	bf00      	nop
 8008862:	e7fe      	b.n	8008862 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008864:	68bb      	ldr	r3, [r7, #8]
 8008866:	2b00      	cmp	r3, #0
 8008868:	d103      	bne.n	8008872 <xQueueReceive+0x3e>
 800886a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800886c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800886e:	2b00      	cmp	r3, #0
 8008870:	d101      	bne.n	8008876 <xQueueReceive+0x42>
 8008872:	2301      	movs	r3, #1
 8008874:	e000      	b.n	8008878 <xQueueReceive+0x44>
 8008876:	2300      	movs	r3, #0
 8008878:	2b00      	cmp	r3, #0
 800887a:	d10a      	bne.n	8008892 <xQueueReceive+0x5e>
	__asm volatile
 800887c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008880:	f383 8811 	msr	BASEPRI, r3
 8008884:	f3bf 8f6f 	isb	sy
 8008888:	f3bf 8f4f 	dsb	sy
 800888c:	61fb      	str	r3, [r7, #28]
}
 800888e:	bf00      	nop
 8008890:	e7fe      	b.n	8008890 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008892:	f001 f865 	bl	8009960 <xTaskGetSchedulerState>
 8008896:	4603      	mov	r3, r0
 8008898:	2b00      	cmp	r3, #0
 800889a:	d102      	bne.n	80088a2 <xQueueReceive+0x6e>
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d101      	bne.n	80088a6 <xQueueReceive+0x72>
 80088a2:	2301      	movs	r3, #1
 80088a4:	e000      	b.n	80088a8 <xQueueReceive+0x74>
 80088a6:	2300      	movs	r3, #0
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d10a      	bne.n	80088c2 <xQueueReceive+0x8e>
	__asm volatile
 80088ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088b0:	f383 8811 	msr	BASEPRI, r3
 80088b4:	f3bf 8f6f 	isb	sy
 80088b8:	f3bf 8f4f 	dsb	sy
 80088bc:	61bb      	str	r3, [r7, #24]
}
 80088be:	bf00      	nop
 80088c0:	e7fe      	b.n	80088c0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80088c2:	f001 fda7 	bl	800a414 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80088c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088ca:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80088cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d01f      	beq.n	8008912 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80088d2:	68b9      	ldr	r1, [r7, #8]
 80088d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80088d6:	f000 f8f7 	bl	8008ac8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80088da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088dc:	1e5a      	subs	r2, r3, #1
 80088de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088e0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80088e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088e4:	691b      	ldr	r3, [r3, #16]
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d00f      	beq.n	800890a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80088ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088ec:	3310      	adds	r3, #16
 80088ee:	4618      	mov	r0, r3
 80088f0:	f000 fe74 	bl	80095dc <xTaskRemoveFromEventList>
 80088f4:	4603      	mov	r3, r0
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d007      	beq.n	800890a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80088fa:	4b3d      	ldr	r3, [pc, #244]	; (80089f0 <xQueueReceive+0x1bc>)
 80088fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008900:	601a      	str	r2, [r3, #0]
 8008902:	f3bf 8f4f 	dsb	sy
 8008906:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800890a:	f001 fdb3 	bl	800a474 <vPortExitCritical>
				return pdPASS;
 800890e:	2301      	movs	r3, #1
 8008910:	e069      	b.n	80089e6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	2b00      	cmp	r3, #0
 8008916:	d103      	bne.n	8008920 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008918:	f001 fdac 	bl	800a474 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800891c:	2300      	movs	r3, #0
 800891e:	e062      	b.n	80089e6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008920:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008922:	2b00      	cmp	r3, #0
 8008924:	d106      	bne.n	8008934 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008926:	f107 0310 	add.w	r3, r7, #16
 800892a:	4618      	mov	r0, r3
 800892c:	f000 feba 	bl	80096a4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008930:	2301      	movs	r3, #1
 8008932:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008934:	f001 fd9e 	bl	800a474 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008938:	f000 fc26 	bl	8009188 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800893c:	f001 fd6a 	bl	800a414 <vPortEnterCritical>
 8008940:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008942:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008946:	b25b      	sxtb	r3, r3
 8008948:	f1b3 3fff 	cmp.w	r3, #4294967295
 800894c:	d103      	bne.n	8008956 <xQueueReceive+0x122>
 800894e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008950:	2200      	movs	r2, #0
 8008952:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008956:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008958:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800895c:	b25b      	sxtb	r3, r3
 800895e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008962:	d103      	bne.n	800896c <xQueueReceive+0x138>
 8008964:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008966:	2200      	movs	r2, #0
 8008968:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800896c:	f001 fd82 	bl	800a474 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008970:	1d3a      	adds	r2, r7, #4
 8008972:	f107 0310 	add.w	r3, r7, #16
 8008976:	4611      	mov	r1, r2
 8008978:	4618      	mov	r0, r3
 800897a:	f000 fea9 	bl	80096d0 <xTaskCheckForTimeOut>
 800897e:	4603      	mov	r3, r0
 8008980:	2b00      	cmp	r3, #0
 8008982:	d123      	bne.n	80089cc <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008984:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008986:	f000 f917 	bl	8008bb8 <prvIsQueueEmpty>
 800898a:	4603      	mov	r3, r0
 800898c:	2b00      	cmp	r3, #0
 800898e:	d017      	beq.n	80089c0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008990:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008992:	3324      	adds	r3, #36	; 0x24
 8008994:	687a      	ldr	r2, [r7, #4]
 8008996:	4611      	mov	r1, r2
 8008998:	4618      	mov	r0, r3
 800899a:	f000 fdcf 	bl	800953c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800899e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80089a0:	f000 f8b8 	bl	8008b14 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80089a4:	f000 fbfe 	bl	80091a4 <xTaskResumeAll>
 80089a8:	4603      	mov	r3, r0
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d189      	bne.n	80088c2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80089ae:	4b10      	ldr	r3, [pc, #64]	; (80089f0 <xQueueReceive+0x1bc>)
 80089b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80089b4:	601a      	str	r2, [r3, #0]
 80089b6:	f3bf 8f4f 	dsb	sy
 80089ba:	f3bf 8f6f 	isb	sy
 80089be:	e780      	b.n	80088c2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80089c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80089c2:	f000 f8a7 	bl	8008b14 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80089c6:	f000 fbed 	bl	80091a4 <xTaskResumeAll>
 80089ca:	e77a      	b.n	80088c2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80089cc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80089ce:	f000 f8a1 	bl	8008b14 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80089d2:	f000 fbe7 	bl	80091a4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80089d6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80089d8:	f000 f8ee 	bl	8008bb8 <prvIsQueueEmpty>
 80089dc:	4603      	mov	r3, r0
 80089de:	2b00      	cmp	r3, #0
 80089e0:	f43f af6f 	beq.w	80088c2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80089e4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80089e6:	4618      	mov	r0, r3
 80089e8:	3730      	adds	r7, #48	; 0x30
 80089ea:	46bd      	mov	sp, r7
 80089ec:	bd80      	pop	{r7, pc}
 80089ee:	bf00      	nop
 80089f0:	e000ed04 	.word	0xe000ed04

080089f4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80089f4:	b580      	push	{r7, lr}
 80089f6:	b086      	sub	sp, #24
 80089f8:	af00      	add	r7, sp, #0
 80089fa:	60f8      	str	r0, [r7, #12]
 80089fc:	60b9      	str	r1, [r7, #8]
 80089fe:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008a00:	2300      	movs	r3, #0
 8008a02:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a08:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d10d      	bne.n	8008a2e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d14d      	bne.n	8008ab6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	689b      	ldr	r3, [r3, #8]
 8008a1e:	4618      	mov	r0, r3
 8008a20:	f000 ffbc 	bl	800999c <xTaskPriorityDisinherit>
 8008a24:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	2200      	movs	r2, #0
 8008a2a:	609a      	str	r2, [r3, #8]
 8008a2c:	e043      	b.n	8008ab6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d119      	bne.n	8008a68 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	6858      	ldr	r0, [r3, #4]
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a3c:	461a      	mov	r2, r3
 8008a3e:	68b9      	ldr	r1, [r7, #8]
 8008a40:	f002 f9ea 	bl	800ae18 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	685a      	ldr	r2, [r3, #4]
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a4c:	441a      	add	r2, r3
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	685a      	ldr	r2, [r3, #4]
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	689b      	ldr	r3, [r3, #8]
 8008a5a:	429a      	cmp	r2, r3
 8008a5c:	d32b      	bcc.n	8008ab6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	681a      	ldr	r2, [r3, #0]
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	605a      	str	r2, [r3, #4]
 8008a66:	e026      	b.n	8008ab6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	68d8      	ldr	r0, [r3, #12]
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a70:	461a      	mov	r2, r3
 8008a72:	68b9      	ldr	r1, [r7, #8]
 8008a74:	f002 f9d0 	bl	800ae18 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	68da      	ldr	r2, [r3, #12]
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a80:	425b      	negs	r3, r3
 8008a82:	441a      	add	r2, r3
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	68da      	ldr	r2, [r3, #12]
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	429a      	cmp	r2, r3
 8008a92:	d207      	bcs.n	8008aa4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	689a      	ldr	r2, [r3, #8]
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a9c:	425b      	negs	r3, r3
 8008a9e:	441a      	add	r2, r3
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	2b02      	cmp	r3, #2
 8008aa8:	d105      	bne.n	8008ab6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008aaa:	693b      	ldr	r3, [r7, #16]
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d002      	beq.n	8008ab6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008ab0:	693b      	ldr	r3, [r7, #16]
 8008ab2:	3b01      	subs	r3, #1
 8008ab4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008ab6:	693b      	ldr	r3, [r7, #16]
 8008ab8:	1c5a      	adds	r2, r3, #1
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8008abe:	697b      	ldr	r3, [r7, #20]
}
 8008ac0:	4618      	mov	r0, r3
 8008ac2:	3718      	adds	r7, #24
 8008ac4:	46bd      	mov	sp, r7
 8008ac6:	bd80      	pop	{r7, pc}

08008ac8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008ac8:	b580      	push	{r7, lr}
 8008aca:	b082      	sub	sp, #8
 8008acc:	af00      	add	r7, sp, #0
 8008ace:	6078      	str	r0, [r7, #4]
 8008ad0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d018      	beq.n	8008b0c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	68da      	ldr	r2, [r3, #12]
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ae2:	441a      	add	r2, r3
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	68da      	ldr	r2, [r3, #12]
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	689b      	ldr	r3, [r3, #8]
 8008af0:	429a      	cmp	r2, r3
 8008af2:	d303      	bcc.n	8008afc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	681a      	ldr	r2, [r3, #0]
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	68d9      	ldr	r1, [r3, #12]
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b04:	461a      	mov	r2, r3
 8008b06:	6838      	ldr	r0, [r7, #0]
 8008b08:	f002 f986 	bl	800ae18 <memcpy>
	}
}
 8008b0c:	bf00      	nop
 8008b0e:	3708      	adds	r7, #8
 8008b10:	46bd      	mov	sp, r7
 8008b12:	bd80      	pop	{r7, pc}

08008b14 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008b14:	b580      	push	{r7, lr}
 8008b16:	b084      	sub	sp, #16
 8008b18:	af00      	add	r7, sp, #0
 8008b1a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008b1c:	f001 fc7a 	bl	800a414 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008b26:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008b28:	e011      	b.n	8008b4e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d012      	beq.n	8008b58 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	3324      	adds	r3, #36	; 0x24
 8008b36:	4618      	mov	r0, r3
 8008b38:	f000 fd50 	bl	80095dc <xTaskRemoveFromEventList>
 8008b3c:	4603      	mov	r3, r0
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d001      	beq.n	8008b46 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008b42:	f000 fe27 	bl	8009794 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008b46:	7bfb      	ldrb	r3, [r7, #15]
 8008b48:	3b01      	subs	r3, #1
 8008b4a:	b2db      	uxtb	r3, r3
 8008b4c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008b4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	dce9      	bgt.n	8008b2a <prvUnlockQueue+0x16>
 8008b56:	e000      	b.n	8008b5a <prvUnlockQueue+0x46>
					break;
 8008b58:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	22ff      	movs	r2, #255	; 0xff
 8008b5e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8008b62:	f001 fc87 	bl	800a474 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008b66:	f001 fc55 	bl	800a414 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008b70:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008b72:	e011      	b.n	8008b98 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	691b      	ldr	r3, [r3, #16]
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d012      	beq.n	8008ba2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	3310      	adds	r3, #16
 8008b80:	4618      	mov	r0, r3
 8008b82:	f000 fd2b 	bl	80095dc <xTaskRemoveFromEventList>
 8008b86:	4603      	mov	r3, r0
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d001      	beq.n	8008b90 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008b8c:	f000 fe02 	bl	8009794 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008b90:	7bbb      	ldrb	r3, [r7, #14]
 8008b92:	3b01      	subs	r3, #1
 8008b94:	b2db      	uxtb	r3, r3
 8008b96:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008b98:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	dce9      	bgt.n	8008b74 <prvUnlockQueue+0x60>
 8008ba0:	e000      	b.n	8008ba4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008ba2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	22ff      	movs	r2, #255	; 0xff
 8008ba8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8008bac:	f001 fc62 	bl	800a474 <vPortExitCritical>
}
 8008bb0:	bf00      	nop
 8008bb2:	3710      	adds	r7, #16
 8008bb4:	46bd      	mov	sp, r7
 8008bb6:	bd80      	pop	{r7, pc}

08008bb8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008bb8:	b580      	push	{r7, lr}
 8008bba:	b084      	sub	sp, #16
 8008bbc:	af00      	add	r7, sp, #0
 8008bbe:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008bc0:	f001 fc28 	bl	800a414 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d102      	bne.n	8008bd2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008bcc:	2301      	movs	r3, #1
 8008bce:	60fb      	str	r3, [r7, #12]
 8008bd0:	e001      	b.n	8008bd6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008bd2:	2300      	movs	r3, #0
 8008bd4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008bd6:	f001 fc4d 	bl	800a474 <vPortExitCritical>

	return xReturn;
 8008bda:	68fb      	ldr	r3, [r7, #12]
}
 8008bdc:	4618      	mov	r0, r3
 8008bde:	3710      	adds	r7, #16
 8008be0:	46bd      	mov	sp, r7
 8008be2:	bd80      	pop	{r7, pc}

08008be4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008be4:	b580      	push	{r7, lr}
 8008be6:	b084      	sub	sp, #16
 8008be8:	af00      	add	r7, sp, #0
 8008bea:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008bec:	f001 fc12 	bl	800a414 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008bf8:	429a      	cmp	r2, r3
 8008bfa:	d102      	bne.n	8008c02 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008bfc:	2301      	movs	r3, #1
 8008bfe:	60fb      	str	r3, [r7, #12]
 8008c00:	e001      	b.n	8008c06 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008c02:	2300      	movs	r3, #0
 8008c04:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008c06:	f001 fc35 	bl	800a474 <vPortExitCritical>

	return xReturn;
 8008c0a:	68fb      	ldr	r3, [r7, #12]
}
 8008c0c:	4618      	mov	r0, r3
 8008c0e:	3710      	adds	r7, #16
 8008c10:	46bd      	mov	sp, r7
 8008c12:	bd80      	pop	{r7, pc}

08008c14 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008c14:	b480      	push	{r7}
 8008c16:	b085      	sub	sp, #20
 8008c18:	af00      	add	r7, sp, #0
 8008c1a:	6078      	str	r0, [r7, #4]
 8008c1c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008c1e:	2300      	movs	r3, #0
 8008c20:	60fb      	str	r3, [r7, #12]
 8008c22:	e014      	b.n	8008c4e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008c24:	4a0f      	ldr	r2, [pc, #60]	; (8008c64 <vQueueAddToRegistry+0x50>)
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d10b      	bne.n	8008c48 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008c30:	490c      	ldr	r1, [pc, #48]	; (8008c64 <vQueueAddToRegistry+0x50>)
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	683a      	ldr	r2, [r7, #0]
 8008c36:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8008c3a:	4a0a      	ldr	r2, [pc, #40]	; (8008c64 <vQueueAddToRegistry+0x50>)
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	00db      	lsls	r3, r3, #3
 8008c40:	4413      	add	r3, r2
 8008c42:	687a      	ldr	r2, [r7, #4]
 8008c44:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8008c46:	e006      	b.n	8008c56 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	3301      	adds	r3, #1
 8008c4c:	60fb      	str	r3, [r7, #12]
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	2b07      	cmp	r3, #7
 8008c52:	d9e7      	bls.n	8008c24 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008c54:	bf00      	nop
 8008c56:	bf00      	nop
 8008c58:	3714      	adds	r7, #20
 8008c5a:	46bd      	mov	sp, r7
 8008c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c60:	4770      	bx	lr
 8008c62:	bf00      	nop
 8008c64:	20001448 	.word	0x20001448

08008c68 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008c68:	b580      	push	{r7, lr}
 8008c6a:	b086      	sub	sp, #24
 8008c6c:	af00      	add	r7, sp, #0
 8008c6e:	60f8      	str	r0, [r7, #12]
 8008c70:	60b9      	str	r1, [r7, #8]
 8008c72:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008c78:	f001 fbcc 	bl	800a414 <vPortEnterCritical>
 8008c7c:	697b      	ldr	r3, [r7, #20]
 8008c7e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008c82:	b25b      	sxtb	r3, r3
 8008c84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c88:	d103      	bne.n	8008c92 <vQueueWaitForMessageRestricted+0x2a>
 8008c8a:	697b      	ldr	r3, [r7, #20]
 8008c8c:	2200      	movs	r2, #0
 8008c8e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008c92:	697b      	ldr	r3, [r7, #20]
 8008c94:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008c98:	b25b      	sxtb	r3, r3
 8008c9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c9e:	d103      	bne.n	8008ca8 <vQueueWaitForMessageRestricted+0x40>
 8008ca0:	697b      	ldr	r3, [r7, #20]
 8008ca2:	2200      	movs	r2, #0
 8008ca4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008ca8:	f001 fbe4 	bl	800a474 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008cac:	697b      	ldr	r3, [r7, #20]
 8008cae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d106      	bne.n	8008cc2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008cb4:	697b      	ldr	r3, [r7, #20]
 8008cb6:	3324      	adds	r3, #36	; 0x24
 8008cb8:	687a      	ldr	r2, [r7, #4]
 8008cba:	68b9      	ldr	r1, [r7, #8]
 8008cbc:	4618      	mov	r0, r3
 8008cbe:	f000 fc61 	bl	8009584 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008cc2:	6978      	ldr	r0, [r7, #20]
 8008cc4:	f7ff ff26 	bl	8008b14 <prvUnlockQueue>
	}
 8008cc8:	bf00      	nop
 8008cca:	3718      	adds	r7, #24
 8008ccc:	46bd      	mov	sp, r7
 8008cce:	bd80      	pop	{r7, pc}

08008cd0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008cd0:	b580      	push	{r7, lr}
 8008cd2:	b08e      	sub	sp, #56	; 0x38
 8008cd4:	af04      	add	r7, sp, #16
 8008cd6:	60f8      	str	r0, [r7, #12]
 8008cd8:	60b9      	str	r1, [r7, #8]
 8008cda:	607a      	str	r2, [r7, #4]
 8008cdc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008cde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d10a      	bne.n	8008cfa <xTaskCreateStatic+0x2a>
	__asm volatile
 8008ce4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ce8:	f383 8811 	msr	BASEPRI, r3
 8008cec:	f3bf 8f6f 	isb	sy
 8008cf0:	f3bf 8f4f 	dsb	sy
 8008cf4:	623b      	str	r3, [r7, #32]
}
 8008cf6:	bf00      	nop
 8008cf8:	e7fe      	b.n	8008cf8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8008cfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d10a      	bne.n	8008d16 <xTaskCreateStatic+0x46>
	__asm volatile
 8008d00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d04:	f383 8811 	msr	BASEPRI, r3
 8008d08:	f3bf 8f6f 	isb	sy
 8008d0c:	f3bf 8f4f 	dsb	sy
 8008d10:	61fb      	str	r3, [r7, #28]
}
 8008d12:	bf00      	nop
 8008d14:	e7fe      	b.n	8008d14 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008d16:	23bc      	movs	r3, #188	; 0xbc
 8008d18:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008d1a:	693b      	ldr	r3, [r7, #16]
 8008d1c:	2bbc      	cmp	r3, #188	; 0xbc
 8008d1e:	d00a      	beq.n	8008d36 <xTaskCreateStatic+0x66>
	__asm volatile
 8008d20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d24:	f383 8811 	msr	BASEPRI, r3
 8008d28:	f3bf 8f6f 	isb	sy
 8008d2c:	f3bf 8f4f 	dsb	sy
 8008d30:	61bb      	str	r3, [r7, #24]
}
 8008d32:	bf00      	nop
 8008d34:	e7fe      	b.n	8008d34 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008d36:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008d38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d01e      	beq.n	8008d7c <xTaskCreateStatic+0xac>
 8008d3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d01b      	beq.n	8008d7c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008d44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d46:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d4a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008d4c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d50:	2202      	movs	r2, #2
 8008d52:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008d56:	2300      	movs	r3, #0
 8008d58:	9303      	str	r3, [sp, #12]
 8008d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d5c:	9302      	str	r3, [sp, #8]
 8008d5e:	f107 0314 	add.w	r3, r7, #20
 8008d62:	9301      	str	r3, [sp, #4]
 8008d64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d66:	9300      	str	r3, [sp, #0]
 8008d68:	683b      	ldr	r3, [r7, #0]
 8008d6a:	687a      	ldr	r2, [r7, #4]
 8008d6c:	68b9      	ldr	r1, [r7, #8]
 8008d6e:	68f8      	ldr	r0, [r7, #12]
 8008d70:	f000 f850 	bl	8008e14 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008d74:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008d76:	f000 f8f3 	bl	8008f60 <prvAddNewTaskToReadyList>
 8008d7a:	e001      	b.n	8008d80 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8008d7c:	2300      	movs	r3, #0
 8008d7e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008d80:	697b      	ldr	r3, [r7, #20]
	}
 8008d82:	4618      	mov	r0, r3
 8008d84:	3728      	adds	r7, #40	; 0x28
 8008d86:	46bd      	mov	sp, r7
 8008d88:	bd80      	pop	{r7, pc}

08008d8a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008d8a:	b580      	push	{r7, lr}
 8008d8c:	b08c      	sub	sp, #48	; 0x30
 8008d8e:	af04      	add	r7, sp, #16
 8008d90:	60f8      	str	r0, [r7, #12]
 8008d92:	60b9      	str	r1, [r7, #8]
 8008d94:	603b      	str	r3, [r7, #0]
 8008d96:	4613      	mov	r3, r2
 8008d98:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008d9a:	88fb      	ldrh	r3, [r7, #6]
 8008d9c:	009b      	lsls	r3, r3, #2
 8008d9e:	4618      	mov	r0, r3
 8008da0:	f001 fc5a 	bl	800a658 <pvPortMalloc>
 8008da4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008da6:	697b      	ldr	r3, [r7, #20]
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d00e      	beq.n	8008dca <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008dac:	20bc      	movs	r0, #188	; 0xbc
 8008dae:	f001 fc53 	bl	800a658 <pvPortMalloc>
 8008db2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008db4:	69fb      	ldr	r3, [r7, #28]
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d003      	beq.n	8008dc2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008dba:	69fb      	ldr	r3, [r7, #28]
 8008dbc:	697a      	ldr	r2, [r7, #20]
 8008dbe:	631a      	str	r2, [r3, #48]	; 0x30
 8008dc0:	e005      	b.n	8008dce <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008dc2:	6978      	ldr	r0, [r7, #20]
 8008dc4:	f001 fd14 	bl	800a7f0 <vPortFree>
 8008dc8:	e001      	b.n	8008dce <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008dca:	2300      	movs	r3, #0
 8008dcc:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008dce:	69fb      	ldr	r3, [r7, #28]
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d017      	beq.n	8008e04 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008dd4:	69fb      	ldr	r3, [r7, #28]
 8008dd6:	2200      	movs	r2, #0
 8008dd8:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008ddc:	88fa      	ldrh	r2, [r7, #6]
 8008dde:	2300      	movs	r3, #0
 8008de0:	9303      	str	r3, [sp, #12]
 8008de2:	69fb      	ldr	r3, [r7, #28]
 8008de4:	9302      	str	r3, [sp, #8]
 8008de6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008de8:	9301      	str	r3, [sp, #4]
 8008dea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dec:	9300      	str	r3, [sp, #0]
 8008dee:	683b      	ldr	r3, [r7, #0]
 8008df0:	68b9      	ldr	r1, [r7, #8]
 8008df2:	68f8      	ldr	r0, [r7, #12]
 8008df4:	f000 f80e 	bl	8008e14 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008df8:	69f8      	ldr	r0, [r7, #28]
 8008dfa:	f000 f8b1 	bl	8008f60 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008dfe:	2301      	movs	r3, #1
 8008e00:	61bb      	str	r3, [r7, #24]
 8008e02:	e002      	b.n	8008e0a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008e04:	f04f 33ff 	mov.w	r3, #4294967295
 8008e08:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008e0a:	69bb      	ldr	r3, [r7, #24]
	}
 8008e0c:	4618      	mov	r0, r3
 8008e0e:	3720      	adds	r7, #32
 8008e10:	46bd      	mov	sp, r7
 8008e12:	bd80      	pop	{r7, pc}

08008e14 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008e14:	b580      	push	{r7, lr}
 8008e16:	b088      	sub	sp, #32
 8008e18:	af00      	add	r7, sp, #0
 8008e1a:	60f8      	str	r0, [r7, #12]
 8008e1c:	60b9      	str	r1, [r7, #8]
 8008e1e:	607a      	str	r2, [r7, #4]
 8008e20:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008e22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e24:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	009b      	lsls	r3, r3, #2
 8008e2a:	461a      	mov	r2, r3
 8008e2c:	21a5      	movs	r1, #165	; 0xa5
 8008e2e:	f002 f81b 	bl	800ae68 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008e32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e34:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008e3c:	3b01      	subs	r3, #1
 8008e3e:	009b      	lsls	r3, r3, #2
 8008e40:	4413      	add	r3, r2
 8008e42:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008e44:	69bb      	ldr	r3, [r7, #24]
 8008e46:	f023 0307 	bic.w	r3, r3, #7
 8008e4a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008e4c:	69bb      	ldr	r3, [r7, #24]
 8008e4e:	f003 0307 	and.w	r3, r3, #7
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d00a      	beq.n	8008e6c <prvInitialiseNewTask+0x58>
	__asm volatile
 8008e56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e5a:	f383 8811 	msr	BASEPRI, r3
 8008e5e:	f3bf 8f6f 	isb	sy
 8008e62:	f3bf 8f4f 	dsb	sy
 8008e66:	617b      	str	r3, [r7, #20]
}
 8008e68:	bf00      	nop
 8008e6a:	e7fe      	b.n	8008e6a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008e6c:	68bb      	ldr	r3, [r7, #8]
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d01f      	beq.n	8008eb2 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008e72:	2300      	movs	r3, #0
 8008e74:	61fb      	str	r3, [r7, #28]
 8008e76:	e012      	b.n	8008e9e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008e78:	68ba      	ldr	r2, [r7, #8]
 8008e7a:	69fb      	ldr	r3, [r7, #28]
 8008e7c:	4413      	add	r3, r2
 8008e7e:	7819      	ldrb	r1, [r3, #0]
 8008e80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008e82:	69fb      	ldr	r3, [r7, #28]
 8008e84:	4413      	add	r3, r2
 8008e86:	3334      	adds	r3, #52	; 0x34
 8008e88:	460a      	mov	r2, r1
 8008e8a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008e8c:	68ba      	ldr	r2, [r7, #8]
 8008e8e:	69fb      	ldr	r3, [r7, #28]
 8008e90:	4413      	add	r3, r2
 8008e92:	781b      	ldrb	r3, [r3, #0]
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d006      	beq.n	8008ea6 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008e98:	69fb      	ldr	r3, [r7, #28]
 8008e9a:	3301      	adds	r3, #1
 8008e9c:	61fb      	str	r3, [r7, #28]
 8008e9e:	69fb      	ldr	r3, [r7, #28]
 8008ea0:	2b0f      	cmp	r3, #15
 8008ea2:	d9e9      	bls.n	8008e78 <prvInitialiseNewTask+0x64>
 8008ea4:	e000      	b.n	8008ea8 <prvInitialiseNewTask+0x94>
			{
				break;
 8008ea6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008ea8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008eaa:	2200      	movs	r2, #0
 8008eac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008eb0:	e003      	b.n	8008eba <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008eb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008eb4:	2200      	movs	r2, #0
 8008eb6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008eba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ebc:	2b37      	cmp	r3, #55	; 0x37
 8008ebe:	d901      	bls.n	8008ec4 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008ec0:	2337      	movs	r3, #55	; 0x37
 8008ec2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008ec4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ec6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008ec8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008eca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ecc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008ece:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8008ed0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ed2:	2200      	movs	r2, #0
 8008ed4:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008ed6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ed8:	3304      	adds	r3, #4
 8008eda:	4618      	mov	r0, r3
 8008edc:	f7ff f978 	bl	80081d0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008ee0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ee2:	3318      	adds	r3, #24
 8008ee4:	4618      	mov	r0, r3
 8008ee6:	f7ff f973 	bl	80081d0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008eea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008eec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008eee:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008ef0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ef2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008ef6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ef8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008efa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008efc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008efe:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008f00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f02:	2200      	movs	r2, #0
 8008f04:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008f08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f0a:	2200      	movs	r2, #0
 8008f0c:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8008f10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f12:	3354      	adds	r3, #84	; 0x54
 8008f14:	2260      	movs	r2, #96	; 0x60
 8008f16:	2100      	movs	r1, #0
 8008f18:	4618      	mov	r0, r3
 8008f1a:	f001 ffa5 	bl	800ae68 <memset>
 8008f1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f20:	4a0c      	ldr	r2, [pc, #48]	; (8008f54 <prvInitialiseNewTask+0x140>)
 8008f22:	659a      	str	r2, [r3, #88]	; 0x58
 8008f24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f26:	4a0c      	ldr	r2, [pc, #48]	; (8008f58 <prvInitialiseNewTask+0x144>)
 8008f28:	65da      	str	r2, [r3, #92]	; 0x5c
 8008f2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f2c:	4a0b      	ldr	r2, [pc, #44]	; (8008f5c <prvInitialiseNewTask+0x148>)
 8008f2e:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008f30:	683a      	ldr	r2, [r7, #0]
 8008f32:	68f9      	ldr	r1, [r7, #12]
 8008f34:	69b8      	ldr	r0, [r7, #24]
 8008f36:	f001 f941 	bl	800a1bc <pxPortInitialiseStack>
 8008f3a:	4602      	mov	r2, r0
 8008f3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f3e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008f40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d002      	beq.n	8008f4c <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008f46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f48:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008f4a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008f4c:	bf00      	nop
 8008f4e:	3720      	adds	r7, #32
 8008f50:	46bd      	mov	sp, r7
 8008f52:	bd80      	pop	{r7, pc}
 8008f54:	0800b748 	.word	0x0800b748
 8008f58:	0800b768 	.word	0x0800b768
 8008f5c:	0800b728 	.word	0x0800b728

08008f60 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008f60:	b580      	push	{r7, lr}
 8008f62:	b082      	sub	sp, #8
 8008f64:	af00      	add	r7, sp, #0
 8008f66:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008f68:	f001 fa54 	bl	800a414 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008f6c:	4b2d      	ldr	r3, [pc, #180]	; (8009024 <prvAddNewTaskToReadyList+0xc4>)
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	3301      	adds	r3, #1
 8008f72:	4a2c      	ldr	r2, [pc, #176]	; (8009024 <prvAddNewTaskToReadyList+0xc4>)
 8008f74:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008f76:	4b2c      	ldr	r3, [pc, #176]	; (8009028 <prvAddNewTaskToReadyList+0xc8>)
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d109      	bne.n	8008f92 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008f7e:	4a2a      	ldr	r2, [pc, #168]	; (8009028 <prvAddNewTaskToReadyList+0xc8>)
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008f84:	4b27      	ldr	r3, [pc, #156]	; (8009024 <prvAddNewTaskToReadyList+0xc4>)
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	2b01      	cmp	r3, #1
 8008f8a:	d110      	bne.n	8008fae <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008f8c:	f000 fc26 	bl	80097dc <prvInitialiseTaskLists>
 8008f90:	e00d      	b.n	8008fae <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008f92:	4b26      	ldr	r3, [pc, #152]	; (800902c <prvAddNewTaskToReadyList+0xcc>)
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d109      	bne.n	8008fae <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008f9a:	4b23      	ldr	r3, [pc, #140]	; (8009028 <prvAddNewTaskToReadyList+0xc8>)
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fa4:	429a      	cmp	r2, r3
 8008fa6:	d802      	bhi.n	8008fae <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008fa8:	4a1f      	ldr	r2, [pc, #124]	; (8009028 <prvAddNewTaskToReadyList+0xc8>)
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008fae:	4b20      	ldr	r3, [pc, #128]	; (8009030 <prvAddNewTaskToReadyList+0xd0>)
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	3301      	adds	r3, #1
 8008fb4:	4a1e      	ldr	r2, [pc, #120]	; (8009030 <prvAddNewTaskToReadyList+0xd0>)
 8008fb6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008fb8:	4b1d      	ldr	r3, [pc, #116]	; (8009030 <prvAddNewTaskToReadyList+0xd0>)
 8008fba:	681a      	ldr	r2, [r3, #0]
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008fc4:	4b1b      	ldr	r3, [pc, #108]	; (8009034 <prvAddNewTaskToReadyList+0xd4>)
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	429a      	cmp	r2, r3
 8008fca:	d903      	bls.n	8008fd4 <prvAddNewTaskToReadyList+0x74>
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fd0:	4a18      	ldr	r2, [pc, #96]	; (8009034 <prvAddNewTaskToReadyList+0xd4>)
 8008fd2:	6013      	str	r3, [r2, #0]
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008fd8:	4613      	mov	r3, r2
 8008fda:	009b      	lsls	r3, r3, #2
 8008fdc:	4413      	add	r3, r2
 8008fde:	009b      	lsls	r3, r3, #2
 8008fe0:	4a15      	ldr	r2, [pc, #84]	; (8009038 <prvAddNewTaskToReadyList+0xd8>)
 8008fe2:	441a      	add	r2, r3
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	3304      	adds	r3, #4
 8008fe8:	4619      	mov	r1, r3
 8008fea:	4610      	mov	r0, r2
 8008fec:	f7ff f8fd 	bl	80081ea <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008ff0:	f001 fa40 	bl	800a474 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008ff4:	4b0d      	ldr	r3, [pc, #52]	; (800902c <prvAddNewTaskToReadyList+0xcc>)
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d00e      	beq.n	800901a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008ffc:	4b0a      	ldr	r3, [pc, #40]	; (8009028 <prvAddNewTaskToReadyList+0xc8>)
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009006:	429a      	cmp	r2, r3
 8009008:	d207      	bcs.n	800901a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800900a:	4b0c      	ldr	r3, [pc, #48]	; (800903c <prvAddNewTaskToReadyList+0xdc>)
 800900c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009010:	601a      	str	r2, [r3, #0]
 8009012:	f3bf 8f4f 	dsb	sy
 8009016:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800901a:	bf00      	nop
 800901c:	3708      	adds	r7, #8
 800901e:	46bd      	mov	sp, r7
 8009020:	bd80      	pop	{r7, pc}
 8009022:	bf00      	nop
 8009024:	2000195c 	.word	0x2000195c
 8009028:	20001488 	.word	0x20001488
 800902c:	20001968 	.word	0x20001968
 8009030:	20001978 	.word	0x20001978
 8009034:	20001964 	.word	0x20001964
 8009038:	2000148c 	.word	0x2000148c
 800903c:	e000ed04 	.word	0xe000ed04

08009040 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009040:	b580      	push	{r7, lr}
 8009042:	b084      	sub	sp, #16
 8009044:	af00      	add	r7, sp, #0
 8009046:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009048:	2300      	movs	r3, #0
 800904a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	2b00      	cmp	r3, #0
 8009050:	d017      	beq.n	8009082 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8009052:	4b13      	ldr	r3, [pc, #76]	; (80090a0 <vTaskDelay+0x60>)
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	2b00      	cmp	r3, #0
 8009058:	d00a      	beq.n	8009070 <vTaskDelay+0x30>
	__asm volatile
 800905a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800905e:	f383 8811 	msr	BASEPRI, r3
 8009062:	f3bf 8f6f 	isb	sy
 8009066:	f3bf 8f4f 	dsb	sy
 800906a:	60bb      	str	r3, [r7, #8]
}
 800906c:	bf00      	nop
 800906e:	e7fe      	b.n	800906e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8009070:	f000 f88a 	bl	8009188 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009074:	2100      	movs	r1, #0
 8009076:	6878      	ldr	r0, [r7, #4]
 8009078:	f000 fcfe 	bl	8009a78 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800907c:	f000 f892 	bl	80091a4 <xTaskResumeAll>
 8009080:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	2b00      	cmp	r3, #0
 8009086:	d107      	bne.n	8009098 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8009088:	4b06      	ldr	r3, [pc, #24]	; (80090a4 <vTaskDelay+0x64>)
 800908a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800908e:	601a      	str	r2, [r3, #0]
 8009090:	f3bf 8f4f 	dsb	sy
 8009094:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009098:	bf00      	nop
 800909a:	3710      	adds	r7, #16
 800909c:	46bd      	mov	sp, r7
 800909e:	bd80      	pop	{r7, pc}
 80090a0:	20001984 	.word	0x20001984
 80090a4:	e000ed04 	.word	0xe000ed04

080090a8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80090a8:	b580      	push	{r7, lr}
 80090aa:	b08a      	sub	sp, #40	; 0x28
 80090ac:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80090ae:	2300      	movs	r3, #0
 80090b0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80090b2:	2300      	movs	r3, #0
 80090b4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80090b6:	463a      	mov	r2, r7
 80090b8:	1d39      	adds	r1, r7, #4
 80090ba:	f107 0308 	add.w	r3, r7, #8
 80090be:	4618      	mov	r0, r3
 80090c0:	f7ff f832 	bl	8008128 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80090c4:	6839      	ldr	r1, [r7, #0]
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	68ba      	ldr	r2, [r7, #8]
 80090ca:	9202      	str	r2, [sp, #8]
 80090cc:	9301      	str	r3, [sp, #4]
 80090ce:	2300      	movs	r3, #0
 80090d0:	9300      	str	r3, [sp, #0]
 80090d2:	2300      	movs	r3, #0
 80090d4:	460a      	mov	r2, r1
 80090d6:	4924      	ldr	r1, [pc, #144]	; (8009168 <vTaskStartScheduler+0xc0>)
 80090d8:	4824      	ldr	r0, [pc, #144]	; (800916c <vTaskStartScheduler+0xc4>)
 80090da:	f7ff fdf9 	bl	8008cd0 <xTaskCreateStatic>
 80090de:	4603      	mov	r3, r0
 80090e0:	4a23      	ldr	r2, [pc, #140]	; (8009170 <vTaskStartScheduler+0xc8>)
 80090e2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80090e4:	4b22      	ldr	r3, [pc, #136]	; (8009170 <vTaskStartScheduler+0xc8>)
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	d002      	beq.n	80090f2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80090ec:	2301      	movs	r3, #1
 80090ee:	617b      	str	r3, [r7, #20]
 80090f0:	e001      	b.n	80090f6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80090f2:	2300      	movs	r3, #0
 80090f4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80090f6:	697b      	ldr	r3, [r7, #20]
 80090f8:	2b01      	cmp	r3, #1
 80090fa:	d102      	bne.n	8009102 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80090fc:	f000 fd10 	bl	8009b20 <xTimerCreateTimerTask>
 8009100:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8009102:	697b      	ldr	r3, [r7, #20]
 8009104:	2b01      	cmp	r3, #1
 8009106:	d11b      	bne.n	8009140 <vTaskStartScheduler+0x98>
	__asm volatile
 8009108:	f04f 0350 	mov.w	r3, #80	; 0x50
 800910c:	f383 8811 	msr	BASEPRI, r3
 8009110:	f3bf 8f6f 	isb	sy
 8009114:	f3bf 8f4f 	dsb	sy
 8009118:	613b      	str	r3, [r7, #16]
}
 800911a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800911c:	4b15      	ldr	r3, [pc, #84]	; (8009174 <vTaskStartScheduler+0xcc>)
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	3354      	adds	r3, #84	; 0x54
 8009122:	4a15      	ldr	r2, [pc, #84]	; (8009178 <vTaskStartScheduler+0xd0>)
 8009124:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009126:	4b15      	ldr	r3, [pc, #84]	; (800917c <vTaskStartScheduler+0xd4>)
 8009128:	f04f 32ff 	mov.w	r2, #4294967295
 800912c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800912e:	4b14      	ldr	r3, [pc, #80]	; (8009180 <vTaskStartScheduler+0xd8>)
 8009130:	2201      	movs	r2, #1
 8009132:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009134:	4b13      	ldr	r3, [pc, #76]	; (8009184 <vTaskStartScheduler+0xdc>)
 8009136:	2200      	movs	r2, #0
 8009138:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800913a:	f001 f8c9 	bl	800a2d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800913e:	e00e      	b.n	800915e <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009140:	697b      	ldr	r3, [r7, #20]
 8009142:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009146:	d10a      	bne.n	800915e <vTaskStartScheduler+0xb6>
	__asm volatile
 8009148:	f04f 0350 	mov.w	r3, #80	; 0x50
 800914c:	f383 8811 	msr	BASEPRI, r3
 8009150:	f3bf 8f6f 	isb	sy
 8009154:	f3bf 8f4f 	dsb	sy
 8009158:	60fb      	str	r3, [r7, #12]
}
 800915a:	bf00      	nop
 800915c:	e7fe      	b.n	800915c <vTaskStartScheduler+0xb4>
}
 800915e:	bf00      	nop
 8009160:	3718      	adds	r7, #24
 8009162:	46bd      	mov	sp, r7
 8009164:	bd80      	pop	{r7, pc}
 8009166:	bf00      	nop
 8009168:	0800b44c 	.word	0x0800b44c
 800916c:	080097ad 	.word	0x080097ad
 8009170:	20001980 	.word	0x20001980
 8009174:	20001488 	.word	0x20001488
 8009178:	20000014 	.word	0x20000014
 800917c:	2000197c 	.word	0x2000197c
 8009180:	20001968 	.word	0x20001968
 8009184:	20001960 	.word	0x20001960

08009188 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009188:	b480      	push	{r7}
 800918a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800918c:	4b04      	ldr	r3, [pc, #16]	; (80091a0 <vTaskSuspendAll+0x18>)
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	3301      	adds	r3, #1
 8009192:	4a03      	ldr	r2, [pc, #12]	; (80091a0 <vTaskSuspendAll+0x18>)
 8009194:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8009196:	bf00      	nop
 8009198:	46bd      	mov	sp, r7
 800919a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800919e:	4770      	bx	lr
 80091a0:	20001984 	.word	0x20001984

080091a4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80091a4:	b580      	push	{r7, lr}
 80091a6:	b084      	sub	sp, #16
 80091a8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80091aa:	2300      	movs	r3, #0
 80091ac:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80091ae:	2300      	movs	r3, #0
 80091b0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80091b2:	4b42      	ldr	r3, [pc, #264]	; (80092bc <xTaskResumeAll+0x118>)
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d10a      	bne.n	80091d0 <xTaskResumeAll+0x2c>
	__asm volatile
 80091ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091be:	f383 8811 	msr	BASEPRI, r3
 80091c2:	f3bf 8f6f 	isb	sy
 80091c6:	f3bf 8f4f 	dsb	sy
 80091ca:	603b      	str	r3, [r7, #0]
}
 80091cc:	bf00      	nop
 80091ce:	e7fe      	b.n	80091ce <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80091d0:	f001 f920 	bl	800a414 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80091d4:	4b39      	ldr	r3, [pc, #228]	; (80092bc <xTaskResumeAll+0x118>)
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	3b01      	subs	r3, #1
 80091da:	4a38      	ldr	r2, [pc, #224]	; (80092bc <xTaskResumeAll+0x118>)
 80091dc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80091de:	4b37      	ldr	r3, [pc, #220]	; (80092bc <xTaskResumeAll+0x118>)
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d162      	bne.n	80092ac <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80091e6:	4b36      	ldr	r3, [pc, #216]	; (80092c0 <xTaskResumeAll+0x11c>)
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d05e      	beq.n	80092ac <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80091ee:	e02f      	b.n	8009250 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80091f0:	4b34      	ldr	r3, [pc, #208]	; (80092c4 <xTaskResumeAll+0x120>)
 80091f2:	68db      	ldr	r3, [r3, #12]
 80091f4:	68db      	ldr	r3, [r3, #12]
 80091f6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	3318      	adds	r3, #24
 80091fc:	4618      	mov	r0, r3
 80091fe:	f7ff f851 	bl	80082a4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	3304      	adds	r3, #4
 8009206:	4618      	mov	r0, r3
 8009208:	f7ff f84c 	bl	80082a4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009210:	4b2d      	ldr	r3, [pc, #180]	; (80092c8 <xTaskResumeAll+0x124>)
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	429a      	cmp	r2, r3
 8009216:	d903      	bls.n	8009220 <xTaskResumeAll+0x7c>
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800921c:	4a2a      	ldr	r2, [pc, #168]	; (80092c8 <xTaskResumeAll+0x124>)
 800921e:	6013      	str	r3, [r2, #0]
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009224:	4613      	mov	r3, r2
 8009226:	009b      	lsls	r3, r3, #2
 8009228:	4413      	add	r3, r2
 800922a:	009b      	lsls	r3, r3, #2
 800922c:	4a27      	ldr	r2, [pc, #156]	; (80092cc <xTaskResumeAll+0x128>)
 800922e:	441a      	add	r2, r3
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	3304      	adds	r3, #4
 8009234:	4619      	mov	r1, r3
 8009236:	4610      	mov	r0, r2
 8009238:	f7fe ffd7 	bl	80081ea <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009240:	4b23      	ldr	r3, [pc, #140]	; (80092d0 <xTaskResumeAll+0x12c>)
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009246:	429a      	cmp	r2, r3
 8009248:	d302      	bcc.n	8009250 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800924a:	4b22      	ldr	r3, [pc, #136]	; (80092d4 <xTaskResumeAll+0x130>)
 800924c:	2201      	movs	r2, #1
 800924e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009250:	4b1c      	ldr	r3, [pc, #112]	; (80092c4 <xTaskResumeAll+0x120>)
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	2b00      	cmp	r3, #0
 8009256:	d1cb      	bne.n	80091f0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	2b00      	cmp	r3, #0
 800925c:	d001      	beq.n	8009262 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800925e:	f000 fb5f 	bl	8009920 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8009262:	4b1d      	ldr	r3, [pc, #116]	; (80092d8 <xTaskResumeAll+0x134>)
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	2b00      	cmp	r3, #0
 800926c:	d010      	beq.n	8009290 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800926e:	f000 f847 	bl	8009300 <xTaskIncrementTick>
 8009272:	4603      	mov	r3, r0
 8009274:	2b00      	cmp	r3, #0
 8009276:	d002      	beq.n	800927e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8009278:	4b16      	ldr	r3, [pc, #88]	; (80092d4 <xTaskResumeAll+0x130>)
 800927a:	2201      	movs	r2, #1
 800927c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	3b01      	subs	r3, #1
 8009282:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	2b00      	cmp	r3, #0
 8009288:	d1f1      	bne.n	800926e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800928a:	4b13      	ldr	r3, [pc, #76]	; (80092d8 <xTaskResumeAll+0x134>)
 800928c:	2200      	movs	r2, #0
 800928e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009290:	4b10      	ldr	r3, [pc, #64]	; (80092d4 <xTaskResumeAll+0x130>)
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	2b00      	cmp	r3, #0
 8009296:	d009      	beq.n	80092ac <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009298:	2301      	movs	r3, #1
 800929a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800929c:	4b0f      	ldr	r3, [pc, #60]	; (80092dc <xTaskResumeAll+0x138>)
 800929e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80092a2:	601a      	str	r2, [r3, #0]
 80092a4:	f3bf 8f4f 	dsb	sy
 80092a8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80092ac:	f001 f8e2 	bl	800a474 <vPortExitCritical>

	return xAlreadyYielded;
 80092b0:	68bb      	ldr	r3, [r7, #8]
}
 80092b2:	4618      	mov	r0, r3
 80092b4:	3710      	adds	r7, #16
 80092b6:	46bd      	mov	sp, r7
 80092b8:	bd80      	pop	{r7, pc}
 80092ba:	bf00      	nop
 80092bc:	20001984 	.word	0x20001984
 80092c0:	2000195c 	.word	0x2000195c
 80092c4:	2000191c 	.word	0x2000191c
 80092c8:	20001964 	.word	0x20001964
 80092cc:	2000148c 	.word	0x2000148c
 80092d0:	20001488 	.word	0x20001488
 80092d4:	20001970 	.word	0x20001970
 80092d8:	2000196c 	.word	0x2000196c
 80092dc:	e000ed04 	.word	0xe000ed04

080092e0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80092e0:	b480      	push	{r7}
 80092e2:	b083      	sub	sp, #12
 80092e4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80092e6:	4b05      	ldr	r3, [pc, #20]	; (80092fc <xTaskGetTickCount+0x1c>)
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80092ec:	687b      	ldr	r3, [r7, #4]
}
 80092ee:	4618      	mov	r0, r3
 80092f0:	370c      	adds	r7, #12
 80092f2:	46bd      	mov	sp, r7
 80092f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092f8:	4770      	bx	lr
 80092fa:	bf00      	nop
 80092fc:	20001960 	.word	0x20001960

08009300 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009300:	b580      	push	{r7, lr}
 8009302:	b086      	sub	sp, #24
 8009304:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009306:	2300      	movs	r3, #0
 8009308:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800930a:	4b4f      	ldr	r3, [pc, #316]	; (8009448 <xTaskIncrementTick+0x148>)
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	2b00      	cmp	r3, #0
 8009310:	f040 808f 	bne.w	8009432 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009314:	4b4d      	ldr	r3, [pc, #308]	; (800944c <xTaskIncrementTick+0x14c>)
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	3301      	adds	r3, #1
 800931a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800931c:	4a4b      	ldr	r2, [pc, #300]	; (800944c <xTaskIncrementTick+0x14c>)
 800931e:	693b      	ldr	r3, [r7, #16]
 8009320:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009322:	693b      	ldr	r3, [r7, #16]
 8009324:	2b00      	cmp	r3, #0
 8009326:	d120      	bne.n	800936a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8009328:	4b49      	ldr	r3, [pc, #292]	; (8009450 <xTaskIncrementTick+0x150>)
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	2b00      	cmp	r3, #0
 8009330:	d00a      	beq.n	8009348 <xTaskIncrementTick+0x48>
	__asm volatile
 8009332:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009336:	f383 8811 	msr	BASEPRI, r3
 800933a:	f3bf 8f6f 	isb	sy
 800933e:	f3bf 8f4f 	dsb	sy
 8009342:	603b      	str	r3, [r7, #0]
}
 8009344:	bf00      	nop
 8009346:	e7fe      	b.n	8009346 <xTaskIncrementTick+0x46>
 8009348:	4b41      	ldr	r3, [pc, #260]	; (8009450 <xTaskIncrementTick+0x150>)
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	60fb      	str	r3, [r7, #12]
 800934e:	4b41      	ldr	r3, [pc, #260]	; (8009454 <xTaskIncrementTick+0x154>)
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	4a3f      	ldr	r2, [pc, #252]	; (8009450 <xTaskIncrementTick+0x150>)
 8009354:	6013      	str	r3, [r2, #0]
 8009356:	4a3f      	ldr	r2, [pc, #252]	; (8009454 <xTaskIncrementTick+0x154>)
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	6013      	str	r3, [r2, #0]
 800935c:	4b3e      	ldr	r3, [pc, #248]	; (8009458 <xTaskIncrementTick+0x158>)
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	3301      	adds	r3, #1
 8009362:	4a3d      	ldr	r2, [pc, #244]	; (8009458 <xTaskIncrementTick+0x158>)
 8009364:	6013      	str	r3, [r2, #0]
 8009366:	f000 fadb 	bl	8009920 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800936a:	4b3c      	ldr	r3, [pc, #240]	; (800945c <xTaskIncrementTick+0x15c>)
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	693a      	ldr	r2, [r7, #16]
 8009370:	429a      	cmp	r2, r3
 8009372:	d349      	bcc.n	8009408 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009374:	4b36      	ldr	r3, [pc, #216]	; (8009450 <xTaskIncrementTick+0x150>)
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	2b00      	cmp	r3, #0
 800937c:	d104      	bne.n	8009388 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800937e:	4b37      	ldr	r3, [pc, #220]	; (800945c <xTaskIncrementTick+0x15c>)
 8009380:	f04f 32ff 	mov.w	r2, #4294967295
 8009384:	601a      	str	r2, [r3, #0]
					break;
 8009386:	e03f      	b.n	8009408 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009388:	4b31      	ldr	r3, [pc, #196]	; (8009450 <xTaskIncrementTick+0x150>)
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	68db      	ldr	r3, [r3, #12]
 800938e:	68db      	ldr	r3, [r3, #12]
 8009390:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009392:	68bb      	ldr	r3, [r7, #8]
 8009394:	685b      	ldr	r3, [r3, #4]
 8009396:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009398:	693a      	ldr	r2, [r7, #16]
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	429a      	cmp	r2, r3
 800939e:	d203      	bcs.n	80093a8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80093a0:	4a2e      	ldr	r2, [pc, #184]	; (800945c <xTaskIncrementTick+0x15c>)
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80093a6:	e02f      	b.n	8009408 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80093a8:	68bb      	ldr	r3, [r7, #8]
 80093aa:	3304      	adds	r3, #4
 80093ac:	4618      	mov	r0, r3
 80093ae:	f7fe ff79 	bl	80082a4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80093b2:	68bb      	ldr	r3, [r7, #8]
 80093b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d004      	beq.n	80093c4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80093ba:	68bb      	ldr	r3, [r7, #8]
 80093bc:	3318      	adds	r3, #24
 80093be:	4618      	mov	r0, r3
 80093c0:	f7fe ff70 	bl	80082a4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80093c4:	68bb      	ldr	r3, [r7, #8]
 80093c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80093c8:	4b25      	ldr	r3, [pc, #148]	; (8009460 <xTaskIncrementTick+0x160>)
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	429a      	cmp	r2, r3
 80093ce:	d903      	bls.n	80093d8 <xTaskIncrementTick+0xd8>
 80093d0:	68bb      	ldr	r3, [r7, #8]
 80093d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093d4:	4a22      	ldr	r2, [pc, #136]	; (8009460 <xTaskIncrementTick+0x160>)
 80093d6:	6013      	str	r3, [r2, #0]
 80093d8:	68bb      	ldr	r3, [r7, #8]
 80093da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80093dc:	4613      	mov	r3, r2
 80093de:	009b      	lsls	r3, r3, #2
 80093e0:	4413      	add	r3, r2
 80093e2:	009b      	lsls	r3, r3, #2
 80093e4:	4a1f      	ldr	r2, [pc, #124]	; (8009464 <xTaskIncrementTick+0x164>)
 80093e6:	441a      	add	r2, r3
 80093e8:	68bb      	ldr	r3, [r7, #8]
 80093ea:	3304      	adds	r3, #4
 80093ec:	4619      	mov	r1, r3
 80093ee:	4610      	mov	r0, r2
 80093f0:	f7fe fefb 	bl	80081ea <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80093f4:	68bb      	ldr	r3, [r7, #8]
 80093f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80093f8:	4b1b      	ldr	r3, [pc, #108]	; (8009468 <xTaskIncrementTick+0x168>)
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093fe:	429a      	cmp	r2, r3
 8009400:	d3b8      	bcc.n	8009374 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8009402:	2301      	movs	r3, #1
 8009404:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009406:	e7b5      	b.n	8009374 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009408:	4b17      	ldr	r3, [pc, #92]	; (8009468 <xTaskIncrementTick+0x168>)
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800940e:	4915      	ldr	r1, [pc, #84]	; (8009464 <xTaskIncrementTick+0x164>)
 8009410:	4613      	mov	r3, r2
 8009412:	009b      	lsls	r3, r3, #2
 8009414:	4413      	add	r3, r2
 8009416:	009b      	lsls	r3, r3, #2
 8009418:	440b      	add	r3, r1
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	2b01      	cmp	r3, #1
 800941e:	d901      	bls.n	8009424 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8009420:	2301      	movs	r3, #1
 8009422:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8009424:	4b11      	ldr	r3, [pc, #68]	; (800946c <xTaskIncrementTick+0x16c>)
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	2b00      	cmp	r3, #0
 800942a:	d007      	beq.n	800943c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800942c:	2301      	movs	r3, #1
 800942e:	617b      	str	r3, [r7, #20]
 8009430:	e004      	b.n	800943c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8009432:	4b0f      	ldr	r3, [pc, #60]	; (8009470 <xTaskIncrementTick+0x170>)
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	3301      	adds	r3, #1
 8009438:	4a0d      	ldr	r2, [pc, #52]	; (8009470 <xTaskIncrementTick+0x170>)
 800943a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800943c:	697b      	ldr	r3, [r7, #20]
}
 800943e:	4618      	mov	r0, r3
 8009440:	3718      	adds	r7, #24
 8009442:	46bd      	mov	sp, r7
 8009444:	bd80      	pop	{r7, pc}
 8009446:	bf00      	nop
 8009448:	20001984 	.word	0x20001984
 800944c:	20001960 	.word	0x20001960
 8009450:	20001914 	.word	0x20001914
 8009454:	20001918 	.word	0x20001918
 8009458:	20001974 	.word	0x20001974
 800945c:	2000197c 	.word	0x2000197c
 8009460:	20001964 	.word	0x20001964
 8009464:	2000148c 	.word	0x2000148c
 8009468:	20001488 	.word	0x20001488
 800946c:	20001970 	.word	0x20001970
 8009470:	2000196c 	.word	0x2000196c

08009474 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009474:	b480      	push	{r7}
 8009476:	b085      	sub	sp, #20
 8009478:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800947a:	4b2a      	ldr	r3, [pc, #168]	; (8009524 <vTaskSwitchContext+0xb0>)
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	2b00      	cmp	r3, #0
 8009480:	d003      	beq.n	800948a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009482:	4b29      	ldr	r3, [pc, #164]	; (8009528 <vTaskSwitchContext+0xb4>)
 8009484:	2201      	movs	r2, #1
 8009486:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009488:	e046      	b.n	8009518 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800948a:	4b27      	ldr	r3, [pc, #156]	; (8009528 <vTaskSwitchContext+0xb4>)
 800948c:	2200      	movs	r2, #0
 800948e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009490:	4b26      	ldr	r3, [pc, #152]	; (800952c <vTaskSwitchContext+0xb8>)
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	60fb      	str	r3, [r7, #12]
 8009496:	e010      	b.n	80094ba <vTaskSwitchContext+0x46>
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	2b00      	cmp	r3, #0
 800949c:	d10a      	bne.n	80094b4 <vTaskSwitchContext+0x40>
	__asm volatile
 800949e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094a2:	f383 8811 	msr	BASEPRI, r3
 80094a6:	f3bf 8f6f 	isb	sy
 80094aa:	f3bf 8f4f 	dsb	sy
 80094ae:	607b      	str	r3, [r7, #4]
}
 80094b0:	bf00      	nop
 80094b2:	e7fe      	b.n	80094b2 <vTaskSwitchContext+0x3e>
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	3b01      	subs	r3, #1
 80094b8:	60fb      	str	r3, [r7, #12]
 80094ba:	491d      	ldr	r1, [pc, #116]	; (8009530 <vTaskSwitchContext+0xbc>)
 80094bc:	68fa      	ldr	r2, [r7, #12]
 80094be:	4613      	mov	r3, r2
 80094c0:	009b      	lsls	r3, r3, #2
 80094c2:	4413      	add	r3, r2
 80094c4:	009b      	lsls	r3, r3, #2
 80094c6:	440b      	add	r3, r1
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d0e4      	beq.n	8009498 <vTaskSwitchContext+0x24>
 80094ce:	68fa      	ldr	r2, [r7, #12]
 80094d0:	4613      	mov	r3, r2
 80094d2:	009b      	lsls	r3, r3, #2
 80094d4:	4413      	add	r3, r2
 80094d6:	009b      	lsls	r3, r3, #2
 80094d8:	4a15      	ldr	r2, [pc, #84]	; (8009530 <vTaskSwitchContext+0xbc>)
 80094da:	4413      	add	r3, r2
 80094dc:	60bb      	str	r3, [r7, #8]
 80094de:	68bb      	ldr	r3, [r7, #8]
 80094e0:	685b      	ldr	r3, [r3, #4]
 80094e2:	685a      	ldr	r2, [r3, #4]
 80094e4:	68bb      	ldr	r3, [r7, #8]
 80094e6:	605a      	str	r2, [r3, #4]
 80094e8:	68bb      	ldr	r3, [r7, #8]
 80094ea:	685a      	ldr	r2, [r3, #4]
 80094ec:	68bb      	ldr	r3, [r7, #8]
 80094ee:	3308      	adds	r3, #8
 80094f0:	429a      	cmp	r2, r3
 80094f2:	d104      	bne.n	80094fe <vTaskSwitchContext+0x8a>
 80094f4:	68bb      	ldr	r3, [r7, #8]
 80094f6:	685b      	ldr	r3, [r3, #4]
 80094f8:	685a      	ldr	r2, [r3, #4]
 80094fa:	68bb      	ldr	r3, [r7, #8]
 80094fc:	605a      	str	r2, [r3, #4]
 80094fe:	68bb      	ldr	r3, [r7, #8]
 8009500:	685b      	ldr	r3, [r3, #4]
 8009502:	68db      	ldr	r3, [r3, #12]
 8009504:	4a0b      	ldr	r2, [pc, #44]	; (8009534 <vTaskSwitchContext+0xc0>)
 8009506:	6013      	str	r3, [r2, #0]
 8009508:	4a08      	ldr	r2, [pc, #32]	; (800952c <vTaskSwitchContext+0xb8>)
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800950e:	4b09      	ldr	r3, [pc, #36]	; (8009534 <vTaskSwitchContext+0xc0>)
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	3354      	adds	r3, #84	; 0x54
 8009514:	4a08      	ldr	r2, [pc, #32]	; (8009538 <vTaskSwitchContext+0xc4>)
 8009516:	6013      	str	r3, [r2, #0]
}
 8009518:	bf00      	nop
 800951a:	3714      	adds	r7, #20
 800951c:	46bd      	mov	sp, r7
 800951e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009522:	4770      	bx	lr
 8009524:	20001984 	.word	0x20001984
 8009528:	20001970 	.word	0x20001970
 800952c:	20001964 	.word	0x20001964
 8009530:	2000148c 	.word	0x2000148c
 8009534:	20001488 	.word	0x20001488
 8009538:	20000014 	.word	0x20000014

0800953c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800953c:	b580      	push	{r7, lr}
 800953e:	b084      	sub	sp, #16
 8009540:	af00      	add	r7, sp, #0
 8009542:	6078      	str	r0, [r7, #4]
 8009544:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	2b00      	cmp	r3, #0
 800954a:	d10a      	bne.n	8009562 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800954c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009550:	f383 8811 	msr	BASEPRI, r3
 8009554:	f3bf 8f6f 	isb	sy
 8009558:	f3bf 8f4f 	dsb	sy
 800955c:	60fb      	str	r3, [r7, #12]
}
 800955e:	bf00      	nop
 8009560:	e7fe      	b.n	8009560 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009562:	4b07      	ldr	r3, [pc, #28]	; (8009580 <vTaskPlaceOnEventList+0x44>)
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	3318      	adds	r3, #24
 8009568:	4619      	mov	r1, r3
 800956a:	6878      	ldr	r0, [r7, #4]
 800956c:	f7fe fe61 	bl	8008232 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009570:	2101      	movs	r1, #1
 8009572:	6838      	ldr	r0, [r7, #0]
 8009574:	f000 fa80 	bl	8009a78 <prvAddCurrentTaskToDelayedList>
}
 8009578:	bf00      	nop
 800957a:	3710      	adds	r7, #16
 800957c:	46bd      	mov	sp, r7
 800957e:	bd80      	pop	{r7, pc}
 8009580:	20001488 	.word	0x20001488

08009584 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009584:	b580      	push	{r7, lr}
 8009586:	b086      	sub	sp, #24
 8009588:	af00      	add	r7, sp, #0
 800958a:	60f8      	str	r0, [r7, #12]
 800958c:	60b9      	str	r1, [r7, #8]
 800958e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	2b00      	cmp	r3, #0
 8009594:	d10a      	bne.n	80095ac <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8009596:	f04f 0350 	mov.w	r3, #80	; 0x50
 800959a:	f383 8811 	msr	BASEPRI, r3
 800959e:	f3bf 8f6f 	isb	sy
 80095a2:	f3bf 8f4f 	dsb	sy
 80095a6:	617b      	str	r3, [r7, #20]
}
 80095a8:	bf00      	nop
 80095aa:	e7fe      	b.n	80095aa <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80095ac:	4b0a      	ldr	r3, [pc, #40]	; (80095d8 <vTaskPlaceOnEventListRestricted+0x54>)
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	3318      	adds	r3, #24
 80095b2:	4619      	mov	r1, r3
 80095b4:	68f8      	ldr	r0, [r7, #12]
 80095b6:	f7fe fe18 	bl	80081ea <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d002      	beq.n	80095c6 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80095c0:	f04f 33ff 	mov.w	r3, #4294967295
 80095c4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80095c6:	6879      	ldr	r1, [r7, #4]
 80095c8:	68b8      	ldr	r0, [r7, #8]
 80095ca:	f000 fa55 	bl	8009a78 <prvAddCurrentTaskToDelayedList>
	}
 80095ce:	bf00      	nop
 80095d0:	3718      	adds	r7, #24
 80095d2:	46bd      	mov	sp, r7
 80095d4:	bd80      	pop	{r7, pc}
 80095d6:	bf00      	nop
 80095d8:	20001488 	.word	0x20001488

080095dc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80095dc:	b580      	push	{r7, lr}
 80095de:	b086      	sub	sp, #24
 80095e0:	af00      	add	r7, sp, #0
 80095e2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	68db      	ldr	r3, [r3, #12]
 80095e8:	68db      	ldr	r3, [r3, #12]
 80095ea:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80095ec:	693b      	ldr	r3, [r7, #16]
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d10a      	bne.n	8009608 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80095f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095f6:	f383 8811 	msr	BASEPRI, r3
 80095fa:	f3bf 8f6f 	isb	sy
 80095fe:	f3bf 8f4f 	dsb	sy
 8009602:	60fb      	str	r3, [r7, #12]
}
 8009604:	bf00      	nop
 8009606:	e7fe      	b.n	8009606 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009608:	693b      	ldr	r3, [r7, #16]
 800960a:	3318      	adds	r3, #24
 800960c:	4618      	mov	r0, r3
 800960e:	f7fe fe49 	bl	80082a4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009612:	4b1e      	ldr	r3, [pc, #120]	; (800968c <xTaskRemoveFromEventList+0xb0>)
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	2b00      	cmp	r3, #0
 8009618:	d11d      	bne.n	8009656 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800961a:	693b      	ldr	r3, [r7, #16]
 800961c:	3304      	adds	r3, #4
 800961e:	4618      	mov	r0, r3
 8009620:	f7fe fe40 	bl	80082a4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009624:	693b      	ldr	r3, [r7, #16]
 8009626:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009628:	4b19      	ldr	r3, [pc, #100]	; (8009690 <xTaskRemoveFromEventList+0xb4>)
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	429a      	cmp	r2, r3
 800962e:	d903      	bls.n	8009638 <xTaskRemoveFromEventList+0x5c>
 8009630:	693b      	ldr	r3, [r7, #16]
 8009632:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009634:	4a16      	ldr	r2, [pc, #88]	; (8009690 <xTaskRemoveFromEventList+0xb4>)
 8009636:	6013      	str	r3, [r2, #0]
 8009638:	693b      	ldr	r3, [r7, #16]
 800963a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800963c:	4613      	mov	r3, r2
 800963e:	009b      	lsls	r3, r3, #2
 8009640:	4413      	add	r3, r2
 8009642:	009b      	lsls	r3, r3, #2
 8009644:	4a13      	ldr	r2, [pc, #76]	; (8009694 <xTaskRemoveFromEventList+0xb8>)
 8009646:	441a      	add	r2, r3
 8009648:	693b      	ldr	r3, [r7, #16]
 800964a:	3304      	adds	r3, #4
 800964c:	4619      	mov	r1, r3
 800964e:	4610      	mov	r0, r2
 8009650:	f7fe fdcb 	bl	80081ea <vListInsertEnd>
 8009654:	e005      	b.n	8009662 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009656:	693b      	ldr	r3, [r7, #16]
 8009658:	3318      	adds	r3, #24
 800965a:	4619      	mov	r1, r3
 800965c:	480e      	ldr	r0, [pc, #56]	; (8009698 <xTaskRemoveFromEventList+0xbc>)
 800965e:	f7fe fdc4 	bl	80081ea <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009662:	693b      	ldr	r3, [r7, #16]
 8009664:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009666:	4b0d      	ldr	r3, [pc, #52]	; (800969c <xTaskRemoveFromEventList+0xc0>)
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800966c:	429a      	cmp	r2, r3
 800966e:	d905      	bls.n	800967c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009670:	2301      	movs	r3, #1
 8009672:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009674:	4b0a      	ldr	r3, [pc, #40]	; (80096a0 <xTaskRemoveFromEventList+0xc4>)
 8009676:	2201      	movs	r2, #1
 8009678:	601a      	str	r2, [r3, #0]
 800967a:	e001      	b.n	8009680 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800967c:	2300      	movs	r3, #0
 800967e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009680:	697b      	ldr	r3, [r7, #20]
}
 8009682:	4618      	mov	r0, r3
 8009684:	3718      	adds	r7, #24
 8009686:	46bd      	mov	sp, r7
 8009688:	bd80      	pop	{r7, pc}
 800968a:	bf00      	nop
 800968c:	20001984 	.word	0x20001984
 8009690:	20001964 	.word	0x20001964
 8009694:	2000148c 	.word	0x2000148c
 8009698:	2000191c 	.word	0x2000191c
 800969c:	20001488 	.word	0x20001488
 80096a0:	20001970 	.word	0x20001970

080096a4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80096a4:	b480      	push	{r7}
 80096a6:	b083      	sub	sp, #12
 80096a8:	af00      	add	r7, sp, #0
 80096aa:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80096ac:	4b06      	ldr	r3, [pc, #24]	; (80096c8 <vTaskInternalSetTimeOutState+0x24>)
 80096ae:	681a      	ldr	r2, [r3, #0]
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80096b4:	4b05      	ldr	r3, [pc, #20]	; (80096cc <vTaskInternalSetTimeOutState+0x28>)
 80096b6:	681a      	ldr	r2, [r3, #0]
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	605a      	str	r2, [r3, #4]
}
 80096bc:	bf00      	nop
 80096be:	370c      	adds	r7, #12
 80096c0:	46bd      	mov	sp, r7
 80096c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096c6:	4770      	bx	lr
 80096c8:	20001974 	.word	0x20001974
 80096cc:	20001960 	.word	0x20001960

080096d0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80096d0:	b580      	push	{r7, lr}
 80096d2:	b088      	sub	sp, #32
 80096d4:	af00      	add	r7, sp, #0
 80096d6:	6078      	str	r0, [r7, #4]
 80096d8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	2b00      	cmp	r3, #0
 80096de:	d10a      	bne.n	80096f6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80096e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096e4:	f383 8811 	msr	BASEPRI, r3
 80096e8:	f3bf 8f6f 	isb	sy
 80096ec:	f3bf 8f4f 	dsb	sy
 80096f0:	613b      	str	r3, [r7, #16]
}
 80096f2:	bf00      	nop
 80096f4:	e7fe      	b.n	80096f4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80096f6:	683b      	ldr	r3, [r7, #0]
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	d10a      	bne.n	8009712 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80096fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009700:	f383 8811 	msr	BASEPRI, r3
 8009704:	f3bf 8f6f 	isb	sy
 8009708:	f3bf 8f4f 	dsb	sy
 800970c:	60fb      	str	r3, [r7, #12]
}
 800970e:	bf00      	nop
 8009710:	e7fe      	b.n	8009710 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8009712:	f000 fe7f 	bl	800a414 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009716:	4b1d      	ldr	r3, [pc, #116]	; (800978c <xTaskCheckForTimeOut+0xbc>)
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	685b      	ldr	r3, [r3, #4]
 8009720:	69ba      	ldr	r2, [r7, #24]
 8009722:	1ad3      	subs	r3, r2, r3
 8009724:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009726:	683b      	ldr	r3, [r7, #0]
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800972e:	d102      	bne.n	8009736 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009730:	2300      	movs	r3, #0
 8009732:	61fb      	str	r3, [r7, #28]
 8009734:	e023      	b.n	800977e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	681a      	ldr	r2, [r3, #0]
 800973a:	4b15      	ldr	r3, [pc, #84]	; (8009790 <xTaskCheckForTimeOut+0xc0>)
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	429a      	cmp	r2, r3
 8009740:	d007      	beq.n	8009752 <xTaskCheckForTimeOut+0x82>
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	685b      	ldr	r3, [r3, #4]
 8009746:	69ba      	ldr	r2, [r7, #24]
 8009748:	429a      	cmp	r2, r3
 800974a:	d302      	bcc.n	8009752 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800974c:	2301      	movs	r3, #1
 800974e:	61fb      	str	r3, [r7, #28]
 8009750:	e015      	b.n	800977e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009752:	683b      	ldr	r3, [r7, #0]
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	697a      	ldr	r2, [r7, #20]
 8009758:	429a      	cmp	r2, r3
 800975a:	d20b      	bcs.n	8009774 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800975c:	683b      	ldr	r3, [r7, #0]
 800975e:	681a      	ldr	r2, [r3, #0]
 8009760:	697b      	ldr	r3, [r7, #20]
 8009762:	1ad2      	subs	r2, r2, r3
 8009764:	683b      	ldr	r3, [r7, #0]
 8009766:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009768:	6878      	ldr	r0, [r7, #4]
 800976a:	f7ff ff9b 	bl	80096a4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800976e:	2300      	movs	r3, #0
 8009770:	61fb      	str	r3, [r7, #28]
 8009772:	e004      	b.n	800977e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8009774:	683b      	ldr	r3, [r7, #0]
 8009776:	2200      	movs	r2, #0
 8009778:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800977a:	2301      	movs	r3, #1
 800977c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800977e:	f000 fe79 	bl	800a474 <vPortExitCritical>

	return xReturn;
 8009782:	69fb      	ldr	r3, [r7, #28]
}
 8009784:	4618      	mov	r0, r3
 8009786:	3720      	adds	r7, #32
 8009788:	46bd      	mov	sp, r7
 800978a:	bd80      	pop	{r7, pc}
 800978c:	20001960 	.word	0x20001960
 8009790:	20001974 	.word	0x20001974

08009794 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009794:	b480      	push	{r7}
 8009796:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009798:	4b03      	ldr	r3, [pc, #12]	; (80097a8 <vTaskMissedYield+0x14>)
 800979a:	2201      	movs	r2, #1
 800979c:	601a      	str	r2, [r3, #0]
}
 800979e:	bf00      	nop
 80097a0:	46bd      	mov	sp, r7
 80097a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097a6:	4770      	bx	lr
 80097a8:	20001970 	.word	0x20001970

080097ac <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80097ac:	b580      	push	{r7, lr}
 80097ae:	b082      	sub	sp, #8
 80097b0:	af00      	add	r7, sp, #0
 80097b2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80097b4:	f000 f852 	bl	800985c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80097b8:	4b06      	ldr	r3, [pc, #24]	; (80097d4 <prvIdleTask+0x28>)
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	2b01      	cmp	r3, #1
 80097be:	d9f9      	bls.n	80097b4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80097c0:	4b05      	ldr	r3, [pc, #20]	; (80097d8 <prvIdleTask+0x2c>)
 80097c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80097c6:	601a      	str	r2, [r3, #0]
 80097c8:	f3bf 8f4f 	dsb	sy
 80097cc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80097d0:	e7f0      	b.n	80097b4 <prvIdleTask+0x8>
 80097d2:	bf00      	nop
 80097d4:	2000148c 	.word	0x2000148c
 80097d8:	e000ed04 	.word	0xe000ed04

080097dc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80097dc:	b580      	push	{r7, lr}
 80097de:	b082      	sub	sp, #8
 80097e0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80097e2:	2300      	movs	r3, #0
 80097e4:	607b      	str	r3, [r7, #4]
 80097e6:	e00c      	b.n	8009802 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80097e8:	687a      	ldr	r2, [r7, #4]
 80097ea:	4613      	mov	r3, r2
 80097ec:	009b      	lsls	r3, r3, #2
 80097ee:	4413      	add	r3, r2
 80097f0:	009b      	lsls	r3, r3, #2
 80097f2:	4a12      	ldr	r2, [pc, #72]	; (800983c <prvInitialiseTaskLists+0x60>)
 80097f4:	4413      	add	r3, r2
 80097f6:	4618      	mov	r0, r3
 80097f8:	f7fe fcca 	bl	8008190 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	3301      	adds	r3, #1
 8009800:	607b      	str	r3, [r7, #4]
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	2b37      	cmp	r3, #55	; 0x37
 8009806:	d9ef      	bls.n	80097e8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009808:	480d      	ldr	r0, [pc, #52]	; (8009840 <prvInitialiseTaskLists+0x64>)
 800980a:	f7fe fcc1 	bl	8008190 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800980e:	480d      	ldr	r0, [pc, #52]	; (8009844 <prvInitialiseTaskLists+0x68>)
 8009810:	f7fe fcbe 	bl	8008190 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009814:	480c      	ldr	r0, [pc, #48]	; (8009848 <prvInitialiseTaskLists+0x6c>)
 8009816:	f7fe fcbb 	bl	8008190 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800981a:	480c      	ldr	r0, [pc, #48]	; (800984c <prvInitialiseTaskLists+0x70>)
 800981c:	f7fe fcb8 	bl	8008190 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009820:	480b      	ldr	r0, [pc, #44]	; (8009850 <prvInitialiseTaskLists+0x74>)
 8009822:	f7fe fcb5 	bl	8008190 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009826:	4b0b      	ldr	r3, [pc, #44]	; (8009854 <prvInitialiseTaskLists+0x78>)
 8009828:	4a05      	ldr	r2, [pc, #20]	; (8009840 <prvInitialiseTaskLists+0x64>)
 800982a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800982c:	4b0a      	ldr	r3, [pc, #40]	; (8009858 <prvInitialiseTaskLists+0x7c>)
 800982e:	4a05      	ldr	r2, [pc, #20]	; (8009844 <prvInitialiseTaskLists+0x68>)
 8009830:	601a      	str	r2, [r3, #0]
}
 8009832:	bf00      	nop
 8009834:	3708      	adds	r7, #8
 8009836:	46bd      	mov	sp, r7
 8009838:	bd80      	pop	{r7, pc}
 800983a:	bf00      	nop
 800983c:	2000148c 	.word	0x2000148c
 8009840:	200018ec 	.word	0x200018ec
 8009844:	20001900 	.word	0x20001900
 8009848:	2000191c 	.word	0x2000191c
 800984c:	20001930 	.word	0x20001930
 8009850:	20001948 	.word	0x20001948
 8009854:	20001914 	.word	0x20001914
 8009858:	20001918 	.word	0x20001918

0800985c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800985c:	b580      	push	{r7, lr}
 800985e:	b082      	sub	sp, #8
 8009860:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009862:	e019      	b.n	8009898 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009864:	f000 fdd6 	bl	800a414 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009868:	4b10      	ldr	r3, [pc, #64]	; (80098ac <prvCheckTasksWaitingTermination+0x50>)
 800986a:	68db      	ldr	r3, [r3, #12]
 800986c:	68db      	ldr	r3, [r3, #12]
 800986e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	3304      	adds	r3, #4
 8009874:	4618      	mov	r0, r3
 8009876:	f7fe fd15 	bl	80082a4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800987a:	4b0d      	ldr	r3, [pc, #52]	; (80098b0 <prvCheckTasksWaitingTermination+0x54>)
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	3b01      	subs	r3, #1
 8009880:	4a0b      	ldr	r2, [pc, #44]	; (80098b0 <prvCheckTasksWaitingTermination+0x54>)
 8009882:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009884:	4b0b      	ldr	r3, [pc, #44]	; (80098b4 <prvCheckTasksWaitingTermination+0x58>)
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	3b01      	subs	r3, #1
 800988a:	4a0a      	ldr	r2, [pc, #40]	; (80098b4 <prvCheckTasksWaitingTermination+0x58>)
 800988c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800988e:	f000 fdf1 	bl	800a474 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009892:	6878      	ldr	r0, [r7, #4]
 8009894:	f000 f810 	bl	80098b8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009898:	4b06      	ldr	r3, [pc, #24]	; (80098b4 <prvCheckTasksWaitingTermination+0x58>)
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	2b00      	cmp	r3, #0
 800989e:	d1e1      	bne.n	8009864 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80098a0:	bf00      	nop
 80098a2:	bf00      	nop
 80098a4:	3708      	adds	r7, #8
 80098a6:	46bd      	mov	sp, r7
 80098a8:	bd80      	pop	{r7, pc}
 80098aa:	bf00      	nop
 80098ac:	20001930 	.word	0x20001930
 80098b0:	2000195c 	.word	0x2000195c
 80098b4:	20001944 	.word	0x20001944

080098b8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80098b8:	b580      	push	{r7, lr}
 80098ba:	b084      	sub	sp, #16
 80098bc:	af00      	add	r7, sp, #0
 80098be:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	3354      	adds	r3, #84	; 0x54
 80098c4:	4618      	mov	r0, r3
 80098c6:	f001 fbcd 	bl	800b064 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d108      	bne.n	80098e6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80098d8:	4618      	mov	r0, r3
 80098da:	f000 ff89 	bl	800a7f0 <vPortFree>
				vPortFree( pxTCB );
 80098de:	6878      	ldr	r0, [r7, #4]
 80098e0:	f000 ff86 	bl	800a7f0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80098e4:	e018      	b.n	8009918 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80098ec:	2b01      	cmp	r3, #1
 80098ee:	d103      	bne.n	80098f8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80098f0:	6878      	ldr	r0, [r7, #4]
 80098f2:	f000 ff7d 	bl	800a7f0 <vPortFree>
	}
 80098f6:	e00f      	b.n	8009918 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80098fe:	2b02      	cmp	r3, #2
 8009900:	d00a      	beq.n	8009918 <prvDeleteTCB+0x60>
	__asm volatile
 8009902:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009906:	f383 8811 	msr	BASEPRI, r3
 800990a:	f3bf 8f6f 	isb	sy
 800990e:	f3bf 8f4f 	dsb	sy
 8009912:	60fb      	str	r3, [r7, #12]
}
 8009914:	bf00      	nop
 8009916:	e7fe      	b.n	8009916 <prvDeleteTCB+0x5e>
	}
 8009918:	bf00      	nop
 800991a:	3710      	adds	r7, #16
 800991c:	46bd      	mov	sp, r7
 800991e:	bd80      	pop	{r7, pc}

08009920 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009920:	b480      	push	{r7}
 8009922:	b083      	sub	sp, #12
 8009924:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009926:	4b0c      	ldr	r3, [pc, #48]	; (8009958 <prvResetNextTaskUnblockTime+0x38>)
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	2b00      	cmp	r3, #0
 800992e:	d104      	bne.n	800993a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009930:	4b0a      	ldr	r3, [pc, #40]	; (800995c <prvResetNextTaskUnblockTime+0x3c>)
 8009932:	f04f 32ff 	mov.w	r2, #4294967295
 8009936:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009938:	e008      	b.n	800994c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800993a:	4b07      	ldr	r3, [pc, #28]	; (8009958 <prvResetNextTaskUnblockTime+0x38>)
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	68db      	ldr	r3, [r3, #12]
 8009940:	68db      	ldr	r3, [r3, #12]
 8009942:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	685b      	ldr	r3, [r3, #4]
 8009948:	4a04      	ldr	r2, [pc, #16]	; (800995c <prvResetNextTaskUnblockTime+0x3c>)
 800994a:	6013      	str	r3, [r2, #0]
}
 800994c:	bf00      	nop
 800994e:	370c      	adds	r7, #12
 8009950:	46bd      	mov	sp, r7
 8009952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009956:	4770      	bx	lr
 8009958:	20001914 	.word	0x20001914
 800995c:	2000197c 	.word	0x2000197c

08009960 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009960:	b480      	push	{r7}
 8009962:	b083      	sub	sp, #12
 8009964:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009966:	4b0b      	ldr	r3, [pc, #44]	; (8009994 <xTaskGetSchedulerState+0x34>)
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	2b00      	cmp	r3, #0
 800996c:	d102      	bne.n	8009974 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800996e:	2301      	movs	r3, #1
 8009970:	607b      	str	r3, [r7, #4]
 8009972:	e008      	b.n	8009986 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009974:	4b08      	ldr	r3, [pc, #32]	; (8009998 <xTaskGetSchedulerState+0x38>)
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	2b00      	cmp	r3, #0
 800997a:	d102      	bne.n	8009982 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800997c:	2302      	movs	r3, #2
 800997e:	607b      	str	r3, [r7, #4]
 8009980:	e001      	b.n	8009986 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009982:	2300      	movs	r3, #0
 8009984:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009986:	687b      	ldr	r3, [r7, #4]
	}
 8009988:	4618      	mov	r0, r3
 800998a:	370c      	adds	r7, #12
 800998c:	46bd      	mov	sp, r7
 800998e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009992:	4770      	bx	lr
 8009994:	20001968 	.word	0x20001968
 8009998:	20001984 	.word	0x20001984

0800999c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800999c:	b580      	push	{r7, lr}
 800999e:	b086      	sub	sp, #24
 80099a0:	af00      	add	r7, sp, #0
 80099a2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80099a8:	2300      	movs	r3, #0
 80099aa:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	d056      	beq.n	8009a60 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80099b2:	4b2e      	ldr	r3, [pc, #184]	; (8009a6c <xTaskPriorityDisinherit+0xd0>)
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	693a      	ldr	r2, [r7, #16]
 80099b8:	429a      	cmp	r2, r3
 80099ba:	d00a      	beq.n	80099d2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80099bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099c0:	f383 8811 	msr	BASEPRI, r3
 80099c4:	f3bf 8f6f 	isb	sy
 80099c8:	f3bf 8f4f 	dsb	sy
 80099cc:	60fb      	str	r3, [r7, #12]
}
 80099ce:	bf00      	nop
 80099d0:	e7fe      	b.n	80099d0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80099d2:	693b      	ldr	r3, [r7, #16]
 80099d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	d10a      	bne.n	80099f0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80099da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099de:	f383 8811 	msr	BASEPRI, r3
 80099e2:	f3bf 8f6f 	isb	sy
 80099e6:	f3bf 8f4f 	dsb	sy
 80099ea:	60bb      	str	r3, [r7, #8]
}
 80099ec:	bf00      	nop
 80099ee:	e7fe      	b.n	80099ee <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80099f0:	693b      	ldr	r3, [r7, #16]
 80099f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80099f4:	1e5a      	subs	r2, r3, #1
 80099f6:	693b      	ldr	r3, [r7, #16]
 80099f8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80099fa:	693b      	ldr	r3, [r7, #16]
 80099fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80099fe:	693b      	ldr	r3, [r7, #16]
 8009a00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009a02:	429a      	cmp	r2, r3
 8009a04:	d02c      	beq.n	8009a60 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009a06:	693b      	ldr	r3, [r7, #16]
 8009a08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d128      	bne.n	8009a60 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009a0e:	693b      	ldr	r3, [r7, #16]
 8009a10:	3304      	adds	r3, #4
 8009a12:	4618      	mov	r0, r3
 8009a14:	f7fe fc46 	bl	80082a4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009a18:	693b      	ldr	r3, [r7, #16]
 8009a1a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009a1c:	693b      	ldr	r3, [r7, #16]
 8009a1e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009a20:	693b      	ldr	r3, [r7, #16]
 8009a22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a24:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009a28:	693b      	ldr	r3, [r7, #16]
 8009a2a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009a2c:	693b      	ldr	r3, [r7, #16]
 8009a2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a30:	4b0f      	ldr	r3, [pc, #60]	; (8009a70 <xTaskPriorityDisinherit+0xd4>)
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	429a      	cmp	r2, r3
 8009a36:	d903      	bls.n	8009a40 <xTaskPriorityDisinherit+0xa4>
 8009a38:	693b      	ldr	r3, [r7, #16]
 8009a3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a3c:	4a0c      	ldr	r2, [pc, #48]	; (8009a70 <xTaskPriorityDisinherit+0xd4>)
 8009a3e:	6013      	str	r3, [r2, #0]
 8009a40:	693b      	ldr	r3, [r7, #16]
 8009a42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a44:	4613      	mov	r3, r2
 8009a46:	009b      	lsls	r3, r3, #2
 8009a48:	4413      	add	r3, r2
 8009a4a:	009b      	lsls	r3, r3, #2
 8009a4c:	4a09      	ldr	r2, [pc, #36]	; (8009a74 <xTaskPriorityDisinherit+0xd8>)
 8009a4e:	441a      	add	r2, r3
 8009a50:	693b      	ldr	r3, [r7, #16]
 8009a52:	3304      	adds	r3, #4
 8009a54:	4619      	mov	r1, r3
 8009a56:	4610      	mov	r0, r2
 8009a58:	f7fe fbc7 	bl	80081ea <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009a5c:	2301      	movs	r3, #1
 8009a5e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009a60:	697b      	ldr	r3, [r7, #20]
	}
 8009a62:	4618      	mov	r0, r3
 8009a64:	3718      	adds	r7, #24
 8009a66:	46bd      	mov	sp, r7
 8009a68:	bd80      	pop	{r7, pc}
 8009a6a:	bf00      	nop
 8009a6c:	20001488 	.word	0x20001488
 8009a70:	20001964 	.word	0x20001964
 8009a74:	2000148c 	.word	0x2000148c

08009a78 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009a78:	b580      	push	{r7, lr}
 8009a7a:	b084      	sub	sp, #16
 8009a7c:	af00      	add	r7, sp, #0
 8009a7e:	6078      	str	r0, [r7, #4]
 8009a80:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009a82:	4b21      	ldr	r3, [pc, #132]	; (8009b08 <prvAddCurrentTaskToDelayedList+0x90>)
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009a88:	4b20      	ldr	r3, [pc, #128]	; (8009b0c <prvAddCurrentTaskToDelayedList+0x94>)
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	3304      	adds	r3, #4
 8009a8e:	4618      	mov	r0, r3
 8009a90:	f7fe fc08 	bl	80082a4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a9a:	d10a      	bne.n	8009ab2 <prvAddCurrentTaskToDelayedList+0x3a>
 8009a9c:	683b      	ldr	r3, [r7, #0]
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d007      	beq.n	8009ab2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009aa2:	4b1a      	ldr	r3, [pc, #104]	; (8009b0c <prvAddCurrentTaskToDelayedList+0x94>)
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	3304      	adds	r3, #4
 8009aa8:	4619      	mov	r1, r3
 8009aaa:	4819      	ldr	r0, [pc, #100]	; (8009b10 <prvAddCurrentTaskToDelayedList+0x98>)
 8009aac:	f7fe fb9d 	bl	80081ea <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009ab0:	e026      	b.n	8009b00 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009ab2:	68fa      	ldr	r2, [r7, #12]
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	4413      	add	r3, r2
 8009ab8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009aba:	4b14      	ldr	r3, [pc, #80]	; (8009b0c <prvAddCurrentTaskToDelayedList+0x94>)
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	68ba      	ldr	r2, [r7, #8]
 8009ac0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009ac2:	68ba      	ldr	r2, [r7, #8]
 8009ac4:	68fb      	ldr	r3, [r7, #12]
 8009ac6:	429a      	cmp	r2, r3
 8009ac8:	d209      	bcs.n	8009ade <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009aca:	4b12      	ldr	r3, [pc, #72]	; (8009b14 <prvAddCurrentTaskToDelayedList+0x9c>)
 8009acc:	681a      	ldr	r2, [r3, #0]
 8009ace:	4b0f      	ldr	r3, [pc, #60]	; (8009b0c <prvAddCurrentTaskToDelayedList+0x94>)
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	3304      	adds	r3, #4
 8009ad4:	4619      	mov	r1, r3
 8009ad6:	4610      	mov	r0, r2
 8009ad8:	f7fe fbab 	bl	8008232 <vListInsert>
}
 8009adc:	e010      	b.n	8009b00 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009ade:	4b0e      	ldr	r3, [pc, #56]	; (8009b18 <prvAddCurrentTaskToDelayedList+0xa0>)
 8009ae0:	681a      	ldr	r2, [r3, #0]
 8009ae2:	4b0a      	ldr	r3, [pc, #40]	; (8009b0c <prvAddCurrentTaskToDelayedList+0x94>)
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	3304      	adds	r3, #4
 8009ae8:	4619      	mov	r1, r3
 8009aea:	4610      	mov	r0, r2
 8009aec:	f7fe fba1 	bl	8008232 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009af0:	4b0a      	ldr	r3, [pc, #40]	; (8009b1c <prvAddCurrentTaskToDelayedList+0xa4>)
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	68ba      	ldr	r2, [r7, #8]
 8009af6:	429a      	cmp	r2, r3
 8009af8:	d202      	bcs.n	8009b00 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8009afa:	4a08      	ldr	r2, [pc, #32]	; (8009b1c <prvAddCurrentTaskToDelayedList+0xa4>)
 8009afc:	68bb      	ldr	r3, [r7, #8]
 8009afe:	6013      	str	r3, [r2, #0]
}
 8009b00:	bf00      	nop
 8009b02:	3710      	adds	r7, #16
 8009b04:	46bd      	mov	sp, r7
 8009b06:	bd80      	pop	{r7, pc}
 8009b08:	20001960 	.word	0x20001960
 8009b0c:	20001488 	.word	0x20001488
 8009b10:	20001948 	.word	0x20001948
 8009b14:	20001918 	.word	0x20001918
 8009b18:	20001914 	.word	0x20001914
 8009b1c:	2000197c 	.word	0x2000197c

08009b20 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009b20:	b580      	push	{r7, lr}
 8009b22:	b08a      	sub	sp, #40	; 0x28
 8009b24:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8009b26:	2300      	movs	r3, #0
 8009b28:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8009b2a:	f000 fb07 	bl	800a13c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8009b2e:	4b1c      	ldr	r3, [pc, #112]	; (8009ba0 <xTimerCreateTimerTask+0x80>)
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	d021      	beq.n	8009b7a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8009b36:	2300      	movs	r3, #0
 8009b38:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8009b3a:	2300      	movs	r3, #0
 8009b3c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8009b3e:	1d3a      	adds	r2, r7, #4
 8009b40:	f107 0108 	add.w	r1, r7, #8
 8009b44:	f107 030c 	add.w	r3, r7, #12
 8009b48:	4618      	mov	r0, r3
 8009b4a:	f7fe fb07 	bl	800815c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8009b4e:	6879      	ldr	r1, [r7, #4]
 8009b50:	68bb      	ldr	r3, [r7, #8]
 8009b52:	68fa      	ldr	r2, [r7, #12]
 8009b54:	9202      	str	r2, [sp, #8]
 8009b56:	9301      	str	r3, [sp, #4]
 8009b58:	2302      	movs	r3, #2
 8009b5a:	9300      	str	r3, [sp, #0]
 8009b5c:	2300      	movs	r3, #0
 8009b5e:	460a      	mov	r2, r1
 8009b60:	4910      	ldr	r1, [pc, #64]	; (8009ba4 <xTimerCreateTimerTask+0x84>)
 8009b62:	4811      	ldr	r0, [pc, #68]	; (8009ba8 <xTimerCreateTimerTask+0x88>)
 8009b64:	f7ff f8b4 	bl	8008cd0 <xTaskCreateStatic>
 8009b68:	4603      	mov	r3, r0
 8009b6a:	4a10      	ldr	r2, [pc, #64]	; (8009bac <xTimerCreateTimerTask+0x8c>)
 8009b6c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8009b6e:	4b0f      	ldr	r3, [pc, #60]	; (8009bac <xTimerCreateTimerTask+0x8c>)
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	d001      	beq.n	8009b7a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8009b76:	2301      	movs	r3, #1
 8009b78:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8009b7a:	697b      	ldr	r3, [r7, #20]
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	d10a      	bne.n	8009b96 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8009b80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b84:	f383 8811 	msr	BASEPRI, r3
 8009b88:	f3bf 8f6f 	isb	sy
 8009b8c:	f3bf 8f4f 	dsb	sy
 8009b90:	613b      	str	r3, [r7, #16]
}
 8009b92:	bf00      	nop
 8009b94:	e7fe      	b.n	8009b94 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8009b96:	697b      	ldr	r3, [r7, #20]
}
 8009b98:	4618      	mov	r0, r3
 8009b9a:	3718      	adds	r7, #24
 8009b9c:	46bd      	mov	sp, r7
 8009b9e:	bd80      	pop	{r7, pc}
 8009ba0:	200019b8 	.word	0x200019b8
 8009ba4:	0800b454 	.word	0x0800b454
 8009ba8:	08009ce5 	.word	0x08009ce5
 8009bac:	200019bc 	.word	0x200019bc

08009bb0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009bb0:	b580      	push	{r7, lr}
 8009bb2:	b08a      	sub	sp, #40	; 0x28
 8009bb4:	af00      	add	r7, sp, #0
 8009bb6:	60f8      	str	r0, [r7, #12]
 8009bb8:	60b9      	str	r1, [r7, #8]
 8009bba:	607a      	str	r2, [r7, #4]
 8009bbc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8009bbe:	2300      	movs	r3, #0
 8009bc0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8009bc2:	68fb      	ldr	r3, [r7, #12]
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	d10a      	bne.n	8009bde <xTimerGenericCommand+0x2e>
	__asm volatile
 8009bc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bcc:	f383 8811 	msr	BASEPRI, r3
 8009bd0:	f3bf 8f6f 	isb	sy
 8009bd4:	f3bf 8f4f 	dsb	sy
 8009bd8:	623b      	str	r3, [r7, #32]
}
 8009bda:	bf00      	nop
 8009bdc:	e7fe      	b.n	8009bdc <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8009bde:	4b1a      	ldr	r3, [pc, #104]	; (8009c48 <xTimerGenericCommand+0x98>)
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d02a      	beq.n	8009c3c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8009be6:	68bb      	ldr	r3, [r7, #8]
 8009be8:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009bf2:	68bb      	ldr	r3, [r7, #8]
 8009bf4:	2b05      	cmp	r3, #5
 8009bf6:	dc18      	bgt.n	8009c2a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009bf8:	f7ff feb2 	bl	8009960 <xTaskGetSchedulerState>
 8009bfc:	4603      	mov	r3, r0
 8009bfe:	2b02      	cmp	r3, #2
 8009c00:	d109      	bne.n	8009c16 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009c02:	4b11      	ldr	r3, [pc, #68]	; (8009c48 <xTimerGenericCommand+0x98>)
 8009c04:	6818      	ldr	r0, [r3, #0]
 8009c06:	f107 0110 	add.w	r1, r7, #16
 8009c0a:	2300      	movs	r3, #0
 8009c0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009c0e:	f7fe fc77 	bl	8008500 <xQueueGenericSend>
 8009c12:	6278      	str	r0, [r7, #36]	; 0x24
 8009c14:	e012      	b.n	8009c3c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009c16:	4b0c      	ldr	r3, [pc, #48]	; (8009c48 <xTimerGenericCommand+0x98>)
 8009c18:	6818      	ldr	r0, [r3, #0]
 8009c1a:	f107 0110 	add.w	r1, r7, #16
 8009c1e:	2300      	movs	r3, #0
 8009c20:	2200      	movs	r2, #0
 8009c22:	f7fe fc6d 	bl	8008500 <xQueueGenericSend>
 8009c26:	6278      	str	r0, [r7, #36]	; 0x24
 8009c28:	e008      	b.n	8009c3c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009c2a:	4b07      	ldr	r3, [pc, #28]	; (8009c48 <xTimerGenericCommand+0x98>)
 8009c2c:	6818      	ldr	r0, [r3, #0]
 8009c2e:	f107 0110 	add.w	r1, r7, #16
 8009c32:	2300      	movs	r3, #0
 8009c34:	683a      	ldr	r2, [r7, #0]
 8009c36:	f7fe fd61 	bl	80086fc <xQueueGenericSendFromISR>
 8009c3a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009c3e:	4618      	mov	r0, r3
 8009c40:	3728      	adds	r7, #40	; 0x28
 8009c42:	46bd      	mov	sp, r7
 8009c44:	bd80      	pop	{r7, pc}
 8009c46:	bf00      	nop
 8009c48:	200019b8 	.word	0x200019b8

08009c4c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009c4c:	b580      	push	{r7, lr}
 8009c4e:	b088      	sub	sp, #32
 8009c50:	af02      	add	r7, sp, #8
 8009c52:	6078      	str	r0, [r7, #4]
 8009c54:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009c56:	4b22      	ldr	r3, [pc, #136]	; (8009ce0 <prvProcessExpiredTimer+0x94>)
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	68db      	ldr	r3, [r3, #12]
 8009c5c:	68db      	ldr	r3, [r3, #12]
 8009c5e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009c60:	697b      	ldr	r3, [r7, #20]
 8009c62:	3304      	adds	r3, #4
 8009c64:	4618      	mov	r0, r3
 8009c66:	f7fe fb1d 	bl	80082a4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009c6a:	697b      	ldr	r3, [r7, #20]
 8009c6c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009c70:	f003 0304 	and.w	r3, r3, #4
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	d022      	beq.n	8009cbe <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009c78:	697b      	ldr	r3, [r7, #20]
 8009c7a:	699a      	ldr	r2, [r3, #24]
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	18d1      	adds	r1, r2, r3
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	683a      	ldr	r2, [r7, #0]
 8009c84:	6978      	ldr	r0, [r7, #20]
 8009c86:	f000 f8d1 	bl	8009e2c <prvInsertTimerInActiveList>
 8009c8a:	4603      	mov	r3, r0
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	d01f      	beq.n	8009cd0 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009c90:	2300      	movs	r3, #0
 8009c92:	9300      	str	r3, [sp, #0]
 8009c94:	2300      	movs	r3, #0
 8009c96:	687a      	ldr	r2, [r7, #4]
 8009c98:	2100      	movs	r1, #0
 8009c9a:	6978      	ldr	r0, [r7, #20]
 8009c9c:	f7ff ff88 	bl	8009bb0 <xTimerGenericCommand>
 8009ca0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8009ca2:	693b      	ldr	r3, [r7, #16]
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	d113      	bne.n	8009cd0 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8009ca8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cac:	f383 8811 	msr	BASEPRI, r3
 8009cb0:	f3bf 8f6f 	isb	sy
 8009cb4:	f3bf 8f4f 	dsb	sy
 8009cb8:	60fb      	str	r3, [r7, #12]
}
 8009cba:	bf00      	nop
 8009cbc:	e7fe      	b.n	8009cbc <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009cbe:	697b      	ldr	r3, [r7, #20]
 8009cc0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009cc4:	f023 0301 	bic.w	r3, r3, #1
 8009cc8:	b2da      	uxtb	r2, r3
 8009cca:	697b      	ldr	r3, [r7, #20]
 8009ccc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009cd0:	697b      	ldr	r3, [r7, #20]
 8009cd2:	6a1b      	ldr	r3, [r3, #32]
 8009cd4:	6978      	ldr	r0, [r7, #20]
 8009cd6:	4798      	blx	r3
}
 8009cd8:	bf00      	nop
 8009cda:	3718      	adds	r7, #24
 8009cdc:	46bd      	mov	sp, r7
 8009cde:	bd80      	pop	{r7, pc}
 8009ce0:	200019b0 	.word	0x200019b0

08009ce4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8009ce4:	b580      	push	{r7, lr}
 8009ce6:	b084      	sub	sp, #16
 8009ce8:	af00      	add	r7, sp, #0
 8009cea:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009cec:	f107 0308 	add.w	r3, r7, #8
 8009cf0:	4618      	mov	r0, r3
 8009cf2:	f000 f857 	bl	8009da4 <prvGetNextExpireTime>
 8009cf6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009cf8:	68bb      	ldr	r3, [r7, #8]
 8009cfa:	4619      	mov	r1, r3
 8009cfc:	68f8      	ldr	r0, [r7, #12]
 8009cfe:	f000 f803 	bl	8009d08 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8009d02:	f000 f8d5 	bl	8009eb0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009d06:	e7f1      	b.n	8009cec <prvTimerTask+0x8>

08009d08 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009d08:	b580      	push	{r7, lr}
 8009d0a:	b084      	sub	sp, #16
 8009d0c:	af00      	add	r7, sp, #0
 8009d0e:	6078      	str	r0, [r7, #4]
 8009d10:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8009d12:	f7ff fa39 	bl	8009188 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009d16:	f107 0308 	add.w	r3, r7, #8
 8009d1a:	4618      	mov	r0, r3
 8009d1c:	f000 f866 	bl	8009dec <prvSampleTimeNow>
 8009d20:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8009d22:	68bb      	ldr	r3, [r7, #8]
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	d130      	bne.n	8009d8a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009d28:	683b      	ldr	r3, [r7, #0]
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	d10a      	bne.n	8009d44 <prvProcessTimerOrBlockTask+0x3c>
 8009d2e:	687a      	ldr	r2, [r7, #4]
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	429a      	cmp	r2, r3
 8009d34:	d806      	bhi.n	8009d44 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8009d36:	f7ff fa35 	bl	80091a4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8009d3a:	68f9      	ldr	r1, [r7, #12]
 8009d3c:	6878      	ldr	r0, [r7, #4]
 8009d3e:	f7ff ff85 	bl	8009c4c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8009d42:	e024      	b.n	8009d8e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009d44:	683b      	ldr	r3, [r7, #0]
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d008      	beq.n	8009d5c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009d4a:	4b13      	ldr	r3, [pc, #76]	; (8009d98 <prvProcessTimerOrBlockTask+0x90>)
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	d101      	bne.n	8009d58 <prvProcessTimerOrBlockTask+0x50>
 8009d54:	2301      	movs	r3, #1
 8009d56:	e000      	b.n	8009d5a <prvProcessTimerOrBlockTask+0x52>
 8009d58:	2300      	movs	r3, #0
 8009d5a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009d5c:	4b0f      	ldr	r3, [pc, #60]	; (8009d9c <prvProcessTimerOrBlockTask+0x94>)
 8009d5e:	6818      	ldr	r0, [r3, #0]
 8009d60:	687a      	ldr	r2, [r7, #4]
 8009d62:	68fb      	ldr	r3, [r7, #12]
 8009d64:	1ad3      	subs	r3, r2, r3
 8009d66:	683a      	ldr	r2, [r7, #0]
 8009d68:	4619      	mov	r1, r3
 8009d6a:	f7fe ff7d 	bl	8008c68 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009d6e:	f7ff fa19 	bl	80091a4 <xTaskResumeAll>
 8009d72:	4603      	mov	r3, r0
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	d10a      	bne.n	8009d8e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009d78:	4b09      	ldr	r3, [pc, #36]	; (8009da0 <prvProcessTimerOrBlockTask+0x98>)
 8009d7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009d7e:	601a      	str	r2, [r3, #0]
 8009d80:	f3bf 8f4f 	dsb	sy
 8009d84:	f3bf 8f6f 	isb	sy
}
 8009d88:	e001      	b.n	8009d8e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8009d8a:	f7ff fa0b 	bl	80091a4 <xTaskResumeAll>
}
 8009d8e:	bf00      	nop
 8009d90:	3710      	adds	r7, #16
 8009d92:	46bd      	mov	sp, r7
 8009d94:	bd80      	pop	{r7, pc}
 8009d96:	bf00      	nop
 8009d98:	200019b4 	.word	0x200019b4
 8009d9c:	200019b8 	.word	0x200019b8
 8009da0:	e000ed04 	.word	0xe000ed04

08009da4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009da4:	b480      	push	{r7}
 8009da6:	b085      	sub	sp, #20
 8009da8:	af00      	add	r7, sp, #0
 8009daa:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009dac:	4b0e      	ldr	r3, [pc, #56]	; (8009de8 <prvGetNextExpireTime+0x44>)
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	d101      	bne.n	8009dba <prvGetNextExpireTime+0x16>
 8009db6:	2201      	movs	r2, #1
 8009db8:	e000      	b.n	8009dbc <prvGetNextExpireTime+0x18>
 8009dba:	2200      	movs	r2, #0
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	d105      	bne.n	8009dd4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009dc8:	4b07      	ldr	r3, [pc, #28]	; (8009de8 <prvGetNextExpireTime+0x44>)
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	68db      	ldr	r3, [r3, #12]
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	60fb      	str	r3, [r7, #12]
 8009dd2:	e001      	b.n	8009dd8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009dd4:	2300      	movs	r3, #0
 8009dd6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009dd8:	68fb      	ldr	r3, [r7, #12]
}
 8009dda:	4618      	mov	r0, r3
 8009ddc:	3714      	adds	r7, #20
 8009dde:	46bd      	mov	sp, r7
 8009de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009de4:	4770      	bx	lr
 8009de6:	bf00      	nop
 8009de8:	200019b0 	.word	0x200019b0

08009dec <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009dec:	b580      	push	{r7, lr}
 8009dee:	b084      	sub	sp, #16
 8009df0:	af00      	add	r7, sp, #0
 8009df2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009df4:	f7ff fa74 	bl	80092e0 <xTaskGetTickCount>
 8009df8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8009dfa:	4b0b      	ldr	r3, [pc, #44]	; (8009e28 <prvSampleTimeNow+0x3c>)
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	68fa      	ldr	r2, [r7, #12]
 8009e00:	429a      	cmp	r2, r3
 8009e02:	d205      	bcs.n	8009e10 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009e04:	f000 f936 	bl	800a074 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	2201      	movs	r2, #1
 8009e0c:	601a      	str	r2, [r3, #0]
 8009e0e:	e002      	b.n	8009e16 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	2200      	movs	r2, #0
 8009e14:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8009e16:	4a04      	ldr	r2, [pc, #16]	; (8009e28 <prvSampleTimeNow+0x3c>)
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009e1c:	68fb      	ldr	r3, [r7, #12]
}
 8009e1e:	4618      	mov	r0, r3
 8009e20:	3710      	adds	r7, #16
 8009e22:	46bd      	mov	sp, r7
 8009e24:	bd80      	pop	{r7, pc}
 8009e26:	bf00      	nop
 8009e28:	200019c0 	.word	0x200019c0

08009e2c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009e2c:	b580      	push	{r7, lr}
 8009e2e:	b086      	sub	sp, #24
 8009e30:	af00      	add	r7, sp, #0
 8009e32:	60f8      	str	r0, [r7, #12]
 8009e34:	60b9      	str	r1, [r7, #8]
 8009e36:	607a      	str	r2, [r7, #4]
 8009e38:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8009e3a:	2300      	movs	r3, #0
 8009e3c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009e3e:	68fb      	ldr	r3, [r7, #12]
 8009e40:	68ba      	ldr	r2, [r7, #8]
 8009e42:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009e44:	68fb      	ldr	r3, [r7, #12]
 8009e46:	68fa      	ldr	r2, [r7, #12]
 8009e48:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8009e4a:	68ba      	ldr	r2, [r7, #8]
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	429a      	cmp	r2, r3
 8009e50:	d812      	bhi.n	8009e78 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009e52:	687a      	ldr	r2, [r7, #4]
 8009e54:	683b      	ldr	r3, [r7, #0]
 8009e56:	1ad2      	subs	r2, r2, r3
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	699b      	ldr	r3, [r3, #24]
 8009e5c:	429a      	cmp	r2, r3
 8009e5e:	d302      	bcc.n	8009e66 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009e60:	2301      	movs	r3, #1
 8009e62:	617b      	str	r3, [r7, #20]
 8009e64:	e01b      	b.n	8009e9e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009e66:	4b10      	ldr	r3, [pc, #64]	; (8009ea8 <prvInsertTimerInActiveList+0x7c>)
 8009e68:	681a      	ldr	r2, [r3, #0]
 8009e6a:	68fb      	ldr	r3, [r7, #12]
 8009e6c:	3304      	adds	r3, #4
 8009e6e:	4619      	mov	r1, r3
 8009e70:	4610      	mov	r0, r2
 8009e72:	f7fe f9de 	bl	8008232 <vListInsert>
 8009e76:	e012      	b.n	8009e9e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009e78:	687a      	ldr	r2, [r7, #4]
 8009e7a:	683b      	ldr	r3, [r7, #0]
 8009e7c:	429a      	cmp	r2, r3
 8009e7e:	d206      	bcs.n	8009e8e <prvInsertTimerInActiveList+0x62>
 8009e80:	68ba      	ldr	r2, [r7, #8]
 8009e82:	683b      	ldr	r3, [r7, #0]
 8009e84:	429a      	cmp	r2, r3
 8009e86:	d302      	bcc.n	8009e8e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009e88:	2301      	movs	r3, #1
 8009e8a:	617b      	str	r3, [r7, #20]
 8009e8c:	e007      	b.n	8009e9e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009e8e:	4b07      	ldr	r3, [pc, #28]	; (8009eac <prvInsertTimerInActiveList+0x80>)
 8009e90:	681a      	ldr	r2, [r3, #0]
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	3304      	adds	r3, #4
 8009e96:	4619      	mov	r1, r3
 8009e98:	4610      	mov	r0, r2
 8009e9a:	f7fe f9ca 	bl	8008232 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8009e9e:	697b      	ldr	r3, [r7, #20]
}
 8009ea0:	4618      	mov	r0, r3
 8009ea2:	3718      	adds	r7, #24
 8009ea4:	46bd      	mov	sp, r7
 8009ea6:	bd80      	pop	{r7, pc}
 8009ea8:	200019b4 	.word	0x200019b4
 8009eac:	200019b0 	.word	0x200019b0

08009eb0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009eb0:	b580      	push	{r7, lr}
 8009eb2:	b08e      	sub	sp, #56	; 0x38
 8009eb4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009eb6:	e0ca      	b.n	800a04e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	da18      	bge.n	8009ef0 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8009ebe:	1d3b      	adds	r3, r7, #4
 8009ec0:	3304      	adds	r3, #4
 8009ec2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009ec4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ec6:	2b00      	cmp	r3, #0
 8009ec8:	d10a      	bne.n	8009ee0 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8009eca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ece:	f383 8811 	msr	BASEPRI, r3
 8009ed2:	f3bf 8f6f 	isb	sy
 8009ed6:	f3bf 8f4f 	dsb	sy
 8009eda:	61fb      	str	r3, [r7, #28]
}
 8009edc:	bf00      	nop
 8009ede:	e7fe      	b.n	8009ede <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009ee0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009ee6:	6850      	ldr	r0, [r2, #4]
 8009ee8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009eea:	6892      	ldr	r2, [r2, #8]
 8009eec:	4611      	mov	r1, r2
 8009eee:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	f2c0 80aa 	blt.w	800a04c <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009efc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009efe:	695b      	ldr	r3, [r3, #20]
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	d004      	beq.n	8009f0e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009f04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f06:	3304      	adds	r3, #4
 8009f08:	4618      	mov	r0, r3
 8009f0a:	f7fe f9cb 	bl	80082a4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009f0e:	463b      	mov	r3, r7
 8009f10:	4618      	mov	r0, r3
 8009f12:	f7ff ff6b 	bl	8009dec <prvSampleTimeNow>
 8009f16:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	2b09      	cmp	r3, #9
 8009f1c:	f200 8097 	bhi.w	800a04e <prvProcessReceivedCommands+0x19e>
 8009f20:	a201      	add	r2, pc, #4	; (adr r2, 8009f28 <prvProcessReceivedCommands+0x78>)
 8009f22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f26:	bf00      	nop
 8009f28:	08009f51 	.word	0x08009f51
 8009f2c:	08009f51 	.word	0x08009f51
 8009f30:	08009f51 	.word	0x08009f51
 8009f34:	08009fc5 	.word	0x08009fc5
 8009f38:	08009fd9 	.word	0x08009fd9
 8009f3c:	0800a023 	.word	0x0800a023
 8009f40:	08009f51 	.word	0x08009f51
 8009f44:	08009f51 	.word	0x08009f51
 8009f48:	08009fc5 	.word	0x08009fc5
 8009f4c:	08009fd9 	.word	0x08009fd9
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009f50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f52:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009f56:	f043 0301 	orr.w	r3, r3, #1
 8009f5a:	b2da      	uxtb	r2, r3
 8009f5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f5e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009f62:	68ba      	ldr	r2, [r7, #8]
 8009f64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f66:	699b      	ldr	r3, [r3, #24]
 8009f68:	18d1      	adds	r1, r2, r3
 8009f6a:	68bb      	ldr	r3, [r7, #8]
 8009f6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009f6e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009f70:	f7ff ff5c 	bl	8009e2c <prvInsertTimerInActiveList>
 8009f74:	4603      	mov	r3, r0
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d069      	beq.n	800a04e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009f7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f7c:	6a1b      	ldr	r3, [r3, #32]
 8009f7e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009f80:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009f82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f84:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009f88:	f003 0304 	and.w	r3, r3, #4
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	d05e      	beq.n	800a04e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009f90:	68ba      	ldr	r2, [r7, #8]
 8009f92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f94:	699b      	ldr	r3, [r3, #24]
 8009f96:	441a      	add	r2, r3
 8009f98:	2300      	movs	r3, #0
 8009f9a:	9300      	str	r3, [sp, #0]
 8009f9c:	2300      	movs	r3, #0
 8009f9e:	2100      	movs	r1, #0
 8009fa0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009fa2:	f7ff fe05 	bl	8009bb0 <xTimerGenericCommand>
 8009fa6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009fa8:	6a3b      	ldr	r3, [r7, #32]
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	d14f      	bne.n	800a04e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8009fae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fb2:	f383 8811 	msr	BASEPRI, r3
 8009fb6:	f3bf 8f6f 	isb	sy
 8009fba:	f3bf 8f4f 	dsb	sy
 8009fbe:	61bb      	str	r3, [r7, #24]
}
 8009fc0:	bf00      	nop
 8009fc2:	e7fe      	b.n	8009fc2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009fc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fc6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009fca:	f023 0301 	bic.w	r3, r3, #1
 8009fce:	b2da      	uxtb	r2, r3
 8009fd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fd2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8009fd6:	e03a      	b.n	800a04e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009fd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fda:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009fde:	f043 0301 	orr.w	r3, r3, #1
 8009fe2:	b2da      	uxtb	r2, r3
 8009fe4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fe6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009fea:	68ba      	ldr	r2, [r7, #8]
 8009fec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fee:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009ff0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ff2:	699b      	ldr	r3, [r3, #24]
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d10a      	bne.n	800a00e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8009ff8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ffc:	f383 8811 	msr	BASEPRI, r3
 800a000:	f3bf 8f6f 	isb	sy
 800a004:	f3bf 8f4f 	dsb	sy
 800a008:	617b      	str	r3, [r7, #20]
}
 800a00a:	bf00      	nop
 800a00c:	e7fe      	b.n	800a00c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a00e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a010:	699a      	ldr	r2, [r3, #24]
 800a012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a014:	18d1      	adds	r1, r2, r3
 800a016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a018:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a01a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a01c:	f7ff ff06 	bl	8009e2c <prvInsertTimerInActiveList>
					break;
 800a020:	e015      	b.n	800a04e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800a022:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a024:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a028:	f003 0302 	and.w	r3, r3, #2
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	d103      	bne.n	800a038 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800a030:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a032:	f000 fbdd 	bl	800a7f0 <vPortFree>
 800a036:	e00a      	b.n	800a04e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a038:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a03a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a03e:	f023 0301 	bic.w	r3, r3, #1
 800a042:	b2da      	uxtb	r2, r3
 800a044:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a046:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800a04a:	e000      	b.n	800a04e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800a04c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a04e:	4b08      	ldr	r3, [pc, #32]	; (800a070 <prvProcessReceivedCommands+0x1c0>)
 800a050:	681b      	ldr	r3, [r3, #0]
 800a052:	1d39      	adds	r1, r7, #4
 800a054:	2200      	movs	r2, #0
 800a056:	4618      	mov	r0, r3
 800a058:	f7fe fbec 	bl	8008834 <xQueueReceive>
 800a05c:	4603      	mov	r3, r0
 800a05e:	2b00      	cmp	r3, #0
 800a060:	f47f af2a 	bne.w	8009eb8 <prvProcessReceivedCommands+0x8>
	}
}
 800a064:	bf00      	nop
 800a066:	bf00      	nop
 800a068:	3730      	adds	r7, #48	; 0x30
 800a06a:	46bd      	mov	sp, r7
 800a06c:	bd80      	pop	{r7, pc}
 800a06e:	bf00      	nop
 800a070:	200019b8 	.word	0x200019b8

0800a074 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800a074:	b580      	push	{r7, lr}
 800a076:	b088      	sub	sp, #32
 800a078:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a07a:	e048      	b.n	800a10e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a07c:	4b2d      	ldr	r3, [pc, #180]	; (800a134 <prvSwitchTimerLists+0xc0>)
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	68db      	ldr	r3, [r3, #12]
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a086:	4b2b      	ldr	r3, [pc, #172]	; (800a134 <prvSwitchTimerLists+0xc0>)
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	68db      	ldr	r3, [r3, #12]
 800a08c:	68db      	ldr	r3, [r3, #12]
 800a08e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a090:	68fb      	ldr	r3, [r7, #12]
 800a092:	3304      	adds	r3, #4
 800a094:	4618      	mov	r0, r3
 800a096:	f7fe f905 	bl	80082a4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a09a:	68fb      	ldr	r3, [r7, #12]
 800a09c:	6a1b      	ldr	r3, [r3, #32]
 800a09e:	68f8      	ldr	r0, [r7, #12]
 800a0a0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a0a2:	68fb      	ldr	r3, [r7, #12]
 800a0a4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a0a8:	f003 0304 	and.w	r3, r3, #4
 800a0ac:	2b00      	cmp	r3, #0
 800a0ae:	d02e      	beq.n	800a10e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a0b0:	68fb      	ldr	r3, [r7, #12]
 800a0b2:	699b      	ldr	r3, [r3, #24]
 800a0b4:	693a      	ldr	r2, [r7, #16]
 800a0b6:	4413      	add	r3, r2
 800a0b8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800a0ba:	68ba      	ldr	r2, [r7, #8]
 800a0bc:	693b      	ldr	r3, [r7, #16]
 800a0be:	429a      	cmp	r2, r3
 800a0c0:	d90e      	bls.n	800a0e0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800a0c2:	68fb      	ldr	r3, [r7, #12]
 800a0c4:	68ba      	ldr	r2, [r7, #8]
 800a0c6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a0c8:	68fb      	ldr	r3, [r7, #12]
 800a0ca:	68fa      	ldr	r2, [r7, #12]
 800a0cc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a0ce:	4b19      	ldr	r3, [pc, #100]	; (800a134 <prvSwitchTimerLists+0xc0>)
 800a0d0:	681a      	ldr	r2, [r3, #0]
 800a0d2:	68fb      	ldr	r3, [r7, #12]
 800a0d4:	3304      	adds	r3, #4
 800a0d6:	4619      	mov	r1, r3
 800a0d8:	4610      	mov	r0, r2
 800a0da:	f7fe f8aa 	bl	8008232 <vListInsert>
 800a0de:	e016      	b.n	800a10e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a0e0:	2300      	movs	r3, #0
 800a0e2:	9300      	str	r3, [sp, #0]
 800a0e4:	2300      	movs	r3, #0
 800a0e6:	693a      	ldr	r2, [r7, #16]
 800a0e8:	2100      	movs	r1, #0
 800a0ea:	68f8      	ldr	r0, [r7, #12]
 800a0ec:	f7ff fd60 	bl	8009bb0 <xTimerGenericCommand>
 800a0f0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	d10a      	bne.n	800a10e <prvSwitchTimerLists+0x9a>
	__asm volatile
 800a0f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0fc:	f383 8811 	msr	BASEPRI, r3
 800a100:	f3bf 8f6f 	isb	sy
 800a104:	f3bf 8f4f 	dsb	sy
 800a108:	603b      	str	r3, [r7, #0]
}
 800a10a:	bf00      	nop
 800a10c:	e7fe      	b.n	800a10c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a10e:	4b09      	ldr	r3, [pc, #36]	; (800a134 <prvSwitchTimerLists+0xc0>)
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	2b00      	cmp	r3, #0
 800a116:	d1b1      	bne.n	800a07c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800a118:	4b06      	ldr	r3, [pc, #24]	; (800a134 <prvSwitchTimerLists+0xc0>)
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800a11e:	4b06      	ldr	r3, [pc, #24]	; (800a138 <prvSwitchTimerLists+0xc4>)
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	4a04      	ldr	r2, [pc, #16]	; (800a134 <prvSwitchTimerLists+0xc0>)
 800a124:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800a126:	4a04      	ldr	r2, [pc, #16]	; (800a138 <prvSwitchTimerLists+0xc4>)
 800a128:	697b      	ldr	r3, [r7, #20]
 800a12a:	6013      	str	r3, [r2, #0]
}
 800a12c:	bf00      	nop
 800a12e:	3718      	adds	r7, #24
 800a130:	46bd      	mov	sp, r7
 800a132:	bd80      	pop	{r7, pc}
 800a134:	200019b0 	.word	0x200019b0
 800a138:	200019b4 	.word	0x200019b4

0800a13c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800a13c:	b580      	push	{r7, lr}
 800a13e:	b082      	sub	sp, #8
 800a140:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800a142:	f000 f967 	bl	800a414 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800a146:	4b15      	ldr	r3, [pc, #84]	; (800a19c <prvCheckForValidListAndQueue+0x60>)
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	d120      	bne.n	800a190 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800a14e:	4814      	ldr	r0, [pc, #80]	; (800a1a0 <prvCheckForValidListAndQueue+0x64>)
 800a150:	f7fe f81e 	bl	8008190 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a154:	4813      	ldr	r0, [pc, #76]	; (800a1a4 <prvCheckForValidListAndQueue+0x68>)
 800a156:	f7fe f81b 	bl	8008190 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a15a:	4b13      	ldr	r3, [pc, #76]	; (800a1a8 <prvCheckForValidListAndQueue+0x6c>)
 800a15c:	4a10      	ldr	r2, [pc, #64]	; (800a1a0 <prvCheckForValidListAndQueue+0x64>)
 800a15e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a160:	4b12      	ldr	r3, [pc, #72]	; (800a1ac <prvCheckForValidListAndQueue+0x70>)
 800a162:	4a10      	ldr	r2, [pc, #64]	; (800a1a4 <prvCheckForValidListAndQueue+0x68>)
 800a164:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a166:	2300      	movs	r3, #0
 800a168:	9300      	str	r3, [sp, #0]
 800a16a:	4b11      	ldr	r3, [pc, #68]	; (800a1b0 <prvCheckForValidListAndQueue+0x74>)
 800a16c:	4a11      	ldr	r2, [pc, #68]	; (800a1b4 <prvCheckForValidListAndQueue+0x78>)
 800a16e:	2110      	movs	r1, #16
 800a170:	200a      	movs	r0, #10
 800a172:	f7fe f929 	bl	80083c8 <xQueueGenericCreateStatic>
 800a176:	4603      	mov	r3, r0
 800a178:	4a08      	ldr	r2, [pc, #32]	; (800a19c <prvCheckForValidListAndQueue+0x60>)
 800a17a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800a17c:	4b07      	ldr	r3, [pc, #28]	; (800a19c <prvCheckForValidListAndQueue+0x60>)
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	2b00      	cmp	r3, #0
 800a182:	d005      	beq.n	800a190 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a184:	4b05      	ldr	r3, [pc, #20]	; (800a19c <prvCheckForValidListAndQueue+0x60>)
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	490b      	ldr	r1, [pc, #44]	; (800a1b8 <prvCheckForValidListAndQueue+0x7c>)
 800a18a:	4618      	mov	r0, r3
 800a18c:	f7fe fd42 	bl	8008c14 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a190:	f000 f970 	bl	800a474 <vPortExitCritical>
}
 800a194:	bf00      	nop
 800a196:	46bd      	mov	sp, r7
 800a198:	bd80      	pop	{r7, pc}
 800a19a:	bf00      	nop
 800a19c:	200019b8 	.word	0x200019b8
 800a1a0:	20001988 	.word	0x20001988
 800a1a4:	2000199c 	.word	0x2000199c
 800a1a8:	200019b0 	.word	0x200019b0
 800a1ac:	200019b4 	.word	0x200019b4
 800a1b0:	20001a64 	.word	0x20001a64
 800a1b4:	200019c4 	.word	0x200019c4
 800a1b8:	0800b45c 	.word	0x0800b45c

0800a1bc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a1bc:	b480      	push	{r7}
 800a1be:	b085      	sub	sp, #20
 800a1c0:	af00      	add	r7, sp, #0
 800a1c2:	60f8      	str	r0, [r7, #12]
 800a1c4:	60b9      	str	r1, [r7, #8]
 800a1c6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	3b04      	subs	r3, #4
 800a1cc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a1ce:	68fb      	ldr	r3, [r7, #12]
 800a1d0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800a1d4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	3b04      	subs	r3, #4
 800a1da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a1dc:	68bb      	ldr	r3, [r7, #8]
 800a1de:	f023 0201 	bic.w	r2, r3, #1
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a1e6:	68fb      	ldr	r3, [r7, #12]
 800a1e8:	3b04      	subs	r3, #4
 800a1ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a1ec:	4a0c      	ldr	r2, [pc, #48]	; (800a220 <pxPortInitialiseStack+0x64>)
 800a1ee:	68fb      	ldr	r3, [r7, #12]
 800a1f0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a1f2:	68fb      	ldr	r3, [r7, #12]
 800a1f4:	3b14      	subs	r3, #20
 800a1f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a1f8:	687a      	ldr	r2, [r7, #4]
 800a1fa:	68fb      	ldr	r3, [r7, #12]
 800a1fc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a1fe:	68fb      	ldr	r3, [r7, #12]
 800a200:	3b04      	subs	r3, #4
 800a202:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	f06f 0202 	mvn.w	r2, #2
 800a20a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a20c:	68fb      	ldr	r3, [r7, #12]
 800a20e:	3b20      	subs	r3, #32
 800a210:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a212:	68fb      	ldr	r3, [r7, #12]
}
 800a214:	4618      	mov	r0, r3
 800a216:	3714      	adds	r7, #20
 800a218:	46bd      	mov	sp, r7
 800a21a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a21e:	4770      	bx	lr
 800a220:	0800a225 	.word	0x0800a225

0800a224 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a224:	b480      	push	{r7}
 800a226:	b085      	sub	sp, #20
 800a228:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a22a:	2300      	movs	r3, #0
 800a22c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a22e:	4b12      	ldr	r3, [pc, #72]	; (800a278 <prvTaskExitError+0x54>)
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a236:	d00a      	beq.n	800a24e <prvTaskExitError+0x2a>
	__asm volatile
 800a238:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a23c:	f383 8811 	msr	BASEPRI, r3
 800a240:	f3bf 8f6f 	isb	sy
 800a244:	f3bf 8f4f 	dsb	sy
 800a248:	60fb      	str	r3, [r7, #12]
}
 800a24a:	bf00      	nop
 800a24c:	e7fe      	b.n	800a24c <prvTaskExitError+0x28>
	__asm volatile
 800a24e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a252:	f383 8811 	msr	BASEPRI, r3
 800a256:	f3bf 8f6f 	isb	sy
 800a25a:	f3bf 8f4f 	dsb	sy
 800a25e:	60bb      	str	r3, [r7, #8]
}
 800a260:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a262:	bf00      	nop
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	2b00      	cmp	r3, #0
 800a268:	d0fc      	beq.n	800a264 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a26a:	bf00      	nop
 800a26c:	bf00      	nop
 800a26e:	3714      	adds	r7, #20
 800a270:	46bd      	mov	sp, r7
 800a272:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a276:	4770      	bx	lr
 800a278:	2000000c 	.word	0x2000000c
 800a27c:	00000000 	.word	0x00000000

0800a280 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a280:	4b07      	ldr	r3, [pc, #28]	; (800a2a0 <pxCurrentTCBConst2>)
 800a282:	6819      	ldr	r1, [r3, #0]
 800a284:	6808      	ldr	r0, [r1, #0]
 800a286:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a28a:	f380 8809 	msr	PSP, r0
 800a28e:	f3bf 8f6f 	isb	sy
 800a292:	f04f 0000 	mov.w	r0, #0
 800a296:	f380 8811 	msr	BASEPRI, r0
 800a29a:	4770      	bx	lr
 800a29c:	f3af 8000 	nop.w

0800a2a0 <pxCurrentTCBConst2>:
 800a2a0:	20001488 	.word	0x20001488
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a2a4:	bf00      	nop
 800a2a6:	bf00      	nop

0800a2a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a2a8:	4808      	ldr	r0, [pc, #32]	; (800a2cc <prvPortStartFirstTask+0x24>)
 800a2aa:	6800      	ldr	r0, [r0, #0]
 800a2ac:	6800      	ldr	r0, [r0, #0]
 800a2ae:	f380 8808 	msr	MSP, r0
 800a2b2:	f04f 0000 	mov.w	r0, #0
 800a2b6:	f380 8814 	msr	CONTROL, r0
 800a2ba:	b662      	cpsie	i
 800a2bc:	b661      	cpsie	f
 800a2be:	f3bf 8f4f 	dsb	sy
 800a2c2:	f3bf 8f6f 	isb	sy
 800a2c6:	df00      	svc	0
 800a2c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a2ca:	bf00      	nop
 800a2cc:	e000ed08 	.word	0xe000ed08

0800a2d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a2d0:	b580      	push	{r7, lr}
 800a2d2:	b086      	sub	sp, #24
 800a2d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a2d6:	4b46      	ldr	r3, [pc, #280]	; (800a3f0 <xPortStartScheduler+0x120>)
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	4a46      	ldr	r2, [pc, #280]	; (800a3f4 <xPortStartScheduler+0x124>)
 800a2dc:	4293      	cmp	r3, r2
 800a2de:	d10a      	bne.n	800a2f6 <xPortStartScheduler+0x26>
	__asm volatile
 800a2e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2e4:	f383 8811 	msr	BASEPRI, r3
 800a2e8:	f3bf 8f6f 	isb	sy
 800a2ec:	f3bf 8f4f 	dsb	sy
 800a2f0:	613b      	str	r3, [r7, #16]
}
 800a2f2:	bf00      	nop
 800a2f4:	e7fe      	b.n	800a2f4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a2f6:	4b3e      	ldr	r3, [pc, #248]	; (800a3f0 <xPortStartScheduler+0x120>)
 800a2f8:	681b      	ldr	r3, [r3, #0]
 800a2fa:	4a3f      	ldr	r2, [pc, #252]	; (800a3f8 <xPortStartScheduler+0x128>)
 800a2fc:	4293      	cmp	r3, r2
 800a2fe:	d10a      	bne.n	800a316 <xPortStartScheduler+0x46>
	__asm volatile
 800a300:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a304:	f383 8811 	msr	BASEPRI, r3
 800a308:	f3bf 8f6f 	isb	sy
 800a30c:	f3bf 8f4f 	dsb	sy
 800a310:	60fb      	str	r3, [r7, #12]
}
 800a312:	bf00      	nop
 800a314:	e7fe      	b.n	800a314 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a316:	4b39      	ldr	r3, [pc, #228]	; (800a3fc <xPortStartScheduler+0x12c>)
 800a318:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a31a:	697b      	ldr	r3, [r7, #20]
 800a31c:	781b      	ldrb	r3, [r3, #0]
 800a31e:	b2db      	uxtb	r3, r3
 800a320:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a322:	697b      	ldr	r3, [r7, #20]
 800a324:	22ff      	movs	r2, #255	; 0xff
 800a326:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a328:	697b      	ldr	r3, [r7, #20]
 800a32a:	781b      	ldrb	r3, [r3, #0]
 800a32c:	b2db      	uxtb	r3, r3
 800a32e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a330:	78fb      	ldrb	r3, [r7, #3]
 800a332:	b2db      	uxtb	r3, r3
 800a334:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a338:	b2da      	uxtb	r2, r3
 800a33a:	4b31      	ldr	r3, [pc, #196]	; (800a400 <xPortStartScheduler+0x130>)
 800a33c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a33e:	4b31      	ldr	r3, [pc, #196]	; (800a404 <xPortStartScheduler+0x134>)
 800a340:	2207      	movs	r2, #7
 800a342:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a344:	e009      	b.n	800a35a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800a346:	4b2f      	ldr	r3, [pc, #188]	; (800a404 <xPortStartScheduler+0x134>)
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	3b01      	subs	r3, #1
 800a34c:	4a2d      	ldr	r2, [pc, #180]	; (800a404 <xPortStartScheduler+0x134>)
 800a34e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a350:	78fb      	ldrb	r3, [r7, #3]
 800a352:	b2db      	uxtb	r3, r3
 800a354:	005b      	lsls	r3, r3, #1
 800a356:	b2db      	uxtb	r3, r3
 800a358:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a35a:	78fb      	ldrb	r3, [r7, #3]
 800a35c:	b2db      	uxtb	r3, r3
 800a35e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a362:	2b80      	cmp	r3, #128	; 0x80
 800a364:	d0ef      	beq.n	800a346 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a366:	4b27      	ldr	r3, [pc, #156]	; (800a404 <xPortStartScheduler+0x134>)
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	f1c3 0307 	rsb	r3, r3, #7
 800a36e:	2b04      	cmp	r3, #4
 800a370:	d00a      	beq.n	800a388 <xPortStartScheduler+0xb8>
	__asm volatile
 800a372:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a376:	f383 8811 	msr	BASEPRI, r3
 800a37a:	f3bf 8f6f 	isb	sy
 800a37e:	f3bf 8f4f 	dsb	sy
 800a382:	60bb      	str	r3, [r7, #8]
}
 800a384:	bf00      	nop
 800a386:	e7fe      	b.n	800a386 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a388:	4b1e      	ldr	r3, [pc, #120]	; (800a404 <xPortStartScheduler+0x134>)
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	021b      	lsls	r3, r3, #8
 800a38e:	4a1d      	ldr	r2, [pc, #116]	; (800a404 <xPortStartScheduler+0x134>)
 800a390:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a392:	4b1c      	ldr	r3, [pc, #112]	; (800a404 <xPortStartScheduler+0x134>)
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a39a:	4a1a      	ldr	r2, [pc, #104]	; (800a404 <xPortStartScheduler+0x134>)
 800a39c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	b2da      	uxtb	r2, r3
 800a3a2:	697b      	ldr	r3, [r7, #20]
 800a3a4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a3a6:	4b18      	ldr	r3, [pc, #96]	; (800a408 <xPortStartScheduler+0x138>)
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	4a17      	ldr	r2, [pc, #92]	; (800a408 <xPortStartScheduler+0x138>)
 800a3ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a3b0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a3b2:	4b15      	ldr	r3, [pc, #84]	; (800a408 <xPortStartScheduler+0x138>)
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	4a14      	ldr	r2, [pc, #80]	; (800a408 <xPortStartScheduler+0x138>)
 800a3b8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800a3bc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a3be:	f000 f8dd 	bl	800a57c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a3c2:	4b12      	ldr	r3, [pc, #72]	; (800a40c <xPortStartScheduler+0x13c>)
 800a3c4:	2200      	movs	r2, #0
 800a3c6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a3c8:	f000 f8fc 	bl	800a5c4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a3cc:	4b10      	ldr	r3, [pc, #64]	; (800a410 <xPortStartScheduler+0x140>)
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	4a0f      	ldr	r2, [pc, #60]	; (800a410 <xPortStartScheduler+0x140>)
 800a3d2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800a3d6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a3d8:	f7ff ff66 	bl	800a2a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a3dc:	f7ff f84a 	bl	8009474 <vTaskSwitchContext>
	prvTaskExitError();
 800a3e0:	f7ff ff20 	bl	800a224 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a3e4:	2300      	movs	r3, #0
}
 800a3e6:	4618      	mov	r0, r3
 800a3e8:	3718      	adds	r7, #24
 800a3ea:	46bd      	mov	sp, r7
 800a3ec:	bd80      	pop	{r7, pc}
 800a3ee:	bf00      	nop
 800a3f0:	e000ed00 	.word	0xe000ed00
 800a3f4:	410fc271 	.word	0x410fc271
 800a3f8:	410fc270 	.word	0x410fc270
 800a3fc:	e000e400 	.word	0xe000e400
 800a400:	20001ab4 	.word	0x20001ab4
 800a404:	20001ab8 	.word	0x20001ab8
 800a408:	e000ed20 	.word	0xe000ed20
 800a40c:	2000000c 	.word	0x2000000c
 800a410:	e000ef34 	.word	0xe000ef34

0800a414 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a414:	b480      	push	{r7}
 800a416:	b083      	sub	sp, #12
 800a418:	af00      	add	r7, sp, #0
	__asm volatile
 800a41a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a41e:	f383 8811 	msr	BASEPRI, r3
 800a422:	f3bf 8f6f 	isb	sy
 800a426:	f3bf 8f4f 	dsb	sy
 800a42a:	607b      	str	r3, [r7, #4]
}
 800a42c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a42e:	4b0f      	ldr	r3, [pc, #60]	; (800a46c <vPortEnterCritical+0x58>)
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	3301      	adds	r3, #1
 800a434:	4a0d      	ldr	r2, [pc, #52]	; (800a46c <vPortEnterCritical+0x58>)
 800a436:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a438:	4b0c      	ldr	r3, [pc, #48]	; (800a46c <vPortEnterCritical+0x58>)
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	2b01      	cmp	r3, #1
 800a43e:	d10f      	bne.n	800a460 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a440:	4b0b      	ldr	r3, [pc, #44]	; (800a470 <vPortEnterCritical+0x5c>)
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	b2db      	uxtb	r3, r3
 800a446:	2b00      	cmp	r3, #0
 800a448:	d00a      	beq.n	800a460 <vPortEnterCritical+0x4c>
	__asm volatile
 800a44a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a44e:	f383 8811 	msr	BASEPRI, r3
 800a452:	f3bf 8f6f 	isb	sy
 800a456:	f3bf 8f4f 	dsb	sy
 800a45a:	603b      	str	r3, [r7, #0]
}
 800a45c:	bf00      	nop
 800a45e:	e7fe      	b.n	800a45e <vPortEnterCritical+0x4a>
	}
}
 800a460:	bf00      	nop
 800a462:	370c      	adds	r7, #12
 800a464:	46bd      	mov	sp, r7
 800a466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a46a:	4770      	bx	lr
 800a46c:	2000000c 	.word	0x2000000c
 800a470:	e000ed04 	.word	0xe000ed04

0800a474 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a474:	b480      	push	{r7}
 800a476:	b083      	sub	sp, #12
 800a478:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a47a:	4b12      	ldr	r3, [pc, #72]	; (800a4c4 <vPortExitCritical+0x50>)
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	2b00      	cmp	r3, #0
 800a480:	d10a      	bne.n	800a498 <vPortExitCritical+0x24>
	__asm volatile
 800a482:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a486:	f383 8811 	msr	BASEPRI, r3
 800a48a:	f3bf 8f6f 	isb	sy
 800a48e:	f3bf 8f4f 	dsb	sy
 800a492:	607b      	str	r3, [r7, #4]
}
 800a494:	bf00      	nop
 800a496:	e7fe      	b.n	800a496 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800a498:	4b0a      	ldr	r3, [pc, #40]	; (800a4c4 <vPortExitCritical+0x50>)
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	3b01      	subs	r3, #1
 800a49e:	4a09      	ldr	r2, [pc, #36]	; (800a4c4 <vPortExitCritical+0x50>)
 800a4a0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a4a2:	4b08      	ldr	r3, [pc, #32]	; (800a4c4 <vPortExitCritical+0x50>)
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	d105      	bne.n	800a4b6 <vPortExitCritical+0x42>
 800a4aa:	2300      	movs	r3, #0
 800a4ac:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a4ae:	683b      	ldr	r3, [r7, #0]
 800a4b0:	f383 8811 	msr	BASEPRI, r3
}
 800a4b4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a4b6:	bf00      	nop
 800a4b8:	370c      	adds	r7, #12
 800a4ba:	46bd      	mov	sp, r7
 800a4bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4c0:	4770      	bx	lr
 800a4c2:	bf00      	nop
 800a4c4:	2000000c 	.word	0x2000000c
	...

0800a4d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a4d0:	f3ef 8009 	mrs	r0, PSP
 800a4d4:	f3bf 8f6f 	isb	sy
 800a4d8:	4b15      	ldr	r3, [pc, #84]	; (800a530 <pxCurrentTCBConst>)
 800a4da:	681a      	ldr	r2, [r3, #0]
 800a4dc:	f01e 0f10 	tst.w	lr, #16
 800a4e0:	bf08      	it	eq
 800a4e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a4e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a4ea:	6010      	str	r0, [r2, #0]
 800a4ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a4f0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800a4f4:	f380 8811 	msr	BASEPRI, r0
 800a4f8:	f3bf 8f4f 	dsb	sy
 800a4fc:	f3bf 8f6f 	isb	sy
 800a500:	f7fe ffb8 	bl	8009474 <vTaskSwitchContext>
 800a504:	f04f 0000 	mov.w	r0, #0
 800a508:	f380 8811 	msr	BASEPRI, r0
 800a50c:	bc09      	pop	{r0, r3}
 800a50e:	6819      	ldr	r1, [r3, #0]
 800a510:	6808      	ldr	r0, [r1, #0]
 800a512:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a516:	f01e 0f10 	tst.w	lr, #16
 800a51a:	bf08      	it	eq
 800a51c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a520:	f380 8809 	msr	PSP, r0
 800a524:	f3bf 8f6f 	isb	sy
 800a528:	4770      	bx	lr
 800a52a:	bf00      	nop
 800a52c:	f3af 8000 	nop.w

0800a530 <pxCurrentTCBConst>:
 800a530:	20001488 	.word	0x20001488
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a534:	bf00      	nop
 800a536:	bf00      	nop

0800a538 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a538:	b580      	push	{r7, lr}
 800a53a:	b082      	sub	sp, #8
 800a53c:	af00      	add	r7, sp, #0
	__asm volatile
 800a53e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a542:	f383 8811 	msr	BASEPRI, r3
 800a546:	f3bf 8f6f 	isb	sy
 800a54a:	f3bf 8f4f 	dsb	sy
 800a54e:	607b      	str	r3, [r7, #4]
}
 800a550:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a552:	f7fe fed5 	bl	8009300 <xTaskIncrementTick>
 800a556:	4603      	mov	r3, r0
 800a558:	2b00      	cmp	r3, #0
 800a55a:	d003      	beq.n	800a564 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a55c:	4b06      	ldr	r3, [pc, #24]	; (800a578 <xPortSysTickHandler+0x40>)
 800a55e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a562:	601a      	str	r2, [r3, #0]
 800a564:	2300      	movs	r3, #0
 800a566:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a568:	683b      	ldr	r3, [r7, #0]
 800a56a:	f383 8811 	msr	BASEPRI, r3
}
 800a56e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a570:	bf00      	nop
 800a572:	3708      	adds	r7, #8
 800a574:	46bd      	mov	sp, r7
 800a576:	bd80      	pop	{r7, pc}
 800a578:	e000ed04 	.word	0xe000ed04

0800a57c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a57c:	b480      	push	{r7}
 800a57e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a580:	4b0b      	ldr	r3, [pc, #44]	; (800a5b0 <vPortSetupTimerInterrupt+0x34>)
 800a582:	2200      	movs	r2, #0
 800a584:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a586:	4b0b      	ldr	r3, [pc, #44]	; (800a5b4 <vPortSetupTimerInterrupt+0x38>)
 800a588:	2200      	movs	r2, #0
 800a58a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a58c:	4b0a      	ldr	r3, [pc, #40]	; (800a5b8 <vPortSetupTimerInterrupt+0x3c>)
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	4a0a      	ldr	r2, [pc, #40]	; (800a5bc <vPortSetupTimerInterrupt+0x40>)
 800a592:	fba2 2303 	umull	r2, r3, r2, r3
 800a596:	099b      	lsrs	r3, r3, #6
 800a598:	4a09      	ldr	r2, [pc, #36]	; (800a5c0 <vPortSetupTimerInterrupt+0x44>)
 800a59a:	3b01      	subs	r3, #1
 800a59c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a59e:	4b04      	ldr	r3, [pc, #16]	; (800a5b0 <vPortSetupTimerInterrupt+0x34>)
 800a5a0:	2207      	movs	r2, #7
 800a5a2:	601a      	str	r2, [r3, #0]
}
 800a5a4:	bf00      	nop
 800a5a6:	46bd      	mov	sp, r7
 800a5a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ac:	4770      	bx	lr
 800a5ae:	bf00      	nop
 800a5b0:	e000e010 	.word	0xe000e010
 800a5b4:	e000e018 	.word	0xe000e018
 800a5b8:	20000000 	.word	0x20000000
 800a5bc:	10624dd3 	.word	0x10624dd3
 800a5c0:	e000e014 	.word	0xe000e014

0800a5c4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a5c4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800a5d4 <vPortEnableVFP+0x10>
 800a5c8:	6801      	ldr	r1, [r0, #0]
 800a5ca:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800a5ce:	6001      	str	r1, [r0, #0]
 800a5d0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a5d2:	bf00      	nop
 800a5d4:	e000ed88 	.word	0xe000ed88

0800a5d8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a5d8:	b480      	push	{r7}
 800a5da:	b085      	sub	sp, #20
 800a5dc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a5de:	f3ef 8305 	mrs	r3, IPSR
 800a5e2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a5e4:	68fb      	ldr	r3, [r7, #12]
 800a5e6:	2b0f      	cmp	r3, #15
 800a5e8:	d914      	bls.n	800a614 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a5ea:	4a17      	ldr	r2, [pc, #92]	; (800a648 <vPortValidateInterruptPriority+0x70>)
 800a5ec:	68fb      	ldr	r3, [r7, #12]
 800a5ee:	4413      	add	r3, r2
 800a5f0:	781b      	ldrb	r3, [r3, #0]
 800a5f2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a5f4:	4b15      	ldr	r3, [pc, #84]	; (800a64c <vPortValidateInterruptPriority+0x74>)
 800a5f6:	781b      	ldrb	r3, [r3, #0]
 800a5f8:	7afa      	ldrb	r2, [r7, #11]
 800a5fa:	429a      	cmp	r2, r3
 800a5fc:	d20a      	bcs.n	800a614 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800a5fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a602:	f383 8811 	msr	BASEPRI, r3
 800a606:	f3bf 8f6f 	isb	sy
 800a60a:	f3bf 8f4f 	dsb	sy
 800a60e:	607b      	str	r3, [r7, #4]
}
 800a610:	bf00      	nop
 800a612:	e7fe      	b.n	800a612 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a614:	4b0e      	ldr	r3, [pc, #56]	; (800a650 <vPortValidateInterruptPriority+0x78>)
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800a61c:	4b0d      	ldr	r3, [pc, #52]	; (800a654 <vPortValidateInterruptPriority+0x7c>)
 800a61e:	681b      	ldr	r3, [r3, #0]
 800a620:	429a      	cmp	r2, r3
 800a622:	d90a      	bls.n	800a63a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800a624:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a628:	f383 8811 	msr	BASEPRI, r3
 800a62c:	f3bf 8f6f 	isb	sy
 800a630:	f3bf 8f4f 	dsb	sy
 800a634:	603b      	str	r3, [r7, #0]
}
 800a636:	bf00      	nop
 800a638:	e7fe      	b.n	800a638 <vPortValidateInterruptPriority+0x60>
	}
 800a63a:	bf00      	nop
 800a63c:	3714      	adds	r7, #20
 800a63e:	46bd      	mov	sp, r7
 800a640:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a644:	4770      	bx	lr
 800a646:	bf00      	nop
 800a648:	e000e3f0 	.word	0xe000e3f0
 800a64c:	20001ab4 	.word	0x20001ab4
 800a650:	e000ed0c 	.word	0xe000ed0c
 800a654:	20001ab8 	.word	0x20001ab8

0800a658 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a658:	b580      	push	{r7, lr}
 800a65a:	b08a      	sub	sp, #40	; 0x28
 800a65c:	af00      	add	r7, sp, #0
 800a65e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a660:	2300      	movs	r3, #0
 800a662:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a664:	f7fe fd90 	bl	8009188 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a668:	4b5b      	ldr	r3, [pc, #364]	; (800a7d8 <pvPortMalloc+0x180>)
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	2b00      	cmp	r3, #0
 800a66e:	d101      	bne.n	800a674 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a670:	f000 f920 	bl	800a8b4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a674:	4b59      	ldr	r3, [pc, #356]	; (800a7dc <pvPortMalloc+0x184>)
 800a676:	681a      	ldr	r2, [r3, #0]
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	4013      	ands	r3, r2
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	f040 8093 	bne.w	800a7a8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	2b00      	cmp	r3, #0
 800a686:	d01d      	beq.n	800a6c4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800a688:	2208      	movs	r2, #8
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	4413      	add	r3, r2
 800a68e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	f003 0307 	and.w	r3, r3, #7
 800a696:	2b00      	cmp	r3, #0
 800a698:	d014      	beq.n	800a6c4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	f023 0307 	bic.w	r3, r3, #7
 800a6a0:	3308      	adds	r3, #8
 800a6a2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	f003 0307 	and.w	r3, r3, #7
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	d00a      	beq.n	800a6c4 <pvPortMalloc+0x6c>
	__asm volatile
 800a6ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6b2:	f383 8811 	msr	BASEPRI, r3
 800a6b6:	f3bf 8f6f 	isb	sy
 800a6ba:	f3bf 8f4f 	dsb	sy
 800a6be:	617b      	str	r3, [r7, #20]
}
 800a6c0:	bf00      	nop
 800a6c2:	e7fe      	b.n	800a6c2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	d06e      	beq.n	800a7a8 <pvPortMalloc+0x150>
 800a6ca:	4b45      	ldr	r3, [pc, #276]	; (800a7e0 <pvPortMalloc+0x188>)
 800a6cc:	681b      	ldr	r3, [r3, #0]
 800a6ce:	687a      	ldr	r2, [r7, #4]
 800a6d0:	429a      	cmp	r2, r3
 800a6d2:	d869      	bhi.n	800a7a8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a6d4:	4b43      	ldr	r3, [pc, #268]	; (800a7e4 <pvPortMalloc+0x18c>)
 800a6d6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a6d8:	4b42      	ldr	r3, [pc, #264]	; (800a7e4 <pvPortMalloc+0x18c>)
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a6de:	e004      	b.n	800a6ea <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800a6e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6e2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a6e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a6ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6ec:	685b      	ldr	r3, [r3, #4]
 800a6ee:	687a      	ldr	r2, [r7, #4]
 800a6f0:	429a      	cmp	r2, r3
 800a6f2:	d903      	bls.n	800a6fc <pvPortMalloc+0xa4>
 800a6f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6f6:	681b      	ldr	r3, [r3, #0]
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	d1f1      	bne.n	800a6e0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a6fc:	4b36      	ldr	r3, [pc, #216]	; (800a7d8 <pvPortMalloc+0x180>)
 800a6fe:	681b      	ldr	r3, [r3, #0]
 800a700:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a702:	429a      	cmp	r2, r3
 800a704:	d050      	beq.n	800a7a8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a706:	6a3b      	ldr	r3, [r7, #32]
 800a708:	681b      	ldr	r3, [r3, #0]
 800a70a:	2208      	movs	r2, #8
 800a70c:	4413      	add	r3, r2
 800a70e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a712:	681a      	ldr	r2, [r3, #0]
 800a714:	6a3b      	ldr	r3, [r7, #32]
 800a716:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a71a:	685a      	ldr	r2, [r3, #4]
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	1ad2      	subs	r2, r2, r3
 800a720:	2308      	movs	r3, #8
 800a722:	005b      	lsls	r3, r3, #1
 800a724:	429a      	cmp	r2, r3
 800a726:	d91f      	bls.n	800a768 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a728:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	4413      	add	r3, r2
 800a72e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a730:	69bb      	ldr	r3, [r7, #24]
 800a732:	f003 0307 	and.w	r3, r3, #7
 800a736:	2b00      	cmp	r3, #0
 800a738:	d00a      	beq.n	800a750 <pvPortMalloc+0xf8>
	__asm volatile
 800a73a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a73e:	f383 8811 	msr	BASEPRI, r3
 800a742:	f3bf 8f6f 	isb	sy
 800a746:	f3bf 8f4f 	dsb	sy
 800a74a:	613b      	str	r3, [r7, #16]
}
 800a74c:	bf00      	nop
 800a74e:	e7fe      	b.n	800a74e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a752:	685a      	ldr	r2, [r3, #4]
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	1ad2      	subs	r2, r2, r3
 800a758:	69bb      	ldr	r3, [r7, #24]
 800a75a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a75c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a75e:	687a      	ldr	r2, [r7, #4]
 800a760:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a762:	69b8      	ldr	r0, [r7, #24]
 800a764:	f000 f908 	bl	800a978 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a768:	4b1d      	ldr	r3, [pc, #116]	; (800a7e0 <pvPortMalloc+0x188>)
 800a76a:	681a      	ldr	r2, [r3, #0]
 800a76c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a76e:	685b      	ldr	r3, [r3, #4]
 800a770:	1ad3      	subs	r3, r2, r3
 800a772:	4a1b      	ldr	r2, [pc, #108]	; (800a7e0 <pvPortMalloc+0x188>)
 800a774:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a776:	4b1a      	ldr	r3, [pc, #104]	; (800a7e0 <pvPortMalloc+0x188>)
 800a778:	681a      	ldr	r2, [r3, #0]
 800a77a:	4b1b      	ldr	r3, [pc, #108]	; (800a7e8 <pvPortMalloc+0x190>)
 800a77c:	681b      	ldr	r3, [r3, #0]
 800a77e:	429a      	cmp	r2, r3
 800a780:	d203      	bcs.n	800a78a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a782:	4b17      	ldr	r3, [pc, #92]	; (800a7e0 <pvPortMalloc+0x188>)
 800a784:	681b      	ldr	r3, [r3, #0]
 800a786:	4a18      	ldr	r2, [pc, #96]	; (800a7e8 <pvPortMalloc+0x190>)
 800a788:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a78a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a78c:	685a      	ldr	r2, [r3, #4]
 800a78e:	4b13      	ldr	r3, [pc, #76]	; (800a7dc <pvPortMalloc+0x184>)
 800a790:	681b      	ldr	r3, [r3, #0]
 800a792:	431a      	orrs	r2, r3
 800a794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a796:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a79a:	2200      	movs	r2, #0
 800a79c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800a79e:	4b13      	ldr	r3, [pc, #76]	; (800a7ec <pvPortMalloc+0x194>)
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	3301      	adds	r3, #1
 800a7a4:	4a11      	ldr	r2, [pc, #68]	; (800a7ec <pvPortMalloc+0x194>)
 800a7a6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a7a8:	f7fe fcfc 	bl	80091a4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a7ac:	69fb      	ldr	r3, [r7, #28]
 800a7ae:	f003 0307 	and.w	r3, r3, #7
 800a7b2:	2b00      	cmp	r3, #0
 800a7b4:	d00a      	beq.n	800a7cc <pvPortMalloc+0x174>
	__asm volatile
 800a7b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7ba:	f383 8811 	msr	BASEPRI, r3
 800a7be:	f3bf 8f6f 	isb	sy
 800a7c2:	f3bf 8f4f 	dsb	sy
 800a7c6:	60fb      	str	r3, [r7, #12]
}
 800a7c8:	bf00      	nop
 800a7ca:	e7fe      	b.n	800a7ca <pvPortMalloc+0x172>
	return pvReturn;
 800a7cc:	69fb      	ldr	r3, [r7, #28]
}
 800a7ce:	4618      	mov	r0, r3
 800a7d0:	3728      	adds	r7, #40	; 0x28
 800a7d2:	46bd      	mov	sp, r7
 800a7d4:	bd80      	pop	{r7, pc}
 800a7d6:	bf00      	nop
 800a7d8:	200056c4 	.word	0x200056c4
 800a7dc:	200056d8 	.word	0x200056d8
 800a7e0:	200056c8 	.word	0x200056c8
 800a7e4:	200056bc 	.word	0x200056bc
 800a7e8:	200056cc 	.word	0x200056cc
 800a7ec:	200056d0 	.word	0x200056d0

0800a7f0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a7f0:	b580      	push	{r7, lr}
 800a7f2:	b086      	sub	sp, #24
 800a7f4:	af00      	add	r7, sp, #0
 800a7f6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	d04d      	beq.n	800a89e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a802:	2308      	movs	r3, #8
 800a804:	425b      	negs	r3, r3
 800a806:	697a      	ldr	r2, [r7, #20]
 800a808:	4413      	add	r3, r2
 800a80a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a80c:	697b      	ldr	r3, [r7, #20]
 800a80e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a810:	693b      	ldr	r3, [r7, #16]
 800a812:	685a      	ldr	r2, [r3, #4]
 800a814:	4b24      	ldr	r3, [pc, #144]	; (800a8a8 <vPortFree+0xb8>)
 800a816:	681b      	ldr	r3, [r3, #0]
 800a818:	4013      	ands	r3, r2
 800a81a:	2b00      	cmp	r3, #0
 800a81c:	d10a      	bne.n	800a834 <vPortFree+0x44>
	__asm volatile
 800a81e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a822:	f383 8811 	msr	BASEPRI, r3
 800a826:	f3bf 8f6f 	isb	sy
 800a82a:	f3bf 8f4f 	dsb	sy
 800a82e:	60fb      	str	r3, [r7, #12]
}
 800a830:	bf00      	nop
 800a832:	e7fe      	b.n	800a832 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a834:	693b      	ldr	r3, [r7, #16]
 800a836:	681b      	ldr	r3, [r3, #0]
 800a838:	2b00      	cmp	r3, #0
 800a83a:	d00a      	beq.n	800a852 <vPortFree+0x62>
	__asm volatile
 800a83c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a840:	f383 8811 	msr	BASEPRI, r3
 800a844:	f3bf 8f6f 	isb	sy
 800a848:	f3bf 8f4f 	dsb	sy
 800a84c:	60bb      	str	r3, [r7, #8]
}
 800a84e:	bf00      	nop
 800a850:	e7fe      	b.n	800a850 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a852:	693b      	ldr	r3, [r7, #16]
 800a854:	685a      	ldr	r2, [r3, #4]
 800a856:	4b14      	ldr	r3, [pc, #80]	; (800a8a8 <vPortFree+0xb8>)
 800a858:	681b      	ldr	r3, [r3, #0]
 800a85a:	4013      	ands	r3, r2
 800a85c:	2b00      	cmp	r3, #0
 800a85e:	d01e      	beq.n	800a89e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a860:	693b      	ldr	r3, [r7, #16]
 800a862:	681b      	ldr	r3, [r3, #0]
 800a864:	2b00      	cmp	r3, #0
 800a866:	d11a      	bne.n	800a89e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a868:	693b      	ldr	r3, [r7, #16]
 800a86a:	685a      	ldr	r2, [r3, #4]
 800a86c:	4b0e      	ldr	r3, [pc, #56]	; (800a8a8 <vPortFree+0xb8>)
 800a86e:	681b      	ldr	r3, [r3, #0]
 800a870:	43db      	mvns	r3, r3
 800a872:	401a      	ands	r2, r3
 800a874:	693b      	ldr	r3, [r7, #16]
 800a876:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a878:	f7fe fc86 	bl	8009188 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a87c:	693b      	ldr	r3, [r7, #16]
 800a87e:	685a      	ldr	r2, [r3, #4]
 800a880:	4b0a      	ldr	r3, [pc, #40]	; (800a8ac <vPortFree+0xbc>)
 800a882:	681b      	ldr	r3, [r3, #0]
 800a884:	4413      	add	r3, r2
 800a886:	4a09      	ldr	r2, [pc, #36]	; (800a8ac <vPortFree+0xbc>)
 800a888:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a88a:	6938      	ldr	r0, [r7, #16]
 800a88c:	f000 f874 	bl	800a978 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800a890:	4b07      	ldr	r3, [pc, #28]	; (800a8b0 <vPortFree+0xc0>)
 800a892:	681b      	ldr	r3, [r3, #0]
 800a894:	3301      	adds	r3, #1
 800a896:	4a06      	ldr	r2, [pc, #24]	; (800a8b0 <vPortFree+0xc0>)
 800a898:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800a89a:	f7fe fc83 	bl	80091a4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a89e:	bf00      	nop
 800a8a0:	3718      	adds	r7, #24
 800a8a2:	46bd      	mov	sp, r7
 800a8a4:	bd80      	pop	{r7, pc}
 800a8a6:	bf00      	nop
 800a8a8:	200056d8 	.word	0x200056d8
 800a8ac:	200056c8 	.word	0x200056c8
 800a8b0:	200056d4 	.word	0x200056d4

0800a8b4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a8b4:	b480      	push	{r7}
 800a8b6:	b085      	sub	sp, #20
 800a8b8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a8ba:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800a8be:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a8c0:	4b27      	ldr	r3, [pc, #156]	; (800a960 <prvHeapInit+0xac>)
 800a8c2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a8c4:	68fb      	ldr	r3, [r7, #12]
 800a8c6:	f003 0307 	and.w	r3, r3, #7
 800a8ca:	2b00      	cmp	r3, #0
 800a8cc:	d00c      	beq.n	800a8e8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a8ce:	68fb      	ldr	r3, [r7, #12]
 800a8d0:	3307      	adds	r3, #7
 800a8d2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a8d4:	68fb      	ldr	r3, [r7, #12]
 800a8d6:	f023 0307 	bic.w	r3, r3, #7
 800a8da:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a8dc:	68ba      	ldr	r2, [r7, #8]
 800a8de:	68fb      	ldr	r3, [r7, #12]
 800a8e0:	1ad3      	subs	r3, r2, r3
 800a8e2:	4a1f      	ldr	r2, [pc, #124]	; (800a960 <prvHeapInit+0xac>)
 800a8e4:	4413      	add	r3, r2
 800a8e6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a8e8:	68fb      	ldr	r3, [r7, #12]
 800a8ea:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a8ec:	4a1d      	ldr	r2, [pc, #116]	; (800a964 <prvHeapInit+0xb0>)
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a8f2:	4b1c      	ldr	r3, [pc, #112]	; (800a964 <prvHeapInit+0xb0>)
 800a8f4:	2200      	movs	r2, #0
 800a8f6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	68ba      	ldr	r2, [r7, #8]
 800a8fc:	4413      	add	r3, r2
 800a8fe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a900:	2208      	movs	r2, #8
 800a902:	68fb      	ldr	r3, [r7, #12]
 800a904:	1a9b      	subs	r3, r3, r2
 800a906:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a908:	68fb      	ldr	r3, [r7, #12]
 800a90a:	f023 0307 	bic.w	r3, r3, #7
 800a90e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a910:	68fb      	ldr	r3, [r7, #12]
 800a912:	4a15      	ldr	r2, [pc, #84]	; (800a968 <prvHeapInit+0xb4>)
 800a914:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a916:	4b14      	ldr	r3, [pc, #80]	; (800a968 <prvHeapInit+0xb4>)
 800a918:	681b      	ldr	r3, [r3, #0]
 800a91a:	2200      	movs	r2, #0
 800a91c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a91e:	4b12      	ldr	r3, [pc, #72]	; (800a968 <prvHeapInit+0xb4>)
 800a920:	681b      	ldr	r3, [r3, #0]
 800a922:	2200      	movs	r2, #0
 800a924:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a92a:	683b      	ldr	r3, [r7, #0]
 800a92c:	68fa      	ldr	r2, [r7, #12]
 800a92e:	1ad2      	subs	r2, r2, r3
 800a930:	683b      	ldr	r3, [r7, #0]
 800a932:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a934:	4b0c      	ldr	r3, [pc, #48]	; (800a968 <prvHeapInit+0xb4>)
 800a936:	681a      	ldr	r2, [r3, #0]
 800a938:	683b      	ldr	r3, [r7, #0]
 800a93a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a93c:	683b      	ldr	r3, [r7, #0]
 800a93e:	685b      	ldr	r3, [r3, #4]
 800a940:	4a0a      	ldr	r2, [pc, #40]	; (800a96c <prvHeapInit+0xb8>)
 800a942:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a944:	683b      	ldr	r3, [r7, #0]
 800a946:	685b      	ldr	r3, [r3, #4]
 800a948:	4a09      	ldr	r2, [pc, #36]	; (800a970 <prvHeapInit+0xbc>)
 800a94a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a94c:	4b09      	ldr	r3, [pc, #36]	; (800a974 <prvHeapInit+0xc0>)
 800a94e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800a952:	601a      	str	r2, [r3, #0]
}
 800a954:	bf00      	nop
 800a956:	3714      	adds	r7, #20
 800a958:	46bd      	mov	sp, r7
 800a95a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a95e:	4770      	bx	lr
 800a960:	20001abc 	.word	0x20001abc
 800a964:	200056bc 	.word	0x200056bc
 800a968:	200056c4 	.word	0x200056c4
 800a96c:	200056cc 	.word	0x200056cc
 800a970:	200056c8 	.word	0x200056c8
 800a974:	200056d8 	.word	0x200056d8

0800a978 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a978:	b480      	push	{r7}
 800a97a:	b085      	sub	sp, #20
 800a97c:	af00      	add	r7, sp, #0
 800a97e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a980:	4b28      	ldr	r3, [pc, #160]	; (800aa24 <prvInsertBlockIntoFreeList+0xac>)
 800a982:	60fb      	str	r3, [r7, #12]
 800a984:	e002      	b.n	800a98c <prvInsertBlockIntoFreeList+0x14>
 800a986:	68fb      	ldr	r3, [r7, #12]
 800a988:	681b      	ldr	r3, [r3, #0]
 800a98a:	60fb      	str	r3, [r7, #12]
 800a98c:	68fb      	ldr	r3, [r7, #12]
 800a98e:	681b      	ldr	r3, [r3, #0]
 800a990:	687a      	ldr	r2, [r7, #4]
 800a992:	429a      	cmp	r2, r3
 800a994:	d8f7      	bhi.n	800a986 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a996:	68fb      	ldr	r3, [r7, #12]
 800a998:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a99a:	68fb      	ldr	r3, [r7, #12]
 800a99c:	685b      	ldr	r3, [r3, #4]
 800a99e:	68ba      	ldr	r2, [r7, #8]
 800a9a0:	4413      	add	r3, r2
 800a9a2:	687a      	ldr	r2, [r7, #4]
 800a9a4:	429a      	cmp	r2, r3
 800a9a6:	d108      	bne.n	800a9ba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a9a8:	68fb      	ldr	r3, [r7, #12]
 800a9aa:	685a      	ldr	r2, [r3, #4]
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	685b      	ldr	r3, [r3, #4]
 800a9b0:	441a      	add	r2, r3
 800a9b2:	68fb      	ldr	r3, [r7, #12]
 800a9b4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a9b6:	68fb      	ldr	r3, [r7, #12]
 800a9b8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	685b      	ldr	r3, [r3, #4]
 800a9c2:	68ba      	ldr	r2, [r7, #8]
 800a9c4:	441a      	add	r2, r3
 800a9c6:	68fb      	ldr	r3, [r7, #12]
 800a9c8:	681b      	ldr	r3, [r3, #0]
 800a9ca:	429a      	cmp	r2, r3
 800a9cc:	d118      	bne.n	800aa00 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a9ce:	68fb      	ldr	r3, [r7, #12]
 800a9d0:	681a      	ldr	r2, [r3, #0]
 800a9d2:	4b15      	ldr	r3, [pc, #84]	; (800aa28 <prvInsertBlockIntoFreeList+0xb0>)
 800a9d4:	681b      	ldr	r3, [r3, #0]
 800a9d6:	429a      	cmp	r2, r3
 800a9d8:	d00d      	beq.n	800a9f6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	685a      	ldr	r2, [r3, #4]
 800a9de:	68fb      	ldr	r3, [r7, #12]
 800a9e0:	681b      	ldr	r3, [r3, #0]
 800a9e2:	685b      	ldr	r3, [r3, #4]
 800a9e4:	441a      	add	r2, r3
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a9ea:	68fb      	ldr	r3, [r7, #12]
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	681a      	ldr	r2, [r3, #0]
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	601a      	str	r2, [r3, #0]
 800a9f4:	e008      	b.n	800aa08 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a9f6:	4b0c      	ldr	r3, [pc, #48]	; (800aa28 <prvInsertBlockIntoFreeList+0xb0>)
 800a9f8:	681a      	ldr	r2, [r3, #0]
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	601a      	str	r2, [r3, #0]
 800a9fe:	e003      	b.n	800aa08 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800aa00:	68fb      	ldr	r3, [r7, #12]
 800aa02:	681a      	ldr	r2, [r3, #0]
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800aa08:	68fa      	ldr	r2, [r7, #12]
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	429a      	cmp	r2, r3
 800aa0e:	d002      	beq.n	800aa16 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800aa10:	68fb      	ldr	r3, [r7, #12]
 800aa12:	687a      	ldr	r2, [r7, #4]
 800aa14:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800aa16:	bf00      	nop
 800aa18:	3714      	adds	r7, #20
 800aa1a:	46bd      	mov	sp, r7
 800aa1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa20:	4770      	bx	lr
 800aa22:	bf00      	nop
 800aa24:	200056bc 	.word	0x200056bc
 800aa28:	200056c4 	.word	0x200056c4

0800aa2c <__cxa_pure_virtual>:
 800aa2c:	b508      	push	{r3, lr}
 800aa2e:	f000 f987 	bl	800ad40 <_ZSt9terminatev>

0800aa32 <_ZNSaIcEC1Ev>:
 800aa32:	4770      	bx	lr

0800aa34 <_ZNSaIcED1Ev>:
 800aa34:	4770      	bx	lr

0800aa36 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>:
 800aa36:	b10a      	cbz	r2, 800aa3c <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0+0x6>
 800aa38:	f000 b9ee 	b.w	800ae18 <memcpy>
 800aa3c:	4770      	bx	lr
	...

0800aa40 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
 800aa40:	b508      	push	{r3, lr}
 800aa42:	680b      	ldr	r3, [r1, #0]
 800aa44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aa48:	d302      	bcc.n	800aa50 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x10>
 800aa4a:	480d      	ldr	r0, [pc, #52]	; (800aa80 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x40>)
 800aa4c:	f000 f994 	bl	800ad78 <_ZSt20__throw_length_errorPKc>
 800aa50:	4293      	cmp	r3, r2
 800aa52:	d90b      	bls.n	800aa6c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 800aa54:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
 800aa58:	ea4f 0042 	mov.w	r0, r2, lsl #1
 800aa5c:	d206      	bcs.n	800aa6c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 800aa5e:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800aa62:	bf2a      	itet	cs
 800aa64:	f06f 4340 	mvncs.w	r3, #3221225472	; 0xc0000000
 800aa68:	6008      	strcc	r0, [r1, #0]
 800aa6a:	600b      	strcs	r3, [r1, #0]
 800aa6c:	6808      	ldr	r0, [r1, #0]
 800aa6e:	3001      	adds	r0, #1
 800aa70:	d501      	bpl.n	800aa76 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x36>
 800aa72:	f000 f97b 	bl	800ad6c <_ZSt17__throw_bad_allocv>
 800aa76:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800aa7a:	f000 b966 	b.w	800ad4a <_Znwj>
 800aa7e:	bf00      	nop
 800aa80:	0800b6cc 	.word	0x0800b6cc

0800aa84 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
 800aa84:	f850 3b08 	ldr.w	r3, [r0], #8
 800aa88:	4283      	cmp	r3, r0
 800aa8a:	d002      	beq.n	800aa92 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0xe>
 800aa8c:	4618      	mov	r0, r3
 800aa8e:	f000 b948 	b.w	800ad22 <_ZdlPv>
 800aa92:	4770      	bx	lr

0800aa94 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>:
 800aa94:	6840      	ldr	r0, [r0, #4]
 800aa96:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 800aa9a:	3901      	subs	r1, #1
 800aa9c:	1a09      	subs	r1, r1, r0
 800aa9e:	4291      	cmp	r1, r2
 800aaa0:	b508      	push	{r3, lr}
 800aaa2:	d202      	bcs.n	800aaaa <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc+0x16>
 800aaa4:	4618      	mov	r0, r3
 800aaa6:	f000 f967 	bl	800ad78 <_ZSt20__throw_length_errorPKc>
 800aaaa:	bd08      	pop	{r3, pc}

0800aaac <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc>:
 800aaac:	6803      	ldr	r3, [r0, #0]
 800aaae:	428b      	cmp	r3, r1
 800aab0:	d806      	bhi.n	800aac0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc+0x14>
 800aab2:	6840      	ldr	r0, [r0, #4]
 800aab4:	4418      	add	r0, r3
 800aab6:	4281      	cmp	r1, r0
 800aab8:	bf94      	ite	ls
 800aaba:	2000      	movls	r0, #0
 800aabc:	2001      	movhi	r0, #1
 800aabe:	4770      	bx	lr
 800aac0:	2001      	movs	r0, #1
 800aac2:	4770      	bx	lr

0800aac4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>:
 800aac4:	2a01      	cmp	r2, #1
 800aac6:	b410      	push	{r4}
 800aac8:	d104      	bne.n	800aad4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0x10>
 800aaca:	780a      	ldrb	r2, [r1, #0]
 800aacc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800aad0:	7002      	strb	r2, [r0, #0]
 800aad2:	4770      	bx	lr
 800aad4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800aad8:	f7ff bfad 	b.w	800aa36 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>

0800aadc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>:
 800aadc:	2a01      	cmp	r2, #1
 800aade:	b430      	push	{r4, r5}
 800aae0:	d103      	bne.n	800aaea <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj+0xe>
 800aae2:	780b      	ldrb	r3, [r1, #0]
 800aae4:	7003      	strb	r3, [r0, #0]
 800aae6:	bc30      	pop	{r4, r5}
 800aae8:	4770      	bx	lr
 800aaea:	2a00      	cmp	r2, #0
 800aaec:	d0fb      	beq.n	800aae6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj+0xa>
 800aaee:	bc30      	pop	{r4, r5}
 800aaf0:	f000 b9a0 	b.w	800ae34 <memmove>

0800aaf4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>:
 800aaf4:	b508      	push	{r3, lr}
 800aaf6:	1a52      	subs	r2, r2, r1
 800aaf8:	f7ff ffe4 	bl	800aac4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 800aafc:	bd08      	pop	{r3, pc}

0800aafe <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>:
 800aafe:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 800ab02:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800ab04:	461f      	mov	r7, r3
 800ab06:	6843      	ldr	r3, [r0, #4]
 800ab08:	eb01 0802 	add.w	r8, r1, r2
 800ab0c:	1ab2      	subs	r2, r6, r2
 800ab0e:	441a      	add	r2, r3
 800ab10:	eba3 0908 	sub.w	r9, r3, r8
 800ab14:	4603      	mov	r3, r0
 800ab16:	9201      	str	r2, [sp, #4]
 800ab18:	f853 2b08 	ldr.w	r2, [r3], #8
 800ab1c:	429a      	cmp	r2, r3
 800ab1e:	bf18      	it	ne
 800ab20:	6882      	ldrne	r2, [r0, #8]
 800ab22:	460d      	mov	r5, r1
 800ab24:	bf08      	it	eq
 800ab26:	220f      	moveq	r2, #15
 800ab28:	a901      	add	r1, sp, #4
 800ab2a:	4604      	mov	r4, r0
 800ab2c:	f7ff ff88 	bl	800aa40 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 800ab30:	4682      	mov	sl, r0
 800ab32:	b11d      	cbz	r5, 800ab3c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x3e>
 800ab34:	6821      	ldr	r1, [r4, #0]
 800ab36:	462a      	mov	r2, r5
 800ab38:	f7ff ffc4 	bl	800aac4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 800ab3c:	b137      	cbz	r7, 800ab4c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x4e>
 800ab3e:	b12e      	cbz	r6, 800ab4c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x4e>
 800ab40:	4632      	mov	r2, r6
 800ab42:	4639      	mov	r1, r7
 800ab44:	eb0a 0005 	add.w	r0, sl, r5
 800ab48:	f7ff ffbc 	bl	800aac4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 800ab4c:	f1b9 0f00 	cmp.w	r9, #0
 800ab50:	d007      	beq.n	800ab62 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x64>
 800ab52:	6821      	ldr	r1, [r4, #0]
 800ab54:	4435      	add	r5, r6
 800ab56:	464a      	mov	r2, r9
 800ab58:	4441      	add	r1, r8
 800ab5a:	eb0a 0005 	add.w	r0, sl, r5
 800ab5e:	f7ff ffb1 	bl	800aac4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 800ab62:	4620      	mov	r0, r4
 800ab64:	f7ff ff8e 	bl	800aa84 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 800ab68:	9b01      	ldr	r3, [sp, #4]
 800ab6a:	f8c4 a000 	str.w	sl, [r4]
 800ab6e:	60a3      	str	r3, [r4, #8]
 800ab70:	b002      	add	sp, #8
 800ab72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800ab76 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>:
 800ab76:	b510      	push	{r4, lr}
 800ab78:	4604      	mov	r4, r0
 800ab7a:	f7ff ff83 	bl	800aa84 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 800ab7e:	4620      	mov	r0, r4
 800ab80:	bd10      	pop	{r4, pc}

0800ab82 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>:
 800ab82:	6800      	ldr	r0, [r0, #0]
 800ab84:	4408      	add	r0, r1
 800ab86:	4770      	bx	lr

0800ab88 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj>:
 800ab88:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab8c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ab8e:	4614      	mov	r4, r2
 800ab90:	4680      	mov	r8, r0
 800ab92:	462a      	mov	r2, r5
 800ab94:	4689      	mov	r9, r1
 800ab96:	461f      	mov	r7, r3
 800ab98:	4621      	mov	r1, r4
 800ab9a:	4b39      	ldr	r3, [pc, #228]	; (800ac80 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xf8>)
 800ab9c:	f7ff ff7a 	bl	800aa94 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>
 800aba0:	4642      	mov	r2, r8
 800aba2:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800aba6:	f852 6b08 	ldr.w	r6, [r2], #8
 800abaa:	4296      	cmp	r6, r2
 800abac:	bf18      	it	ne
 800abae:	f8d8 2008 	ldrne.w	r2, [r8, #8]
 800abb2:	eba5 0b04 	sub.w	fp, r5, r4
 800abb6:	eb03 0a0b 	add.w	sl, r3, fp
 800abba:	bf08      	it	eq
 800abbc:	220f      	moveq	r2, #15
 800abbe:	4552      	cmp	r2, sl
 800abc0:	d351      	bcc.n	800ac66 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xde>
 800abc2:	444e      	add	r6, r9
 800abc4:	4639      	mov	r1, r7
 800abc6:	44a1      	add	r9, r4
 800abc8:	4640      	mov	r0, r8
 800abca:	eba3 0909 	sub.w	r9, r3, r9
 800abce:	f7ff ff6d 	bl	800aaac <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc>
 800abd2:	b180      	cbz	r0, 800abf6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x6e>
 800abd4:	f1b9 0f00 	cmp.w	r9, #0
 800abd8:	d006      	beq.n	800abe8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x60>
 800abda:	42ac      	cmp	r4, r5
 800abdc:	d004      	beq.n	800abe8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x60>
 800abde:	464a      	mov	r2, r9
 800abe0:	1931      	adds	r1, r6, r4
 800abe2:	1970      	adds	r0, r6, r5
 800abe4:	f7ff ff7a 	bl	800aadc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 800abe8:	b315      	cbz	r5, 800ac30 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa8>
 800abea:	462a      	mov	r2, r5
 800abec:	4639      	mov	r1, r7
 800abee:	4630      	mov	r0, r6
 800abf0:	f7ff ff68 	bl	800aac4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 800abf4:	e01c      	b.n	800ac30 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa8>
 800abf6:	b135      	cbz	r5, 800ac06 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x7e>
 800abf8:	42ac      	cmp	r4, r5
 800abfa:	d33c      	bcc.n	800ac76 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xee>
 800abfc:	462a      	mov	r2, r5
 800abfe:	4639      	mov	r1, r7
 800ac00:	4630      	mov	r0, r6
 800ac02:	f7ff ff6b 	bl	800aadc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 800ac06:	f1b9 0f00 	cmp.w	r9, #0
 800ac0a:	d011      	beq.n	800ac30 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa8>
 800ac0c:	42ac      	cmp	r4, r5
 800ac0e:	d00f      	beq.n	800ac30 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa8>
 800ac10:	464a      	mov	r2, r9
 800ac12:	1931      	adds	r1, r6, r4
 800ac14:	1970      	adds	r0, r6, r5
 800ac16:	f7ff ff61 	bl	800aadc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 800ac1a:	42ac      	cmp	r4, r5
 800ac1c:	d208      	bcs.n	800ac30 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa8>
 800ac1e:	4434      	add	r4, r6
 800ac20:	197b      	adds	r3, r7, r5
 800ac22:	429c      	cmp	r4, r3
 800ac24:	d30f      	bcc.n	800ac46 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xbe>
 800ac26:	462a      	mov	r2, r5
 800ac28:	4639      	mov	r1, r7
 800ac2a:	4630      	mov	r0, r6
 800ac2c:	f7ff ff56 	bl	800aadc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 800ac30:	f8d8 3000 	ldr.w	r3, [r8]
 800ac34:	f8c8 a004 	str.w	sl, [r8, #4]
 800ac38:	2200      	movs	r2, #0
 800ac3a:	4640      	mov	r0, r8
 800ac3c:	f803 200a 	strb.w	r2, [r3, sl]
 800ac40:	b003      	add	sp, #12
 800ac42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac46:	42bc      	cmp	r4, r7
 800ac48:	d803      	bhi.n	800ac52 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xca>
 800ac4a:	462a      	mov	r2, r5
 800ac4c:	eb07 010b 	add.w	r1, r7, fp
 800ac50:	e7cd      	b.n	800abee <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x66>
 800ac52:	1be4      	subs	r4, r4, r7
 800ac54:	4622      	mov	r2, r4
 800ac56:	4639      	mov	r1, r7
 800ac58:	4630      	mov	r0, r6
 800ac5a:	f7ff ff3f 	bl	800aadc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 800ac5e:	1b2a      	subs	r2, r5, r4
 800ac60:	1971      	adds	r1, r6, r5
 800ac62:	1930      	adds	r0, r6, r4
 800ac64:	e7c4      	b.n	800abf0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x68>
 800ac66:	9500      	str	r5, [sp, #0]
 800ac68:	463b      	mov	r3, r7
 800ac6a:	4622      	mov	r2, r4
 800ac6c:	4649      	mov	r1, r9
 800ac6e:	4640      	mov	r0, r8
 800ac70:	f7ff ff45 	bl	800aafe <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>
 800ac74:	e7dc      	b.n	800ac30 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa8>
 800ac76:	f1b9 0f00 	cmp.w	r9, #0
 800ac7a:	d0d0      	beq.n	800ac1e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x96>
 800ac7c:	e7c8      	b.n	800ac10 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x88>
 800ac7e:	bf00      	nop
 800ac80:	0800b6e4 	.word	0x0800b6e4

0800ac84 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6assignEPKc>:
 800ac84:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ac86:	4604      	mov	r4, r0
 800ac88:	4608      	mov	r0, r1
 800ac8a:	9103      	str	r1, [sp, #12]
 800ac8c:	f7f5 faa8 	bl	80001e0 <strlen>
 800ac90:	9b03      	ldr	r3, [sp, #12]
 800ac92:	9000      	str	r0, [sp, #0]
 800ac94:	6862      	ldr	r2, [r4, #4]
 800ac96:	2100      	movs	r1, #0
 800ac98:	4620      	mov	r0, r4
 800ac9a:	f7ff ff75 	bl	800ab88 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj>
 800ac9e:	b004      	add	sp, #16
 800aca0:	bd10      	pop	{r4, pc}

0800aca2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>:
 800aca2:	b508      	push	{r3, lr}
 800aca4:	f7ff ffee 	bl	800ac84 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6assignEPKc>
 800aca8:	bd08      	pop	{r3, pc}

0800acaa <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>:
 800acaa:	6800      	ldr	r0, [r0, #0]
 800acac:	4770      	bx	lr
	...

0800acb0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>:
 800acb0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800acb2:	4604      	mov	r4, r0
 800acb4:	4616      	mov	r6, r2
 800acb6:	460d      	mov	r5, r1
 800acb8:	b919      	cbnz	r1, 800acc2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
 800acba:	b112      	cbz	r2, 800acc2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
 800acbc:	480d      	ldr	r0, [pc, #52]	; (800acf4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x44>)
 800acbe:	f000 f858 	bl	800ad72 <_ZSt19__throw_logic_errorPKc>
 800acc2:	1b73      	subs	r3, r6, r5
 800acc4:	2b0f      	cmp	r3, #15
 800acc6:	9301      	str	r3, [sp, #4]
 800acc8:	d907      	bls.n	800acda <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x2a>
 800acca:	2200      	movs	r2, #0
 800accc:	a901      	add	r1, sp, #4
 800acce:	4620      	mov	r0, r4
 800acd0:	f7ff feb6 	bl	800aa40 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 800acd4:	9b01      	ldr	r3, [sp, #4]
 800acd6:	6020      	str	r0, [r4, #0]
 800acd8:	60a3      	str	r3, [r4, #8]
 800acda:	4632      	mov	r2, r6
 800acdc:	4629      	mov	r1, r5
 800acde:	6820      	ldr	r0, [r4, #0]
 800ace0:	f7ff ff08 	bl	800aaf4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>
 800ace4:	9b01      	ldr	r3, [sp, #4]
 800ace6:	6822      	ldr	r2, [r4, #0]
 800ace8:	6063      	str	r3, [r4, #4]
 800acea:	2100      	movs	r1, #0
 800acec:	54d1      	strb	r1, [r2, r3]
 800acee:	b002      	add	sp, #8
 800acf0:	bd70      	pop	{r4, r5, r6, pc}
 800acf2:	bf00      	nop
 800acf4:	0800b6fd 	.word	0x0800b6fd

0800acf8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>:
 800acf8:	b538      	push	{r3, r4, r5, lr}
 800acfa:	f100 0308 	add.w	r3, r0, #8
 800acfe:	4604      	mov	r4, r0
 800ad00:	6003      	str	r3, [r0, #0]
 800ad02:	460d      	mov	r5, r1
 800ad04:	b159      	cbz	r1, 800ad1e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x26>
 800ad06:	4608      	mov	r0, r1
 800ad08:	f7f5 fa6a 	bl	80001e0 <strlen>
 800ad0c:	182a      	adds	r2, r5, r0
 800ad0e:	4620      	mov	r0, r4
 800ad10:	f04f 0300 	mov.w	r3, #0
 800ad14:	4629      	mov	r1, r5
 800ad16:	f7ff ffcb 	bl	800acb0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>
 800ad1a:	4620      	mov	r0, r4
 800ad1c:	bd38      	pop	{r3, r4, r5, pc}
 800ad1e:	2201      	movs	r2, #1
 800ad20:	e7f5      	b.n	800ad0e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x16>

0800ad22 <_ZdlPv>:
 800ad22:	f000 b871 	b.w	800ae08 <free>

0800ad26 <_ZN10__cxxabiv111__terminateEPFvvE>:
 800ad26:	b508      	push	{r3, lr}
 800ad28:	4780      	blx	r0
 800ad2a:	f000 f831 	bl	800ad90 <abort>
	...

0800ad30 <_ZSt13get_terminatev>:
 800ad30:	4b02      	ldr	r3, [pc, #8]	; (800ad3c <_ZSt13get_terminatev+0xc>)
 800ad32:	6818      	ldr	r0, [r3, #0]
 800ad34:	f3bf 8f5b 	dmb	ish
 800ad38:	4770      	bx	lr
 800ad3a:	bf00      	nop
 800ad3c:	20000010 	.word	0x20000010

0800ad40 <_ZSt9terminatev>:
 800ad40:	b508      	push	{r3, lr}
 800ad42:	f7ff fff5 	bl	800ad30 <_ZSt13get_terminatev>
 800ad46:	f7ff ffee 	bl	800ad26 <_ZN10__cxxabiv111__terminateEPFvvE>

0800ad4a <_Znwj>:
 800ad4a:	2801      	cmp	r0, #1
 800ad4c:	bf38      	it	cc
 800ad4e:	2001      	movcc	r0, #1
 800ad50:	b510      	push	{r4, lr}
 800ad52:	4604      	mov	r4, r0
 800ad54:	4620      	mov	r0, r4
 800ad56:	f000 f84f 	bl	800adf8 <malloc>
 800ad5a:	b930      	cbnz	r0, 800ad6a <_Znwj+0x20>
 800ad5c:	f000 f810 	bl	800ad80 <_ZSt15get_new_handlerv>
 800ad60:	b908      	cbnz	r0, 800ad66 <_Znwj+0x1c>
 800ad62:	f000 f815 	bl	800ad90 <abort>
 800ad66:	4780      	blx	r0
 800ad68:	e7f4      	b.n	800ad54 <_Znwj+0xa>
 800ad6a:	bd10      	pop	{r4, pc}

0800ad6c <_ZSt17__throw_bad_allocv>:
 800ad6c:	b508      	push	{r3, lr}
 800ad6e:	f000 f80f 	bl	800ad90 <abort>

0800ad72 <_ZSt19__throw_logic_errorPKc>:
 800ad72:	b508      	push	{r3, lr}
 800ad74:	f000 f80c 	bl	800ad90 <abort>

0800ad78 <_ZSt20__throw_length_errorPKc>:
 800ad78:	b508      	push	{r3, lr}
 800ad7a:	f000 f809 	bl	800ad90 <abort>
	...

0800ad80 <_ZSt15get_new_handlerv>:
 800ad80:	4b02      	ldr	r3, [pc, #8]	; (800ad8c <_ZSt15get_new_handlerv+0xc>)
 800ad82:	6818      	ldr	r0, [r3, #0]
 800ad84:	f3bf 8f5b 	dmb	ish
 800ad88:	4770      	bx	lr
 800ad8a:	bf00      	nop
 800ad8c:	200056dc 	.word	0x200056dc

0800ad90 <abort>:
 800ad90:	b508      	push	{r3, lr}
 800ad92:	2006      	movs	r0, #6
 800ad94:	f000 f9fa 	bl	800b18c <raise>
 800ad98:	2001      	movs	r0, #1
 800ad9a:	f7f8 fefb 	bl	8003b94 <_exit>
	...

0800ada0 <__errno>:
 800ada0:	4b01      	ldr	r3, [pc, #4]	; (800ada8 <__errno+0x8>)
 800ada2:	6818      	ldr	r0, [r3, #0]
 800ada4:	4770      	bx	lr
 800ada6:	bf00      	nop
 800ada8:	20000014 	.word	0x20000014

0800adac <__libc_init_array>:
 800adac:	b570      	push	{r4, r5, r6, lr}
 800adae:	4d0d      	ldr	r5, [pc, #52]	; (800ade4 <__libc_init_array+0x38>)
 800adb0:	4c0d      	ldr	r4, [pc, #52]	; (800ade8 <__libc_init_array+0x3c>)
 800adb2:	1b64      	subs	r4, r4, r5
 800adb4:	10a4      	asrs	r4, r4, #2
 800adb6:	2600      	movs	r6, #0
 800adb8:	42a6      	cmp	r6, r4
 800adba:	d109      	bne.n	800add0 <__libc_init_array+0x24>
 800adbc:	4d0b      	ldr	r5, [pc, #44]	; (800adec <__libc_init_array+0x40>)
 800adbe:	4c0c      	ldr	r4, [pc, #48]	; (800adf0 <__libc_init_array+0x44>)
 800adc0:	f000 fa44 	bl	800b24c <_init>
 800adc4:	1b64      	subs	r4, r4, r5
 800adc6:	10a4      	asrs	r4, r4, #2
 800adc8:	2600      	movs	r6, #0
 800adca:	42a6      	cmp	r6, r4
 800adcc:	d105      	bne.n	800adda <__libc_init_array+0x2e>
 800adce:	bd70      	pop	{r4, r5, r6, pc}
 800add0:	f855 3b04 	ldr.w	r3, [r5], #4
 800add4:	4798      	blx	r3
 800add6:	3601      	adds	r6, #1
 800add8:	e7ee      	b.n	800adb8 <__libc_init_array+0xc>
 800adda:	f855 3b04 	ldr.w	r3, [r5], #4
 800adde:	4798      	blx	r3
 800ade0:	3601      	adds	r6, #1
 800ade2:	e7f2      	b.n	800adca <__libc_init_array+0x1e>
 800ade4:	0800b790 	.word	0x0800b790
 800ade8:	0800b790 	.word	0x0800b790
 800adec:	0800b790 	.word	0x0800b790
 800adf0:	0800b798 	.word	0x0800b798

0800adf4 <__retarget_lock_acquire_recursive>:
 800adf4:	4770      	bx	lr

0800adf6 <__retarget_lock_release_recursive>:
 800adf6:	4770      	bx	lr

0800adf8 <malloc>:
 800adf8:	4b02      	ldr	r3, [pc, #8]	; (800ae04 <malloc+0xc>)
 800adfa:	4601      	mov	r1, r0
 800adfc:	6818      	ldr	r0, [r3, #0]
 800adfe:	f000 b8a7 	b.w	800af50 <_malloc_r>
 800ae02:	bf00      	nop
 800ae04:	20000014 	.word	0x20000014

0800ae08 <free>:
 800ae08:	4b02      	ldr	r3, [pc, #8]	; (800ae14 <free+0xc>)
 800ae0a:	4601      	mov	r1, r0
 800ae0c:	6818      	ldr	r0, [r3, #0]
 800ae0e:	f000 b833 	b.w	800ae78 <_free_r>
 800ae12:	bf00      	nop
 800ae14:	20000014 	.word	0x20000014

0800ae18 <memcpy>:
 800ae18:	440a      	add	r2, r1
 800ae1a:	4291      	cmp	r1, r2
 800ae1c:	f100 33ff 	add.w	r3, r0, #4294967295
 800ae20:	d100      	bne.n	800ae24 <memcpy+0xc>
 800ae22:	4770      	bx	lr
 800ae24:	b510      	push	{r4, lr}
 800ae26:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ae2a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ae2e:	4291      	cmp	r1, r2
 800ae30:	d1f9      	bne.n	800ae26 <memcpy+0xe>
 800ae32:	bd10      	pop	{r4, pc}

0800ae34 <memmove>:
 800ae34:	4288      	cmp	r0, r1
 800ae36:	b510      	push	{r4, lr}
 800ae38:	eb01 0402 	add.w	r4, r1, r2
 800ae3c:	d902      	bls.n	800ae44 <memmove+0x10>
 800ae3e:	4284      	cmp	r4, r0
 800ae40:	4623      	mov	r3, r4
 800ae42:	d807      	bhi.n	800ae54 <memmove+0x20>
 800ae44:	1e43      	subs	r3, r0, #1
 800ae46:	42a1      	cmp	r1, r4
 800ae48:	d008      	beq.n	800ae5c <memmove+0x28>
 800ae4a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ae4e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ae52:	e7f8      	b.n	800ae46 <memmove+0x12>
 800ae54:	4402      	add	r2, r0
 800ae56:	4601      	mov	r1, r0
 800ae58:	428a      	cmp	r2, r1
 800ae5a:	d100      	bne.n	800ae5e <memmove+0x2a>
 800ae5c:	bd10      	pop	{r4, pc}
 800ae5e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ae62:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ae66:	e7f7      	b.n	800ae58 <memmove+0x24>

0800ae68 <memset>:
 800ae68:	4402      	add	r2, r0
 800ae6a:	4603      	mov	r3, r0
 800ae6c:	4293      	cmp	r3, r2
 800ae6e:	d100      	bne.n	800ae72 <memset+0xa>
 800ae70:	4770      	bx	lr
 800ae72:	f803 1b01 	strb.w	r1, [r3], #1
 800ae76:	e7f9      	b.n	800ae6c <memset+0x4>

0800ae78 <_free_r>:
 800ae78:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ae7a:	2900      	cmp	r1, #0
 800ae7c:	d044      	beq.n	800af08 <_free_r+0x90>
 800ae7e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ae82:	9001      	str	r0, [sp, #4]
 800ae84:	2b00      	cmp	r3, #0
 800ae86:	f1a1 0404 	sub.w	r4, r1, #4
 800ae8a:	bfb8      	it	lt
 800ae8c:	18e4      	addlt	r4, r4, r3
 800ae8e:	f000 f999 	bl	800b1c4 <__malloc_lock>
 800ae92:	4a1e      	ldr	r2, [pc, #120]	; (800af0c <_free_r+0x94>)
 800ae94:	9801      	ldr	r0, [sp, #4]
 800ae96:	6813      	ldr	r3, [r2, #0]
 800ae98:	b933      	cbnz	r3, 800aea8 <_free_r+0x30>
 800ae9a:	6063      	str	r3, [r4, #4]
 800ae9c:	6014      	str	r4, [r2, #0]
 800ae9e:	b003      	add	sp, #12
 800aea0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800aea4:	f000 b994 	b.w	800b1d0 <__malloc_unlock>
 800aea8:	42a3      	cmp	r3, r4
 800aeaa:	d908      	bls.n	800aebe <_free_r+0x46>
 800aeac:	6825      	ldr	r5, [r4, #0]
 800aeae:	1961      	adds	r1, r4, r5
 800aeb0:	428b      	cmp	r3, r1
 800aeb2:	bf01      	itttt	eq
 800aeb4:	6819      	ldreq	r1, [r3, #0]
 800aeb6:	685b      	ldreq	r3, [r3, #4]
 800aeb8:	1949      	addeq	r1, r1, r5
 800aeba:	6021      	streq	r1, [r4, #0]
 800aebc:	e7ed      	b.n	800ae9a <_free_r+0x22>
 800aebe:	461a      	mov	r2, r3
 800aec0:	685b      	ldr	r3, [r3, #4]
 800aec2:	b10b      	cbz	r3, 800aec8 <_free_r+0x50>
 800aec4:	42a3      	cmp	r3, r4
 800aec6:	d9fa      	bls.n	800aebe <_free_r+0x46>
 800aec8:	6811      	ldr	r1, [r2, #0]
 800aeca:	1855      	adds	r5, r2, r1
 800aecc:	42a5      	cmp	r5, r4
 800aece:	d10b      	bne.n	800aee8 <_free_r+0x70>
 800aed0:	6824      	ldr	r4, [r4, #0]
 800aed2:	4421      	add	r1, r4
 800aed4:	1854      	adds	r4, r2, r1
 800aed6:	42a3      	cmp	r3, r4
 800aed8:	6011      	str	r1, [r2, #0]
 800aeda:	d1e0      	bne.n	800ae9e <_free_r+0x26>
 800aedc:	681c      	ldr	r4, [r3, #0]
 800aede:	685b      	ldr	r3, [r3, #4]
 800aee0:	6053      	str	r3, [r2, #4]
 800aee2:	4421      	add	r1, r4
 800aee4:	6011      	str	r1, [r2, #0]
 800aee6:	e7da      	b.n	800ae9e <_free_r+0x26>
 800aee8:	d902      	bls.n	800aef0 <_free_r+0x78>
 800aeea:	230c      	movs	r3, #12
 800aeec:	6003      	str	r3, [r0, #0]
 800aeee:	e7d6      	b.n	800ae9e <_free_r+0x26>
 800aef0:	6825      	ldr	r5, [r4, #0]
 800aef2:	1961      	adds	r1, r4, r5
 800aef4:	428b      	cmp	r3, r1
 800aef6:	bf04      	itt	eq
 800aef8:	6819      	ldreq	r1, [r3, #0]
 800aefa:	685b      	ldreq	r3, [r3, #4]
 800aefc:	6063      	str	r3, [r4, #4]
 800aefe:	bf04      	itt	eq
 800af00:	1949      	addeq	r1, r1, r5
 800af02:	6021      	streq	r1, [r4, #0]
 800af04:	6054      	str	r4, [r2, #4]
 800af06:	e7ca      	b.n	800ae9e <_free_r+0x26>
 800af08:	b003      	add	sp, #12
 800af0a:	bd30      	pop	{r4, r5, pc}
 800af0c:	200056e4 	.word	0x200056e4

0800af10 <sbrk_aligned>:
 800af10:	b570      	push	{r4, r5, r6, lr}
 800af12:	4e0e      	ldr	r6, [pc, #56]	; (800af4c <sbrk_aligned+0x3c>)
 800af14:	460c      	mov	r4, r1
 800af16:	6831      	ldr	r1, [r6, #0]
 800af18:	4605      	mov	r5, r0
 800af1a:	b911      	cbnz	r1, 800af22 <sbrk_aligned+0x12>
 800af1c:	f000 f8fe 	bl	800b11c <_sbrk_r>
 800af20:	6030      	str	r0, [r6, #0]
 800af22:	4621      	mov	r1, r4
 800af24:	4628      	mov	r0, r5
 800af26:	f000 f8f9 	bl	800b11c <_sbrk_r>
 800af2a:	1c43      	adds	r3, r0, #1
 800af2c:	d00a      	beq.n	800af44 <sbrk_aligned+0x34>
 800af2e:	1cc4      	adds	r4, r0, #3
 800af30:	f024 0403 	bic.w	r4, r4, #3
 800af34:	42a0      	cmp	r0, r4
 800af36:	d007      	beq.n	800af48 <sbrk_aligned+0x38>
 800af38:	1a21      	subs	r1, r4, r0
 800af3a:	4628      	mov	r0, r5
 800af3c:	f000 f8ee 	bl	800b11c <_sbrk_r>
 800af40:	3001      	adds	r0, #1
 800af42:	d101      	bne.n	800af48 <sbrk_aligned+0x38>
 800af44:	f04f 34ff 	mov.w	r4, #4294967295
 800af48:	4620      	mov	r0, r4
 800af4a:	bd70      	pop	{r4, r5, r6, pc}
 800af4c:	200056e8 	.word	0x200056e8

0800af50 <_malloc_r>:
 800af50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800af54:	1ccd      	adds	r5, r1, #3
 800af56:	f025 0503 	bic.w	r5, r5, #3
 800af5a:	3508      	adds	r5, #8
 800af5c:	2d0c      	cmp	r5, #12
 800af5e:	bf38      	it	cc
 800af60:	250c      	movcc	r5, #12
 800af62:	2d00      	cmp	r5, #0
 800af64:	4607      	mov	r7, r0
 800af66:	db01      	blt.n	800af6c <_malloc_r+0x1c>
 800af68:	42a9      	cmp	r1, r5
 800af6a:	d905      	bls.n	800af78 <_malloc_r+0x28>
 800af6c:	230c      	movs	r3, #12
 800af6e:	603b      	str	r3, [r7, #0]
 800af70:	2600      	movs	r6, #0
 800af72:	4630      	mov	r0, r6
 800af74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800af78:	4e2e      	ldr	r6, [pc, #184]	; (800b034 <_malloc_r+0xe4>)
 800af7a:	f000 f923 	bl	800b1c4 <__malloc_lock>
 800af7e:	6833      	ldr	r3, [r6, #0]
 800af80:	461c      	mov	r4, r3
 800af82:	bb34      	cbnz	r4, 800afd2 <_malloc_r+0x82>
 800af84:	4629      	mov	r1, r5
 800af86:	4638      	mov	r0, r7
 800af88:	f7ff ffc2 	bl	800af10 <sbrk_aligned>
 800af8c:	1c43      	adds	r3, r0, #1
 800af8e:	4604      	mov	r4, r0
 800af90:	d14d      	bne.n	800b02e <_malloc_r+0xde>
 800af92:	6834      	ldr	r4, [r6, #0]
 800af94:	4626      	mov	r6, r4
 800af96:	2e00      	cmp	r6, #0
 800af98:	d140      	bne.n	800b01c <_malloc_r+0xcc>
 800af9a:	6823      	ldr	r3, [r4, #0]
 800af9c:	4631      	mov	r1, r6
 800af9e:	4638      	mov	r0, r7
 800afa0:	eb04 0803 	add.w	r8, r4, r3
 800afa4:	f000 f8ba 	bl	800b11c <_sbrk_r>
 800afa8:	4580      	cmp	r8, r0
 800afaa:	d13a      	bne.n	800b022 <_malloc_r+0xd2>
 800afac:	6821      	ldr	r1, [r4, #0]
 800afae:	3503      	adds	r5, #3
 800afb0:	1a6d      	subs	r5, r5, r1
 800afb2:	f025 0503 	bic.w	r5, r5, #3
 800afb6:	3508      	adds	r5, #8
 800afb8:	2d0c      	cmp	r5, #12
 800afba:	bf38      	it	cc
 800afbc:	250c      	movcc	r5, #12
 800afbe:	4629      	mov	r1, r5
 800afc0:	4638      	mov	r0, r7
 800afc2:	f7ff ffa5 	bl	800af10 <sbrk_aligned>
 800afc6:	3001      	adds	r0, #1
 800afc8:	d02b      	beq.n	800b022 <_malloc_r+0xd2>
 800afca:	6823      	ldr	r3, [r4, #0]
 800afcc:	442b      	add	r3, r5
 800afce:	6023      	str	r3, [r4, #0]
 800afd0:	e00e      	b.n	800aff0 <_malloc_r+0xa0>
 800afd2:	6822      	ldr	r2, [r4, #0]
 800afd4:	1b52      	subs	r2, r2, r5
 800afd6:	d41e      	bmi.n	800b016 <_malloc_r+0xc6>
 800afd8:	2a0b      	cmp	r2, #11
 800afda:	d916      	bls.n	800b00a <_malloc_r+0xba>
 800afdc:	1961      	adds	r1, r4, r5
 800afde:	42a3      	cmp	r3, r4
 800afe0:	6025      	str	r5, [r4, #0]
 800afe2:	bf18      	it	ne
 800afe4:	6059      	strne	r1, [r3, #4]
 800afe6:	6863      	ldr	r3, [r4, #4]
 800afe8:	bf08      	it	eq
 800afea:	6031      	streq	r1, [r6, #0]
 800afec:	5162      	str	r2, [r4, r5]
 800afee:	604b      	str	r3, [r1, #4]
 800aff0:	4638      	mov	r0, r7
 800aff2:	f104 060b 	add.w	r6, r4, #11
 800aff6:	f000 f8eb 	bl	800b1d0 <__malloc_unlock>
 800affa:	f026 0607 	bic.w	r6, r6, #7
 800affe:	1d23      	adds	r3, r4, #4
 800b000:	1af2      	subs	r2, r6, r3
 800b002:	d0b6      	beq.n	800af72 <_malloc_r+0x22>
 800b004:	1b9b      	subs	r3, r3, r6
 800b006:	50a3      	str	r3, [r4, r2]
 800b008:	e7b3      	b.n	800af72 <_malloc_r+0x22>
 800b00a:	6862      	ldr	r2, [r4, #4]
 800b00c:	42a3      	cmp	r3, r4
 800b00e:	bf0c      	ite	eq
 800b010:	6032      	streq	r2, [r6, #0]
 800b012:	605a      	strne	r2, [r3, #4]
 800b014:	e7ec      	b.n	800aff0 <_malloc_r+0xa0>
 800b016:	4623      	mov	r3, r4
 800b018:	6864      	ldr	r4, [r4, #4]
 800b01a:	e7b2      	b.n	800af82 <_malloc_r+0x32>
 800b01c:	4634      	mov	r4, r6
 800b01e:	6876      	ldr	r6, [r6, #4]
 800b020:	e7b9      	b.n	800af96 <_malloc_r+0x46>
 800b022:	230c      	movs	r3, #12
 800b024:	603b      	str	r3, [r7, #0]
 800b026:	4638      	mov	r0, r7
 800b028:	f000 f8d2 	bl	800b1d0 <__malloc_unlock>
 800b02c:	e7a1      	b.n	800af72 <_malloc_r+0x22>
 800b02e:	6025      	str	r5, [r4, #0]
 800b030:	e7de      	b.n	800aff0 <_malloc_r+0xa0>
 800b032:	bf00      	nop
 800b034:	200056e4 	.word	0x200056e4

0800b038 <realloc>:
 800b038:	4b02      	ldr	r3, [pc, #8]	; (800b044 <realloc+0xc>)
 800b03a:	460a      	mov	r2, r1
 800b03c:	4601      	mov	r1, r0
 800b03e:	6818      	ldr	r0, [r3, #0]
 800b040:	f000 b8cc 	b.w	800b1dc <_realloc_r>
 800b044:	20000014 	.word	0x20000014

0800b048 <cleanup_glue>:
 800b048:	b538      	push	{r3, r4, r5, lr}
 800b04a:	460c      	mov	r4, r1
 800b04c:	6809      	ldr	r1, [r1, #0]
 800b04e:	4605      	mov	r5, r0
 800b050:	b109      	cbz	r1, 800b056 <cleanup_glue+0xe>
 800b052:	f7ff fff9 	bl	800b048 <cleanup_glue>
 800b056:	4621      	mov	r1, r4
 800b058:	4628      	mov	r0, r5
 800b05a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b05e:	f7ff bf0b 	b.w	800ae78 <_free_r>
	...

0800b064 <_reclaim_reent>:
 800b064:	4b2c      	ldr	r3, [pc, #176]	; (800b118 <_reclaim_reent+0xb4>)
 800b066:	681b      	ldr	r3, [r3, #0]
 800b068:	4283      	cmp	r3, r0
 800b06a:	b570      	push	{r4, r5, r6, lr}
 800b06c:	4604      	mov	r4, r0
 800b06e:	d051      	beq.n	800b114 <_reclaim_reent+0xb0>
 800b070:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800b072:	b143      	cbz	r3, 800b086 <_reclaim_reent+0x22>
 800b074:	68db      	ldr	r3, [r3, #12]
 800b076:	2b00      	cmp	r3, #0
 800b078:	d14a      	bne.n	800b110 <_reclaim_reent+0xac>
 800b07a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b07c:	6819      	ldr	r1, [r3, #0]
 800b07e:	b111      	cbz	r1, 800b086 <_reclaim_reent+0x22>
 800b080:	4620      	mov	r0, r4
 800b082:	f7ff fef9 	bl	800ae78 <_free_r>
 800b086:	6961      	ldr	r1, [r4, #20]
 800b088:	b111      	cbz	r1, 800b090 <_reclaim_reent+0x2c>
 800b08a:	4620      	mov	r0, r4
 800b08c:	f7ff fef4 	bl	800ae78 <_free_r>
 800b090:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800b092:	b111      	cbz	r1, 800b09a <_reclaim_reent+0x36>
 800b094:	4620      	mov	r0, r4
 800b096:	f7ff feef 	bl	800ae78 <_free_r>
 800b09a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800b09c:	b111      	cbz	r1, 800b0a4 <_reclaim_reent+0x40>
 800b09e:	4620      	mov	r0, r4
 800b0a0:	f7ff feea 	bl	800ae78 <_free_r>
 800b0a4:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800b0a6:	b111      	cbz	r1, 800b0ae <_reclaim_reent+0x4a>
 800b0a8:	4620      	mov	r0, r4
 800b0aa:	f7ff fee5 	bl	800ae78 <_free_r>
 800b0ae:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800b0b0:	b111      	cbz	r1, 800b0b8 <_reclaim_reent+0x54>
 800b0b2:	4620      	mov	r0, r4
 800b0b4:	f7ff fee0 	bl	800ae78 <_free_r>
 800b0b8:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800b0ba:	b111      	cbz	r1, 800b0c2 <_reclaim_reent+0x5e>
 800b0bc:	4620      	mov	r0, r4
 800b0be:	f7ff fedb 	bl	800ae78 <_free_r>
 800b0c2:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800b0c4:	b111      	cbz	r1, 800b0cc <_reclaim_reent+0x68>
 800b0c6:	4620      	mov	r0, r4
 800b0c8:	f7ff fed6 	bl	800ae78 <_free_r>
 800b0cc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b0ce:	b111      	cbz	r1, 800b0d6 <_reclaim_reent+0x72>
 800b0d0:	4620      	mov	r0, r4
 800b0d2:	f7ff fed1 	bl	800ae78 <_free_r>
 800b0d6:	69a3      	ldr	r3, [r4, #24]
 800b0d8:	b1e3      	cbz	r3, 800b114 <_reclaim_reent+0xb0>
 800b0da:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800b0dc:	4620      	mov	r0, r4
 800b0de:	4798      	blx	r3
 800b0e0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800b0e2:	b1b9      	cbz	r1, 800b114 <_reclaim_reent+0xb0>
 800b0e4:	4620      	mov	r0, r4
 800b0e6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b0ea:	f7ff bfad 	b.w	800b048 <cleanup_glue>
 800b0ee:	5949      	ldr	r1, [r1, r5]
 800b0f0:	b941      	cbnz	r1, 800b104 <_reclaim_reent+0xa0>
 800b0f2:	3504      	adds	r5, #4
 800b0f4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b0f6:	2d80      	cmp	r5, #128	; 0x80
 800b0f8:	68d9      	ldr	r1, [r3, #12]
 800b0fa:	d1f8      	bne.n	800b0ee <_reclaim_reent+0x8a>
 800b0fc:	4620      	mov	r0, r4
 800b0fe:	f7ff febb 	bl	800ae78 <_free_r>
 800b102:	e7ba      	b.n	800b07a <_reclaim_reent+0x16>
 800b104:	680e      	ldr	r6, [r1, #0]
 800b106:	4620      	mov	r0, r4
 800b108:	f7ff feb6 	bl	800ae78 <_free_r>
 800b10c:	4631      	mov	r1, r6
 800b10e:	e7ef      	b.n	800b0f0 <_reclaim_reent+0x8c>
 800b110:	2500      	movs	r5, #0
 800b112:	e7ef      	b.n	800b0f4 <_reclaim_reent+0x90>
 800b114:	bd70      	pop	{r4, r5, r6, pc}
 800b116:	bf00      	nop
 800b118:	20000014 	.word	0x20000014

0800b11c <_sbrk_r>:
 800b11c:	b538      	push	{r3, r4, r5, lr}
 800b11e:	4d06      	ldr	r5, [pc, #24]	; (800b138 <_sbrk_r+0x1c>)
 800b120:	2300      	movs	r3, #0
 800b122:	4604      	mov	r4, r0
 800b124:	4608      	mov	r0, r1
 800b126:	602b      	str	r3, [r5, #0]
 800b128:	f7f8 fd3e 	bl	8003ba8 <_sbrk>
 800b12c:	1c43      	adds	r3, r0, #1
 800b12e:	d102      	bne.n	800b136 <_sbrk_r+0x1a>
 800b130:	682b      	ldr	r3, [r5, #0]
 800b132:	b103      	cbz	r3, 800b136 <_sbrk_r+0x1a>
 800b134:	6023      	str	r3, [r4, #0]
 800b136:	bd38      	pop	{r3, r4, r5, pc}
 800b138:	200056ec 	.word	0x200056ec

0800b13c <_raise_r>:
 800b13c:	291f      	cmp	r1, #31
 800b13e:	b538      	push	{r3, r4, r5, lr}
 800b140:	4604      	mov	r4, r0
 800b142:	460d      	mov	r5, r1
 800b144:	d904      	bls.n	800b150 <_raise_r+0x14>
 800b146:	2316      	movs	r3, #22
 800b148:	6003      	str	r3, [r0, #0]
 800b14a:	f04f 30ff 	mov.w	r0, #4294967295
 800b14e:	bd38      	pop	{r3, r4, r5, pc}
 800b150:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b152:	b112      	cbz	r2, 800b15a <_raise_r+0x1e>
 800b154:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b158:	b94b      	cbnz	r3, 800b16e <_raise_r+0x32>
 800b15a:	4620      	mov	r0, r4
 800b15c:	f000 f830 	bl	800b1c0 <_getpid_r>
 800b160:	462a      	mov	r2, r5
 800b162:	4601      	mov	r1, r0
 800b164:	4620      	mov	r0, r4
 800b166:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b16a:	f000 b817 	b.w	800b19c <_kill_r>
 800b16e:	2b01      	cmp	r3, #1
 800b170:	d00a      	beq.n	800b188 <_raise_r+0x4c>
 800b172:	1c59      	adds	r1, r3, #1
 800b174:	d103      	bne.n	800b17e <_raise_r+0x42>
 800b176:	2316      	movs	r3, #22
 800b178:	6003      	str	r3, [r0, #0]
 800b17a:	2001      	movs	r0, #1
 800b17c:	e7e7      	b.n	800b14e <_raise_r+0x12>
 800b17e:	2400      	movs	r4, #0
 800b180:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b184:	4628      	mov	r0, r5
 800b186:	4798      	blx	r3
 800b188:	2000      	movs	r0, #0
 800b18a:	e7e0      	b.n	800b14e <_raise_r+0x12>

0800b18c <raise>:
 800b18c:	4b02      	ldr	r3, [pc, #8]	; (800b198 <raise+0xc>)
 800b18e:	4601      	mov	r1, r0
 800b190:	6818      	ldr	r0, [r3, #0]
 800b192:	f7ff bfd3 	b.w	800b13c <_raise_r>
 800b196:	bf00      	nop
 800b198:	20000014 	.word	0x20000014

0800b19c <_kill_r>:
 800b19c:	b538      	push	{r3, r4, r5, lr}
 800b19e:	4d07      	ldr	r5, [pc, #28]	; (800b1bc <_kill_r+0x20>)
 800b1a0:	2300      	movs	r3, #0
 800b1a2:	4604      	mov	r4, r0
 800b1a4:	4608      	mov	r0, r1
 800b1a6:	4611      	mov	r1, r2
 800b1a8:	602b      	str	r3, [r5, #0]
 800b1aa:	f7f8 fce3 	bl	8003b74 <_kill>
 800b1ae:	1c43      	adds	r3, r0, #1
 800b1b0:	d102      	bne.n	800b1b8 <_kill_r+0x1c>
 800b1b2:	682b      	ldr	r3, [r5, #0]
 800b1b4:	b103      	cbz	r3, 800b1b8 <_kill_r+0x1c>
 800b1b6:	6023      	str	r3, [r4, #0]
 800b1b8:	bd38      	pop	{r3, r4, r5, pc}
 800b1ba:	bf00      	nop
 800b1bc:	200056ec 	.word	0x200056ec

0800b1c0 <_getpid_r>:
 800b1c0:	f7f8 bcd0 	b.w	8003b64 <_getpid>

0800b1c4 <__malloc_lock>:
 800b1c4:	4801      	ldr	r0, [pc, #4]	; (800b1cc <__malloc_lock+0x8>)
 800b1c6:	f7ff be15 	b.w	800adf4 <__retarget_lock_acquire_recursive>
 800b1ca:	bf00      	nop
 800b1cc:	200056e0 	.word	0x200056e0

0800b1d0 <__malloc_unlock>:
 800b1d0:	4801      	ldr	r0, [pc, #4]	; (800b1d8 <__malloc_unlock+0x8>)
 800b1d2:	f7ff be10 	b.w	800adf6 <__retarget_lock_release_recursive>
 800b1d6:	bf00      	nop
 800b1d8:	200056e0 	.word	0x200056e0

0800b1dc <_realloc_r>:
 800b1dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b1e0:	4680      	mov	r8, r0
 800b1e2:	4614      	mov	r4, r2
 800b1e4:	460e      	mov	r6, r1
 800b1e6:	b921      	cbnz	r1, 800b1f2 <_realloc_r+0x16>
 800b1e8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b1ec:	4611      	mov	r1, r2
 800b1ee:	f7ff beaf 	b.w	800af50 <_malloc_r>
 800b1f2:	b92a      	cbnz	r2, 800b200 <_realloc_r+0x24>
 800b1f4:	f7ff fe40 	bl	800ae78 <_free_r>
 800b1f8:	4625      	mov	r5, r4
 800b1fa:	4628      	mov	r0, r5
 800b1fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b200:	f000 f81b 	bl	800b23a <_malloc_usable_size_r>
 800b204:	4284      	cmp	r4, r0
 800b206:	4607      	mov	r7, r0
 800b208:	d802      	bhi.n	800b210 <_realloc_r+0x34>
 800b20a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b20e:	d812      	bhi.n	800b236 <_realloc_r+0x5a>
 800b210:	4621      	mov	r1, r4
 800b212:	4640      	mov	r0, r8
 800b214:	f7ff fe9c 	bl	800af50 <_malloc_r>
 800b218:	4605      	mov	r5, r0
 800b21a:	2800      	cmp	r0, #0
 800b21c:	d0ed      	beq.n	800b1fa <_realloc_r+0x1e>
 800b21e:	42bc      	cmp	r4, r7
 800b220:	4622      	mov	r2, r4
 800b222:	4631      	mov	r1, r6
 800b224:	bf28      	it	cs
 800b226:	463a      	movcs	r2, r7
 800b228:	f7ff fdf6 	bl	800ae18 <memcpy>
 800b22c:	4631      	mov	r1, r6
 800b22e:	4640      	mov	r0, r8
 800b230:	f7ff fe22 	bl	800ae78 <_free_r>
 800b234:	e7e1      	b.n	800b1fa <_realloc_r+0x1e>
 800b236:	4635      	mov	r5, r6
 800b238:	e7df      	b.n	800b1fa <_realloc_r+0x1e>

0800b23a <_malloc_usable_size_r>:
 800b23a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b23e:	1f18      	subs	r0, r3, #4
 800b240:	2b00      	cmp	r3, #0
 800b242:	bfbc      	itt	lt
 800b244:	580b      	ldrlt	r3, [r1, r0]
 800b246:	18c0      	addlt	r0, r0, r3
 800b248:	4770      	bx	lr
	...

0800b24c <_init>:
 800b24c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b24e:	bf00      	nop
 800b250:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b252:	bc08      	pop	{r3}
 800b254:	469e      	mov	lr, r3
 800b256:	4770      	bx	lr

0800b258 <_fini>:
 800b258:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b25a:	bf00      	nop
 800b25c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b25e:	bc08      	pop	{r3}
 800b260:	469e      	mov	lr, r3
 800b262:	4770      	bx	lr
