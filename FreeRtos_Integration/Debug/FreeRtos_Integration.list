
FreeRtos_Integration.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bf18  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006c8  0800c0b8  0800c0b8  0001c0b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c780  0800c780  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  0800c780  0800c780  0001c780  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c788  0800c788  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800c788  0800c788  0001c788  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  0800c790  0800c790  0001c790  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  0800c798  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000056ac  20000078  0800c810  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20005724  0800c810  00025724  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002a522  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004506  00000000  00000000  0004a5ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001970  00000000  00000000  0004ead0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001830  00000000  00000000  00050440  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00006d6a  00000000  00000000  00051c70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b477  00000000  00000000  000589da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b6eda  00000000  00000000  00073e51  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0012ad2b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008948  00000000  00000000  0012ad7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000078 	.word	0x20000078
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800c0a0 	.word	0x0800c0a0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000007c 	.word	0x2000007c
 80001dc:	0800c0a0 	.word	0x0800c0a0

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_dmul>:
 8000290:	b570      	push	{r4, r5, r6, lr}
 8000292:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000296:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800029a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800029e:	bf1d      	ittte	ne
 80002a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80002a4:	ea94 0f0c 	teqne	r4, ip
 80002a8:	ea95 0f0c 	teqne	r5, ip
 80002ac:	f000 f8de 	bleq	800046c <__aeabi_dmul+0x1dc>
 80002b0:	442c      	add	r4, r5
 80002b2:	ea81 0603 	eor.w	r6, r1, r3
 80002b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002c2:	bf18      	it	ne
 80002c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002d0:	d038      	beq.n	8000344 <__aeabi_dmul+0xb4>
 80002d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002d6:	f04f 0500 	mov.w	r5, #0
 80002da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002de:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80002e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002e6:	f04f 0600 	mov.w	r6, #0
 80002ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002ee:	f09c 0f00 	teq	ip, #0
 80002f2:	bf18      	it	ne
 80002f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002f8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80002fc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000300:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000304:	d204      	bcs.n	8000310 <__aeabi_dmul+0x80>
 8000306:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800030a:	416d      	adcs	r5, r5
 800030c:	eb46 0606 	adc.w	r6, r6, r6
 8000310:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000314:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000318:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800031c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000320:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000324:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000328:	bf88      	it	hi
 800032a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800032e:	d81e      	bhi.n	800036e <__aeabi_dmul+0xde>
 8000330:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	bd70      	pop	{r4, r5, r6, pc}
 8000344:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000348:	ea46 0101 	orr.w	r1, r6, r1
 800034c:	ea40 0002 	orr.w	r0, r0, r2
 8000350:	ea81 0103 	eor.w	r1, r1, r3
 8000354:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000358:	bfc2      	ittt	gt
 800035a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800035e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000362:	bd70      	popgt	{r4, r5, r6, pc}
 8000364:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000368:	f04f 0e00 	mov.w	lr, #0
 800036c:	3c01      	subs	r4, #1
 800036e:	f300 80ab 	bgt.w	80004c8 <__aeabi_dmul+0x238>
 8000372:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000376:	bfde      	ittt	le
 8000378:	2000      	movle	r0, #0
 800037a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800037e:	bd70      	pople	{r4, r5, r6, pc}
 8000380:	f1c4 0400 	rsb	r4, r4, #0
 8000384:	3c20      	subs	r4, #32
 8000386:	da35      	bge.n	80003f4 <__aeabi_dmul+0x164>
 8000388:	340c      	adds	r4, #12
 800038a:	dc1b      	bgt.n	80003c4 <__aeabi_dmul+0x134>
 800038c:	f104 0414 	add.w	r4, r4, #20
 8000390:	f1c4 0520 	rsb	r5, r4, #32
 8000394:	fa00 f305 	lsl.w	r3, r0, r5
 8000398:	fa20 f004 	lsr.w	r0, r0, r4
 800039c:	fa01 f205 	lsl.w	r2, r1, r5
 80003a0:	ea40 0002 	orr.w	r0, r0, r2
 80003a4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80003a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80003ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003b0:	fa21 f604 	lsr.w	r6, r1, r4
 80003b4:	eb42 0106 	adc.w	r1, r2, r6
 80003b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003bc:	bf08      	it	eq
 80003be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003c2:	bd70      	pop	{r4, r5, r6, pc}
 80003c4:	f1c4 040c 	rsb	r4, r4, #12
 80003c8:	f1c4 0520 	rsb	r5, r4, #32
 80003cc:	fa00 f304 	lsl.w	r3, r0, r4
 80003d0:	fa20 f005 	lsr.w	r0, r0, r5
 80003d4:	fa01 f204 	lsl.w	r2, r1, r4
 80003d8:	ea40 0002 	orr.w	r0, r0, r2
 80003dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003e4:	f141 0100 	adc.w	r1, r1, #0
 80003e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ec:	bf08      	it	eq
 80003ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003f2:	bd70      	pop	{r4, r5, r6, pc}
 80003f4:	f1c4 0520 	rsb	r5, r4, #32
 80003f8:	fa00 f205 	lsl.w	r2, r0, r5
 80003fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000400:	fa20 f304 	lsr.w	r3, r0, r4
 8000404:	fa01 f205 	lsl.w	r2, r1, r5
 8000408:	ea43 0302 	orr.w	r3, r3, r2
 800040c:	fa21 f004 	lsr.w	r0, r1, r4
 8000410:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000414:	fa21 f204 	lsr.w	r2, r1, r4
 8000418:	ea20 0002 	bic.w	r0, r0, r2
 800041c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000420:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000424:	bf08      	it	eq
 8000426:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800042a:	bd70      	pop	{r4, r5, r6, pc}
 800042c:	f094 0f00 	teq	r4, #0
 8000430:	d10f      	bne.n	8000452 <__aeabi_dmul+0x1c2>
 8000432:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000436:	0040      	lsls	r0, r0, #1
 8000438:	eb41 0101 	adc.w	r1, r1, r1
 800043c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000440:	bf08      	it	eq
 8000442:	3c01      	subeq	r4, #1
 8000444:	d0f7      	beq.n	8000436 <__aeabi_dmul+0x1a6>
 8000446:	ea41 0106 	orr.w	r1, r1, r6
 800044a:	f095 0f00 	teq	r5, #0
 800044e:	bf18      	it	ne
 8000450:	4770      	bxne	lr
 8000452:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000456:	0052      	lsls	r2, r2, #1
 8000458:	eb43 0303 	adc.w	r3, r3, r3
 800045c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000460:	bf08      	it	eq
 8000462:	3d01      	subeq	r5, #1
 8000464:	d0f7      	beq.n	8000456 <__aeabi_dmul+0x1c6>
 8000466:	ea43 0306 	orr.w	r3, r3, r6
 800046a:	4770      	bx	lr
 800046c:	ea94 0f0c 	teq	r4, ip
 8000470:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000474:	bf18      	it	ne
 8000476:	ea95 0f0c 	teqne	r5, ip
 800047a:	d00c      	beq.n	8000496 <__aeabi_dmul+0x206>
 800047c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000480:	bf18      	it	ne
 8000482:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000486:	d1d1      	bne.n	800042c <__aeabi_dmul+0x19c>
 8000488:	ea81 0103 	eor.w	r1, r1, r3
 800048c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000490:	f04f 0000 	mov.w	r0, #0
 8000494:	bd70      	pop	{r4, r5, r6, pc}
 8000496:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800049a:	bf06      	itte	eq
 800049c:	4610      	moveq	r0, r2
 800049e:	4619      	moveq	r1, r3
 80004a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004a4:	d019      	beq.n	80004da <__aeabi_dmul+0x24a>
 80004a6:	ea94 0f0c 	teq	r4, ip
 80004aa:	d102      	bne.n	80004b2 <__aeabi_dmul+0x222>
 80004ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004b0:	d113      	bne.n	80004da <__aeabi_dmul+0x24a>
 80004b2:	ea95 0f0c 	teq	r5, ip
 80004b6:	d105      	bne.n	80004c4 <__aeabi_dmul+0x234>
 80004b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004bc:	bf1c      	itt	ne
 80004be:	4610      	movne	r0, r2
 80004c0:	4619      	movne	r1, r3
 80004c2:	d10a      	bne.n	80004da <__aeabi_dmul+0x24a>
 80004c4:	ea81 0103 	eor.w	r1, r1, r3
 80004c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004cc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd70      	pop	{r4, r5, r6, pc}
 80004da:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004de:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80004e2:	bd70      	pop	{r4, r5, r6, pc}

080004e4 <__aeabi_drsub>:
 80004e4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80004e8:	e002      	b.n	80004f0 <__adddf3>
 80004ea:	bf00      	nop

080004ec <__aeabi_dsub>:
 80004ec:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080004f0 <__adddf3>:
 80004f0:	b530      	push	{r4, r5, lr}
 80004f2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004f6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004fa:	ea94 0f05 	teq	r4, r5
 80004fe:	bf08      	it	eq
 8000500:	ea90 0f02 	teqeq	r0, r2
 8000504:	bf1f      	itttt	ne
 8000506:	ea54 0c00 	orrsne.w	ip, r4, r0
 800050a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800050e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000512:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000516:	f000 80e2 	beq.w	80006de <__adddf3+0x1ee>
 800051a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800051e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000522:	bfb8      	it	lt
 8000524:	426d      	neglt	r5, r5
 8000526:	dd0c      	ble.n	8000542 <__adddf3+0x52>
 8000528:	442c      	add	r4, r5
 800052a:	ea80 0202 	eor.w	r2, r0, r2
 800052e:	ea81 0303 	eor.w	r3, r1, r3
 8000532:	ea82 0000 	eor.w	r0, r2, r0
 8000536:	ea83 0101 	eor.w	r1, r3, r1
 800053a:	ea80 0202 	eor.w	r2, r0, r2
 800053e:	ea81 0303 	eor.w	r3, r1, r3
 8000542:	2d36      	cmp	r5, #54	; 0x36
 8000544:	bf88      	it	hi
 8000546:	bd30      	pophi	{r4, r5, pc}
 8000548:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800054c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000550:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000554:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000558:	d002      	beq.n	8000560 <__adddf3+0x70>
 800055a:	4240      	negs	r0, r0
 800055c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000560:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000564:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000568:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800056c:	d002      	beq.n	8000574 <__adddf3+0x84>
 800056e:	4252      	negs	r2, r2
 8000570:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000574:	ea94 0f05 	teq	r4, r5
 8000578:	f000 80a7 	beq.w	80006ca <__adddf3+0x1da>
 800057c:	f1a4 0401 	sub.w	r4, r4, #1
 8000580:	f1d5 0e20 	rsbs	lr, r5, #32
 8000584:	db0d      	blt.n	80005a2 <__adddf3+0xb2>
 8000586:	fa02 fc0e 	lsl.w	ip, r2, lr
 800058a:	fa22 f205 	lsr.w	r2, r2, r5
 800058e:	1880      	adds	r0, r0, r2
 8000590:	f141 0100 	adc.w	r1, r1, #0
 8000594:	fa03 f20e 	lsl.w	r2, r3, lr
 8000598:	1880      	adds	r0, r0, r2
 800059a:	fa43 f305 	asr.w	r3, r3, r5
 800059e:	4159      	adcs	r1, r3
 80005a0:	e00e      	b.n	80005c0 <__adddf3+0xd0>
 80005a2:	f1a5 0520 	sub.w	r5, r5, #32
 80005a6:	f10e 0e20 	add.w	lr, lr, #32
 80005aa:	2a01      	cmp	r2, #1
 80005ac:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005b0:	bf28      	it	cs
 80005b2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005b6:	fa43 f305 	asr.w	r3, r3, r5
 80005ba:	18c0      	adds	r0, r0, r3
 80005bc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	d507      	bpl.n	80005d6 <__adddf3+0xe6>
 80005c6:	f04f 0e00 	mov.w	lr, #0
 80005ca:	f1dc 0c00 	rsbs	ip, ip, #0
 80005ce:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005d2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005d6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005da:	d31b      	bcc.n	8000614 <__adddf3+0x124>
 80005dc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80005e0:	d30c      	bcc.n	80005fc <__adddf3+0x10c>
 80005e2:	0849      	lsrs	r1, r1, #1
 80005e4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005e8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005ec:	f104 0401 	add.w	r4, r4, #1
 80005f0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005f4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80005f8:	f080 809a 	bcs.w	8000730 <__adddf3+0x240>
 80005fc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000600:	bf08      	it	eq
 8000602:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000606:	f150 0000 	adcs.w	r0, r0, #0
 800060a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800060e:	ea41 0105 	orr.w	r1, r1, r5
 8000612:	bd30      	pop	{r4, r5, pc}
 8000614:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000618:	4140      	adcs	r0, r0
 800061a:	eb41 0101 	adc.w	r1, r1, r1
 800061e:	3c01      	subs	r4, #1
 8000620:	bf28      	it	cs
 8000622:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000626:	d2e9      	bcs.n	80005fc <__adddf3+0x10c>
 8000628:	f091 0f00 	teq	r1, #0
 800062c:	bf04      	itt	eq
 800062e:	4601      	moveq	r1, r0
 8000630:	2000      	moveq	r0, #0
 8000632:	fab1 f381 	clz	r3, r1
 8000636:	bf08      	it	eq
 8000638:	3320      	addeq	r3, #32
 800063a:	f1a3 030b 	sub.w	r3, r3, #11
 800063e:	f1b3 0220 	subs.w	r2, r3, #32
 8000642:	da0c      	bge.n	800065e <__adddf3+0x16e>
 8000644:	320c      	adds	r2, #12
 8000646:	dd08      	ble.n	800065a <__adddf3+0x16a>
 8000648:	f102 0c14 	add.w	ip, r2, #20
 800064c:	f1c2 020c 	rsb	r2, r2, #12
 8000650:	fa01 f00c 	lsl.w	r0, r1, ip
 8000654:	fa21 f102 	lsr.w	r1, r1, r2
 8000658:	e00c      	b.n	8000674 <__adddf3+0x184>
 800065a:	f102 0214 	add.w	r2, r2, #20
 800065e:	bfd8      	it	le
 8000660:	f1c2 0c20 	rsble	ip, r2, #32
 8000664:	fa01 f102 	lsl.w	r1, r1, r2
 8000668:	fa20 fc0c 	lsr.w	ip, r0, ip
 800066c:	bfdc      	itt	le
 800066e:	ea41 010c 	orrle.w	r1, r1, ip
 8000672:	4090      	lslle	r0, r2
 8000674:	1ae4      	subs	r4, r4, r3
 8000676:	bfa2      	ittt	ge
 8000678:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800067c:	4329      	orrge	r1, r5
 800067e:	bd30      	popge	{r4, r5, pc}
 8000680:	ea6f 0404 	mvn.w	r4, r4
 8000684:	3c1f      	subs	r4, #31
 8000686:	da1c      	bge.n	80006c2 <__adddf3+0x1d2>
 8000688:	340c      	adds	r4, #12
 800068a:	dc0e      	bgt.n	80006aa <__adddf3+0x1ba>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0220 	rsb	r2, r4, #32
 8000694:	fa20 f004 	lsr.w	r0, r0, r4
 8000698:	fa01 f302 	lsl.w	r3, r1, r2
 800069c:	ea40 0003 	orr.w	r0, r0, r3
 80006a0:	fa21 f304 	lsr.w	r3, r1, r4
 80006a4:	ea45 0103 	orr.w	r1, r5, r3
 80006a8:	bd30      	pop	{r4, r5, pc}
 80006aa:	f1c4 040c 	rsb	r4, r4, #12
 80006ae:	f1c4 0220 	rsb	r2, r4, #32
 80006b2:	fa20 f002 	lsr.w	r0, r0, r2
 80006b6:	fa01 f304 	lsl.w	r3, r1, r4
 80006ba:	ea40 0003 	orr.w	r0, r0, r3
 80006be:	4629      	mov	r1, r5
 80006c0:	bd30      	pop	{r4, r5, pc}
 80006c2:	fa21 f004 	lsr.w	r0, r1, r4
 80006c6:	4629      	mov	r1, r5
 80006c8:	bd30      	pop	{r4, r5, pc}
 80006ca:	f094 0f00 	teq	r4, #0
 80006ce:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006d2:	bf06      	itte	eq
 80006d4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006d8:	3401      	addeq	r4, #1
 80006da:	3d01      	subne	r5, #1
 80006dc:	e74e      	b.n	800057c <__adddf3+0x8c>
 80006de:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006e2:	bf18      	it	ne
 80006e4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006e8:	d029      	beq.n	800073e <__adddf3+0x24e>
 80006ea:	ea94 0f05 	teq	r4, r5
 80006ee:	bf08      	it	eq
 80006f0:	ea90 0f02 	teqeq	r0, r2
 80006f4:	d005      	beq.n	8000702 <__adddf3+0x212>
 80006f6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006fa:	bf04      	itt	eq
 80006fc:	4619      	moveq	r1, r3
 80006fe:	4610      	moveq	r0, r2
 8000700:	bd30      	pop	{r4, r5, pc}
 8000702:	ea91 0f03 	teq	r1, r3
 8000706:	bf1e      	ittt	ne
 8000708:	2100      	movne	r1, #0
 800070a:	2000      	movne	r0, #0
 800070c:	bd30      	popne	{r4, r5, pc}
 800070e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000712:	d105      	bne.n	8000720 <__adddf3+0x230>
 8000714:	0040      	lsls	r0, r0, #1
 8000716:	4149      	adcs	r1, r1
 8000718:	bf28      	it	cs
 800071a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800071e:	bd30      	pop	{r4, r5, pc}
 8000720:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000724:	bf3c      	itt	cc
 8000726:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800072a:	bd30      	popcc	{r4, r5, pc}
 800072c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000730:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000734:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000738:	f04f 0000 	mov.w	r0, #0
 800073c:	bd30      	pop	{r4, r5, pc}
 800073e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000742:	bf1a      	itte	ne
 8000744:	4619      	movne	r1, r3
 8000746:	4610      	movne	r0, r2
 8000748:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800074c:	bf1c      	itt	ne
 800074e:	460b      	movne	r3, r1
 8000750:	4602      	movne	r2, r0
 8000752:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000756:	bf06      	itte	eq
 8000758:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800075c:	ea91 0f03 	teqeq	r1, r3
 8000760:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000764:	bd30      	pop	{r4, r5, pc}
 8000766:	bf00      	nop

08000768 <__aeabi_ui2d>:
 8000768:	f090 0f00 	teq	r0, #0
 800076c:	bf04      	itt	eq
 800076e:	2100      	moveq	r1, #0
 8000770:	4770      	bxeq	lr
 8000772:	b530      	push	{r4, r5, lr}
 8000774:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000778:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800077c:	f04f 0500 	mov.w	r5, #0
 8000780:	f04f 0100 	mov.w	r1, #0
 8000784:	e750      	b.n	8000628 <__adddf3+0x138>
 8000786:	bf00      	nop

08000788 <__aeabi_i2d>:
 8000788:	f090 0f00 	teq	r0, #0
 800078c:	bf04      	itt	eq
 800078e:	2100      	moveq	r1, #0
 8000790:	4770      	bxeq	lr
 8000792:	b530      	push	{r4, r5, lr}
 8000794:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000798:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800079c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80007a0:	bf48      	it	mi
 80007a2:	4240      	negmi	r0, r0
 80007a4:	f04f 0100 	mov.w	r1, #0
 80007a8:	e73e      	b.n	8000628 <__adddf3+0x138>
 80007aa:	bf00      	nop

080007ac <__aeabi_f2d>:
 80007ac:	0042      	lsls	r2, r0, #1
 80007ae:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007b2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007b6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007ba:	bf1f      	itttt	ne
 80007bc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007c0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007c4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007c8:	4770      	bxne	lr
 80007ca:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007ce:	bf08      	it	eq
 80007d0:	4770      	bxeq	lr
 80007d2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007d6:	bf04      	itt	eq
 80007d8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80007dc:	4770      	bxeq	lr
 80007de:	b530      	push	{r4, r5, lr}
 80007e0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80007e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80007e8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	e71c      	b.n	8000628 <__adddf3+0x138>
 80007ee:	bf00      	nop

080007f0 <__aeabi_ul2d>:
 80007f0:	ea50 0201 	orrs.w	r2, r0, r1
 80007f4:	bf08      	it	eq
 80007f6:	4770      	bxeq	lr
 80007f8:	b530      	push	{r4, r5, lr}
 80007fa:	f04f 0500 	mov.w	r5, #0
 80007fe:	e00a      	b.n	8000816 <__aeabi_l2d+0x16>

08000800 <__aeabi_l2d>:
 8000800:	ea50 0201 	orrs.w	r2, r0, r1
 8000804:	bf08      	it	eq
 8000806:	4770      	bxeq	lr
 8000808:	b530      	push	{r4, r5, lr}
 800080a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800080e:	d502      	bpl.n	8000816 <__aeabi_l2d+0x16>
 8000810:	4240      	negs	r0, r0
 8000812:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000816:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800081a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800081e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000822:	f43f aed8 	beq.w	80005d6 <__adddf3+0xe6>
 8000826:	f04f 0203 	mov.w	r2, #3
 800082a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800082e:	bf18      	it	ne
 8000830:	3203      	addne	r2, #3
 8000832:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000836:	bf18      	it	ne
 8000838:	3203      	addne	r2, #3
 800083a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800083e:	f1c2 0320 	rsb	r3, r2, #32
 8000842:	fa00 fc03 	lsl.w	ip, r0, r3
 8000846:	fa20 f002 	lsr.w	r0, r0, r2
 800084a:	fa01 fe03 	lsl.w	lr, r1, r3
 800084e:	ea40 000e 	orr.w	r0, r0, lr
 8000852:	fa21 f102 	lsr.w	r1, r1, r2
 8000856:	4414      	add	r4, r2
 8000858:	e6bd      	b.n	80005d6 <__adddf3+0xe6>
 800085a:	bf00      	nop

0800085c <__aeabi_d2f>:
 800085c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000860:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000864:	bf24      	itt	cs
 8000866:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800086a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800086e:	d90d      	bls.n	800088c <__aeabi_d2f+0x30>
 8000870:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000874:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000878:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800087c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000880:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000884:	bf08      	it	eq
 8000886:	f020 0001 	biceq.w	r0, r0, #1
 800088a:	4770      	bx	lr
 800088c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000890:	d121      	bne.n	80008d6 <__aeabi_d2f+0x7a>
 8000892:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000896:	bfbc      	itt	lt
 8000898:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 800089c:	4770      	bxlt	lr
 800089e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008a2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80008a6:	f1c2 0218 	rsb	r2, r2, #24
 80008aa:	f1c2 0c20 	rsb	ip, r2, #32
 80008ae:	fa10 f30c 	lsls.w	r3, r0, ip
 80008b2:	fa20 f002 	lsr.w	r0, r0, r2
 80008b6:	bf18      	it	ne
 80008b8:	f040 0001 	orrne.w	r0, r0, #1
 80008bc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80008c0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80008c4:	fa03 fc0c 	lsl.w	ip, r3, ip
 80008c8:	ea40 000c 	orr.w	r0, r0, ip
 80008cc:	fa23 f302 	lsr.w	r3, r3, r2
 80008d0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80008d4:	e7cc      	b.n	8000870 <__aeabi_d2f+0x14>
 80008d6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80008da:	d107      	bne.n	80008ec <__aeabi_d2f+0x90>
 80008dc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80008e0:	bf1e      	ittt	ne
 80008e2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80008e6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80008ea:	4770      	bxne	lr
 80008ec:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80008f0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80008f4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80008f8:	4770      	bx	lr
 80008fa:	bf00      	nop

080008fc <__aeabi_uldivmod>:
 80008fc:	b953      	cbnz	r3, 8000914 <__aeabi_uldivmod+0x18>
 80008fe:	b94a      	cbnz	r2, 8000914 <__aeabi_uldivmod+0x18>
 8000900:	2900      	cmp	r1, #0
 8000902:	bf08      	it	eq
 8000904:	2800      	cmpeq	r0, #0
 8000906:	bf1c      	itt	ne
 8000908:	f04f 31ff 	movne.w	r1, #4294967295
 800090c:	f04f 30ff 	movne.w	r0, #4294967295
 8000910:	f000 b974 	b.w	8000bfc <__aeabi_idiv0>
 8000914:	f1ad 0c08 	sub.w	ip, sp, #8
 8000918:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800091c:	f000 f806 	bl	800092c <__udivmoddi4>
 8000920:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000924:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000928:	b004      	add	sp, #16
 800092a:	4770      	bx	lr

0800092c <__udivmoddi4>:
 800092c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000930:	9d08      	ldr	r5, [sp, #32]
 8000932:	4604      	mov	r4, r0
 8000934:	468e      	mov	lr, r1
 8000936:	2b00      	cmp	r3, #0
 8000938:	d14d      	bne.n	80009d6 <__udivmoddi4+0xaa>
 800093a:	428a      	cmp	r2, r1
 800093c:	4694      	mov	ip, r2
 800093e:	d969      	bls.n	8000a14 <__udivmoddi4+0xe8>
 8000940:	fab2 f282 	clz	r2, r2
 8000944:	b152      	cbz	r2, 800095c <__udivmoddi4+0x30>
 8000946:	fa01 f302 	lsl.w	r3, r1, r2
 800094a:	f1c2 0120 	rsb	r1, r2, #32
 800094e:	fa20 f101 	lsr.w	r1, r0, r1
 8000952:	fa0c fc02 	lsl.w	ip, ip, r2
 8000956:	ea41 0e03 	orr.w	lr, r1, r3
 800095a:	4094      	lsls	r4, r2
 800095c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000960:	0c21      	lsrs	r1, r4, #16
 8000962:	fbbe f6f8 	udiv	r6, lr, r8
 8000966:	fa1f f78c 	uxth.w	r7, ip
 800096a:	fb08 e316 	mls	r3, r8, r6, lr
 800096e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000972:	fb06 f107 	mul.w	r1, r6, r7
 8000976:	4299      	cmp	r1, r3
 8000978:	d90a      	bls.n	8000990 <__udivmoddi4+0x64>
 800097a:	eb1c 0303 	adds.w	r3, ip, r3
 800097e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000982:	f080 811f 	bcs.w	8000bc4 <__udivmoddi4+0x298>
 8000986:	4299      	cmp	r1, r3
 8000988:	f240 811c 	bls.w	8000bc4 <__udivmoddi4+0x298>
 800098c:	3e02      	subs	r6, #2
 800098e:	4463      	add	r3, ip
 8000990:	1a5b      	subs	r3, r3, r1
 8000992:	b2a4      	uxth	r4, r4
 8000994:	fbb3 f0f8 	udiv	r0, r3, r8
 8000998:	fb08 3310 	mls	r3, r8, r0, r3
 800099c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80009a0:	fb00 f707 	mul.w	r7, r0, r7
 80009a4:	42a7      	cmp	r7, r4
 80009a6:	d90a      	bls.n	80009be <__udivmoddi4+0x92>
 80009a8:	eb1c 0404 	adds.w	r4, ip, r4
 80009ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80009b0:	f080 810a 	bcs.w	8000bc8 <__udivmoddi4+0x29c>
 80009b4:	42a7      	cmp	r7, r4
 80009b6:	f240 8107 	bls.w	8000bc8 <__udivmoddi4+0x29c>
 80009ba:	4464      	add	r4, ip
 80009bc:	3802      	subs	r0, #2
 80009be:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80009c2:	1be4      	subs	r4, r4, r7
 80009c4:	2600      	movs	r6, #0
 80009c6:	b11d      	cbz	r5, 80009d0 <__udivmoddi4+0xa4>
 80009c8:	40d4      	lsrs	r4, r2
 80009ca:	2300      	movs	r3, #0
 80009cc:	e9c5 4300 	strd	r4, r3, [r5]
 80009d0:	4631      	mov	r1, r6
 80009d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009d6:	428b      	cmp	r3, r1
 80009d8:	d909      	bls.n	80009ee <__udivmoddi4+0xc2>
 80009da:	2d00      	cmp	r5, #0
 80009dc:	f000 80ef 	beq.w	8000bbe <__udivmoddi4+0x292>
 80009e0:	2600      	movs	r6, #0
 80009e2:	e9c5 0100 	strd	r0, r1, [r5]
 80009e6:	4630      	mov	r0, r6
 80009e8:	4631      	mov	r1, r6
 80009ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009ee:	fab3 f683 	clz	r6, r3
 80009f2:	2e00      	cmp	r6, #0
 80009f4:	d14a      	bne.n	8000a8c <__udivmoddi4+0x160>
 80009f6:	428b      	cmp	r3, r1
 80009f8:	d302      	bcc.n	8000a00 <__udivmoddi4+0xd4>
 80009fa:	4282      	cmp	r2, r0
 80009fc:	f200 80f9 	bhi.w	8000bf2 <__udivmoddi4+0x2c6>
 8000a00:	1a84      	subs	r4, r0, r2
 8000a02:	eb61 0303 	sbc.w	r3, r1, r3
 8000a06:	2001      	movs	r0, #1
 8000a08:	469e      	mov	lr, r3
 8000a0a:	2d00      	cmp	r5, #0
 8000a0c:	d0e0      	beq.n	80009d0 <__udivmoddi4+0xa4>
 8000a0e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000a12:	e7dd      	b.n	80009d0 <__udivmoddi4+0xa4>
 8000a14:	b902      	cbnz	r2, 8000a18 <__udivmoddi4+0xec>
 8000a16:	deff      	udf	#255	; 0xff
 8000a18:	fab2 f282 	clz	r2, r2
 8000a1c:	2a00      	cmp	r2, #0
 8000a1e:	f040 8092 	bne.w	8000b46 <__udivmoddi4+0x21a>
 8000a22:	eba1 010c 	sub.w	r1, r1, ip
 8000a26:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a2a:	fa1f fe8c 	uxth.w	lr, ip
 8000a2e:	2601      	movs	r6, #1
 8000a30:	0c20      	lsrs	r0, r4, #16
 8000a32:	fbb1 f3f7 	udiv	r3, r1, r7
 8000a36:	fb07 1113 	mls	r1, r7, r3, r1
 8000a3a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000a3e:	fb0e f003 	mul.w	r0, lr, r3
 8000a42:	4288      	cmp	r0, r1
 8000a44:	d908      	bls.n	8000a58 <__udivmoddi4+0x12c>
 8000a46:	eb1c 0101 	adds.w	r1, ip, r1
 8000a4a:	f103 38ff 	add.w	r8, r3, #4294967295
 8000a4e:	d202      	bcs.n	8000a56 <__udivmoddi4+0x12a>
 8000a50:	4288      	cmp	r0, r1
 8000a52:	f200 80cb 	bhi.w	8000bec <__udivmoddi4+0x2c0>
 8000a56:	4643      	mov	r3, r8
 8000a58:	1a09      	subs	r1, r1, r0
 8000a5a:	b2a4      	uxth	r4, r4
 8000a5c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000a60:	fb07 1110 	mls	r1, r7, r0, r1
 8000a64:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000a68:	fb0e fe00 	mul.w	lr, lr, r0
 8000a6c:	45a6      	cmp	lr, r4
 8000a6e:	d908      	bls.n	8000a82 <__udivmoddi4+0x156>
 8000a70:	eb1c 0404 	adds.w	r4, ip, r4
 8000a74:	f100 31ff 	add.w	r1, r0, #4294967295
 8000a78:	d202      	bcs.n	8000a80 <__udivmoddi4+0x154>
 8000a7a:	45a6      	cmp	lr, r4
 8000a7c:	f200 80bb 	bhi.w	8000bf6 <__udivmoddi4+0x2ca>
 8000a80:	4608      	mov	r0, r1
 8000a82:	eba4 040e 	sub.w	r4, r4, lr
 8000a86:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000a8a:	e79c      	b.n	80009c6 <__udivmoddi4+0x9a>
 8000a8c:	f1c6 0720 	rsb	r7, r6, #32
 8000a90:	40b3      	lsls	r3, r6
 8000a92:	fa22 fc07 	lsr.w	ip, r2, r7
 8000a96:	ea4c 0c03 	orr.w	ip, ip, r3
 8000a9a:	fa20 f407 	lsr.w	r4, r0, r7
 8000a9e:	fa01 f306 	lsl.w	r3, r1, r6
 8000aa2:	431c      	orrs	r4, r3
 8000aa4:	40f9      	lsrs	r1, r7
 8000aa6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000aaa:	fa00 f306 	lsl.w	r3, r0, r6
 8000aae:	fbb1 f8f9 	udiv	r8, r1, r9
 8000ab2:	0c20      	lsrs	r0, r4, #16
 8000ab4:	fa1f fe8c 	uxth.w	lr, ip
 8000ab8:	fb09 1118 	mls	r1, r9, r8, r1
 8000abc:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ac0:	fb08 f00e 	mul.w	r0, r8, lr
 8000ac4:	4288      	cmp	r0, r1
 8000ac6:	fa02 f206 	lsl.w	r2, r2, r6
 8000aca:	d90b      	bls.n	8000ae4 <__udivmoddi4+0x1b8>
 8000acc:	eb1c 0101 	adds.w	r1, ip, r1
 8000ad0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ad4:	f080 8088 	bcs.w	8000be8 <__udivmoddi4+0x2bc>
 8000ad8:	4288      	cmp	r0, r1
 8000ada:	f240 8085 	bls.w	8000be8 <__udivmoddi4+0x2bc>
 8000ade:	f1a8 0802 	sub.w	r8, r8, #2
 8000ae2:	4461      	add	r1, ip
 8000ae4:	1a09      	subs	r1, r1, r0
 8000ae6:	b2a4      	uxth	r4, r4
 8000ae8:	fbb1 f0f9 	udiv	r0, r1, r9
 8000aec:	fb09 1110 	mls	r1, r9, r0, r1
 8000af0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000af4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000af8:	458e      	cmp	lr, r1
 8000afa:	d908      	bls.n	8000b0e <__udivmoddi4+0x1e2>
 8000afc:	eb1c 0101 	adds.w	r1, ip, r1
 8000b00:	f100 34ff 	add.w	r4, r0, #4294967295
 8000b04:	d26c      	bcs.n	8000be0 <__udivmoddi4+0x2b4>
 8000b06:	458e      	cmp	lr, r1
 8000b08:	d96a      	bls.n	8000be0 <__udivmoddi4+0x2b4>
 8000b0a:	3802      	subs	r0, #2
 8000b0c:	4461      	add	r1, ip
 8000b0e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000b12:	fba0 9402 	umull	r9, r4, r0, r2
 8000b16:	eba1 010e 	sub.w	r1, r1, lr
 8000b1a:	42a1      	cmp	r1, r4
 8000b1c:	46c8      	mov	r8, r9
 8000b1e:	46a6      	mov	lr, r4
 8000b20:	d356      	bcc.n	8000bd0 <__udivmoddi4+0x2a4>
 8000b22:	d053      	beq.n	8000bcc <__udivmoddi4+0x2a0>
 8000b24:	b15d      	cbz	r5, 8000b3e <__udivmoddi4+0x212>
 8000b26:	ebb3 0208 	subs.w	r2, r3, r8
 8000b2a:	eb61 010e 	sbc.w	r1, r1, lr
 8000b2e:	fa01 f707 	lsl.w	r7, r1, r7
 8000b32:	fa22 f306 	lsr.w	r3, r2, r6
 8000b36:	40f1      	lsrs	r1, r6
 8000b38:	431f      	orrs	r7, r3
 8000b3a:	e9c5 7100 	strd	r7, r1, [r5]
 8000b3e:	2600      	movs	r6, #0
 8000b40:	4631      	mov	r1, r6
 8000b42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b46:	f1c2 0320 	rsb	r3, r2, #32
 8000b4a:	40d8      	lsrs	r0, r3
 8000b4c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b50:	fa21 f303 	lsr.w	r3, r1, r3
 8000b54:	4091      	lsls	r1, r2
 8000b56:	4301      	orrs	r1, r0
 8000b58:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b5c:	fa1f fe8c 	uxth.w	lr, ip
 8000b60:	fbb3 f0f7 	udiv	r0, r3, r7
 8000b64:	fb07 3610 	mls	r6, r7, r0, r3
 8000b68:	0c0b      	lsrs	r3, r1, #16
 8000b6a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000b6e:	fb00 f60e 	mul.w	r6, r0, lr
 8000b72:	429e      	cmp	r6, r3
 8000b74:	fa04 f402 	lsl.w	r4, r4, r2
 8000b78:	d908      	bls.n	8000b8c <__udivmoddi4+0x260>
 8000b7a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b7e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000b82:	d22f      	bcs.n	8000be4 <__udivmoddi4+0x2b8>
 8000b84:	429e      	cmp	r6, r3
 8000b86:	d92d      	bls.n	8000be4 <__udivmoddi4+0x2b8>
 8000b88:	3802      	subs	r0, #2
 8000b8a:	4463      	add	r3, ip
 8000b8c:	1b9b      	subs	r3, r3, r6
 8000b8e:	b289      	uxth	r1, r1
 8000b90:	fbb3 f6f7 	udiv	r6, r3, r7
 8000b94:	fb07 3316 	mls	r3, r7, r6, r3
 8000b98:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000b9c:	fb06 f30e 	mul.w	r3, r6, lr
 8000ba0:	428b      	cmp	r3, r1
 8000ba2:	d908      	bls.n	8000bb6 <__udivmoddi4+0x28a>
 8000ba4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ba8:	f106 38ff 	add.w	r8, r6, #4294967295
 8000bac:	d216      	bcs.n	8000bdc <__udivmoddi4+0x2b0>
 8000bae:	428b      	cmp	r3, r1
 8000bb0:	d914      	bls.n	8000bdc <__udivmoddi4+0x2b0>
 8000bb2:	3e02      	subs	r6, #2
 8000bb4:	4461      	add	r1, ip
 8000bb6:	1ac9      	subs	r1, r1, r3
 8000bb8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000bbc:	e738      	b.n	8000a30 <__udivmoddi4+0x104>
 8000bbe:	462e      	mov	r6, r5
 8000bc0:	4628      	mov	r0, r5
 8000bc2:	e705      	b.n	80009d0 <__udivmoddi4+0xa4>
 8000bc4:	4606      	mov	r6, r0
 8000bc6:	e6e3      	b.n	8000990 <__udivmoddi4+0x64>
 8000bc8:	4618      	mov	r0, r3
 8000bca:	e6f8      	b.n	80009be <__udivmoddi4+0x92>
 8000bcc:	454b      	cmp	r3, r9
 8000bce:	d2a9      	bcs.n	8000b24 <__udivmoddi4+0x1f8>
 8000bd0:	ebb9 0802 	subs.w	r8, r9, r2
 8000bd4:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000bd8:	3801      	subs	r0, #1
 8000bda:	e7a3      	b.n	8000b24 <__udivmoddi4+0x1f8>
 8000bdc:	4646      	mov	r6, r8
 8000bde:	e7ea      	b.n	8000bb6 <__udivmoddi4+0x28a>
 8000be0:	4620      	mov	r0, r4
 8000be2:	e794      	b.n	8000b0e <__udivmoddi4+0x1e2>
 8000be4:	4640      	mov	r0, r8
 8000be6:	e7d1      	b.n	8000b8c <__udivmoddi4+0x260>
 8000be8:	46d0      	mov	r8, sl
 8000bea:	e77b      	b.n	8000ae4 <__udivmoddi4+0x1b8>
 8000bec:	3b02      	subs	r3, #2
 8000bee:	4461      	add	r1, ip
 8000bf0:	e732      	b.n	8000a58 <__udivmoddi4+0x12c>
 8000bf2:	4630      	mov	r0, r6
 8000bf4:	e709      	b.n	8000a0a <__udivmoddi4+0xde>
 8000bf6:	4464      	add	r4, ip
 8000bf8:	3802      	subs	r0, #2
 8000bfa:	e742      	b.n	8000a82 <__udivmoddi4+0x156>

08000bfc <__aeabi_idiv0>:
 8000bfc:	4770      	bx	lr
 8000bfe:	bf00      	nop

08000c00 <_ZN3ros16normalizeSecNSecERmS0_>:
#include "ros/time.h"

namespace ros
{
void normalizeSecNSec(uint32_t& sec, uint32_t& nsec)
{
 8000c00:	b480      	push	{r7}
 8000c02:	b085      	sub	sp, #20
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
 8000c08:	6039      	str	r1, [r7, #0]
  uint32_t nsec_part = nsec % 1000000000UL;
 8000c0a:	683b      	ldr	r3, [r7, #0]
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	0a5a      	lsrs	r2, r3, #9
 8000c10:	490f      	ldr	r1, [pc, #60]	; (8000c50 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 8000c12:	fba1 1202 	umull	r1, r2, r1, r2
 8000c16:	09d2      	lsrs	r2, r2, #7
 8000c18:	490e      	ldr	r1, [pc, #56]	; (8000c54 <_ZN3ros16normalizeSecNSecERmS0_+0x54>)
 8000c1a:	fb01 f202 	mul.w	r2, r1, r2
 8000c1e:	1a9b      	subs	r3, r3, r2
 8000c20:	60fb      	str	r3, [r7, #12]
  uint32_t sec_part = nsec / 1000000000UL;
 8000c22:	683b      	ldr	r3, [r7, #0]
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	0a5b      	lsrs	r3, r3, #9
 8000c28:	4a09      	ldr	r2, [pc, #36]	; (8000c50 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 8000c2a:	fba2 2303 	umull	r2, r3, r2, r3
 8000c2e:	09db      	lsrs	r3, r3, #7
 8000c30:	60bb      	str	r3, [r7, #8]
  sec += sec_part;
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	681a      	ldr	r2, [r3, #0]
 8000c36:	68bb      	ldr	r3, [r7, #8]
 8000c38:	441a      	add	r2, r3
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	601a      	str	r2, [r3, #0]
  nsec = nsec_part;
 8000c3e:	683b      	ldr	r3, [r7, #0]
 8000c40:	68fa      	ldr	r2, [r7, #12]
 8000c42:	601a      	str	r2, [r3, #0]
}
 8000c44:	bf00      	nop
 8000c46:	3714      	adds	r7, #20
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4e:	4770      	bx	lr
 8000c50:	00044b83 	.word	0x00044b83
 8000c54:	3b9aca00 	.word	0x3b9aca00

08000c58 <_ZN3ros4TimeC1Ev>:
class Time
{
public:
  uint32_t sec, nsec;

  Time() : sec(0), nsec(0) {}
 8000c58:	b480      	push	{r7}
 8000c5a:	b083      	sub	sp, #12
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	2200      	movs	r2, #0
 8000c64:	601a      	str	r2, [r3, #0]
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	2200      	movs	r2, #0
 8000c6a:	605a      	str	r2, [r3, #4]
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	4618      	mov	r0, r3
 8000c70:	370c      	adds	r7, #12
 8000c72:	46bd      	mov	sp, r7
 8000c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c78:	4770      	bx	lr
	...

08000c7c <_ZN3ros3MsgC1Ev>:

namespace ros
{

/* Base Message Type */
class Msg
 8000c7c:	b480      	push	{r7}
 8000c7e:	b083      	sub	sp, #12
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
 8000c84:	4a04      	ldr	r2, [pc, #16]	; (8000c98 <_ZN3ros3MsgC1Ev+0x1c>)
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	601a      	str	r2, [r3, #0]
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	370c      	adds	r7, #12
 8000c90:	46bd      	mov	sp, r7
 8000c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c96:	4770      	bx	lr
 8000c98:	0800c588 	.word	0x0800c588

08000c9c <_ZN8std_msgs4TimeC1Ev>:
  {
    public:
      typedef ros::Time _data_type;
      _data_type data;

    Time():
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b082      	sub	sp, #8
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
      data()
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	f7ff ffe8 	bl	8000c7c <_ZN3ros3MsgC1Ev>
 8000cac:	4a06      	ldr	r2, [pc, #24]	; (8000cc8 <_ZN8std_msgs4TimeC1Ev+0x2c>)
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	601a      	str	r2, [r3, #0]
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	3304      	adds	r3, #4
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	f7ff ffce 	bl	8000c58 <_ZN3ros4TimeC1Ev>
    {
    }
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	3708      	adds	r7, #8
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bd80      	pop	{r7, pc}
 8000cc6:	bf00      	nop
 8000cc8:	0800c570 	.word	0x0800c570

08000ccc <_ZNK8std_msgs4Time9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8000ccc:	b480      	push	{r7}
 8000cce:	b085      	sub	sp, #20
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
 8000cd4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.sec >> (8 * 0)) & 0xFF;
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	6859      	ldr	r1, [r3, #4]
 8000cde:	68fb      	ldr	r3, [r7, #12]
 8000ce0:	683a      	ldr	r2, [r7, #0]
 8000ce2:	4413      	add	r3, r2
 8000ce4:	b2ca      	uxtb	r2, r1
 8000ce6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.sec >> (8 * 1)) & 0xFF;
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	685b      	ldr	r3, [r3, #4]
 8000cec:	0a19      	lsrs	r1, r3, #8
 8000cee:	68fb      	ldr	r3, [r7, #12]
 8000cf0:	3301      	adds	r3, #1
 8000cf2:	683a      	ldr	r2, [r7, #0]
 8000cf4:	4413      	add	r3, r2
 8000cf6:	b2ca      	uxtb	r2, r1
 8000cf8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.sec >> (8 * 2)) & 0xFF;
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	685b      	ldr	r3, [r3, #4]
 8000cfe:	0c19      	lsrs	r1, r3, #16
 8000d00:	68fb      	ldr	r3, [r7, #12]
 8000d02:	3302      	adds	r3, #2
 8000d04:	683a      	ldr	r2, [r7, #0]
 8000d06:	4413      	add	r3, r2
 8000d08:	b2ca      	uxtb	r2, r1
 8000d0a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	685b      	ldr	r3, [r3, #4]
 8000d10:	0e19      	lsrs	r1, r3, #24
 8000d12:	68fb      	ldr	r3, [r7, #12]
 8000d14:	3303      	adds	r3, #3
 8000d16:	683a      	ldr	r2, [r7, #0]
 8000d18:	4413      	add	r3, r2
 8000d1a:	b2ca      	uxtb	r2, r1
 8000d1c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.sec);
 8000d1e:	68fb      	ldr	r3, [r7, #12]
 8000d20:	3304      	adds	r3, #4
 8000d22:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	6899      	ldr	r1, [r3, #8]
 8000d28:	68fb      	ldr	r3, [r7, #12]
 8000d2a:	683a      	ldr	r2, [r7, #0]
 8000d2c:	4413      	add	r3, r2
 8000d2e:	b2ca      	uxtb	r2, r1
 8000d30:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	689b      	ldr	r3, [r3, #8]
 8000d36:	0a19      	lsrs	r1, r3, #8
 8000d38:	68fb      	ldr	r3, [r7, #12]
 8000d3a:	3301      	adds	r3, #1
 8000d3c:	683a      	ldr	r2, [r7, #0]
 8000d3e:	4413      	add	r3, r2
 8000d40:	b2ca      	uxtb	r2, r1
 8000d42:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	689b      	ldr	r3, [r3, #8]
 8000d48:	0c19      	lsrs	r1, r3, #16
 8000d4a:	68fb      	ldr	r3, [r7, #12]
 8000d4c:	3302      	adds	r3, #2
 8000d4e:	683a      	ldr	r2, [r7, #0]
 8000d50:	4413      	add	r3, r2
 8000d52:	b2ca      	uxtb	r2, r1
 8000d54:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	689b      	ldr	r3, [r3, #8]
 8000d5a:	0e19      	lsrs	r1, r3, #24
 8000d5c:	68fb      	ldr	r3, [r7, #12]
 8000d5e:	3303      	adds	r3, #3
 8000d60:	683a      	ldr	r2, [r7, #0]
 8000d62:	4413      	add	r3, r2
 8000d64:	b2ca      	uxtb	r2, r1
 8000d66:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.nsec);
 8000d68:	68fb      	ldr	r3, [r7, #12]
 8000d6a:	3304      	adds	r3, #4
 8000d6c:	60fb      	str	r3, [r7, #12]
      return offset;
 8000d6e:	68fb      	ldr	r3, [r7, #12]
    }
 8000d70:	4618      	mov	r0, r3
 8000d72:	3714      	adds	r7, #20
 8000d74:	46bd      	mov	sp, r7
 8000d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7a:	4770      	bx	lr

08000d7c <_ZN8std_msgs4Time11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8000d7c:	b480      	push	{r7}
 8000d7e:	b085      	sub	sp, #20
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
 8000d84:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000d86:	2300      	movs	r3, #0
 8000d88:	60fb      	str	r3, [r7, #12]
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 8000d8a:	68fb      	ldr	r3, [r7, #12]
 8000d8c:	683a      	ldr	r2, [r7, #0]
 8000d8e:	4413      	add	r3, r2
 8000d90:	781b      	ldrb	r3, [r3, #0]
 8000d92:	461a      	mov	r2, r3
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	685a      	ldr	r2, [r3, #4]
 8000d9c:	68fb      	ldr	r3, [r7, #12]
 8000d9e:	3301      	adds	r3, #1
 8000da0:	6839      	ldr	r1, [r7, #0]
 8000da2:	440b      	add	r3, r1
 8000da4:	781b      	ldrb	r3, [r3, #0]
 8000da6:	021b      	lsls	r3, r3, #8
 8000da8:	431a      	orrs	r2, r3
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	685a      	ldr	r2, [r3, #4]
 8000db2:	68fb      	ldr	r3, [r7, #12]
 8000db4:	3302      	adds	r3, #2
 8000db6:	6839      	ldr	r1, [r7, #0]
 8000db8:	440b      	add	r3, r1
 8000dba:	781b      	ldrb	r3, [r3, #0]
 8000dbc:	041b      	lsls	r3, r3, #16
 8000dbe:	431a      	orrs	r2, r3
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	685a      	ldr	r2, [r3, #4]
 8000dc8:	68fb      	ldr	r3, [r7, #12]
 8000dca:	3303      	adds	r3, #3
 8000dcc:	6839      	ldr	r1, [r7, #0]
 8000dce:	440b      	add	r3, r1
 8000dd0:	781b      	ldrb	r3, [r3, #0]
 8000dd2:	061b      	lsls	r3, r3, #24
 8000dd4:	431a      	orrs	r2, r3
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data.sec);
 8000dda:	68fb      	ldr	r3, [r7, #12]
 8000ddc:	3304      	adds	r3, #4
 8000dde:	60fb      	str	r3, [r7, #12]
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 8000de0:	68fb      	ldr	r3, [r7, #12]
 8000de2:	683a      	ldr	r2, [r7, #0]
 8000de4:	4413      	add	r3, r2
 8000de6:	781b      	ldrb	r3, [r3, #0]
 8000de8:	461a      	mov	r2, r3
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	689a      	ldr	r2, [r3, #8]
 8000df2:	68fb      	ldr	r3, [r7, #12]
 8000df4:	3301      	adds	r3, #1
 8000df6:	6839      	ldr	r1, [r7, #0]
 8000df8:	440b      	add	r3, r1
 8000dfa:	781b      	ldrb	r3, [r3, #0]
 8000dfc:	021b      	lsls	r3, r3, #8
 8000dfe:	431a      	orrs	r2, r3
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	689a      	ldr	r2, [r3, #8]
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	3302      	adds	r3, #2
 8000e0c:	6839      	ldr	r1, [r7, #0]
 8000e0e:	440b      	add	r3, r1
 8000e10:	781b      	ldrb	r3, [r3, #0]
 8000e12:	041b      	lsls	r3, r3, #16
 8000e14:	431a      	orrs	r2, r3
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	689a      	ldr	r2, [r3, #8]
 8000e1e:	68fb      	ldr	r3, [r7, #12]
 8000e20:	3303      	adds	r3, #3
 8000e22:	6839      	ldr	r1, [r7, #0]
 8000e24:	440b      	add	r3, r1
 8000e26:	781b      	ldrb	r3, [r3, #0]
 8000e28:	061b      	lsls	r3, r3, #24
 8000e2a:	431a      	orrs	r2, r3
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->data.nsec);
 8000e30:	68fb      	ldr	r3, [r7, #12]
 8000e32:	3304      	adds	r3, #4
 8000e34:	60fb      	str	r3, [r7, #12]
     return offset;
 8000e36:	68fb      	ldr	r3, [r7, #12]
    }
 8000e38:	4618      	mov	r0, r3
 8000e3a:	3714      	adds	r7, #20
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e42:	4770      	bx	lr

08000e44 <_ZN8std_msgs4Time7getTypeEv>:

    const char * getType(){ return "std_msgs/Time"; };
 8000e44:	b480      	push	{r7}
 8000e46:	b083      	sub	sp, #12
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
 8000e4c:	4b03      	ldr	r3, [pc, #12]	; (8000e5c <_ZN8std_msgs4Time7getTypeEv+0x18>)
 8000e4e:	4618      	mov	r0, r3
 8000e50:	370c      	adds	r7, #12
 8000e52:	46bd      	mov	sp, r7
 8000e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e58:	4770      	bx	lr
 8000e5a:	bf00      	nop
 8000e5c:	0800c0b8 	.word	0x0800c0b8

08000e60 <_ZN8std_msgs4Time6getMD5Ev>:
    const char * getMD5(){ return "cd7166c74c552c311fbcc2fe5a7bc289"; };
 8000e60:	b480      	push	{r7}
 8000e62:	b083      	sub	sp, #12
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
 8000e68:	4b03      	ldr	r3, [pc, #12]	; (8000e78 <_ZN8std_msgs4Time6getMD5Ev+0x18>)
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	370c      	adds	r7, #12
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e74:	4770      	bx	lr
 8000e76:	bf00      	nop
 8000e78:	0800c0c8 	.word	0x0800c0c8

08000e7c <_ZN14rosserial_msgs9TopicInfoC1Ev>:
      enum { ID_PARAMETER_REQUEST = 6 };
      enum { ID_LOG = 7 };
      enum { ID_TIME = 10 };
      enum { ID_TX_STOP = 11 };

    TopicInfo():
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b082      	sub	sp, #8
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
      topic_id(0),
      topic_name(""),
      message_type(""),
      md5sum(""),
      buffer_size(0)
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	4618      	mov	r0, r3
 8000e88:	f7ff fef8 	bl	8000c7c <_ZN3ros3MsgC1Ev>
 8000e8c:	4a0b      	ldr	r2, [pc, #44]	; (8000ebc <_ZN14rosserial_msgs9TopicInfoC1Ev+0x40>)
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	601a      	str	r2, [r3, #0]
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	2200      	movs	r2, #0
 8000e96:	809a      	strh	r2, [r3, #4]
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	4a09      	ldr	r2, [pc, #36]	; (8000ec0 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8000e9c:	609a      	str	r2, [r3, #8]
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	4a07      	ldr	r2, [pc, #28]	; (8000ec0 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8000ea2:	60da      	str	r2, [r3, #12]
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	4a06      	ldr	r2, [pc, #24]	; (8000ec0 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8000ea8:	611a      	str	r2, [r3, #16]
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	2200      	movs	r2, #0
 8000eae:	615a      	str	r2, [r3, #20]
    {
    }
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	3708      	adds	r7, #8
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}
 8000eba:	bf00      	nop
 8000ebc:	0800c558 	.word	0x0800c558
 8000ec0:	0800c0ec 	.word	0x0800c0ec

08000ec4 <_ZNK14rosserial_msgs9TopicInfo9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b088      	sub	sp, #32
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
 8000ecc:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	61fb      	str	r3, [r7, #28]
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	8899      	ldrh	r1, [r3, #4]
 8000ed6:	69fb      	ldr	r3, [r7, #28]
 8000ed8:	683a      	ldr	r2, [r7, #0]
 8000eda:	4413      	add	r3, r2
 8000edc:	b2ca      	uxtb	r2, r1
 8000ede:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	889b      	ldrh	r3, [r3, #4]
 8000ee4:	0a1b      	lsrs	r3, r3, #8
 8000ee6:	b299      	uxth	r1, r3
 8000ee8:	69fb      	ldr	r3, [r7, #28]
 8000eea:	3301      	adds	r3, #1
 8000eec:	683a      	ldr	r2, [r7, #0]
 8000eee:	4413      	add	r3, r2
 8000ef0:	b2ca      	uxtb	r2, r1
 8000ef2:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->topic_id);
 8000ef4:	69fb      	ldr	r3, [r7, #28]
 8000ef6:	3302      	adds	r3, #2
 8000ef8:	61fb      	str	r3, [r7, #28]
      uint32_t length_topic_name = strlen(this->topic_name);
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	689b      	ldr	r3, [r3, #8]
 8000efe:	4618      	mov	r0, r3
 8000f00:	f7ff f9be 	bl	8000280 <strlen>
 8000f04:	61b8      	str	r0, [r7, #24]
      varToArr(outbuffer + offset, length_topic_name);
 8000f06:	69fb      	ldr	r3, [r7, #28]
 8000f08:	683a      	ldr	r2, [r7, #0]
 8000f0a:	4413      	add	r3, r2
 8000f0c:	69b9      	ldr	r1, [r7, #24]
 8000f0e:	4618      	mov	r0, r3
 8000f10:	f001 fe7d 	bl	8002c0e <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8000f14:	69fb      	ldr	r3, [r7, #28]
 8000f16:	3304      	adds	r3, #4
 8000f18:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 8000f1a:	69fb      	ldr	r3, [r7, #28]
 8000f1c:	683a      	ldr	r2, [r7, #0]
 8000f1e:	18d0      	adds	r0, r2, r3
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	689b      	ldr	r3, [r3, #8]
 8000f24:	69ba      	ldr	r2, [r7, #24]
 8000f26:	4619      	mov	r1, r3
 8000f28:	f00a fb78 	bl	800b61c <memcpy>
      offset += length_topic_name;
 8000f2c:	69fa      	ldr	r2, [r7, #28]
 8000f2e:	69bb      	ldr	r3, [r7, #24]
 8000f30:	4413      	add	r3, r2
 8000f32:	61fb      	str	r3, [r7, #28]
      uint32_t length_message_type = strlen(this->message_type);
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	68db      	ldr	r3, [r3, #12]
 8000f38:	4618      	mov	r0, r3
 8000f3a:	f7ff f9a1 	bl	8000280 <strlen>
 8000f3e:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_message_type);
 8000f40:	69fb      	ldr	r3, [r7, #28]
 8000f42:	683a      	ldr	r2, [r7, #0]
 8000f44:	4413      	add	r3, r2
 8000f46:	6979      	ldr	r1, [r7, #20]
 8000f48:	4618      	mov	r0, r3
 8000f4a:	f001 fe60 	bl	8002c0e <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8000f4e:	69fb      	ldr	r3, [r7, #28]
 8000f50:	3304      	adds	r3, #4
 8000f52:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 8000f54:	69fb      	ldr	r3, [r7, #28]
 8000f56:	683a      	ldr	r2, [r7, #0]
 8000f58:	18d0      	adds	r0, r2, r3
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	68db      	ldr	r3, [r3, #12]
 8000f5e:	697a      	ldr	r2, [r7, #20]
 8000f60:	4619      	mov	r1, r3
 8000f62:	f00a fb5b 	bl	800b61c <memcpy>
      offset += length_message_type;
 8000f66:	69fa      	ldr	r2, [r7, #28]
 8000f68:	697b      	ldr	r3, [r7, #20]
 8000f6a:	4413      	add	r3, r2
 8000f6c:	61fb      	str	r3, [r7, #28]
      uint32_t length_md5sum = strlen(this->md5sum);
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	691b      	ldr	r3, [r3, #16]
 8000f72:	4618      	mov	r0, r3
 8000f74:	f7ff f984 	bl	8000280 <strlen>
 8000f78:	6138      	str	r0, [r7, #16]
      varToArr(outbuffer + offset, length_md5sum);
 8000f7a:	69fb      	ldr	r3, [r7, #28]
 8000f7c:	683a      	ldr	r2, [r7, #0]
 8000f7e:	4413      	add	r3, r2
 8000f80:	6939      	ldr	r1, [r7, #16]
 8000f82:	4618      	mov	r0, r3
 8000f84:	f001 fe43 	bl	8002c0e <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8000f88:	69fb      	ldr	r3, [r7, #28]
 8000f8a:	3304      	adds	r3, #4
 8000f8c:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 8000f8e:	69fb      	ldr	r3, [r7, #28]
 8000f90:	683a      	ldr	r2, [r7, #0]
 8000f92:	18d0      	adds	r0, r2, r3
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	691b      	ldr	r3, [r3, #16]
 8000f98:	693a      	ldr	r2, [r7, #16]
 8000f9a:	4619      	mov	r1, r3
 8000f9c:	f00a fb3e 	bl	800b61c <memcpy>
      offset += length_md5sum;
 8000fa0:	69fa      	ldr	r2, [r7, #28]
 8000fa2:	693b      	ldr	r3, [r7, #16]
 8000fa4:	4413      	add	r3, r2
 8000fa6:	61fb      	str	r3, [r7, #28]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	695b      	ldr	r3, [r3, #20]
 8000fac:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 8000fae:	68f9      	ldr	r1, [r7, #12]
 8000fb0:	69fb      	ldr	r3, [r7, #28]
 8000fb2:	683a      	ldr	r2, [r7, #0]
 8000fb4:	4413      	add	r3, r2
 8000fb6:	b2ca      	uxtb	r2, r1
 8000fb8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	0a19      	lsrs	r1, r3, #8
 8000fbe:	69fb      	ldr	r3, [r7, #28]
 8000fc0:	3301      	adds	r3, #1
 8000fc2:	683a      	ldr	r2, [r7, #0]
 8000fc4:	4413      	add	r3, r2
 8000fc6:	b2ca      	uxtb	r2, r1
 8000fc8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 8000fca:	68fb      	ldr	r3, [r7, #12]
 8000fcc:	0c19      	lsrs	r1, r3, #16
 8000fce:	69fb      	ldr	r3, [r7, #28]
 8000fd0:	3302      	adds	r3, #2
 8000fd2:	683a      	ldr	r2, [r7, #0]
 8000fd4:	4413      	add	r3, r2
 8000fd6:	b2ca      	uxtb	r2, r1
 8000fd8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 8000fda:	68fb      	ldr	r3, [r7, #12]
 8000fdc:	0e19      	lsrs	r1, r3, #24
 8000fde:	69fb      	ldr	r3, [r7, #28]
 8000fe0:	3303      	adds	r3, #3
 8000fe2:	683a      	ldr	r2, [r7, #0]
 8000fe4:	4413      	add	r3, r2
 8000fe6:	b2ca      	uxtb	r2, r1
 8000fe8:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->buffer_size);
 8000fea:	69fb      	ldr	r3, [r7, #28]
 8000fec:	3304      	adds	r3, #4
 8000fee:	61fb      	str	r3, [r7, #28]
      return offset;
 8000ff0:	69fb      	ldr	r3, [r7, #28]
    }
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	3720      	adds	r7, #32
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}

08000ffa <_ZN14rosserial_msgs9TopicInfo11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8000ffa:	b580      	push	{r7, lr}
 8000ffc:	b08a      	sub	sp, #40	; 0x28
 8000ffe:	af00      	add	r7, sp, #0
 8001000:	6078      	str	r0, [r7, #4]
 8001002:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001004:	2300      	movs	r3, #0
 8001006:	61bb      	str	r3, [r7, #24]
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 8001008:	69bb      	ldr	r3, [r7, #24]
 800100a:	683a      	ldr	r2, [r7, #0]
 800100c:	4413      	add	r3, r2
 800100e:	781b      	ldrb	r3, [r3, #0]
 8001010:	b29a      	uxth	r2, r3
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	809a      	strh	r2, [r3, #4]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	889b      	ldrh	r3, [r3, #4]
 800101a:	b21a      	sxth	r2, r3
 800101c:	69bb      	ldr	r3, [r7, #24]
 800101e:	3301      	adds	r3, #1
 8001020:	6839      	ldr	r1, [r7, #0]
 8001022:	440b      	add	r3, r1
 8001024:	781b      	ldrb	r3, [r3, #0]
 8001026:	021b      	lsls	r3, r3, #8
 8001028:	b21b      	sxth	r3, r3
 800102a:	4313      	orrs	r3, r2
 800102c:	b21b      	sxth	r3, r3
 800102e:	b29a      	uxth	r2, r3
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->topic_id);
 8001034:	69bb      	ldr	r3, [r7, #24]
 8001036:	3302      	adds	r3, #2
 8001038:	61bb      	str	r3, [r7, #24]
      uint32_t length_topic_name;
      arrToVar(length_topic_name, (inbuffer + offset));
 800103a:	69bb      	ldr	r3, [r7, #24]
 800103c:	683a      	ldr	r2, [r7, #0]
 800103e:	441a      	add	r2, r3
 8001040:	f107 0314 	add.w	r3, r7, #20
 8001044:	4611      	mov	r1, r2
 8001046:	4618      	mov	r0, r3
 8001048:	f001 fdff 	bl	8002c4a <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 800104c:	69bb      	ldr	r3, [r7, #24]
 800104e:	3304      	adds	r3, #4
 8001050:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8001052:	69bb      	ldr	r3, [r7, #24]
 8001054:	627b      	str	r3, [r7, #36]	; 0x24
 8001056:	69ba      	ldr	r2, [r7, #24]
 8001058:	697b      	ldr	r3, [r7, #20]
 800105a:	4413      	add	r3, r2
 800105c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800105e:	429a      	cmp	r2, r3
 8001060:	d20c      	bcs.n	800107c <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x82>
          inbuffer[k-1]=inbuffer[k];
 8001062:	683a      	ldr	r2, [r7, #0]
 8001064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001066:	441a      	add	r2, r3
 8001068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800106a:	3b01      	subs	r3, #1
 800106c:	6839      	ldr	r1, [r7, #0]
 800106e:	440b      	add	r3, r1
 8001070:	7812      	ldrb	r2, [r2, #0]
 8001072:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8001074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001076:	3301      	adds	r3, #1
 8001078:	627b      	str	r3, [r7, #36]	; 0x24
 800107a:	e7ec      	b.n	8001056 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x5c>
      }
      inbuffer[offset+length_topic_name-1]=0;
 800107c:	69ba      	ldr	r2, [r7, #24]
 800107e:	697b      	ldr	r3, [r7, #20]
 8001080:	4413      	add	r3, r2
 8001082:	3b01      	subs	r3, #1
 8001084:	683a      	ldr	r2, [r7, #0]
 8001086:	4413      	add	r3, r2
 8001088:	2200      	movs	r2, #0
 800108a:	701a      	strb	r2, [r3, #0]
      this->topic_name = (char *)(inbuffer + offset-1);
 800108c:	69bb      	ldr	r3, [r7, #24]
 800108e:	3b01      	subs	r3, #1
 8001090:	683a      	ldr	r2, [r7, #0]
 8001092:	441a      	add	r2, r3
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	609a      	str	r2, [r3, #8]
      offset += length_topic_name;
 8001098:	69ba      	ldr	r2, [r7, #24]
 800109a:	697b      	ldr	r3, [r7, #20]
 800109c:	4413      	add	r3, r2
 800109e:	61bb      	str	r3, [r7, #24]
      uint32_t length_message_type;
      arrToVar(length_message_type, (inbuffer + offset));
 80010a0:	69bb      	ldr	r3, [r7, #24]
 80010a2:	683a      	ldr	r2, [r7, #0]
 80010a4:	441a      	add	r2, r3
 80010a6:	f107 0310 	add.w	r3, r7, #16
 80010aa:	4611      	mov	r1, r2
 80010ac:	4618      	mov	r0, r3
 80010ae:	f001 fdcc 	bl	8002c4a <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80010b2:	69bb      	ldr	r3, [r7, #24]
 80010b4:	3304      	adds	r3, #4
 80010b6:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 80010b8:	69bb      	ldr	r3, [r7, #24]
 80010ba:	623b      	str	r3, [r7, #32]
 80010bc:	69ba      	ldr	r2, [r7, #24]
 80010be:	693b      	ldr	r3, [r7, #16]
 80010c0:	4413      	add	r3, r2
 80010c2:	6a3a      	ldr	r2, [r7, #32]
 80010c4:	429a      	cmp	r2, r3
 80010c6:	d20c      	bcs.n	80010e2 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xe8>
          inbuffer[k-1]=inbuffer[k];
 80010c8:	683a      	ldr	r2, [r7, #0]
 80010ca:	6a3b      	ldr	r3, [r7, #32]
 80010cc:	441a      	add	r2, r3
 80010ce:	6a3b      	ldr	r3, [r7, #32]
 80010d0:	3b01      	subs	r3, #1
 80010d2:	6839      	ldr	r1, [r7, #0]
 80010d4:	440b      	add	r3, r1
 80010d6:	7812      	ldrb	r2, [r2, #0]
 80010d8:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 80010da:	6a3b      	ldr	r3, [r7, #32]
 80010dc:	3301      	adds	r3, #1
 80010de:	623b      	str	r3, [r7, #32]
 80010e0:	e7ec      	b.n	80010bc <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xc2>
      }
      inbuffer[offset+length_message_type-1]=0;
 80010e2:	69ba      	ldr	r2, [r7, #24]
 80010e4:	693b      	ldr	r3, [r7, #16]
 80010e6:	4413      	add	r3, r2
 80010e8:	3b01      	subs	r3, #1
 80010ea:	683a      	ldr	r2, [r7, #0]
 80010ec:	4413      	add	r3, r2
 80010ee:	2200      	movs	r2, #0
 80010f0:	701a      	strb	r2, [r3, #0]
      this->message_type = (char *)(inbuffer + offset-1);
 80010f2:	69bb      	ldr	r3, [r7, #24]
 80010f4:	3b01      	subs	r3, #1
 80010f6:	683a      	ldr	r2, [r7, #0]
 80010f8:	441a      	add	r2, r3
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	60da      	str	r2, [r3, #12]
      offset += length_message_type;
 80010fe:	69ba      	ldr	r2, [r7, #24]
 8001100:	693b      	ldr	r3, [r7, #16]
 8001102:	4413      	add	r3, r2
 8001104:	61bb      	str	r3, [r7, #24]
      uint32_t length_md5sum;
      arrToVar(length_md5sum, (inbuffer + offset));
 8001106:	69bb      	ldr	r3, [r7, #24]
 8001108:	683a      	ldr	r2, [r7, #0]
 800110a:	441a      	add	r2, r3
 800110c:	f107 030c 	add.w	r3, r7, #12
 8001110:	4611      	mov	r1, r2
 8001112:	4618      	mov	r0, r3
 8001114:	f001 fd99 	bl	8002c4a <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001118:	69bb      	ldr	r3, [r7, #24]
 800111a:	3304      	adds	r3, #4
 800111c:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 800111e:	69bb      	ldr	r3, [r7, #24]
 8001120:	61fb      	str	r3, [r7, #28]
 8001122:	69ba      	ldr	r2, [r7, #24]
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	4413      	add	r3, r2
 8001128:	69fa      	ldr	r2, [r7, #28]
 800112a:	429a      	cmp	r2, r3
 800112c:	d20c      	bcs.n	8001148 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x14e>
          inbuffer[k-1]=inbuffer[k];
 800112e:	683a      	ldr	r2, [r7, #0]
 8001130:	69fb      	ldr	r3, [r7, #28]
 8001132:	441a      	add	r2, r3
 8001134:	69fb      	ldr	r3, [r7, #28]
 8001136:	3b01      	subs	r3, #1
 8001138:	6839      	ldr	r1, [r7, #0]
 800113a:	440b      	add	r3, r1
 800113c:	7812      	ldrb	r2, [r2, #0]
 800113e:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8001140:	69fb      	ldr	r3, [r7, #28]
 8001142:	3301      	adds	r3, #1
 8001144:	61fb      	str	r3, [r7, #28]
 8001146:	e7ec      	b.n	8001122 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x128>
      }
      inbuffer[offset+length_md5sum-1]=0;
 8001148:	69ba      	ldr	r2, [r7, #24]
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	4413      	add	r3, r2
 800114e:	3b01      	subs	r3, #1
 8001150:	683a      	ldr	r2, [r7, #0]
 8001152:	4413      	add	r3, r2
 8001154:	2200      	movs	r2, #0
 8001156:	701a      	strb	r2, [r3, #0]
      this->md5sum = (char *)(inbuffer + offset-1);
 8001158:	69bb      	ldr	r3, [r7, #24]
 800115a:	3b01      	subs	r3, #1
 800115c:	683a      	ldr	r2, [r7, #0]
 800115e:	441a      	add	r2, r3
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	611a      	str	r2, [r3, #16]
      offset += length_md5sum;
 8001164:	69ba      	ldr	r2, [r7, #24]
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	4413      	add	r3, r2
 800116a:	61bb      	str	r3, [r7, #24]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.base = 0;
 800116c:	2300      	movs	r3, #0
 800116e:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8001170:	68bb      	ldr	r3, [r7, #8]
 8001172:	69ba      	ldr	r2, [r7, #24]
 8001174:	6839      	ldr	r1, [r7, #0]
 8001176:	440a      	add	r2, r1
 8001178:	7812      	ldrb	r2, [r2, #0]
 800117a:	4313      	orrs	r3, r2
 800117c:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800117e:	68ba      	ldr	r2, [r7, #8]
 8001180:	69bb      	ldr	r3, [r7, #24]
 8001182:	3301      	adds	r3, #1
 8001184:	6839      	ldr	r1, [r7, #0]
 8001186:	440b      	add	r3, r1
 8001188:	781b      	ldrb	r3, [r3, #0]
 800118a:	021b      	lsls	r3, r3, #8
 800118c:	4313      	orrs	r3, r2
 800118e:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001190:	68ba      	ldr	r2, [r7, #8]
 8001192:	69bb      	ldr	r3, [r7, #24]
 8001194:	3302      	adds	r3, #2
 8001196:	6839      	ldr	r1, [r7, #0]
 8001198:	440b      	add	r3, r1
 800119a:	781b      	ldrb	r3, [r3, #0]
 800119c:	041b      	lsls	r3, r3, #16
 800119e:	4313      	orrs	r3, r2
 80011a0:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80011a2:	68ba      	ldr	r2, [r7, #8]
 80011a4:	69bb      	ldr	r3, [r7, #24]
 80011a6:	3303      	adds	r3, #3
 80011a8:	6839      	ldr	r1, [r7, #0]
 80011aa:	440b      	add	r3, r1
 80011ac:	781b      	ldrb	r3, [r3, #0]
 80011ae:	061b      	lsls	r3, r3, #24
 80011b0:	4313      	orrs	r3, r2
 80011b2:	60bb      	str	r3, [r7, #8]
      this->buffer_size = u_buffer_size.real;
 80011b4:	68ba      	ldr	r2, [r7, #8]
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->buffer_size);
 80011ba:	69bb      	ldr	r3, [r7, #24]
 80011bc:	3304      	adds	r3, #4
 80011be:	61bb      	str	r3, [r7, #24]
     return offset;
 80011c0:	69bb      	ldr	r3, [r7, #24]
    }
 80011c2:	4618      	mov	r0, r3
 80011c4:	3728      	adds	r7, #40	; 0x28
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}
	...

080011cc <_ZN14rosserial_msgs9TopicInfo7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/TopicInfo"; };
 80011cc:	b480      	push	{r7}
 80011ce:	b083      	sub	sp, #12
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
 80011d4:	4b03      	ldr	r3, [pc, #12]	; (80011e4 <_ZN14rosserial_msgs9TopicInfo7getTypeEv+0x18>)
 80011d6:	4618      	mov	r0, r3
 80011d8:	370c      	adds	r7, #12
 80011da:	46bd      	mov	sp, r7
 80011dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e0:	4770      	bx	lr
 80011e2:	bf00      	nop
 80011e4:	0800c0f0 	.word	0x0800c0f0

080011e8 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev>:
    const char * getMD5(){ return "0ad51f88fc44892f8c10684077646005"; };
 80011e8:	b480      	push	{r7}
 80011ea:	b083      	sub	sp, #12
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
 80011f0:	4b03      	ldr	r3, [pc, #12]	; (8001200 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev+0x18>)
 80011f2:	4618      	mov	r0, r3
 80011f4:	370c      	adds	r7, #12
 80011f6:	46bd      	mov	sp, r7
 80011f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fc:	4770      	bx	lr
 80011fe:	bf00      	nop
 8001200:	0800c10c 	.word	0x0800c10c

08001204 <_ZN14rosserial_msgs3LogC1Ev>:
      enum { INFO = 1 };
      enum { WARN = 2 };
      enum { ERROR = 3 };
      enum { FATAL = 4 };

    Log():
 8001204:	b580      	push	{r7, lr}
 8001206:	b082      	sub	sp, #8
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
      level(0),
      msg("")
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	4618      	mov	r0, r3
 8001210:	f7ff fd34 	bl	8000c7c <_ZN3ros3MsgC1Ev>
 8001214:	4a06      	ldr	r2, [pc, #24]	; (8001230 <_ZN14rosserial_msgs3LogC1Ev+0x2c>)
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	601a      	str	r2, [r3, #0]
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	2200      	movs	r2, #0
 800121e:	711a      	strb	r2, [r3, #4]
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	4a04      	ldr	r2, [pc, #16]	; (8001234 <_ZN14rosserial_msgs3LogC1Ev+0x30>)
 8001224:	609a      	str	r2, [r3, #8]
    {
    }
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	4618      	mov	r0, r3
 800122a:	3708      	adds	r7, #8
 800122c:	46bd      	mov	sp, r7
 800122e:	bd80      	pop	{r7, pc}
 8001230:	0800c540 	.word	0x0800c540
 8001234:	0800c0ec 	.word	0x0800c0ec

08001238 <_ZNK14rosserial_msgs3Log9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8001238:	b580      	push	{r7, lr}
 800123a:	b084      	sub	sp, #16
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
 8001240:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001242:	2300      	movs	r3, #0
 8001244:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	683a      	ldr	r2, [r7, #0]
 800124a:	4413      	add	r3, r2
 800124c:	687a      	ldr	r2, [r7, #4]
 800124e:	7912      	ldrb	r2, [r2, #4]
 8001250:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->level);
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	3301      	adds	r3, #1
 8001256:	60fb      	str	r3, [r7, #12]
      uint32_t length_msg = strlen(this->msg);
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	689b      	ldr	r3, [r3, #8]
 800125c:	4618      	mov	r0, r3
 800125e:	f7ff f80f 	bl	8000280 <strlen>
 8001262:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_msg);
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	683a      	ldr	r2, [r7, #0]
 8001268:	4413      	add	r3, r2
 800126a:	68b9      	ldr	r1, [r7, #8]
 800126c:	4618      	mov	r0, r3
 800126e:	f001 fcce 	bl	8002c0e <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	3304      	adds	r3, #4
 8001276:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->msg, length_msg);
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	683a      	ldr	r2, [r7, #0]
 800127c:	18d0      	adds	r0, r2, r3
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	689b      	ldr	r3, [r3, #8]
 8001282:	68ba      	ldr	r2, [r7, #8]
 8001284:	4619      	mov	r1, r3
 8001286:	f00a f9c9 	bl	800b61c <memcpy>
      offset += length_msg;
 800128a:	68fa      	ldr	r2, [r7, #12]
 800128c:	68bb      	ldr	r3, [r7, #8]
 800128e:	4413      	add	r3, r2
 8001290:	60fb      	str	r3, [r7, #12]
      return offset;
 8001292:	68fb      	ldr	r3, [r7, #12]
    }
 8001294:	4618      	mov	r0, r3
 8001296:	3710      	adds	r7, #16
 8001298:	46bd      	mov	sp, r7
 800129a:	bd80      	pop	{r7, pc}

0800129c <_ZN14rosserial_msgs3Log11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 800129c:	b580      	push	{r7, lr}
 800129e:	b086      	sub	sp, #24
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
 80012a4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80012a6:	2300      	movs	r3, #0
 80012a8:	613b      	str	r3, [r7, #16]
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 80012aa:	693b      	ldr	r3, [r7, #16]
 80012ac:	683a      	ldr	r2, [r7, #0]
 80012ae:	4413      	add	r3, r2
 80012b0:	781a      	ldrb	r2, [r3, #0]
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->level);
 80012b6:	693b      	ldr	r3, [r7, #16]
 80012b8:	3301      	adds	r3, #1
 80012ba:	613b      	str	r3, [r7, #16]
      uint32_t length_msg;
      arrToVar(length_msg, (inbuffer + offset));
 80012bc:	693b      	ldr	r3, [r7, #16]
 80012be:	683a      	ldr	r2, [r7, #0]
 80012c0:	441a      	add	r2, r3
 80012c2:	f107 030c 	add.w	r3, r7, #12
 80012c6:	4611      	mov	r1, r2
 80012c8:	4618      	mov	r0, r3
 80012ca:	f001 fcbe 	bl	8002c4a <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80012ce:	693b      	ldr	r3, [r7, #16]
 80012d0:	3304      	adds	r3, #4
 80012d2:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 80012d4:	693b      	ldr	r3, [r7, #16]
 80012d6:	617b      	str	r3, [r7, #20]
 80012d8:	693a      	ldr	r2, [r7, #16]
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	4413      	add	r3, r2
 80012de:	697a      	ldr	r2, [r7, #20]
 80012e0:	429a      	cmp	r2, r3
 80012e2:	d20c      	bcs.n	80012fe <_ZN14rosserial_msgs3Log11deserializeEPh+0x62>
          inbuffer[k-1]=inbuffer[k];
 80012e4:	683a      	ldr	r2, [r7, #0]
 80012e6:	697b      	ldr	r3, [r7, #20]
 80012e8:	441a      	add	r2, r3
 80012ea:	697b      	ldr	r3, [r7, #20]
 80012ec:	3b01      	subs	r3, #1
 80012ee:	6839      	ldr	r1, [r7, #0]
 80012f0:	440b      	add	r3, r1
 80012f2:	7812      	ldrb	r2, [r2, #0]
 80012f4:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 80012f6:	697b      	ldr	r3, [r7, #20]
 80012f8:	3301      	adds	r3, #1
 80012fa:	617b      	str	r3, [r7, #20]
 80012fc:	e7ec      	b.n	80012d8 <_ZN14rosserial_msgs3Log11deserializeEPh+0x3c>
      }
      inbuffer[offset+length_msg-1]=0;
 80012fe:	693a      	ldr	r2, [r7, #16]
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	4413      	add	r3, r2
 8001304:	3b01      	subs	r3, #1
 8001306:	683a      	ldr	r2, [r7, #0]
 8001308:	4413      	add	r3, r2
 800130a:	2200      	movs	r2, #0
 800130c:	701a      	strb	r2, [r3, #0]
      this->msg = (char *)(inbuffer + offset-1);
 800130e:	693b      	ldr	r3, [r7, #16]
 8001310:	3b01      	subs	r3, #1
 8001312:	683a      	ldr	r2, [r7, #0]
 8001314:	441a      	add	r2, r3
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	609a      	str	r2, [r3, #8]
      offset += length_msg;
 800131a:	693a      	ldr	r2, [r7, #16]
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	4413      	add	r3, r2
 8001320:	613b      	str	r3, [r7, #16]
     return offset;
 8001322:	693b      	ldr	r3, [r7, #16]
    }
 8001324:	4618      	mov	r0, r3
 8001326:	3718      	adds	r7, #24
 8001328:	46bd      	mov	sp, r7
 800132a:	bd80      	pop	{r7, pc}

0800132c <_ZN14rosserial_msgs3Log7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/Log"; };
 800132c:	b480      	push	{r7}
 800132e:	b083      	sub	sp, #12
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
 8001334:	4b03      	ldr	r3, [pc, #12]	; (8001344 <_ZN14rosserial_msgs3Log7getTypeEv+0x18>)
 8001336:	4618      	mov	r0, r3
 8001338:	370c      	adds	r7, #12
 800133a:	46bd      	mov	sp, r7
 800133c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001340:	4770      	bx	lr
 8001342:	bf00      	nop
 8001344:	0800c130 	.word	0x0800c130

08001348 <_ZN14rosserial_msgs3Log6getMD5Ev>:
    const char * getMD5(){ return "11abd731c25933261cd6183bd12d6295"; };
 8001348:	b480      	push	{r7}
 800134a:	b083      	sub	sp, #12
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
 8001350:	4b03      	ldr	r3, [pc, #12]	; (8001360 <_ZN14rosserial_msgs3Log6getMD5Ev+0x18>)
 8001352:	4618      	mov	r0, r3
 8001354:	370c      	adds	r7, #12
 8001356:	46bd      	mov	sp, r7
 8001358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135c:	4770      	bx	lr
 800135e:	bf00      	nop
 8001360:	0800c144 	.word	0x0800c144

08001364 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>:
      uint32_t strings_length;
      typedef char* _strings_type;
      _strings_type st_strings;
      _strings_type * strings;

    RequestParamResponse():
 8001364:	b580      	push	{r7, lr}
 8001366:	b082      	sub	sp, #8
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
      ints_length(0), ints(NULL),
      floats_length(0), floats(NULL),
      strings_length(0), strings(NULL)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	4618      	mov	r0, r3
 8001370:	f7ff fc84 	bl	8000c7c <_ZN3ros3MsgC1Ev>
 8001374:	4a0c      	ldr	r2, [pc, #48]	; (80013a8 <_ZN14rosserial_msgs20RequestParamResponseC1Ev+0x44>)
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	601a      	str	r2, [r3, #0]
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	2200      	movs	r2, #0
 800137e:	605a      	str	r2, [r3, #4]
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	2200      	movs	r2, #0
 8001384:	60da      	str	r2, [r3, #12]
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	2200      	movs	r2, #0
 800138a:	611a      	str	r2, [r3, #16]
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	2200      	movs	r2, #0
 8001390:	619a      	str	r2, [r3, #24]
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	2200      	movs	r2, #0
 8001396:	61da      	str	r2, [r3, #28]
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	2200      	movs	r2, #0
 800139c:	625a      	str	r2, [r3, #36]	; 0x24
    {
    }
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	4618      	mov	r0, r3
 80013a2:	3708      	adds	r7, #8
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bd80      	pop	{r7, pc}
 80013a8:	0800c528 	.word	0x0800c528

080013ac <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b08a      	sub	sp, #40	; 0x28
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
 80013b4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80013b6:	2300      	movs	r3, #0
 80013b8:	627b      	str	r3, [r7, #36]	; 0x24
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	6859      	ldr	r1, [r3, #4]
 80013be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013c0:	683a      	ldr	r2, [r7, #0]
 80013c2:	4413      	add	r3, r2
 80013c4:	b2ca      	uxtb	r2, r1
 80013c6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	685b      	ldr	r3, [r3, #4]
 80013cc:	0a19      	lsrs	r1, r3, #8
 80013ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013d0:	3301      	adds	r3, #1
 80013d2:	683a      	ldr	r2, [r7, #0]
 80013d4:	4413      	add	r3, r2
 80013d6:	b2ca      	uxtb	r2, r1
 80013d8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	685b      	ldr	r3, [r3, #4]
 80013de:	0c19      	lsrs	r1, r3, #16
 80013e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013e2:	3302      	adds	r3, #2
 80013e4:	683a      	ldr	r2, [r7, #0]
 80013e6:	4413      	add	r3, r2
 80013e8:	b2ca      	uxtb	r2, r1
 80013ea:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	685b      	ldr	r3, [r3, #4]
 80013f0:	0e19      	lsrs	r1, r3, #24
 80013f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013f4:	3303      	adds	r3, #3
 80013f6:	683a      	ldr	r2, [r7, #0]
 80013f8:	4413      	add	r3, r2
 80013fa:	b2ca      	uxtb	r2, r1
 80013fc:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints_length);
 80013fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001400:	3304      	adds	r3, #4
 8001402:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8001404:	2300      	movs	r3, #0
 8001406:	623b      	str	r3, [r7, #32]
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	685b      	ldr	r3, [r3, #4]
 800140c:	6a3a      	ldr	r2, [r7, #32]
 800140e:	429a      	cmp	r2, r3
 8001410:	d22b      	bcs.n	800146a <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xbe>
      union {
        int32_t real;
        uint32_t base;
      } u_intsi;
      u_intsi.real = this->ints[i];
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	68da      	ldr	r2, [r3, #12]
 8001416:	6a3b      	ldr	r3, [r7, #32]
 8001418:	009b      	lsls	r3, r3, #2
 800141a:	4413      	add	r3, r2
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
 8001420:	6939      	ldr	r1, [r7, #16]
 8001422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001424:	683a      	ldr	r2, [r7, #0]
 8001426:	4413      	add	r3, r2
 8001428:	b2ca      	uxtb	r2, r1
 800142a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 800142c:	693b      	ldr	r3, [r7, #16]
 800142e:	0a19      	lsrs	r1, r3, #8
 8001430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001432:	3301      	adds	r3, #1
 8001434:	683a      	ldr	r2, [r7, #0]
 8001436:	4413      	add	r3, r2
 8001438:	b2ca      	uxtb	r2, r1
 800143a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 800143c:	693b      	ldr	r3, [r7, #16]
 800143e:	0c19      	lsrs	r1, r3, #16
 8001440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001442:	3302      	adds	r3, #2
 8001444:	683a      	ldr	r2, [r7, #0]
 8001446:	4413      	add	r3, r2
 8001448:	b2ca      	uxtb	r2, r1
 800144a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 800144c:	693b      	ldr	r3, [r7, #16]
 800144e:	0e19      	lsrs	r1, r3, #24
 8001450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001452:	3303      	adds	r3, #3
 8001454:	683a      	ldr	r2, [r7, #0]
 8001456:	4413      	add	r3, r2
 8001458:	b2ca      	uxtb	r2, r1
 800145a:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints[i]);
 800145c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800145e:	3304      	adds	r3, #4
 8001460:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8001462:	6a3b      	ldr	r3, [r7, #32]
 8001464:	3301      	adds	r3, #1
 8001466:	623b      	str	r3, [r7, #32]
 8001468:	e7ce      	b.n	8001408 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x5c>
      }
      *(outbuffer + offset + 0) = (this->floats_length >> (8 * 0)) & 0xFF;
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	6919      	ldr	r1, [r3, #16]
 800146e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001470:	683a      	ldr	r2, [r7, #0]
 8001472:	4413      	add	r3, r2
 8001474:	b2ca      	uxtb	r2, r1
 8001476:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->floats_length >> (8 * 1)) & 0xFF;
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	691b      	ldr	r3, [r3, #16]
 800147c:	0a19      	lsrs	r1, r3, #8
 800147e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001480:	3301      	adds	r3, #1
 8001482:	683a      	ldr	r2, [r7, #0]
 8001484:	4413      	add	r3, r2
 8001486:	b2ca      	uxtb	r2, r1
 8001488:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->floats_length >> (8 * 2)) & 0xFF;
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	691b      	ldr	r3, [r3, #16]
 800148e:	0c19      	lsrs	r1, r3, #16
 8001490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001492:	3302      	adds	r3, #2
 8001494:	683a      	ldr	r2, [r7, #0]
 8001496:	4413      	add	r3, r2
 8001498:	b2ca      	uxtb	r2, r1
 800149a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->floats_length >> (8 * 3)) & 0xFF;
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	691b      	ldr	r3, [r3, #16]
 80014a0:	0e19      	lsrs	r1, r3, #24
 80014a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014a4:	3303      	adds	r3, #3
 80014a6:	683a      	ldr	r2, [r7, #0]
 80014a8:	4413      	add	r3, r2
 80014aa:	b2ca      	uxtb	r2, r1
 80014ac:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats_length);
 80014ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014b0:	3304      	adds	r3, #4
 80014b2:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 80014b4:	2300      	movs	r3, #0
 80014b6:	61fb      	str	r3, [r7, #28]
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	691b      	ldr	r3, [r3, #16]
 80014bc:	69fa      	ldr	r2, [r7, #28]
 80014be:	429a      	cmp	r2, r3
 80014c0:	d22b      	bcs.n	800151a <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x16e>
      union {
        float real;
        uint32_t base;
      } u_floatsi;
      u_floatsi.real = this->floats[i];
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	699a      	ldr	r2, [r3, #24]
 80014c6:	69fb      	ldr	r3, [r7, #28]
 80014c8:	009b      	lsls	r3, r3, #2
 80014ca:	4413      	add	r3, r2
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 80014d0:	68f9      	ldr	r1, [r7, #12]
 80014d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014d4:	683a      	ldr	r2, [r7, #0]
 80014d6:	4413      	add	r3, r2
 80014d8:	b2ca      	uxtb	r2, r1
 80014da:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	0a19      	lsrs	r1, r3, #8
 80014e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014e2:	3301      	adds	r3, #1
 80014e4:	683a      	ldr	r2, [r7, #0]
 80014e6:	4413      	add	r3, r2
 80014e8:	b2ca      	uxtb	r2, r1
 80014ea:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	0c19      	lsrs	r1, r3, #16
 80014f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014f2:	3302      	adds	r3, #2
 80014f4:	683a      	ldr	r2, [r7, #0]
 80014f6:	4413      	add	r3, r2
 80014f8:	b2ca      	uxtb	r2, r1
 80014fa:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	0e19      	lsrs	r1, r3, #24
 8001500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001502:	3303      	adds	r3, #3
 8001504:	683a      	ldr	r2, [r7, #0]
 8001506:	4413      	add	r3, r2
 8001508:	b2ca      	uxtb	r2, r1
 800150a:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats[i]);
 800150c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800150e:	3304      	adds	r3, #4
 8001510:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8001512:	69fb      	ldr	r3, [r7, #28]
 8001514:	3301      	adds	r3, #1
 8001516:	61fb      	str	r3, [r7, #28]
 8001518:	e7ce      	b.n	80014b8 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x10c>
      }
      *(outbuffer + offset + 0) = (this->strings_length >> (8 * 0)) & 0xFF;
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	69d9      	ldr	r1, [r3, #28]
 800151e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001520:	683a      	ldr	r2, [r7, #0]
 8001522:	4413      	add	r3, r2
 8001524:	b2ca      	uxtb	r2, r1
 8001526:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->strings_length >> (8 * 1)) & 0xFF;
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	69db      	ldr	r3, [r3, #28]
 800152c:	0a19      	lsrs	r1, r3, #8
 800152e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001530:	3301      	adds	r3, #1
 8001532:	683a      	ldr	r2, [r7, #0]
 8001534:	4413      	add	r3, r2
 8001536:	b2ca      	uxtb	r2, r1
 8001538:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->strings_length >> (8 * 2)) & 0xFF;
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	69db      	ldr	r3, [r3, #28]
 800153e:	0c19      	lsrs	r1, r3, #16
 8001540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001542:	3302      	adds	r3, #2
 8001544:	683a      	ldr	r2, [r7, #0]
 8001546:	4413      	add	r3, r2
 8001548:	b2ca      	uxtb	r2, r1
 800154a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->strings_length >> (8 * 3)) & 0xFF;
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	69db      	ldr	r3, [r3, #28]
 8001550:	0e19      	lsrs	r1, r3, #24
 8001552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001554:	3303      	adds	r3, #3
 8001556:	683a      	ldr	r2, [r7, #0]
 8001558:	4413      	add	r3, r2
 800155a:	b2ca      	uxtb	r2, r1
 800155c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->strings_length);
 800155e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001560:	3304      	adds	r3, #4
 8001562:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8001564:	2300      	movs	r3, #0
 8001566:	61bb      	str	r3, [r7, #24]
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	69db      	ldr	r3, [r3, #28]
 800156c:	69ba      	ldr	r2, [r7, #24]
 800156e:	429a      	cmp	r2, r3
 8001570:	d228      	bcs.n	80015c4 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x218>
      uint32_t length_stringsi = strlen(this->strings[i]);
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001576:	69bb      	ldr	r3, [r7, #24]
 8001578:	009b      	lsls	r3, r3, #2
 800157a:	4413      	add	r3, r2
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	4618      	mov	r0, r3
 8001580:	f7fe fe7e 	bl	8000280 <strlen>
 8001584:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_stringsi);
 8001586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001588:	683a      	ldr	r2, [r7, #0]
 800158a:	4413      	add	r3, r2
 800158c:	6979      	ldr	r1, [r7, #20]
 800158e:	4618      	mov	r0, r3
 8001590:	f001 fb3d 	bl	8002c0e <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001596:	3304      	adds	r3, #4
 8001598:	627b      	str	r3, [r7, #36]	; 0x24
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 800159a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800159c:	683a      	ldr	r2, [r7, #0]
 800159e:	18d0      	adds	r0, r2, r3
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80015a4:	69bb      	ldr	r3, [r7, #24]
 80015a6:	009b      	lsls	r3, r3, #2
 80015a8:	4413      	add	r3, r2
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	697a      	ldr	r2, [r7, #20]
 80015ae:	4619      	mov	r1, r3
 80015b0:	f00a f834 	bl	800b61c <memcpy>
      offset += length_stringsi;
 80015b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015b6:	697b      	ldr	r3, [r7, #20]
 80015b8:	4413      	add	r3, r2
 80015ba:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 80015bc:	69bb      	ldr	r3, [r7, #24]
 80015be:	3301      	adds	r3, #1
 80015c0:	61bb      	str	r3, [r7, #24]
 80015c2:	e7d1      	b.n	8001568 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x1bc>
      }
      return offset;
 80015c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 80015c6:	4618      	mov	r0, r3
 80015c8:	3728      	adds	r7, #40	; 0x28
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}

080015ce <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 80015ce:	b580      	push	{r7, lr}
 80015d0:	b08e      	sub	sp, #56	; 0x38
 80015d2:	af00      	add	r7, sp, #0
 80015d4:	6078      	str	r0, [r7, #4]
 80015d6:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80015d8:	2300      	movs	r3, #0
 80015da:	637b      	str	r3, [r7, #52]	; 0x34
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 80015dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80015de:	683a      	ldr	r2, [r7, #0]
 80015e0:	4413      	add	r3, r2
 80015e2:	781b      	ldrb	r3, [r3, #0]
 80015e4:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 80015e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80015e8:	3301      	adds	r3, #1
 80015ea:	683a      	ldr	r2, [r7, #0]
 80015ec:	4413      	add	r3, r2
 80015ee:	781b      	ldrb	r3, [r3, #0]
 80015f0:	021b      	lsls	r3, r3, #8
 80015f2:	6a3a      	ldr	r2, [r7, #32]
 80015f4:	4313      	orrs	r3, r2
 80015f6:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 80015f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80015fa:	3302      	adds	r3, #2
 80015fc:	683a      	ldr	r2, [r7, #0]
 80015fe:	4413      	add	r3, r2
 8001600:	781b      	ldrb	r3, [r3, #0]
 8001602:	041b      	lsls	r3, r3, #16
 8001604:	6a3a      	ldr	r2, [r7, #32]
 8001606:	4313      	orrs	r3, r2
 8001608:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 800160a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800160c:	3303      	adds	r3, #3
 800160e:	683a      	ldr	r2, [r7, #0]
 8001610:	4413      	add	r3, r2
 8001612:	781b      	ldrb	r3, [r3, #0]
 8001614:	061b      	lsls	r3, r3, #24
 8001616:	6a3a      	ldr	r2, [r7, #32]
 8001618:	4313      	orrs	r3, r2
 800161a:	623b      	str	r3, [r7, #32]
      offset += sizeof(this->ints_length);
 800161c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800161e:	3304      	adds	r3, #4
 8001620:	637b      	str	r3, [r7, #52]	; 0x34
      if(ints_lengthT > ints_length)
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	685b      	ldr	r3, [r3, #4]
 8001626:	6a3a      	ldr	r2, [r7, #32]
 8001628:	429a      	cmp	r2, r3
 800162a:	d90a      	bls.n	8001642 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x74>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	68da      	ldr	r2, [r3, #12]
 8001630:	6a3b      	ldr	r3, [r7, #32]
 8001632:	009b      	lsls	r3, r3, #2
 8001634:	4619      	mov	r1, r3
 8001636:	4610      	mov	r0, r2
 8001638:	f00a f900 	bl	800b83c <realloc>
 800163c:	4602      	mov	r2, r0
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	60da      	str	r2, [r3, #12]
      ints_length = ints_lengthT;
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	6a3a      	ldr	r2, [r7, #32]
 8001646:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < ints_length; i++){
 8001648:	2300      	movs	r3, #0
 800164a:	633b      	str	r3, [r7, #48]	; 0x30
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	685b      	ldr	r3, [r3, #4]
 8001650:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001652:	429a      	cmp	r2, r3
 8001654:	d236      	bcs.n	80016c4 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xf6>
      union {
        int32_t real;
        uint32_t base;
      } u_st_ints;
      u_st_ints.base = 0;
 8001656:	2300      	movs	r3, #0
 8001658:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800165a:	697b      	ldr	r3, [r7, #20]
 800165c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800165e:	6839      	ldr	r1, [r7, #0]
 8001660:	440a      	add	r2, r1
 8001662:	7812      	ldrb	r2, [r2, #0]
 8001664:	4313      	orrs	r3, r2
 8001666:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001668:	697a      	ldr	r2, [r7, #20]
 800166a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800166c:	3301      	adds	r3, #1
 800166e:	6839      	ldr	r1, [r7, #0]
 8001670:	440b      	add	r3, r1
 8001672:	781b      	ldrb	r3, [r3, #0]
 8001674:	021b      	lsls	r3, r3, #8
 8001676:	4313      	orrs	r3, r2
 8001678:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800167a:	697a      	ldr	r2, [r7, #20]
 800167c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800167e:	3302      	adds	r3, #2
 8001680:	6839      	ldr	r1, [r7, #0]
 8001682:	440b      	add	r3, r1
 8001684:	781b      	ldrb	r3, [r3, #0]
 8001686:	041b      	lsls	r3, r3, #16
 8001688:	4313      	orrs	r3, r2
 800168a:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800168c:	697a      	ldr	r2, [r7, #20]
 800168e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001690:	3303      	adds	r3, #3
 8001692:	6839      	ldr	r1, [r7, #0]
 8001694:	440b      	add	r3, r1
 8001696:	781b      	ldrb	r3, [r3, #0]
 8001698:	061b      	lsls	r3, r3, #24
 800169a:	4313      	orrs	r3, r2
 800169c:	617b      	str	r3, [r7, #20]
      this->st_ints = u_st_ints.real;
 800169e:	697a      	ldr	r2, [r7, #20]
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->st_ints);
 80016a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80016a6:	3304      	adds	r3, #4
 80016a8:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	68da      	ldr	r2, [r3, #12]
 80016ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80016b0:	009b      	lsls	r3, r3, #2
 80016b2:	4413      	add	r3, r2
 80016b4:	687a      	ldr	r2, [r7, #4]
 80016b6:	3208      	adds	r2, #8
 80016b8:	6812      	ldr	r2, [r2, #0]
 80016ba:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < ints_length; i++){
 80016bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80016be:	3301      	adds	r3, #1
 80016c0:	633b      	str	r3, [r7, #48]	; 0x30
 80016c2:	e7c3      	b.n	800164c <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x7e>
      }
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 80016c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80016c6:	683a      	ldr	r2, [r7, #0]
 80016c8:	4413      	add	r3, r2
 80016ca:	781b      	ldrb	r3, [r3, #0]
 80016cc:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 80016ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80016d0:	3301      	adds	r3, #1
 80016d2:	683a      	ldr	r2, [r7, #0]
 80016d4:	4413      	add	r3, r2
 80016d6:	781b      	ldrb	r3, [r3, #0]
 80016d8:	021b      	lsls	r3, r3, #8
 80016da:	69fa      	ldr	r2, [r7, #28]
 80016dc:	4313      	orrs	r3, r2
 80016de:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 80016e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80016e2:	3302      	adds	r3, #2
 80016e4:	683a      	ldr	r2, [r7, #0]
 80016e6:	4413      	add	r3, r2
 80016e8:	781b      	ldrb	r3, [r3, #0]
 80016ea:	041b      	lsls	r3, r3, #16
 80016ec:	69fa      	ldr	r2, [r7, #28]
 80016ee:	4313      	orrs	r3, r2
 80016f0:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 80016f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80016f4:	3303      	adds	r3, #3
 80016f6:	683a      	ldr	r2, [r7, #0]
 80016f8:	4413      	add	r3, r2
 80016fa:	781b      	ldrb	r3, [r3, #0]
 80016fc:	061b      	lsls	r3, r3, #24
 80016fe:	69fa      	ldr	r2, [r7, #28]
 8001700:	4313      	orrs	r3, r2
 8001702:	61fb      	str	r3, [r7, #28]
      offset += sizeof(this->floats_length);
 8001704:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001706:	3304      	adds	r3, #4
 8001708:	637b      	str	r3, [r7, #52]	; 0x34
      if(floats_lengthT > floats_length)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	691b      	ldr	r3, [r3, #16]
 800170e:	69fa      	ldr	r2, [r7, #28]
 8001710:	429a      	cmp	r2, r3
 8001712:	d90a      	bls.n	800172a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x15c>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	699a      	ldr	r2, [r3, #24]
 8001718:	69fb      	ldr	r3, [r7, #28]
 800171a:	009b      	lsls	r3, r3, #2
 800171c:	4619      	mov	r1, r3
 800171e:	4610      	mov	r0, r2
 8001720:	f00a f88c 	bl	800b83c <realloc>
 8001724:	4602      	mov	r2, r0
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	619a      	str	r2, [r3, #24]
      floats_length = floats_lengthT;
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	69fa      	ldr	r2, [r7, #28]
 800172e:	611a      	str	r2, [r3, #16]
      for( uint32_t i = 0; i < floats_length; i++){
 8001730:	2300      	movs	r3, #0
 8001732:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	691b      	ldr	r3, [r3, #16]
 8001738:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800173a:	429a      	cmp	r2, r3
 800173c:	d236      	bcs.n	80017ac <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1de>
      union {
        float real;
        uint32_t base;
      } u_st_floats;
      u_st_floats.base = 0;
 800173e:	2300      	movs	r3, #0
 8001740:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8001742:	693b      	ldr	r3, [r7, #16]
 8001744:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001746:	6839      	ldr	r1, [r7, #0]
 8001748:	440a      	add	r2, r1
 800174a:	7812      	ldrb	r2, [r2, #0]
 800174c:	4313      	orrs	r3, r2
 800174e:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001750:	693a      	ldr	r2, [r7, #16]
 8001752:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001754:	3301      	adds	r3, #1
 8001756:	6839      	ldr	r1, [r7, #0]
 8001758:	440b      	add	r3, r1
 800175a:	781b      	ldrb	r3, [r3, #0]
 800175c:	021b      	lsls	r3, r3, #8
 800175e:	4313      	orrs	r3, r2
 8001760:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001762:	693a      	ldr	r2, [r7, #16]
 8001764:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001766:	3302      	adds	r3, #2
 8001768:	6839      	ldr	r1, [r7, #0]
 800176a:	440b      	add	r3, r1
 800176c:	781b      	ldrb	r3, [r3, #0]
 800176e:	041b      	lsls	r3, r3, #16
 8001770:	4313      	orrs	r3, r2
 8001772:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001774:	693a      	ldr	r2, [r7, #16]
 8001776:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001778:	3303      	adds	r3, #3
 800177a:	6839      	ldr	r1, [r7, #0]
 800177c:	440b      	add	r3, r1
 800177e:	781b      	ldrb	r3, [r3, #0]
 8001780:	061b      	lsls	r3, r3, #24
 8001782:	4313      	orrs	r3, r2
 8001784:	613b      	str	r3, [r7, #16]
      this->st_floats = u_st_floats.real;
 8001786:	693a      	ldr	r2, [r7, #16]
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->st_floats);
 800178c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800178e:	3304      	adds	r3, #4
 8001790:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	699a      	ldr	r2, [r3, #24]
 8001796:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001798:	009b      	lsls	r3, r3, #2
 800179a:	4413      	add	r3, r2
 800179c:	687a      	ldr	r2, [r7, #4]
 800179e:	3214      	adds	r2, #20
 80017a0:	6812      	ldr	r2, [r2, #0]
 80017a2:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < floats_length; i++){
 80017a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017a6:	3301      	adds	r3, #1
 80017a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80017aa:	e7c3      	b.n	8001734 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x166>
      }
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 80017ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80017ae:	683a      	ldr	r2, [r7, #0]
 80017b0:	4413      	add	r3, r2
 80017b2:	781b      	ldrb	r3, [r3, #0]
 80017b4:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 80017b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80017b8:	3301      	adds	r3, #1
 80017ba:	683a      	ldr	r2, [r7, #0]
 80017bc:	4413      	add	r3, r2
 80017be:	781b      	ldrb	r3, [r3, #0]
 80017c0:	021b      	lsls	r3, r3, #8
 80017c2:	69ba      	ldr	r2, [r7, #24]
 80017c4:	4313      	orrs	r3, r2
 80017c6:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 80017c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80017ca:	3302      	adds	r3, #2
 80017cc:	683a      	ldr	r2, [r7, #0]
 80017ce:	4413      	add	r3, r2
 80017d0:	781b      	ldrb	r3, [r3, #0]
 80017d2:	041b      	lsls	r3, r3, #16
 80017d4:	69ba      	ldr	r2, [r7, #24]
 80017d6:	4313      	orrs	r3, r2
 80017d8:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 80017da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80017dc:	3303      	adds	r3, #3
 80017de:	683a      	ldr	r2, [r7, #0]
 80017e0:	4413      	add	r3, r2
 80017e2:	781b      	ldrb	r3, [r3, #0]
 80017e4:	061b      	lsls	r3, r3, #24
 80017e6:	69ba      	ldr	r2, [r7, #24]
 80017e8:	4313      	orrs	r3, r2
 80017ea:	61bb      	str	r3, [r7, #24]
      offset += sizeof(this->strings_length);
 80017ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80017ee:	3304      	adds	r3, #4
 80017f0:	637b      	str	r3, [r7, #52]	; 0x34
      if(strings_lengthT > strings_length)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	69db      	ldr	r3, [r3, #28]
 80017f6:	69ba      	ldr	r2, [r7, #24]
 80017f8:	429a      	cmp	r2, r3
 80017fa:	d90a      	bls.n	8001812 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x244>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001800:	69bb      	ldr	r3, [r7, #24]
 8001802:	009b      	lsls	r3, r3, #2
 8001804:	4619      	mov	r1, r3
 8001806:	4610      	mov	r0, r2
 8001808:	f00a f818 	bl	800b83c <realloc>
 800180c:	4602      	mov	r2, r0
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	625a      	str	r2, [r3, #36]	; 0x24
      strings_length = strings_lengthT;
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	69ba      	ldr	r2, [r7, #24]
 8001816:	61da      	str	r2, [r3, #28]
      for( uint32_t i = 0; i < strings_length; i++){
 8001818:	2300      	movs	r3, #0
 800181a:	62bb      	str	r3, [r7, #40]	; 0x28
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	69db      	ldr	r3, [r3, #28]
 8001820:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001822:	429a      	cmp	r2, r3
 8001824:	d23f      	bcs.n	80018a6 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x2d8>
      uint32_t length_st_strings;
      arrToVar(length_st_strings, (inbuffer + offset));
 8001826:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001828:	683a      	ldr	r2, [r7, #0]
 800182a:	441a      	add	r2, r3
 800182c:	f107 030c 	add.w	r3, r7, #12
 8001830:	4611      	mov	r1, r2
 8001832:	4618      	mov	r0, r3
 8001834:	f001 fa09 	bl	8002c4a <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001838:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800183a:	3304      	adds	r3, #4
 800183c:	637b      	str	r3, [r7, #52]	; 0x34
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 800183e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001840:	627b      	str	r3, [r7, #36]	; 0x24
 8001842:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	4413      	add	r3, r2
 8001848:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800184a:	429a      	cmp	r2, r3
 800184c:	d20c      	bcs.n	8001868 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x29a>
          inbuffer[k-1]=inbuffer[k];
 800184e:	683a      	ldr	r2, [r7, #0]
 8001850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001852:	441a      	add	r2, r3
 8001854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001856:	3b01      	subs	r3, #1
 8001858:	6839      	ldr	r1, [r7, #0]
 800185a:	440b      	add	r3, r1
 800185c:	7812      	ldrb	r2, [r2, #0]
 800185e:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8001860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001862:	3301      	adds	r3, #1
 8001864:	627b      	str	r3, [r7, #36]	; 0x24
 8001866:	e7ec      	b.n	8001842 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x274>
      }
      inbuffer[offset+length_st_strings-1]=0;
 8001868:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	4413      	add	r3, r2
 800186e:	3b01      	subs	r3, #1
 8001870:	683a      	ldr	r2, [r7, #0]
 8001872:	4413      	add	r3, r2
 8001874:	2200      	movs	r2, #0
 8001876:	701a      	strb	r2, [r3, #0]
      this->st_strings = (char *)(inbuffer + offset-1);
 8001878:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800187a:	3b01      	subs	r3, #1
 800187c:	683a      	ldr	r2, [r7, #0]
 800187e:	441a      	add	r2, r3
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	621a      	str	r2, [r3, #32]
      offset += length_st_strings;
 8001884:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	4413      	add	r3, r2
 800188a:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001890:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001892:	009b      	lsls	r3, r3, #2
 8001894:	4413      	add	r3, r2
 8001896:	687a      	ldr	r2, [r7, #4]
 8001898:	3220      	adds	r2, #32
 800189a:	6812      	ldr	r2, [r2, #0]
 800189c:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < strings_length; i++){
 800189e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018a0:	3301      	adds	r3, #1
 80018a2:	62bb      	str	r3, [r7, #40]	; 0x28
 80018a4:	e7ba      	b.n	800181c <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x24e>
      }
     return offset;
 80018a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 80018a8:	4618      	mov	r0, r3
 80018aa:	3738      	adds	r7, #56	; 0x38
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bd80      	pop	{r7, pc}

080018b0 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv>:

    const char * getType(){ return REQUESTPARAM; };
 80018b0:	b480      	push	{r7}
 80018b2:	b083      	sub	sp, #12
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
 80018b8:	4b03      	ldr	r3, [pc, #12]	; (80018c8 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv+0x18>)
 80018ba:	4618      	mov	r0, r3
 80018bc:	370c      	adds	r7, #12
 80018be:	46bd      	mov	sp, r7
 80018c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c4:	4770      	bx	lr
 80018c6:	bf00      	nop
 80018c8:	0800c350 	.word	0x0800c350

080018cc <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev>:
    const char * getMD5(){ return "9f0e98bda65981986ddf53afa7a40e49"; };
 80018cc:	b480      	push	{r7}
 80018ce:	b083      	sub	sp, #12
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
 80018d4:	4b03      	ldr	r3, [pc, #12]	; (80018e4 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev+0x18>)
 80018d6:	4618      	mov	r0, r3
 80018d8:	370c      	adds	r7, #12
 80018da:	46bd      	mov	sp, r7
 80018dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e0:	4770      	bx	lr
 80018e2:	bf00      	nop
 80018e4:	0800c168 	.word	0x0800c168

080018e8 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>:

/* Generic Publisher */
class Publisher
{
public:
  Publisher(const char * topic_name, Msg * msg, int endpoint = rosserial_msgs::TopicInfo::ID_PUBLISHER) :
 80018e8:	b480      	push	{r7}
 80018ea:	b085      	sub	sp, #20
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	60f8      	str	r0, [r7, #12]
 80018f0:	60b9      	str	r1, [r7, #8]
 80018f2:	607a      	str	r2, [r7, #4]
 80018f4:	603b      	str	r3, [r7, #0]
    topic_(topic_name),
    msg_(msg),
    endpoint_(endpoint) {};
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	68ba      	ldr	r2, [r7, #8]
 80018fa:	601a      	str	r2, [r3, #0]
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	687a      	ldr	r2, [r7, #4]
 8001900:	605a      	str	r2, [r3, #4]
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	683a      	ldr	r2, [r7, #0]
 8001906:	611a      	str	r2, [r3, #16]
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	4618      	mov	r0, r3
 800190c:	3714      	adds	r7, #20
 800190e:	46bd      	mov	sp, r7
 8001910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001914:	4770      	bx	lr

08001916 <_ZN3ros9Publisher7publishEPKNS_3MsgE>:

  int publish(const Msg * msg)
 8001916:	b580      	push	{r7, lr}
 8001918:	b082      	sub	sp, #8
 800191a:	af00      	add	r7, sp, #0
 800191c:	6078      	str	r0, [r7, #4]
 800191e:	6039      	str	r1, [r7, #0]
  {
    return nh_->publish(id_, msg);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	68d8      	ldr	r0, [r3, #12]
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	68db      	ldr	r3, [r3, #12]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	687a      	ldr	r2, [r7, #4]
 800192e:	6891      	ldr	r1, [r2, #8]
 8001930:	683a      	ldr	r2, [r7, #0]
 8001932:	4798      	blx	r3
 8001934:	4603      	mov	r3, r0
  };
 8001936:	4618      	mov	r0, r3
 8001938:	3708      	adds	r7, #8
 800193a:	46bd      	mov	sp, r7
 800193c:	bd80      	pop	{r7, pc}

0800193e <_ZN3ros9Publisher15getEndpointTypeEv>:
  int getEndpointType()
 800193e:	b480      	push	{r7}
 8001940:	b083      	sub	sp, #12
 8001942:	af00      	add	r7, sp, #0
 8001944:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	691b      	ldr	r3, [r3, #16]
  }
 800194a:	4618      	mov	r0, r3
 800194c:	370c      	adds	r7, #12
 800194e:	46bd      	mov	sp, r7
 8001950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001954:	4770      	bx	lr

08001956 <_ZN13STM32Hardware10getRdmaIndEv>:
    UART_HandleTypeDef *huart;

    const static uint16_t rbuflen = 512;
    uint8_t rbuf[rbuflen];
    uint32_t rind;
    inline uint32_t getRdmaInd(void){ return (rbuflen - __HAL_DMA_GET_COUNTER(huart->hdmarx)) & (rbuflen - 1); }
 8001956:	b480      	push	{r7}
 8001958:	b083      	sub	sp, #12
 800195a:	af00      	add	r7, sp, #0
 800195c:	6078      	str	r0, [r7, #4]
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	685b      	ldr	r3, [r3, #4]
 8001968:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800196c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001970:	4618      	mov	r0, r3
 8001972:	370c      	adds	r7, #12
 8001974:	46bd      	mov	sp, r7
 8001976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197a:	4770      	bx	lr

0800197c <_ZN13STM32HardwareC1Ev>:
    const static uint16_t tbuflen = 512;
    uint8_t tbuf[tbuflen];
    uint32_t twind, tfind;

  public:
    STM32Hardware():
 800197c:	b480      	push	{r7}
 800197e:	b083      	sub	sp, #12
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
      huart(&huart2), rind(0), twind(0), tfind(0){
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	4a0a      	ldr	r2, [pc, #40]	; (80019b0 <_ZN13STM32HardwareC1Ev+0x34>)
 8001988:	601a      	str	r2, [r3, #0]
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	2200      	movs	r2, #0
 800198e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	2200      	movs	r2, #0
 8001996:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	2200      	movs	r2, #0
 800199e:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
    }
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	4618      	mov	r0, r3
 80019a6:	370c      	adds	r7, #12
 80019a8:	46bd      	mov	sp, r7
 80019aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ae:	4770      	bx	lr
 80019b0:	20000188 	.word	0x20000188

080019b4 <_ZN13STM32Hardware4initEv>:

    STM32Hardware(UART_HandleTypeDef *huart_):
      huart(huart_), rind(0), twind(0), tfind(0){
    }
  
    void init(){
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b082      	sub	sp, #8
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
      reset_rbuf();
 80019bc:	6878      	ldr	r0, [r7, #4]
 80019be:	f000 f804 	bl	80019ca <_ZN13STM32Hardware10reset_rbufEv>
    }
 80019c2:	bf00      	nop
 80019c4:	3708      	adds	r7, #8
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}

080019ca <_ZN13STM32Hardware10reset_rbufEv>:

    void reset_rbuf(void){
 80019ca:	b580      	push	{r7, lr}
 80019cc:	b082      	sub	sp, #8
 80019ce:	af00      	add	r7, sp, #0
 80019d0:	6078      	str	r0, [r7, #4]
      HAL_UART_Receive_DMA(huart, rbuf, rbuflen);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	6818      	ldr	r0, [r3, #0]
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	3304      	adds	r3, #4
 80019da:	f44f 7200 	mov.w	r2, #512	; 0x200
 80019de:	4619      	mov	r1, r3
 80019e0:	f005 fbe4 	bl	80071ac <HAL_UART_Receive_DMA>
    }
 80019e4:	bf00      	nop
 80019e6:	3708      	adds	r7, #8
 80019e8:	46bd      	mov	sp, r7
 80019ea:	bd80      	pop	{r7, pc}

080019ec <_ZN13STM32Hardware4readEv>:

    int read(){
 80019ec:	b590      	push	{r4, r7, lr}
 80019ee:	b085      	sub	sp, #20
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
      int c = -1;
 80019f4:	f04f 33ff 	mov.w	r3, #4294967295
 80019f8:	60fb      	str	r3, [r7, #12]
      if(rind != getRdmaInd()){
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	f8d3 4204 	ldr.w	r4, [r3, #516]	; 0x204
 8001a00:	6878      	ldr	r0, [r7, #4]
 8001a02:	f7ff ffa8 	bl	8001956 <_ZN13STM32Hardware10getRdmaIndEv>
 8001a06:	4603      	mov	r3, r0
 8001a08:	429c      	cmp	r4, r3
 8001a0a:	bf14      	ite	ne
 8001a0c:	2301      	movne	r3, #1
 8001a0e:	2300      	moveq	r3, #0
 8001a10:	b2db      	uxtb	r3, r3
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d012      	beq.n	8001a3c <_ZN13STM32Hardware4readEv+0x50>
        c = rbuf[rind++];
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001a1c:	1c59      	adds	r1, r3, #1
 8001a1e:	687a      	ldr	r2, [r7, #4]
 8001a20:	f8c2 1204 	str.w	r1, [r2, #516]	; 0x204
 8001a24:	687a      	ldr	r2, [r7, #4]
 8001a26:	4413      	add	r3, r2
 8001a28:	791b      	ldrb	r3, [r3, #4]
 8001a2a:	60fb      	str	r3, [r7, #12]
        rind &= rbuflen - 1;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001a32:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
      }
      return c;
 8001a3c:	68fb      	ldr	r3, [r7, #12]
    }
 8001a3e:	4618      	mov	r0, r3
 8001a40:	3714      	adds	r7, #20
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd90      	pop	{r4, r7, pc}
	...

08001a48 <_ZN13STM32Hardware5flushEv>:

    void flush(void){
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b084      	sub	sp, #16
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
      static bool mutex = false;

      if((huart->gState == HAL_UART_STATE_READY) && !mutex){
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a58:	b2db      	uxtb	r3, r3
 8001a5a:	2b20      	cmp	r3, #32
 8001a5c:	d108      	bne.n	8001a70 <_ZN13STM32Hardware5flushEv+0x28>
 8001a5e:	4b33      	ldr	r3, [pc, #204]	; (8001b2c <_ZN13STM32Hardware5flushEv+0xe4>)
 8001a60:	781b      	ldrb	r3, [r3, #0]
 8001a62:	f083 0301 	eor.w	r3, r3, #1
 8001a66:	b2db      	uxtb	r3, r3
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d001      	beq.n	8001a70 <_ZN13STM32Hardware5flushEv+0x28>
 8001a6c:	2301      	movs	r3, #1
 8001a6e:	e000      	b.n	8001a72 <_ZN13STM32Hardware5flushEv+0x2a>
 8001a70:	2300      	movs	r3, #0
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d055      	beq.n	8001b22 <_ZN13STM32Hardware5flushEv+0xda>
        mutex = true;
 8001a76:	4b2d      	ldr	r3, [pc, #180]	; (8001b2c <_ZN13STM32Hardware5flushEv+0xe4>)
 8001a78:	2201      	movs	r2, #1
 8001a7a:	701a      	strb	r2, [r3, #0]

        if(twind != tfind){
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8001a88:	429a      	cmp	r2, r3
 8001a8a:	d047      	beq.n	8001b1c <_ZN13STM32Hardware5flushEv+0xd4>
          uint16_t len = 0;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	81fb      	strh	r3, [r7, #14]
		  if(tfind < twind){
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8001a9c:	429a      	cmp	r2, r3
 8001a9e:	d217      	bcs.n	8001ad0 <_ZN13STM32Hardware5flushEv+0x88>
			len = twind - tfind;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8001aa6:	b29a      	uxth	r2, r3
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8001aae:	b29b      	uxth	r3, r3
 8001ab0:	1ad3      	subs	r3, r2, r3
 8001ab2:	81fb      	strh	r3, [r7, #14]
			HAL_UART_Transmit_DMA(huart, &(tbuf[tfind]), len);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	6818      	ldr	r0, [r3, #0]
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8001abe:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001ac2:	687a      	ldr	r2, [r7, #4]
 8001ac4:	4413      	add	r3, r2
 8001ac6:	89fa      	ldrh	r2, [r7, #14]
 8001ac8:	4619      	mov	r1, r3
 8001aca:	f005 faf1 	bl	80070b0 <HAL_UART_Transmit_DMA>
 8001ace:	e01f      	b.n	8001b10 <_ZN13STM32Hardware5flushEv+0xc8>
		  }else{
			len = tbuflen - tfind;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8001ad6:	b29b      	uxth	r3, r3
 8001ad8:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8001adc:	81fb      	strh	r3, [r7, #14]
			HAL_UART_Transmit_DMA(huart, &(tbuf[tfind]), len);
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	6818      	ldr	r0, [r3, #0]
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8001ae8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001aec:	687a      	ldr	r2, [r7, #4]
 8001aee:	4413      	add	r3, r2
 8001af0:	89fa      	ldrh	r2, [r7, #14]
 8001af2:	4619      	mov	r1, r3
 8001af4:	f005 fadc 	bl	80070b0 <HAL_UART_Transmit_DMA>
			HAL_UART_Transmit_DMA(huart, (tbuf), twind);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	6818      	ldr	r0, [r3, #0]
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	f503 7102 	add.w	r1, r3, #520	; 0x208
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8001b08:	b29b      	uxth	r3, r3
 8001b0a:	461a      	mov	r2, r3
 8001b0c:	f005 fad0 	bl	80070b0 <HAL_UART_Transmit_DMA>
		  }
          tfind = twind;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
        }
        mutex = false;
 8001b1c:	4b03      	ldr	r3, [pc, #12]	; (8001b2c <_ZN13STM32Hardware5flushEv+0xe4>)
 8001b1e:	2200      	movs	r2, #0
 8001b20:	701a      	strb	r2, [r3, #0]
      }
    }
 8001b22:	bf00      	nop
 8001b24:	3710      	adds	r7, #16
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bd80      	pop	{r7, pc}
 8001b2a:	bf00      	nop
 8001b2c:	20000094 	.word	0x20000094

08001b30 <_ZN13STM32Hardware5writeEPhi>:

    void write(uint8_t* data, int length){
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b086      	sub	sp, #24
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	60f8      	str	r0, [r7, #12]
 8001b38:	60b9      	str	r1, [r7, #8]
 8001b3a:	607a      	str	r2, [r7, #4]
      long unsigned int n = length;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	617b      	str	r3, [r7, #20]
      n = n <= tbuflen ? n : tbuflen;
 8001b40:	697b      	ldr	r3, [r7, #20]
 8001b42:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001b46:	bf28      	it	cs
 8001b48:	f44f 7300 	movcs.w	r3, #512	; 0x200
 8001b4c:	617b      	str	r3, [r7, #20]

      long unsigned int n_tail = n <= tbuflen - twind ? n : tbuflen - twind;
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8001b54:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8001b58:	697a      	ldr	r2, [r7, #20]
 8001b5a:	4293      	cmp	r3, r2
 8001b5c:	bf28      	it	cs
 8001b5e:	4613      	movcs	r3, r2
 8001b60:	613b      	str	r3, [r7, #16]
      memcpy(&(tbuf[twind]), data, n_tail);
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8001b68:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001b6c:	68fa      	ldr	r2, [r7, #12]
 8001b6e:	4413      	add	r3, r2
 8001b70:	693a      	ldr	r2, [r7, #16]
 8001b72:	68b9      	ldr	r1, [r7, #8]
 8001b74:	4618      	mov	r0, r3
 8001b76:	f009 fd51 	bl	800b61c <memcpy>
      twind = (twind + n) & (tbuflen - 1);
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8001b80:	697b      	ldr	r3, [r7, #20]
 8001b82:	4413      	add	r3, r2
 8001b84:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

      if(n != n_tail){
 8001b8e:	697a      	ldr	r2, [r7, #20]
 8001b90:	693b      	ldr	r3, [r7, #16]
 8001b92:	429a      	cmp	r2, r3
 8001b94:	d00b      	beq.n	8001bae <_ZN13STM32Hardware5writeEPhi+0x7e>
        memcpy(tbuf, &(data[n_tail]), n - n_tail);
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	f503 7002 	add.w	r0, r3, #520	; 0x208
 8001b9c:	68ba      	ldr	r2, [r7, #8]
 8001b9e:	693b      	ldr	r3, [r7, #16]
 8001ba0:	18d1      	adds	r1, r2, r3
 8001ba2:	697a      	ldr	r2, [r7, #20]
 8001ba4:	693b      	ldr	r3, [r7, #16]
 8001ba6:	1ad3      	subs	r3, r2, r3
 8001ba8:	461a      	mov	r2, r3
 8001baa:	f009 fd37 	bl	800b61c <memcpy>
      }

      flush();
 8001bae:	68f8      	ldr	r0, [r7, #12]
 8001bb0:	f7ff ff4a 	bl	8001a48 <_ZN13STM32Hardware5flushEv>
    }
 8001bb4:	bf00      	nop
 8001bb6:	3718      	adds	r7, #24
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bd80      	pop	{r7, pc}

08001bbc <_ZN13STM32Hardware4timeEv>:

    unsigned long time(){ return HAL_GetTick();; }
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b082      	sub	sp, #8
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
 8001bc4:	f002 fb26 	bl	8004214 <HAL_GetTick>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	4618      	mov	r0, r3
 8001bcc:	3708      	adds	r7, #8
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd80      	pop	{r7, pc}
	...

08001bd4 <_ZN8std_msgs6StringC1Ev>:
  {
    public:
      typedef const char* _data_type;
      _data_type data;

    String():
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b082      	sub	sp, #8
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
      data("")
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	4618      	mov	r0, r3
 8001be0:	f7ff f84c 	bl	8000c7c <_ZN3ros3MsgC1Ev>
 8001be4:	4a05      	ldr	r2, [pc, #20]	; (8001bfc <_ZN8std_msgs6StringC1Ev+0x28>)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	601a      	str	r2, [r3, #0]
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	4a04      	ldr	r2, [pc, #16]	; (8001c00 <_ZN8std_msgs6StringC1Ev+0x2c>)
 8001bee:	605a      	str	r2, [r3, #4]
    {
    }
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	3708      	adds	r7, #8
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bd80      	pop	{r7, pc}
 8001bfa:	bf00      	nop
 8001bfc:	0800c4e4 	.word	0x0800c4e4
 8001c00:	0800c0ec 	.word	0x0800c0ec

08001c04 <_ZNK8std_msgs6String9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b084      	sub	sp, #16
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
 8001c0c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	60fb      	str	r3, [r7, #12]
      uint32_t length_data = strlen(this->data);
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	685b      	ldr	r3, [r3, #4]
 8001c16:	4618      	mov	r0, r3
 8001c18:	f7fe fb32 	bl	8000280 <strlen>
 8001c1c:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_data);
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	683a      	ldr	r2, [r7, #0]
 8001c22:	4413      	add	r3, r2
 8001c24:	68b9      	ldr	r1, [r7, #8]
 8001c26:	4618      	mov	r0, r3
 8001c28:	f000 fff1 	bl	8002c0e <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	3304      	adds	r3, #4
 8001c30:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->data, length_data);
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	683a      	ldr	r2, [r7, #0]
 8001c36:	18d0      	adds	r0, r2, r3
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	685b      	ldr	r3, [r3, #4]
 8001c3c:	68ba      	ldr	r2, [r7, #8]
 8001c3e:	4619      	mov	r1, r3
 8001c40:	f009 fcec 	bl	800b61c <memcpy>
      offset += length_data;
 8001c44:	68fa      	ldr	r2, [r7, #12]
 8001c46:	68bb      	ldr	r3, [r7, #8]
 8001c48:	4413      	add	r3, r2
 8001c4a:	60fb      	str	r3, [r7, #12]
      return offset;
 8001c4c:	68fb      	ldr	r3, [r7, #12]
    }
 8001c4e:	4618      	mov	r0, r3
 8001c50:	3710      	adds	r7, #16
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bd80      	pop	{r7, pc}

08001c56 <_ZN8std_msgs6String11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8001c56:	b580      	push	{r7, lr}
 8001c58:	b086      	sub	sp, #24
 8001c5a:	af00      	add	r7, sp, #0
 8001c5c:	6078      	str	r0, [r7, #4]
 8001c5e:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001c60:	2300      	movs	r3, #0
 8001c62:	613b      	str	r3, [r7, #16]
      uint32_t length_data;
      arrToVar(length_data, (inbuffer + offset));
 8001c64:	693b      	ldr	r3, [r7, #16]
 8001c66:	683a      	ldr	r2, [r7, #0]
 8001c68:	441a      	add	r2, r3
 8001c6a:	f107 030c 	add.w	r3, r7, #12
 8001c6e:	4611      	mov	r1, r2
 8001c70:	4618      	mov	r0, r3
 8001c72:	f000 ffea 	bl	8002c4a <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001c76:	693b      	ldr	r3, [r7, #16]
 8001c78:	3304      	adds	r3, #4
 8001c7a:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_data; ++k){
 8001c7c:	693b      	ldr	r3, [r7, #16]
 8001c7e:	617b      	str	r3, [r7, #20]
 8001c80:	693a      	ldr	r2, [r7, #16]
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	4413      	add	r3, r2
 8001c86:	697a      	ldr	r2, [r7, #20]
 8001c88:	429a      	cmp	r2, r3
 8001c8a:	d20c      	bcs.n	8001ca6 <_ZN8std_msgs6String11deserializeEPh+0x50>
          inbuffer[k-1]=inbuffer[k];
 8001c8c:	683a      	ldr	r2, [r7, #0]
 8001c8e:	697b      	ldr	r3, [r7, #20]
 8001c90:	441a      	add	r2, r3
 8001c92:	697b      	ldr	r3, [r7, #20]
 8001c94:	3b01      	subs	r3, #1
 8001c96:	6839      	ldr	r1, [r7, #0]
 8001c98:	440b      	add	r3, r1
 8001c9a:	7812      	ldrb	r2, [r2, #0]
 8001c9c:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_data; ++k){
 8001c9e:	697b      	ldr	r3, [r7, #20]
 8001ca0:	3301      	adds	r3, #1
 8001ca2:	617b      	str	r3, [r7, #20]
 8001ca4:	e7ec      	b.n	8001c80 <_ZN8std_msgs6String11deserializeEPh+0x2a>
      }
      inbuffer[offset+length_data-1]=0;
 8001ca6:	693a      	ldr	r2, [r7, #16]
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	4413      	add	r3, r2
 8001cac:	3b01      	subs	r3, #1
 8001cae:	683a      	ldr	r2, [r7, #0]
 8001cb0:	4413      	add	r3, r2
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	701a      	strb	r2, [r3, #0]
      this->data = (char *)(inbuffer + offset-1);
 8001cb6:	693b      	ldr	r3, [r7, #16]
 8001cb8:	3b01      	subs	r3, #1
 8001cba:	683a      	ldr	r2, [r7, #0]
 8001cbc:	441a      	add	r2, r3
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	605a      	str	r2, [r3, #4]
      offset += length_data;
 8001cc2:	693a      	ldr	r2, [r7, #16]
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	4413      	add	r3, r2
 8001cc8:	613b      	str	r3, [r7, #16]
     return offset;
 8001cca:	693b      	ldr	r3, [r7, #16]
    }
 8001ccc:	4618      	mov	r0, r3
 8001cce:	3718      	adds	r7, #24
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	bd80      	pop	{r7, pc}

08001cd4 <_ZN8std_msgs6String7getTypeEv>:

    const char * getType(){ return "std_msgs/String"; };
 8001cd4:	b480      	push	{r7}
 8001cd6:	b083      	sub	sp, #12
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
 8001cdc:	4b03      	ldr	r3, [pc, #12]	; (8001cec <_ZN8std_msgs6String7getTypeEv+0x18>)
 8001cde:	4618      	mov	r0, r3
 8001ce0:	370c      	adds	r7, #12
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce8:	4770      	bx	lr
 8001cea:	bf00      	nop
 8001cec:	0800c18c 	.word	0x0800c18c

08001cf0 <_ZN8std_msgs6String6getMD5Ev>:
    const char * getMD5(){ return "992ce8a1687cec8c8bd883ec73ca41d1"; };
 8001cf0:	b480      	push	{r7}
 8001cf2:	b083      	sub	sp, #12
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
 8001cf8:	4b03      	ldr	r3, [pc, #12]	; (8001d08 <_ZN8std_msgs6String6getMD5Ev+0x18>)
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	370c      	adds	r7, #12
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d04:	4770      	bx	lr
 8001d06:	bf00      	nop
 8001d08:	0800c19c 	.word	0x0800c19c

08001d0c <_ZNSt7__cxx119to_stringEf>:
#if _GLIBCXX_USE_C99_STDIO
  // NB: (v)snprintf vs sprintf.

  inline string
  to_string(float __val)
  {
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b086      	sub	sp, #24
 8001d10:	af02      	add	r7, sp, #8
 8001d12:	6078      	str	r0, [r7, #4]
 8001d14:	ed87 0a00 	vstr	s0, [r7]
    const int __n = 
 8001d18:	233a      	movs	r3, #58	; 0x3a
 8001d1a:	60fb      	str	r3, [r7, #12]
      __gnu_cxx::__numeric_traits<float>::__max_exponent10 + 20;
    return __gnu_cxx::__to_xstring<string>(&std::vsnprintf, __n,
					   "%f", __val);
 8001d1c:	6838      	ldr	r0, [r7, #0]
 8001d1e:	f7fe fd45 	bl	80007ac <__aeabi_f2d>
 8001d22:	4602      	mov	r2, r0
 8001d24:	460b      	mov	r3, r1
 8001d26:	6878      	ldr	r0, [r7, #4]
 8001d28:	e9cd 2300 	strd	r2, r3, [sp]
 8001d2c:	4b04      	ldr	r3, [pc, #16]	; (8001d40 <_ZNSt7__cxx119to_stringEf+0x34>)
 8001d2e:	223a      	movs	r2, #58	; 0x3a
 8001d30:	4904      	ldr	r1, [pc, #16]	; (8001d44 <_ZNSt7__cxx119to_stringEf+0x38>)
 8001d32:	f000 ffaf 	bl	8002c94 <_ZN9__gnu_cxx12__to_xstringINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcEET_PFiPT0_jPKS8_St9__va_listEjSB_z>
  }
 8001d36:	6878      	ldr	r0, [r7, #4]
 8001d38:	3710      	adds	r7, #16
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bd80      	pop	{r7, pc}
 8001d3e:	bf00      	nop
 8001d40:	0800c1c0 	.word	0x0800c1c0
 8001d44:	0800ba21 	.word	0x0800ba21

08001d48 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001d4c:	f002 fa2c 	bl	80041a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001d50:	f000 f8a2 	bl	8001e98 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001d54:	f000 fa82 	bl	800225c <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 8001d58:	f000 fa42 	bl	80021e0 <_ZL11MX_DMA_Initv>
  MX_ADC1_Init();
 8001d5c:	f000 f906 	bl	8001f6c <_ZL12MX_ADC1_Initv>
  MX_TIM2_Init();
 8001d60:	f000 f972 	bl	8002048 <_ZL12MX_TIM2_Initv>
  MX_USART2_UART_Init();
 8001d64:	f000 fa0e 	bl	8002184 <_ZL19MX_USART2_UART_Initv>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8001d68:	2100      	movs	r1, #0
 8001d6a:	482f      	ldr	r0, [pc, #188]	; (8001e28 <main+0xe0>)
 8001d6c:	f004 fa9a 	bl	80062a4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8001d70:	2104      	movs	r1, #4
 8001d72:	482d      	ldr	r0, [pc, #180]	; (8001e28 <main+0xe0>)
 8001d74:	f004 fa96 	bl	80062a4 <HAL_TIM_PWM_Start>
  setup();
 8001d78:	f000 fbec 	bl	8002554 <_Z5setupv>
  TIM2->CCR1 = 60;
 8001d7c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001d80:	223c      	movs	r2, #60	; 0x3c
 8001d82:	635a      	str	r2, [r3, #52]	; 0x34
  TIM2->CCR2 = 60;
 8001d84:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001d88:	223c      	movs	r2, #60	; 0x3c
 8001d8a:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001d8c:	f006 fb62 	bl	8008454 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of TaskADC */
  TaskADCHandle = osThreadNew(StartTaskADC, NULL, &TaskADC_attributes);
 8001d90:	4a26      	ldr	r2, [pc, #152]	; (8001e2c <main+0xe4>)
 8001d92:	2100      	movs	r1, #0
 8001d94:	4826      	ldr	r0, [pc, #152]	; (8001e30 <main+0xe8>)
 8001d96:	f006 fba7 	bl	80084e8 <osThreadNew>
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	4a25      	ldr	r2, [pc, #148]	; (8001e34 <main+0xec>)
 8001d9e:	6013      	str	r3, [r2, #0]

  /* creation of GripperOpenTask */
  GripperOpenTaskHandle = osThreadNew(StartGripperOpenTask, NULL, &GripperOpenTask_attributes);
 8001da0:	4a25      	ldr	r2, [pc, #148]	; (8001e38 <main+0xf0>)
 8001da2:	2100      	movs	r1, #0
 8001da4:	4825      	ldr	r0, [pc, #148]	; (8001e3c <main+0xf4>)
 8001da6:	f006 fb9f 	bl	80084e8 <osThreadNew>
 8001daa:	4603      	mov	r3, r0
 8001dac:	4a24      	ldr	r2, [pc, #144]	; (8001e40 <main+0xf8>)
 8001dae:	6013      	str	r3, [r2, #0]

  /* creation of GripperClose */
  GripperCloseHandle = osThreadNew(StartGripperCloseTask, NULL, &GripperClose_attributes);
 8001db0:	4a24      	ldr	r2, [pc, #144]	; (8001e44 <main+0xfc>)
 8001db2:	2100      	movs	r1, #0
 8001db4:	4824      	ldr	r0, [pc, #144]	; (8001e48 <main+0x100>)
 8001db6:	f006 fb97 	bl	80084e8 <osThreadNew>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	4a23      	ldr	r2, [pc, #140]	; (8001e4c <main+0x104>)
 8001dbe:	6013      	str	r3, [r2, #0]

  /* creation of GripperGoToTask */
  GripperGoToTaskHandle = osThreadNew(StartGripperGoToTask, NULL, &GripperGoToTask_attributes);
 8001dc0:	4a23      	ldr	r2, [pc, #140]	; (8001e50 <main+0x108>)
 8001dc2:	2100      	movs	r1, #0
 8001dc4:	4823      	ldr	r0, [pc, #140]	; (8001e54 <main+0x10c>)
 8001dc6:	f006 fb8f 	bl	80084e8 <osThreadNew>
 8001dca:	4603      	mov	r3, r0
 8001dcc:	4a22      	ldr	r2, [pc, #136]	; (8001e58 <main+0x110>)
 8001dce:	6013      	str	r3, [r2, #0]

  /* creation of TaskRosserial */
  TaskRosserialHandle = osThreadNew(StartTaskRosserial, NULL, &TaskRosserial_attributes);
 8001dd0:	4a22      	ldr	r2, [pc, #136]	; (8001e5c <main+0x114>)
 8001dd2:	2100      	movs	r1, #0
 8001dd4:	4822      	ldr	r0, [pc, #136]	; (8001e60 <main+0x118>)
 8001dd6:	f006 fb87 	bl	80084e8 <osThreadNew>
 8001dda:	4603      	mov	r3, r0
 8001ddc:	4a21      	ldr	r2, [pc, #132]	; (8001e64 <main+0x11c>)
 8001dde:	6013      	str	r3, [r2, #0]

  /* creation of ButtonTask */
  ButtonTaskHandle = osThreadNew(StartButtonTask, NULL, &ButtonTask_attributes);
 8001de0:	4a21      	ldr	r2, [pc, #132]	; (8001e68 <main+0x120>)
 8001de2:	2100      	movs	r1, #0
 8001de4:	4821      	ldr	r0, [pc, #132]	; (8001e6c <main+0x124>)
 8001de6:	f006 fb7f 	bl	80084e8 <osThreadNew>
 8001dea:	4603      	mov	r3, r0
 8001dec:	4a20      	ldr	r2, [pc, #128]	; (8001e70 <main+0x128>)
 8001dee:	6013      	str	r3, [r2, #0]

  /* creation of ArtUpTask */
  ArtUpTaskHandle = osThreadNew(StartArtUpTask, NULL, &ArtUpTask_attributes);
 8001df0:	4a20      	ldr	r2, [pc, #128]	; (8001e74 <main+0x12c>)
 8001df2:	2100      	movs	r1, #0
 8001df4:	4820      	ldr	r0, [pc, #128]	; (8001e78 <main+0x130>)
 8001df6:	f006 fb77 	bl	80084e8 <osThreadNew>
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	4a1f      	ldr	r2, [pc, #124]	; (8001e7c <main+0x134>)
 8001dfe:	6013      	str	r3, [r2, #0]

  /* creation of ArtDownTask */
  ArtDownTaskHandle = osThreadNew(StartArtDownTask, NULL, &ArtDownTask_attributes);
 8001e00:	4a1f      	ldr	r2, [pc, #124]	; (8001e80 <main+0x138>)
 8001e02:	2100      	movs	r1, #0
 8001e04:	481f      	ldr	r0, [pc, #124]	; (8001e84 <main+0x13c>)
 8001e06:	f006 fb6f 	bl	80084e8 <osThreadNew>
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	4a1e      	ldr	r2, [pc, #120]	; (8001e88 <main+0x140>)
 8001e0e:	6013      	str	r3, [r2, #0]

  /* creation of ArtGoToTask */
  ArtGoToTaskHandle = osThreadNew(StartArtGoToTask, NULL, &ArtGoToTask_attributes);
 8001e10:	4a1e      	ldr	r2, [pc, #120]	; (8001e8c <main+0x144>)
 8001e12:	2100      	movs	r1, #0
 8001e14:	481e      	ldr	r0, [pc, #120]	; (8001e90 <main+0x148>)
 8001e16:	f006 fb67 	bl	80084e8 <osThreadNew>
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	4a1d      	ldr	r2, [pc, #116]	; (8001e94 <main+0x14c>)
 8001e1e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001e20:	f006 fb3c 	bl	800849c <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001e24:	e7fe      	b.n	8001e24 <main+0xdc>
 8001e26:	bf00      	nop
 8001e28:	20000140 	.word	0x20000140
 8001e2c:	0800c36c 	.word	0x0800c36c
 8001e30:	08002641 	.word	0x08002641
 8001e34:	2000028c 	.word	0x2000028c
 8001e38:	0800c390 	.word	0x0800c390
 8001e3c:	08002685 	.word	0x08002685
 8001e40:	20000290 	.word	0x20000290
 8001e44:	0800c3b4 	.word	0x0800c3b4
 8001e48:	08002701 	.word	0x08002701
 8001e4c:	20000294 	.word	0x20000294
 8001e50:	0800c3d8 	.word	0x0800c3d8
 8001e54:	080027c5 	.word	0x080027c5
 8001e58:	20000298 	.word	0x20000298
 8001e5c:	0800c3fc 	.word	0x0800c3fc
 8001e60:	080028a5 	.word	0x080028a5
 8001e64:	2000029c 	.word	0x2000029c
 8001e68:	0800c420 	.word	0x0800c420
 8001e6c:	080029c9 	.word	0x080029c9
 8001e70:	200002a0 	.word	0x200002a0
 8001e74:	0800c444 	.word	0x0800c444
 8001e78:	080029fd 	.word	0x080029fd
 8001e7c:	200002a4 	.word	0x200002a4
 8001e80:	0800c468 	.word	0x0800c468
 8001e84:	08002a81 	.word	0x08002a81
 8001e88:	200002a8 	.word	0x200002a8
 8001e8c:	0800c48c 	.word	0x0800c48c
 8001e90:	08002afd 	.word	0x08002afd
 8001e94:	200002ac 	.word	0x200002ac

08001e98 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b094      	sub	sp, #80	; 0x50
 8001e9c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e9e:	f107 0320 	add.w	r3, r7, #32
 8001ea2:	2230      	movs	r2, #48	; 0x30
 8001ea4:	2100      	movs	r1, #0
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	f009 fbe0 	bl	800b66c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001eac:	f107 030c 	add.w	r3, r7, #12
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	601a      	str	r2, [r3, #0]
 8001eb4:	605a      	str	r2, [r3, #4]
 8001eb6:	609a      	str	r2, [r3, #8]
 8001eb8:	60da      	str	r2, [r3, #12]
 8001eba:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	60bb      	str	r3, [r7, #8]
 8001ec0:	4b28      	ldr	r3, [pc, #160]	; (8001f64 <_Z18SystemClock_Configv+0xcc>)
 8001ec2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ec4:	4a27      	ldr	r2, [pc, #156]	; (8001f64 <_Z18SystemClock_Configv+0xcc>)
 8001ec6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001eca:	6413      	str	r3, [r2, #64]	; 0x40
 8001ecc:	4b25      	ldr	r3, [pc, #148]	; (8001f64 <_Z18SystemClock_Configv+0xcc>)
 8001ece:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ed0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ed4:	60bb      	str	r3, [r7, #8]
 8001ed6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001ed8:	2300      	movs	r3, #0
 8001eda:	607b      	str	r3, [r7, #4]
 8001edc:	4b22      	ldr	r3, [pc, #136]	; (8001f68 <_Z18SystemClock_Configv+0xd0>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001ee4:	4a20      	ldr	r2, [pc, #128]	; (8001f68 <_Z18SystemClock_Configv+0xd0>)
 8001ee6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001eea:	6013      	str	r3, [r2, #0]
 8001eec:	4b1e      	ldr	r3, [pc, #120]	; (8001f68 <_Z18SystemClock_Configv+0xd0>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001ef4:	607b      	str	r3, [r7, #4]
 8001ef6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001ef8:	2302      	movs	r3, #2
 8001efa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001efc:	2301      	movs	r3, #1
 8001efe:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001f00:	2310      	movs	r3, #16
 8001f02:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001f04:	2300      	movs	r3, #0
 8001f06:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001f08:	f107 0320 	add.w	r3, r7, #32
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	f003 fc33 	bl	8005778 <HAL_RCC_OscConfig>
 8001f12:	4603      	mov	r3, r0
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	bf14      	ite	ne
 8001f18:	2301      	movne	r3, #1
 8001f1a:	2300      	moveq	r3, #0
 8001f1c:	b2db      	uxtb	r3, r3
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d001      	beq.n	8001f26 <_Z18SystemClock_Configv+0x8e>
  {
    Error_Handler();
 8001f22:	f000 fe6f 	bl	8002c04 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001f26:	230f      	movs	r3, #15
 8001f28:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001f2e:	2300      	movs	r3, #0
 8001f30:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001f32:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001f36:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001f3c:	f107 030c 	add.w	r3, r7, #12
 8001f40:	2100      	movs	r1, #0
 8001f42:	4618      	mov	r0, r3
 8001f44:	f003 fe90 	bl	8005c68 <HAL_RCC_ClockConfig>
 8001f48:	4603      	mov	r3, r0
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	bf14      	ite	ne
 8001f4e:	2301      	movne	r3, #1
 8001f50:	2300      	moveq	r3, #0
 8001f52:	b2db      	uxtb	r3, r3
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d001      	beq.n	8001f5c <_Z18SystemClock_Configv+0xc4>
  {
    Error_Handler();
 8001f58:	f000 fe54 	bl	8002c04 <Error_Handler>
  }
}
 8001f5c:	bf00      	nop
 8001f5e:	3750      	adds	r7, #80	; 0x50
 8001f60:	46bd      	mov	sp, r7
 8001f62:	bd80      	pop	{r7, pc}
 8001f64:	40023800 	.word	0x40023800
 8001f68:	40007000 	.word	0x40007000

08001f6c <_ZL12MX_ADC1_Initv>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b084      	sub	sp, #16
 8001f70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001f72:	463b      	mov	r3, r7
 8001f74:	2200      	movs	r2, #0
 8001f76:	601a      	str	r2, [r3, #0]
 8001f78:	605a      	str	r2, [r3, #4]
 8001f7a:	609a      	str	r2, [r3, #8]
 8001f7c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001f7e:	4b2f      	ldr	r3, [pc, #188]	; (800203c <_ZL12MX_ADC1_Initv+0xd0>)
 8001f80:	4a2f      	ldr	r2, [pc, #188]	; (8002040 <_ZL12MX_ADC1_Initv+0xd4>)
 8001f82:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001f84:	4b2d      	ldr	r3, [pc, #180]	; (800203c <_ZL12MX_ADC1_Initv+0xd0>)
 8001f86:	2200      	movs	r2, #0
 8001f88:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001f8a:	4b2c      	ldr	r3, [pc, #176]	; (800203c <_ZL12MX_ADC1_Initv+0xd0>)
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001f90:	4b2a      	ldr	r3, [pc, #168]	; (800203c <_ZL12MX_ADC1_Initv+0xd0>)
 8001f92:	2201      	movs	r2, #1
 8001f94:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001f96:	4b29      	ldr	r3, [pc, #164]	; (800203c <_ZL12MX_ADC1_Initv+0xd0>)
 8001f98:	2201      	movs	r2, #1
 8001f9a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001f9c:	4b27      	ldr	r3, [pc, #156]	; (800203c <_ZL12MX_ADC1_Initv+0xd0>)
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001fa4:	4b25      	ldr	r3, [pc, #148]	; (800203c <_ZL12MX_ADC1_Initv+0xd0>)
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001faa:	4b24      	ldr	r3, [pc, #144]	; (800203c <_ZL12MX_ADC1_Initv+0xd0>)
 8001fac:	4a25      	ldr	r2, [pc, #148]	; (8002044 <_ZL12MX_ADC1_Initv+0xd8>)
 8001fae:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001fb0:	4b22      	ldr	r3, [pc, #136]	; (800203c <_ZL12MX_ADC1_Initv+0xd0>)
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8001fb6:	4b21      	ldr	r3, [pc, #132]	; (800203c <_ZL12MX_ADC1_Initv+0xd0>)
 8001fb8:	2202      	movs	r2, #2
 8001fba:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001fbc:	4b1f      	ldr	r3, [pc, #124]	; (800203c <_ZL12MX_ADC1_Initv+0xd0>)
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001fc4:	4b1d      	ldr	r3, [pc, #116]	; (800203c <_ZL12MX_ADC1_Initv+0xd0>)
 8001fc6:	2201      	movs	r2, #1
 8001fc8:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001fca:	481c      	ldr	r0, [pc, #112]	; (800203c <_ZL12MX_ADC1_Initv+0xd0>)
 8001fcc:	f002 f92e 	bl	800422c <HAL_ADC_Init>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	bf14      	ite	ne
 8001fd6:	2301      	movne	r3, #1
 8001fd8:	2300      	moveq	r3, #0
 8001fda:	b2db      	uxtb	r3, r3
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d001      	beq.n	8001fe4 <_ZL12MX_ADC1_Initv+0x78>
  {
    Error_Handler();
 8001fe0:	f000 fe10 	bl	8002c04 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8001fe4:	2308      	movs	r3, #8
 8001fe6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001fe8:	2301      	movs	r3, #1
 8001fea:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8001fec:	2307      	movs	r3, #7
 8001fee:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001ff0:	463b      	mov	r3, r7
 8001ff2:	4619      	mov	r1, r3
 8001ff4:	4811      	ldr	r0, [pc, #68]	; (800203c <_ZL12MX_ADC1_Initv+0xd0>)
 8001ff6:	f002 fa6b 	bl	80044d0 <HAL_ADC_ConfigChannel>
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	bf14      	ite	ne
 8002000:	2301      	movne	r3, #1
 8002002:	2300      	moveq	r3, #0
 8002004:	b2db      	uxtb	r3, r3
 8002006:	2b00      	cmp	r3, #0
 8002008:	d001      	beq.n	800200e <_ZL12MX_ADC1_Initv+0xa2>
  {
    Error_Handler();
 800200a:	f000 fdfb 	bl	8002c04 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 800200e:	2309      	movs	r3, #9
 8002010:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8002012:	2302      	movs	r3, #2
 8002014:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002016:	463b      	mov	r3, r7
 8002018:	4619      	mov	r1, r3
 800201a:	4808      	ldr	r0, [pc, #32]	; (800203c <_ZL12MX_ADC1_Initv+0xd0>)
 800201c:	f002 fa58 	bl	80044d0 <HAL_ADC_ConfigChannel>
 8002020:	4603      	mov	r3, r0
 8002022:	2b00      	cmp	r3, #0
 8002024:	bf14      	ite	ne
 8002026:	2301      	movne	r3, #1
 8002028:	2300      	moveq	r3, #0
 800202a:	b2db      	uxtb	r3, r3
 800202c:	2b00      	cmp	r3, #0
 800202e:	d001      	beq.n	8002034 <_ZL12MX_ADC1_Initv+0xc8>
  {
    Error_Handler();
 8002030:	f000 fde8 	bl	8002c04 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002034:	bf00      	nop
 8002036:	3710      	adds	r7, #16
 8002038:	46bd      	mov	sp, r7
 800203a:	bd80      	pop	{r7, pc}
 800203c:	20000098 	.word	0x20000098
 8002040:	40012000 	.word	0x40012000
 8002044:	0f000001 	.word	0x0f000001

08002048 <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b08e      	sub	sp, #56	; 0x38
 800204c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800204e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002052:	2200      	movs	r2, #0
 8002054:	601a      	str	r2, [r3, #0]
 8002056:	605a      	str	r2, [r3, #4]
 8002058:	609a      	str	r2, [r3, #8]
 800205a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800205c:	f107 0320 	add.w	r3, r7, #32
 8002060:	2200      	movs	r2, #0
 8002062:	601a      	str	r2, [r3, #0]
 8002064:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002066:	1d3b      	adds	r3, r7, #4
 8002068:	2200      	movs	r2, #0
 800206a:	601a      	str	r2, [r3, #0]
 800206c:	605a      	str	r2, [r3, #4]
 800206e:	609a      	str	r2, [r3, #8]
 8002070:	60da      	str	r2, [r3, #12]
 8002072:	611a      	str	r2, [r3, #16]
 8002074:	615a      	str	r2, [r3, #20]
 8002076:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002078:	4b41      	ldr	r3, [pc, #260]	; (8002180 <_ZL12MX_TIM2_Initv+0x138>)
 800207a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800207e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 64;
 8002080:	4b3f      	ldr	r3, [pc, #252]	; (8002180 <_ZL12MX_TIM2_Initv+0x138>)
 8002082:	2240      	movs	r2, #64	; 0x40
 8002084:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002086:	4b3e      	ldr	r3, [pc, #248]	; (8002180 <_ZL12MX_TIM2_Initv+0x138>)
 8002088:	2200      	movs	r2, #0
 800208a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2499;
 800208c:	4b3c      	ldr	r3, [pc, #240]	; (8002180 <_ZL12MX_TIM2_Initv+0x138>)
 800208e:	f640 12c3 	movw	r2, #2499	; 0x9c3
 8002092:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002094:	4b3a      	ldr	r3, [pc, #232]	; (8002180 <_ZL12MX_TIM2_Initv+0x138>)
 8002096:	2200      	movs	r2, #0
 8002098:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800209a:	4b39      	ldr	r3, [pc, #228]	; (8002180 <_ZL12MX_TIM2_Initv+0x138>)
 800209c:	2200      	movs	r2, #0
 800209e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80020a0:	4837      	ldr	r0, [pc, #220]	; (8002180 <_ZL12MX_TIM2_Initv+0x138>)
 80020a2:	f003 fff3 	bl	800608c <HAL_TIM_Base_Init>
 80020a6:	4603      	mov	r3, r0
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	bf14      	ite	ne
 80020ac:	2301      	movne	r3, #1
 80020ae:	2300      	moveq	r3, #0
 80020b0:	b2db      	uxtb	r3, r3
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d001      	beq.n	80020ba <_ZL12MX_TIM2_Initv+0x72>
  {
    Error_Handler();
 80020b6:	f000 fda5 	bl	8002c04 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80020ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80020be:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80020c0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80020c4:	4619      	mov	r1, r3
 80020c6:	482e      	ldr	r0, [pc, #184]	; (8002180 <_ZL12MX_TIM2_Initv+0x138>)
 80020c8:	f004 fb66 	bl	8006798 <HAL_TIM_ConfigClockSource>
 80020cc:	4603      	mov	r3, r0
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	bf14      	ite	ne
 80020d2:	2301      	movne	r3, #1
 80020d4:	2300      	moveq	r3, #0
 80020d6:	b2db      	uxtb	r3, r3
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d001      	beq.n	80020e0 <_ZL12MX_TIM2_Initv+0x98>
  {
    Error_Handler();
 80020dc:	f000 fd92 	bl	8002c04 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80020e0:	4827      	ldr	r0, [pc, #156]	; (8002180 <_ZL12MX_TIM2_Initv+0x138>)
 80020e2:	f004 f885 	bl	80061f0 <HAL_TIM_PWM_Init>
 80020e6:	4603      	mov	r3, r0
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	bf14      	ite	ne
 80020ec:	2301      	movne	r3, #1
 80020ee:	2300      	moveq	r3, #0
 80020f0:	b2db      	uxtb	r3, r3
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d001      	beq.n	80020fa <_ZL12MX_TIM2_Initv+0xb2>
  {
    Error_Handler();
 80020f6:	f000 fd85 	bl	8002c04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020fa:	2300      	movs	r3, #0
 80020fc:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020fe:	2300      	movs	r3, #0
 8002100:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002102:	f107 0320 	add.w	r3, r7, #32
 8002106:	4619      	mov	r1, r3
 8002108:	481d      	ldr	r0, [pc, #116]	; (8002180 <_ZL12MX_TIM2_Initv+0x138>)
 800210a:	f004 ff01 	bl	8006f10 <HAL_TIMEx_MasterConfigSynchronization>
 800210e:	4603      	mov	r3, r0
 8002110:	2b00      	cmp	r3, #0
 8002112:	bf14      	ite	ne
 8002114:	2301      	movne	r3, #1
 8002116:	2300      	moveq	r3, #0
 8002118:	b2db      	uxtb	r3, r3
 800211a:	2b00      	cmp	r3, #0
 800211c:	d001      	beq.n	8002122 <_ZL12MX_TIM2_Initv+0xda>
  {
    Error_Handler();
 800211e:	f000 fd71 	bl	8002c04 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002122:	2360      	movs	r3, #96	; 0x60
 8002124:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002126:	2300      	movs	r3, #0
 8002128:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800212a:	2300      	movs	r3, #0
 800212c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800212e:	2300      	movs	r3, #0
 8002130:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002132:	1d3b      	adds	r3, r7, #4
 8002134:	2200      	movs	r2, #0
 8002136:	4619      	mov	r1, r3
 8002138:	4811      	ldr	r0, [pc, #68]	; (8002180 <_ZL12MX_TIM2_Initv+0x138>)
 800213a:	f004 fa6b 	bl	8006614 <HAL_TIM_PWM_ConfigChannel>
 800213e:	4603      	mov	r3, r0
 8002140:	2b00      	cmp	r3, #0
 8002142:	bf14      	ite	ne
 8002144:	2301      	movne	r3, #1
 8002146:	2300      	moveq	r3, #0
 8002148:	b2db      	uxtb	r3, r3
 800214a:	2b00      	cmp	r3, #0
 800214c:	d001      	beq.n	8002152 <_ZL12MX_TIM2_Initv+0x10a>
  {
    Error_Handler();
 800214e:	f000 fd59 	bl	8002c04 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002152:	1d3b      	adds	r3, r7, #4
 8002154:	2204      	movs	r2, #4
 8002156:	4619      	mov	r1, r3
 8002158:	4809      	ldr	r0, [pc, #36]	; (8002180 <_ZL12MX_TIM2_Initv+0x138>)
 800215a:	f004 fa5b 	bl	8006614 <HAL_TIM_PWM_ConfigChannel>
 800215e:	4603      	mov	r3, r0
 8002160:	2b00      	cmp	r3, #0
 8002162:	bf14      	ite	ne
 8002164:	2301      	movne	r3, #1
 8002166:	2300      	moveq	r3, #0
 8002168:	b2db      	uxtb	r3, r3
 800216a:	2b00      	cmp	r3, #0
 800216c:	d001      	beq.n	8002172 <_ZL12MX_TIM2_Initv+0x12a>
  {
    Error_Handler();
 800216e:	f000 fd49 	bl	8002c04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002172:	4803      	ldr	r0, [pc, #12]	; (8002180 <_ZL12MX_TIM2_Initv+0x138>)
 8002174:	f001 fdd4 	bl	8003d20 <HAL_TIM_MspPostInit>

}
 8002178:	bf00      	nop
 800217a:	3738      	adds	r7, #56	; 0x38
 800217c:	46bd      	mov	sp, r7
 800217e:	bd80      	pop	{r7, pc}
 8002180:	20000140 	.word	0x20000140

08002184 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002188:	4b13      	ldr	r3, [pc, #76]	; (80021d8 <_ZL19MX_USART2_UART_Initv+0x54>)
 800218a:	4a14      	ldr	r2, [pc, #80]	; (80021dc <_ZL19MX_USART2_UART_Initv+0x58>)
 800218c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 57600;
 800218e:	4b12      	ldr	r3, [pc, #72]	; (80021d8 <_ZL19MX_USART2_UART_Initv+0x54>)
 8002190:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8002194:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002196:	4b10      	ldr	r3, [pc, #64]	; (80021d8 <_ZL19MX_USART2_UART_Initv+0x54>)
 8002198:	2200      	movs	r2, #0
 800219a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800219c:	4b0e      	ldr	r3, [pc, #56]	; (80021d8 <_ZL19MX_USART2_UART_Initv+0x54>)
 800219e:	2200      	movs	r2, #0
 80021a0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80021a2:	4b0d      	ldr	r3, [pc, #52]	; (80021d8 <_ZL19MX_USART2_UART_Initv+0x54>)
 80021a4:	2200      	movs	r2, #0
 80021a6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80021a8:	4b0b      	ldr	r3, [pc, #44]	; (80021d8 <_ZL19MX_USART2_UART_Initv+0x54>)
 80021aa:	220c      	movs	r2, #12
 80021ac:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80021ae:	4b0a      	ldr	r3, [pc, #40]	; (80021d8 <_ZL19MX_USART2_UART_Initv+0x54>)
 80021b0:	2200      	movs	r2, #0
 80021b2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80021b4:	4b08      	ldr	r3, [pc, #32]	; (80021d8 <_ZL19MX_USART2_UART_Initv+0x54>)
 80021b6:	2200      	movs	r2, #0
 80021b8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80021ba:	4807      	ldr	r0, [pc, #28]	; (80021d8 <_ZL19MX_USART2_UART_Initv+0x54>)
 80021bc:	f004 ff2a 	bl	8007014 <HAL_UART_Init>
 80021c0:	4603      	mov	r3, r0
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	bf14      	ite	ne
 80021c6:	2301      	movne	r3, #1
 80021c8:	2300      	moveq	r3, #0
 80021ca:	b2db      	uxtb	r3, r3
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d001      	beq.n	80021d4 <_ZL19MX_USART2_UART_Initv+0x50>
  {
    Error_Handler();
 80021d0:	f000 fd18 	bl	8002c04 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80021d4:	bf00      	nop
 80021d6:	bd80      	pop	{r7, pc}
 80021d8:	20000188 	.word	0x20000188
 80021dc:	40004400 	.word	0x40004400

080021e0 <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b082      	sub	sp, #8
 80021e4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80021e6:	2300      	movs	r3, #0
 80021e8:	607b      	str	r3, [r7, #4]
 80021ea:	4b1b      	ldr	r3, [pc, #108]	; (8002258 <_ZL11MX_DMA_Initv+0x78>)
 80021ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ee:	4a1a      	ldr	r2, [pc, #104]	; (8002258 <_ZL11MX_DMA_Initv+0x78>)
 80021f0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80021f4:	6313      	str	r3, [r2, #48]	; 0x30
 80021f6:	4b18      	ldr	r3, [pc, #96]	; (8002258 <_ZL11MX_DMA_Initv+0x78>)
 80021f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021fe:	607b      	str	r3, [r7, #4]
 8002200:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002202:	2300      	movs	r3, #0
 8002204:	603b      	str	r3, [r7, #0]
 8002206:	4b14      	ldr	r3, [pc, #80]	; (8002258 <_ZL11MX_DMA_Initv+0x78>)
 8002208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800220a:	4a13      	ldr	r2, [pc, #76]	; (8002258 <_ZL11MX_DMA_Initv+0x78>)
 800220c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002210:	6313      	str	r3, [r2, #48]	; 0x30
 8002212:	4b11      	ldr	r3, [pc, #68]	; (8002258 <_ZL11MX_DMA_Initv+0x78>)
 8002214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002216:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800221a:	603b      	str	r3, [r7, #0]
 800221c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 800221e:	2200      	movs	r2, #0
 8002220:	2105      	movs	r1, #5
 8002222:	2010      	movs	r0, #16
 8002224:	f002 fcac 	bl	8004b80 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8002228:	2010      	movs	r0, #16
 800222a:	f002 fcc5 	bl	8004bb8 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 800222e:	2200      	movs	r2, #0
 8002230:	2105      	movs	r1, #5
 8002232:	2011      	movs	r0, #17
 8002234:	f002 fca4 	bl	8004b80 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8002238:	2011      	movs	r0, #17
 800223a:	f002 fcbd 	bl	8004bb8 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 800223e:	2200      	movs	r2, #0
 8002240:	2105      	movs	r1, #5
 8002242:	2038      	movs	r0, #56	; 0x38
 8002244:	f002 fc9c 	bl	8004b80 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8002248:	2038      	movs	r0, #56	; 0x38
 800224a:	f002 fcb5 	bl	8004bb8 <HAL_NVIC_EnableIRQ>

}
 800224e:	bf00      	nop
 8002250:	3708      	adds	r7, #8
 8002252:	46bd      	mov	sp, r7
 8002254:	bd80      	pop	{r7, pc}
 8002256:	bf00      	nop
 8002258:	40023800 	.word	0x40023800

0800225c <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b088      	sub	sp, #32
 8002260:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002262:	f107 030c 	add.w	r3, r7, #12
 8002266:	2200      	movs	r2, #0
 8002268:	601a      	str	r2, [r3, #0]
 800226a:	605a      	str	r2, [r3, #4]
 800226c:	609a      	str	r2, [r3, #8]
 800226e:	60da      	str	r2, [r3, #12]
 8002270:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002272:	2300      	movs	r3, #0
 8002274:	60bb      	str	r3, [r7, #8]
 8002276:	4b27      	ldr	r3, [pc, #156]	; (8002314 <_ZL12MX_GPIO_Initv+0xb8>)
 8002278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800227a:	4a26      	ldr	r2, [pc, #152]	; (8002314 <_ZL12MX_GPIO_Initv+0xb8>)
 800227c:	f043 0304 	orr.w	r3, r3, #4
 8002280:	6313      	str	r3, [r2, #48]	; 0x30
 8002282:	4b24      	ldr	r3, [pc, #144]	; (8002314 <_ZL12MX_GPIO_Initv+0xb8>)
 8002284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002286:	f003 0304 	and.w	r3, r3, #4
 800228a:	60bb      	str	r3, [r7, #8]
 800228c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800228e:	2300      	movs	r3, #0
 8002290:	607b      	str	r3, [r7, #4]
 8002292:	4b20      	ldr	r3, [pc, #128]	; (8002314 <_ZL12MX_GPIO_Initv+0xb8>)
 8002294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002296:	4a1f      	ldr	r2, [pc, #124]	; (8002314 <_ZL12MX_GPIO_Initv+0xb8>)
 8002298:	f043 0301 	orr.w	r3, r3, #1
 800229c:	6313      	str	r3, [r2, #48]	; 0x30
 800229e:	4b1d      	ldr	r3, [pc, #116]	; (8002314 <_ZL12MX_GPIO_Initv+0xb8>)
 80022a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022a2:	f003 0301 	and.w	r3, r3, #1
 80022a6:	607b      	str	r3, [r7, #4]
 80022a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80022aa:	2300      	movs	r3, #0
 80022ac:	603b      	str	r3, [r7, #0]
 80022ae:	4b19      	ldr	r3, [pc, #100]	; (8002314 <_ZL12MX_GPIO_Initv+0xb8>)
 80022b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022b2:	4a18      	ldr	r2, [pc, #96]	; (8002314 <_ZL12MX_GPIO_Initv+0xb8>)
 80022b4:	f043 0302 	orr.w	r3, r3, #2
 80022b8:	6313      	str	r3, [r2, #48]	; 0x30
 80022ba:	4b16      	ldr	r3, [pc, #88]	; (8002314 <_ZL12MX_GPIO_Initv+0xb8>)
 80022bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022be:	f003 0302 	and.w	r3, r3, #2
 80022c2:	603b      	str	r3, [r7, #0]
 80022c4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80022c6:	2200      	movs	r2, #0
 80022c8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80022cc:	4812      	ldr	r0, [pc, #72]	; (8002318 <_ZL12MX_GPIO_Initv+0xbc>)
 80022ce:	f003 fa1f 	bl	8005710 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80022d2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80022d6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022d8:	2301      	movs	r3, #1
 80022da:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022dc:	2300      	movs	r3, #0
 80022de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022e0:	2300      	movs	r3, #0
 80022e2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80022e4:	f107 030c 	add.w	r3, r7, #12
 80022e8:	4619      	mov	r1, r3
 80022ea:	480b      	ldr	r0, [pc, #44]	; (8002318 <_ZL12MX_GPIO_Initv+0xbc>)
 80022ec:	f003 f874 	bl	80053d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : Push_Button_Pin */
  GPIO_InitStruct.Pin = Push_Button_Pin;
 80022f0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80022f4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80022f6:	2300      	movs	r3, #0
 80022f8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022fa:	2300      	movs	r3, #0
 80022fc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(Push_Button_GPIO_Port, &GPIO_InitStruct);
 80022fe:	f107 030c 	add.w	r3, r7, #12
 8002302:	4619      	mov	r1, r3
 8002304:	4805      	ldr	r0, [pc, #20]	; (800231c <_ZL12MX_GPIO_Initv+0xc0>)
 8002306:	f003 f867 	bl	80053d8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800230a:	bf00      	nop
 800230c:	3720      	adds	r7, #32
 800230e:	46bd      	mov	sp, r7
 8002310:	bd80      	pop	{r7, pc}
 8002312:	bf00      	nop
 8002314:	40023800 	.word	0x40023800
 8002318:	40020800 	.word	0x40020800
 800231c:	40020000 	.word	0x40020000

08002320 <_Z28get_servo_pos_liveExpressionv>:

/* USER CODE BEGIN 4 */ //here
void get_servo_pos_liveExpression(){
 8002320:	b480      	push	{r7}
 8002322:	af00      	add	r7, sp, #0
		gripper =  TIM2->CCR1;
 8002324:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002328:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800232a:	461a      	mov	r2, r3
 800232c:	4b06      	ldr	r3, [pc, #24]	; (8002348 <_Z28get_servo_pos_liveExpressionv+0x28>)
 800232e:	601a      	str	r2, [r3, #0]
		art = TIM2->CCR2;
 8002330:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002334:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002336:	461a      	mov	r2, r3
 8002338:	4b04      	ldr	r3, [pc, #16]	; (800234c <_Z28get_servo_pos_liveExpressionv+0x2c>)
 800233a:	601a      	str	r2, [r3, #0]
}
 800233c:	bf00      	nop
 800233e:	46bd      	mov	sp, r7
 8002340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002344:	4770      	bx	lr
 8002346:	bf00      	nop
 8002348:	200002c4 	.word	0x200002c4
 800234c:	200002c8 	.word	0x200002c8

08002350 <_Z10pwm_to_angi>:
float pwm_to_ang(int n){
 8002350:	b580      	push	{r7, lr}
 8002352:	b084      	sub	sp, #16
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
	float out = 0;
 8002358:	f04f 0300 	mov.w	r3, #0
 800235c:	60fb      	str	r3, [r7, #12]
	if (n == 0){
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	2b00      	cmp	r3, #0
 8002362:	d11b      	bne.n	800239c <_Z10pwm_to_angi+0x4c>
		out = (180.0/240.0)*((float)TIM2->CCR1 - 60);
 8002364:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002368:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800236a:	ee07 3a90 	vmov	s15, r3
 800236e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002372:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8002400 <_Z10pwm_to_angi+0xb0>
 8002376:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800237a:	ee17 0a90 	vmov	r0, s15
 800237e:	f7fe fa15 	bl	80007ac <__aeabi_f2d>
 8002382:	f04f 0200 	mov.w	r2, #0
 8002386:	4b1f      	ldr	r3, [pc, #124]	; (8002404 <_Z10pwm_to_angi+0xb4>)
 8002388:	f7fd ff82 	bl	8000290 <__aeabi_dmul>
 800238c:	4602      	mov	r2, r0
 800238e:	460b      	mov	r3, r1
 8002390:	4610      	mov	r0, r2
 8002392:	4619      	mov	r1, r3
 8002394:	f7fe fa62 	bl	800085c <__aeabi_d2f>
 8002398:	4603      	mov	r3, r0
 800239a:	60fb      	str	r3, [r7, #12]
	}
	if(n == 1){
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2b01      	cmp	r3, #1
 80023a0:	d11b      	bne.n	80023da <_Z10pwm_to_angi+0x8a>
		out = (180.0/240.0)*((float)TIM2->CCR2 - 60);
 80023a2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80023a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023a8:	ee07 3a90 	vmov	s15, r3
 80023ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80023b0:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8002400 <_Z10pwm_to_angi+0xb0>
 80023b4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80023b8:	ee17 0a90 	vmov	r0, s15
 80023bc:	f7fe f9f6 	bl	80007ac <__aeabi_f2d>
 80023c0:	f04f 0200 	mov.w	r2, #0
 80023c4:	4b0f      	ldr	r3, [pc, #60]	; (8002404 <_Z10pwm_to_angi+0xb4>)
 80023c6:	f7fd ff63 	bl	8000290 <__aeabi_dmul>
 80023ca:	4602      	mov	r2, r0
 80023cc:	460b      	mov	r3, r1
 80023ce:	4610      	mov	r0, r2
 80023d0:	4619      	mov	r1, r3
 80023d2:	f7fe fa43 	bl	800085c <__aeabi_d2f>
 80023d6:	4603      	mov	r3, r0
 80023d8:	60fb      	str	r3, [r7, #12]
	}
	return out < 0 ? 0 : out;
 80023da:	edd7 7a03 	vldr	s15, [r7, #12]
 80023de:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80023e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023e6:	d502      	bpl.n	80023ee <_Z10pwm_to_angi+0x9e>
 80023e8:	f04f 0300 	mov.w	r3, #0
 80023ec:	e000      	b.n	80023f0 <_Z10pwm_to_angi+0xa0>
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	ee07 3a90 	vmov	s15, r3
}
 80023f4:	eeb0 0a67 	vmov.f32	s0, s15
 80023f8:	3710      	adds	r7, #16
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bd80      	pop	{r7, pc}
 80023fe:	bf00      	nop
 8002400:	42700000 	.word	0x42700000
 8002404:	3fe80000 	.word	0x3fe80000

08002408 <_Z10ang_to_pwmi>:
float ang_to_pwm(int ang){
 8002408:	b580      	push	{r7, lr}
 800240a:	b082      	sub	sp, #8
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
	return ang*(240.0/180.0)+60;
 8002410:	6878      	ldr	r0, [r7, #4]
 8002412:	f7fe f9b9 	bl	8000788 <__aeabi_i2d>
 8002416:	a30f      	add	r3, pc, #60	; (adr r3, 8002454 <_Z10ang_to_pwmi+0x4c>)
 8002418:	e9d3 2300 	ldrd	r2, r3, [r3]
 800241c:	f7fd ff38 	bl	8000290 <__aeabi_dmul>
 8002420:	4602      	mov	r2, r0
 8002422:	460b      	mov	r3, r1
 8002424:	4610      	mov	r0, r2
 8002426:	4619      	mov	r1, r3
 8002428:	f04f 0200 	mov.w	r2, #0
 800242c:	4b08      	ldr	r3, [pc, #32]	; (8002450 <_Z10ang_to_pwmi+0x48>)
 800242e:	f7fe f85f 	bl	80004f0 <__adddf3>
 8002432:	4602      	mov	r2, r0
 8002434:	460b      	mov	r3, r1
 8002436:	4610      	mov	r0, r2
 8002438:	4619      	mov	r1, r3
 800243a:	f7fe fa0f 	bl	800085c <__aeabi_d2f>
 800243e:	4603      	mov	r3, r0
 8002440:	ee07 3a90 	vmov	s15, r3

}
 8002444:	eeb0 0a67 	vmov.f32	s0, s15
 8002448:	3708      	adds	r7, #8
 800244a:	46bd      	mov	sp, r7
 800244c:	bd80      	pop	{r7, pc}
 800244e:	bf00      	nop
 8002450:	404e0000 	.word	0x404e0000
 8002454:	55555555 	.word	0x55555555
 8002458:	3ff55555 	.word	0x3ff55555

0800245c <_Z13move_servo_toii>:
void move_servo_to(int n, int pwm){
 800245c:	b480      	push	{r7}
 800245e:	b083      	sub	sp, #12
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
 8002464:	6039      	str	r1, [r7, #0]
	if (n == 0){
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	2b00      	cmp	r3, #0
 800246a:	d104      	bne.n	8002476 <_Z13move_servo_toii+0x1a>
		TIM2->CCR1 = pwm;
 800246c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	6353      	str	r3, [r2, #52]	; 0x34
	}
	else if(n == 1){
		TIM2->CCR2 = pwm;
	}
}
 8002474:	e006      	b.n	8002484 <_Z13move_servo_toii+0x28>
	else if(n == 1){
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	2b01      	cmp	r3, #1
 800247a:	d103      	bne.n	8002484 <_Z13move_servo_toii+0x28>
		TIM2->CCR2 = pwm;
 800247c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	6393      	str	r3, [r2, #56]	; 0x38
}
 8002484:	bf00      	nop
 8002486:	370c      	adds	r7, #12
 8002488:	46bd      	mov	sp, r7
 800248a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248e:	4770      	bx	lr

08002490 <_Z13move_servo_fwi>:
void move_servo_fw(int n){
 8002490:	b480      	push	{r7}
 8002492:	b083      	sub	sp, #12
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
	if (n == 0){
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2b00      	cmp	r3, #0
 800249c:	d107      	bne.n	80024ae <_Z13move_servo_fwi+0x1e>
		TIM2->CCR1 += 2;
 800249e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80024a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024a4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80024a8:	3302      	adds	r3, #2
 80024aa:	6353      	str	r3, [r2, #52]	; 0x34
	}
	else if(n == 1){
		TIM2->CCR2 += 2;
	}
}
 80024ac:	e009      	b.n	80024c2 <_Z13move_servo_fwi+0x32>
	else if(n == 1){
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	2b01      	cmp	r3, #1
 80024b2:	d106      	bne.n	80024c2 <_Z13move_servo_fwi+0x32>
		TIM2->CCR2 += 2;
 80024b4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80024b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024ba:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80024be:	3302      	adds	r3, #2
 80024c0:	6393      	str	r3, [r2, #56]	; 0x38
}
 80024c2:	bf00      	nop
 80024c4:	370c      	adds	r7, #12
 80024c6:	46bd      	mov	sp, r7
 80024c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024cc:	4770      	bx	lr

080024ce <_Z13move_servo_bwi>:
void move_servo_bw(int n){
 80024ce:	b480      	push	{r7}
 80024d0:	b083      	sub	sp, #12
 80024d2:	af00      	add	r7, sp, #0
 80024d4:	6078      	str	r0, [r7, #4]
	if (n == 0){
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d107      	bne.n	80024ec <_Z13move_servo_bwi+0x1e>
		TIM2->CCR1 -= 2;
 80024dc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80024e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024e2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80024e6:	3b02      	subs	r3, #2
 80024e8:	6353      	str	r3, [r2, #52]	; 0x34
	}
	else if(n == 1){
		TIM2->CCR2 -= 2;
	}
}
 80024ea:	e009      	b.n	8002500 <_Z13move_servo_bwi+0x32>
	else if(n == 1){
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2b01      	cmp	r3, #1
 80024f0:	d106      	bne.n	8002500 <_Z13move_servo_bwi+0x32>
		TIM2->CCR2 -= 2;
 80024f2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80024f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024f8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80024fc:	3b02      	subs	r3, #2
 80024fe:	6393      	str	r3, [r2, #56]	; 0x38
}
 8002500:	bf00      	nop
 8002502:	370c      	adds	r7, #12
 8002504:	46bd      	mov	sp, r7
 8002506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250a:	4770      	bx	lr

0800250c <HAL_UART_TxCpltCallback>:

// ROS serial functions
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 800250c:	b580      	push	{r7, lr}
 800250e:	b082      	sub	sp, #8
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
  nh.getHardware()->flush();
 8002514:	4805      	ldr	r0, [pc, #20]	; (800252c <HAL_UART_TxCpltCallback+0x20>)
 8002516:	f000 fcb9 	bl	8002e8c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 800251a:	4603      	mov	r3, r0
 800251c:	4618      	mov	r0, r3
 800251e:	f7ff fa93 	bl	8001a48 <_ZN13STM32Hardware5flushEv>
}
 8002522:	bf00      	nop
 8002524:	3708      	adds	r7, #8
 8002526:	46bd      	mov	sp, r7
 8002528:	bd80      	pop	{r7, pc}
 800252a:	bf00      	nop
 800252c:	200002d8 	.word	0x200002d8

08002530 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8002530:	b580      	push	{r7, lr}
 8002532:	b082      	sub	sp, #8
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
  nh.getHardware()->reset_rbuf();
 8002538:	4805      	ldr	r0, [pc, #20]	; (8002550 <HAL_UART_RxCpltCallback+0x20>)
 800253a:	f000 fca7 	bl	8002e8c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 800253e:	4603      	mov	r3, r0
 8002540:	4618      	mov	r0, r3
 8002542:	f7ff fa42 	bl	80019ca <_ZN13STM32Hardware10reset_rbufEv>
}
 8002546:	bf00      	nop
 8002548:	3708      	adds	r7, #8
 800254a:	46bd      	mov	sp, r7
 800254c:	bd80      	pop	{r7, pc}
 800254e:	bf00      	nop
 8002550:	200002d8 	.word	0x200002d8

08002554 <_Z5setupv>:

void setup(void)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	af00      	add	r7, sp, #0
  nh.initNode();
 8002558:	4808      	ldr	r0, [pc, #32]	; (800257c <_Z5setupv+0x28>)
 800255a:	f000 fca3 	bl	8002ea4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>
  nh.advertise(chatter);
 800255e:	4908      	ldr	r1, [pc, #32]	; (8002580 <_Z5setupv+0x2c>)
 8002560:	4806      	ldr	r0, [pc, #24]	; (800257c <_Z5setupv+0x28>)
 8002562:	f000 fcbc 	bl	8002ede <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>
  nh.advertise(response);
 8002566:	4907      	ldr	r1, [pc, #28]	; (8002584 <_Z5setupv+0x30>)
 8002568:	4804      	ldr	r0, [pc, #16]	; (800257c <_Z5setupv+0x28>)
 800256a:	f000 fcb8 	bl	8002ede <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>
  nh.subscribe(stm32_comms);
 800256e:	4906      	ldr	r1, [pc, #24]	; (8002588 <_Z5setupv+0x34>)
 8002570:	4802      	ldr	r0, [pc, #8]	; (800257c <_Z5setupv+0x28>)
 8002572:	f000 fce4 	bl	8002f3e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E>
}
 8002576:	bf00      	nop
 8002578:	bd80      	pop	{r7, pc}
 800257a:	bf00      	nop
 800257c:	200002d8 	.word	0x200002d8
 8002580:	20000c1c 	.word	0x20000c1c
 8002584:	20000c84 	.word	0x20000c84
 8002588:	20000c30 	.word	0x20000c30

0800258c <_Z4loopv>:

void loop(void)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b082      	sub	sp, #8
 8002590:	af00      	add	r7, sp, #0
  const char* str = hello.c_str();
 8002592:	4809      	ldr	r0, [pc, #36]	; (80025b8 <_Z4loopv+0x2c>)
 8002594:	f008 ff94 	bl	800b4c0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 8002598:	6078      	str	r0, [r7, #4]
  str_msg.data = str;
 800259a:	4a08      	ldr	r2, [pc, #32]	; (80025bc <_Z4loopv+0x30>)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6053      	str	r3, [r2, #4]
  chatter.publish(&str_msg);
 80025a0:	4906      	ldr	r1, [pc, #24]	; (80025bc <_Z4loopv+0x30>)
 80025a2:	4807      	ldr	r0, [pc, #28]	; (80025c0 <_Z4loopv+0x34>)
 80025a4:	f7ff f9b7 	bl	8001916 <_ZN3ros9Publisher7publishEPKNS_3MsgE>
  nh.spinOnce();
 80025a8:	4806      	ldr	r0, [pc, #24]	; (80025c4 <_Z4loopv+0x38>)
 80025aa:	f000 fcf3 	bl	8002f94 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>
}
 80025ae:	bf00      	nop
 80025b0:	3708      	adds	r7, #8
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bd80      	pop	{r7, pc}
 80025b6:	bf00      	nop
 80025b8:	20000c4c 	.word	0x20000c4c
 80025bc:	20000c14 	.word	0x20000c14
 80025c0:	20000c1c 	.word	0x20000c1c
 80025c4:	200002d8 	.word	0x200002d8

080025c8 <_Z15response_methodv>:

void response_method(void)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b082      	sub	sp, #8
 80025cc:	af00      	add	r7, sp, #0
	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80025ce:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80025d2:	480a      	ldr	r0, [pc, #40]	; (80025fc <_Z15response_methodv+0x34>)
 80025d4:	f003 f8b5 	bl	8005742 <HAL_GPIO_TogglePin>
	  const char* resp = global_response.c_str();
 80025d8:	4809      	ldr	r0, [pc, #36]	; (8002600 <_Z15response_methodv+0x38>)
 80025da:	f008 ff71 	bl	800b4c0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 80025de:	6078      	str	r0, [r7, #4]
	  response_msg.data = resp;
 80025e0:	4a08      	ldr	r2, [pc, #32]	; (8002604 <_Z15response_methodv+0x3c>)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6053      	str	r3, [r2, #4]
	  response.publish(&response_msg);
 80025e6:	4907      	ldr	r1, [pc, #28]	; (8002604 <_Z15response_methodv+0x3c>)
 80025e8:	4807      	ldr	r0, [pc, #28]	; (8002608 <_Z15response_methodv+0x40>)
 80025ea:	f7ff f994 	bl	8001916 <_ZN3ros9Publisher7publishEPKNS_3MsgE>
	  nh.spinOnce();
 80025ee:	4807      	ldr	r0, [pc, #28]	; (800260c <_Z15response_methodv+0x44>)
 80025f0:	f000 fcd0 	bl	8002f94 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>
}
 80025f4:	bf00      	nop
 80025f6:	3708      	adds	r7, #8
 80025f8:	46bd      	mov	sp, r7
 80025fa:	bd80      	pop	{r7, pc}
 80025fc:	40020800 	.word	0x40020800
 8002600:	20000c98 	.word	0x20000c98
 8002604:	20000c7c 	.word	0x20000c7c
 8002608:	20000c84 	.word	0x20000c84
 800260c:	200002d8 	.word	0x200002d8

08002610 <_Z11str_act_msgRKN8std_msgs6StringE>:

void str_act_msg(const std_msgs::String& msg){
 8002610:	b580      	push	{r7, lr}
 8002612:	b082      	sub	sp, #8
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
	hello = msg.data;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	685b      	ldr	r3, [r3, #4]
 800261c:	4619      	mov	r1, r3
 800261e:	4806      	ldr	r0, [pc, #24]	; (8002638 <_Z11str_act_msgRKN8std_msgs6StringE+0x28>)
 8002620:	f008 fee9 	bl	800b3f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
	global_msg = msg.data;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	685b      	ldr	r3, [r3, #4]
 8002628:	4619      	mov	r1, r3
 800262a:	4804      	ldr	r0, [pc, #16]	; (800263c <_Z11str_act_msgRKN8std_msgs6StringE+0x2c>)
 800262c:	f008 fee3 	bl	800b3f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
}
 8002630:	bf00      	nop
 8002632:	3708      	adds	r7, #8
 8002634:	46bd      	mov	sp, r7
 8002636:	bd80      	pop	{r7, pc}
 8002638:	20000c4c 	.word	0x20000c4c
 800263c:	20000c64 	.word	0x20000c64

08002640 <_Z12StartTaskADCPv>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartTaskADC */
void StartTaskADC(void *argument)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b082      	sub	sp, #8
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */ //here
  /* Infinite loop */
  for(;;)
  {
	  if (gripper_instruction_flag != 0 || art_instruction_flag !=0){
 8002648:	4b0a      	ldr	r3, [pc, #40]	; (8002674 <_Z12StartTaskADCPv+0x34>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	2b00      	cmp	r3, #0
 800264e:	d103      	bne.n	8002658 <_Z12StartTaskADCPv+0x18>
 8002650:	4b09      	ldr	r3, [pc, #36]	; (8002678 <_Z12StartTaskADCPv+0x38>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	2b00      	cmp	r3, #0
 8002656:	d008      	beq.n	800266a <_Z12StartTaskADCPv+0x2a>
		  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_result, adc_channel_count);
 8002658:	2202      	movs	r2, #2
 800265a:	4908      	ldr	r1, [pc, #32]	; (800267c <_Z12StartTaskADCPv+0x3c>)
 800265c:	4808      	ldr	r0, [pc, #32]	; (8002680 <_Z12StartTaskADCPv+0x40>)
 800265e:	f001 fe29 	bl	80042b4 <HAL_ADC_Start_DMA>
		  osDelay(100);
 8002662:	2064      	movs	r0, #100	; 0x64
 8002664:	f005 ffd2 	bl	800860c <osDelay>
 8002668:	e003      	b.n	8002672 <_Z12StartTaskADCPv+0x32>
	  }
	  else{
		  osDelay(500);
 800266a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800266e:	f005 ffcd 	bl	800860c <osDelay>
	  if (gripper_instruction_flag != 0 || art_instruction_flag !=0){
 8002672:	e7e9      	b.n	8002648 <_Z12StartTaskADCPv+0x8>
 8002674:	200002cc 	.word	0x200002cc
 8002678:	200002d0 	.word	0x200002d0
 800267c:	200002b8 	.word	0x200002b8
 8002680:	20000098 	.word	0x20000098

08002684 <_Z20StartGripperOpenTaskPv>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartGripperOpenTask */
void StartGripperOpenTask(void *argument)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b082      	sub	sp, #8
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartGripperOpenTask */
  /* Infinite loop */
  for(;;)
	{
		if (!emergency_stop && gripper_instruction_flag == 1){
 800268c:	4b17      	ldr	r3, [pc, #92]	; (80026ec <_Z20StartGripperOpenTaskPv+0x68>)
 800268e:	781b      	ldrb	r3, [r3, #0]
 8002690:	f083 0301 	eor.w	r3, r3, #1
 8002694:	b2db      	uxtb	r3, r3
 8002696:	2b00      	cmp	r3, #0
 8002698:	d024      	beq.n	80026e4 <_Z20StartGripperOpenTaskPv+0x60>
 800269a:	4b15      	ldr	r3, [pc, #84]	; (80026f0 <_Z20StartGripperOpenTaskPv+0x6c>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	2b01      	cmp	r3, #1
 80026a0:	d120      	bne.n	80026e4 <_Z20StartGripperOpenTaskPv+0x60>
			do{
				move_servo_bw(0);
 80026a2:	2000      	movs	r0, #0
 80026a4:	f7ff ff13 	bl	80024ce <_Z13move_servo_bwi>
				osDelay(50);
 80026a8:	2032      	movs	r0, #50	; 0x32
 80026aa:	f005 ffaf 	bl	800860c <osDelay>
				ang[0] = pwm_to_ang(0);
 80026ae:	2000      	movs	r0, #0
 80026b0:	f7ff fe4e 	bl	8002350 <_Z10pwm_to_angi>
 80026b4:	eef0 7a40 	vmov.f32	s15, s0
 80026b8:	4b0e      	ldr	r3, [pc, #56]	; (80026f4 <_Z20StartGripperOpenTaskPv+0x70>)
 80026ba:	edc3 7a00 	vstr	s15, [r3]
			}
			while(ang[0] > GRIPPER_OPENED_ANG);
 80026be:	4b0d      	ldr	r3, [pc, #52]	; (80026f4 <_Z20StartGripperOpenTaskPv+0x70>)
 80026c0:	edd3 7a00 	vldr	s15, [r3]
 80026c4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80026c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026cc:	dd00      	ble.n	80026d0 <_Z20StartGripperOpenTaskPv+0x4c>
			do{
 80026ce:	e7e8      	b.n	80026a2 <_Z20StartGripperOpenTaskPv+0x1e>
				gripper_instruction_flag = 0;
 80026d0:	4b07      	ldr	r3, [pc, #28]	; (80026f0 <_Z20StartGripperOpenTaskPv+0x6c>)
 80026d2:	2200      	movs	r2, #0
 80026d4:	601a      	str	r2, [r3, #0]
				global_response = "abierto";
 80026d6:	4908      	ldr	r1, [pc, #32]	; (80026f8 <_Z20StartGripperOpenTaskPv+0x74>)
 80026d8:	4808      	ldr	r0, [pc, #32]	; (80026fc <_Z20StartGripperOpenTaskPv+0x78>)
 80026da:	f008 fe8c 	bl	800b3f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
				response_method();
 80026de:	f7ff ff73 	bl	80025c8 <_Z15response_methodv>
 80026e2:	e002      	b.n	80026ea <_Z20StartGripperOpenTaskPv+0x66>
		}
		else{
		  osDelay(200);
 80026e4:	20c8      	movs	r0, #200	; 0xc8
 80026e6:	f005 ff91 	bl	800860c <osDelay>
		if (!emergency_stop && gripper_instruction_flag == 1){
 80026ea:	e7cf      	b.n	800268c <_Z20StartGripperOpenTaskPv+0x8>
 80026ec:	200002d5 	.word	0x200002d5
 80026f0:	200002cc 	.word	0x200002cc
 80026f4:	200002b0 	.word	0x200002b0
 80026f8:	0800c23c 	.word	0x0800c23c
 80026fc:	20000c98 	.word	0x20000c98

08002700 <_Z21StartGripperCloseTaskPv>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartGripperCloseTask */
void StartGripperCloseTask(void *argument)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b082      	sub	sp, #8
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartGripperCloseTask */
  /* Infinite loop */
  for(;;)
  {
	if (!emergency_stop && gripper_instruction_flag == 2){
 8002708:	4b26      	ldr	r3, [pc, #152]	; (80027a4 <_Z21StartGripperCloseTaskPv+0xa4>)
 800270a:	781b      	ldrb	r3, [r3, #0]
 800270c:	f083 0301 	eor.w	r3, r3, #1
 8002710:	b2db      	uxtb	r3, r3
 8002712:	2b00      	cmp	r3, #0
 8002714:	d042      	beq.n	800279c <_Z21StartGripperCloseTaskPv+0x9c>
 8002716:	4b24      	ldr	r3, [pc, #144]	; (80027a8 <_Z21StartGripperCloseTaskPv+0xa8>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	2b02      	cmp	r3, #2
 800271c:	d13e      	bne.n	800279c <_Z21StartGripperCloseTaskPv+0x9c>
			do{
				move_servo_fw(0);
 800271e:	2000      	movs	r0, #0
 8002720:	f7ff feb6 	bl	8002490 <_Z13move_servo_fwi>
				osDelay(50);
 8002724:	2032      	movs	r0, #50	; 0x32
 8002726:	f005 ff71 	bl	800860c <osDelay>
				ang[0] = pwm_to_ang(0);
 800272a:	2000      	movs	r0, #0
 800272c:	f7ff fe10 	bl	8002350 <_Z10pwm_to_angi>
 8002730:	eef0 7a40 	vmov.f32	s15, s0
 8002734:	4b1d      	ldr	r3, [pc, #116]	; (80027ac <_Z21StartGripperCloseTaskPv+0xac>)
 8002736:	edc3 7a00 	vstr	s15, [r3]
				if (button_pressed){
 800273a:	4b1d      	ldr	r3, [pc, #116]	; (80027b0 <_Z21StartGripperCloseTaskPv+0xb0>)
 800273c:	781b      	ldrb	r3, [r3, #0]
 800273e:	2b00      	cmp	r3, #0
 8002740:	d004      	beq.n	800274c <_Z21StartGripperCloseTaskPv+0x4c>
					global_response = "agarrado";
 8002742:	491c      	ldr	r1, [pc, #112]	; (80027b4 <_Z21StartGripperCloseTaskPv+0xb4>)
 8002744:	481c      	ldr	r0, [pc, #112]	; (80027b8 <_Z21StartGripperCloseTaskPv+0xb8>)
 8002746:	f008 fe56 	bl	800b3f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
					break;
 800274a:	e016      	b.n	800277a <_Z21StartGripperCloseTaskPv+0x7a>
				}
			}
			while(ang[0] < GRIPPER_CLOSED_ANG && !button_pressed);
 800274c:	4b17      	ldr	r3, [pc, #92]	; (80027ac <_Z21StartGripperCloseTaskPv+0xac>)
 800274e:	edd3 7a00 	vldr	s15, [r3]
 8002752:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 80027bc <_Z21StartGripperCloseTaskPv+0xbc>
 8002756:	eef4 7ac7 	vcmpe.f32	s15, s14
 800275a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800275e:	bf4c      	ite	mi
 8002760:	2301      	movmi	r3, #1
 8002762:	2300      	movpl	r3, #0
 8002764:	b2db      	uxtb	r3, r3
 8002766:	f083 0301 	eor.w	r3, r3, #1
 800276a:	b2db      	uxtb	r3, r3
 800276c:	2b00      	cmp	r3, #0
 800276e:	d104      	bne.n	800277a <_Z21StartGripperCloseTaskPv+0x7a>
 8002770:	4b0f      	ldr	r3, [pc, #60]	; (80027b0 <_Z21StartGripperCloseTaskPv+0xb0>)
 8002772:	781b      	ldrb	r3, [r3, #0]
 8002774:	2b00      	cmp	r3, #0
 8002776:	d100      	bne.n	800277a <_Z21StartGripperCloseTaskPv+0x7a>
			do{
 8002778:	e7d1      	b.n	800271e <_Z21StartGripperCloseTaskPv+0x1e>
				gripper_instruction_flag = 0;
 800277a:	4b0b      	ldr	r3, [pc, #44]	; (80027a8 <_Z21StartGripperCloseTaskPv+0xa8>)
 800277c:	2200      	movs	r2, #0
 800277e:	601a      	str	r2, [r3, #0]
				if (!button_pressed){
 8002780:	4b0b      	ldr	r3, [pc, #44]	; (80027b0 <_Z21StartGripperCloseTaskPv+0xb0>)
 8002782:	781b      	ldrb	r3, [r3, #0]
 8002784:	f083 0301 	eor.w	r3, r3, #1
 8002788:	b2db      	uxtb	r3, r3
 800278a:	2b00      	cmp	r3, #0
 800278c:	d003      	beq.n	8002796 <_Z21StartGripperCloseTaskPv+0x96>
					global_response = "cerrado";
 800278e:	490c      	ldr	r1, [pc, #48]	; (80027c0 <_Z21StartGripperCloseTaskPv+0xc0>)
 8002790:	4809      	ldr	r0, [pc, #36]	; (80027b8 <_Z21StartGripperCloseTaskPv+0xb8>)
 8002792:	f008 fe30 	bl	800b3f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
				}
				response_method();
 8002796:	f7ff ff17 	bl	80025c8 <_Z15response_methodv>
 800279a:	e002      	b.n	80027a2 <_Z21StartGripperCloseTaskPv+0xa2>
		}
		else{
		  osDelay(200);
 800279c:	20c8      	movs	r0, #200	; 0xc8
 800279e:	f005 ff35 	bl	800860c <osDelay>
	if (!emergency_stop && gripper_instruction_flag == 2){
 80027a2:	e7b1      	b.n	8002708 <_Z21StartGripperCloseTaskPv+0x8>
 80027a4:	200002d5 	.word	0x200002d5
 80027a8:	200002cc 	.word	0x200002cc
 80027ac:	200002b0 	.word	0x200002b0
 80027b0:	200002d4 	.word	0x200002d4
 80027b4:	0800c244 	.word	0x0800c244
 80027b8:	20000c98 	.word	0x20000c98
 80027bc:	429c0000 	.word	0x429c0000
 80027c0:	0800c250 	.word	0x0800c250

080027c4 <_Z20StartGripperGoToTaskPv>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartGripperGoToTask */
void StartGripperGoToTask(void *argument)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b094      	sub	sp, #80	; 0x50
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartGripperGoToTask */
  /* Infinite loop */
  for(;;)
  {
	  if (!emergency_stop && gripper_instruction_flag == 3){
 80027cc:	4b2e      	ldr	r3, [pc, #184]	; (8002888 <_Z20StartGripperGoToTaskPv+0xc4>)
 80027ce:	781b      	ldrb	r3, [r3, #0]
 80027d0:	f083 0301 	eor.w	r3, r3, #1
 80027d4:	b2db      	uxtb	r3, r3
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d052      	beq.n	8002880 <_Z20StartGripperGoToTaskPv+0xbc>
 80027da:	4b2c      	ldr	r3, [pc, #176]	; (800288c <_Z20StartGripperGoToTaskPv+0xc8>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	2b03      	cmp	r3, #3
 80027e0:	d14e      	bne.n	8002880 <_Z20StartGripperGoToTaskPv+0xbc>
			move_servo_to(0, ang_to_pwm(gripper_go_to));
 80027e2:	4b2b      	ldr	r3, [pc, #172]	; (8002890 <_Z20StartGripperGoToTaskPv+0xcc>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	4618      	mov	r0, r3
 80027e8:	f7ff fe0e 	bl	8002408 <_Z10ang_to_pwmi>
 80027ec:	eef0 7a40 	vmov.f32	s15, s0
 80027f0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80027f4:	ee17 1a90 	vmov	r1, s15
 80027f8:	2000      	movs	r0, #0
 80027fa:	f7ff fe2f 	bl	800245c <_Z13move_servo_toii>
			osDelay(500);
 80027fe:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002802:	f005 ff03 	bl	800860c <osDelay>
			ang[0] = pwm_to_ang(0);
 8002806:	2000      	movs	r0, #0
 8002808:	f7ff fda2 	bl	8002350 <_Z10pwm_to_angi>
 800280c:	eef0 7a40 	vmov.f32	s15, s0
 8002810:	4b20      	ldr	r3, [pc, #128]	; (8002894 <_Z20StartGripperGoToTaskPv+0xd0>)
 8002812:	edc3 7a00 	vstr	s15, [r3]
			gripper_instruction_flag = 0;
 8002816:	4b1d      	ldr	r3, [pc, #116]	; (800288c <_Z20StartGripperGoToTaskPv+0xc8>)
 8002818:	2200      	movs	r2, #0
 800281a:	601a      	str	r2, [r3, #0]
			global_response = "angulo gripper = " + std::to_string(ang[0]) + "°";
 800281c:	4b1d      	ldr	r3, [pc, #116]	; (8002894 <_Z20StartGripperGoToTaskPv+0xd0>)
 800281e:	edd3 7a00 	vldr	s15, [r3]
 8002822:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002826:	eeb0 0a67 	vmov.f32	s0, s15
 800282a:	4618      	mov	r0, r3
 800282c:	f7ff fa6e 	bl	8001d0c <_ZNSt7__cxx119to_stringEf>
 8002830:	f107 0320 	add.w	r3, r7, #32
 8002834:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002838:	4917      	ldr	r1, [pc, #92]	; (8002898 <_Z20StartGripperGoToTaskPv+0xd4>)
 800283a:	4618      	mov	r0, r3
 800283c:	f000 fd83 	bl	8003346 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_OS8_>
 8002840:	f107 0308 	add.w	r3, r7, #8
 8002844:	f107 0120 	add.w	r1, r7, #32
 8002848:	4a14      	ldr	r2, [pc, #80]	; (800289c <_Z20StartGripperGoToTaskPv+0xd8>)
 800284a:	4618      	mov	r0, r3
 800284c:	f000 fd93 	bl	8003376 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>
 8002850:	f107 0308 	add.w	r3, r7, #8
 8002854:	4619      	mov	r1, r3
 8002856:	4812      	ldr	r0, [pc, #72]	; (80028a0 <_Z20StartGripperGoToTaskPv+0xdc>)
 8002858:	f008 fd14 	bl	800b284 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 800285c:	f107 0308 	add.w	r3, r7, #8
 8002860:	4618      	mov	r0, r3
 8002862:	f008 fd09 	bl	800b278 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8002866:	f107 0320 	add.w	r3, r7, #32
 800286a:	4618      	mov	r0, r3
 800286c:	f008 fd04 	bl	800b278 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8002870:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002874:	4618      	mov	r0, r3
 8002876:	f008 fcff 	bl	800b278 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
			response_method();
 800287a:	f7ff fea5 	bl	80025c8 <_Z15response_methodv>
 800287e:	e002      	b.n	8002886 <_Z20StartGripperGoToTaskPv+0xc2>
		}
		else{
		  osDelay(200);
 8002880:	20c8      	movs	r0, #200	; 0xc8
 8002882:	f005 fec3 	bl	800860c <osDelay>
	  if (!emergency_stop && gripper_instruction_flag == 3){
 8002886:	e7a1      	b.n	80027cc <_Z20StartGripperGoToTaskPv+0x8>
 8002888:	200002d5 	.word	0x200002d5
 800288c:	200002cc 	.word	0x200002cc
 8002890:	200002bc 	.word	0x200002bc
 8002894:	200002b0 	.word	0x200002b0
 8002898:	0800c258 	.word	0x0800c258
 800289c:	0800c26c 	.word	0x0800c26c
 80028a0:	20000c98 	.word	0x20000c98

080028a4 <_Z18StartTaskRosserialPv>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskRosserial */
void StartTaskRosserial(void *argument)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b082      	sub	sp, #8
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskRosserial */
  /* Infinite loop */
  for(;;)
  {
	loop();
 80028ac:	f7ff fe6e 	bl	800258c <_Z4loopv>
	get_servo_pos_liveExpression();
 80028b0:	f7ff fd36 	bl	8002320 <_Z28get_servo_pos_liveExpressionv>
	if (global_msg[0] == 'g'){
 80028b4:	2100      	movs	r1, #0
 80028b6:	483f      	ldr	r0, [pc, #252]	; (80029b4 <_Z18StartTaskRosserialPv+0x110>)
 80028b8:	f008 fd0c 	bl	800b2d4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 80028bc:	4603      	mov	r3, r0
 80028be:	781b      	ldrb	r3, [r3, #0]
 80028c0:	2b67      	cmp	r3, #103	; 0x67
 80028c2:	bf0c      	ite	eq
 80028c4:	2301      	moveq	r3, #1
 80028c6:	2300      	movne	r3, #0
 80028c8:	b2db      	uxtb	r3, r3
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d021      	beq.n	8002912 <_Z18StartTaskRosserialPv+0x6e>
		if(global_msg[1] == 'o'){
 80028ce:	2101      	movs	r1, #1
 80028d0:	4838      	ldr	r0, [pc, #224]	; (80029b4 <_Z18StartTaskRosserialPv+0x110>)
 80028d2:	f008 fcff 	bl	800b2d4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 80028d6:	4603      	mov	r3, r0
 80028d8:	781b      	ldrb	r3, [r3, #0]
 80028da:	2b6f      	cmp	r3, #111	; 0x6f
 80028dc:	bf0c      	ite	eq
 80028de:	2301      	moveq	r3, #1
 80028e0:	2300      	movne	r3, #0
 80028e2:	b2db      	uxtb	r3, r3
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d003      	beq.n	80028f0 <_Z18StartTaskRosserialPv+0x4c>
			gripper_instruction_flag = 1;
 80028e8:	4b33      	ldr	r3, [pc, #204]	; (80029b8 <_Z18StartTaskRosserialPv+0x114>)
 80028ea:	2201      	movs	r2, #1
 80028ec:	601a      	str	r2, [r3, #0]
 80028ee:	e058      	b.n	80029a2 <_Z18StartTaskRosserialPv+0xfe>
		}
		else if (global_msg[1] == 'c'){
 80028f0:	2101      	movs	r1, #1
 80028f2:	4830      	ldr	r0, [pc, #192]	; (80029b4 <_Z18StartTaskRosserialPv+0x110>)
 80028f4:	f008 fcee 	bl	800b2d4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 80028f8:	4603      	mov	r3, r0
 80028fa:	781b      	ldrb	r3, [r3, #0]
 80028fc:	2b63      	cmp	r3, #99	; 0x63
 80028fe:	bf0c      	ite	eq
 8002900:	2301      	moveq	r3, #1
 8002902:	2300      	movne	r3, #0
 8002904:	b2db      	uxtb	r3, r3
 8002906:	2b00      	cmp	r3, #0
 8002908:	d04b      	beq.n	80029a2 <_Z18StartTaskRosserialPv+0xfe>
			gripper_instruction_flag = 2;
 800290a:	4b2b      	ldr	r3, [pc, #172]	; (80029b8 <_Z18StartTaskRosserialPv+0x114>)
 800290c:	2202      	movs	r2, #2
 800290e:	601a      	str	r2, [r3, #0]
 8002910:	e047      	b.n	80029a2 <_Z18StartTaskRosserialPv+0xfe>

		}
	}
	else if (global_msg[0] == 'p'){
 8002912:	2100      	movs	r1, #0
 8002914:	4827      	ldr	r0, [pc, #156]	; (80029b4 <_Z18StartTaskRosserialPv+0x110>)
 8002916:	f008 fcdd 	bl	800b2d4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 800291a:	4603      	mov	r3, r0
 800291c:	781b      	ldrb	r3, [r3, #0]
 800291e:	2b70      	cmp	r3, #112	; 0x70
 8002920:	bf0c      	ite	eq
 8002922:	2301      	moveq	r3, #1
 8002924:	2300      	movne	r3, #0
 8002926:	b2db      	uxtb	r3, r3
 8002928:	2b00      	cmp	r3, #0
 800292a:	d00c      	beq.n	8002946 <_Z18StartTaskRosserialPv+0xa2>
		gripper_instruction_flag = 3;
 800292c:	4b22      	ldr	r3, [pc, #136]	; (80029b8 <_Z18StartTaskRosserialPv+0x114>)
 800292e:	2203      	movs	r2, #3
 8002930:	601a      	str	r2, [r3, #0]
		gripper_go_to = (int)global_msg[1];
 8002932:	2101      	movs	r1, #1
 8002934:	481f      	ldr	r0, [pc, #124]	; (80029b4 <_Z18StartTaskRosserialPv+0x110>)
 8002936:	f008 fccd 	bl	800b2d4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 800293a:	4603      	mov	r3, r0
 800293c:	781b      	ldrb	r3, [r3, #0]
 800293e:	461a      	mov	r2, r3
 8002940:	4b1e      	ldr	r3, [pc, #120]	; (80029bc <_Z18StartTaskRosserialPv+0x118>)
 8002942:	601a      	str	r2, [r3, #0]
 8002944:	e02d      	b.n	80029a2 <_Z18StartTaskRosserialPv+0xfe>

	}
	else if (global_msg[0] == 'a'){
 8002946:	2100      	movs	r1, #0
 8002948:	481a      	ldr	r0, [pc, #104]	; (80029b4 <_Z18StartTaskRosserialPv+0x110>)
 800294a:	f008 fcc3 	bl	800b2d4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 800294e:	4603      	mov	r3, r0
 8002950:	781b      	ldrb	r3, [r3, #0]
 8002952:	2b61      	cmp	r3, #97	; 0x61
 8002954:	bf0c      	ite	eq
 8002956:	2301      	moveq	r3, #1
 8002958:	2300      	movne	r3, #0
 800295a:	b2db      	uxtb	r3, r3
 800295c:	2b00      	cmp	r3, #0
 800295e:	d020      	beq.n	80029a2 <_Z18StartTaskRosserialPv+0xfe>
		if(global_msg[1] == 'd'){
 8002960:	2101      	movs	r1, #1
 8002962:	4814      	ldr	r0, [pc, #80]	; (80029b4 <_Z18StartTaskRosserialPv+0x110>)
 8002964:	f008 fcb6 	bl	800b2d4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 8002968:	4603      	mov	r3, r0
 800296a:	781b      	ldrb	r3, [r3, #0]
 800296c:	2b64      	cmp	r3, #100	; 0x64
 800296e:	bf0c      	ite	eq
 8002970:	2301      	moveq	r3, #1
 8002972:	2300      	movne	r3, #0
 8002974:	b2db      	uxtb	r3, r3
 8002976:	2b00      	cmp	r3, #0
 8002978:	d003      	beq.n	8002982 <_Z18StartTaskRosserialPv+0xde>
			art_instruction_flag = 1;
 800297a:	4b11      	ldr	r3, [pc, #68]	; (80029c0 <_Z18StartTaskRosserialPv+0x11c>)
 800297c:	2201      	movs	r2, #1
 800297e:	601a      	str	r2, [r3, #0]
 8002980:	e00f      	b.n	80029a2 <_Z18StartTaskRosserialPv+0xfe>
		}
		else if (global_msg[1] == 'u'){
 8002982:	2101      	movs	r1, #1
 8002984:	480b      	ldr	r0, [pc, #44]	; (80029b4 <_Z18StartTaskRosserialPv+0x110>)
 8002986:	f008 fca5 	bl	800b2d4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 800298a:	4603      	mov	r3, r0
 800298c:	781b      	ldrb	r3, [r3, #0]
 800298e:	2b75      	cmp	r3, #117	; 0x75
 8002990:	bf0c      	ite	eq
 8002992:	2301      	moveq	r3, #1
 8002994:	2300      	movne	r3, #0
 8002996:	b2db      	uxtb	r3, r3
 8002998:	2b00      	cmp	r3, #0
 800299a:	d002      	beq.n	80029a2 <_Z18StartTaskRosserialPv+0xfe>
			art_instruction_flag = 2;
 800299c:	4b08      	ldr	r3, [pc, #32]	; (80029c0 <_Z18StartTaskRosserialPv+0x11c>)
 800299e:	2202      	movs	r2, #2
 80029a0:	601a      	str	r2, [r3, #0]
		}
	}
	global_msg = "";
 80029a2:	4908      	ldr	r1, [pc, #32]	; (80029c4 <_Z18StartTaskRosserialPv+0x120>)
 80029a4:	4803      	ldr	r0, [pc, #12]	; (80029b4 <_Z18StartTaskRosserialPv+0x110>)
 80029a6:	f008 fd26 	bl	800b3f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
	osDelay(500);
 80029aa:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80029ae:	f005 fe2d 	bl	800860c <osDelay>
	loop();
 80029b2:	e77b      	b.n	80028ac <_Z18StartTaskRosserialPv+0x8>
 80029b4:	20000c64 	.word	0x20000c64
 80029b8:	200002cc 	.word	0x200002cc
 80029bc:	200002bc 	.word	0x200002bc
 80029c0:	200002d0 	.word	0x200002d0
 80029c4:	0800c0ec 	.word	0x0800c0ec

080029c8 <_Z15StartButtonTaskPv>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartButtonTask */
void StartButtonTask(void *argument)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b082      	sub	sp, #8
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartButtonTask */
  /* Infinite loop */
  for(;;)
  {
	button_pressed = HAL_GPIO_ReadPin(Push_Button_GPIO_Port, Push_Button_Pin);
 80029d0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80029d4:	4807      	ldr	r0, [pc, #28]	; (80029f4 <_Z15StartButtonTaskPv+0x2c>)
 80029d6:	f002 fe83 	bl	80056e0 <HAL_GPIO_ReadPin>
 80029da:	4603      	mov	r3, r0
 80029dc:	2b00      	cmp	r3, #0
 80029de:	bf14      	ite	ne
 80029e0:	2301      	movne	r3, #1
 80029e2:	2300      	moveq	r3, #0
 80029e4:	b2da      	uxtb	r2, r3
 80029e6:	4b04      	ldr	r3, [pc, #16]	; (80029f8 <_Z15StartButtonTaskPv+0x30>)
 80029e8:	701a      	strb	r2, [r3, #0]
    osDelay(100);
 80029ea:	2064      	movs	r0, #100	; 0x64
 80029ec:	f005 fe0e 	bl	800860c <osDelay>
	button_pressed = HAL_GPIO_ReadPin(Push_Button_GPIO_Port, Push_Button_Pin);
 80029f0:	e7ee      	b.n	80029d0 <_Z15StartButtonTaskPv+0x8>
 80029f2:	bf00      	nop
 80029f4:	40020000 	.word	0x40020000
 80029f8:	200002d4 	.word	0x200002d4

080029fc <_Z14StartArtUpTaskPv>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartArtUpTask */
void StartArtUpTask(void *argument)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b082      	sub	sp, #8
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartArtUpTask */
  /* Infinite loop */
  for(;;)
  {
  	if (!emergency_stop && art_instruction_flag == 2){
 8002a04:	4b18      	ldr	r3, [pc, #96]	; (8002a68 <_Z14StartArtUpTaskPv+0x6c>)
 8002a06:	781b      	ldrb	r3, [r3, #0]
 8002a08:	f083 0301 	eor.w	r3, r3, #1
 8002a0c:	b2db      	uxtb	r3, r3
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d026      	beq.n	8002a60 <_Z14StartArtUpTaskPv+0x64>
 8002a12:	4b16      	ldr	r3, [pc, #88]	; (8002a6c <_Z14StartArtUpTaskPv+0x70>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	2b02      	cmp	r3, #2
 8002a18:	d122      	bne.n	8002a60 <_Z14StartArtUpTaskPv+0x64>
  			do{
  				move_servo_fw(1);
 8002a1a:	2001      	movs	r0, #1
 8002a1c:	f7ff fd38 	bl	8002490 <_Z13move_servo_fwi>
  				osDelay(50);
 8002a20:	2032      	movs	r0, #50	; 0x32
 8002a22:	f005 fdf3 	bl	800860c <osDelay>
  				ang[1] = pwm_to_ang(1);
 8002a26:	2001      	movs	r0, #1
 8002a28:	f7ff fc92 	bl	8002350 <_Z10pwm_to_angi>
 8002a2c:	eef0 7a40 	vmov.f32	s15, s0
 8002a30:	4b0f      	ldr	r3, [pc, #60]	; (8002a70 <_Z14StartArtUpTaskPv+0x74>)
 8002a32:	edc3 7a01 	vstr	s15, [r3, #4]
  			}
  			while(ang[1] < ART_UP_ANG);
 8002a36:	4b0e      	ldr	r3, [pc, #56]	; (8002a70 <_Z14StartArtUpTaskPv+0x74>)
 8002a38:	edd3 7a01 	vldr	s15, [r3, #4]
 8002a3c:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8002a74 <_Z14StartArtUpTaskPv+0x78>
 8002a40:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002a44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a48:	d500      	bpl.n	8002a4c <_Z14StartArtUpTaskPv+0x50>
  			do{
 8002a4a:	e7e6      	b.n	8002a1a <_Z14StartArtUpTaskPv+0x1e>
  			art_instruction_flag = 0;
 8002a4c:	4b07      	ldr	r3, [pc, #28]	; (8002a6c <_Z14StartArtUpTaskPv+0x70>)
 8002a4e:	2200      	movs	r2, #0
 8002a50:	601a      	str	r2, [r3, #0]
			global_response = "arriba";
 8002a52:	4909      	ldr	r1, [pc, #36]	; (8002a78 <_Z14StartArtUpTaskPv+0x7c>)
 8002a54:	4809      	ldr	r0, [pc, #36]	; (8002a7c <_Z14StartArtUpTaskPv+0x80>)
 8002a56:	f008 fcce 	bl	800b3f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
			response_method();
 8002a5a:	f7ff fdb5 	bl	80025c8 <_Z15response_methodv>
 8002a5e:	e002      	b.n	8002a66 <_Z14StartArtUpTaskPv+0x6a>
  		}
  		else{
  		  osDelay(200);
 8002a60:	20c8      	movs	r0, #200	; 0xc8
 8002a62:	f005 fdd3 	bl	800860c <osDelay>
  	if (!emergency_stop && art_instruction_flag == 2){
 8002a66:	e7cd      	b.n	8002a04 <_Z14StartArtUpTaskPv+0x8>
 8002a68:	200002d5 	.word	0x200002d5
 8002a6c:	200002d0 	.word	0x200002d0
 8002a70:	200002b0 	.word	0x200002b0
 8002a74:	42b40000 	.word	0x42b40000
 8002a78:	0800c270 	.word	0x0800c270
 8002a7c:	20000c98 	.word	0x20000c98

08002a80 <_Z16StartArtDownTaskPv>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartArtDownTask */
void StartArtDownTask(void *argument)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b082      	sub	sp, #8
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartArtDownTask */
  /* Infinite loop */
  for(;;)
	{
		if (!emergency_stop && art_instruction_flag == 1){
 8002a88:	4b17      	ldr	r3, [pc, #92]	; (8002ae8 <_Z16StartArtDownTaskPv+0x68>)
 8002a8a:	781b      	ldrb	r3, [r3, #0]
 8002a8c:	f083 0301 	eor.w	r3, r3, #1
 8002a90:	b2db      	uxtb	r3, r3
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d024      	beq.n	8002ae0 <_Z16StartArtDownTaskPv+0x60>
 8002a96:	4b15      	ldr	r3, [pc, #84]	; (8002aec <_Z16StartArtDownTaskPv+0x6c>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	2b01      	cmp	r3, #1
 8002a9c:	d120      	bne.n	8002ae0 <_Z16StartArtDownTaskPv+0x60>
			do{
				move_servo_bw(1);
 8002a9e:	2001      	movs	r0, #1
 8002aa0:	f7ff fd15 	bl	80024ce <_Z13move_servo_bwi>
				osDelay(50);
 8002aa4:	2032      	movs	r0, #50	; 0x32
 8002aa6:	f005 fdb1 	bl	800860c <osDelay>
				ang[1] = pwm_to_ang(1);
 8002aaa:	2001      	movs	r0, #1
 8002aac:	f7ff fc50 	bl	8002350 <_Z10pwm_to_angi>
 8002ab0:	eef0 7a40 	vmov.f32	s15, s0
 8002ab4:	4b0e      	ldr	r3, [pc, #56]	; (8002af0 <_Z16StartArtDownTaskPv+0x70>)
 8002ab6:	edc3 7a01 	vstr	s15, [r3, #4]
			}
			while(ang[1] > ART_DOWN_ANG);
 8002aba:	4b0d      	ldr	r3, [pc, #52]	; (8002af0 <_Z16StartArtDownTaskPv+0x70>)
 8002abc:	edd3 7a01 	vldr	s15, [r3, #4]
 8002ac0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002ac4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ac8:	dd00      	ble.n	8002acc <_Z16StartArtDownTaskPv+0x4c>
			do{
 8002aca:	e7e8      	b.n	8002a9e <_Z16StartArtDownTaskPv+0x1e>
			art_instruction_flag = 0;
 8002acc:	4b07      	ldr	r3, [pc, #28]	; (8002aec <_Z16StartArtDownTaskPv+0x6c>)
 8002ace:	2200      	movs	r2, #0
 8002ad0:	601a      	str	r2, [r3, #0]
			global_response = "abajo";
 8002ad2:	4908      	ldr	r1, [pc, #32]	; (8002af4 <_Z16StartArtDownTaskPv+0x74>)
 8002ad4:	4808      	ldr	r0, [pc, #32]	; (8002af8 <_Z16StartArtDownTaskPv+0x78>)
 8002ad6:	f008 fc8e 	bl	800b3f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
			response_method();
 8002ada:	f7ff fd75 	bl	80025c8 <_Z15response_methodv>
 8002ade:	e002      	b.n	8002ae6 <_Z16StartArtDownTaskPv+0x66>
		}
		else{
		  osDelay(200);
 8002ae0:	20c8      	movs	r0, #200	; 0xc8
 8002ae2:	f005 fd93 	bl	800860c <osDelay>
		if (!emergency_stop && art_instruction_flag == 1){
 8002ae6:	e7cf      	b.n	8002a88 <_Z16StartArtDownTaskPv+0x8>
 8002ae8:	200002d5 	.word	0x200002d5
 8002aec:	200002d0 	.word	0x200002d0
 8002af0:	200002b0 	.word	0x200002b0
 8002af4:	0800c278 	.word	0x0800c278
 8002af8:	20000c98 	.word	0x20000c98

08002afc <_Z16StartArtGoToTaskPv>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartArtGoToTask */
void StartArtGoToTask(void *argument)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b094      	sub	sp, #80	; 0x50
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartArtGoToTask */
  /* Infinite loop */
  for(;;)
  {
  	  if (!emergency_stop && art_instruction_flag == 3){
 8002b04:	4b2e      	ldr	r3, [pc, #184]	; (8002bc0 <_Z16StartArtGoToTaskPv+0xc4>)
 8002b06:	781b      	ldrb	r3, [r3, #0]
 8002b08:	f083 0301 	eor.w	r3, r3, #1
 8002b0c:	b2db      	uxtb	r3, r3
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d052      	beq.n	8002bb8 <_Z16StartArtGoToTaskPv+0xbc>
 8002b12:	4b2c      	ldr	r3, [pc, #176]	; (8002bc4 <_Z16StartArtGoToTaskPv+0xc8>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	2b03      	cmp	r3, #3
 8002b18:	d14e      	bne.n	8002bb8 <_Z16StartArtGoToTaskPv+0xbc>
  			move_servo_to(1, ang_to_pwm(art_go_to));
 8002b1a:	4b2b      	ldr	r3, [pc, #172]	; (8002bc8 <_Z16StartArtGoToTaskPv+0xcc>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	4618      	mov	r0, r3
 8002b20:	f7ff fc72 	bl	8002408 <_Z10ang_to_pwmi>
 8002b24:	eef0 7a40 	vmov.f32	s15, s0
 8002b28:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002b2c:	ee17 1a90 	vmov	r1, s15
 8002b30:	2001      	movs	r0, #1
 8002b32:	f7ff fc93 	bl	800245c <_Z13move_servo_toii>
  			osDelay(2000);
 8002b36:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002b3a:	f005 fd67 	bl	800860c <osDelay>
  			ang[1] = pwm_to_ang(1);
 8002b3e:	2001      	movs	r0, #1
 8002b40:	f7ff fc06 	bl	8002350 <_Z10pwm_to_angi>
 8002b44:	eef0 7a40 	vmov.f32	s15, s0
 8002b48:	4b20      	ldr	r3, [pc, #128]	; (8002bcc <_Z16StartArtGoToTaskPv+0xd0>)
 8002b4a:	edc3 7a01 	vstr	s15, [r3, #4]
  			gripper_instruction_flag = 0;
 8002b4e:	4b20      	ldr	r3, [pc, #128]	; (8002bd0 <_Z16StartArtGoToTaskPv+0xd4>)
 8002b50:	2200      	movs	r2, #0
 8002b52:	601a      	str	r2, [r3, #0]
			global_response = "angulo art = " + std::to_string(ang[0]) + "°";
 8002b54:	4b1d      	ldr	r3, [pc, #116]	; (8002bcc <_Z16StartArtGoToTaskPv+0xd0>)
 8002b56:	edd3 7a00 	vldr	s15, [r3]
 8002b5a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002b5e:	eeb0 0a67 	vmov.f32	s0, s15
 8002b62:	4618      	mov	r0, r3
 8002b64:	f7ff f8d2 	bl	8001d0c <_ZNSt7__cxx119to_stringEf>
 8002b68:	f107 0320 	add.w	r3, r7, #32
 8002b6c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002b70:	4918      	ldr	r1, [pc, #96]	; (8002bd4 <_Z16StartArtGoToTaskPv+0xd8>)
 8002b72:	4618      	mov	r0, r3
 8002b74:	f000 fbe7 	bl	8003346 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_OS8_>
 8002b78:	f107 0308 	add.w	r3, r7, #8
 8002b7c:	f107 0120 	add.w	r1, r7, #32
 8002b80:	4a15      	ldr	r2, [pc, #84]	; (8002bd8 <_Z16StartArtGoToTaskPv+0xdc>)
 8002b82:	4618      	mov	r0, r3
 8002b84:	f000 fbf7 	bl	8003376 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>
 8002b88:	f107 0308 	add.w	r3, r7, #8
 8002b8c:	4619      	mov	r1, r3
 8002b8e:	4813      	ldr	r0, [pc, #76]	; (8002bdc <_Z16StartArtGoToTaskPv+0xe0>)
 8002b90:	f008 fb78 	bl	800b284 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 8002b94:	f107 0308 	add.w	r3, r7, #8
 8002b98:	4618      	mov	r0, r3
 8002b9a:	f008 fb6d 	bl	800b278 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8002b9e:	f107 0320 	add.w	r3, r7, #32
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	f008 fb68 	bl	800b278 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8002ba8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002bac:	4618      	mov	r0, r3
 8002bae:	f008 fb63 	bl	800b278 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
			response_method();
 8002bb2:	f7ff fd09 	bl	80025c8 <_Z15response_methodv>
 8002bb6:	e002      	b.n	8002bbe <_Z16StartArtGoToTaskPv+0xc2>
  		}
  		else{
  		  osDelay(200);
 8002bb8:	20c8      	movs	r0, #200	; 0xc8
 8002bba:	f005 fd27 	bl	800860c <osDelay>
  	  if (!emergency_stop && art_instruction_flag == 3){
 8002bbe:	e7a1      	b.n	8002b04 <_Z16StartArtGoToTaskPv+0x8>
 8002bc0:	200002d5 	.word	0x200002d5
 8002bc4:	200002d0 	.word	0x200002d0
 8002bc8:	200002c0 	.word	0x200002c0
 8002bcc:	200002b0 	.word	0x200002b0
 8002bd0:	200002cc 	.word	0x200002cc
 8002bd4:	0800c280 	.word	0x0800c280
 8002bd8:	0800c26c 	.word	0x0800c26c
 8002bdc:	20000c98 	.word	0x20000c98

08002be0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b082      	sub	sp, #8
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5) {
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	4a04      	ldr	r2, [pc, #16]	; (8002c00 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	d101      	bne.n	8002bf6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002bf2:	f001 fafb 	bl	80041ec <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002bf6:	bf00      	nop
 8002bf8:	3708      	adds	r7, #8
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bd80      	pop	{r7, pc}
 8002bfe:	bf00      	nop
 8002c00:	40000c00 	.word	0x40000c00

08002c04 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002c04:	b480      	push	{r7}
 8002c06:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002c08:	b672      	cpsid	i
}
 8002c0a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002c0c:	e7fe      	b.n	8002c0c <Error_Handler+0x8>

08002c0e <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>:
    return 8;
  }

  // Copy data from variable into a byte array
  template<typename A, typename V>
  static void varToArr(A arr, const V var)
 8002c0e:	b480      	push	{r7}
 8002c10:	b085      	sub	sp, #20
 8002c12:	af00      	add	r7, sp, #0
 8002c14:	6078      	str	r0, [r7, #4]
 8002c16:	6039      	str	r1, [r7, #0]
  {
    for (size_t i = 0; i < sizeof(V); i++)
 8002c18:	2300      	movs	r3, #0
 8002c1a:	60fb      	str	r3, [r7, #12]
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	2b03      	cmp	r3, #3
 8002c20:	d80d      	bhi.n	8002c3e <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x30>
      arr[i] = (var >> (8 * i));
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	00db      	lsls	r3, r3, #3
 8002c26:	683a      	ldr	r2, [r7, #0]
 8002c28:	fa22 f103 	lsr.w	r1, r2, r3
 8002c2c:	687a      	ldr	r2, [r7, #4]
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	4413      	add	r3, r2
 8002c32:	b2ca      	uxtb	r2, r1
 8002c34:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	3301      	adds	r3, #1
 8002c3a:	60fb      	str	r3, [r7, #12]
 8002c3c:	e7ee      	b.n	8002c1c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0xe>
  }
 8002c3e:	bf00      	nop
 8002c40:	3714      	adds	r7, #20
 8002c42:	46bd      	mov	sp, r7
 8002c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c48:	4770      	bx	lr

08002c4a <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>:

  // Copy data from a byte array into variable
  template<typename V, typename A>
  static void arrToVar(V& var, const A arr)
 8002c4a:	b480      	push	{r7}
 8002c4c:	b085      	sub	sp, #20
 8002c4e:	af00      	add	r7, sp, #0
 8002c50:	6078      	str	r0, [r7, #4]
 8002c52:	6039      	str	r1, [r7, #0]
  {
    var = 0;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2200      	movs	r2, #0
 8002c58:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	60fb      	str	r3, [r7, #12]
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	2b03      	cmp	r3, #3
 8002c62:	d811      	bhi.n	8002c88 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x3e>
      var |= (arr[i] << (8 * i));
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	6839      	ldr	r1, [r7, #0]
 8002c6a:	68fa      	ldr	r2, [r7, #12]
 8002c6c:	440a      	add	r2, r1
 8002c6e:	7812      	ldrb	r2, [r2, #0]
 8002c70:	4611      	mov	r1, r2
 8002c72:	68fa      	ldr	r2, [r7, #12]
 8002c74:	00d2      	lsls	r2, r2, #3
 8002c76:	fa01 f202 	lsl.w	r2, r1, r2
 8002c7a:	431a      	orrs	r2, r3
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	3301      	adds	r3, #1
 8002c84:	60fb      	str	r3, [r7, #12]
 8002c86:	e7ea      	b.n	8002c5e <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x14>
  }
 8002c88:	bf00      	nop
 8002c8a:	3714      	adds	r7, #20
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c92:	4770      	bx	lr

08002c94 <_ZN9__gnu_cxx12__to_xstringINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcEET_PFiPT0_jPKS8_St9__va_listEjSB_z>:
    }

  // Helper for the to_string / to_wstring functions.
  template<typename _String, typename _CharT = typename _String::value_type>
    _String
    __to_xstring(int (*__convf) (_CharT*, std::size_t, const _CharT*,
 8002c94:	b408      	push	{r3}
 8002c96:	b590      	push	{r4, r7, lr}
 8002c98:	b088      	sub	sp, #32
 8002c9a:	af00      	add	r7, sp, #0
 8002c9c:	60f8      	str	r0, [r7, #12]
 8002c9e:	60b9      	str	r1, [r7, #8]
 8002ca0:	607a      	str	r2, [r7, #4]
				 __builtin_va_list), std::size_t __n,
		 const _CharT* __fmt, ...)
    {
      // XXX Eventually the result should be constructed in-place in
      // the __cxx11 string, likely with the help of internal hooks.
      _CharT* __s = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	3307      	adds	r3, #7
 8002ca6:	08db      	lsrs	r3, r3, #3
 8002ca8:	00db      	lsls	r3, r3, #3
 8002caa:	ebad 0d03 	sub.w	sp, sp, r3
 8002cae:	466b      	mov	r3, sp
 8002cb0:	3307      	adds	r3, #7
 8002cb2:	08db      	lsrs	r3, r3, #3
 8002cb4:	00db      	lsls	r3, r3, #3
 8002cb6:	61fb      	str	r3, [r7, #28]
							  * __n));

      __builtin_va_list __args;
      __builtin_va_start(__args, __fmt);
 8002cb8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002cbc:	613b      	str	r3, [r7, #16]

      const int __len = __convf(__s, __n, __fmt, __args);
 8002cbe:	68bc      	ldr	r4, [r7, #8]
 8002cc0:	693b      	ldr	r3, [r7, #16]
 8002cc2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002cc4:	6879      	ldr	r1, [r7, #4]
 8002cc6:	69f8      	ldr	r0, [r7, #28]
 8002cc8:	47a0      	blx	r4
 8002cca:	61b8      	str	r0, [r7, #24]

      __builtin_va_end(__args);

      return _String(__s, __s + __len);
 8002ccc:	69bb      	ldr	r3, [r7, #24]
 8002cce:	69fa      	ldr	r2, [r7, #28]
 8002cd0:	18d4      	adds	r4, r2, r3
 8002cd2:	f107 0314 	add.w	r3, r7, #20
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	f008 f93b 	bl	800af52 <_ZNSaIcEC1Ev>
 8002cdc:	f107 0314 	add.w	r3, r7, #20
 8002ce0:	4622      	mov	r2, r4
 8002ce2:	69f9      	ldr	r1, [r7, #28]
 8002ce4:	68f8      	ldr	r0, [r7, #12]
 8002ce6:	f000 fb5d 	bl	80033a4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IPcvEET_S7_RKS3_>
 8002cea:	f107 0314 	add.w	r3, r7, #20
 8002cee:	4618      	mov	r0, r3
 8002cf0:	f008 f930 	bl	800af54 <_ZNSaIcED1Ev>
    }
 8002cf4:	68f8      	ldr	r0, [r7, #12]
 8002cf6:	3720      	adds	r7, #32
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8002cfe:	b001      	add	sp, #4
 8002d00:	4770      	bx	lr
	...

08002d04 <_ZN3ros15NodeHandleBase_C1Ev>:
#include "ros/msg.h"

namespace ros
{

class NodeHandleBase_
 8002d04:	b480      	push	{r7}
 8002d06:	b083      	sub	sp, #12
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
 8002d0c:	4a04      	ldr	r2, [pc, #16]	; (8002d20 <_ZN3ros15NodeHandleBase_C1Ev+0x1c>)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	601a      	str	r2, [r3, #0]
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	4618      	mov	r0, r3
 8002d16:	370c      	adds	r7, #12
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1e:	4770      	bx	lr
 8002d20:	0800c514 	.word	0x0800c514

08002d24 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>:

  /*
   * Setup Functions
   */
public:
  NodeHandle_() : configured_(false)
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b086      	sub	sp, #24
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	4618      	mov	r0, r3
 8002d30:	f7ff ffe8 	bl	8002d04 <_ZN3ros15NodeHandleBase_C1Ev>
 8002d34:	4a3a      	ldr	r2, [pc, #232]	; (8002e20 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xfc>)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	601a      	str	r2, [r3, #0]
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	3304      	adds	r3, #4
 8002d3e:	4618      	mov	r0, r3
 8002d40:	f7fe fe1c 	bl	800197c <_ZN13STM32HardwareC1Ev>
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2200      	movs	r2, #0
 8002d48:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	f603 1314 	addw	r3, r3, #2324	; 0x914
 8002d52:	4618      	mov	r0, r3
 8002d54:	f7fe fb06 	bl	8001364 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>
  {

    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 8002d58:	2300      	movs	r3, #0
 8002d5a:	617b      	str	r3, [r7, #20]
 8002d5c:	697b      	ldr	r3, [r7, #20]
 8002d5e:	2b18      	cmp	r3, #24
 8002d60:	d80b      	bhi.n	8002d7a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x56>
      publishers[i] = 0;
 8002d62:	687a      	ldr	r2, [r7, #4]
 8002d64:	697b      	ldr	r3, [r7, #20]
 8002d66:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002d6a:	009b      	lsls	r3, r3, #2
 8002d6c:	4413      	add	r3, r2
 8002d6e:	2200      	movs	r2, #0
 8002d70:	605a      	str	r2, [r3, #4]
    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 8002d72:	697b      	ldr	r3, [r7, #20]
 8002d74:	3301      	adds	r3, #1
 8002d76:	617b      	str	r3, [r7, #20]
 8002d78:	e7f0      	b.n	8002d5c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x38>

    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	613b      	str	r3, [r7, #16]
 8002d7e:	693b      	ldr	r3, [r7, #16]
 8002d80:	2b18      	cmp	r3, #24
 8002d82:	d80a      	bhi.n	8002d9a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x76>
      subscribers[i] = 0;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	693a      	ldr	r2, [r7, #16]
 8002d88:	f202 2222 	addw	r2, r2, #546	; 0x222
 8002d8c:	2100      	movs	r1, #0
 8002d8e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 8002d92:	693b      	ldr	r3, [r7, #16]
 8002d94:	3301      	adds	r3, #1
 8002d96:	613b      	str	r3, [r7, #16]
 8002d98:	e7f1      	b.n	8002d7e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x5a>

    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	60fb      	str	r3, [r7, #12]
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002da4:	d20a      	bcs.n	8002dbc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x98>
      message_in[i] = 0;
 8002da6:	687a      	ldr	r2, [r7, #4]
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	4413      	add	r3, r2
 8002dac:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8002db0:	2200      	movs	r2, #0
 8002db2:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	3301      	adds	r3, #1
 8002db8:	60fb      	str	r3, [r7, #12]
 8002dba:	e7f0      	b.n	8002d9e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x7a>

    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	60bb      	str	r3, [r7, #8]
 8002dc0:	68bb      	ldr	r3, [r7, #8]
 8002dc2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002dc6:	d20a      	bcs.n	8002dde <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xba>
      message_out[i] = 0;
 8002dc8:	687a      	ldr	r2, [r7, #4]
 8002dca:	68bb      	ldr	r3, [r7, #8]
 8002dcc:	4413      	add	r3, r2
 8002dce:	f203 6324 	addw	r3, r3, #1572	; 0x624
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 8002dd6:	68bb      	ldr	r3, [r7, #8]
 8002dd8:	3301      	adds	r3, #1
 8002dda:	60bb      	str	r3, [r7, #8]
 8002ddc:	e7f0      	b.n	8002dc0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x9c>

    req_param_resp.ints_length = 0;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	2200      	movs	r2, #0
 8002de2:	f8c3 2918 	str.w	r2, [r3, #2328]	; 0x918
    req_param_resp.ints = NULL;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	2200      	movs	r2, #0
 8002dea:	f8c3 2920 	str.w	r2, [r3, #2336]	; 0x920
    req_param_resp.floats_length = 0;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	2200      	movs	r2, #0
 8002df2:	f8c3 2924 	str.w	r2, [r3, #2340]	; 0x924
    req_param_resp.floats = NULL;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	2200      	movs	r2, #0
 8002dfa:	f8c3 292c 	str.w	r2, [r3, #2348]	; 0x92c
    req_param_resp.ints_length = 0;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	2200      	movs	r2, #0
 8002e02:	f8c3 2918 	str.w	r2, [r3, #2328]	; 0x918
    req_param_resp.ints = NULL;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	2200      	movs	r2, #0
 8002e0a:	f8c3 2920 	str.w	r2, [r3, #2336]	; 0x920

    spin_timeout_ = 0;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	2200      	movs	r2, #0
 8002e12:	f8c3 2420 	str.w	r2, [r3, #1056]	; 0x420
  }
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	4618      	mov	r0, r3
 8002e1a:	3718      	adds	r7, #24
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	bd80      	pop	{r7, pc}
 8002e20:	0800c4d0 	.word	0x0800c4d0

08002e24 <_ZN3ros11Subscriber_C1Ev>:

namespace ros
{

/* Base class for objects subscribers. */
class Subscriber_
 8002e24:	b480      	push	{r7}
 8002e26:	b083      	sub	sp, #12
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
 8002e2c:	4a04      	ldr	r2, [pc, #16]	; (8002e40 <_ZN3ros11Subscriber_C1Ev+0x1c>)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	601a      	str	r2, [r3, #0]
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	4618      	mov	r0, r3
 8002e36:	370c      	adds	r7, #12
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3e:	4770      	bx	lr
 8002e40:	0800c4fc 	.word	0x0800c4fc

08002e44 <_ZN3ros10SubscriberIN8std_msgs6StringEvEC1EPKcPFvRKS2_Ei>:
{
public:
  typedef void(*CallbackT)(const MsgT&);
  MsgT msg;

  Subscriber(const char * topic_name, CallbackT cb, int endpoint = rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b084      	sub	sp, #16
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	60f8      	str	r0, [r7, #12]
 8002e4c:	60b9      	str	r1, [r7, #8]
 8002e4e:	607a      	str	r2, [r7, #4]
 8002e50:	603b      	str	r3, [r7, #0]
    cb_(cb),
    endpoint_(endpoint)
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	4618      	mov	r0, r3
 8002e56:	f7ff ffe5 	bl	8002e24 <_ZN3ros11Subscriber_C1Ev>
 8002e5a:	4a0b      	ldr	r2, [pc, #44]	; (8002e88 <_ZN3ros10SubscriberIN8std_msgs6StringEvEC1EPKcPFvRKS2_Ei+0x44>)
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	601a      	str	r2, [r3, #0]
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	330c      	adds	r3, #12
 8002e64:	4618      	mov	r0, r3
 8002e66:	f7fe feb5 	bl	8001bd4 <_ZN8std_msgs6StringC1Ev>
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	687a      	ldr	r2, [r7, #4]
 8002e6e:	615a      	str	r2, [r3, #20]
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	683a      	ldr	r2, [r7, #0]
 8002e74:	619a      	str	r2, [r3, #24]
  {
    topic_ = topic_name;
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	68ba      	ldr	r2, [r7, #8]
 8002e7a:	609a      	str	r2, [r3, #8]
  };
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	4618      	mov	r0, r3
 8002e80:	3710      	adds	r7, #16
 8002e82:	46bd      	mov	sp, r7
 8002e84:	bd80      	pop	{r7, pc}
 8002e86:	bf00      	nop
 8002e88:	0800c4b8 	.word	0x0800c4b8

08002e8c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>:

  Hardware* getHardware()
 8002e8c:	b480      	push	{r7}
 8002e8e:	b083      	sub	sp, #12
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
  {
    return &hardware_;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	3304      	adds	r3, #4
  }
 8002e98:	4618      	mov	r0, r3
 8002e9a:	370c      	adds	r7, #12
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea2:	4770      	bx	lr

08002ea4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>:

  /* Start serial, initialize buffers */
  void initNode()
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b082      	sub	sp, #8
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
  {
    hardware_.init();
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	3304      	adds	r3, #4
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	f7fe fd7f 	bl	80019b4 <_ZN13STM32Hardware4initEv>
    mode_ = 0;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	2200      	movs	r2, #0
 8002eba:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
    bytes_ = 0;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
    index_ = 0;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	2200      	movs	r2, #0
 8002eca:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
    topic_ = 0;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
  };
 8002ed6:	bf00      	nop
 8002ed8:	3708      	adds	r7, #8
 8002eda:	46bd      	mov	sp, r7
 8002edc:	bd80      	pop	{r7, pc}

08002ede <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>:
  /********************************************************************
   * Topic Management
   */

  /* Register a new publisher */
  bool advertise(Publisher & p)
 8002ede:	b480      	push	{r7}
 8002ee0:	b085      	sub	sp, #20
 8002ee2:	af00      	add	r7, sp, #0
 8002ee4:	6078      	str	r0, [r7, #4]
 8002ee6:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 8002ee8:	2300      	movs	r3, #0
 8002eea:	60fb      	str	r3, [r7, #12]
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	2b18      	cmp	r3, #24
 8002ef0:	dc1e      	bgt.n	8002f30 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x52>
    {
      if (publishers[i] == 0) // empty slot
 8002ef2:	687a      	ldr	r2, [r7, #4]
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002efa:	009b      	lsls	r3, r3, #2
 8002efc:	4413      	add	r3, r2
 8002efe:	685b      	ldr	r3, [r3, #4]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d111      	bne.n	8002f28 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x4a>
      {
        publishers[i] = &p;
 8002f04:	687a      	ldr	r2, [r7, #4]
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002f0c:	009b      	lsls	r3, r3, #2
 8002f0e:	4413      	add	r3, r2
 8002f10:	683a      	ldr	r2, [r7, #0]
 8002f12:	605a      	str	r2, [r3, #4]
        p.id_ = i + 100 + MAX_SUBSCRIBERS;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	f103 027d 	add.w	r2, r3, #125	; 0x7d
 8002f1a:	683b      	ldr	r3, [r7, #0]
 8002f1c:	609a      	str	r2, [r3, #8]
        p.nh_ = this;
 8002f1e:	687a      	ldr	r2, [r7, #4]
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	60da      	str	r2, [r3, #12]
        return true;
 8002f24:	2301      	movs	r3, #1
 8002f26:	e004      	b.n	8002f32 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x54>
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	3301      	adds	r3, #1
 8002f2c:	60fb      	str	r3, [r7, #12]
 8002f2e:	e7dd      	b.n	8002eec <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0xe>
      }
    }
    return false;
 8002f30:	2300      	movs	r3, #0
  }
 8002f32:	4618      	mov	r0, r3
 8002f34:	3714      	adds	r7, #20
 8002f36:	46bd      	mov	sp, r7
 8002f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3c:	4770      	bx	lr

08002f3e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E>:

  /* Register a new subscriber */
  bool subscribe(Subscriber_& s)
 8002f3e:	b480      	push	{r7}
 8002f40:	b085      	sub	sp, #20
 8002f42:	af00      	add	r7, sp, #0
 8002f44:	6078      	str	r0, [r7, #4]
 8002f46:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 8002f48:	2300      	movs	r3, #0
 8002f4a:	60fb      	str	r3, [r7, #12]
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	2b18      	cmp	r3, #24
 8002f50:	dc19      	bgt.n	8002f86 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E+0x48>
    {
      if (subscribers[i] == 0) // empty slot
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	68fa      	ldr	r2, [r7, #12]
 8002f56:	f202 2222 	addw	r2, r2, #546	; 0x222
 8002f5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d10d      	bne.n	8002f7e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E+0x40>
      {
        subscribers[i] = &s;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	68fa      	ldr	r2, [r7, #12]
 8002f66:	f202 2222 	addw	r2, r2, #546	; 0x222
 8002f6a:	6839      	ldr	r1, [r7, #0]
 8002f6c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        s.id_ = i + 100;
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	f103 0264 	add.w	r2, r3, #100	; 0x64
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	605a      	str	r2, [r3, #4]
        return true;
 8002f7a:	2301      	movs	r3, #1
 8002f7c:	e004      	b.n	8002f88 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E+0x4a>
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	3301      	adds	r3, #1
 8002f82:	60fb      	str	r3, [r7, #12]
 8002f84:	e7e2      	b.n	8002f4c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E+0xe>
      }
    }
    return false;
 8002f86:	2300      	movs	r3, #0
  }
 8002f88:	4618      	mov	r0, r3
 8002f8a:	3714      	adds	r7, #20
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f92:	4770      	bx	lr

08002f94 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>:
  virtual int spinOnce()
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b084      	sub	sp, #16
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
    uint32_t c_time = hardware_.time();
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	3304      	adds	r3, #4
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	f7fe fe0b 	bl	8001bbc <_ZN13STM32Hardware4timeEv>
 8002fa6:	60f8      	str	r0, [r7, #12]
    if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200))
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	f8d3 3908 	ldr.w	r3, [r3, #2312]	; 0x908
 8002fae:	68fa      	ldr	r2, [r7, #12]
 8002fb0:	1ad3      	subs	r3, r2, r3
 8002fb2:	f642 22f8 	movw	r2, #11000	; 0x2af8
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d903      	bls.n	8002fc2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2e>
      configured_ = false;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
    if (mode_ != MODE_FIRST_FF)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d009      	beq.n	8002fe0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      if (c_time > last_msg_timeout_time)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	f8d3 390c 	ldr.w	r3, [r3, #2316]	; 0x90c
 8002fd2:	68fa      	ldr	r2, [r7, #12]
 8002fd4:	429a      	cmp	r2, r3
 8002fd6:	d903      	bls.n	8002fe0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2200      	movs	r2, #0
 8002fdc:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
      if (spin_timeout_ > 0)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d014      	beq.n	8003014 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x80>
        if ((hardware_.time() - c_time) > spin_timeout_)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	3304      	adds	r3, #4
 8002fee:	4618      	mov	r0, r3
 8002ff0:	f7fe fde4 	bl	8001bbc <_ZN13STM32Hardware4timeEv>
 8002ff4:	4602      	mov	r2, r0
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	1ad2      	subs	r2, r2, r3
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 8003000:	429a      	cmp	r2, r3
 8003002:	bf8c      	ite	hi
 8003004:	2301      	movhi	r3, #1
 8003006:	2300      	movls	r3, #0
 8003008:	b2db      	uxtb	r3, r3
 800300a:	2b00      	cmp	r3, #0
 800300c:	d002      	beq.n	8003014 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x80>
          return SPIN_TIMEOUT;
 800300e:	f06f 0301 	mvn.w	r3, #1
 8003012:	e194      	b.n	800333e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
      int data = hardware_.read();
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	3304      	adds	r3, #4
 8003018:	4618      	mov	r0, r3
 800301a:	f7fe fce7 	bl	80019ec <_ZN13STM32Hardware4readEv>
 800301e:	60b8      	str	r0, [r7, #8]
      if (data < 0)
 8003020:	68bb      	ldr	r3, [r7, #8]
 8003022:	2b00      	cmp	r3, #0
 8003024:	f2c0 8174 	blt.w	8003310 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x37c>
      checksum_ += data;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	f8d3 28fc 	ldr.w	r2, [r3, #2300]	; 0x8fc
 800302e:	68bb      	ldr	r3, [r7, #8]
 8003030:	441a      	add	r2, r3
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800303e:	2b07      	cmp	r3, #7
 8003040:	d11e      	bne.n	8003080 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0xec>
        message_in[index_++] = data;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	f8d3 38f8 	ldr.w	r3, [r3, #2296]	; 0x8f8
 8003048:	1c59      	adds	r1, r3, #1
 800304a:	687a      	ldr	r2, [r7, #4]
 800304c:	f8c2 18f8 	str.w	r1, [r2, #2296]	; 0x8f8
 8003050:	68ba      	ldr	r2, [r7, #8]
 8003052:	b2d1      	uxtb	r1, r2
 8003054:	687a      	ldr	r2, [r7, #4]
 8003056:	4413      	add	r3, r2
 8003058:	460a      	mov	r2, r1
 800305a:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
        bytes_--;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 8003064:	1e5a      	subs	r2, r3, #1
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        if (bytes_ == 0)                 /* is message complete? if so, checksum */
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 8003072:	2b00      	cmp	r3, #0
 8003074:	d1b4      	bne.n	8002fe0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	2208      	movs	r2, #8
 800307a:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 800307e:	e7af      	b.n	8002fe0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_FIRST_FF)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003086:	2b00      	cmp	r3, #0
 8003088:	d128      	bne.n	80030dc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x148>
        if (data == 0xff)
 800308a:	68bb      	ldr	r3, [r7, #8]
 800308c:	2bff      	cmp	r3, #255	; 0xff
 800308e:	d10d      	bne.n	80030ac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x118>
          mode_++;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003096:	1c5a      	adds	r2, r3, #1
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	f103 0214 	add.w	r2, r3, #20
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	f8c3 290c 	str.w	r2, [r3, #2316]	; 0x90c
 80030aa:	e799      	b.n	8002fe0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000))
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	3304      	adds	r3, #4
 80030b0:	4618      	mov	r0, r3
 80030b2:	f7fe fd83 	bl	8001bbc <_ZN13STM32Hardware4timeEv>
 80030b6:	4602      	mov	r2, r0
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	1ad3      	subs	r3, r2, r3
 80030bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80030c0:	4293      	cmp	r3, r2
 80030c2:	bf8c      	ite	hi
 80030c4:	2301      	movhi	r3, #1
 80030c6:	2300      	movls	r3, #0
 80030c8:	b2db      	uxtb	r3, r3
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d088      	beq.n	8002fe0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          configured_ = false;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	2200      	movs	r2, #0
 80030d2:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
          return SPIN_TIMEOUT;
 80030d6:	f06f 0301 	mvn.w	r3, #1
 80030da:	e130      	b.n	800333e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
      else if (mode_ == MODE_PROTOCOL_VER)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80030e2:	2b01      	cmp	r3, #1
 80030e4:	d118      	bne.n	8003118 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x184>
        if (data == PROTOCOL_VER)
 80030e6:	68bb      	ldr	r3, [r7, #8]
 80030e8:	2bfe      	cmp	r3, #254	; 0xfe
 80030ea:	d107      	bne.n	80030fc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x168>
          mode_++;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80030f2:	1c5a      	adds	r2, r3, #1
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 80030fa:	e771      	b.n	8002fe0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2200      	movs	r2, #0
 8003100:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
          if (configured_ == false)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 800310a:	2b00      	cmp	r3, #0
 800310c:	f47f af68 	bne.w	8002fe0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            requestSyncTime();  /* send a msg back showing our protocol version */
 8003110:	6878      	ldr	r0, [r7, #4]
 8003112:	f000 f962 	bl	80033da <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
 8003116:	e763      	b.n	8002fe0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_L)      /* bottom half of message size */
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800311e:	2b02      	cmp	r3, #2
 8003120:	d113      	bne.n	800314a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1b6>
        bytes_ = data;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	68ba      	ldr	r2, [r7, #8]
 8003126:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        index_ = 0;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	2200      	movs	r2, #0
 800312e:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
        mode_++;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003138:	1c5a      	adds	r2, r3, #1
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        checksum_ = data;               /* first byte for calculating size checksum */
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	68ba      	ldr	r2, [r7, #8]
 8003144:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
 8003148:	e74a      	b.n	8002fe0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_H)      /* top half of message size */
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003150:	2b03      	cmp	r3, #3
 8003152:	d110      	bne.n	8003176 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1e2>
        bytes_ += data << 8;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	f8d3 28f0 	ldr.w	r2, [r3, #2288]	; 0x8f0
 800315a:	68bb      	ldr	r3, [r7, #8]
 800315c:	021b      	lsls	r3, r3, #8
 800315e:	441a      	add	r2, r3
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        mode_++;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800316c:	1c5a      	adds	r2, r3, #1
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8003174:	e734      	b.n	8002fe0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_CHECKSUM)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800317c:	2b04      	cmp	r3, #4
 800317e:	d116      	bne.n	80031ae <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x21a>
        if ((checksum_ % 256) == 255)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	; 0x8fc
 8003186:	425a      	negs	r2, r3
 8003188:	b2db      	uxtb	r3, r3
 800318a:	b2d2      	uxtb	r2, r2
 800318c:	bf58      	it	pl
 800318e:	4253      	negpl	r3, r2
 8003190:	2bff      	cmp	r3, #255	; 0xff
 8003192:	d107      	bne.n	80031a4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x210>
          mode_++;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800319a:	1c5a      	adds	r2, r3, #1
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 80031a2:	e71d      	b.n	8002fe0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2200      	movs	r2, #0
 80031a8:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 80031ac:	e718      	b.n	8002fe0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_L)     /* bottom half of topic id */
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80031b4:	2b05      	cmp	r3, #5
 80031b6:	d10f      	bne.n	80031d8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x244>
        topic_ = data;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	68ba      	ldr	r2, [r7, #8]
 80031bc:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
        mode_++;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80031c6:	1c5a      	adds	r2, r3, #1
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        checksum_ = data;               /* first byte included in checksum */
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	68ba      	ldr	r2, [r7, #8]
 80031d2:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
 80031d6:	e703      	b.n	8002fe0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_H)     /* top half of topic id */
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80031de:	2b06      	cmp	r3, #6
 80031e0:	d117      	bne.n	8003212 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x27e>
        topic_ += data << 8;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	f8d3 28f4 	ldr.w	r2, [r3, #2292]	; 0x8f4
 80031e8:	68bb      	ldr	r3, [r7, #8]
 80031ea:	021b      	lsls	r3, r3, #8
 80031ec:	441a      	add	r2, r3
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
        mode_ = MODE_MESSAGE;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2207      	movs	r2, #7
 80031f8:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        if (bytes_ == 0)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 8003202:	2b00      	cmp	r3, #0
 8003204:	f47f aeec 	bne.w	8002fe0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2208      	movs	r2, #8
 800320c:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8003210:	e6e6      	b.n	8002fe0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_MSG_CHECKSUM)    /* do checksum */
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003218:	2b08      	cmp	r3, #8
 800321a:	f47f aee1 	bne.w	8002fe0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2200      	movs	r2, #0
 8003222:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        if ((checksum_ % 256) == 255)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	; 0x8fc
 800322c:	425a      	negs	r2, r3
 800322e:	b2db      	uxtb	r3, r3
 8003230:	b2d2      	uxtb	r2, r2
 8003232:	bf58      	it	pl
 8003234:	4253      	negpl	r3, r2
 8003236:	2bff      	cmp	r3, #255	; 0xff
 8003238:	f47f aed2 	bne.w	8002fe0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          if (topic_ == TopicInfo::ID_PUBLISHER)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8003242:	2b00      	cmp	r3, #0
 8003244:	d110      	bne.n	8003268 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2d4>
            requestSyncTime();
 8003246:	6878      	ldr	r0, [r7, #4]
 8003248:	f000 f8c7 	bl	80033da <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
            negotiateTopics();
 800324c:	6878      	ldr	r0, [r7, #4]
 800324e:	f000 f8e2 	bl	8003416 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>
            last_sync_time = c_time;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	68fa      	ldr	r2, [r7, #12]
 8003256:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
            last_sync_receive_time = c_time;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	68fa      	ldr	r2, [r7, #12]
 800325e:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
            return SPIN_ERR;
 8003262:	f04f 33ff 	mov.w	r3, #4294967295
 8003266:	e06a      	b.n	800333e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
          else if (topic_ == TopicInfo::ID_TIME)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 800326e:	2b0a      	cmp	r3, #10
 8003270:	d107      	bne.n	8003282 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2ee>
            syncTime(message_in);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8003278:	4619      	mov	r1, r3
 800327a:	6878      	ldr	r0, [r7, #4]
 800327c:	f000 f9aa 	bl	80035d4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>
 8003280:	e6ae      	b.n	8002fe0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8003288:	2b06      	cmp	r3, #6
 800328a:	d10e      	bne.n	80032aa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x316>
            req_param_resp.deserialize(message_in);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	f603 1214 	addw	r2, r3, #2324	; 0x914
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8003298:	4619      	mov	r1, r3
 800329a:	4610      	mov	r0, r2
 800329c:	f7fe f997 	bl	80015ce <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>
            param_recieved = true;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2201      	movs	r2, #1
 80032a4:	f883 2910 	strb.w	r2, [r3, #2320]	; 0x910
 80032a8:	e69a      	b.n	8002fe0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_TX_STOP)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 80032b0:	2b0b      	cmp	r3, #11
 80032b2:	d104      	bne.n	80032be <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x32a>
            configured_ = false;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2200      	movs	r2, #0
 80032b8:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
 80032bc:	e690      	b.n	8002fe0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            if (subscribers[topic_ - 100])
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 80032c4:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	f202 2222 	addw	r2, r2, #546	; 0x222
 80032ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	f43f ae84 	beq.w	8002fe0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
              subscribers[topic_ - 100]->callback(message_in);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 80032de:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	f202 2222 	addw	r2, r2, #546	; 0x222
 80032e8:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 80032f2:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	f202 2222 	addw	r2, r2, #546	; 0x222
 80032fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	687a      	ldr	r2, [r7, #4]
 8003306:	f202 4224 	addw	r2, r2, #1060	; 0x424
 800330a:	4611      	mov	r1, r2
 800330c:	4798      	blx	r3
    while (true)
 800330e:	e667      	b.n	8002fe0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        break;
 8003310:	bf00      	nop
    if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 8003318:	2b00      	cmp	r3, #0
 800331a:	d00f      	beq.n	800333c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3a8>
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	f8d3 3904 	ldr.w	r3, [r3, #2308]	; 0x904
 8003322:	68fa      	ldr	r2, [r7, #12]
 8003324:	1ad3      	subs	r3, r2, r3
 8003326:	f640 12c4 	movw	r2, #2500	; 0x9c4
 800332a:	4293      	cmp	r3, r2
 800332c:	d906      	bls.n	800333c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3a8>
      requestSyncTime();
 800332e:	6878      	ldr	r0, [r7, #4]
 8003330:	f000 f853 	bl	80033da <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
      last_sync_time = c_time;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	68fa      	ldr	r2, [r7, #12]
 8003338:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
    return SPIN_OK;
 800333c:	2300      	movs	r3, #0
  }
 800333e:	4618      	mov	r0, r3
 8003340:	3710      	adds	r7, #16
 8003342:	46bd      	mov	sp, r7
 8003344:	bd80      	pop	{r7, pc}

08003346 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_OS8_>:
    operator+(const _CharT* __lhs,
 8003346:	b580      	push	{r7, lr}
 8003348:	b084      	sub	sp, #16
 800334a:	af00      	add	r7, sp, #0
 800334c:	60f8      	str	r0, [r7, #12]
 800334e:	60b9      	str	r1, [r7, #8]
 8003350:	607a      	str	r2, [r7, #4]
    { return std::move(__rhs.insert(0, __lhs)); }
 8003352:	68ba      	ldr	r2, [r7, #8]
 8003354:	2100      	movs	r1, #0
 8003356:	6878      	ldr	r0, [r7, #4]
 8003358:	f008 f86a 	bl	800b430 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6insertEjPKc>
 800335c:	4603      	mov	r3, r0
 800335e:	4618      	mov	r0, r3
 8003360:	f000 f984 	bl	800366c <_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_>
 8003364:	4603      	mov	r3, r0
 8003366:	4619      	mov	r1, r3
 8003368:	68f8      	ldr	r0, [r7, #12]
 800336a:	f007 ff6b 	bl	800b244 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>
 800336e:	68f8      	ldr	r0, [r7, #12]
 8003370:	3710      	adds	r7, #16
 8003372:	46bd      	mov	sp, r7
 8003374:	bd80      	pop	{r7, pc}

08003376 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>:
    operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,
 8003376:	b580      	push	{r7, lr}
 8003378:	b084      	sub	sp, #16
 800337a:	af00      	add	r7, sp, #0
 800337c:	60f8      	str	r0, [r7, #12]
 800337e:	60b9      	str	r1, [r7, #8]
 8003380:	607a      	str	r2, [r7, #4]
    { return std::move(__lhs.append(__rhs)); }
 8003382:	6879      	ldr	r1, [r7, #4]
 8003384:	68b8      	ldr	r0, [r7, #8]
 8003386:	f008 f885 	bl	800b494 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc>
 800338a:	4603      	mov	r3, r0
 800338c:	4618      	mov	r0, r3
 800338e:	f000 f96d 	bl	800366c <_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_>
 8003392:	4603      	mov	r3, r0
 8003394:	4619      	mov	r1, r3
 8003396:	68f8      	ldr	r0, [r7, #12]
 8003398:	f007 ff54 	bl	800b244 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>
 800339c:	68f8      	ldr	r0, [r7, #12]
 800339e:	3710      	adds	r7, #16
 80033a0:	46bd      	mov	sp, r7
 80033a2:	bd80      	pop	{r7, pc}

080033a4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IPcvEET_S7_RKS3_>:
        basic_string(_InputIterator __beg, _InputIterator __end,
 80033a4:	b590      	push	{r4, r7, lr}
 80033a6:	b085      	sub	sp, #20
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	60f8      	str	r0, [r7, #12]
 80033ac:	60b9      	str	r1, [r7, #8]
 80033ae:	607a      	str	r2, [r7, #4]
 80033b0:	603b      	str	r3, [r7, #0]
	: _M_dataplus(_M_local_data(), __a)
 80033b2:	68fc      	ldr	r4, [r7, #12]
 80033b4:	68f8      	ldr	r0, [r7, #12]
 80033b6:	f007 fe8e 	bl	800b0d6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_local_dataEv>
 80033ba:	4603      	mov	r3, r0
 80033bc:	683a      	ldr	r2, [r7, #0]
 80033be:	4619      	mov	r1, r3
 80033c0:	4620      	mov	r0, r4
 80033c2:	f008 f87f 	bl	800b4c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderC1EPcRKS3_>
	{ _M_construct(__beg, __end); }
 80033c6:	687a      	ldr	r2, [r7, #4]
 80033c8:	68b9      	ldr	r1, [r7, #8]
 80033ca:	68f8      	ldr	r0, [r7, #12]
 80033cc:	f000 f959 	bl	8003682 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_>
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	4618      	mov	r0, r3
 80033d4:	3714      	adds	r7, #20
 80033d6:	46bd      	mov	sp, r7
 80033d8:	bd90      	pop	{r4, r7, pc}

080033da <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>:
  void requestSyncTime()
 80033da:	b580      	push	{r7, lr}
 80033dc:	b086      	sub	sp, #24
 80033de:	af00      	add	r7, sp, #0
 80033e0:	6078      	str	r0, [r7, #4]
    std_msgs::Time t;
 80033e2:	f107 030c 	add.w	r3, r7, #12
 80033e6:	4618      	mov	r0, r3
 80033e8:	f7fd fc58 	bl	8000c9c <_ZN8std_msgs4TimeC1Ev>
    publish(TopicInfo::ID_TIME, &t);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f107 020c 	add.w	r2, r7, #12
 80033f6:	210a      	movs	r1, #10
 80033f8:	6878      	ldr	r0, [r7, #4]
 80033fa:	4798      	blx	r3
    rt_time = hardware_.time();
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	3304      	adds	r3, #4
 8003400:	4618      	mov	r0, r3
 8003402:	f7fe fbdb 	bl	8001bbc <_ZN13STM32Hardware4timeEv>
 8003406:	4602      	mov	r2, r0
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
  }
 800340e:	bf00      	nop
 8003410:	3718      	adds	r7, #24
 8003412:	46bd      	mov	sp, r7
 8003414:	bd80      	pop	{r7, pc}

08003416 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>:
    bool v = advertise(srv.pub);
    bool w = subscribe(srv);
    return v && w;
  }

  void negotiateTopics()
 8003416:	b590      	push	{r4, r7, lr}
 8003418:	b08b      	sub	sp, #44	; 0x2c
 800341a:	af00      	add	r7, sp, #0
 800341c:	6078      	str	r0, [r7, #4]
  {
    rosserial_msgs::TopicInfo ti;
 800341e:	f107 030c 	add.w	r3, r7, #12
 8003422:	4618      	mov	r0, r3
 8003424:	f7fd fd2a 	bl	8000e7c <_ZN14rosserial_msgs9TopicInfoC1Ev>
    int i;
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8003428:	2300      	movs	r3, #0
 800342a:	627b      	str	r3, [r7, #36]	; 0x24
 800342c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800342e:	2b18      	cmp	r3, #24
 8003430:	dc63      	bgt.n	80034fa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xe4>
    {
      if (publishers[i] != 0) // non-empty slot
 8003432:	687a      	ldr	r2, [r7, #4]
 8003434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003436:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800343a:	009b      	lsls	r3, r3, #2
 800343c:	4413      	add	r3, r2
 800343e:	685b      	ldr	r3, [r3, #4]
 8003440:	2b00      	cmp	r3, #0
 8003442:	d056      	beq.n	80034f2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xdc>
      {
        ti.topic_id = publishers[i]->id_;
 8003444:	687a      	ldr	r2, [r7, #4]
 8003446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003448:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800344c:	009b      	lsls	r3, r3, #2
 800344e:	4413      	add	r3, r2
 8003450:	685b      	ldr	r3, [r3, #4]
 8003452:	689b      	ldr	r3, [r3, #8]
 8003454:	b29b      	uxth	r3, r3
 8003456:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) publishers[i]->topic_;
 8003458:	687a      	ldr	r2, [r7, #4]
 800345a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800345c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003460:	009b      	lsls	r3, r3, #2
 8003462:	4413      	add	r3, r2
 8003464:	685b      	ldr	r3, [r3, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) publishers[i]->msg_->getType();
 800346a:	687a      	ldr	r2, [r7, #4]
 800346c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800346e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003472:	009b      	lsls	r3, r3, #2
 8003474:	4413      	add	r3, r2
 8003476:	685b      	ldr	r3, [r3, #4]
 8003478:	6859      	ldr	r1, [r3, #4]
 800347a:	687a      	ldr	r2, [r7, #4]
 800347c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800347e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003482:	009b      	lsls	r3, r3, #2
 8003484:	4413      	add	r3, r2
 8003486:	685b      	ldr	r3, [r3, #4]
 8003488:	685b      	ldr	r3, [r3, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	3308      	adds	r3, #8
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	4608      	mov	r0, r1
 8003492:	4798      	blx	r3
 8003494:	4603      	mov	r3, r0
 8003496:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 8003498:	687a      	ldr	r2, [r7, #4]
 800349a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800349c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80034a0:	009b      	lsls	r3, r3, #2
 80034a2:	4413      	add	r3, r2
 80034a4:	685b      	ldr	r3, [r3, #4]
 80034a6:	6859      	ldr	r1, [r3, #4]
 80034a8:	687a      	ldr	r2, [r7, #4]
 80034aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ac:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80034b0:	009b      	lsls	r3, r3, #2
 80034b2:	4413      	add	r3, r2
 80034b4:	685b      	ldr	r3, [r3, #4]
 80034b6:	685b      	ldr	r3, [r3, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	330c      	adds	r3, #12
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	4608      	mov	r0, r1
 80034c0:	4798      	blx	r3
 80034c2:	4603      	mov	r3, r0
 80034c4:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = OUTPUT_SIZE;
 80034c6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80034ca:	623b      	str	r3, [r7, #32]
        publish(publishers[i]->getEndpointType(), &ti);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	681c      	ldr	r4, [r3, #0]
 80034d2:	687a      	ldr	r2, [r7, #4]
 80034d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034d6:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80034da:	009b      	lsls	r3, r3, #2
 80034dc:	4413      	add	r3, r2
 80034de:	685b      	ldr	r3, [r3, #4]
 80034e0:	4618      	mov	r0, r3
 80034e2:	f7fe fa2c 	bl	800193e <_ZN3ros9Publisher15getEndpointTypeEv>
 80034e6:	4601      	mov	r1, r0
 80034e8:	f107 030c 	add.w	r3, r7, #12
 80034ec:	461a      	mov	r2, r3
 80034ee:	6878      	ldr	r0, [r7, #4]
 80034f0:	47a0      	blx	r4
    for (i = 0; i < MAX_PUBLISHERS; i++)
 80034f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034f4:	3301      	adds	r3, #1
 80034f6:	627b      	str	r3, [r7, #36]	; 0x24
 80034f8:	e798      	b.n	800342c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x16>
      }
    }
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 80034fa:	2300      	movs	r3, #0
 80034fc:	627b      	str	r3, [r7, #36]	; 0x24
 80034fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003500:	2b18      	cmp	r3, #24
 8003502:	dc5f      	bgt.n	80035c4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1ae>
    {
      if (subscribers[i] != 0) // non-empty slot
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003508:	f202 2222 	addw	r2, r2, #546	; 0x222
 800350c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003510:	2b00      	cmp	r3, #0
 8003512:	d053      	beq.n	80035bc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1a6>
      {
        ti.topic_id = subscribers[i]->id_;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003518:	f202 2222 	addw	r2, r2, #546	; 0x222
 800351c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003520:	685b      	ldr	r3, [r3, #4]
 8003522:	b29b      	uxth	r3, r3
 8003524:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) subscribers[i]->topic_;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800352a:	f202 2222 	addw	r2, r2, #546	; 0x222
 800352e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003532:	689b      	ldr	r3, [r3, #8]
 8003534:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) subscribers[i]->getMsgType();
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800353a:	f202 2222 	addw	r2, r2, #546	; 0x222
 800353e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003546:	f202 2222 	addw	r2, r2, #546	; 0x222
 800354a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	3308      	adds	r3, #8
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	4608      	mov	r0, r1
 8003556:	4798      	blx	r3
 8003558:	4603      	mov	r3, r0
 800355a:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003560:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003564:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800356c:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003570:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	330c      	adds	r3, #12
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	4608      	mov	r0, r1
 800357c:	4798      	blx	r3
 800357e:	4603      	mov	r3, r0
 8003580:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = INPUT_SIZE;
 8003582:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003586:	623b      	str	r3, [r7, #32]
        publish(subscribers[i]->getEndpointType(), &ti);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	681c      	ldr	r4, [r3, #0]
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003592:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003596:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800359e:	f202 2222 	addw	r2, r2, #546	; 0x222
 80035a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	3304      	adds	r3, #4
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	4608      	mov	r0, r1
 80035ae:	4798      	blx	r3
 80035b0:	4601      	mov	r1, r0
 80035b2:	f107 030c 	add.w	r3, r7, #12
 80035b6:	461a      	mov	r2, r3
 80035b8:	6878      	ldr	r0, [r7, #4]
 80035ba:	47a0      	blx	r4
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 80035bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035be:	3301      	adds	r3, #1
 80035c0:	627b      	str	r3, [r7, #36]	; 0x24
 80035c2:	e79c      	b.n	80034fe <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xe8>
      }
    }
    configured_ = true;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2201      	movs	r2, #1
 80035c8:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
  }
 80035cc:	bf00      	nop
 80035ce:	372c      	adds	r7, #44	; 0x2c
 80035d0:	46bd      	mov	sp, r7
 80035d2:	bd90      	pop	{r4, r7, pc}

080035d4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>:
  void syncTime(uint8_t * data)
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b086      	sub	sp, #24
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
 80035dc:	6039      	str	r1, [r7, #0]
    std_msgs::Time t;
 80035de:	f107 0308 	add.w	r3, r7, #8
 80035e2:	4618      	mov	r0, r3
 80035e4:	f7fd fb5a 	bl	8000c9c <_ZN8std_msgs4TimeC1Ev>
    uint32_t offset = hardware_.time() - rt_time;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	3304      	adds	r3, #4
 80035ec:	4618      	mov	r0, r3
 80035ee:	f7fe fae5 	bl	8001bbc <_ZN13STM32Hardware4timeEv>
 80035f2:	4602      	mov	r2, r0
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 80035fa:	1ad3      	subs	r3, r2, r3
 80035fc:	617b      	str	r3, [r7, #20]
    t.deserialize(data);
 80035fe:	f107 0308 	add.w	r3, r7, #8
 8003602:	6839      	ldr	r1, [r7, #0]
 8003604:	4618      	mov	r0, r3
 8003606:	f7fd fbb9 	bl	8000d7c <_ZN8std_msgs4Time11deserializeEPh>
    t.data.sec += offset / 1000;
 800360a:	68fa      	ldr	r2, [r7, #12]
 800360c:	697b      	ldr	r3, [r7, #20]
 800360e:	4915      	ldr	r1, [pc, #84]	; (8003664 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 8003610:	fba1 1303 	umull	r1, r3, r1, r3
 8003614:	099b      	lsrs	r3, r3, #6
 8003616:	4413      	add	r3, r2
 8003618:	60fb      	str	r3, [r7, #12]
    t.data.nsec += (offset % 1000) * 1000000UL;
 800361a:	6939      	ldr	r1, [r7, #16]
 800361c:	697a      	ldr	r2, [r7, #20]
 800361e:	4b11      	ldr	r3, [pc, #68]	; (8003664 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 8003620:	fba3 0302 	umull	r0, r3, r3, r2
 8003624:	099b      	lsrs	r3, r3, #6
 8003626:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800362a:	fb00 f303 	mul.w	r3, r0, r3
 800362e:	1ad3      	subs	r3, r2, r3
 8003630:	4a0d      	ldr	r2, [pc, #52]	; (8003668 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x94>)
 8003632:	fb02 f303 	mul.w	r3, r2, r3
 8003636:	440b      	add	r3, r1
 8003638:	613b      	str	r3, [r7, #16]
    this->setNow(t.data);
 800363a:	f107 0308 	add.w	r3, r7, #8
 800363e:	3304      	adds	r3, #4
 8003640:	4619      	mov	r1, r3
 8003642:	6878      	ldr	r0, [r7, #4]
 8003644:	f000 f8c0 	bl	80037c8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE>
    last_sync_receive_time = hardware_.time();
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	3304      	adds	r3, #4
 800364c:	4618      	mov	r0, r3
 800364e:	f7fe fab5 	bl	8001bbc <_ZN13STM32Hardware4timeEv>
 8003652:	4602      	mov	r2, r0
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
  }
 800365a:	bf00      	nop
 800365c:	3718      	adds	r7, #24
 800365e:	46bd      	mov	sp, r7
 8003660:	bd80      	pop	{r7, pc}
 8003662:	bf00      	nop
 8003664:	10624dd3 	.word	0x10624dd3
 8003668:	000f4240 	.word	0x000f4240

0800366c <_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 800366c:	b480      	push	{r7}
 800366e:	b083      	sub	sp, #12
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	4618      	mov	r0, r3
 8003678:	370c      	adds	r7, #12
 800367a:	46bd      	mov	sp, r7
 800367c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003680:	4770      	bx	lr

08003682 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_>:
        _M_construct(_InIterator __beg, _InIterator __end)
 8003682:	b580      	push	{r7, lr}
 8003684:	b084      	sub	sp, #16
 8003686:	af00      	add	r7, sp, #0
 8003688:	60f8      	str	r0, [r7, #12]
 800368a:	60b9      	str	r1, [r7, #8]
 800368c:	607a      	str	r2, [r7, #4]
	  _M_construct_aux(__beg, __end, _Integral());
 800368e:	687a      	ldr	r2, [r7, #4]
 8003690:	68b9      	ldr	r1, [r7, #8]
 8003692:	68f8      	ldr	r0, [r7, #12]
 8003694:	f000 f8d8 	bl	8003848 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE16_M_construct_auxIPcEEvT_S7_St12__false_type>
        }
 8003698:	bf00      	nop
 800369a:	3710      	adds	r7, #16
 800369c:	46bd      	mov	sp, r7
 800369e:	bd80      	pop	{r7, pc}

080036a0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE>:

  virtual int publish(int id, const Msg * msg)
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b088      	sub	sp, #32
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	60f8      	str	r0, [r7, #12]
 80036a8:	60b9      	str	r1, [r7, #8]
 80036aa:	607a      	str	r2, [r7, #4]
  {
    if (id >= 100 && !configured_)
 80036ac:	68bb      	ldr	r3, [r7, #8]
 80036ae:	2b63      	cmp	r3, #99	; 0x63
 80036b0:	dd09      	ble.n	80036c6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 80036b8:	f083 0301 	eor.w	r3, r3, #1
 80036bc:	b2db      	uxtb	r3, r3
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d001      	beq.n	80036c6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
      return 0;
 80036c2:	2300      	movs	r3, #0
 80036c4:	e079      	b.n	80037ba <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x11a>

    /* serialize message */
    int l = msg->serialize(message_out + 7);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	68fa      	ldr	r2, [r7, #12]
 80036ce:	f202 6224 	addw	r2, r2, #1572	; 0x624
 80036d2:	3207      	adds	r2, #7
 80036d4:	4611      	mov	r1, r2
 80036d6:	6878      	ldr	r0, [r7, #4]
 80036d8:	4798      	blx	r3
 80036da:	6178      	str	r0, [r7, #20]

    /* setup the header */
    message_out[0] = 0xff;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	22ff      	movs	r2, #255	; 0xff
 80036e0:	f883 2624 	strb.w	r2, [r3, #1572]	; 0x624
    message_out[1] = PROTOCOL_VER;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	22fe      	movs	r2, #254	; 0xfe
 80036e8:	f883 2625 	strb.w	r2, [r3, #1573]	; 0x625
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 80036ec:	697b      	ldr	r3, [r7, #20]
 80036ee:	b2da      	uxtb	r2, r3
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	f883 2626 	strb.w	r2, [r3, #1574]	; 0x626
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 80036f6:	697b      	ldr	r3, [r7, #20]
 80036f8:	b29b      	uxth	r3, r3
 80036fa:	0a1b      	lsrs	r3, r3, #8
 80036fc:	b29b      	uxth	r3, r3
 80036fe:	b2da      	uxtb	r2, r3
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	f883 2627 	strb.w	r2, [r3, #1575]	; 0x627
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	f893 2626 	ldrb.w	r2, [r3, #1574]	; 0x626
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	f893 3627 	ldrb.w	r3, [r3, #1575]	; 0x627
 8003712:	4413      	add	r3, r2
 8003714:	b2db      	uxtb	r3, r3
 8003716:	43db      	mvns	r3, r3
 8003718:	b2da      	uxtb	r2, r3
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	f883 2628 	strb.w	r2, [r3, #1576]	; 0x628
    message_out[5] = (uint8_t)((int16_t)id & 255);
 8003720:	68bb      	ldr	r3, [r7, #8]
 8003722:	b2da      	uxtb	r2, r3
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	f883 2629 	strb.w	r2, [r3, #1577]	; 0x629
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 800372a:	68bb      	ldr	r3, [r7, #8]
 800372c:	b21b      	sxth	r3, r3
 800372e:	121b      	asrs	r3, r3, #8
 8003730:	b21b      	sxth	r3, r3
 8003732:	b2da      	uxtb	r2, r3
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	f883 262a 	strb.w	r2, [r3, #1578]	; 0x62a

    /* calculate checksum */
    int chk = 0;
 800373a:	2300      	movs	r3, #0
 800373c:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 800373e:	2305      	movs	r3, #5
 8003740:	61bb      	str	r3, [r7, #24]
 8003742:	697b      	ldr	r3, [r7, #20]
 8003744:	3306      	adds	r3, #6
 8003746:	69ba      	ldr	r2, [r7, #24]
 8003748:	429a      	cmp	r2, r3
 800374a:	dc0d      	bgt.n	8003768 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xc8>
      chk += message_out[i];
 800374c:	68fa      	ldr	r2, [r7, #12]
 800374e:	69bb      	ldr	r3, [r7, #24]
 8003750:	4413      	add	r3, r2
 8003752:	f203 6324 	addw	r3, r3, #1572	; 0x624
 8003756:	781b      	ldrb	r3, [r3, #0]
 8003758:	461a      	mov	r2, r3
 800375a:	69fb      	ldr	r3, [r7, #28]
 800375c:	4413      	add	r3, r2
 800375e:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8003760:	69bb      	ldr	r3, [r7, #24]
 8003762:	3301      	adds	r3, #1
 8003764:	61bb      	str	r3, [r7, #24]
 8003766:	e7ec      	b.n	8003742 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xa2>
    l += 7;
 8003768:	697b      	ldr	r3, [r7, #20]
 800376a:	3307      	adds	r3, #7
 800376c:	617b      	str	r3, [r7, #20]
    message_out[l++] = 255 - (chk % 256);
 800376e:	69fb      	ldr	r3, [r7, #28]
 8003770:	425a      	negs	r2, r3
 8003772:	b2db      	uxtb	r3, r3
 8003774:	b2d2      	uxtb	r2, r2
 8003776:	bf58      	it	pl
 8003778:	4253      	negpl	r3, r2
 800377a:	b2da      	uxtb	r2, r3
 800377c:	697b      	ldr	r3, [r7, #20]
 800377e:	1c59      	adds	r1, r3, #1
 8003780:	6179      	str	r1, [r7, #20]
 8003782:	43d2      	mvns	r2, r2
 8003784:	b2d1      	uxtb	r1, r2
 8003786:	68fa      	ldr	r2, [r7, #12]
 8003788:	4413      	add	r3, r2
 800378a:	460a      	mov	r2, r1
 800378c:	f883 2624 	strb.w	r2, [r3, #1572]	; 0x624

    if (l <= OUTPUT_SIZE)
 8003790:	697b      	ldr	r3, [r7, #20]
 8003792:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003796:	dc0a      	bgt.n	80037ae <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x10e>
    {
      hardware_.write(message_out, l);
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	1d18      	adds	r0, r3, #4
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	f203 6324 	addw	r3, r3, #1572	; 0x624
 80037a2:	697a      	ldr	r2, [r7, #20]
 80037a4:	4619      	mov	r1, r3
 80037a6:	f7fe f9c3 	bl	8001b30 <_ZN13STM32Hardware5writeEPhi>
      return l;
 80037aa:	697b      	ldr	r3, [r7, #20]
 80037ac:	e005      	b.n	80037ba <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x11a>
    }
    else
    {
      logerror("Message from device dropped: message larger than buffer.");
 80037ae:	4905      	ldr	r1, [pc, #20]	; (80037c4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x124>)
 80037b0:	68f8      	ldr	r0, [r7, #12]
 80037b2:	f000 f85a 	bl	800386a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>
      return -1;
 80037b6:	f04f 33ff 	mov.w	r3, #4294967295
    }
  }
 80037ba:	4618      	mov	r0, r3
 80037bc:	3720      	adds	r7, #32
 80037be:	46bd      	mov	sp, r7
 80037c0:	bd80      	pop	{r7, pc}
 80037c2:	bf00      	nop
 80037c4:	0800c290 	.word	0x0800c290

080037c8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE>:
  void setNow(Time & new_now)
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b084      	sub	sp, #16
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
 80037d0:	6039      	str	r1, [r7, #0]
    uint32_t ms = hardware_.time();
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	3304      	adds	r3, #4
 80037d6:	4618      	mov	r0, r3
 80037d8:	f7fe f9f0 	bl	8001bbc <_ZN13STM32Hardware4timeEv>
 80037dc:	60f8      	str	r0, [r7, #12]
    sec_offset = new_now.sec - ms / 1000 - 1;
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	681a      	ldr	r2, [r3, #0]
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	4915      	ldr	r1, [pc, #84]	; (800383c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x74>)
 80037e6:	fba1 1303 	umull	r1, r3, r1, r3
 80037ea:	099b      	lsrs	r3, r3, #6
 80037ec:	1ad3      	subs	r3, r2, r3
 80037ee:	1e5a      	subs	r2, r3, #1
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 80037f6:	683b      	ldr	r3, [r7, #0]
 80037f8:	6859      	ldr	r1, [r3, #4]
 80037fa:	68fa      	ldr	r2, [r7, #12]
 80037fc:	4b0f      	ldr	r3, [pc, #60]	; (800383c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x74>)
 80037fe:	fba3 0302 	umull	r0, r3, r3, r2
 8003802:	099b      	lsrs	r3, r3, #6
 8003804:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003808:	fb00 f303 	mul.w	r3, r0, r3
 800380c:	1ad3      	subs	r3, r2, r3
 800380e:	4a0c      	ldr	r2, [pc, #48]	; (8003840 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x78>)
 8003810:	fb02 f303 	mul.w	r3, r2, r3
 8003814:	1aca      	subs	r2, r1, r3
 8003816:	4b0b      	ldr	r3, [pc, #44]	; (8003844 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x7c>)
 8003818:	4413      	add	r3, r2
 800381a:	687a      	ldr	r2, [r7, #4]
 800381c:	f8c2 341c 	str.w	r3, [r2, #1052]	; 0x41c
    normalizeSecNSec(sec_offset, nsec_offset);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	f503 6283 	add.w	r2, r3, #1048	; 0x418
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	f203 431c 	addw	r3, r3, #1052	; 0x41c
 800382c:	4619      	mov	r1, r3
 800382e:	4610      	mov	r0, r2
 8003830:	f7fd f9e6 	bl	8000c00 <_ZN3ros16normalizeSecNSecERmS0_>
  }
 8003834:	bf00      	nop
 8003836:	3710      	adds	r7, #16
 8003838:	46bd      	mov	sp, r7
 800383a:	bd80      	pop	{r7, pc}
 800383c:	10624dd3 	.word	0x10624dd3
 8003840:	000f4240 	.word	0x000f4240
 8003844:	3b9aca00 	.word	0x3b9aca00

08003848 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE16_M_construct_auxIPcEEvT_S7_St12__false_type>:
        _M_construct_aux(_InIterator __beg, _InIterator __end,
 8003848:	b590      	push	{r4, r7, lr}
 800384a:	b087      	sub	sp, #28
 800384c:	af00      	add	r7, sp, #0
 800384e:	60f8      	str	r0, [r7, #12]
 8003850:	60b9      	str	r1, [r7, #8]
 8003852:	607a      	str	r2, [r7, #4]
 8003854:	703b      	strb	r3, [r7, #0]
          _M_construct(__beg, __end, _Tag());
 8003856:	4623      	mov	r3, r4
 8003858:	687a      	ldr	r2, [r7, #4]
 800385a:	68b9      	ldr	r1, [r7, #8]
 800385c:	68f8      	ldr	r0, [r7, #12]
 800385e:	f000 f813 	bl	8003888 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>
	}
 8003862:	bf00      	nop
 8003864:	371c      	adds	r7, #28
 8003866:	46bd      	mov	sp, r7
 8003868:	bd90      	pop	{r4, r7, pc}

0800386a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>:
  }
  void logwarn(const char *msg)
  {
    log(rosserial_msgs::Log::WARN, msg);
  }
  void logerror(const char*msg)
 800386a:	b580      	push	{r7, lr}
 800386c:	b082      	sub	sp, #8
 800386e:	af00      	add	r7, sp, #0
 8003870:	6078      	str	r0, [r7, #4]
 8003872:	6039      	str	r1, [r7, #0]
  {
    log(rosserial_msgs::Log::ERROR, msg);
 8003874:	683a      	ldr	r2, [r7, #0]
 8003876:	2103      	movs	r1, #3
 8003878:	6878      	ldr	r0, [r7, #4]
 800387a:	f000 f84d 	bl	8003918 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>
  }
 800387e:	bf00      	nop
 8003880:	3708      	adds	r7, #8
 8003882:	46bd      	mov	sp, r7
 8003884:	bd80      	pop	{r7, pc}
	...

08003888 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>:
      }

  template<typename _CharT, typename _Traits, typename _Alloc>
    template<typename _InIterator>
      void
      basic_string<_CharT, _Traits, _Alloc>::
 8003888:	b580      	push	{r7, lr}
 800388a:	b086      	sub	sp, #24
 800388c:	af00      	add	r7, sp, #0
 800388e:	60f8      	str	r0, [r7, #12]
 8003890:	60b9      	str	r1, [r7, #8]
 8003892:	607a      	str	r2, [r7, #4]
 8003894:	703b      	strb	r3, [r7, #0]
      _M_construct(_InIterator __beg, _InIterator __end,
		   std::forward_iterator_tag)
      {
	// NB: Not required, but considered best practice.
	if (__gnu_cxx::__is_null_pointer(__beg) && __beg != __end)
 8003896:	68b8      	ldr	r0, [r7, #8]
 8003898:	f000 f85a 	bl	8003950 <_ZN9__gnu_cxx17__is_null_pointerIcEEbPT_>
 800389c:	4603      	mov	r3, r0
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d005      	beq.n	80038ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x26>
 80038a2:	68ba      	ldr	r2, [r7, #8]
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	429a      	cmp	r2, r3
 80038a8:	d001      	beq.n	80038ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x26>
 80038aa:	2301      	movs	r3, #1
 80038ac:	e000      	b.n	80038b0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x28>
 80038ae:	2300      	movs	r3, #0
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d002      	beq.n	80038ba <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x32>
	  std::__throw_logic_error(__N("basic_string::"
 80038b4:	4817      	ldr	r0, [pc, #92]	; (8003914 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x8c>)
 80038b6:	f007 fb51 	bl	800af5c <_ZSt19__throw_logic_errorPKc>
				       "_M_construct null not valid"));

	size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));
 80038ba:	6879      	ldr	r1, [r7, #4]
 80038bc:	68b8      	ldr	r0, [r7, #8]
 80038be:	f000 f857 	bl	8003970 <_ZSt8distanceIPcENSt15iterator_traitsIT_E15difference_typeES2_S2_>
 80038c2:	4603      	mov	r3, r0
 80038c4:	617b      	str	r3, [r7, #20]

	if (__dnew > size_type(_S_local_capacity))
 80038c6:	697b      	ldr	r3, [r7, #20]
 80038c8:	2b0f      	cmp	r3, #15
 80038ca:	d910      	bls.n	80038ee <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x66>
	  {
	    _M_data(_M_create(__dnew, size_type(0)));
 80038cc:	f107 0314 	add.w	r3, r7, #20
 80038d0:	2200      	movs	r2, #0
 80038d2:	4619      	mov	r1, r3
 80038d4:	68f8      	ldr	r0, [r7, #12]
 80038d6:	f007 fc07 	bl	800b0e8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 80038da:	4603      	mov	r3, r0
 80038dc:	4619      	mov	r1, r3
 80038de:	68f8      	ldr	r0, [r7, #12]
 80038e0:	f007 fbf5 	bl	800b0ce <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEPc>
	    _M_capacity(__dnew);
 80038e4:	697b      	ldr	r3, [r7, #20]
 80038e6:	4619      	mov	r1, r3
 80038e8:	68f8      	ldr	r0, [r7, #12]
 80038ea:	f007 fbf6 	bl	800b0da <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_capacityEj>
	  }

	// Check for out_of_range and length_error exceptions.
	__try
	  { this->_S_copy_chars(_M_data(), __beg, __end); }
 80038ee:	68f8      	ldr	r0, [r7, #12]
 80038f0:	f007 fbef 	bl	800b0d2 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>
 80038f4:	4603      	mov	r3, r0
 80038f6:	687a      	ldr	r2, [r7, #4]
 80038f8:	68b9      	ldr	r1, [r7, #8]
 80038fa:	4618      	mov	r0, r3
 80038fc:	f007 fc5c 	bl	800b1b8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>
	  {
	    _M_dispose();
	    __throw_exception_again;
	  }

	_M_set_length(__dnew);
 8003900:	697b      	ldr	r3, [r7, #20]
 8003902:	4619      	mov	r1, r3
 8003904:	68f8      	ldr	r0, [r7, #12]
 8003906:	f007 fbea 	bl	800b0de <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_set_lengthEj>
      }
 800390a:	bf00      	nop
 800390c:	3718      	adds	r7, #24
 800390e:	46bd      	mov	sp, r7
 8003910:	bd80      	pop	{r7, pc}
 8003912:	bf00      	nop
 8003914:	0800c2cc 	.word	0x0800c2cc

08003918 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>:
  void log(char byte, const char * msg)
 8003918:	b580      	push	{r7, lr}
 800391a:	b088      	sub	sp, #32
 800391c:	af00      	add	r7, sp, #0
 800391e:	60f8      	str	r0, [r7, #12]
 8003920:	460b      	mov	r3, r1
 8003922:	607a      	str	r2, [r7, #4]
 8003924:	72fb      	strb	r3, [r7, #11]
    rosserial_msgs::Log l;
 8003926:	f107 0314 	add.w	r3, r7, #20
 800392a:	4618      	mov	r0, r3
 800392c:	f7fd fc6a 	bl	8001204 <_ZN14rosserial_msgs3LogC1Ev>
    l.level = byte;
 8003930:	7afb      	ldrb	r3, [r7, #11]
 8003932:	763b      	strb	r3, [r7, #24]
    l.msg = (char*)msg;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	61fb      	str	r3, [r7, #28]
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f107 0214 	add.w	r2, r7, #20
 8003942:	2107      	movs	r1, #7
 8003944:	68f8      	ldr	r0, [r7, #12]
 8003946:	4798      	blx	r3
  }
 8003948:	bf00      	nop
 800394a:	3720      	adds	r7, #32
 800394c:	46bd      	mov	sp, r7
 800394e:	bd80      	pop	{r7, pc}

08003950 <_ZN9__gnu_cxx17__is_null_pointerIcEEbPT_>:


  // For use in string and vstring.
  template<typename _Type>
    inline bool
    __is_null_pointer(_Type* __ptr)
 8003950:	b480      	push	{r7}
 8003952:	b083      	sub	sp, #12
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
    { return __ptr == 0; }
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2b00      	cmp	r3, #0
 800395c:	bf0c      	ite	eq
 800395e:	2301      	moveq	r3, #1
 8003960:	2300      	movne	r3, #0
 8003962:	b2db      	uxtb	r3, r3
 8003964:	4618      	mov	r0, r3
 8003966:	370c      	adds	r7, #12
 8003968:	46bd      	mov	sp, r7
 800396a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396e:	4770      	bx	lr

08003970 <_ZSt8distanceIPcENSt15iterator_traitsIT_E15difference_typeES2_S2_>:
   *  and are constant time.  For other %iterator classes they are linear time.
  */
  template<typename _InputIterator>
    inline _GLIBCXX17_CONSTEXPR
    typename iterator_traits<_InputIterator>::difference_type
    distance(_InputIterator __first, _InputIterator __last)
 8003970:	b5b0      	push	{r4, r5, r7, lr}
 8003972:	b082      	sub	sp, #8
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
 8003978:	6039      	str	r1, [r7, #0]
    {
      // concept requirements -- taken care of in __distance
      return std::__distance(__first, __last,
 800397a:	687c      	ldr	r4, [r7, #4]
			     std::__iterator_category(__first));
 800397c:	1d3b      	adds	r3, r7, #4
 800397e:	4618      	mov	r0, r3
 8003980:	f000 f80a 	bl	8003998 <_ZSt19__iterator_categoryIPcENSt15iterator_traitsIT_E17iterator_categoryERKS2_>
      return std::__distance(__first, __last,
 8003984:	462a      	mov	r2, r5
 8003986:	6839      	ldr	r1, [r7, #0]
 8003988:	4620      	mov	r0, r4
 800398a:	f000 f810 	bl	80039ae <_ZSt10__distanceIPcENSt15iterator_traitsIT_E15difference_typeES2_S2_St26random_access_iterator_tag>
 800398e:	4603      	mov	r3, r0
    }
 8003990:	4618      	mov	r0, r3
 8003992:	3708      	adds	r7, #8
 8003994:	46bd      	mov	sp, r7
 8003996:	bdb0      	pop	{r4, r5, r7, pc}

08003998 <_ZSt19__iterator_categoryIPcENSt15iterator_traitsIT_E17iterator_categoryERKS2_>:
   *  sugar for internal library use only.
  */
  template<typename _Iter>
    inline _GLIBCXX_CONSTEXPR
    typename iterator_traits<_Iter>::iterator_category
    __iterator_category(const _Iter&)
 8003998:	b480      	push	{r7}
 800399a:	b083      	sub	sp, #12
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 80039a0:	bf00      	nop
 80039a2:	4618      	mov	r0, r3
 80039a4:	370c      	adds	r7, #12
 80039a6:	46bd      	mov	sp, r7
 80039a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ac:	4770      	bx	lr

080039ae <_ZSt10__distanceIPcENSt15iterator_traitsIT_E15difference_typeES2_S2_St26random_access_iterator_tag>:
    __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,
 80039ae:	b480      	push	{r7}
 80039b0:	b085      	sub	sp, #20
 80039b2:	af00      	add	r7, sp, #0
 80039b4:	60f8      	str	r0, [r7, #12]
 80039b6:	60b9      	str	r1, [r7, #8]
 80039b8:	713a      	strb	r2, [r7, #4]
      return __last - __first;
 80039ba:	68ba      	ldr	r2, [r7, #8]
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	1ad3      	subs	r3, r2, r3
    }
 80039c0:	4618      	mov	r0, r3
 80039c2:	3714      	adds	r7, #20
 80039c4:	46bd      	mov	sp, r7
 80039c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ca:	4770      	bx	lr

080039cc <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b086      	sub	sp, #24
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
 80039d4:	6039      	str	r1, [r7, #0]
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	2b01      	cmp	r3, #1
 80039da:	d152      	bne.n	8003a82 <_Z41__static_initialization_and_destruction_0ii+0xb6>
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80039e2:	4293      	cmp	r3, r2
 80039e4:	d14d      	bne.n	8003a82 <_Z41__static_initialization_and_destruction_0ii+0xb6>
ros::NodeHandle nh;
 80039e6:	4831      	ldr	r0, [pc, #196]	; (8003aac <_Z41__static_initialization_and_destruction_0ii+0xe0>)
 80039e8:	f7ff f99c 	bl	8002d24 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>
std_msgs::String str_msg;
 80039ec:	4830      	ldr	r0, [pc, #192]	; (8003ab0 <_Z41__static_initialization_and_destruction_0ii+0xe4>)
 80039ee:	f7fe f8f1 	bl	8001bd4 <_ZN8std_msgs6StringC1Ev>
ros::Publisher chatter("chatter", &str_msg);
 80039f2:	2300      	movs	r3, #0
 80039f4:	4a2e      	ldr	r2, [pc, #184]	; (8003ab0 <_Z41__static_initialization_and_destruction_0ii+0xe4>)
 80039f6:	492f      	ldr	r1, [pc, #188]	; (8003ab4 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
 80039f8:	482f      	ldr	r0, [pc, #188]	; (8003ab8 <_Z41__static_initialization_and_destruction_0ii+0xec>)
 80039fa:	f7fd ff75 	bl	80018e8 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
ros::Subscriber<std_msgs::String> stm32_comms("gripper_action", &str_act_msg);
 80039fe:	2301      	movs	r3, #1
 8003a00:	4a2e      	ldr	r2, [pc, #184]	; (8003abc <_Z41__static_initialization_and_destruction_0ii+0xf0>)
 8003a02:	492f      	ldr	r1, [pc, #188]	; (8003ac0 <_Z41__static_initialization_and_destruction_0ii+0xf4>)
 8003a04:	482f      	ldr	r0, [pc, #188]	; (8003ac4 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
 8003a06:	f7ff fa1d 	bl	8002e44 <_ZN3ros10SubscriberIN8std_msgs6StringEvEC1EPKcPFvRKS2_Ei>
std::string hello = "STM32 to Jetson!";
 8003a0a:	f107 030c 	add.w	r3, r7, #12
 8003a0e:	4618      	mov	r0, r3
 8003a10:	f007 fa9f 	bl	800af52 <_ZNSaIcEC1Ev>
 8003a14:	f107 030c 	add.w	r3, r7, #12
 8003a18:	461a      	mov	r2, r3
 8003a1a:	492b      	ldr	r1, [pc, #172]	; (8003ac8 <_Z41__static_initialization_and_destruction_0ii+0xfc>)
 8003a1c:	482b      	ldr	r0, [pc, #172]	; (8003acc <_Z41__static_initialization_and_destruction_0ii+0x100>)
 8003a1e:	f007 fd77 	bl	800b510 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8003a22:	f107 030c 	add.w	r3, r7, #12
 8003a26:	4618      	mov	r0, r3
 8003a28:	f007 fa94 	bl	800af54 <_ZNSaIcED1Ev>
std::string global_msg = "";
 8003a2c:	f107 0310 	add.w	r3, r7, #16
 8003a30:	4618      	mov	r0, r3
 8003a32:	f007 fa8e 	bl	800af52 <_ZNSaIcEC1Ev>
 8003a36:	f107 0310 	add.w	r3, r7, #16
 8003a3a:	461a      	mov	r2, r3
 8003a3c:	4924      	ldr	r1, [pc, #144]	; (8003ad0 <_Z41__static_initialization_and_destruction_0ii+0x104>)
 8003a3e:	4825      	ldr	r0, [pc, #148]	; (8003ad4 <_Z41__static_initialization_and_destruction_0ii+0x108>)
 8003a40:	f007 fd66 	bl	800b510 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8003a44:	f107 0310 	add.w	r3, r7, #16
 8003a48:	4618      	mov	r0, r3
 8003a4a:	f007 fa83 	bl	800af54 <_ZNSaIcED1Ev>
std_msgs::String response_msg;
 8003a4e:	4822      	ldr	r0, [pc, #136]	; (8003ad8 <_Z41__static_initialization_and_destruction_0ii+0x10c>)
 8003a50:	f7fe f8c0 	bl	8001bd4 <_ZN8std_msgs6StringC1Ev>
ros::Publisher response("gripper_response", &response_msg);
 8003a54:	2300      	movs	r3, #0
 8003a56:	4a20      	ldr	r2, [pc, #128]	; (8003ad8 <_Z41__static_initialization_and_destruction_0ii+0x10c>)
 8003a58:	4920      	ldr	r1, [pc, #128]	; (8003adc <_Z41__static_initialization_and_destruction_0ii+0x110>)
 8003a5a:	4821      	ldr	r0, [pc, #132]	; (8003ae0 <_Z41__static_initialization_and_destruction_0ii+0x114>)
 8003a5c:	f7fd ff44 	bl	80018e8 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
std::string global_response = "";
 8003a60:	f107 0314 	add.w	r3, r7, #20
 8003a64:	4618      	mov	r0, r3
 8003a66:	f007 fa74 	bl	800af52 <_ZNSaIcEC1Ev>
 8003a6a:	f107 0314 	add.w	r3, r7, #20
 8003a6e:	461a      	mov	r2, r3
 8003a70:	4917      	ldr	r1, [pc, #92]	; (8003ad0 <_Z41__static_initialization_and_destruction_0ii+0x104>)
 8003a72:	481c      	ldr	r0, [pc, #112]	; (8003ae4 <_Z41__static_initialization_and_destruction_0ii+0x118>)
 8003a74:	f007 fd4c 	bl	800b510 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8003a78:	f107 0314 	add.w	r3, r7, #20
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	f007 fa69 	bl	800af54 <_ZNSaIcED1Ev>
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d10d      	bne.n	8003aa4 <_Z41__static_initialization_and_destruction_0ii+0xd8>
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003a8e:	4293      	cmp	r3, r2
 8003a90:	d108      	bne.n	8003aa4 <_Z41__static_initialization_and_destruction_0ii+0xd8>
 8003a92:	4814      	ldr	r0, [pc, #80]	; (8003ae4 <_Z41__static_initialization_and_destruction_0ii+0x118>)
 8003a94:	f007 fbf0 	bl	800b278 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
std::string global_msg = "";
 8003a98:	480e      	ldr	r0, [pc, #56]	; (8003ad4 <_Z41__static_initialization_and_destruction_0ii+0x108>)
 8003a9a:	f007 fbed 	bl	800b278 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
std::string hello = "STM32 to Jetson!";
 8003a9e:	480b      	ldr	r0, [pc, #44]	; (8003acc <_Z41__static_initialization_and_destruction_0ii+0x100>)
 8003aa0:	f007 fbea 	bl	800b278 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
}
 8003aa4:	bf00      	nop
 8003aa6:	3718      	adds	r7, #24
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	bd80      	pop	{r7, pc}
 8003aac:	200002d8 	.word	0x200002d8
 8003ab0:	20000c14 	.word	0x20000c14
 8003ab4:	0800c2f8 	.word	0x0800c2f8
 8003ab8:	20000c1c 	.word	0x20000c1c
 8003abc:	08002611 	.word	0x08002611
 8003ac0:	0800c300 	.word	0x0800c300
 8003ac4:	20000c30 	.word	0x20000c30
 8003ac8:	0800c310 	.word	0x0800c310
 8003acc:	20000c4c 	.word	0x20000c4c
 8003ad0:	0800c0ec 	.word	0x0800c0ec
 8003ad4:	20000c64 	.word	0x20000c64
 8003ad8:	20000c7c 	.word	0x20000c7c
 8003adc:	0800c324 	.word	0x0800c324
 8003ae0:	20000c84 	.word	0x20000c84
 8003ae4:	20000c98 	.word	0x20000c98

08003ae8 <_ZN3ros10SubscriberIN8std_msgs6StringEvE8callbackEPh>:

  virtual void callback(unsigned char* data)
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b082      	sub	sp, #8
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
 8003af0:	6039      	str	r1, [r7, #0]
  {
    msg.deserialize(data);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	330c      	adds	r3, #12
 8003af6:	6839      	ldr	r1, [r7, #0]
 8003af8:	4618      	mov	r0, r3
 8003afa:	f7fe f8ac 	bl	8001c56 <_ZN8std_msgs6String11deserializeEPh>
    this->cb_(msg);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	695b      	ldr	r3, [r3, #20]
 8003b02:	687a      	ldr	r2, [r7, #4]
 8003b04:	320c      	adds	r2, #12
 8003b06:	4610      	mov	r0, r2
 8003b08:	4798      	blx	r3
  }
 8003b0a:	bf00      	nop
 8003b0c:	3708      	adds	r7, #8
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	bd80      	pop	{r7, pc}

08003b12 <_ZN3ros10SubscriberIN8std_msgs6StringEvE15getEndpointTypeEv>:
  }
  virtual const char * getMsgMD5()
  {
    return this->msg.getMD5();
  }
  virtual int getEndpointType()
 8003b12:	b480      	push	{r7}
 8003b14:	b083      	sub	sp, #12
 8003b16:	af00      	add	r7, sp, #0
 8003b18:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	699b      	ldr	r3, [r3, #24]
  }
 8003b1e:	4618      	mov	r0, r3
 8003b20:	370c      	adds	r7, #12
 8003b22:	46bd      	mov	sp, r7
 8003b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b28:	4770      	bx	lr

08003b2a <_ZN3ros10SubscriberIN8std_msgs6StringEvE10getMsgTypeEv>:
  virtual const char * getMsgType()
 8003b2a:	b580      	push	{r7, lr}
 8003b2c:	b082      	sub	sp, #8
 8003b2e:	af00      	add	r7, sp, #0
 8003b30:	6078      	str	r0, [r7, #4]
    return this->msg.getType();
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	330c      	adds	r3, #12
 8003b36:	4618      	mov	r0, r3
 8003b38:	f7fe f8cc 	bl	8001cd4 <_ZN8std_msgs6String7getTypeEv>
 8003b3c:	4603      	mov	r3, r0
  }
 8003b3e:	4618      	mov	r0, r3
 8003b40:	3708      	adds	r7, #8
 8003b42:	46bd      	mov	sp, r7
 8003b44:	bd80      	pop	{r7, pc}

08003b46 <_ZN3ros10SubscriberIN8std_msgs6StringEvE9getMsgMD5Ev>:
  virtual const char * getMsgMD5()
 8003b46:	b580      	push	{r7, lr}
 8003b48:	b082      	sub	sp, #8
 8003b4a:	af00      	add	r7, sp, #0
 8003b4c:	6078      	str	r0, [r7, #4]
    return this->msg.getMD5();
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	330c      	adds	r3, #12
 8003b52:	4618      	mov	r0, r3
 8003b54:	f7fe f8cc 	bl	8001cf0 <_ZN8std_msgs6String6getMD5Ev>
 8003b58:	4603      	mov	r3, r0
  }
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	3708      	adds	r7, #8
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	bd80      	pop	{r7, pc}

08003b62 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9connectedEv>:
  virtual bool connected()
 8003b62:	b480      	push	{r7}
 8003b64:	b083      	sub	sp, #12
 8003b66:	af00      	add	r7, sp, #0
 8003b68:	6078      	str	r0, [r7, #4]
    return configured_;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
  };
 8003b70:	4618      	mov	r0, r3
 8003b72:	370c      	adds	r7, #12
 8003b74:	46bd      	mov	sp, r7
 8003b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7a:	4770      	bx	lr

08003b7c <_GLOBAL__sub_I_hadc1>:
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	af00      	add	r7, sp, #0
 8003b80:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003b84:	2001      	movs	r0, #1
 8003b86:	f7ff ff21 	bl	80039cc <_Z41__static_initialization_and_destruction_0ii>
 8003b8a:	bd80      	pop	{r7, pc}

08003b8c <_GLOBAL__sub_D_hadc1>:
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	af00      	add	r7, sp, #0
 8003b90:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003b94:	2000      	movs	r0, #0
 8003b96:	f7ff ff19 	bl	80039cc <_Z41__static_initialization_and_destruction_0ii>
 8003b9a:	bd80      	pop	{r7, pc}

08003b9c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b082      	sub	sp, #8
 8003ba0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	607b      	str	r3, [r7, #4]
 8003ba6:	4b12      	ldr	r3, [pc, #72]	; (8003bf0 <HAL_MspInit+0x54>)
 8003ba8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003baa:	4a11      	ldr	r2, [pc, #68]	; (8003bf0 <HAL_MspInit+0x54>)
 8003bac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003bb0:	6453      	str	r3, [r2, #68]	; 0x44
 8003bb2:	4b0f      	ldr	r3, [pc, #60]	; (8003bf0 <HAL_MspInit+0x54>)
 8003bb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bb6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003bba:	607b      	str	r3, [r7, #4]
 8003bbc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	603b      	str	r3, [r7, #0]
 8003bc2:	4b0b      	ldr	r3, [pc, #44]	; (8003bf0 <HAL_MspInit+0x54>)
 8003bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bc6:	4a0a      	ldr	r2, [pc, #40]	; (8003bf0 <HAL_MspInit+0x54>)
 8003bc8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003bcc:	6413      	str	r3, [r2, #64]	; 0x40
 8003bce:	4b08      	ldr	r3, [pc, #32]	; (8003bf0 <HAL_MspInit+0x54>)
 8003bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bd6:	603b      	str	r3, [r7, #0]
 8003bd8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003bda:	2200      	movs	r2, #0
 8003bdc:	210f      	movs	r1, #15
 8003bde:	f06f 0001 	mvn.w	r0, #1
 8003be2:	f000 ffcd 	bl	8004b80 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003be6:	bf00      	nop
 8003be8:	3708      	adds	r7, #8
 8003bea:	46bd      	mov	sp, r7
 8003bec:	bd80      	pop	{r7, pc}
 8003bee:	bf00      	nop
 8003bf0:	40023800 	.word	0x40023800

08003bf4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b08a      	sub	sp, #40	; 0x28
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003bfc:	f107 0314 	add.w	r3, r7, #20
 8003c00:	2200      	movs	r2, #0
 8003c02:	601a      	str	r2, [r3, #0]
 8003c04:	605a      	str	r2, [r3, #4]
 8003c06:	609a      	str	r2, [r3, #8]
 8003c08:	60da      	str	r2, [r3, #12]
 8003c0a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	4a2e      	ldr	r2, [pc, #184]	; (8003ccc <HAL_ADC_MspInit+0xd8>)
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d156      	bne.n	8003cc4 <HAL_ADC_MspInit+0xd0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003c16:	2300      	movs	r3, #0
 8003c18:	613b      	str	r3, [r7, #16]
 8003c1a:	4b2d      	ldr	r3, [pc, #180]	; (8003cd0 <HAL_ADC_MspInit+0xdc>)
 8003c1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c1e:	4a2c      	ldr	r2, [pc, #176]	; (8003cd0 <HAL_ADC_MspInit+0xdc>)
 8003c20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c24:	6453      	str	r3, [r2, #68]	; 0x44
 8003c26:	4b2a      	ldr	r3, [pc, #168]	; (8003cd0 <HAL_ADC_MspInit+0xdc>)
 8003c28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c2e:	613b      	str	r3, [r7, #16]
 8003c30:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003c32:	2300      	movs	r3, #0
 8003c34:	60fb      	str	r3, [r7, #12]
 8003c36:	4b26      	ldr	r3, [pc, #152]	; (8003cd0 <HAL_ADC_MspInit+0xdc>)
 8003c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c3a:	4a25      	ldr	r2, [pc, #148]	; (8003cd0 <HAL_ADC_MspInit+0xdc>)
 8003c3c:	f043 0302 	orr.w	r3, r3, #2
 8003c40:	6313      	str	r3, [r2, #48]	; 0x30
 8003c42:	4b23      	ldr	r3, [pc, #140]	; (8003cd0 <HAL_ADC_MspInit+0xdc>)
 8003c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c46:	f003 0302 	and.w	r3, r3, #2
 8003c4a:	60fb      	str	r3, [r7, #12]
 8003c4c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = Gripper_Pot_Pin|Art_Pot_Pin;
 8003c4e:	2303      	movs	r3, #3
 8003c50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003c52:	2303      	movs	r3, #3
 8003c54:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c56:	2300      	movs	r3, #0
 8003c58:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c5a:	f107 0314 	add.w	r3, r7, #20
 8003c5e:	4619      	mov	r1, r3
 8003c60:	481c      	ldr	r0, [pc, #112]	; (8003cd4 <HAL_ADC_MspInit+0xe0>)
 8003c62:	f001 fbb9 	bl	80053d8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8003c66:	4b1c      	ldr	r3, [pc, #112]	; (8003cd8 <HAL_ADC_MspInit+0xe4>)
 8003c68:	4a1c      	ldr	r2, [pc, #112]	; (8003cdc <HAL_ADC_MspInit+0xe8>)
 8003c6a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8003c6c:	4b1a      	ldr	r3, [pc, #104]	; (8003cd8 <HAL_ADC_MspInit+0xe4>)
 8003c6e:	2200      	movs	r2, #0
 8003c70:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003c72:	4b19      	ldr	r3, [pc, #100]	; (8003cd8 <HAL_ADC_MspInit+0xe4>)
 8003c74:	2200      	movs	r2, #0
 8003c76:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003c78:	4b17      	ldr	r3, [pc, #92]	; (8003cd8 <HAL_ADC_MspInit+0xe4>)
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8003c7e:	4b16      	ldr	r3, [pc, #88]	; (8003cd8 <HAL_ADC_MspInit+0xe4>)
 8003c80:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003c84:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003c86:	4b14      	ldr	r3, [pc, #80]	; (8003cd8 <HAL_ADC_MspInit+0xe4>)
 8003c88:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003c8c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003c8e:	4b12      	ldr	r3, [pc, #72]	; (8003cd8 <HAL_ADC_MspInit+0xe4>)
 8003c90:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003c94:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8003c96:	4b10      	ldr	r3, [pc, #64]	; (8003cd8 <HAL_ADC_MspInit+0xe4>)
 8003c98:	2200      	movs	r2, #0
 8003c9a:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8003c9c:	4b0e      	ldr	r3, [pc, #56]	; (8003cd8 <HAL_ADC_MspInit+0xe4>)
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003ca2:	4b0d      	ldr	r3, [pc, #52]	; (8003cd8 <HAL_ADC_MspInit+0xe4>)
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8003ca8:	480b      	ldr	r0, [pc, #44]	; (8003cd8 <HAL_ADC_MspInit+0xe4>)
 8003caa:	f000 ff93 	bl	8004bd4 <HAL_DMA_Init>
 8003cae:	4603      	mov	r3, r0
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d001      	beq.n	8003cb8 <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 8003cb4:	f7fe ffa6 	bl	8002c04 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	4a07      	ldr	r2, [pc, #28]	; (8003cd8 <HAL_ADC_MspInit+0xe4>)
 8003cbc:	639a      	str	r2, [r3, #56]	; 0x38
 8003cbe:	4a06      	ldr	r2, [pc, #24]	; (8003cd8 <HAL_ADC_MspInit+0xe4>)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003cc4:	bf00      	nop
 8003cc6:	3728      	adds	r7, #40	; 0x28
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	bd80      	pop	{r7, pc}
 8003ccc:	40012000 	.word	0x40012000
 8003cd0:	40023800 	.word	0x40023800
 8003cd4:	40020400 	.word	0x40020400
 8003cd8:	200000e0 	.word	0x200000e0
 8003cdc:	40026410 	.word	0x40026410

08003ce0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003ce0:	b480      	push	{r7}
 8003ce2:	b085      	sub	sp, #20
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003cf0:	d10d      	bne.n	8003d0e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	60fb      	str	r3, [r7, #12]
 8003cf6:	4b09      	ldr	r3, [pc, #36]	; (8003d1c <HAL_TIM_Base_MspInit+0x3c>)
 8003cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cfa:	4a08      	ldr	r2, [pc, #32]	; (8003d1c <HAL_TIM_Base_MspInit+0x3c>)
 8003cfc:	f043 0301 	orr.w	r3, r3, #1
 8003d00:	6413      	str	r3, [r2, #64]	; 0x40
 8003d02:	4b06      	ldr	r3, [pc, #24]	; (8003d1c <HAL_TIM_Base_MspInit+0x3c>)
 8003d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d06:	f003 0301 	and.w	r3, r3, #1
 8003d0a:	60fb      	str	r3, [r7, #12]
 8003d0c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8003d0e:	bf00      	nop
 8003d10:	3714      	adds	r7, #20
 8003d12:	46bd      	mov	sp, r7
 8003d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d18:	4770      	bx	lr
 8003d1a:	bf00      	nop
 8003d1c:	40023800 	.word	0x40023800

08003d20 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b088      	sub	sp, #32
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d28:	f107 030c 	add.w	r3, r7, #12
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	601a      	str	r2, [r3, #0]
 8003d30:	605a      	str	r2, [r3, #4]
 8003d32:	609a      	str	r2, [r3, #8]
 8003d34:	60da      	str	r2, [r3, #12]
 8003d36:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d40:	d11d      	bne.n	8003d7e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d42:	2300      	movs	r3, #0
 8003d44:	60bb      	str	r3, [r7, #8]
 8003d46:	4b10      	ldr	r3, [pc, #64]	; (8003d88 <HAL_TIM_MspPostInit+0x68>)
 8003d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d4a:	4a0f      	ldr	r2, [pc, #60]	; (8003d88 <HAL_TIM_MspPostInit+0x68>)
 8003d4c:	f043 0301 	orr.w	r3, r3, #1
 8003d50:	6313      	str	r3, [r2, #48]	; 0x30
 8003d52:	4b0d      	ldr	r3, [pc, #52]	; (8003d88 <HAL_TIM_MspPostInit+0x68>)
 8003d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d56:	f003 0301 	and.w	r3, r3, #1
 8003d5a:	60bb      	str	r3, [r7, #8]
 8003d5c:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = Gripper_Servo_Pin|Art_Servo_Pin;
 8003d5e:	2303      	movs	r3, #3
 8003d60:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d62:	2302      	movs	r3, #2
 8003d64:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d66:	2300      	movs	r3, #0
 8003d68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003d6e:	2301      	movs	r3, #1
 8003d70:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d72:	f107 030c 	add.w	r3, r7, #12
 8003d76:	4619      	mov	r1, r3
 8003d78:	4804      	ldr	r0, [pc, #16]	; (8003d8c <HAL_TIM_MspPostInit+0x6c>)
 8003d7a:	f001 fb2d 	bl	80053d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8003d7e:	bf00      	nop
 8003d80:	3720      	adds	r7, #32
 8003d82:	46bd      	mov	sp, r7
 8003d84:	bd80      	pop	{r7, pc}
 8003d86:	bf00      	nop
 8003d88:	40023800 	.word	0x40023800
 8003d8c:	40020000 	.word	0x40020000

08003d90 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b08a      	sub	sp, #40	; 0x28
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d98:	f107 0314 	add.w	r3, r7, #20
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	601a      	str	r2, [r3, #0]
 8003da0:	605a      	str	r2, [r3, #4]
 8003da2:	609a      	str	r2, [r3, #8]
 8003da4:	60da      	str	r2, [r3, #12]
 8003da6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	4a4b      	ldr	r2, [pc, #300]	; (8003edc <HAL_UART_MspInit+0x14c>)
 8003dae:	4293      	cmp	r3, r2
 8003db0:	f040 8090 	bne.w	8003ed4 <HAL_UART_MspInit+0x144>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003db4:	2300      	movs	r3, #0
 8003db6:	613b      	str	r3, [r7, #16]
 8003db8:	4b49      	ldr	r3, [pc, #292]	; (8003ee0 <HAL_UART_MspInit+0x150>)
 8003dba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dbc:	4a48      	ldr	r2, [pc, #288]	; (8003ee0 <HAL_UART_MspInit+0x150>)
 8003dbe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003dc2:	6413      	str	r3, [r2, #64]	; 0x40
 8003dc4:	4b46      	ldr	r3, [pc, #280]	; (8003ee0 <HAL_UART_MspInit+0x150>)
 8003dc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dc8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dcc:	613b      	str	r3, [r7, #16]
 8003dce:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	60fb      	str	r3, [r7, #12]
 8003dd4:	4b42      	ldr	r3, [pc, #264]	; (8003ee0 <HAL_UART_MspInit+0x150>)
 8003dd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dd8:	4a41      	ldr	r2, [pc, #260]	; (8003ee0 <HAL_UART_MspInit+0x150>)
 8003dda:	f043 0301 	orr.w	r3, r3, #1
 8003dde:	6313      	str	r3, [r2, #48]	; 0x30
 8003de0:	4b3f      	ldr	r3, [pc, #252]	; (8003ee0 <HAL_UART_MspInit+0x150>)
 8003de2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003de4:	f003 0301 	and.w	r3, r3, #1
 8003de8:	60fb      	str	r3, [r7, #12]
 8003dea:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003dec:	230c      	movs	r3, #12
 8003dee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003df0:	2302      	movs	r3, #2
 8003df2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003df4:	2300      	movs	r3, #0
 8003df6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003df8:	2303      	movs	r3, #3
 8003dfa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003dfc:	2307      	movs	r3, #7
 8003dfe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e00:	f107 0314 	add.w	r3, r7, #20
 8003e04:	4619      	mov	r1, r3
 8003e06:	4837      	ldr	r0, [pc, #220]	; (8003ee4 <HAL_UART_MspInit+0x154>)
 8003e08:	f001 fae6 	bl	80053d8 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8003e0c:	4b36      	ldr	r3, [pc, #216]	; (8003ee8 <HAL_UART_MspInit+0x158>)
 8003e0e:	4a37      	ldr	r2, [pc, #220]	; (8003eec <HAL_UART_MspInit+0x15c>)
 8003e10:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8003e12:	4b35      	ldr	r3, [pc, #212]	; (8003ee8 <HAL_UART_MspInit+0x158>)
 8003e14:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003e18:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003e1a:	4b33      	ldr	r3, [pc, #204]	; (8003ee8 <HAL_UART_MspInit+0x158>)
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003e20:	4b31      	ldr	r3, [pc, #196]	; (8003ee8 <HAL_UART_MspInit+0x158>)
 8003e22:	2200      	movs	r2, #0
 8003e24:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003e26:	4b30      	ldr	r3, [pc, #192]	; (8003ee8 <HAL_UART_MspInit+0x158>)
 8003e28:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003e2c:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003e2e:	4b2e      	ldr	r3, [pc, #184]	; (8003ee8 <HAL_UART_MspInit+0x158>)
 8003e30:	2200      	movs	r2, #0
 8003e32:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003e34:	4b2c      	ldr	r3, [pc, #176]	; (8003ee8 <HAL_UART_MspInit+0x158>)
 8003e36:	2200      	movs	r2, #0
 8003e38:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8003e3a:	4b2b      	ldr	r3, [pc, #172]	; (8003ee8 <HAL_UART_MspInit+0x158>)
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003e40:	4b29      	ldr	r3, [pc, #164]	; (8003ee8 <HAL_UART_MspInit+0x158>)
 8003e42:	2200      	movs	r2, #0
 8003e44:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003e46:	4b28      	ldr	r3, [pc, #160]	; (8003ee8 <HAL_UART_MspInit+0x158>)
 8003e48:	2200      	movs	r2, #0
 8003e4a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8003e4c:	4826      	ldr	r0, [pc, #152]	; (8003ee8 <HAL_UART_MspInit+0x158>)
 8003e4e:	f000 fec1 	bl	8004bd4 <HAL_DMA_Init>
 8003e52:	4603      	mov	r3, r0
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d001      	beq.n	8003e5c <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8003e58:	f7fe fed4 	bl	8002c04 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	4a22      	ldr	r2, [pc, #136]	; (8003ee8 <HAL_UART_MspInit+0x158>)
 8003e60:	639a      	str	r2, [r3, #56]	; 0x38
 8003e62:	4a21      	ldr	r2, [pc, #132]	; (8003ee8 <HAL_UART_MspInit+0x158>)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8003e68:	4b21      	ldr	r3, [pc, #132]	; (8003ef0 <HAL_UART_MspInit+0x160>)
 8003e6a:	4a22      	ldr	r2, [pc, #136]	; (8003ef4 <HAL_UART_MspInit+0x164>)
 8003e6c:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8003e6e:	4b20      	ldr	r3, [pc, #128]	; (8003ef0 <HAL_UART_MspInit+0x160>)
 8003e70:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003e74:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003e76:	4b1e      	ldr	r3, [pc, #120]	; (8003ef0 <HAL_UART_MspInit+0x160>)
 8003e78:	2240      	movs	r2, #64	; 0x40
 8003e7a:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003e7c:	4b1c      	ldr	r3, [pc, #112]	; (8003ef0 <HAL_UART_MspInit+0x160>)
 8003e7e:	2200      	movs	r2, #0
 8003e80:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003e82:	4b1b      	ldr	r3, [pc, #108]	; (8003ef0 <HAL_UART_MspInit+0x160>)
 8003e84:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003e88:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003e8a:	4b19      	ldr	r3, [pc, #100]	; (8003ef0 <HAL_UART_MspInit+0x160>)
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003e90:	4b17      	ldr	r3, [pc, #92]	; (8003ef0 <HAL_UART_MspInit+0x160>)
 8003e92:	2200      	movs	r2, #0
 8003e94:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8003e96:	4b16      	ldr	r3, [pc, #88]	; (8003ef0 <HAL_UART_MspInit+0x160>)
 8003e98:	2200      	movs	r2, #0
 8003e9a:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003e9c:	4b14      	ldr	r3, [pc, #80]	; (8003ef0 <HAL_UART_MspInit+0x160>)
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003ea2:	4b13      	ldr	r3, [pc, #76]	; (8003ef0 <HAL_UART_MspInit+0x160>)
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8003ea8:	4811      	ldr	r0, [pc, #68]	; (8003ef0 <HAL_UART_MspInit+0x160>)
 8003eaa:	f000 fe93 	bl	8004bd4 <HAL_DMA_Init>
 8003eae:	4603      	mov	r3, r0
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d001      	beq.n	8003eb8 <HAL_UART_MspInit+0x128>
    {
      Error_Handler();
 8003eb4:	f7fe fea6 	bl	8002c04 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	4a0d      	ldr	r2, [pc, #52]	; (8003ef0 <HAL_UART_MspInit+0x160>)
 8003ebc:	635a      	str	r2, [r3, #52]	; 0x34
 8003ebe:	4a0c      	ldr	r2, [pc, #48]	; (8003ef0 <HAL_UART_MspInit+0x160>)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	2105      	movs	r1, #5
 8003ec8:	2026      	movs	r0, #38	; 0x26
 8003eca:	f000 fe59 	bl	8004b80 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003ece:	2026      	movs	r0, #38	; 0x26
 8003ed0:	f000 fe72 	bl	8004bb8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003ed4:	bf00      	nop
 8003ed6:	3728      	adds	r7, #40	; 0x28
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	bd80      	pop	{r7, pc}
 8003edc:	40004400 	.word	0x40004400
 8003ee0:	40023800 	.word	0x40023800
 8003ee4:	40020000 	.word	0x40020000
 8003ee8:	200001cc 	.word	0x200001cc
 8003eec:	40026088 	.word	0x40026088
 8003ef0:	2000022c 	.word	0x2000022c
 8003ef4:	400260a0 	.word	0x400260a0

08003ef8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b08e      	sub	sp, #56	; 0x38
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8003f00:	2300      	movs	r3, #0
 8003f02:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8003f04:	2300      	movs	r3, #0
 8003f06:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 8003f08:	2300      	movs	r3, #0
 8003f0a:	60fb      	str	r3, [r7, #12]
 8003f0c:	4b33      	ldr	r3, [pc, #204]	; (8003fdc <HAL_InitTick+0xe4>)
 8003f0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f10:	4a32      	ldr	r2, [pc, #200]	; (8003fdc <HAL_InitTick+0xe4>)
 8003f12:	f043 0308 	orr.w	r3, r3, #8
 8003f16:	6413      	str	r3, [r2, #64]	; 0x40
 8003f18:	4b30      	ldr	r3, [pc, #192]	; (8003fdc <HAL_InitTick+0xe4>)
 8003f1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f1c:	f003 0308 	and.w	r3, r3, #8
 8003f20:	60fb      	str	r3, [r7, #12]
 8003f22:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003f24:	f107 0210 	add.w	r2, r7, #16
 8003f28:	f107 0314 	add.w	r3, r7, #20
 8003f2c:	4611      	mov	r1, r2
 8003f2e:	4618      	mov	r0, r3
 8003f30:	f002 f87a 	bl	8006028 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8003f34:	6a3b      	ldr	r3, [r7, #32]
 8003f36:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM5 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8003f38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d103      	bne.n	8003f46 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8003f3e:	f002 f84b 	bl	8005fd8 <HAL_RCC_GetPCLK1Freq>
 8003f42:	6378      	str	r0, [r7, #52]	; 0x34
 8003f44:	e004      	b.n	8003f50 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8003f46:	f002 f847 	bl	8005fd8 <HAL_RCC_GetPCLK1Freq>
 8003f4a:	4603      	mov	r3, r0
 8003f4c:	005b      	lsls	r3, r3, #1
 8003f4e:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003f50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f52:	4a23      	ldr	r2, [pc, #140]	; (8003fe0 <HAL_InitTick+0xe8>)
 8003f54:	fba2 2303 	umull	r2, r3, r2, r3
 8003f58:	0c9b      	lsrs	r3, r3, #18
 8003f5a:	3b01      	subs	r3, #1
 8003f5c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 8003f5e:	4b21      	ldr	r3, [pc, #132]	; (8003fe4 <HAL_InitTick+0xec>)
 8003f60:	4a21      	ldr	r2, [pc, #132]	; (8003fe8 <HAL_InitTick+0xf0>)
 8003f62:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000U / 1000U) - 1U;
 8003f64:	4b1f      	ldr	r3, [pc, #124]	; (8003fe4 <HAL_InitTick+0xec>)
 8003f66:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003f6a:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 8003f6c:	4a1d      	ldr	r2, [pc, #116]	; (8003fe4 <HAL_InitTick+0xec>)
 8003f6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f70:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 8003f72:	4b1c      	ldr	r3, [pc, #112]	; (8003fe4 <HAL_InitTick+0xec>)
 8003f74:	2200      	movs	r2, #0
 8003f76:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003f78:	4b1a      	ldr	r3, [pc, #104]	; (8003fe4 <HAL_InitTick+0xec>)
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	609a      	str	r2, [r3, #8]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003f7e:	4b19      	ldr	r3, [pc, #100]	; (8003fe4 <HAL_InitTick+0xec>)
 8003f80:	2200      	movs	r2, #0
 8003f82:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim5);
 8003f84:	4817      	ldr	r0, [pc, #92]	; (8003fe4 <HAL_InitTick+0xec>)
 8003f86:	f002 f881 	bl	800608c <HAL_TIM_Base_Init>
 8003f8a:	4603      	mov	r3, r0
 8003f8c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8003f90:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d11b      	bne.n	8003fd0 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim5);
 8003f98:	4812      	ldr	r0, [pc, #72]	; (8003fe4 <HAL_InitTick+0xec>)
 8003f9a:	f002 f8c7 	bl	800612c <HAL_TIM_Base_Start_IT>
 8003f9e:	4603      	mov	r3, r0
 8003fa0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8003fa4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d111      	bne.n	8003fd0 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM5 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8003fac:	2032      	movs	r0, #50	; 0x32
 8003fae:	f000 fe03 	bl	8004bb8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	2b0f      	cmp	r3, #15
 8003fb6:	d808      	bhi.n	8003fca <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority, 0U);
 8003fb8:	2200      	movs	r2, #0
 8003fba:	6879      	ldr	r1, [r7, #4]
 8003fbc:	2032      	movs	r0, #50	; 0x32
 8003fbe:	f000 fddf 	bl	8004b80 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003fc2:	4a0a      	ldr	r2, [pc, #40]	; (8003fec <HAL_InitTick+0xf4>)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6013      	str	r3, [r2, #0]
 8003fc8:	e002      	b.n	8003fd0 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8003fca:	2301      	movs	r3, #1
 8003fcc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8003fd0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	3738      	adds	r7, #56	; 0x38
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	bd80      	pop	{r7, pc}
 8003fdc:	40023800 	.word	0x40023800
 8003fe0:	431bde83 	.word	0x431bde83
 8003fe4:	20000cb0 	.word	0x20000cb0
 8003fe8:	40000c00 	.word	0x40000c00
 8003fec:	20000004 	.word	0x20000004

08003ff0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003ff0:	b480      	push	{r7}
 8003ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003ff4:	e7fe      	b.n	8003ff4 <NMI_Handler+0x4>

08003ff6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003ff6:	b480      	push	{r7}
 8003ff8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003ffa:	e7fe      	b.n	8003ffa <HardFault_Handler+0x4>

08003ffc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003ffc:	b480      	push	{r7}
 8003ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004000:	e7fe      	b.n	8004000 <MemManage_Handler+0x4>

08004002 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004002:	b480      	push	{r7}
 8004004:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004006:	e7fe      	b.n	8004006 <BusFault_Handler+0x4>

08004008 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004008:	b480      	push	{r7}
 800400a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800400c:	e7fe      	b.n	800400c <UsageFault_Handler+0x4>

0800400e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800400e:	b480      	push	{r7}
 8004010:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004012:	bf00      	nop
 8004014:	46bd      	mov	sp, r7
 8004016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401a:	4770      	bx	lr

0800401c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 800401c:	b580      	push	{r7, lr}
 800401e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8004020:	4802      	ldr	r0, [pc, #8]	; (800402c <DMA1_Stream5_IRQHandler+0x10>)
 8004022:	f000 ff6f 	bl	8004f04 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8004026:	bf00      	nop
 8004028:	bd80      	pop	{r7, pc}
 800402a:	bf00      	nop
 800402c:	200001cc 	.word	0x200001cc

08004030 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8004030:	b580      	push	{r7, lr}
 8004032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8004034:	4802      	ldr	r0, [pc, #8]	; (8004040 <DMA1_Stream6_IRQHandler+0x10>)
 8004036:	f000 ff65 	bl	8004f04 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 800403a:	bf00      	nop
 800403c:	bd80      	pop	{r7, pc}
 800403e:	bf00      	nop
 8004040:	2000022c 	.word	0x2000022c

08004044 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8004044:	b580      	push	{r7, lr}
 8004046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8004048:	4802      	ldr	r0, [pc, #8]	; (8004054 <USART2_IRQHandler+0x10>)
 800404a:	f003 f8df 	bl	800720c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800404e:	bf00      	nop
 8004050:	bd80      	pop	{r7, pc}
 8004052:	bf00      	nop
 8004054:	20000188 	.word	0x20000188

08004058 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8004058:	b580      	push	{r7, lr}
 800405a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 800405c:	4802      	ldr	r0, [pc, #8]	; (8004068 <TIM5_IRQHandler+0x10>)
 800405e:	f002 f9d1 	bl	8006404 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8004062:	bf00      	nop
 8004064:	bd80      	pop	{r7, pc}
 8004066:	bf00      	nop
 8004068:	20000cb0 	.word	0x20000cb0

0800406c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800406c:	b580      	push	{r7, lr}
 800406e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8004070:	4802      	ldr	r0, [pc, #8]	; (800407c <DMA2_Stream0_IRQHandler+0x10>)
 8004072:	f000 ff47 	bl	8004f04 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8004076:	bf00      	nop
 8004078:	bd80      	pop	{r7, pc}
 800407a:	bf00      	nop
 800407c:	200000e0 	.word	0x200000e0

08004080 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004080:	b480      	push	{r7}
 8004082:	af00      	add	r7, sp, #0
  return 1;
 8004084:	2301      	movs	r3, #1
}
 8004086:	4618      	mov	r0, r3
 8004088:	46bd      	mov	sp, r7
 800408a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408e:	4770      	bx	lr

08004090 <_kill>:

int _kill(int pid, int sig)
{
 8004090:	b580      	push	{r7, lr}
 8004092:	b082      	sub	sp, #8
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
 8004098:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800409a:	f007 fa83 	bl	800b5a4 <__errno>
 800409e:	4603      	mov	r3, r0
 80040a0:	2216      	movs	r2, #22
 80040a2:	601a      	str	r2, [r3, #0]
  return -1;
 80040a4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80040a8:	4618      	mov	r0, r3
 80040aa:	3708      	adds	r7, #8
 80040ac:	46bd      	mov	sp, r7
 80040ae:	bd80      	pop	{r7, pc}

080040b0 <_exit>:

void _exit (int status)
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	b082      	sub	sp, #8
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80040b8:	f04f 31ff 	mov.w	r1, #4294967295
 80040bc:	6878      	ldr	r0, [r7, #4]
 80040be:	f7ff ffe7 	bl	8004090 <_kill>
  while (1) {}    /* Make sure we hang here */
 80040c2:	e7fe      	b.n	80040c2 <_exit+0x12>

080040c4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	b086      	sub	sp, #24
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80040cc:	4a14      	ldr	r2, [pc, #80]	; (8004120 <_sbrk+0x5c>)
 80040ce:	4b15      	ldr	r3, [pc, #84]	; (8004124 <_sbrk+0x60>)
 80040d0:	1ad3      	subs	r3, r2, r3
 80040d2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80040d4:	697b      	ldr	r3, [r7, #20]
 80040d6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80040d8:	4b13      	ldr	r3, [pc, #76]	; (8004128 <_sbrk+0x64>)
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d102      	bne.n	80040e6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80040e0:	4b11      	ldr	r3, [pc, #68]	; (8004128 <_sbrk+0x64>)
 80040e2:	4a12      	ldr	r2, [pc, #72]	; (800412c <_sbrk+0x68>)
 80040e4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80040e6:	4b10      	ldr	r3, [pc, #64]	; (8004128 <_sbrk+0x64>)
 80040e8:	681a      	ldr	r2, [r3, #0]
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	4413      	add	r3, r2
 80040ee:	693a      	ldr	r2, [r7, #16]
 80040f0:	429a      	cmp	r2, r3
 80040f2:	d207      	bcs.n	8004104 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80040f4:	f007 fa56 	bl	800b5a4 <__errno>
 80040f8:	4603      	mov	r3, r0
 80040fa:	220c      	movs	r2, #12
 80040fc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80040fe:	f04f 33ff 	mov.w	r3, #4294967295
 8004102:	e009      	b.n	8004118 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004104:	4b08      	ldr	r3, [pc, #32]	; (8004128 <_sbrk+0x64>)
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800410a:	4b07      	ldr	r3, [pc, #28]	; (8004128 <_sbrk+0x64>)
 800410c:	681a      	ldr	r2, [r3, #0]
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	4413      	add	r3, r2
 8004112:	4a05      	ldr	r2, [pc, #20]	; (8004128 <_sbrk+0x64>)
 8004114:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004116:	68fb      	ldr	r3, [r7, #12]
}
 8004118:	4618      	mov	r0, r3
 800411a:	3718      	adds	r7, #24
 800411c:	46bd      	mov	sp, r7
 800411e:	bd80      	pop	{r7, pc}
 8004120:	20010000 	.word	0x20010000
 8004124:	00000400 	.word	0x00000400
 8004128:	20000cf8 	.word	0x20000cf8
 800412c:	20005728 	.word	0x20005728

08004130 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004130:	b480      	push	{r7}
 8004132:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004134:	4b06      	ldr	r3, [pc, #24]	; (8004150 <SystemInit+0x20>)
 8004136:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800413a:	4a05      	ldr	r2, [pc, #20]	; (8004150 <SystemInit+0x20>)
 800413c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004140:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004144:	bf00      	nop
 8004146:	46bd      	mov	sp, r7
 8004148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414c:	4770      	bx	lr
 800414e:	bf00      	nop
 8004150:	e000ed00 	.word	0xe000ed00

08004154 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8004154:	f8df d034 	ldr.w	sp, [pc, #52]	; 800418c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004158:	480d      	ldr	r0, [pc, #52]	; (8004190 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800415a:	490e      	ldr	r1, [pc, #56]	; (8004194 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800415c:	4a0e      	ldr	r2, [pc, #56]	; (8004198 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800415e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004160:	e002      	b.n	8004168 <LoopCopyDataInit>

08004162 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004162:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004164:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004166:	3304      	adds	r3, #4

08004168 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004168:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800416a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800416c:	d3f9      	bcc.n	8004162 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800416e:	4a0b      	ldr	r2, [pc, #44]	; (800419c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8004170:	4c0b      	ldr	r4, [pc, #44]	; (80041a0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8004172:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004174:	e001      	b.n	800417a <LoopFillZerobss>

08004176 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004176:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004178:	3204      	adds	r2, #4

0800417a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800417a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800417c:	d3fb      	bcc.n	8004176 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800417e:	f7ff ffd7 	bl	8004130 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004182:	f007 fa15 	bl	800b5b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004186:	f7fd fddf 	bl	8001d48 <main>
  bx  lr    
 800418a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800418c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8004190:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004194:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8004198:	0800c798 	.word	0x0800c798
  ldr r2, =_sbss
 800419c:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 80041a0:	20005724 	.word	0x20005724

080041a4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80041a4:	e7fe      	b.n	80041a4 <ADC_IRQHandler>
	...

080041a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80041ac:	4b0e      	ldr	r3, [pc, #56]	; (80041e8 <HAL_Init+0x40>)
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	4a0d      	ldr	r2, [pc, #52]	; (80041e8 <HAL_Init+0x40>)
 80041b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80041b6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80041b8:	4b0b      	ldr	r3, [pc, #44]	; (80041e8 <HAL_Init+0x40>)
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	4a0a      	ldr	r2, [pc, #40]	; (80041e8 <HAL_Init+0x40>)
 80041be:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80041c2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80041c4:	4b08      	ldr	r3, [pc, #32]	; (80041e8 <HAL_Init+0x40>)
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	4a07      	ldr	r2, [pc, #28]	; (80041e8 <HAL_Init+0x40>)
 80041ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041ce:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80041d0:	2003      	movs	r0, #3
 80041d2:	f000 fcca 	bl	8004b6a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80041d6:	200f      	movs	r0, #15
 80041d8:	f7ff fe8e 	bl	8003ef8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80041dc:	f7ff fcde 	bl	8003b9c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80041e0:	2300      	movs	r3, #0
}
 80041e2:	4618      	mov	r0, r3
 80041e4:	bd80      	pop	{r7, pc}
 80041e6:	bf00      	nop
 80041e8:	40023c00 	.word	0x40023c00

080041ec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80041ec:	b480      	push	{r7}
 80041ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80041f0:	4b06      	ldr	r3, [pc, #24]	; (800420c <HAL_IncTick+0x20>)
 80041f2:	781b      	ldrb	r3, [r3, #0]
 80041f4:	461a      	mov	r2, r3
 80041f6:	4b06      	ldr	r3, [pc, #24]	; (8004210 <HAL_IncTick+0x24>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	4413      	add	r3, r2
 80041fc:	4a04      	ldr	r2, [pc, #16]	; (8004210 <HAL_IncTick+0x24>)
 80041fe:	6013      	str	r3, [r2, #0]
}
 8004200:	bf00      	nop
 8004202:	46bd      	mov	sp, r7
 8004204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004208:	4770      	bx	lr
 800420a:	bf00      	nop
 800420c:	20000008 	.word	0x20000008
 8004210:	20000cfc 	.word	0x20000cfc

08004214 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004214:	b480      	push	{r7}
 8004216:	af00      	add	r7, sp, #0
  return uwTick;
 8004218:	4b03      	ldr	r3, [pc, #12]	; (8004228 <HAL_GetTick+0x14>)
 800421a:	681b      	ldr	r3, [r3, #0]
}
 800421c:	4618      	mov	r0, r3
 800421e:	46bd      	mov	sp, r7
 8004220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004224:	4770      	bx	lr
 8004226:	bf00      	nop
 8004228:	20000cfc 	.word	0x20000cfc

0800422c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800422c:	b580      	push	{r7, lr}
 800422e:	b084      	sub	sp, #16
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004234:	2300      	movs	r3, #0
 8004236:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2b00      	cmp	r3, #0
 800423c:	d101      	bne.n	8004242 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800423e:	2301      	movs	r3, #1
 8004240:	e033      	b.n	80042aa <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004246:	2b00      	cmp	r3, #0
 8004248:	d109      	bne.n	800425e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800424a:	6878      	ldr	r0, [r7, #4]
 800424c:	f7ff fcd2 	bl	8003bf4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2200      	movs	r2, #0
 8004254:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	2200      	movs	r2, #0
 800425a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004262:	f003 0310 	and.w	r3, r3, #16
 8004266:	2b00      	cmp	r3, #0
 8004268:	d118      	bne.n	800429c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800426e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004272:	f023 0302 	bic.w	r3, r3, #2
 8004276:	f043 0202 	orr.w	r2, r3, #2
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800427e:	6878      	ldr	r0, [r7, #4]
 8004280:	f000 fa48 	bl	8004714 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2200      	movs	r2, #0
 8004288:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800428e:	f023 0303 	bic.w	r3, r3, #3
 8004292:	f043 0201 	orr.w	r2, r3, #1
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	641a      	str	r2, [r3, #64]	; 0x40
 800429a:	e001      	b.n	80042a0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800429c:	2301      	movs	r3, #1
 800429e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2200      	movs	r2, #0
 80042a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80042a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80042aa:	4618      	mov	r0, r3
 80042ac:	3710      	adds	r7, #16
 80042ae:	46bd      	mov	sp, r7
 80042b0:	bd80      	pop	{r7, pc}
	...

080042b4 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80042b4:	b580      	push	{r7, lr}
 80042b6:	b086      	sub	sp, #24
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	60f8      	str	r0, [r7, #12]
 80042bc:	60b9      	str	r1, [r7, #8]
 80042be:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80042c0:	2300      	movs	r3, #0
 80042c2:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042ca:	2b01      	cmp	r3, #1
 80042cc:	d101      	bne.n	80042d2 <HAL_ADC_Start_DMA+0x1e>
 80042ce:	2302      	movs	r3, #2
 80042d0:	e0ce      	b.n	8004470 <HAL_ADC_Start_DMA+0x1bc>
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	2201      	movs	r2, #1
 80042d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	689b      	ldr	r3, [r3, #8]
 80042e0:	f003 0301 	and.w	r3, r3, #1
 80042e4:	2b01      	cmp	r3, #1
 80042e6:	d018      	beq.n	800431a <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	689a      	ldr	r2, [r3, #8]
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f042 0201 	orr.w	r2, r2, #1
 80042f6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80042f8:	4b5f      	ldr	r3, [pc, #380]	; (8004478 <HAL_ADC_Start_DMA+0x1c4>)
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	4a5f      	ldr	r2, [pc, #380]	; (800447c <HAL_ADC_Start_DMA+0x1c8>)
 80042fe:	fba2 2303 	umull	r2, r3, r2, r3
 8004302:	0c9a      	lsrs	r2, r3, #18
 8004304:	4613      	mov	r3, r2
 8004306:	005b      	lsls	r3, r3, #1
 8004308:	4413      	add	r3, r2
 800430a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800430c:	e002      	b.n	8004314 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800430e:	693b      	ldr	r3, [r7, #16]
 8004310:	3b01      	subs	r3, #1
 8004312:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8004314:	693b      	ldr	r3, [r7, #16]
 8004316:	2b00      	cmp	r3, #0
 8004318:	d1f9      	bne.n	800430e <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	689b      	ldr	r3, [r3, #8]
 8004320:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004324:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004328:	d107      	bne.n	800433a <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	689a      	ldr	r2, [r3, #8]
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004338:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	689b      	ldr	r3, [r3, #8]
 8004340:	f003 0301 	and.w	r3, r3, #1
 8004344:	2b01      	cmp	r3, #1
 8004346:	f040 8086 	bne.w	8004456 <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800434e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004352:	f023 0301 	bic.w	r3, r3, #1
 8004356:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	685b      	ldr	r3, [r3, #4]
 8004364:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004368:	2b00      	cmp	r3, #0
 800436a:	d007      	beq.n	800437c <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004370:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004374:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004380:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004384:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004388:	d106      	bne.n	8004398 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800438e:	f023 0206 	bic.w	r2, r3, #6
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	645a      	str	r2, [r3, #68]	; 0x44
 8004396:	e002      	b.n	800439e <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	2200      	movs	r2, #0
 800439c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	2200      	movs	r2, #0
 80043a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80043a6:	4b36      	ldr	r3, [pc, #216]	; (8004480 <HAL_ADC_Start_DMA+0x1cc>)
 80043a8:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043ae:	4a35      	ldr	r2, [pc, #212]	; (8004484 <HAL_ADC_Start_DMA+0x1d0>)
 80043b0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043b6:	4a34      	ldr	r2, [pc, #208]	; (8004488 <HAL_ADC_Start_DMA+0x1d4>)
 80043b8:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043be:	4a33      	ldr	r2, [pc, #204]	; (800448c <HAL_ADC_Start_DMA+0x1d8>)
 80043c0:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80043ca:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	685a      	ldr	r2, [r3, #4]
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80043da:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	689a      	ldr	r2, [r3, #8]
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80043ea:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	334c      	adds	r3, #76	; 0x4c
 80043f6:	4619      	mov	r1, r3
 80043f8:	68ba      	ldr	r2, [r7, #8]
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	f000 fc98 	bl	8004d30 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8004400:	697b      	ldr	r3, [r7, #20]
 8004402:	685b      	ldr	r3, [r3, #4]
 8004404:	f003 031f 	and.w	r3, r3, #31
 8004408:	2b00      	cmp	r3, #0
 800440a:	d10f      	bne.n	800442c <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	689b      	ldr	r3, [r3, #8]
 8004412:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004416:	2b00      	cmp	r3, #0
 8004418:	d129      	bne.n	800446e <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	689a      	ldr	r2, [r3, #8]
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004428:	609a      	str	r2, [r3, #8]
 800442a:	e020      	b.n	800446e <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	4a17      	ldr	r2, [pc, #92]	; (8004490 <HAL_ADC_Start_DMA+0x1dc>)
 8004432:	4293      	cmp	r3, r2
 8004434:	d11b      	bne.n	800446e <HAL_ADC_Start_DMA+0x1ba>
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	689b      	ldr	r3, [r3, #8]
 800443c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004440:	2b00      	cmp	r3, #0
 8004442:	d114      	bne.n	800446e <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	689a      	ldr	r2, [r3, #8]
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004452:	609a      	str	r2, [r3, #8]
 8004454:	e00b      	b.n	800446e <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800445a:	f043 0210 	orr.w	r2, r3, #16
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004466:	f043 0201 	orr.w	r2, r3, #1
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800446e:	2300      	movs	r3, #0
}
 8004470:	4618      	mov	r0, r3
 8004472:	3718      	adds	r7, #24
 8004474:	46bd      	mov	sp, r7
 8004476:	bd80      	pop	{r7, pc}
 8004478:	20000000 	.word	0x20000000
 800447c:	431bde83 	.word	0x431bde83
 8004480:	40012300 	.word	0x40012300
 8004484:	0800490d 	.word	0x0800490d
 8004488:	080049c7 	.word	0x080049c7
 800448c:	080049e3 	.word	0x080049e3
 8004490:	40012000 	.word	0x40012000

08004494 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004494:	b480      	push	{r7}
 8004496:	b083      	sub	sp, #12
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 800449c:	bf00      	nop
 800449e:	370c      	adds	r7, #12
 80044a0:	46bd      	mov	sp, r7
 80044a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a6:	4770      	bx	lr

080044a8 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80044a8:	b480      	push	{r7}
 80044aa:	b083      	sub	sp, #12
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80044b0:	bf00      	nop
 80044b2:	370c      	adds	r7, #12
 80044b4:	46bd      	mov	sp, r7
 80044b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ba:	4770      	bx	lr

080044bc <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80044bc:	b480      	push	{r7}
 80044be:	b083      	sub	sp, #12
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80044c4:	bf00      	nop
 80044c6:	370c      	adds	r7, #12
 80044c8:	46bd      	mov	sp, r7
 80044ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ce:	4770      	bx	lr

080044d0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80044d0:	b480      	push	{r7}
 80044d2:	b085      	sub	sp, #20
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
 80044d8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80044da:	2300      	movs	r3, #0
 80044dc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80044e4:	2b01      	cmp	r3, #1
 80044e6:	d101      	bne.n	80044ec <HAL_ADC_ConfigChannel+0x1c>
 80044e8:	2302      	movs	r3, #2
 80044ea:	e105      	b.n	80046f8 <HAL_ADC_ConfigChannel+0x228>
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2201      	movs	r2, #1
 80044f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80044f4:	683b      	ldr	r3, [r7, #0]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	2b09      	cmp	r3, #9
 80044fa:	d925      	bls.n	8004548 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	68d9      	ldr	r1, [r3, #12]
 8004502:	683b      	ldr	r3, [r7, #0]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	b29b      	uxth	r3, r3
 8004508:	461a      	mov	r2, r3
 800450a:	4613      	mov	r3, r2
 800450c:	005b      	lsls	r3, r3, #1
 800450e:	4413      	add	r3, r2
 8004510:	3b1e      	subs	r3, #30
 8004512:	2207      	movs	r2, #7
 8004514:	fa02 f303 	lsl.w	r3, r2, r3
 8004518:	43da      	mvns	r2, r3
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	400a      	ands	r2, r1
 8004520:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	68d9      	ldr	r1, [r3, #12]
 8004528:	683b      	ldr	r3, [r7, #0]
 800452a:	689a      	ldr	r2, [r3, #8]
 800452c:	683b      	ldr	r3, [r7, #0]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	b29b      	uxth	r3, r3
 8004532:	4618      	mov	r0, r3
 8004534:	4603      	mov	r3, r0
 8004536:	005b      	lsls	r3, r3, #1
 8004538:	4403      	add	r3, r0
 800453a:	3b1e      	subs	r3, #30
 800453c:	409a      	lsls	r2, r3
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	430a      	orrs	r2, r1
 8004544:	60da      	str	r2, [r3, #12]
 8004546:	e022      	b.n	800458e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	6919      	ldr	r1, [r3, #16]
 800454e:	683b      	ldr	r3, [r7, #0]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	b29b      	uxth	r3, r3
 8004554:	461a      	mov	r2, r3
 8004556:	4613      	mov	r3, r2
 8004558:	005b      	lsls	r3, r3, #1
 800455a:	4413      	add	r3, r2
 800455c:	2207      	movs	r2, #7
 800455e:	fa02 f303 	lsl.w	r3, r2, r3
 8004562:	43da      	mvns	r2, r3
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	400a      	ands	r2, r1
 800456a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	6919      	ldr	r1, [r3, #16]
 8004572:	683b      	ldr	r3, [r7, #0]
 8004574:	689a      	ldr	r2, [r3, #8]
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	b29b      	uxth	r3, r3
 800457c:	4618      	mov	r0, r3
 800457e:	4603      	mov	r3, r0
 8004580:	005b      	lsls	r3, r3, #1
 8004582:	4403      	add	r3, r0
 8004584:	409a      	lsls	r2, r3
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	430a      	orrs	r2, r1
 800458c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	685b      	ldr	r3, [r3, #4]
 8004592:	2b06      	cmp	r3, #6
 8004594:	d824      	bhi.n	80045e0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800459c:	683b      	ldr	r3, [r7, #0]
 800459e:	685a      	ldr	r2, [r3, #4]
 80045a0:	4613      	mov	r3, r2
 80045a2:	009b      	lsls	r3, r3, #2
 80045a4:	4413      	add	r3, r2
 80045a6:	3b05      	subs	r3, #5
 80045a8:	221f      	movs	r2, #31
 80045aa:	fa02 f303 	lsl.w	r3, r2, r3
 80045ae:	43da      	mvns	r2, r3
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	400a      	ands	r2, r1
 80045b6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	b29b      	uxth	r3, r3
 80045c4:	4618      	mov	r0, r3
 80045c6:	683b      	ldr	r3, [r7, #0]
 80045c8:	685a      	ldr	r2, [r3, #4]
 80045ca:	4613      	mov	r3, r2
 80045cc:	009b      	lsls	r3, r3, #2
 80045ce:	4413      	add	r3, r2
 80045d0:	3b05      	subs	r3, #5
 80045d2:	fa00 f203 	lsl.w	r2, r0, r3
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	430a      	orrs	r2, r1
 80045dc:	635a      	str	r2, [r3, #52]	; 0x34
 80045de:	e04c      	b.n	800467a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	685b      	ldr	r3, [r3, #4]
 80045e4:	2b0c      	cmp	r3, #12
 80045e6:	d824      	bhi.n	8004632 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	685a      	ldr	r2, [r3, #4]
 80045f2:	4613      	mov	r3, r2
 80045f4:	009b      	lsls	r3, r3, #2
 80045f6:	4413      	add	r3, r2
 80045f8:	3b23      	subs	r3, #35	; 0x23
 80045fa:	221f      	movs	r2, #31
 80045fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004600:	43da      	mvns	r2, r3
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	400a      	ands	r2, r1
 8004608:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	b29b      	uxth	r3, r3
 8004616:	4618      	mov	r0, r3
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	685a      	ldr	r2, [r3, #4]
 800461c:	4613      	mov	r3, r2
 800461e:	009b      	lsls	r3, r3, #2
 8004620:	4413      	add	r3, r2
 8004622:	3b23      	subs	r3, #35	; 0x23
 8004624:	fa00 f203 	lsl.w	r2, r0, r3
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	430a      	orrs	r2, r1
 800462e:	631a      	str	r2, [r3, #48]	; 0x30
 8004630:	e023      	b.n	800467a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	685a      	ldr	r2, [r3, #4]
 800463c:	4613      	mov	r3, r2
 800463e:	009b      	lsls	r3, r3, #2
 8004640:	4413      	add	r3, r2
 8004642:	3b41      	subs	r3, #65	; 0x41
 8004644:	221f      	movs	r2, #31
 8004646:	fa02 f303 	lsl.w	r3, r2, r3
 800464a:	43da      	mvns	r2, r3
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	400a      	ands	r2, r1
 8004652:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800465a:	683b      	ldr	r3, [r7, #0]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	b29b      	uxth	r3, r3
 8004660:	4618      	mov	r0, r3
 8004662:	683b      	ldr	r3, [r7, #0]
 8004664:	685a      	ldr	r2, [r3, #4]
 8004666:	4613      	mov	r3, r2
 8004668:	009b      	lsls	r3, r3, #2
 800466a:	4413      	add	r3, r2
 800466c:	3b41      	subs	r3, #65	; 0x41
 800466e:	fa00 f203 	lsl.w	r2, r0, r3
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	430a      	orrs	r2, r1
 8004678:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800467a:	4b22      	ldr	r3, [pc, #136]	; (8004704 <HAL_ADC_ConfigChannel+0x234>)
 800467c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	4a21      	ldr	r2, [pc, #132]	; (8004708 <HAL_ADC_ConfigChannel+0x238>)
 8004684:	4293      	cmp	r3, r2
 8004686:	d109      	bne.n	800469c <HAL_ADC_ConfigChannel+0x1cc>
 8004688:	683b      	ldr	r3, [r7, #0]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	2b12      	cmp	r3, #18
 800468e:	d105      	bne.n	800469c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	685b      	ldr	r3, [r3, #4]
 8004694:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	4a19      	ldr	r2, [pc, #100]	; (8004708 <HAL_ADC_ConfigChannel+0x238>)
 80046a2:	4293      	cmp	r3, r2
 80046a4:	d123      	bne.n	80046ee <HAL_ADC_ConfigChannel+0x21e>
 80046a6:	683b      	ldr	r3, [r7, #0]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	2b10      	cmp	r3, #16
 80046ac:	d003      	beq.n	80046b6 <HAL_ADC_ConfigChannel+0x1e6>
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	2b11      	cmp	r3, #17
 80046b4:	d11b      	bne.n	80046ee <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	685b      	ldr	r3, [r3, #4]
 80046ba:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80046c2:	683b      	ldr	r3, [r7, #0]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	2b10      	cmp	r3, #16
 80046c8:	d111      	bne.n	80046ee <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80046ca:	4b10      	ldr	r3, [pc, #64]	; (800470c <HAL_ADC_ConfigChannel+0x23c>)
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	4a10      	ldr	r2, [pc, #64]	; (8004710 <HAL_ADC_ConfigChannel+0x240>)
 80046d0:	fba2 2303 	umull	r2, r3, r2, r3
 80046d4:	0c9a      	lsrs	r2, r3, #18
 80046d6:	4613      	mov	r3, r2
 80046d8:	009b      	lsls	r3, r3, #2
 80046da:	4413      	add	r3, r2
 80046dc:	005b      	lsls	r3, r3, #1
 80046de:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80046e0:	e002      	b.n	80046e8 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80046e2:	68bb      	ldr	r3, [r7, #8]
 80046e4:	3b01      	subs	r3, #1
 80046e6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80046e8:	68bb      	ldr	r3, [r7, #8]
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d1f9      	bne.n	80046e2 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	2200      	movs	r2, #0
 80046f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80046f6:	2300      	movs	r3, #0
}
 80046f8:	4618      	mov	r0, r3
 80046fa:	3714      	adds	r7, #20
 80046fc:	46bd      	mov	sp, r7
 80046fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004702:	4770      	bx	lr
 8004704:	40012300 	.word	0x40012300
 8004708:	40012000 	.word	0x40012000
 800470c:	20000000 	.word	0x20000000
 8004710:	431bde83 	.word	0x431bde83

08004714 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004714:	b480      	push	{r7}
 8004716:	b085      	sub	sp, #20
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800471c:	4b79      	ldr	r3, [pc, #484]	; (8004904 <ADC_Init+0x1f0>)
 800471e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	685b      	ldr	r3, [r3, #4]
 8004724:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	685a      	ldr	r2, [r3, #4]
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	685b      	ldr	r3, [r3, #4]
 8004734:	431a      	orrs	r2, r3
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	685a      	ldr	r2, [r3, #4]
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004748:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	6859      	ldr	r1, [r3, #4]
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	691b      	ldr	r3, [r3, #16]
 8004754:	021a      	lsls	r2, r3, #8
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	430a      	orrs	r2, r1
 800475c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	685a      	ldr	r2, [r3, #4]
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800476c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	6859      	ldr	r1, [r3, #4]
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	689a      	ldr	r2, [r3, #8]
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	430a      	orrs	r2, r1
 800477e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	689a      	ldr	r2, [r3, #8]
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800478e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	6899      	ldr	r1, [r3, #8]
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	68da      	ldr	r2, [r3, #12]
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	430a      	orrs	r2, r1
 80047a0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047a6:	4a58      	ldr	r2, [pc, #352]	; (8004908 <ADC_Init+0x1f4>)
 80047a8:	4293      	cmp	r3, r2
 80047aa:	d022      	beq.n	80047f2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	689a      	ldr	r2, [r3, #8]
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80047ba:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	6899      	ldr	r1, [r3, #8]
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	430a      	orrs	r2, r1
 80047cc:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	689a      	ldr	r2, [r3, #8]
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80047dc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	6899      	ldr	r1, [r3, #8]
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	430a      	orrs	r2, r1
 80047ee:	609a      	str	r2, [r3, #8]
 80047f0:	e00f      	b.n	8004812 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	689a      	ldr	r2, [r3, #8]
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004800:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	689a      	ldr	r2, [r3, #8]
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004810:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	689a      	ldr	r2, [r3, #8]
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f022 0202 	bic.w	r2, r2, #2
 8004820:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	6899      	ldr	r1, [r3, #8]
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	7e1b      	ldrb	r3, [r3, #24]
 800482c:	005a      	lsls	r2, r3, #1
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	430a      	orrs	r2, r1
 8004834:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	f893 3020 	ldrb.w	r3, [r3, #32]
 800483c:	2b00      	cmp	r3, #0
 800483e:	d01b      	beq.n	8004878 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	685a      	ldr	r2, [r3, #4]
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800484e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	685a      	ldr	r2, [r3, #4]
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800485e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	6859      	ldr	r1, [r3, #4]
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800486a:	3b01      	subs	r3, #1
 800486c:	035a      	lsls	r2, r3, #13
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	430a      	orrs	r2, r1
 8004874:	605a      	str	r2, [r3, #4]
 8004876:	e007      	b.n	8004888 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	685a      	ldr	r2, [r3, #4]
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004886:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8004896:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	69db      	ldr	r3, [r3, #28]
 80048a2:	3b01      	subs	r3, #1
 80048a4:	051a      	lsls	r2, r3, #20
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	430a      	orrs	r2, r1
 80048ac:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	689a      	ldr	r2, [r3, #8]
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80048bc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	6899      	ldr	r1, [r3, #8]
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80048ca:	025a      	lsls	r2, r3, #9
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	430a      	orrs	r2, r1
 80048d2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	689a      	ldr	r2, [r3, #8]
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80048e2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	6899      	ldr	r1, [r3, #8]
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	695b      	ldr	r3, [r3, #20]
 80048ee:	029a      	lsls	r2, r3, #10
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	430a      	orrs	r2, r1
 80048f6:	609a      	str	r2, [r3, #8]
}
 80048f8:	bf00      	nop
 80048fa:	3714      	adds	r7, #20
 80048fc:	46bd      	mov	sp, r7
 80048fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004902:	4770      	bx	lr
 8004904:	40012300 	.word	0x40012300
 8004908:	0f000001 	.word	0x0f000001

0800490c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 800490c:	b580      	push	{r7, lr}
 800490e:	b084      	sub	sp, #16
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004918:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800491e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004922:	2b00      	cmp	r3, #0
 8004924:	d13c      	bne.n	80049a0 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800492a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	689b      	ldr	r3, [r3, #8]
 8004938:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800493c:	2b00      	cmp	r3, #0
 800493e:	d12b      	bne.n	8004998 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004944:	2b00      	cmp	r3, #0
 8004946:	d127      	bne.n	8004998 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800494e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004952:	2b00      	cmp	r3, #0
 8004954:	d006      	beq.n	8004964 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	689b      	ldr	r3, [r3, #8]
 800495c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004960:	2b00      	cmp	r3, #0
 8004962:	d119      	bne.n	8004998 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	685a      	ldr	r2, [r3, #4]
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f022 0220 	bic.w	r2, r2, #32
 8004972:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004978:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004984:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004988:	2b00      	cmp	r3, #0
 800498a:	d105      	bne.n	8004998 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004990:	f043 0201 	orr.w	r2, r3, #1
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004998:	68f8      	ldr	r0, [r7, #12]
 800499a:	f7ff fd7b 	bl	8004494 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800499e:	e00e      	b.n	80049be <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049a4:	f003 0310 	and.w	r3, r3, #16
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d003      	beq.n	80049b4 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80049ac:	68f8      	ldr	r0, [r7, #12]
 80049ae:	f7ff fd85 	bl	80044bc <HAL_ADC_ErrorCallback>
}
 80049b2:	e004      	b.n	80049be <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049ba:	6878      	ldr	r0, [r7, #4]
 80049bc:	4798      	blx	r3
}
 80049be:	bf00      	nop
 80049c0:	3710      	adds	r7, #16
 80049c2:	46bd      	mov	sp, r7
 80049c4:	bd80      	pop	{r7, pc}

080049c6 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80049c6:	b580      	push	{r7, lr}
 80049c8:	b084      	sub	sp, #16
 80049ca:	af00      	add	r7, sp, #0
 80049cc:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049d2:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80049d4:	68f8      	ldr	r0, [r7, #12]
 80049d6:	f7ff fd67 	bl	80044a8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80049da:	bf00      	nop
 80049dc:	3710      	adds	r7, #16
 80049de:	46bd      	mov	sp, r7
 80049e0:	bd80      	pop	{r7, pc}

080049e2 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80049e2:	b580      	push	{r7, lr}
 80049e4:	b084      	sub	sp, #16
 80049e6:	af00      	add	r7, sp, #0
 80049e8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049ee:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	2240      	movs	r2, #64	; 0x40
 80049f4:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049fa:	f043 0204 	orr.w	r2, r3, #4
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004a02:	68f8      	ldr	r0, [r7, #12]
 8004a04:	f7ff fd5a 	bl	80044bc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004a08:	bf00      	nop
 8004a0a:	3710      	adds	r7, #16
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	bd80      	pop	{r7, pc}

08004a10 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004a10:	b480      	push	{r7}
 8004a12:	b085      	sub	sp, #20
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	f003 0307 	and.w	r3, r3, #7
 8004a1e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004a20:	4b0c      	ldr	r3, [pc, #48]	; (8004a54 <__NVIC_SetPriorityGrouping+0x44>)
 8004a22:	68db      	ldr	r3, [r3, #12]
 8004a24:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004a26:	68ba      	ldr	r2, [r7, #8]
 8004a28:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004a2c:	4013      	ands	r3, r2
 8004a2e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004a34:	68bb      	ldr	r3, [r7, #8]
 8004a36:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004a38:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004a3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004a40:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004a42:	4a04      	ldr	r2, [pc, #16]	; (8004a54 <__NVIC_SetPriorityGrouping+0x44>)
 8004a44:	68bb      	ldr	r3, [r7, #8]
 8004a46:	60d3      	str	r3, [r2, #12]
}
 8004a48:	bf00      	nop
 8004a4a:	3714      	adds	r7, #20
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a52:	4770      	bx	lr
 8004a54:	e000ed00 	.word	0xe000ed00

08004a58 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004a58:	b480      	push	{r7}
 8004a5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004a5c:	4b04      	ldr	r3, [pc, #16]	; (8004a70 <__NVIC_GetPriorityGrouping+0x18>)
 8004a5e:	68db      	ldr	r3, [r3, #12]
 8004a60:	0a1b      	lsrs	r3, r3, #8
 8004a62:	f003 0307 	and.w	r3, r3, #7
}
 8004a66:	4618      	mov	r0, r3
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6e:	4770      	bx	lr
 8004a70:	e000ed00 	.word	0xe000ed00

08004a74 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004a74:	b480      	push	{r7}
 8004a76:	b083      	sub	sp, #12
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	4603      	mov	r3, r0
 8004a7c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004a7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	db0b      	blt.n	8004a9e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004a86:	79fb      	ldrb	r3, [r7, #7]
 8004a88:	f003 021f 	and.w	r2, r3, #31
 8004a8c:	4907      	ldr	r1, [pc, #28]	; (8004aac <__NVIC_EnableIRQ+0x38>)
 8004a8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a92:	095b      	lsrs	r3, r3, #5
 8004a94:	2001      	movs	r0, #1
 8004a96:	fa00 f202 	lsl.w	r2, r0, r2
 8004a9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004a9e:	bf00      	nop
 8004aa0:	370c      	adds	r7, #12
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa8:	4770      	bx	lr
 8004aaa:	bf00      	nop
 8004aac:	e000e100 	.word	0xe000e100

08004ab0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004ab0:	b480      	push	{r7}
 8004ab2:	b083      	sub	sp, #12
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	4603      	mov	r3, r0
 8004ab8:	6039      	str	r1, [r7, #0]
 8004aba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004abc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	db0a      	blt.n	8004ada <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004ac4:	683b      	ldr	r3, [r7, #0]
 8004ac6:	b2da      	uxtb	r2, r3
 8004ac8:	490c      	ldr	r1, [pc, #48]	; (8004afc <__NVIC_SetPriority+0x4c>)
 8004aca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ace:	0112      	lsls	r2, r2, #4
 8004ad0:	b2d2      	uxtb	r2, r2
 8004ad2:	440b      	add	r3, r1
 8004ad4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004ad8:	e00a      	b.n	8004af0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004ada:	683b      	ldr	r3, [r7, #0]
 8004adc:	b2da      	uxtb	r2, r3
 8004ade:	4908      	ldr	r1, [pc, #32]	; (8004b00 <__NVIC_SetPriority+0x50>)
 8004ae0:	79fb      	ldrb	r3, [r7, #7]
 8004ae2:	f003 030f 	and.w	r3, r3, #15
 8004ae6:	3b04      	subs	r3, #4
 8004ae8:	0112      	lsls	r2, r2, #4
 8004aea:	b2d2      	uxtb	r2, r2
 8004aec:	440b      	add	r3, r1
 8004aee:	761a      	strb	r2, [r3, #24]
}
 8004af0:	bf00      	nop
 8004af2:	370c      	adds	r7, #12
 8004af4:	46bd      	mov	sp, r7
 8004af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afa:	4770      	bx	lr
 8004afc:	e000e100 	.word	0xe000e100
 8004b00:	e000ed00 	.word	0xe000ed00

08004b04 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004b04:	b480      	push	{r7}
 8004b06:	b089      	sub	sp, #36	; 0x24
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	60f8      	str	r0, [r7, #12]
 8004b0c:	60b9      	str	r1, [r7, #8]
 8004b0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	f003 0307 	and.w	r3, r3, #7
 8004b16:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004b18:	69fb      	ldr	r3, [r7, #28]
 8004b1a:	f1c3 0307 	rsb	r3, r3, #7
 8004b1e:	2b04      	cmp	r3, #4
 8004b20:	bf28      	it	cs
 8004b22:	2304      	movcs	r3, #4
 8004b24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004b26:	69fb      	ldr	r3, [r7, #28]
 8004b28:	3304      	adds	r3, #4
 8004b2a:	2b06      	cmp	r3, #6
 8004b2c:	d902      	bls.n	8004b34 <NVIC_EncodePriority+0x30>
 8004b2e:	69fb      	ldr	r3, [r7, #28]
 8004b30:	3b03      	subs	r3, #3
 8004b32:	e000      	b.n	8004b36 <NVIC_EncodePriority+0x32>
 8004b34:	2300      	movs	r3, #0
 8004b36:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004b38:	f04f 32ff 	mov.w	r2, #4294967295
 8004b3c:	69bb      	ldr	r3, [r7, #24]
 8004b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8004b42:	43da      	mvns	r2, r3
 8004b44:	68bb      	ldr	r3, [r7, #8]
 8004b46:	401a      	ands	r2, r3
 8004b48:	697b      	ldr	r3, [r7, #20]
 8004b4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004b4c:	f04f 31ff 	mov.w	r1, #4294967295
 8004b50:	697b      	ldr	r3, [r7, #20]
 8004b52:	fa01 f303 	lsl.w	r3, r1, r3
 8004b56:	43d9      	mvns	r1, r3
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004b5c:	4313      	orrs	r3, r2
         );
}
 8004b5e:	4618      	mov	r0, r3
 8004b60:	3724      	adds	r7, #36	; 0x24
 8004b62:	46bd      	mov	sp, r7
 8004b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b68:	4770      	bx	lr

08004b6a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004b6a:	b580      	push	{r7, lr}
 8004b6c:	b082      	sub	sp, #8
 8004b6e:	af00      	add	r7, sp, #0
 8004b70:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004b72:	6878      	ldr	r0, [r7, #4]
 8004b74:	f7ff ff4c 	bl	8004a10 <__NVIC_SetPriorityGrouping>
}
 8004b78:	bf00      	nop
 8004b7a:	3708      	adds	r7, #8
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	bd80      	pop	{r7, pc}

08004b80 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004b80:	b580      	push	{r7, lr}
 8004b82:	b086      	sub	sp, #24
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	4603      	mov	r3, r0
 8004b88:	60b9      	str	r1, [r7, #8]
 8004b8a:	607a      	str	r2, [r7, #4]
 8004b8c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004b8e:	2300      	movs	r3, #0
 8004b90:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004b92:	f7ff ff61 	bl	8004a58 <__NVIC_GetPriorityGrouping>
 8004b96:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004b98:	687a      	ldr	r2, [r7, #4]
 8004b9a:	68b9      	ldr	r1, [r7, #8]
 8004b9c:	6978      	ldr	r0, [r7, #20]
 8004b9e:	f7ff ffb1 	bl	8004b04 <NVIC_EncodePriority>
 8004ba2:	4602      	mov	r2, r0
 8004ba4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004ba8:	4611      	mov	r1, r2
 8004baa:	4618      	mov	r0, r3
 8004bac:	f7ff ff80 	bl	8004ab0 <__NVIC_SetPriority>
}
 8004bb0:	bf00      	nop
 8004bb2:	3718      	adds	r7, #24
 8004bb4:	46bd      	mov	sp, r7
 8004bb6:	bd80      	pop	{r7, pc}

08004bb8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004bb8:	b580      	push	{r7, lr}
 8004bba:	b082      	sub	sp, #8
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	4603      	mov	r3, r0
 8004bc0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004bc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	f7ff ff54 	bl	8004a74 <__NVIC_EnableIRQ>
}
 8004bcc:	bf00      	nop
 8004bce:	3708      	adds	r7, #8
 8004bd0:	46bd      	mov	sp, r7
 8004bd2:	bd80      	pop	{r7, pc}

08004bd4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004bd4:	b580      	push	{r7, lr}
 8004bd6:	b086      	sub	sp, #24
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004bdc:	2300      	movs	r3, #0
 8004bde:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004be0:	f7ff fb18 	bl	8004214 <HAL_GetTick>
 8004be4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d101      	bne.n	8004bf0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004bec:	2301      	movs	r3, #1
 8004bee:	e099      	b.n	8004d24 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2202      	movs	r2, #2
 8004bf4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2200      	movs	r2, #0
 8004bfc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	681a      	ldr	r2, [r3, #0]
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f022 0201 	bic.w	r2, r2, #1
 8004c0e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004c10:	e00f      	b.n	8004c32 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004c12:	f7ff faff 	bl	8004214 <HAL_GetTick>
 8004c16:	4602      	mov	r2, r0
 8004c18:	693b      	ldr	r3, [r7, #16]
 8004c1a:	1ad3      	subs	r3, r2, r3
 8004c1c:	2b05      	cmp	r3, #5
 8004c1e:	d908      	bls.n	8004c32 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2220      	movs	r2, #32
 8004c24:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	2203      	movs	r2, #3
 8004c2a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8004c2e:	2303      	movs	r3, #3
 8004c30:	e078      	b.n	8004d24 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f003 0301 	and.w	r3, r3, #1
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d1e8      	bne.n	8004c12 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004c48:	697a      	ldr	r2, [r7, #20]
 8004c4a:	4b38      	ldr	r3, [pc, #224]	; (8004d2c <HAL_DMA_Init+0x158>)
 8004c4c:	4013      	ands	r3, r2
 8004c4e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	685a      	ldr	r2, [r3, #4]
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	689b      	ldr	r3, [r3, #8]
 8004c58:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004c5e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	691b      	ldr	r3, [r3, #16]
 8004c64:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004c6a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	699b      	ldr	r3, [r3, #24]
 8004c70:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004c76:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	6a1b      	ldr	r3, [r3, #32]
 8004c7c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004c7e:	697a      	ldr	r2, [r7, #20]
 8004c80:	4313      	orrs	r3, r2
 8004c82:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c88:	2b04      	cmp	r3, #4
 8004c8a:	d107      	bne.n	8004c9c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c94:	4313      	orrs	r3, r2
 8004c96:	697a      	ldr	r2, [r7, #20]
 8004c98:	4313      	orrs	r3, r2
 8004c9a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	697a      	ldr	r2, [r7, #20]
 8004ca2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	695b      	ldr	r3, [r3, #20]
 8004caa:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004cac:	697b      	ldr	r3, [r7, #20]
 8004cae:	f023 0307 	bic.w	r3, r3, #7
 8004cb2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cb8:	697a      	ldr	r2, [r7, #20]
 8004cba:	4313      	orrs	r3, r2
 8004cbc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cc2:	2b04      	cmp	r3, #4
 8004cc4:	d117      	bne.n	8004cf6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cca:	697a      	ldr	r2, [r7, #20]
 8004ccc:	4313      	orrs	r3, r2
 8004cce:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d00e      	beq.n	8004cf6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004cd8:	6878      	ldr	r0, [r7, #4]
 8004cda:	f000 fb01 	bl	80052e0 <DMA_CheckFifoParam>
 8004cde:	4603      	mov	r3, r0
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d008      	beq.n	8004cf6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2240      	movs	r2, #64	; 0x40
 8004ce8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	2201      	movs	r2, #1
 8004cee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8004cf2:	2301      	movs	r3, #1
 8004cf4:	e016      	b.n	8004d24 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	697a      	ldr	r2, [r7, #20]
 8004cfc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004cfe:	6878      	ldr	r0, [r7, #4]
 8004d00:	f000 fab8 	bl	8005274 <DMA_CalcBaseAndBitshift>
 8004d04:	4603      	mov	r3, r0
 8004d06:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d0c:	223f      	movs	r2, #63	; 0x3f
 8004d0e:	409a      	lsls	r2, r3
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2200      	movs	r2, #0
 8004d18:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	2201      	movs	r2, #1
 8004d1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004d22:	2300      	movs	r3, #0
}
 8004d24:	4618      	mov	r0, r3
 8004d26:	3718      	adds	r7, #24
 8004d28:	46bd      	mov	sp, r7
 8004d2a:	bd80      	pop	{r7, pc}
 8004d2c:	f010803f 	.word	0xf010803f

08004d30 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004d30:	b580      	push	{r7, lr}
 8004d32:	b086      	sub	sp, #24
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	60f8      	str	r0, [r7, #12]
 8004d38:	60b9      	str	r1, [r7, #8]
 8004d3a:	607a      	str	r2, [r7, #4]
 8004d3c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004d3e:	2300      	movs	r3, #0
 8004d40:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d46:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004d4e:	2b01      	cmp	r3, #1
 8004d50:	d101      	bne.n	8004d56 <HAL_DMA_Start_IT+0x26>
 8004d52:	2302      	movs	r3, #2
 8004d54:	e040      	b.n	8004dd8 <HAL_DMA_Start_IT+0xa8>
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	2201      	movs	r2, #1
 8004d5a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004d64:	b2db      	uxtb	r3, r3
 8004d66:	2b01      	cmp	r3, #1
 8004d68:	d12f      	bne.n	8004dca <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	2202      	movs	r2, #2
 8004d6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	2200      	movs	r2, #0
 8004d76:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004d78:	683b      	ldr	r3, [r7, #0]
 8004d7a:	687a      	ldr	r2, [r7, #4]
 8004d7c:	68b9      	ldr	r1, [r7, #8]
 8004d7e:	68f8      	ldr	r0, [r7, #12]
 8004d80:	f000 fa4a 	bl	8005218 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d88:	223f      	movs	r2, #63	; 0x3f
 8004d8a:	409a      	lsls	r2, r3
 8004d8c:	693b      	ldr	r3, [r7, #16]
 8004d8e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	681a      	ldr	r2, [r3, #0]
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f042 0216 	orr.w	r2, r2, #22
 8004d9e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d007      	beq.n	8004db8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	681a      	ldr	r2, [r3, #0]
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f042 0208 	orr.w	r2, r2, #8
 8004db6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	681a      	ldr	r2, [r3, #0]
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f042 0201 	orr.w	r2, r2, #1
 8004dc6:	601a      	str	r2, [r3, #0]
 8004dc8:	e005      	b.n	8004dd6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	2200      	movs	r2, #0
 8004dce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004dd2:	2302      	movs	r3, #2
 8004dd4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004dd6:	7dfb      	ldrb	r3, [r7, #23]
}
 8004dd8:	4618      	mov	r0, r3
 8004dda:	3718      	adds	r7, #24
 8004ddc:	46bd      	mov	sp, r7
 8004dde:	bd80      	pop	{r7, pc}

08004de0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004de0:	b580      	push	{r7, lr}
 8004de2:	b084      	sub	sp, #16
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004dec:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004dee:	f7ff fa11 	bl	8004214 <HAL_GetTick>
 8004df2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004dfa:	b2db      	uxtb	r3, r3
 8004dfc:	2b02      	cmp	r3, #2
 8004dfe:	d008      	beq.n	8004e12 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2280      	movs	r2, #128	; 0x80
 8004e04:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	2200      	movs	r2, #0
 8004e0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8004e0e:	2301      	movs	r3, #1
 8004e10:	e052      	b.n	8004eb8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	681a      	ldr	r2, [r3, #0]
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f022 0216 	bic.w	r2, r2, #22
 8004e20:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	695a      	ldr	r2, [r3, #20]
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004e30:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d103      	bne.n	8004e42 <HAL_DMA_Abort+0x62>
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d007      	beq.n	8004e52 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	681a      	ldr	r2, [r3, #0]
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f022 0208 	bic.w	r2, r2, #8
 8004e50:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	681a      	ldr	r2, [r3, #0]
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f022 0201 	bic.w	r2, r2, #1
 8004e60:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004e62:	e013      	b.n	8004e8c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004e64:	f7ff f9d6 	bl	8004214 <HAL_GetTick>
 8004e68:	4602      	mov	r2, r0
 8004e6a:	68bb      	ldr	r3, [r7, #8]
 8004e6c:	1ad3      	subs	r3, r2, r3
 8004e6e:	2b05      	cmp	r3, #5
 8004e70:	d90c      	bls.n	8004e8c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	2220      	movs	r2, #32
 8004e76:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2203      	movs	r2, #3
 8004e7c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2200      	movs	r2, #0
 8004e84:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8004e88:	2303      	movs	r3, #3
 8004e8a:	e015      	b.n	8004eb8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f003 0301 	and.w	r3, r3, #1
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d1e4      	bne.n	8004e64 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e9e:	223f      	movs	r2, #63	; 0x3f
 8004ea0:	409a      	lsls	r2, r3
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	2201      	movs	r2, #1
 8004eaa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	2200      	movs	r2, #0
 8004eb2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8004eb6:	2300      	movs	r3, #0
}
 8004eb8:	4618      	mov	r0, r3
 8004eba:	3710      	adds	r7, #16
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	bd80      	pop	{r7, pc}

08004ec0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004ec0:	b480      	push	{r7}
 8004ec2:	b083      	sub	sp, #12
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004ece:	b2db      	uxtb	r3, r3
 8004ed0:	2b02      	cmp	r3, #2
 8004ed2:	d004      	beq.n	8004ede <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2280      	movs	r2, #128	; 0x80
 8004ed8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004eda:	2301      	movs	r3, #1
 8004edc:	e00c      	b.n	8004ef8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	2205      	movs	r2, #5
 8004ee2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	681a      	ldr	r2, [r3, #0]
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f022 0201 	bic.w	r2, r2, #1
 8004ef4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004ef6:	2300      	movs	r3, #0
}
 8004ef8:	4618      	mov	r0, r3
 8004efa:	370c      	adds	r7, #12
 8004efc:	46bd      	mov	sp, r7
 8004efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f02:	4770      	bx	lr

08004f04 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004f04:	b580      	push	{r7, lr}
 8004f06:	b086      	sub	sp, #24
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004f0c:	2300      	movs	r3, #0
 8004f0e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004f10:	4b8e      	ldr	r3, [pc, #568]	; (800514c <HAL_DMA_IRQHandler+0x248>)
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	4a8e      	ldr	r2, [pc, #568]	; (8005150 <HAL_DMA_IRQHandler+0x24c>)
 8004f16:	fba2 2303 	umull	r2, r3, r2, r3
 8004f1a:	0a9b      	lsrs	r3, r3, #10
 8004f1c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f22:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004f24:	693b      	ldr	r3, [r7, #16]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f2e:	2208      	movs	r2, #8
 8004f30:	409a      	lsls	r2, r3
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	4013      	ands	r3, r2
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d01a      	beq.n	8004f70 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f003 0304 	and.w	r3, r3, #4
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d013      	beq.n	8004f70 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	681a      	ldr	r2, [r3, #0]
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f022 0204 	bic.w	r2, r2, #4
 8004f56:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f5c:	2208      	movs	r2, #8
 8004f5e:	409a      	lsls	r2, r3
 8004f60:	693b      	ldr	r3, [r7, #16]
 8004f62:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f68:	f043 0201 	orr.w	r2, r3, #1
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f74:	2201      	movs	r2, #1
 8004f76:	409a      	lsls	r2, r3
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	4013      	ands	r3, r2
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d012      	beq.n	8004fa6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	695b      	ldr	r3, [r3, #20]
 8004f86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d00b      	beq.n	8004fa6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f92:	2201      	movs	r2, #1
 8004f94:	409a      	lsls	r2, r3
 8004f96:	693b      	ldr	r3, [r7, #16]
 8004f98:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f9e:	f043 0202 	orr.w	r2, r3, #2
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004faa:	2204      	movs	r2, #4
 8004fac:	409a      	lsls	r2, r3
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	4013      	ands	r3, r2
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d012      	beq.n	8004fdc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f003 0302 	and.w	r3, r3, #2
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d00b      	beq.n	8004fdc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004fc8:	2204      	movs	r2, #4
 8004fca:	409a      	lsls	r2, r3
 8004fcc:	693b      	ldr	r3, [r7, #16]
 8004fce:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fd4:	f043 0204 	orr.w	r2, r3, #4
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004fe0:	2210      	movs	r2, #16
 8004fe2:	409a      	lsls	r2, r3
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	4013      	ands	r3, r2
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d043      	beq.n	8005074 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f003 0308 	and.w	r3, r3, #8
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d03c      	beq.n	8005074 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ffe:	2210      	movs	r2, #16
 8005000:	409a      	lsls	r2, r3
 8005002:	693b      	ldr	r3, [r7, #16]
 8005004:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005010:	2b00      	cmp	r3, #0
 8005012:	d018      	beq.n	8005046 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800501e:	2b00      	cmp	r3, #0
 8005020:	d108      	bne.n	8005034 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005026:	2b00      	cmp	r3, #0
 8005028:	d024      	beq.n	8005074 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800502e:	6878      	ldr	r0, [r7, #4]
 8005030:	4798      	blx	r3
 8005032:	e01f      	b.n	8005074 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005038:	2b00      	cmp	r3, #0
 800503a:	d01b      	beq.n	8005074 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005040:	6878      	ldr	r0, [r7, #4]
 8005042:	4798      	blx	r3
 8005044:	e016      	b.n	8005074 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005050:	2b00      	cmp	r3, #0
 8005052:	d107      	bne.n	8005064 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	681a      	ldr	r2, [r3, #0]
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f022 0208 	bic.w	r2, r2, #8
 8005062:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005068:	2b00      	cmp	r3, #0
 800506a:	d003      	beq.n	8005074 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005070:	6878      	ldr	r0, [r7, #4]
 8005072:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005078:	2220      	movs	r2, #32
 800507a:	409a      	lsls	r2, r3
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	4013      	ands	r3, r2
 8005080:	2b00      	cmp	r3, #0
 8005082:	f000 808f 	beq.w	80051a4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f003 0310 	and.w	r3, r3, #16
 8005090:	2b00      	cmp	r3, #0
 8005092:	f000 8087 	beq.w	80051a4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800509a:	2220      	movs	r2, #32
 800509c:	409a      	lsls	r2, r3
 800509e:	693b      	ldr	r3, [r7, #16]
 80050a0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80050a8:	b2db      	uxtb	r3, r3
 80050aa:	2b05      	cmp	r3, #5
 80050ac:	d136      	bne.n	800511c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	681a      	ldr	r2, [r3, #0]
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f022 0216 	bic.w	r2, r2, #22
 80050bc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	695a      	ldr	r2, [r3, #20]
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80050cc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d103      	bne.n	80050de <HAL_DMA_IRQHandler+0x1da>
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d007      	beq.n	80050ee <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	681a      	ldr	r2, [r3, #0]
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f022 0208 	bic.w	r2, r2, #8
 80050ec:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050f2:	223f      	movs	r2, #63	; 0x3f
 80050f4:	409a      	lsls	r2, r3
 80050f6:	693b      	ldr	r3, [r7, #16]
 80050f8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	2201      	movs	r2, #1
 80050fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	2200      	movs	r2, #0
 8005106:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800510e:	2b00      	cmp	r3, #0
 8005110:	d07e      	beq.n	8005210 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005116:	6878      	ldr	r0, [r7, #4]
 8005118:	4798      	blx	r3
        }
        return;
 800511a:	e079      	b.n	8005210 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005126:	2b00      	cmp	r3, #0
 8005128:	d01d      	beq.n	8005166 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005134:	2b00      	cmp	r3, #0
 8005136:	d10d      	bne.n	8005154 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800513c:	2b00      	cmp	r3, #0
 800513e:	d031      	beq.n	80051a4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005144:	6878      	ldr	r0, [r7, #4]
 8005146:	4798      	blx	r3
 8005148:	e02c      	b.n	80051a4 <HAL_DMA_IRQHandler+0x2a0>
 800514a:	bf00      	nop
 800514c:	20000000 	.word	0x20000000
 8005150:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005158:	2b00      	cmp	r3, #0
 800515a:	d023      	beq.n	80051a4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005160:	6878      	ldr	r0, [r7, #4]
 8005162:	4798      	blx	r3
 8005164:	e01e      	b.n	80051a4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005170:	2b00      	cmp	r3, #0
 8005172:	d10f      	bne.n	8005194 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	681a      	ldr	r2, [r3, #0]
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	f022 0210 	bic.w	r2, r2, #16
 8005182:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2201      	movs	r2, #1
 8005188:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2200      	movs	r2, #0
 8005190:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005198:	2b00      	cmp	r3, #0
 800519a:	d003      	beq.n	80051a4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051a0:	6878      	ldr	r0, [r7, #4]
 80051a2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d032      	beq.n	8005212 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051b0:	f003 0301 	and.w	r3, r3, #1
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d022      	beq.n	80051fe <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2205      	movs	r2, #5
 80051bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	681a      	ldr	r2, [r3, #0]
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f022 0201 	bic.w	r2, r2, #1
 80051ce:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80051d0:	68bb      	ldr	r3, [r7, #8]
 80051d2:	3301      	adds	r3, #1
 80051d4:	60bb      	str	r3, [r7, #8]
 80051d6:	697a      	ldr	r2, [r7, #20]
 80051d8:	429a      	cmp	r2, r3
 80051da:	d307      	bcc.n	80051ec <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f003 0301 	and.w	r3, r3, #1
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d1f2      	bne.n	80051d0 <HAL_DMA_IRQHandler+0x2cc>
 80051ea:	e000      	b.n	80051ee <HAL_DMA_IRQHandler+0x2ea>
          break;
 80051ec:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	2201      	movs	r2, #1
 80051f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	2200      	movs	r2, #0
 80051fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005202:	2b00      	cmp	r3, #0
 8005204:	d005      	beq.n	8005212 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800520a:	6878      	ldr	r0, [r7, #4]
 800520c:	4798      	blx	r3
 800520e:	e000      	b.n	8005212 <HAL_DMA_IRQHandler+0x30e>
        return;
 8005210:	bf00      	nop
    }
  }
}
 8005212:	3718      	adds	r7, #24
 8005214:	46bd      	mov	sp, r7
 8005216:	bd80      	pop	{r7, pc}

08005218 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005218:	b480      	push	{r7}
 800521a:	b085      	sub	sp, #20
 800521c:	af00      	add	r7, sp, #0
 800521e:	60f8      	str	r0, [r7, #12]
 8005220:	60b9      	str	r1, [r7, #8]
 8005222:	607a      	str	r2, [r7, #4]
 8005224:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	681a      	ldr	r2, [r3, #0]
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005234:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	683a      	ldr	r2, [r7, #0]
 800523c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	689b      	ldr	r3, [r3, #8]
 8005242:	2b40      	cmp	r3, #64	; 0x40
 8005244:	d108      	bne.n	8005258 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	687a      	ldr	r2, [r7, #4]
 800524c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	68ba      	ldr	r2, [r7, #8]
 8005254:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8005256:	e007      	b.n	8005268 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	68ba      	ldr	r2, [r7, #8]
 800525e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	687a      	ldr	r2, [r7, #4]
 8005266:	60da      	str	r2, [r3, #12]
}
 8005268:	bf00      	nop
 800526a:	3714      	adds	r7, #20
 800526c:	46bd      	mov	sp, r7
 800526e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005272:	4770      	bx	lr

08005274 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005274:	b480      	push	{r7}
 8005276:	b085      	sub	sp, #20
 8005278:	af00      	add	r7, sp, #0
 800527a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	b2db      	uxtb	r3, r3
 8005282:	3b10      	subs	r3, #16
 8005284:	4a14      	ldr	r2, [pc, #80]	; (80052d8 <DMA_CalcBaseAndBitshift+0x64>)
 8005286:	fba2 2303 	umull	r2, r3, r2, r3
 800528a:	091b      	lsrs	r3, r3, #4
 800528c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800528e:	4a13      	ldr	r2, [pc, #76]	; (80052dc <DMA_CalcBaseAndBitshift+0x68>)
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	4413      	add	r3, r2
 8005294:	781b      	ldrb	r3, [r3, #0]
 8005296:	461a      	mov	r2, r3
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	2b03      	cmp	r3, #3
 80052a0:	d909      	bls.n	80052b6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80052aa:	f023 0303 	bic.w	r3, r3, #3
 80052ae:	1d1a      	adds	r2, r3, #4
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	659a      	str	r2, [r3, #88]	; 0x58
 80052b4:	e007      	b.n	80052c6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80052be:	f023 0303 	bic.w	r3, r3, #3
 80052c2:	687a      	ldr	r2, [r7, #4]
 80052c4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80052ca:	4618      	mov	r0, r3
 80052cc:	3714      	adds	r7, #20
 80052ce:	46bd      	mov	sp, r7
 80052d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d4:	4770      	bx	lr
 80052d6:	bf00      	nop
 80052d8:	aaaaaaab 	.word	0xaaaaaaab
 80052dc:	0800c5b0 	.word	0x0800c5b0

080052e0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80052e0:	b480      	push	{r7}
 80052e2:	b085      	sub	sp, #20
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80052e8:	2300      	movs	r3, #0
 80052ea:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052f0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	699b      	ldr	r3, [r3, #24]
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d11f      	bne.n	800533a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80052fa:	68bb      	ldr	r3, [r7, #8]
 80052fc:	2b03      	cmp	r3, #3
 80052fe:	d856      	bhi.n	80053ae <DMA_CheckFifoParam+0xce>
 8005300:	a201      	add	r2, pc, #4	; (adr r2, 8005308 <DMA_CheckFifoParam+0x28>)
 8005302:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005306:	bf00      	nop
 8005308:	08005319 	.word	0x08005319
 800530c:	0800532b 	.word	0x0800532b
 8005310:	08005319 	.word	0x08005319
 8005314:	080053af 	.word	0x080053af
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800531c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005320:	2b00      	cmp	r3, #0
 8005322:	d046      	beq.n	80053b2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005324:	2301      	movs	r3, #1
 8005326:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005328:	e043      	b.n	80053b2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800532e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005332:	d140      	bne.n	80053b6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005334:	2301      	movs	r3, #1
 8005336:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005338:	e03d      	b.n	80053b6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	699b      	ldr	r3, [r3, #24]
 800533e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005342:	d121      	bne.n	8005388 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005344:	68bb      	ldr	r3, [r7, #8]
 8005346:	2b03      	cmp	r3, #3
 8005348:	d837      	bhi.n	80053ba <DMA_CheckFifoParam+0xda>
 800534a:	a201      	add	r2, pc, #4	; (adr r2, 8005350 <DMA_CheckFifoParam+0x70>)
 800534c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005350:	08005361 	.word	0x08005361
 8005354:	08005367 	.word	0x08005367
 8005358:	08005361 	.word	0x08005361
 800535c:	08005379 	.word	0x08005379
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005360:	2301      	movs	r3, #1
 8005362:	73fb      	strb	r3, [r7, #15]
      break;
 8005364:	e030      	b.n	80053c8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800536a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800536e:	2b00      	cmp	r3, #0
 8005370:	d025      	beq.n	80053be <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8005372:	2301      	movs	r3, #1
 8005374:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005376:	e022      	b.n	80053be <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800537c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005380:	d11f      	bne.n	80053c2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8005382:	2301      	movs	r3, #1
 8005384:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005386:	e01c      	b.n	80053c2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005388:	68bb      	ldr	r3, [r7, #8]
 800538a:	2b02      	cmp	r3, #2
 800538c:	d903      	bls.n	8005396 <DMA_CheckFifoParam+0xb6>
 800538e:	68bb      	ldr	r3, [r7, #8]
 8005390:	2b03      	cmp	r3, #3
 8005392:	d003      	beq.n	800539c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005394:	e018      	b.n	80053c8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8005396:	2301      	movs	r3, #1
 8005398:	73fb      	strb	r3, [r7, #15]
      break;
 800539a:	e015      	b.n	80053c8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053a0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d00e      	beq.n	80053c6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80053a8:	2301      	movs	r3, #1
 80053aa:	73fb      	strb	r3, [r7, #15]
      break;
 80053ac:	e00b      	b.n	80053c6 <DMA_CheckFifoParam+0xe6>
      break;
 80053ae:	bf00      	nop
 80053b0:	e00a      	b.n	80053c8 <DMA_CheckFifoParam+0xe8>
      break;
 80053b2:	bf00      	nop
 80053b4:	e008      	b.n	80053c8 <DMA_CheckFifoParam+0xe8>
      break;
 80053b6:	bf00      	nop
 80053b8:	e006      	b.n	80053c8 <DMA_CheckFifoParam+0xe8>
      break;
 80053ba:	bf00      	nop
 80053bc:	e004      	b.n	80053c8 <DMA_CheckFifoParam+0xe8>
      break;
 80053be:	bf00      	nop
 80053c0:	e002      	b.n	80053c8 <DMA_CheckFifoParam+0xe8>
      break;   
 80053c2:	bf00      	nop
 80053c4:	e000      	b.n	80053c8 <DMA_CheckFifoParam+0xe8>
      break;
 80053c6:	bf00      	nop
    }
  } 
  
  return status; 
 80053c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80053ca:	4618      	mov	r0, r3
 80053cc:	3714      	adds	r7, #20
 80053ce:	46bd      	mov	sp, r7
 80053d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d4:	4770      	bx	lr
 80053d6:	bf00      	nop

080053d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80053d8:	b480      	push	{r7}
 80053da:	b089      	sub	sp, #36	; 0x24
 80053dc:	af00      	add	r7, sp, #0
 80053de:	6078      	str	r0, [r7, #4]
 80053e0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80053e2:	2300      	movs	r3, #0
 80053e4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80053e6:	2300      	movs	r3, #0
 80053e8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80053ea:	2300      	movs	r3, #0
 80053ec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80053ee:	2300      	movs	r3, #0
 80053f0:	61fb      	str	r3, [r7, #28]
 80053f2:	e159      	b.n	80056a8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80053f4:	2201      	movs	r2, #1
 80053f6:	69fb      	ldr	r3, [r7, #28]
 80053f8:	fa02 f303 	lsl.w	r3, r2, r3
 80053fc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80053fe:	683b      	ldr	r3, [r7, #0]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	697a      	ldr	r2, [r7, #20]
 8005404:	4013      	ands	r3, r2
 8005406:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005408:	693a      	ldr	r2, [r7, #16]
 800540a:	697b      	ldr	r3, [r7, #20]
 800540c:	429a      	cmp	r2, r3
 800540e:	f040 8148 	bne.w	80056a2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005412:	683b      	ldr	r3, [r7, #0]
 8005414:	685b      	ldr	r3, [r3, #4]
 8005416:	f003 0303 	and.w	r3, r3, #3
 800541a:	2b01      	cmp	r3, #1
 800541c:	d005      	beq.n	800542a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800541e:	683b      	ldr	r3, [r7, #0]
 8005420:	685b      	ldr	r3, [r3, #4]
 8005422:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005426:	2b02      	cmp	r3, #2
 8005428:	d130      	bne.n	800548c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	689b      	ldr	r3, [r3, #8]
 800542e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005430:	69fb      	ldr	r3, [r7, #28]
 8005432:	005b      	lsls	r3, r3, #1
 8005434:	2203      	movs	r2, #3
 8005436:	fa02 f303 	lsl.w	r3, r2, r3
 800543a:	43db      	mvns	r3, r3
 800543c:	69ba      	ldr	r2, [r7, #24]
 800543e:	4013      	ands	r3, r2
 8005440:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005442:	683b      	ldr	r3, [r7, #0]
 8005444:	68da      	ldr	r2, [r3, #12]
 8005446:	69fb      	ldr	r3, [r7, #28]
 8005448:	005b      	lsls	r3, r3, #1
 800544a:	fa02 f303 	lsl.w	r3, r2, r3
 800544e:	69ba      	ldr	r2, [r7, #24]
 8005450:	4313      	orrs	r3, r2
 8005452:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	69ba      	ldr	r2, [r7, #24]
 8005458:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	685b      	ldr	r3, [r3, #4]
 800545e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005460:	2201      	movs	r2, #1
 8005462:	69fb      	ldr	r3, [r7, #28]
 8005464:	fa02 f303 	lsl.w	r3, r2, r3
 8005468:	43db      	mvns	r3, r3
 800546a:	69ba      	ldr	r2, [r7, #24]
 800546c:	4013      	ands	r3, r2
 800546e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005470:	683b      	ldr	r3, [r7, #0]
 8005472:	685b      	ldr	r3, [r3, #4]
 8005474:	091b      	lsrs	r3, r3, #4
 8005476:	f003 0201 	and.w	r2, r3, #1
 800547a:	69fb      	ldr	r3, [r7, #28]
 800547c:	fa02 f303 	lsl.w	r3, r2, r3
 8005480:	69ba      	ldr	r2, [r7, #24]
 8005482:	4313      	orrs	r3, r2
 8005484:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	69ba      	ldr	r2, [r7, #24]
 800548a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800548c:	683b      	ldr	r3, [r7, #0]
 800548e:	685b      	ldr	r3, [r3, #4]
 8005490:	f003 0303 	and.w	r3, r3, #3
 8005494:	2b03      	cmp	r3, #3
 8005496:	d017      	beq.n	80054c8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	68db      	ldr	r3, [r3, #12]
 800549c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800549e:	69fb      	ldr	r3, [r7, #28]
 80054a0:	005b      	lsls	r3, r3, #1
 80054a2:	2203      	movs	r2, #3
 80054a4:	fa02 f303 	lsl.w	r3, r2, r3
 80054a8:	43db      	mvns	r3, r3
 80054aa:	69ba      	ldr	r2, [r7, #24]
 80054ac:	4013      	ands	r3, r2
 80054ae:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80054b0:	683b      	ldr	r3, [r7, #0]
 80054b2:	689a      	ldr	r2, [r3, #8]
 80054b4:	69fb      	ldr	r3, [r7, #28]
 80054b6:	005b      	lsls	r3, r3, #1
 80054b8:	fa02 f303 	lsl.w	r3, r2, r3
 80054bc:	69ba      	ldr	r2, [r7, #24]
 80054be:	4313      	orrs	r3, r2
 80054c0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	69ba      	ldr	r2, [r7, #24]
 80054c6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80054c8:	683b      	ldr	r3, [r7, #0]
 80054ca:	685b      	ldr	r3, [r3, #4]
 80054cc:	f003 0303 	and.w	r3, r3, #3
 80054d0:	2b02      	cmp	r3, #2
 80054d2:	d123      	bne.n	800551c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80054d4:	69fb      	ldr	r3, [r7, #28]
 80054d6:	08da      	lsrs	r2, r3, #3
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	3208      	adds	r2, #8
 80054dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80054e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80054e2:	69fb      	ldr	r3, [r7, #28]
 80054e4:	f003 0307 	and.w	r3, r3, #7
 80054e8:	009b      	lsls	r3, r3, #2
 80054ea:	220f      	movs	r2, #15
 80054ec:	fa02 f303 	lsl.w	r3, r2, r3
 80054f0:	43db      	mvns	r3, r3
 80054f2:	69ba      	ldr	r2, [r7, #24]
 80054f4:	4013      	ands	r3, r2
 80054f6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80054f8:	683b      	ldr	r3, [r7, #0]
 80054fa:	691a      	ldr	r2, [r3, #16]
 80054fc:	69fb      	ldr	r3, [r7, #28]
 80054fe:	f003 0307 	and.w	r3, r3, #7
 8005502:	009b      	lsls	r3, r3, #2
 8005504:	fa02 f303 	lsl.w	r3, r2, r3
 8005508:	69ba      	ldr	r2, [r7, #24]
 800550a:	4313      	orrs	r3, r2
 800550c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800550e:	69fb      	ldr	r3, [r7, #28]
 8005510:	08da      	lsrs	r2, r3, #3
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	3208      	adds	r2, #8
 8005516:	69b9      	ldr	r1, [r7, #24]
 8005518:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005522:	69fb      	ldr	r3, [r7, #28]
 8005524:	005b      	lsls	r3, r3, #1
 8005526:	2203      	movs	r2, #3
 8005528:	fa02 f303 	lsl.w	r3, r2, r3
 800552c:	43db      	mvns	r3, r3
 800552e:	69ba      	ldr	r2, [r7, #24]
 8005530:	4013      	ands	r3, r2
 8005532:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005534:	683b      	ldr	r3, [r7, #0]
 8005536:	685b      	ldr	r3, [r3, #4]
 8005538:	f003 0203 	and.w	r2, r3, #3
 800553c:	69fb      	ldr	r3, [r7, #28]
 800553e:	005b      	lsls	r3, r3, #1
 8005540:	fa02 f303 	lsl.w	r3, r2, r3
 8005544:	69ba      	ldr	r2, [r7, #24]
 8005546:	4313      	orrs	r3, r2
 8005548:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	69ba      	ldr	r2, [r7, #24]
 800554e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005550:	683b      	ldr	r3, [r7, #0]
 8005552:	685b      	ldr	r3, [r3, #4]
 8005554:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005558:	2b00      	cmp	r3, #0
 800555a:	f000 80a2 	beq.w	80056a2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800555e:	2300      	movs	r3, #0
 8005560:	60fb      	str	r3, [r7, #12]
 8005562:	4b57      	ldr	r3, [pc, #348]	; (80056c0 <HAL_GPIO_Init+0x2e8>)
 8005564:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005566:	4a56      	ldr	r2, [pc, #344]	; (80056c0 <HAL_GPIO_Init+0x2e8>)
 8005568:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800556c:	6453      	str	r3, [r2, #68]	; 0x44
 800556e:	4b54      	ldr	r3, [pc, #336]	; (80056c0 <HAL_GPIO_Init+0x2e8>)
 8005570:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005572:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005576:	60fb      	str	r3, [r7, #12]
 8005578:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800557a:	4a52      	ldr	r2, [pc, #328]	; (80056c4 <HAL_GPIO_Init+0x2ec>)
 800557c:	69fb      	ldr	r3, [r7, #28]
 800557e:	089b      	lsrs	r3, r3, #2
 8005580:	3302      	adds	r3, #2
 8005582:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005586:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005588:	69fb      	ldr	r3, [r7, #28]
 800558a:	f003 0303 	and.w	r3, r3, #3
 800558e:	009b      	lsls	r3, r3, #2
 8005590:	220f      	movs	r2, #15
 8005592:	fa02 f303 	lsl.w	r3, r2, r3
 8005596:	43db      	mvns	r3, r3
 8005598:	69ba      	ldr	r2, [r7, #24]
 800559a:	4013      	ands	r3, r2
 800559c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	4a49      	ldr	r2, [pc, #292]	; (80056c8 <HAL_GPIO_Init+0x2f0>)
 80055a2:	4293      	cmp	r3, r2
 80055a4:	d019      	beq.n	80055da <HAL_GPIO_Init+0x202>
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	4a48      	ldr	r2, [pc, #288]	; (80056cc <HAL_GPIO_Init+0x2f4>)
 80055aa:	4293      	cmp	r3, r2
 80055ac:	d013      	beq.n	80055d6 <HAL_GPIO_Init+0x1fe>
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	4a47      	ldr	r2, [pc, #284]	; (80056d0 <HAL_GPIO_Init+0x2f8>)
 80055b2:	4293      	cmp	r3, r2
 80055b4:	d00d      	beq.n	80055d2 <HAL_GPIO_Init+0x1fa>
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	4a46      	ldr	r2, [pc, #280]	; (80056d4 <HAL_GPIO_Init+0x2fc>)
 80055ba:	4293      	cmp	r3, r2
 80055bc:	d007      	beq.n	80055ce <HAL_GPIO_Init+0x1f6>
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	4a45      	ldr	r2, [pc, #276]	; (80056d8 <HAL_GPIO_Init+0x300>)
 80055c2:	4293      	cmp	r3, r2
 80055c4:	d101      	bne.n	80055ca <HAL_GPIO_Init+0x1f2>
 80055c6:	2304      	movs	r3, #4
 80055c8:	e008      	b.n	80055dc <HAL_GPIO_Init+0x204>
 80055ca:	2307      	movs	r3, #7
 80055cc:	e006      	b.n	80055dc <HAL_GPIO_Init+0x204>
 80055ce:	2303      	movs	r3, #3
 80055d0:	e004      	b.n	80055dc <HAL_GPIO_Init+0x204>
 80055d2:	2302      	movs	r3, #2
 80055d4:	e002      	b.n	80055dc <HAL_GPIO_Init+0x204>
 80055d6:	2301      	movs	r3, #1
 80055d8:	e000      	b.n	80055dc <HAL_GPIO_Init+0x204>
 80055da:	2300      	movs	r3, #0
 80055dc:	69fa      	ldr	r2, [r7, #28]
 80055de:	f002 0203 	and.w	r2, r2, #3
 80055e2:	0092      	lsls	r2, r2, #2
 80055e4:	4093      	lsls	r3, r2
 80055e6:	69ba      	ldr	r2, [r7, #24]
 80055e8:	4313      	orrs	r3, r2
 80055ea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80055ec:	4935      	ldr	r1, [pc, #212]	; (80056c4 <HAL_GPIO_Init+0x2ec>)
 80055ee:	69fb      	ldr	r3, [r7, #28]
 80055f0:	089b      	lsrs	r3, r3, #2
 80055f2:	3302      	adds	r3, #2
 80055f4:	69ba      	ldr	r2, [r7, #24]
 80055f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80055fa:	4b38      	ldr	r3, [pc, #224]	; (80056dc <HAL_GPIO_Init+0x304>)
 80055fc:	689b      	ldr	r3, [r3, #8]
 80055fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005600:	693b      	ldr	r3, [r7, #16]
 8005602:	43db      	mvns	r3, r3
 8005604:	69ba      	ldr	r2, [r7, #24]
 8005606:	4013      	ands	r3, r2
 8005608:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800560a:	683b      	ldr	r3, [r7, #0]
 800560c:	685b      	ldr	r3, [r3, #4]
 800560e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005612:	2b00      	cmp	r3, #0
 8005614:	d003      	beq.n	800561e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8005616:	69ba      	ldr	r2, [r7, #24]
 8005618:	693b      	ldr	r3, [r7, #16]
 800561a:	4313      	orrs	r3, r2
 800561c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800561e:	4a2f      	ldr	r2, [pc, #188]	; (80056dc <HAL_GPIO_Init+0x304>)
 8005620:	69bb      	ldr	r3, [r7, #24]
 8005622:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005624:	4b2d      	ldr	r3, [pc, #180]	; (80056dc <HAL_GPIO_Init+0x304>)
 8005626:	68db      	ldr	r3, [r3, #12]
 8005628:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800562a:	693b      	ldr	r3, [r7, #16]
 800562c:	43db      	mvns	r3, r3
 800562e:	69ba      	ldr	r2, [r7, #24]
 8005630:	4013      	ands	r3, r2
 8005632:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005634:	683b      	ldr	r3, [r7, #0]
 8005636:	685b      	ldr	r3, [r3, #4]
 8005638:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800563c:	2b00      	cmp	r3, #0
 800563e:	d003      	beq.n	8005648 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8005640:	69ba      	ldr	r2, [r7, #24]
 8005642:	693b      	ldr	r3, [r7, #16]
 8005644:	4313      	orrs	r3, r2
 8005646:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005648:	4a24      	ldr	r2, [pc, #144]	; (80056dc <HAL_GPIO_Init+0x304>)
 800564a:	69bb      	ldr	r3, [r7, #24]
 800564c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800564e:	4b23      	ldr	r3, [pc, #140]	; (80056dc <HAL_GPIO_Init+0x304>)
 8005650:	685b      	ldr	r3, [r3, #4]
 8005652:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005654:	693b      	ldr	r3, [r7, #16]
 8005656:	43db      	mvns	r3, r3
 8005658:	69ba      	ldr	r2, [r7, #24]
 800565a:	4013      	ands	r3, r2
 800565c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800565e:	683b      	ldr	r3, [r7, #0]
 8005660:	685b      	ldr	r3, [r3, #4]
 8005662:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005666:	2b00      	cmp	r3, #0
 8005668:	d003      	beq.n	8005672 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800566a:	69ba      	ldr	r2, [r7, #24]
 800566c:	693b      	ldr	r3, [r7, #16]
 800566e:	4313      	orrs	r3, r2
 8005670:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005672:	4a1a      	ldr	r2, [pc, #104]	; (80056dc <HAL_GPIO_Init+0x304>)
 8005674:	69bb      	ldr	r3, [r7, #24]
 8005676:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005678:	4b18      	ldr	r3, [pc, #96]	; (80056dc <HAL_GPIO_Init+0x304>)
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800567e:	693b      	ldr	r3, [r7, #16]
 8005680:	43db      	mvns	r3, r3
 8005682:	69ba      	ldr	r2, [r7, #24]
 8005684:	4013      	ands	r3, r2
 8005686:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005688:	683b      	ldr	r3, [r7, #0]
 800568a:	685b      	ldr	r3, [r3, #4]
 800568c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005690:	2b00      	cmp	r3, #0
 8005692:	d003      	beq.n	800569c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8005694:	69ba      	ldr	r2, [r7, #24]
 8005696:	693b      	ldr	r3, [r7, #16]
 8005698:	4313      	orrs	r3, r2
 800569a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800569c:	4a0f      	ldr	r2, [pc, #60]	; (80056dc <HAL_GPIO_Init+0x304>)
 800569e:	69bb      	ldr	r3, [r7, #24]
 80056a0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80056a2:	69fb      	ldr	r3, [r7, #28]
 80056a4:	3301      	adds	r3, #1
 80056a6:	61fb      	str	r3, [r7, #28]
 80056a8:	69fb      	ldr	r3, [r7, #28]
 80056aa:	2b0f      	cmp	r3, #15
 80056ac:	f67f aea2 	bls.w	80053f4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80056b0:	bf00      	nop
 80056b2:	bf00      	nop
 80056b4:	3724      	adds	r7, #36	; 0x24
 80056b6:	46bd      	mov	sp, r7
 80056b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056bc:	4770      	bx	lr
 80056be:	bf00      	nop
 80056c0:	40023800 	.word	0x40023800
 80056c4:	40013800 	.word	0x40013800
 80056c8:	40020000 	.word	0x40020000
 80056cc:	40020400 	.word	0x40020400
 80056d0:	40020800 	.word	0x40020800
 80056d4:	40020c00 	.word	0x40020c00
 80056d8:	40021000 	.word	0x40021000
 80056dc:	40013c00 	.word	0x40013c00

080056e0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80056e0:	b480      	push	{r7}
 80056e2:	b085      	sub	sp, #20
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	6078      	str	r0, [r7, #4]
 80056e8:	460b      	mov	r3, r1
 80056ea:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	691a      	ldr	r2, [r3, #16]
 80056f0:	887b      	ldrh	r3, [r7, #2]
 80056f2:	4013      	ands	r3, r2
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d002      	beq.n	80056fe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80056f8:	2301      	movs	r3, #1
 80056fa:	73fb      	strb	r3, [r7, #15]
 80056fc:	e001      	b.n	8005702 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80056fe:	2300      	movs	r3, #0
 8005700:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005702:	7bfb      	ldrb	r3, [r7, #15]
}
 8005704:	4618      	mov	r0, r3
 8005706:	3714      	adds	r7, #20
 8005708:	46bd      	mov	sp, r7
 800570a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800570e:	4770      	bx	lr

08005710 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005710:	b480      	push	{r7}
 8005712:	b083      	sub	sp, #12
 8005714:	af00      	add	r7, sp, #0
 8005716:	6078      	str	r0, [r7, #4]
 8005718:	460b      	mov	r3, r1
 800571a:	807b      	strh	r3, [r7, #2]
 800571c:	4613      	mov	r3, r2
 800571e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005720:	787b      	ldrb	r3, [r7, #1]
 8005722:	2b00      	cmp	r3, #0
 8005724:	d003      	beq.n	800572e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005726:	887a      	ldrh	r2, [r7, #2]
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800572c:	e003      	b.n	8005736 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800572e:	887b      	ldrh	r3, [r7, #2]
 8005730:	041a      	lsls	r2, r3, #16
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	619a      	str	r2, [r3, #24]
}
 8005736:	bf00      	nop
 8005738:	370c      	adds	r7, #12
 800573a:	46bd      	mov	sp, r7
 800573c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005740:	4770      	bx	lr

08005742 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005742:	b480      	push	{r7}
 8005744:	b085      	sub	sp, #20
 8005746:	af00      	add	r7, sp, #0
 8005748:	6078      	str	r0, [r7, #4]
 800574a:	460b      	mov	r3, r1
 800574c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	695b      	ldr	r3, [r3, #20]
 8005752:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005754:	887a      	ldrh	r2, [r7, #2]
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	4013      	ands	r3, r2
 800575a:	041a      	lsls	r2, r3, #16
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	43d9      	mvns	r1, r3
 8005760:	887b      	ldrh	r3, [r7, #2]
 8005762:	400b      	ands	r3, r1
 8005764:	431a      	orrs	r2, r3
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	619a      	str	r2, [r3, #24]
}
 800576a:	bf00      	nop
 800576c:	3714      	adds	r7, #20
 800576e:	46bd      	mov	sp, r7
 8005770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005774:	4770      	bx	lr
	...

08005778 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005778:	b580      	push	{r7, lr}
 800577a:	b086      	sub	sp, #24
 800577c:	af00      	add	r7, sp, #0
 800577e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2b00      	cmp	r3, #0
 8005784:	d101      	bne.n	800578a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005786:	2301      	movs	r3, #1
 8005788:	e267      	b.n	8005c5a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	f003 0301 	and.w	r3, r3, #1
 8005792:	2b00      	cmp	r3, #0
 8005794:	d075      	beq.n	8005882 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005796:	4b88      	ldr	r3, [pc, #544]	; (80059b8 <HAL_RCC_OscConfig+0x240>)
 8005798:	689b      	ldr	r3, [r3, #8]
 800579a:	f003 030c 	and.w	r3, r3, #12
 800579e:	2b04      	cmp	r3, #4
 80057a0:	d00c      	beq.n	80057bc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80057a2:	4b85      	ldr	r3, [pc, #532]	; (80059b8 <HAL_RCC_OscConfig+0x240>)
 80057a4:	689b      	ldr	r3, [r3, #8]
 80057a6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80057aa:	2b08      	cmp	r3, #8
 80057ac:	d112      	bne.n	80057d4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80057ae:	4b82      	ldr	r3, [pc, #520]	; (80059b8 <HAL_RCC_OscConfig+0x240>)
 80057b0:	685b      	ldr	r3, [r3, #4]
 80057b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80057b6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80057ba:	d10b      	bne.n	80057d4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80057bc:	4b7e      	ldr	r3, [pc, #504]	; (80059b8 <HAL_RCC_OscConfig+0x240>)
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d05b      	beq.n	8005880 <HAL_RCC_OscConfig+0x108>
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	685b      	ldr	r3, [r3, #4]
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d157      	bne.n	8005880 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80057d0:	2301      	movs	r3, #1
 80057d2:	e242      	b.n	8005c5a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	685b      	ldr	r3, [r3, #4]
 80057d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80057dc:	d106      	bne.n	80057ec <HAL_RCC_OscConfig+0x74>
 80057de:	4b76      	ldr	r3, [pc, #472]	; (80059b8 <HAL_RCC_OscConfig+0x240>)
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	4a75      	ldr	r2, [pc, #468]	; (80059b8 <HAL_RCC_OscConfig+0x240>)
 80057e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80057e8:	6013      	str	r3, [r2, #0]
 80057ea:	e01d      	b.n	8005828 <HAL_RCC_OscConfig+0xb0>
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	685b      	ldr	r3, [r3, #4]
 80057f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80057f4:	d10c      	bne.n	8005810 <HAL_RCC_OscConfig+0x98>
 80057f6:	4b70      	ldr	r3, [pc, #448]	; (80059b8 <HAL_RCC_OscConfig+0x240>)
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	4a6f      	ldr	r2, [pc, #444]	; (80059b8 <HAL_RCC_OscConfig+0x240>)
 80057fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005800:	6013      	str	r3, [r2, #0]
 8005802:	4b6d      	ldr	r3, [pc, #436]	; (80059b8 <HAL_RCC_OscConfig+0x240>)
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	4a6c      	ldr	r2, [pc, #432]	; (80059b8 <HAL_RCC_OscConfig+0x240>)
 8005808:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800580c:	6013      	str	r3, [r2, #0]
 800580e:	e00b      	b.n	8005828 <HAL_RCC_OscConfig+0xb0>
 8005810:	4b69      	ldr	r3, [pc, #420]	; (80059b8 <HAL_RCC_OscConfig+0x240>)
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	4a68      	ldr	r2, [pc, #416]	; (80059b8 <HAL_RCC_OscConfig+0x240>)
 8005816:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800581a:	6013      	str	r3, [r2, #0]
 800581c:	4b66      	ldr	r3, [pc, #408]	; (80059b8 <HAL_RCC_OscConfig+0x240>)
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	4a65      	ldr	r2, [pc, #404]	; (80059b8 <HAL_RCC_OscConfig+0x240>)
 8005822:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005826:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	685b      	ldr	r3, [r3, #4]
 800582c:	2b00      	cmp	r3, #0
 800582e:	d013      	beq.n	8005858 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005830:	f7fe fcf0 	bl	8004214 <HAL_GetTick>
 8005834:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005836:	e008      	b.n	800584a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005838:	f7fe fcec 	bl	8004214 <HAL_GetTick>
 800583c:	4602      	mov	r2, r0
 800583e:	693b      	ldr	r3, [r7, #16]
 8005840:	1ad3      	subs	r3, r2, r3
 8005842:	2b64      	cmp	r3, #100	; 0x64
 8005844:	d901      	bls.n	800584a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005846:	2303      	movs	r3, #3
 8005848:	e207      	b.n	8005c5a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800584a:	4b5b      	ldr	r3, [pc, #364]	; (80059b8 <HAL_RCC_OscConfig+0x240>)
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005852:	2b00      	cmp	r3, #0
 8005854:	d0f0      	beq.n	8005838 <HAL_RCC_OscConfig+0xc0>
 8005856:	e014      	b.n	8005882 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005858:	f7fe fcdc 	bl	8004214 <HAL_GetTick>
 800585c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800585e:	e008      	b.n	8005872 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005860:	f7fe fcd8 	bl	8004214 <HAL_GetTick>
 8005864:	4602      	mov	r2, r0
 8005866:	693b      	ldr	r3, [r7, #16]
 8005868:	1ad3      	subs	r3, r2, r3
 800586a:	2b64      	cmp	r3, #100	; 0x64
 800586c:	d901      	bls.n	8005872 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800586e:	2303      	movs	r3, #3
 8005870:	e1f3      	b.n	8005c5a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005872:	4b51      	ldr	r3, [pc, #324]	; (80059b8 <HAL_RCC_OscConfig+0x240>)
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800587a:	2b00      	cmp	r3, #0
 800587c:	d1f0      	bne.n	8005860 <HAL_RCC_OscConfig+0xe8>
 800587e:	e000      	b.n	8005882 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005880:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	f003 0302 	and.w	r3, r3, #2
 800588a:	2b00      	cmp	r3, #0
 800588c:	d063      	beq.n	8005956 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800588e:	4b4a      	ldr	r3, [pc, #296]	; (80059b8 <HAL_RCC_OscConfig+0x240>)
 8005890:	689b      	ldr	r3, [r3, #8]
 8005892:	f003 030c 	and.w	r3, r3, #12
 8005896:	2b00      	cmp	r3, #0
 8005898:	d00b      	beq.n	80058b2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800589a:	4b47      	ldr	r3, [pc, #284]	; (80059b8 <HAL_RCC_OscConfig+0x240>)
 800589c:	689b      	ldr	r3, [r3, #8]
 800589e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80058a2:	2b08      	cmp	r3, #8
 80058a4:	d11c      	bne.n	80058e0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80058a6:	4b44      	ldr	r3, [pc, #272]	; (80059b8 <HAL_RCC_OscConfig+0x240>)
 80058a8:	685b      	ldr	r3, [r3, #4]
 80058aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d116      	bne.n	80058e0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80058b2:	4b41      	ldr	r3, [pc, #260]	; (80059b8 <HAL_RCC_OscConfig+0x240>)
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f003 0302 	and.w	r3, r3, #2
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d005      	beq.n	80058ca <HAL_RCC_OscConfig+0x152>
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	68db      	ldr	r3, [r3, #12]
 80058c2:	2b01      	cmp	r3, #1
 80058c4:	d001      	beq.n	80058ca <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80058c6:	2301      	movs	r3, #1
 80058c8:	e1c7      	b.n	8005c5a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80058ca:	4b3b      	ldr	r3, [pc, #236]	; (80059b8 <HAL_RCC_OscConfig+0x240>)
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	691b      	ldr	r3, [r3, #16]
 80058d6:	00db      	lsls	r3, r3, #3
 80058d8:	4937      	ldr	r1, [pc, #220]	; (80059b8 <HAL_RCC_OscConfig+0x240>)
 80058da:	4313      	orrs	r3, r2
 80058dc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80058de:	e03a      	b.n	8005956 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	68db      	ldr	r3, [r3, #12]
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d020      	beq.n	800592a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80058e8:	4b34      	ldr	r3, [pc, #208]	; (80059bc <HAL_RCC_OscConfig+0x244>)
 80058ea:	2201      	movs	r2, #1
 80058ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058ee:	f7fe fc91 	bl	8004214 <HAL_GetTick>
 80058f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80058f4:	e008      	b.n	8005908 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80058f6:	f7fe fc8d 	bl	8004214 <HAL_GetTick>
 80058fa:	4602      	mov	r2, r0
 80058fc:	693b      	ldr	r3, [r7, #16]
 80058fe:	1ad3      	subs	r3, r2, r3
 8005900:	2b02      	cmp	r3, #2
 8005902:	d901      	bls.n	8005908 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005904:	2303      	movs	r3, #3
 8005906:	e1a8      	b.n	8005c5a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005908:	4b2b      	ldr	r3, [pc, #172]	; (80059b8 <HAL_RCC_OscConfig+0x240>)
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	f003 0302 	and.w	r3, r3, #2
 8005910:	2b00      	cmp	r3, #0
 8005912:	d0f0      	beq.n	80058f6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005914:	4b28      	ldr	r3, [pc, #160]	; (80059b8 <HAL_RCC_OscConfig+0x240>)
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	691b      	ldr	r3, [r3, #16]
 8005920:	00db      	lsls	r3, r3, #3
 8005922:	4925      	ldr	r1, [pc, #148]	; (80059b8 <HAL_RCC_OscConfig+0x240>)
 8005924:	4313      	orrs	r3, r2
 8005926:	600b      	str	r3, [r1, #0]
 8005928:	e015      	b.n	8005956 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800592a:	4b24      	ldr	r3, [pc, #144]	; (80059bc <HAL_RCC_OscConfig+0x244>)
 800592c:	2200      	movs	r2, #0
 800592e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005930:	f7fe fc70 	bl	8004214 <HAL_GetTick>
 8005934:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005936:	e008      	b.n	800594a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005938:	f7fe fc6c 	bl	8004214 <HAL_GetTick>
 800593c:	4602      	mov	r2, r0
 800593e:	693b      	ldr	r3, [r7, #16]
 8005940:	1ad3      	subs	r3, r2, r3
 8005942:	2b02      	cmp	r3, #2
 8005944:	d901      	bls.n	800594a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005946:	2303      	movs	r3, #3
 8005948:	e187      	b.n	8005c5a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800594a:	4b1b      	ldr	r3, [pc, #108]	; (80059b8 <HAL_RCC_OscConfig+0x240>)
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	f003 0302 	and.w	r3, r3, #2
 8005952:	2b00      	cmp	r3, #0
 8005954:	d1f0      	bne.n	8005938 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	f003 0308 	and.w	r3, r3, #8
 800595e:	2b00      	cmp	r3, #0
 8005960:	d036      	beq.n	80059d0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	695b      	ldr	r3, [r3, #20]
 8005966:	2b00      	cmp	r3, #0
 8005968:	d016      	beq.n	8005998 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800596a:	4b15      	ldr	r3, [pc, #84]	; (80059c0 <HAL_RCC_OscConfig+0x248>)
 800596c:	2201      	movs	r2, #1
 800596e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005970:	f7fe fc50 	bl	8004214 <HAL_GetTick>
 8005974:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005976:	e008      	b.n	800598a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005978:	f7fe fc4c 	bl	8004214 <HAL_GetTick>
 800597c:	4602      	mov	r2, r0
 800597e:	693b      	ldr	r3, [r7, #16]
 8005980:	1ad3      	subs	r3, r2, r3
 8005982:	2b02      	cmp	r3, #2
 8005984:	d901      	bls.n	800598a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005986:	2303      	movs	r3, #3
 8005988:	e167      	b.n	8005c5a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800598a:	4b0b      	ldr	r3, [pc, #44]	; (80059b8 <HAL_RCC_OscConfig+0x240>)
 800598c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800598e:	f003 0302 	and.w	r3, r3, #2
 8005992:	2b00      	cmp	r3, #0
 8005994:	d0f0      	beq.n	8005978 <HAL_RCC_OscConfig+0x200>
 8005996:	e01b      	b.n	80059d0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005998:	4b09      	ldr	r3, [pc, #36]	; (80059c0 <HAL_RCC_OscConfig+0x248>)
 800599a:	2200      	movs	r2, #0
 800599c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800599e:	f7fe fc39 	bl	8004214 <HAL_GetTick>
 80059a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80059a4:	e00e      	b.n	80059c4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80059a6:	f7fe fc35 	bl	8004214 <HAL_GetTick>
 80059aa:	4602      	mov	r2, r0
 80059ac:	693b      	ldr	r3, [r7, #16]
 80059ae:	1ad3      	subs	r3, r2, r3
 80059b0:	2b02      	cmp	r3, #2
 80059b2:	d907      	bls.n	80059c4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80059b4:	2303      	movs	r3, #3
 80059b6:	e150      	b.n	8005c5a <HAL_RCC_OscConfig+0x4e2>
 80059b8:	40023800 	.word	0x40023800
 80059bc:	42470000 	.word	0x42470000
 80059c0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80059c4:	4b88      	ldr	r3, [pc, #544]	; (8005be8 <HAL_RCC_OscConfig+0x470>)
 80059c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80059c8:	f003 0302 	and.w	r3, r3, #2
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d1ea      	bne.n	80059a6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	f003 0304 	and.w	r3, r3, #4
 80059d8:	2b00      	cmp	r3, #0
 80059da:	f000 8097 	beq.w	8005b0c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80059de:	2300      	movs	r3, #0
 80059e0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80059e2:	4b81      	ldr	r3, [pc, #516]	; (8005be8 <HAL_RCC_OscConfig+0x470>)
 80059e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d10f      	bne.n	8005a0e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80059ee:	2300      	movs	r3, #0
 80059f0:	60bb      	str	r3, [r7, #8]
 80059f2:	4b7d      	ldr	r3, [pc, #500]	; (8005be8 <HAL_RCC_OscConfig+0x470>)
 80059f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059f6:	4a7c      	ldr	r2, [pc, #496]	; (8005be8 <HAL_RCC_OscConfig+0x470>)
 80059f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80059fc:	6413      	str	r3, [r2, #64]	; 0x40
 80059fe:	4b7a      	ldr	r3, [pc, #488]	; (8005be8 <HAL_RCC_OscConfig+0x470>)
 8005a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a06:	60bb      	str	r3, [r7, #8]
 8005a08:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005a0a:	2301      	movs	r3, #1
 8005a0c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a0e:	4b77      	ldr	r3, [pc, #476]	; (8005bec <HAL_RCC_OscConfig+0x474>)
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d118      	bne.n	8005a4c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005a1a:	4b74      	ldr	r3, [pc, #464]	; (8005bec <HAL_RCC_OscConfig+0x474>)
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	4a73      	ldr	r2, [pc, #460]	; (8005bec <HAL_RCC_OscConfig+0x474>)
 8005a20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a24:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005a26:	f7fe fbf5 	bl	8004214 <HAL_GetTick>
 8005a2a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a2c:	e008      	b.n	8005a40 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005a2e:	f7fe fbf1 	bl	8004214 <HAL_GetTick>
 8005a32:	4602      	mov	r2, r0
 8005a34:	693b      	ldr	r3, [r7, #16]
 8005a36:	1ad3      	subs	r3, r2, r3
 8005a38:	2b02      	cmp	r3, #2
 8005a3a:	d901      	bls.n	8005a40 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005a3c:	2303      	movs	r3, #3
 8005a3e:	e10c      	b.n	8005c5a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a40:	4b6a      	ldr	r3, [pc, #424]	; (8005bec <HAL_RCC_OscConfig+0x474>)
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d0f0      	beq.n	8005a2e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	689b      	ldr	r3, [r3, #8]
 8005a50:	2b01      	cmp	r3, #1
 8005a52:	d106      	bne.n	8005a62 <HAL_RCC_OscConfig+0x2ea>
 8005a54:	4b64      	ldr	r3, [pc, #400]	; (8005be8 <HAL_RCC_OscConfig+0x470>)
 8005a56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a58:	4a63      	ldr	r2, [pc, #396]	; (8005be8 <HAL_RCC_OscConfig+0x470>)
 8005a5a:	f043 0301 	orr.w	r3, r3, #1
 8005a5e:	6713      	str	r3, [r2, #112]	; 0x70
 8005a60:	e01c      	b.n	8005a9c <HAL_RCC_OscConfig+0x324>
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	689b      	ldr	r3, [r3, #8]
 8005a66:	2b05      	cmp	r3, #5
 8005a68:	d10c      	bne.n	8005a84 <HAL_RCC_OscConfig+0x30c>
 8005a6a:	4b5f      	ldr	r3, [pc, #380]	; (8005be8 <HAL_RCC_OscConfig+0x470>)
 8005a6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a6e:	4a5e      	ldr	r2, [pc, #376]	; (8005be8 <HAL_RCC_OscConfig+0x470>)
 8005a70:	f043 0304 	orr.w	r3, r3, #4
 8005a74:	6713      	str	r3, [r2, #112]	; 0x70
 8005a76:	4b5c      	ldr	r3, [pc, #368]	; (8005be8 <HAL_RCC_OscConfig+0x470>)
 8005a78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a7a:	4a5b      	ldr	r2, [pc, #364]	; (8005be8 <HAL_RCC_OscConfig+0x470>)
 8005a7c:	f043 0301 	orr.w	r3, r3, #1
 8005a80:	6713      	str	r3, [r2, #112]	; 0x70
 8005a82:	e00b      	b.n	8005a9c <HAL_RCC_OscConfig+0x324>
 8005a84:	4b58      	ldr	r3, [pc, #352]	; (8005be8 <HAL_RCC_OscConfig+0x470>)
 8005a86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a88:	4a57      	ldr	r2, [pc, #348]	; (8005be8 <HAL_RCC_OscConfig+0x470>)
 8005a8a:	f023 0301 	bic.w	r3, r3, #1
 8005a8e:	6713      	str	r3, [r2, #112]	; 0x70
 8005a90:	4b55      	ldr	r3, [pc, #340]	; (8005be8 <HAL_RCC_OscConfig+0x470>)
 8005a92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a94:	4a54      	ldr	r2, [pc, #336]	; (8005be8 <HAL_RCC_OscConfig+0x470>)
 8005a96:	f023 0304 	bic.w	r3, r3, #4
 8005a9a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	689b      	ldr	r3, [r3, #8]
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d015      	beq.n	8005ad0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005aa4:	f7fe fbb6 	bl	8004214 <HAL_GetTick>
 8005aa8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005aaa:	e00a      	b.n	8005ac2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005aac:	f7fe fbb2 	bl	8004214 <HAL_GetTick>
 8005ab0:	4602      	mov	r2, r0
 8005ab2:	693b      	ldr	r3, [r7, #16]
 8005ab4:	1ad3      	subs	r3, r2, r3
 8005ab6:	f241 3288 	movw	r2, #5000	; 0x1388
 8005aba:	4293      	cmp	r3, r2
 8005abc:	d901      	bls.n	8005ac2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005abe:	2303      	movs	r3, #3
 8005ac0:	e0cb      	b.n	8005c5a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005ac2:	4b49      	ldr	r3, [pc, #292]	; (8005be8 <HAL_RCC_OscConfig+0x470>)
 8005ac4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ac6:	f003 0302 	and.w	r3, r3, #2
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d0ee      	beq.n	8005aac <HAL_RCC_OscConfig+0x334>
 8005ace:	e014      	b.n	8005afa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005ad0:	f7fe fba0 	bl	8004214 <HAL_GetTick>
 8005ad4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005ad6:	e00a      	b.n	8005aee <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005ad8:	f7fe fb9c 	bl	8004214 <HAL_GetTick>
 8005adc:	4602      	mov	r2, r0
 8005ade:	693b      	ldr	r3, [r7, #16]
 8005ae0:	1ad3      	subs	r3, r2, r3
 8005ae2:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ae6:	4293      	cmp	r3, r2
 8005ae8:	d901      	bls.n	8005aee <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005aea:	2303      	movs	r3, #3
 8005aec:	e0b5      	b.n	8005c5a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005aee:	4b3e      	ldr	r3, [pc, #248]	; (8005be8 <HAL_RCC_OscConfig+0x470>)
 8005af0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005af2:	f003 0302 	and.w	r3, r3, #2
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d1ee      	bne.n	8005ad8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005afa:	7dfb      	ldrb	r3, [r7, #23]
 8005afc:	2b01      	cmp	r3, #1
 8005afe:	d105      	bne.n	8005b0c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005b00:	4b39      	ldr	r3, [pc, #228]	; (8005be8 <HAL_RCC_OscConfig+0x470>)
 8005b02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b04:	4a38      	ldr	r2, [pc, #224]	; (8005be8 <HAL_RCC_OscConfig+0x470>)
 8005b06:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005b0a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	699b      	ldr	r3, [r3, #24]
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	f000 80a1 	beq.w	8005c58 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005b16:	4b34      	ldr	r3, [pc, #208]	; (8005be8 <HAL_RCC_OscConfig+0x470>)
 8005b18:	689b      	ldr	r3, [r3, #8]
 8005b1a:	f003 030c 	and.w	r3, r3, #12
 8005b1e:	2b08      	cmp	r3, #8
 8005b20:	d05c      	beq.n	8005bdc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	699b      	ldr	r3, [r3, #24]
 8005b26:	2b02      	cmp	r3, #2
 8005b28:	d141      	bne.n	8005bae <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005b2a:	4b31      	ldr	r3, [pc, #196]	; (8005bf0 <HAL_RCC_OscConfig+0x478>)
 8005b2c:	2200      	movs	r2, #0
 8005b2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b30:	f7fe fb70 	bl	8004214 <HAL_GetTick>
 8005b34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005b36:	e008      	b.n	8005b4a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005b38:	f7fe fb6c 	bl	8004214 <HAL_GetTick>
 8005b3c:	4602      	mov	r2, r0
 8005b3e:	693b      	ldr	r3, [r7, #16]
 8005b40:	1ad3      	subs	r3, r2, r3
 8005b42:	2b02      	cmp	r3, #2
 8005b44:	d901      	bls.n	8005b4a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005b46:	2303      	movs	r3, #3
 8005b48:	e087      	b.n	8005c5a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005b4a:	4b27      	ldr	r3, [pc, #156]	; (8005be8 <HAL_RCC_OscConfig+0x470>)
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d1f0      	bne.n	8005b38 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	69da      	ldr	r2, [r3, #28]
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	6a1b      	ldr	r3, [r3, #32]
 8005b5e:	431a      	orrs	r2, r3
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b64:	019b      	lsls	r3, r3, #6
 8005b66:	431a      	orrs	r2, r3
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b6c:	085b      	lsrs	r3, r3, #1
 8005b6e:	3b01      	subs	r3, #1
 8005b70:	041b      	lsls	r3, r3, #16
 8005b72:	431a      	orrs	r2, r3
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b78:	061b      	lsls	r3, r3, #24
 8005b7a:	491b      	ldr	r1, [pc, #108]	; (8005be8 <HAL_RCC_OscConfig+0x470>)
 8005b7c:	4313      	orrs	r3, r2
 8005b7e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005b80:	4b1b      	ldr	r3, [pc, #108]	; (8005bf0 <HAL_RCC_OscConfig+0x478>)
 8005b82:	2201      	movs	r2, #1
 8005b84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b86:	f7fe fb45 	bl	8004214 <HAL_GetTick>
 8005b8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005b8c:	e008      	b.n	8005ba0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005b8e:	f7fe fb41 	bl	8004214 <HAL_GetTick>
 8005b92:	4602      	mov	r2, r0
 8005b94:	693b      	ldr	r3, [r7, #16]
 8005b96:	1ad3      	subs	r3, r2, r3
 8005b98:	2b02      	cmp	r3, #2
 8005b9a:	d901      	bls.n	8005ba0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005b9c:	2303      	movs	r3, #3
 8005b9e:	e05c      	b.n	8005c5a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005ba0:	4b11      	ldr	r3, [pc, #68]	; (8005be8 <HAL_RCC_OscConfig+0x470>)
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d0f0      	beq.n	8005b8e <HAL_RCC_OscConfig+0x416>
 8005bac:	e054      	b.n	8005c58 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005bae:	4b10      	ldr	r3, [pc, #64]	; (8005bf0 <HAL_RCC_OscConfig+0x478>)
 8005bb0:	2200      	movs	r2, #0
 8005bb2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005bb4:	f7fe fb2e 	bl	8004214 <HAL_GetTick>
 8005bb8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005bba:	e008      	b.n	8005bce <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005bbc:	f7fe fb2a 	bl	8004214 <HAL_GetTick>
 8005bc0:	4602      	mov	r2, r0
 8005bc2:	693b      	ldr	r3, [r7, #16]
 8005bc4:	1ad3      	subs	r3, r2, r3
 8005bc6:	2b02      	cmp	r3, #2
 8005bc8:	d901      	bls.n	8005bce <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005bca:	2303      	movs	r3, #3
 8005bcc:	e045      	b.n	8005c5a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005bce:	4b06      	ldr	r3, [pc, #24]	; (8005be8 <HAL_RCC_OscConfig+0x470>)
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d1f0      	bne.n	8005bbc <HAL_RCC_OscConfig+0x444>
 8005bda:	e03d      	b.n	8005c58 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	699b      	ldr	r3, [r3, #24]
 8005be0:	2b01      	cmp	r3, #1
 8005be2:	d107      	bne.n	8005bf4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005be4:	2301      	movs	r3, #1
 8005be6:	e038      	b.n	8005c5a <HAL_RCC_OscConfig+0x4e2>
 8005be8:	40023800 	.word	0x40023800
 8005bec:	40007000 	.word	0x40007000
 8005bf0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005bf4:	4b1b      	ldr	r3, [pc, #108]	; (8005c64 <HAL_RCC_OscConfig+0x4ec>)
 8005bf6:	685b      	ldr	r3, [r3, #4]
 8005bf8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	699b      	ldr	r3, [r3, #24]
 8005bfe:	2b01      	cmp	r3, #1
 8005c00:	d028      	beq.n	8005c54 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005c0c:	429a      	cmp	r2, r3
 8005c0e:	d121      	bne.n	8005c54 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005c1a:	429a      	cmp	r2, r3
 8005c1c:	d11a      	bne.n	8005c54 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005c1e:	68fa      	ldr	r2, [r7, #12]
 8005c20:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005c24:	4013      	ands	r3, r2
 8005c26:	687a      	ldr	r2, [r7, #4]
 8005c28:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005c2a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005c2c:	4293      	cmp	r3, r2
 8005c2e:	d111      	bne.n	8005c54 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c3a:	085b      	lsrs	r3, r3, #1
 8005c3c:	3b01      	subs	r3, #1
 8005c3e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005c40:	429a      	cmp	r2, r3
 8005c42:	d107      	bne.n	8005c54 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c4e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005c50:	429a      	cmp	r2, r3
 8005c52:	d001      	beq.n	8005c58 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005c54:	2301      	movs	r3, #1
 8005c56:	e000      	b.n	8005c5a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005c58:	2300      	movs	r3, #0
}
 8005c5a:	4618      	mov	r0, r3
 8005c5c:	3718      	adds	r7, #24
 8005c5e:	46bd      	mov	sp, r7
 8005c60:	bd80      	pop	{r7, pc}
 8005c62:	bf00      	nop
 8005c64:	40023800 	.word	0x40023800

08005c68 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005c68:	b580      	push	{r7, lr}
 8005c6a:	b084      	sub	sp, #16
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	6078      	str	r0, [r7, #4]
 8005c70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d101      	bne.n	8005c7c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005c78:	2301      	movs	r3, #1
 8005c7a:	e0cc      	b.n	8005e16 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005c7c:	4b68      	ldr	r3, [pc, #416]	; (8005e20 <HAL_RCC_ClockConfig+0x1b8>)
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	f003 0307 	and.w	r3, r3, #7
 8005c84:	683a      	ldr	r2, [r7, #0]
 8005c86:	429a      	cmp	r2, r3
 8005c88:	d90c      	bls.n	8005ca4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c8a:	4b65      	ldr	r3, [pc, #404]	; (8005e20 <HAL_RCC_ClockConfig+0x1b8>)
 8005c8c:	683a      	ldr	r2, [r7, #0]
 8005c8e:	b2d2      	uxtb	r2, r2
 8005c90:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c92:	4b63      	ldr	r3, [pc, #396]	; (8005e20 <HAL_RCC_ClockConfig+0x1b8>)
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	f003 0307 	and.w	r3, r3, #7
 8005c9a:	683a      	ldr	r2, [r7, #0]
 8005c9c:	429a      	cmp	r2, r3
 8005c9e:	d001      	beq.n	8005ca4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005ca0:	2301      	movs	r3, #1
 8005ca2:	e0b8      	b.n	8005e16 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	f003 0302 	and.w	r3, r3, #2
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d020      	beq.n	8005cf2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	f003 0304 	and.w	r3, r3, #4
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d005      	beq.n	8005cc8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005cbc:	4b59      	ldr	r3, [pc, #356]	; (8005e24 <HAL_RCC_ClockConfig+0x1bc>)
 8005cbe:	689b      	ldr	r3, [r3, #8]
 8005cc0:	4a58      	ldr	r2, [pc, #352]	; (8005e24 <HAL_RCC_ClockConfig+0x1bc>)
 8005cc2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005cc6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	f003 0308 	and.w	r3, r3, #8
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d005      	beq.n	8005ce0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005cd4:	4b53      	ldr	r3, [pc, #332]	; (8005e24 <HAL_RCC_ClockConfig+0x1bc>)
 8005cd6:	689b      	ldr	r3, [r3, #8]
 8005cd8:	4a52      	ldr	r2, [pc, #328]	; (8005e24 <HAL_RCC_ClockConfig+0x1bc>)
 8005cda:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005cde:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005ce0:	4b50      	ldr	r3, [pc, #320]	; (8005e24 <HAL_RCC_ClockConfig+0x1bc>)
 8005ce2:	689b      	ldr	r3, [r3, #8]
 8005ce4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	689b      	ldr	r3, [r3, #8]
 8005cec:	494d      	ldr	r1, [pc, #308]	; (8005e24 <HAL_RCC_ClockConfig+0x1bc>)
 8005cee:	4313      	orrs	r3, r2
 8005cf0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	f003 0301 	and.w	r3, r3, #1
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d044      	beq.n	8005d88 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	685b      	ldr	r3, [r3, #4]
 8005d02:	2b01      	cmp	r3, #1
 8005d04:	d107      	bne.n	8005d16 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005d06:	4b47      	ldr	r3, [pc, #284]	; (8005e24 <HAL_RCC_ClockConfig+0x1bc>)
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d119      	bne.n	8005d46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005d12:	2301      	movs	r3, #1
 8005d14:	e07f      	b.n	8005e16 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	685b      	ldr	r3, [r3, #4]
 8005d1a:	2b02      	cmp	r3, #2
 8005d1c:	d003      	beq.n	8005d26 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005d22:	2b03      	cmp	r3, #3
 8005d24:	d107      	bne.n	8005d36 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005d26:	4b3f      	ldr	r3, [pc, #252]	; (8005e24 <HAL_RCC_ClockConfig+0x1bc>)
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d109      	bne.n	8005d46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005d32:	2301      	movs	r3, #1
 8005d34:	e06f      	b.n	8005e16 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005d36:	4b3b      	ldr	r3, [pc, #236]	; (8005e24 <HAL_RCC_ClockConfig+0x1bc>)
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	f003 0302 	and.w	r3, r3, #2
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d101      	bne.n	8005d46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005d42:	2301      	movs	r3, #1
 8005d44:	e067      	b.n	8005e16 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005d46:	4b37      	ldr	r3, [pc, #220]	; (8005e24 <HAL_RCC_ClockConfig+0x1bc>)
 8005d48:	689b      	ldr	r3, [r3, #8]
 8005d4a:	f023 0203 	bic.w	r2, r3, #3
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	685b      	ldr	r3, [r3, #4]
 8005d52:	4934      	ldr	r1, [pc, #208]	; (8005e24 <HAL_RCC_ClockConfig+0x1bc>)
 8005d54:	4313      	orrs	r3, r2
 8005d56:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005d58:	f7fe fa5c 	bl	8004214 <HAL_GetTick>
 8005d5c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d5e:	e00a      	b.n	8005d76 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005d60:	f7fe fa58 	bl	8004214 <HAL_GetTick>
 8005d64:	4602      	mov	r2, r0
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	1ad3      	subs	r3, r2, r3
 8005d6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d6e:	4293      	cmp	r3, r2
 8005d70:	d901      	bls.n	8005d76 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005d72:	2303      	movs	r3, #3
 8005d74:	e04f      	b.n	8005e16 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d76:	4b2b      	ldr	r3, [pc, #172]	; (8005e24 <HAL_RCC_ClockConfig+0x1bc>)
 8005d78:	689b      	ldr	r3, [r3, #8]
 8005d7a:	f003 020c 	and.w	r2, r3, #12
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	685b      	ldr	r3, [r3, #4]
 8005d82:	009b      	lsls	r3, r3, #2
 8005d84:	429a      	cmp	r2, r3
 8005d86:	d1eb      	bne.n	8005d60 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005d88:	4b25      	ldr	r3, [pc, #148]	; (8005e20 <HAL_RCC_ClockConfig+0x1b8>)
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	f003 0307 	and.w	r3, r3, #7
 8005d90:	683a      	ldr	r2, [r7, #0]
 8005d92:	429a      	cmp	r2, r3
 8005d94:	d20c      	bcs.n	8005db0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d96:	4b22      	ldr	r3, [pc, #136]	; (8005e20 <HAL_RCC_ClockConfig+0x1b8>)
 8005d98:	683a      	ldr	r2, [r7, #0]
 8005d9a:	b2d2      	uxtb	r2, r2
 8005d9c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d9e:	4b20      	ldr	r3, [pc, #128]	; (8005e20 <HAL_RCC_ClockConfig+0x1b8>)
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	f003 0307 	and.w	r3, r3, #7
 8005da6:	683a      	ldr	r2, [r7, #0]
 8005da8:	429a      	cmp	r2, r3
 8005daa:	d001      	beq.n	8005db0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005dac:	2301      	movs	r3, #1
 8005dae:	e032      	b.n	8005e16 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	f003 0304 	and.w	r3, r3, #4
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d008      	beq.n	8005dce <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005dbc:	4b19      	ldr	r3, [pc, #100]	; (8005e24 <HAL_RCC_ClockConfig+0x1bc>)
 8005dbe:	689b      	ldr	r3, [r3, #8]
 8005dc0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	68db      	ldr	r3, [r3, #12]
 8005dc8:	4916      	ldr	r1, [pc, #88]	; (8005e24 <HAL_RCC_ClockConfig+0x1bc>)
 8005dca:	4313      	orrs	r3, r2
 8005dcc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	f003 0308 	and.w	r3, r3, #8
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d009      	beq.n	8005dee <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005dda:	4b12      	ldr	r3, [pc, #72]	; (8005e24 <HAL_RCC_ClockConfig+0x1bc>)
 8005ddc:	689b      	ldr	r3, [r3, #8]
 8005dde:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	691b      	ldr	r3, [r3, #16]
 8005de6:	00db      	lsls	r3, r3, #3
 8005de8:	490e      	ldr	r1, [pc, #56]	; (8005e24 <HAL_RCC_ClockConfig+0x1bc>)
 8005dea:	4313      	orrs	r3, r2
 8005dec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005dee:	f000 f821 	bl	8005e34 <HAL_RCC_GetSysClockFreq>
 8005df2:	4602      	mov	r2, r0
 8005df4:	4b0b      	ldr	r3, [pc, #44]	; (8005e24 <HAL_RCC_ClockConfig+0x1bc>)
 8005df6:	689b      	ldr	r3, [r3, #8]
 8005df8:	091b      	lsrs	r3, r3, #4
 8005dfa:	f003 030f 	and.w	r3, r3, #15
 8005dfe:	490a      	ldr	r1, [pc, #40]	; (8005e28 <HAL_RCC_ClockConfig+0x1c0>)
 8005e00:	5ccb      	ldrb	r3, [r1, r3]
 8005e02:	fa22 f303 	lsr.w	r3, r2, r3
 8005e06:	4a09      	ldr	r2, [pc, #36]	; (8005e2c <HAL_RCC_ClockConfig+0x1c4>)
 8005e08:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005e0a:	4b09      	ldr	r3, [pc, #36]	; (8005e30 <HAL_RCC_ClockConfig+0x1c8>)
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	4618      	mov	r0, r3
 8005e10:	f7fe f872 	bl	8003ef8 <HAL_InitTick>

  return HAL_OK;
 8005e14:	2300      	movs	r3, #0
}
 8005e16:	4618      	mov	r0, r3
 8005e18:	3710      	adds	r7, #16
 8005e1a:	46bd      	mov	sp, r7
 8005e1c:	bd80      	pop	{r7, pc}
 8005e1e:	bf00      	nop
 8005e20:	40023c00 	.word	0x40023c00
 8005e24:	40023800 	.word	0x40023800
 8005e28:	0800c598 	.word	0x0800c598
 8005e2c:	20000000 	.word	0x20000000
 8005e30:	20000004 	.word	0x20000004

08005e34 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005e34:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005e38:	b090      	sub	sp, #64	; 0x40
 8005e3a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005e3c:	2300      	movs	r3, #0
 8005e3e:	637b      	str	r3, [r7, #52]	; 0x34
 8005e40:	2300      	movs	r3, #0
 8005e42:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005e44:	2300      	movs	r3, #0
 8005e46:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8005e48:	2300      	movs	r3, #0
 8005e4a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005e4c:	4b59      	ldr	r3, [pc, #356]	; (8005fb4 <HAL_RCC_GetSysClockFreq+0x180>)
 8005e4e:	689b      	ldr	r3, [r3, #8]
 8005e50:	f003 030c 	and.w	r3, r3, #12
 8005e54:	2b08      	cmp	r3, #8
 8005e56:	d00d      	beq.n	8005e74 <HAL_RCC_GetSysClockFreq+0x40>
 8005e58:	2b08      	cmp	r3, #8
 8005e5a:	f200 80a1 	bhi.w	8005fa0 <HAL_RCC_GetSysClockFreq+0x16c>
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d002      	beq.n	8005e68 <HAL_RCC_GetSysClockFreq+0x34>
 8005e62:	2b04      	cmp	r3, #4
 8005e64:	d003      	beq.n	8005e6e <HAL_RCC_GetSysClockFreq+0x3a>
 8005e66:	e09b      	b.n	8005fa0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005e68:	4b53      	ldr	r3, [pc, #332]	; (8005fb8 <HAL_RCC_GetSysClockFreq+0x184>)
 8005e6a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8005e6c:	e09b      	b.n	8005fa6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005e6e:	4b53      	ldr	r3, [pc, #332]	; (8005fbc <HAL_RCC_GetSysClockFreq+0x188>)
 8005e70:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005e72:	e098      	b.n	8005fa6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005e74:	4b4f      	ldr	r3, [pc, #316]	; (8005fb4 <HAL_RCC_GetSysClockFreq+0x180>)
 8005e76:	685b      	ldr	r3, [r3, #4]
 8005e78:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005e7c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005e7e:	4b4d      	ldr	r3, [pc, #308]	; (8005fb4 <HAL_RCC_GetSysClockFreq+0x180>)
 8005e80:	685b      	ldr	r3, [r3, #4]
 8005e82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d028      	beq.n	8005edc <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005e8a:	4b4a      	ldr	r3, [pc, #296]	; (8005fb4 <HAL_RCC_GetSysClockFreq+0x180>)
 8005e8c:	685b      	ldr	r3, [r3, #4]
 8005e8e:	099b      	lsrs	r3, r3, #6
 8005e90:	2200      	movs	r2, #0
 8005e92:	623b      	str	r3, [r7, #32]
 8005e94:	627a      	str	r2, [r7, #36]	; 0x24
 8005e96:	6a3b      	ldr	r3, [r7, #32]
 8005e98:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8005e9c:	2100      	movs	r1, #0
 8005e9e:	4b47      	ldr	r3, [pc, #284]	; (8005fbc <HAL_RCC_GetSysClockFreq+0x188>)
 8005ea0:	fb03 f201 	mul.w	r2, r3, r1
 8005ea4:	2300      	movs	r3, #0
 8005ea6:	fb00 f303 	mul.w	r3, r0, r3
 8005eaa:	4413      	add	r3, r2
 8005eac:	4a43      	ldr	r2, [pc, #268]	; (8005fbc <HAL_RCC_GetSysClockFreq+0x188>)
 8005eae:	fba0 1202 	umull	r1, r2, r0, r2
 8005eb2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005eb4:	460a      	mov	r2, r1
 8005eb6:	62ba      	str	r2, [r7, #40]	; 0x28
 8005eb8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005eba:	4413      	add	r3, r2
 8005ebc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005ebe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ec0:	2200      	movs	r2, #0
 8005ec2:	61bb      	str	r3, [r7, #24]
 8005ec4:	61fa      	str	r2, [r7, #28]
 8005ec6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005eca:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8005ece:	f7fa fd15 	bl	80008fc <__aeabi_uldivmod>
 8005ed2:	4602      	mov	r2, r0
 8005ed4:	460b      	mov	r3, r1
 8005ed6:	4613      	mov	r3, r2
 8005ed8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005eda:	e053      	b.n	8005f84 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005edc:	4b35      	ldr	r3, [pc, #212]	; (8005fb4 <HAL_RCC_GetSysClockFreq+0x180>)
 8005ede:	685b      	ldr	r3, [r3, #4]
 8005ee0:	099b      	lsrs	r3, r3, #6
 8005ee2:	2200      	movs	r2, #0
 8005ee4:	613b      	str	r3, [r7, #16]
 8005ee6:	617a      	str	r2, [r7, #20]
 8005ee8:	693b      	ldr	r3, [r7, #16]
 8005eea:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8005eee:	f04f 0b00 	mov.w	fp, #0
 8005ef2:	4652      	mov	r2, sl
 8005ef4:	465b      	mov	r3, fp
 8005ef6:	f04f 0000 	mov.w	r0, #0
 8005efa:	f04f 0100 	mov.w	r1, #0
 8005efe:	0159      	lsls	r1, r3, #5
 8005f00:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005f04:	0150      	lsls	r0, r2, #5
 8005f06:	4602      	mov	r2, r0
 8005f08:	460b      	mov	r3, r1
 8005f0a:	ebb2 080a 	subs.w	r8, r2, sl
 8005f0e:	eb63 090b 	sbc.w	r9, r3, fp
 8005f12:	f04f 0200 	mov.w	r2, #0
 8005f16:	f04f 0300 	mov.w	r3, #0
 8005f1a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8005f1e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8005f22:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8005f26:	ebb2 0408 	subs.w	r4, r2, r8
 8005f2a:	eb63 0509 	sbc.w	r5, r3, r9
 8005f2e:	f04f 0200 	mov.w	r2, #0
 8005f32:	f04f 0300 	mov.w	r3, #0
 8005f36:	00eb      	lsls	r3, r5, #3
 8005f38:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005f3c:	00e2      	lsls	r2, r4, #3
 8005f3e:	4614      	mov	r4, r2
 8005f40:	461d      	mov	r5, r3
 8005f42:	eb14 030a 	adds.w	r3, r4, sl
 8005f46:	603b      	str	r3, [r7, #0]
 8005f48:	eb45 030b 	adc.w	r3, r5, fp
 8005f4c:	607b      	str	r3, [r7, #4]
 8005f4e:	f04f 0200 	mov.w	r2, #0
 8005f52:	f04f 0300 	mov.w	r3, #0
 8005f56:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005f5a:	4629      	mov	r1, r5
 8005f5c:	028b      	lsls	r3, r1, #10
 8005f5e:	4621      	mov	r1, r4
 8005f60:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005f64:	4621      	mov	r1, r4
 8005f66:	028a      	lsls	r2, r1, #10
 8005f68:	4610      	mov	r0, r2
 8005f6a:	4619      	mov	r1, r3
 8005f6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f6e:	2200      	movs	r2, #0
 8005f70:	60bb      	str	r3, [r7, #8]
 8005f72:	60fa      	str	r2, [r7, #12]
 8005f74:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005f78:	f7fa fcc0 	bl	80008fc <__aeabi_uldivmod>
 8005f7c:	4602      	mov	r2, r0
 8005f7e:	460b      	mov	r3, r1
 8005f80:	4613      	mov	r3, r2
 8005f82:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005f84:	4b0b      	ldr	r3, [pc, #44]	; (8005fb4 <HAL_RCC_GetSysClockFreq+0x180>)
 8005f86:	685b      	ldr	r3, [r3, #4]
 8005f88:	0c1b      	lsrs	r3, r3, #16
 8005f8a:	f003 0303 	and.w	r3, r3, #3
 8005f8e:	3301      	adds	r3, #1
 8005f90:	005b      	lsls	r3, r3, #1
 8005f92:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8005f94:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005f96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f98:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f9c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005f9e:	e002      	b.n	8005fa6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005fa0:	4b05      	ldr	r3, [pc, #20]	; (8005fb8 <HAL_RCC_GetSysClockFreq+0x184>)
 8005fa2:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005fa4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005fa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8005fa8:	4618      	mov	r0, r3
 8005faa:	3740      	adds	r7, #64	; 0x40
 8005fac:	46bd      	mov	sp, r7
 8005fae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005fb2:	bf00      	nop
 8005fb4:	40023800 	.word	0x40023800
 8005fb8:	00f42400 	.word	0x00f42400
 8005fbc:	017d7840 	.word	0x017d7840

08005fc0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005fc0:	b480      	push	{r7}
 8005fc2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005fc4:	4b03      	ldr	r3, [pc, #12]	; (8005fd4 <HAL_RCC_GetHCLKFreq+0x14>)
 8005fc6:	681b      	ldr	r3, [r3, #0]
}
 8005fc8:	4618      	mov	r0, r3
 8005fca:	46bd      	mov	sp, r7
 8005fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd0:	4770      	bx	lr
 8005fd2:	bf00      	nop
 8005fd4:	20000000 	.word	0x20000000

08005fd8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005fd8:	b580      	push	{r7, lr}
 8005fda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005fdc:	f7ff fff0 	bl	8005fc0 <HAL_RCC_GetHCLKFreq>
 8005fe0:	4602      	mov	r2, r0
 8005fe2:	4b05      	ldr	r3, [pc, #20]	; (8005ff8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005fe4:	689b      	ldr	r3, [r3, #8]
 8005fe6:	0a9b      	lsrs	r3, r3, #10
 8005fe8:	f003 0307 	and.w	r3, r3, #7
 8005fec:	4903      	ldr	r1, [pc, #12]	; (8005ffc <HAL_RCC_GetPCLK1Freq+0x24>)
 8005fee:	5ccb      	ldrb	r3, [r1, r3]
 8005ff0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005ff4:	4618      	mov	r0, r3
 8005ff6:	bd80      	pop	{r7, pc}
 8005ff8:	40023800 	.word	0x40023800
 8005ffc:	0800c5a8 	.word	0x0800c5a8

08006000 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006000:	b580      	push	{r7, lr}
 8006002:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006004:	f7ff ffdc 	bl	8005fc0 <HAL_RCC_GetHCLKFreq>
 8006008:	4602      	mov	r2, r0
 800600a:	4b05      	ldr	r3, [pc, #20]	; (8006020 <HAL_RCC_GetPCLK2Freq+0x20>)
 800600c:	689b      	ldr	r3, [r3, #8]
 800600e:	0b5b      	lsrs	r3, r3, #13
 8006010:	f003 0307 	and.w	r3, r3, #7
 8006014:	4903      	ldr	r1, [pc, #12]	; (8006024 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006016:	5ccb      	ldrb	r3, [r1, r3]
 8006018:	fa22 f303 	lsr.w	r3, r2, r3
}
 800601c:	4618      	mov	r0, r3
 800601e:	bd80      	pop	{r7, pc}
 8006020:	40023800 	.word	0x40023800
 8006024:	0800c5a8 	.word	0x0800c5a8

08006028 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006028:	b480      	push	{r7}
 800602a:	b083      	sub	sp, #12
 800602c:	af00      	add	r7, sp, #0
 800602e:	6078      	str	r0, [r7, #4]
 8006030:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	220f      	movs	r2, #15
 8006036:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006038:	4b12      	ldr	r3, [pc, #72]	; (8006084 <HAL_RCC_GetClockConfig+0x5c>)
 800603a:	689b      	ldr	r3, [r3, #8]
 800603c:	f003 0203 	and.w	r2, r3, #3
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006044:	4b0f      	ldr	r3, [pc, #60]	; (8006084 <HAL_RCC_GetClockConfig+0x5c>)
 8006046:	689b      	ldr	r3, [r3, #8]
 8006048:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8006050:	4b0c      	ldr	r3, [pc, #48]	; (8006084 <HAL_RCC_GetClockConfig+0x5c>)
 8006052:	689b      	ldr	r3, [r3, #8]
 8006054:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800605c:	4b09      	ldr	r3, [pc, #36]	; (8006084 <HAL_RCC_GetClockConfig+0x5c>)
 800605e:	689b      	ldr	r3, [r3, #8]
 8006060:	08db      	lsrs	r3, r3, #3
 8006062:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800606a:	4b07      	ldr	r3, [pc, #28]	; (8006088 <HAL_RCC_GetClockConfig+0x60>)
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	f003 0207 	and.w	r2, r3, #7
 8006072:	683b      	ldr	r3, [r7, #0]
 8006074:	601a      	str	r2, [r3, #0]
}
 8006076:	bf00      	nop
 8006078:	370c      	adds	r7, #12
 800607a:	46bd      	mov	sp, r7
 800607c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006080:	4770      	bx	lr
 8006082:	bf00      	nop
 8006084:	40023800 	.word	0x40023800
 8006088:	40023c00 	.word	0x40023c00

0800608c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800608c:	b580      	push	{r7, lr}
 800608e:	b082      	sub	sp, #8
 8006090:	af00      	add	r7, sp, #0
 8006092:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	2b00      	cmp	r3, #0
 8006098:	d101      	bne.n	800609e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800609a:	2301      	movs	r3, #1
 800609c:	e041      	b.n	8006122 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80060a4:	b2db      	uxtb	r3, r3
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d106      	bne.n	80060b8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	2200      	movs	r2, #0
 80060ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80060b2:	6878      	ldr	r0, [r7, #4]
 80060b4:	f7fd fe14 	bl	8003ce0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	2202      	movs	r2, #2
 80060bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681a      	ldr	r2, [r3, #0]
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	3304      	adds	r3, #4
 80060c8:	4619      	mov	r1, r3
 80060ca:	4610      	mov	r0, r2
 80060cc:	f000 fc54 	bl	8006978 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	2201      	movs	r2, #1
 80060d4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	2201      	movs	r2, #1
 80060dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	2201      	movs	r2, #1
 80060e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	2201      	movs	r2, #1
 80060ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	2201      	movs	r2, #1
 80060f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	2201      	movs	r2, #1
 80060fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	2201      	movs	r2, #1
 8006104:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	2201      	movs	r2, #1
 800610c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	2201      	movs	r2, #1
 8006114:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	2201      	movs	r2, #1
 800611c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006120:	2300      	movs	r3, #0
}
 8006122:	4618      	mov	r0, r3
 8006124:	3708      	adds	r7, #8
 8006126:	46bd      	mov	sp, r7
 8006128:	bd80      	pop	{r7, pc}
	...

0800612c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800612c:	b480      	push	{r7}
 800612e:	b085      	sub	sp, #20
 8006130:	af00      	add	r7, sp, #0
 8006132:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800613a:	b2db      	uxtb	r3, r3
 800613c:	2b01      	cmp	r3, #1
 800613e:	d001      	beq.n	8006144 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006140:	2301      	movs	r3, #1
 8006142:	e044      	b.n	80061ce <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	2202      	movs	r2, #2
 8006148:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	68da      	ldr	r2, [r3, #12]
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	f042 0201 	orr.w	r2, r2, #1
 800615a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	4a1e      	ldr	r2, [pc, #120]	; (80061dc <HAL_TIM_Base_Start_IT+0xb0>)
 8006162:	4293      	cmp	r3, r2
 8006164:	d018      	beq.n	8006198 <HAL_TIM_Base_Start_IT+0x6c>
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800616e:	d013      	beq.n	8006198 <HAL_TIM_Base_Start_IT+0x6c>
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	4a1a      	ldr	r2, [pc, #104]	; (80061e0 <HAL_TIM_Base_Start_IT+0xb4>)
 8006176:	4293      	cmp	r3, r2
 8006178:	d00e      	beq.n	8006198 <HAL_TIM_Base_Start_IT+0x6c>
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	4a19      	ldr	r2, [pc, #100]	; (80061e4 <HAL_TIM_Base_Start_IT+0xb8>)
 8006180:	4293      	cmp	r3, r2
 8006182:	d009      	beq.n	8006198 <HAL_TIM_Base_Start_IT+0x6c>
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	4a17      	ldr	r2, [pc, #92]	; (80061e8 <HAL_TIM_Base_Start_IT+0xbc>)
 800618a:	4293      	cmp	r3, r2
 800618c:	d004      	beq.n	8006198 <HAL_TIM_Base_Start_IT+0x6c>
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	4a16      	ldr	r2, [pc, #88]	; (80061ec <HAL_TIM_Base_Start_IT+0xc0>)
 8006194:	4293      	cmp	r3, r2
 8006196:	d111      	bne.n	80061bc <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	689b      	ldr	r3, [r3, #8]
 800619e:	f003 0307 	and.w	r3, r3, #7
 80061a2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	2b06      	cmp	r3, #6
 80061a8:	d010      	beq.n	80061cc <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	681a      	ldr	r2, [r3, #0]
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	f042 0201 	orr.w	r2, r2, #1
 80061b8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80061ba:	e007      	b.n	80061cc <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	681a      	ldr	r2, [r3, #0]
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	f042 0201 	orr.w	r2, r2, #1
 80061ca:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80061cc:	2300      	movs	r3, #0
}
 80061ce:	4618      	mov	r0, r3
 80061d0:	3714      	adds	r7, #20
 80061d2:	46bd      	mov	sp, r7
 80061d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d8:	4770      	bx	lr
 80061da:	bf00      	nop
 80061dc:	40010000 	.word	0x40010000
 80061e0:	40000400 	.word	0x40000400
 80061e4:	40000800 	.word	0x40000800
 80061e8:	40000c00 	.word	0x40000c00
 80061ec:	40014000 	.word	0x40014000

080061f0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80061f0:	b580      	push	{r7, lr}
 80061f2:	b082      	sub	sp, #8
 80061f4:	af00      	add	r7, sp, #0
 80061f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d101      	bne.n	8006202 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80061fe:	2301      	movs	r3, #1
 8006200:	e041      	b.n	8006286 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006208:	b2db      	uxtb	r3, r3
 800620a:	2b00      	cmp	r3, #0
 800620c:	d106      	bne.n	800621c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	2200      	movs	r2, #0
 8006212:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006216:	6878      	ldr	r0, [r7, #4]
 8006218:	f000 f839 	bl	800628e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	2202      	movs	r2, #2
 8006220:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681a      	ldr	r2, [r3, #0]
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	3304      	adds	r3, #4
 800622c:	4619      	mov	r1, r3
 800622e:	4610      	mov	r0, r2
 8006230:	f000 fba2 	bl	8006978 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	2201      	movs	r2, #1
 8006238:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	2201      	movs	r2, #1
 8006240:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	2201      	movs	r2, #1
 8006248:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	2201      	movs	r2, #1
 8006250:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	2201      	movs	r2, #1
 8006258:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	2201      	movs	r2, #1
 8006260:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	2201      	movs	r2, #1
 8006268:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	2201      	movs	r2, #1
 8006270:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	2201      	movs	r2, #1
 8006278:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	2201      	movs	r2, #1
 8006280:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006284:	2300      	movs	r3, #0
}
 8006286:	4618      	mov	r0, r3
 8006288:	3708      	adds	r7, #8
 800628a:	46bd      	mov	sp, r7
 800628c:	bd80      	pop	{r7, pc}

0800628e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800628e:	b480      	push	{r7}
 8006290:	b083      	sub	sp, #12
 8006292:	af00      	add	r7, sp, #0
 8006294:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006296:	bf00      	nop
 8006298:	370c      	adds	r7, #12
 800629a:	46bd      	mov	sp, r7
 800629c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a0:	4770      	bx	lr
	...

080062a4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80062a4:	b580      	push	{r7, lr}
 80062a6:	b084      	sub	sp, #16
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	6078      	str	r0, [r7, #4]
 80062ac:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80062ae:	683b      	ldr	r3, [r7, #0]
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d109      	bne.n	80062c8 <HAL_TIM_PWM_Start+0x24>
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80062ba:	b2db      	uxtb	r3, r3
 80062bc:	2b01      	cmp	r3, #1
 80062be:	bf14      	ite	ne
 80062c0:	2301      	movne	r3, #1
 80062c2:	2300      	moveq	r3, #0
 80062c4:	b2db      	uxtb	r3, r3
 80062c6:	e022      	b.n	800630e <HAL_TIM_PWM_Start+0x6a>
 80062c8:	683b      	ldr	r3, [r7, #0]
 80062ca:	2b04      	cmp	r3, #4
 80062cc:	d109      	bne.n	80062e2 <HAL_TIM_PWM_Start+0x3e>
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80062d4:	b2db      	uxtb	r3, r3
 80062d6:	2b01      	cmp	r3, #1
 80062d8:	bf14      	ite	ne
 80062da:	2301      	movne	r3, #1
 80062dc:	2300      	moveq	r3, #0
 80062de:	b2db      	uxtb	r3, r3
 80062e0:	e015      	b.n	800630e <HAL_TIM_PWM_Start+0x6a>
 80062e2:	683b      	ldr	r3, [r7, #0]
 80062e4:	2b08      	cmp	r3, #8
 80062e6:	d109      	bne.n	80062fc <HAL_TIM_PWM_Start+0x58>
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80062ee:	b2db      	uxtb	r3, r3
 80062f0:	2b01      	cmp	r3, #1
 80062f2:	bf14      	ite	ne
 80062f4:	2301      	movne	r3, #1
 80062f6:	2300      	moveq	r3, #0
 80062f8:	b2db      	uxtb	r3, r3
 80062fa:	e008      	b.n	800630e <HAL_TIM_PWM_Start+0x6a>
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006302:	b2db      	uxtb	r3, r3
 8006304:	2b01      	cmp	r3, #1
 8006306:	bf14      	ite	ne
 8006308:	2301      	movne	r3, #1
 800630a:	2300      	moveq	r3, #0
 800630c:	b2db      	uxtb	r3, r3
 800630e:	2b00      	cmp	r3, #0
 8006310:	d001      	beq.n	8006316 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8006312:	2301      	movs	r3, #1
 8006314:	e068      	b.n	80063e8 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006316:	683b      	ldr	r3, [r7, #0]
 8006318:	2b00      	cmp	r3, #0
 800631a:	d104      	bne.n	8006326 <HAL_TIM_PWM_Start+0x82>
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	2202      	movs	r2, #2
 8006320:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006324:	e013      	b.n	800634e <HAL_TIM_PWM_Start+0xaa>
 8006326:	683b      	ldr	r3, [r7, #0]
 8006328:	2b04      	cmp	r3, #4
 800632a:	d104      	bne.n	8006336 <HAL_TIM_PWM_Start+0x92>
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	2202      	movs	r2, #2
 8006330:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006334:	e00b      	b.n	800634e <HAL_TIM_PWM_Start+0xaa>
 8006336:	683b      	ldr	r3, [r7, #0]
 8006338:	2b08      	cmp	r3, #8
 800633a:	d104      	bne.n	8006346 <HAL_TIM_PWM_Start+0xa2>
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	2202      	movs	r2, #2
 8006340:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006344:	e003      	b.n	800634e <HAL_TIM_PWM_Start+0xaa>
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	2202      	movs	r2, #2
 800634a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	2201      	movs	r2, #1
 8006354:	6839      	ldr	r1, [r7, #0]
 8006356:	4618      	mov	r0, r3
 8006358:	f000 fdb4 	bl	8006ec4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	4a23      	ldr	r2, [pc, #140]	; (80063f0 <HAL_TIM_PWM_Start+0x14c>)
 8006362:	4293      	cmp	r3, r2
 8006364:	d107      	bne.n	8006376 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006374:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	4a1d      	ldr	r2, [pc, #116]	; (80063f0 <HAL_TIM_PWM_Start+0x14c>)
 800637c:	4293      	cmp	r3, r2
 800637e:	d018      	beq.n	80063b2 <HAL_TIM_PWM_Start+0x10e>
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006388:	d013      	beq.n	80063b2 <HAL_TIM_PWM_Start+0x10e>
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	4a19      	ldr	r2, [pc, #100]	; (80063f4 <HAL_TIM_PWM_Start+0x150>)
 8006390:	4293      	cmp	r3, r2
 8006392:	d00e      	beq.n	80063b2 <HAL_TIM_PWM_Start+0x10e>
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	4a17      	ldr	r2, [pc, #92]	; (80063f8 <HAL_TIM_PWM_Start+0x154>)
 800639a:	4293      	cmp	r3, r2
 800639c:	d009      	beq.n	80063b2 <HAL_TIM_PWM_Start+0x10e>
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	4a16      	ldr	r2, [pc, #88]	; (80063fc <HAL_TIM_PWM_Start+0x158>)
 80063a4:	4293      	cmp	r3, r2
 80063a6:	d004      	beq.n	80063b2 <HAL_TIM_PWM_Start+0x10e>
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	4a14      	ldr	r2, [pc, #80]	; (8006400 <HAL_TIM_PWM_Start+0x15c>)
 80063ae:	4293      	cmp	r3, r2
 80063b0:	d111      	bne.n	80063d6 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	689b      	ldr	r3, [r3, #8]
 80063b8:	f003 0307 	and.w	r3, r3, #7
 80063bc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	2b06      	cmp	r3, #6
 80063c2:	d010      	beq.n	80063e6 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	681a      	ldr	r2, [r3, #0]
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	f042 0201 	orr.w	r2, r2, #1
 80063d2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80063d4:	e007      	b.n	80063e6 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	681a      	ldr	r2, [r3, #0]
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	f042 0201 	orr.w	r2, r2, #1
 80063e4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80063e6:	2300      	movs	r3, #0
}
 80063e8:	4618      	mov	r0, r3
 80063ea:	3710      	adds	r7, #16
 80063ec:	46bd      	mov	sp, r7
 80063ee:	bd80      	pop	{r7, pc}
 80063f0:	40010000 	.word	0x40010000
 80063f4:	40000400 	.word	0x40000400
 80063f8:	40000800 	.word	0x40000800
 80063fc:	40000c00 	.word	0x40000c00
 8006400:	40014000 	.word	0x40014000

08006404 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006404:	b580      	push	{r7, lr}
 8006406:	b082      	sub	sp, #8
 8006408:	af00      	add	r7, sp, #0
 800640a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	691b      	ldr	r3, [r3, #16]
 8006412:	f003 0302 	and.w	r3, r3, #2
 8006416:	2b02      	cmp	r3, #2
 8006418:	d122      	bne.n	8006460 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	68db      	ldr	r3, [r3, #12]
 8006420:	f003 0302 	and.w	r3, r3, #2
 8006424:	2b02      	cmp	r3, #2
 8006426:	d11b      	bne.n	8006460 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	f06f 0202 	mvn.w	r2, #2
 8006430:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	2201      	movs	r2, #1
 8006436:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	699b      	ldr	r3, [r3, #24]
 800643e:	f003 0303 	and.w	r3, r3, #3
 8006442:	2b00      	cmp	r3, #0
 8006444:	d003      	beq.n	800644e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006446:	6878      	ldr	r0, [r7, #4]
 8006448:	f000 fa77 	bl	800693a <HAL_TIM_IC_CaptureCallback>
 800644c:	e005      	b.n	800645a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800644e:	6878      	ldr	r0, [r7, #4]
 8006450:	f000 fa69 	bl	8006926 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006454:	6878      	ldr	r0, [r7, #4]
 8006456:	f000 fa7a 	bl	800694e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	2200      	movs	r2, #0
 800645e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	691b      	ldr	r3, [r3, #16]
 8006466:	f003 0304 	and.w	r3, r3, #4
 800646a:	2b04      	cmp	r3, #4
 800646c:	d122      	bne.n	80064b4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	68db      	ldr	r3, [r3, #12]
 8006474:	f003 0304 	and.w	r3, r3, #4
 8006478:	2b04      	cmp	r3, #4
 800647a:	d11b      	bne.n	80064b4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	f06f 0204 	mvn.w	r2, #4
 8006484:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	2202      	movs	r2, #2
 800648a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	699b      	ldr	r3, [r3, #24]
 8006492:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006496:	2b00      	cmp	r3, #0
 8006498:	d003      	beq.n	80064a2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800649a:	6878      	ldr	r0, [r7, #4]
 800649c:	f000 fa4d 	bl	800693a <HAL_TIM_IC_CaptureCallback>
 80064a0:	e005      	b.n	80064ae <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80064a2:	6878      	ldr	r0, [r7, #4]
 80064a4:	f000 fa3f 	bl	8006926 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80064a8:	6878      	ldr	r0, [r7, #4]
 80064aa:	f000 fa50 	bl	800694e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	2200      	movs	r2, #0
 80064b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	691b      	ldr	r3, [r3, #16]
 80064ba:	f003 0308 	and.w	r3, r3, #8
 80064be:	2b08      	cmp	r3, #8
 80064c0:	d122      	bne.n	8006508 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	68db      	ldr	r3, [r3, #12]
 80064c8:	f003 0308 	and.w	r3, r3, #8
 80064cc:	2b08      	cmp	r3, #8
 80064ce:	d11b      	bne.n	8006508 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	f06f 0208 	mvn.w	r2, #8
 80064d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	2204      	movs	r2, #4
 80064de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	69db      	ldr	r3, [r3, #28]
 80064e6:	f003 0303 	and.w	r3, r3, #3
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d003      	beq.n	80064f6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80064ee:	6878      	ldr	r0, [r7, #4]
 80064f0:	f000 fa23 	bl	800693a <HAL_TIM_IC_CaptureCallback>
 80064f4:	e005      	b.n	8006502 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80064f6:	6878      	ldr	r0, [r7, #4]
 80064f8:	f000 fa15 	bl	8006926 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80064fc:	6878      	ldr	r0, [r7, #4]
 80064fe:	f000 fa26 	bl	800694e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	2200      	movs	r2, #0
 8006506:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	691b      	ldr	r3, [r3, #16]
 800650e:	f003 0310 	and.w	r3, r3, #16
 8006512:	2b10      	cmp	r3, #16
 8006514:	d122      	bne.n	800655c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	68db      	ldr	r3, [r3, #12]
 800651c:	f003 0310 	and.w	r3, r3, #16
 8006520:	2b10      	cmp	r3, #16
 8006522:	d11b      	bne.n	800655c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	f06f 0210 	mvn.w	r2, #16
 800652c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	2208      	movs	r2, #8
 8006532:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	69db      	ldr	r3, [r3, #28]
 800653a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800653e:	2b00      	cmp	r3, #0
 8006540:	d003      	beq.n	800654a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006542:	6878      	ldr	r0, [r7, #4]
 8006544:	f000 f9f9 	bl	800693a <HAL_TIM_IC_CaptureCallback>
 8006548:	e005      	b.n	8006556 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800654a:	6878      	ldr	r0, [r7, #4]
 800654c:	f000 f9eb 	bl	8006926 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006550:	6878      	ldr	r0, [r7, #4]
 8006552:	f000 f9fc 	bl	800694e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	2200      	movs	r2, #0
 800655a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	691b      	ldr	r3, [r3, #16]
 8006562:	f003 0301 	and.w	r3, r3, #1
 8006566:	2b01      	cmp	r3, #1
 8006568:	d10e      	bne.n	8006588 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	68db      	ldr	r3, [r3, #12]
 8006570:	f003 0301 	and.w	r3, r3, #1
 8006574:	2b01      	cmp	r3, #1
 8006576:	d107      	bne.n	8006588 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	f06f 0201 	mvn.w	r2, #1
 8006580:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006582:	6878      	ldr	r0, [r7, #4]
 8006584:	f7fc fb2c 	bl	8002be0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	691b      	ldr	r3, [r3, #16]
 800658e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006592:	2b80      	cmp	r3, #128	; 0x80
 8006594:	d10e      	bne.n	80065b4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	68db      	ldr	r3, [r3, #12]
 800659c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065a0:	2b80      	cmp	r3, #128	; 0x80
 80065a2:	d107      	bne.n	80065b4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80065ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80065ae:	6878      	ldr	r0, [r7, #4]
 80065b0:	f000 fd26 	bl	8007000 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	691b      	ldr	r3, [r3, #16]
 80065ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065be:	2b40      	cmp	r3, #64	; 0x40
 80065c0:	d10e      	bne.n	80065e0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	68db      	ldr	r3, [r3, #12]
 80065c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065cc:	2b40      	cmp	r3, #64	; 0x40
 80065ce:	d107      	bne.n	80065e0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80065d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80065da:	6878      	ldr	r0, [r7, #4]
 80065dc:	f000 f9c1 	bl	8006962 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	691b      	ldr	r3, [r3, #16]
 80065e6:	f003 0320 	and.w	r3, r3, #32
 80065ea:	2b20      	cmp	r3, #32
 80065ec:	d10e      	bne.n	800660c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	68db      	ldr	r3, [r3, #12]
 80065f4:	f003 0320 	and.w	r3, r3, #32
 80065f8:	2b20      	cmp	r3, #32
 80065fa:	d107      	bne.n	800660c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	f06f 0220 	mvn.w	r2, #32
 8006604:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006606:	6878      	ldr	r0, [r7, #4]
 8006608:	f000 fcf0 	bl	8006fec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800660c:	bf00      	nop
 800660e:	3708      	adds	r7, #8
 8006610:	46bd      	mov	sp, r7
 8006612:	bd80      	pop	{r7, pc}

08006614 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006614:	b580      	push	{r7, lr}
 8006616:	b086      	sub	sp, #24
 8006618:	af00      	add	r7, sp, #0
 800661a:	60f8      	str	r0, [r7, #12]
 800661c:	60b9      	str	r1, [r7, #8]
 800661e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006620:	2300      	movs	r3, #0
 8006622:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800662a:	2b01      	cmp	r3, #1
 800662c:	d101      	bne.n	8006632 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800662e:	2302      	movs	r3, #2
 8006630:	e0ae      	b.n	8006790 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	2201      	movs	r2, #1
 8006636:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	2b0c      	cmp	r3, #12
 800663e:	f200 809f 	bhi.w	8006780 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006642:	a201      	add	r2, pc, #4	; (adr r2, 8006648 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006644:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006648:	0800667d 	.word	0x0800667d
 800664c:	08006781 	.word	0x08006781
 8006650:	08006781 	.word	0x08006781
 8006654:	08006781 	.word	0x08006781
 8006658:	080066bd 	.word	0x080066bd
 800665c:	08006781 	.word	0x08006781
 8006660:	08006781 	.word	0x08006781
 8006664:	08006781 	.word	0x08006781
 8006668:	080066ff 	.word	0x080066ff
 800666c:	08006781 	.word	0x08006781
 8006670:	08006781 	.word	0x08006781
 8006674:	08006781 	.word	0x08006781
 8006678:	0800673f 	.word	0x0800673f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	68b9      	ldr	r1, [r7, #8]
 8006682:	4618      	mov	r0, r3
 8006684:	f000 f9f8 	bl	8006a78 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	699a      	ldr	r2, [r3, #24]
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	f042 0208 	orr.w	r2, r2, #8
 8006696:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	699a      	ldr	r2, [r3, #24]
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	f022 0204 	bic.w	r2, r2, #4
 80066a6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	6999      	ldr	r1, [r3, #24]
 80066ae:	68bb      	ldr	r3, [r7, #8]
 80066b0:	691a      	ldr	r2, [r3, #16]
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	430a      	orrs	r2, r1
 80066b8:	619a      	str	r2, [r3, #24]
      break;
 80066ba:	e064      	b.n	8006786 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	68b9      	ldr	r1, [r7, #8]
 80066c2:	4618      	mov	r0, r3
 80066c4:	f000 fa3e 	bl	8006b44 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	699a      	ldr	r2, [r3, #24]
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80066d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	699a      	ldr	r2, [r3, #24]
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80066e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	6999      	ldr	r1, [r3, #24]
 80066ee:	68bb      	ldr	r3, [r7, #8]
 80066f0:	691b      	ldr	r3, [r3, #16]
 80066f2:	021a      	lsls	r2, r3, #8
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	430a      	orrs	r2, r1
 80066fa:	619a      	str	r2, [r3, #24]
      break;
 80066fc:	e043      	b.n	8006786 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	68b9      	ldr	r1, [r7, #8]
 8006704:	4618      	mov	r0, r3
 8006706:	f000 fa89 	bl	8006c1c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	69da      	ldr	r2, [r3, #28]
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	f042 0208 	orr.w	r2, r2, #8
 8006718:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	69da      	ldr	r2, [r3, #28]
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	f022 0204 	bic.w	r2, r2, #4
 8006728:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	69d9      	ldr	r1, [r3, #28]
 8006730:	68bb      	ldr	r3, [r7, #8]
 8006732:	691a      	ldr	r2, [r3, #16]
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	430a      	orrs	r2, r1
 800673a:	61da      	str	r2, [r3, #28]
      break;
 800673c:	e023      	b.n	8006786 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	68b9      	ldr	r1, [r7, #8]
 8006744:	4618      	mov	r0, r3
 8006746:	f000 fad3 	bl	8006cf0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	69da      	ldr	r2, [r3, #28]
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006758:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	69da      	ldr	r2, [r3, #28]
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006768:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	69d9      	ldr	r1, [r3, #28]
 8006770:	68bb      	ldr	r3, [r7, #8]
 8006772:	691b      	ldr	r3, [r3, #16]
 8006774:	021a      	lsls	r2, r3, #8
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	430a      	orrs	r2, r1
 800677c:	61da      	str	r2, [r3, #28]
      break;
 800677e:	e002      	b.n	8006786 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006780:	2301      	movs	r3, #1
 8006782:	75fb      	strb	r3, [r7, #23]
      break;
 8006784:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	2200      	movs	r2, #0
 800678a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800678e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006790:	4618      	mov	r0, r3
 8006792:	3718      	adds	r7, #24
 8006794:	46bd      	mov	sp, r7
 8006796:	bd80      	pop	{r7, pc}

08006798 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006798:	b580      	push	{r7, lr}
 800679a:	b084      	sub	sp, #16
 800679c:	af00      	add	r7, sp, #0
 800679e:	6078      	str	r0, [r7, #4]
 80067a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80067a2:	2300      	movs	r3, #0
 80067a4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80067ac:	2b01      	cmp	r3, #1
 80067ae:	d101      	bne.n	80067b4 <HAL_TIM_ConfigClockSource+0x1c>
 80067b0:	2302      	movs	r3, #2
 80067b2:	e0b4      	b.n	800691e <HAL_TIM_ConfigClockSource+0x186>
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	2201      	movs	r2, #1
 80067b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	2202      	movs	r2, #2
 80067c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	689b      	ldr	r3, [r3, #8]
 80067ca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80067cc:	68bb      	ldr	r3, [r7, #8]
 80067ce:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80067d2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80067d4:	68bb      	ldr	r3, [r7, #8]
 80067d6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80067da:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	68ba      	ldr	r2, [r7, #8]
 80067e2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80067e4:	683b      	ldr	r3, [r7, #0]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80067ec:	d03e      	beq.n	800686c <HAL_TIM_ConfigClockSource+0xd4>
 80067ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80067f2:	f200 8087 	bhi.w	8006904 <HAL_TIM_ConfigClockSource+0x16c>
 80067f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80067fa:	f000 8086 	beq.w	800690a <HAL_TIM_ConfigClockSource+0x172>
 80067fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006802:	d87f      	bhi.n	8006904 <HAL_TIM_ConfigClockSource+0x16c>
 8006804:	2b70      	cmp	r3, #112	; 0x70
 8006806:	d01a      	beq.n	800683e <HAL_TIM_ConfigClockSource+0xa6>
 8006808:	2b70      	cmp	r3, #112	; 0x70
 800680a:	d87b      	bhi.n	8006904 <HAL_TIM_ConfigClockSource+0x16c>
 800680c:	2b60      	cmp	r3, #96	; 0x60
 800680e:	d050      	beq.n	80068b2 <HAL_TIM_ConfigClockSource+0x11a>
 8006810:	2b60      	cmp	r3, #96	; 0x60
 8006812:	d877      	bhi.n	8006904 <HAL_TIM_ConfigClockSource+0x16c>
 8006814:	2b50      	cmp	r3, #80	; 0x50
 8006816:	d03c      	beq.n	8006892 <HAL_TIM_ConfigClockSource+0xfa>
 8006818:	2b50      	cmp	r3, #80	; 0x50
 800681a:	d873      	bhi.n	8006904 <HAL_TIM_ConfigClockSource+0x16c>
 800681c:	2b40      	cmp	r3, #64	; 0x40
 800681e:	d058      	beq.n	80068d2 <HAL_TIM_ConfigClockSource+0x13a>
 8006820:	2b40      	cmp	r3, #64	; 0x40
 8006822:	d86f      	bhi.n	8006904 <HAL_TIM_ConfigClockSource+0x16c>
 8006824:	2b30      	cmp	r3, #48	; 0x30
 8006826:	d064      	beq.n	80068f2 <HAL_TIM_ConfigClockSource+0x15a>
 8006828:	2b30      	cmp	r3, #48	; 0x30
 800682a:	d86b      	bhi.n	8006904 <HAL_TIM_ConfigClockSource+0x16c>
 800682c:	2b20      	cmp	r3, #32
 800682e:	d060      	beq.n	80068f2 <HAL_TIM_ConfigClockSource+0x15a>
 8006830:	2b20      	cmp	r3, #32
 8006832:	d867      	bhi.n	8006904 <HAL_TIM_ConfigClockSource+0x16c>
 8006834:	2b00      	cmp	r3, #0
 8006836:	d05c      	beq.n	80068f2 <HAL_TIM_ConfigClockSource+0x15a>
 8006838:	2b10      	cmp	r3, #16
 800683a:	d05a      	beq.n	80068f2 <HAL_TIM_ConfigClockSource+0x15a>
 800683c:	e062      	b.n	8006904 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	6818      	ldr	r0, [r3, #0]
 8006842:	683b      	ldr	r3, [r7, #0]
 8006844:	6899      	ldr	r1, [r3, #8]
 8006846:	683b      	ldr	r3, [r7, #0]
 8006848:	685a      	ldr	r2, [r3, #4]
 800684a:	683b      	ldr	r3, [r7, #0]
 800684c:	68db      	ldr	r3, [r3, #12]
 800684e:	f000 fb19 	bl	8006e84 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	689b      	ldr	r3, [r3, #8]
 8006858:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800685a:	68bb      	ldr	r3, [r7, #8]
 800685c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006860:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	68ba      	ldr	r2, [r7, #8]
 8006868:	609a      	str	r2, [r3, #8]
      break;
 800686a:	e04f      	b.n	800690c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	6818      	ldr	r0, [r3, #0]
 8006870:	683b      	ldr	r3, [r7, #0]
 8006872:	6899      	ldr	r1, [r3, #8]
 8006874:	683b      	ldr	r3, [r7, #0]
 8006876:	685a      	ldr	r2, [r3, #4]
 8006878:	683b      	ldr	r3, [r7, #0]
 800687a:	68db      	ldr	r3, [r3, #12]
 800687c:	f000 fb02 	bl	8006e84 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	689a      	ldr	r2, [r3, #8]
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800688e:	609a      	str	r2, [r3, #8]
      break;
 8006890:	e03c      	b.n	800690c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	6818      	ldr	r0, [r3, #0]
 8006896:	683b      	ldr	r3, [r7, #0]
 8006898:	6859      	ldr	r1, [r3, #4]
 800689a:	683b      	ldr	r3, [r7, #0]
 800689c:	68db      	ldr	r3, [r3, #12]
 800689e:	461a      	mov	r2, r3
 80068a0:	f000 fa76 	bl	8006d90 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	2150      	movs	r1, #80	; 0x50
 80068aa:	4618      	mov	r0, r3
 80068ac:	f000 facf 	bl	8006e4e <TIM_ITRx_SetConfig>
      break;
 80068b0:	e02c      	b.n	800690c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	6818      	ldr	r0, [r3, #0]
 80068b6:	683b      	ldr	r3, [r7, #0]
 80068b8:	6859      	ldr	r1, [r3, #4]
 80068ba:	683b      	ldr	r3, [r7, #0]
 80068bc:	68db      	ldr	r3, [r3, #12]
 80068be:	461a      	mov	r2, r3
 80068c0:	f000 fa95 	bl	8006dee <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	2160      	movs	r1, #96	; 0x60
 80068ca:	4618      	mov	r0, r3
 80068cc:	f000 fabf 	bl	8006e4e <TIM_ITRx_SetConfig>
      break;
 80068d0:	e01c      	b.n	800690c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	6818      	ldr	r0, [r3, #0]
 80068d6:	683b      	ldr	r3, [r7, #0]
 80068d8:	6859      	ldr	r1, [r3, #4]
 80068da:	683b      	ldr	r3, [r7, #0]
 80068dc:	68db      	ldr	r3, [r3, #12]
 80068de:	461a      	mov	r2, r3
 80068e0:	f000 fa56 	bl	8006d90 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	2140      	movs	r1, #64	; 0x40
 80068ea:	4618      	mov	r0, r3
 80068ec:	f000 faaf 	bl	8006e4e <TIM_ITRx_SetConfig>
      break;
 80068f0:	e00c      	b.n	800690c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681a      	ldr	r2, [r3, #0]
 80068f6:	683b      	ldr	r3, [r7, #0]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	4619      	mov	r1, r3
 80068fc:	4610      	mov	r0, r2
 80068fe:	f000 faa6 	bl	8006e4e <TIM_ITRx_SetConfig>
      break;
 8006902:	e003      	b.n	800690c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006904:	2301      	movs	r3, #1
 8006906:	73fb      	strb	r3, [r7, #15]
      break;
 8006908:	e000      	b.n	800690c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800690a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	2201      	movs	r2, #1
 8006910:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	2200      	movs	r2, #0
 8006918:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800691c:	7bfb      	ldrb	r3, [r7, #15]
}
 800691e:	4618      	mov	r0, r3
 8006920:	3710      	adds	r7, #16
 8006922:	46bd      	mov	sp, r7
 8006924:	bd80      	pop	{r7, pc}

08006926 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006926:	b480      	push	{r7}
 8006928:	b083      	sub	sp, #12
 800692a:	af00      	add	r7, sp, #0
 800692c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800692e:	bf00      	nop
 8006930:	370c      	adds	r7, #12
 8006932:	46bd      	mov	sp, r7
 8006934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006938:	4770      	bx	lr

0800693a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800693a:	b480      	push	{r7}
 800693c:	b083      	sub	sp, #12
 800693e:	af00      	add	r7, sp, #0
 8006940:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006942:	bf00      	nop
 8006944:	370c      	adds	r7, #12
 8006946:	46bd      	mov	sp, r7
 8006948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800694c:	4770      	bx	lr

0800694e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800694e:	b480      	push	{r7}
 8006950:	b083      	sub	sp, #12
 8006952:	af00      	add	r7, sp, #0
 8006954:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006956:	bf00      	nop
 8006958:	370c      	adds	r7, #12
 800695a:	46bd      	mov	sp, r7
 800695c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006960:	4770      	bx	lr

08006962 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006962:	b480      	push	{r7}
 8006964:	b083      	sub	sp, #12
 8006966:	af00      	add	r7, sp, #0
 8006968:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800696a:	bf00      	nop
 800696c:	370c      	adds	r7, #12
 800696e:	46bd      	mov	sp, r7
 8006970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006974:	4770      	bx	lr
	...

08006978 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006978:	b480      	push	{r7}
 800697a:	b085      	sub	sp, #20
 800697c:	af00      	add	r7, sp, #0
 800697e:	6078      	str	r0, [r7, #4]
 8006980:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	4a34      	ldr	r2, [pc, #208]	; (8006a5c <TIM_Base_SetConfig+0xe4>)
 800698c:	4293      	cmp	r3, r2
 800698e:	d00f      	beq.n	80069b0 <TIM_Base_SetConfig+0x38>
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006996:	d00b      	beq.n	80069b0 <TIM_Base_SetConfig+0x38>
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	4a31      	ldr	r2, [pc, #196]	; (8006a60 <TIM_Base_SetConfig+0xe8>)
 800699c:	4293      	cmp	r3, r2
 800699e:	d007      	beq.n	80069b0 <TIM_Base_SetConfig+0x38>
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	4a30      	ldr	r2, [pc, #192]	; (8006a64 <TIM_Base_SetConfig+0xec>)
 80069a4:	4293      	cmp	r3, r2
 80069a6:	d003      	beq.n	80069b0 <TIM_Base_SetConfig+0x38>
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	4a2f      	ldr	r2, [pc, #188]	; (8006a68 <TIM_Base_SetConfig+0xf0>)
 80069ac:	4293      	cmp	r3, r2
 80069ae:	d108      	bne.n	80069c2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80069b8:	683b      	ldr	r3, [r7, #0]
 80069ba:	685b      	ldr	r3, [r3, #4]
 80069bc:	68fa      	ldr	r2, [r7, #12]
 80069be:	4313      	orrs	r3, r2
 80069c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	4a25      	ldr	r2, [pc, #148]	; (8006a5c <TIM_Base_SetConfig+0xe4>)
 80069c6:	4293      	cmp	r3, r2
 80069c8:	d01b      	beq.n	8006a02 <TIM_Base_SetConfig+0x8a>
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80069d0:	d017      	beq.n	8006a02 <TIM_Base_SetConfig+0x8a>
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	4a22      	ldr	r2, [pc, #136]	; (8006a60 <TIM_Base_SetConfig+0xe8>)
 80069d6:	4293      	cmp	r3, r2
 80069d8:	d013      	beq.n	8006a02 <TIM_Base_SetConfig+0x8a>
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	4a21      	ldr	r2, [pc, #132]	; (8006a64 <TIM_Base_SetConfig+0xec>)
 80069de:	4293      	cmp	r3, r2
 80069e0:	d00f      	beq.n	8006a02 <TIM_Base_SetConfig+0x8a>
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	4a20      	ldr	r2, [pc, #128]	; (8006a68 <TIM_Base_SetConfig+0xf0>)
 80069e6:	4293      	cmp	r3, r2
 80069e8:	d00b      	beq.n	8006a02 <TIM_Base_SetConfig+0x8a>
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	4a1f      	ldr	r2, [pc, #124]	; (8006a6c <TIM_Base_SetConfig+0xf4>)
 80069ee:	4293      	cmp	r3, r2
 80069f0:	d007      	beq.n	8006a02 <TIM_Base_SetConfig+0x8a>
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	4a1e      	ldr	r2, [pc, #120]	; (8006a70 <TIM_Base_SetConfig+0xf8>)
 80069f6:	4293      	cmp	r3, r2
 80069f8:	d003      	beq.n	8006a02 <TIM_Base_SetConfig+0x8a>
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	4a1d      	ldr	r2, [pc, #116]	; (8006a74 <TIM_Base_SetConfig+0xfc>)
 80069fe:	4293      	cmp	r3, r2
 8006a00:	d108      	bne.n	8006a14 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a08:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006a0a:	683b      	ldr	r3, [r7, #0]
 8006a0c:	68db      	ldr	r3, [r3, #12]
 8006a0e:	68fa      	ldr	r2, [r7, #12]
 8006a10:	4313      	orrs	r3, r2
 8006a12:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006a1a:	683b      	ldr	r3, [r7, #0]
 8006a1c:	695b      	ldr	r3, [r3, #20]
 8006a1e:	4313      	orrs	r3, r2
 8006a20:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	68fa      	ldr	r2, [r7, #12]
 8006a26:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006a28:	683b      	ldr	r3, [r7, #0]
 8006a2a:	689a      	ldr	r2, [r3, #8]
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006a30:	683b      	ldr	r3, [r7, #0]
 8006a32:	681a      	ldr	r2, [r3, #0]
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	4a08      	ldr	r2, [pc, #32]	; (8006a5c <TIM_Base_SetConfig+0xe4>)
 8006a3c:	4293      	cmp	r3, r2
 8006a3e:	d103      	bne.n	8006a48 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006a40:	683b      	ldr	r3, [r7, #0]
 8006a42:	691a      	ldr	r2, [r3, #16]
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	2201      	movs	r2, #1
 8006a4c:	615a      	str	r2, [r3, #20]
}
 8006a4e:	bf00      	nop
 8006a50:	3714      	adds	r7, #20
 8006a52:	46bd      	mov	sp, r7
 8006a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a58:	4770      	bx	lr
 8006a5a:	bf00      	nop
 8006a5c:	40010000 	.word	0x40010000
 8006a60:	40000400 	.word	0x40000400
 8006a64:	40000800 	.word	0x40000800
 8006a68:	40000c00 	.word	0x40000c00
 8006a6c:	40014000 	.word	0x40014000
 8006a70:	40014400 	.word	0x40014400
 8006a74:	40014800 	.word	0x40014800

08006a78 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006a78:	b480      	push	{r7}
 8006a7a:	b087      	sub	sp, #28
 8006a7c:	af00      	add	r7, sp, #0
 8006a7e:	6078      	str	r0, [r7, #4]
 8006a80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	6a1b      	ldr	r3, [r3, #32]
 8006a86:	f023 0201 	bic.w	r2, r3, #1
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	6a1b      	ldr	r3, [r3, #32]
 8006a92:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	685b      	ldr	r3, [r3, #4]
 8006a98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	699b      	ldr	r3, [r3, #24]
 8006a9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006aa6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	f023 0303 	bic.w	r3, r3, #3
 8006aae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006ab0:	683b      	ldr	r3, [r7, #0]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	68fa      	ldr	r2, [r7, #12]
 8006ab6:	4313      	orrs	r3, r2
 8006ab8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006aba:	697b      	ldr	r3, [r7, #20]
 8006abc:	f023 0302 	bic.w	r3, r3, #2
 8006ac0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006ac2:	683b      	ldr	r3, [r7, #0]
 8006ac4:	689b      	ldr	r3, [r3, #8]
 8006ac6:	697a      	ldr	r2, [r7, #20]
 8006ac8:	4313      	orrs	r3, r2
 8006aca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	4a1c      	ldr	r2, [pc, #112]	; (8006b40 <TIM_OC1_SetConfig+0xc8>)
 8006ad0:	4293      	cmp	r3, r2
 8006ad2:	d10c      	bne.n	8006aee <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006ad4:	697b      	ldr	r3, [r7, #20]
 8006ad6:	f023 0308 	bic.w	r3, r3, #8
 8006ada:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006adc:	683b      	ldr	r3, [r7, #0]
 8006ade:	68db      	ldr	r3, [r3, #12]
 8006ae0:	697a      	ldr	r2, [r7, #20]
 8006ae2:	4313      	orrs	r3, r2
 8006ae4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006ae6:	697b      	ldr	r3, [r7, #20]
 8006ae8:	f023 0304 	bic.w	r3, r3, #4
 8006aec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	4a13      	ldr	r2, [pc, #76]	; (8006b40 <TIM_OC1_SetConfig+0xc8>)
 8006af2:	4293      	cmp	r3, r2
 8006af4:	d111      	bne.n	8006b1a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006af6:	693b      	ldr	r3, [r7, #16]
 8006af8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006afc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006afe:	693b      	ldr	r3, [r7, #16]
 8006b00:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006b04:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006b06:	683b      	ldr	r3, [r7, #0]
 8006b08:	695b      	ldr	r3, [r3, #20]
 8006b0a:	693a      	ldr	r2, [r7, #16]
 8006b0c:	4313      	orrs	r3, r2
 8006b0e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006b10:	683b      	ldr	r3, [r7, #0]
 8006b12:	699b      	ldr	r3, [r3, #24]
 8006b14:	693a      	ldr	r2, [r7, #16]
 8006b16:	4313      	orrs	r3, r2
 8006b18:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	693a      	ldr	r2, [r7, #16]
 8006b1e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	68fa      	ldr	r2, [r7, #12]
 8006b24:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006b26:	683b      	ldr	r3, [r7, #0]
 8006b28:	685a      	ldr	r2, [r3, #4]
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	697a      	ldr	r2, [r7, #20]
 8006b32:	621a      	str	r2, [r3, #32]
}
 8006b34:	bf00      	nop
 8006b36:	371c      	adds	r7, #28
 8006b38:	46bd      	mov	sp, r7
 8006b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b3e:	4770      	bx	lr
 8006b40:	40010000 	.word	0x40010000

08006b44 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006b44:	b480      	push	{r7}
 8006b46:	b087      	sub	sp, #28
 8006b48:	af00      	add	r7, sp, #0
 8006b4a:	6078      	str	r0, [r7, #4]
 8006b4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	6a1b      	ldr	r3, [r3, #32]
 8006b52:	f023 0210 	bic.w	r2, r3, #16
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	6a1b      	ldr	r3, [r3, #32]
 8006b5e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	685b      	ldr	r3, [r3, #4]
 8006b64:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	699b      	ldr	r3, [r3, #24]
 8006b6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006b7a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006b7c:	683b      	ldr	r3, [r7, #0]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	021b      	lsls	r3, r3, #8
 8006b82:	68fa      	ldr	r2, [r7, #12]
 8006b84:	4313      	orrs	r3, r2
 8006b86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006b88:	697b      	ldr	r3, [r7, #20]
 8006b8a:	f023 0320 	bic.w	r3, r3, #32
 8006b8e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006b90:	683b      	ldr	r3, [r7, #0]
 8006b92:	689b      	ldr	r3, [r3, #8]
 8006b94:	011b      	lsls	r3, r3, #4
 8006b96:	697a      	ldr	r2, [r7, #20]
 8006b98:	4313      	orrs	r3, r2
 8006b9a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	4a1e      	ldr	r2, [pc, #120]	; (8006c18 <TIM_OC2_SetConfig+0xd4>)
 8006ba0:	4293      	cmp	r3, r2
 8006ba2:	d10d      	bne.n	8006bc0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006ba4:	697b      	ldr	r3, [r7, #20]
 8006ba6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006baa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006bac:	683b      	ldr	r3, [r7, #0]
 8006bae:	68db      	ldr	r3, [r3, #12]
 8006bb0:	011b      	lsls	r3, r3, #4
 8006bb2:	697a      	ldr	r2, [r7, #20]
 8006bb4:	4313      	orrs	r3, r2
 8006bb6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006bb8:	697b      	ldr	r3, [r7, #20]
 8006bba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006bbe:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	4a15      	ldr	r2, [pc, #84]	; (8006c18 <TIM_OC2_SetConfig+0xd4>)
 8006bc4:	4293      	cmp	r3, r2
 8006bc6:	d113      	bne.n	8006bf0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006bc8:	693b      	ldr	r3, [r7, #16]
 8006bca:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006bce:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006bd0:	693b      	ldr	r3, [r7, #16]
 8006bd2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006bd6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006bd8:	683b      	ldr	r3, [r7, #0]
 8006bda:	695b      	ldr	r3, [r3, #20]
 8006bdc:	009b      	lsls	r3, r3, #2
 8006bde:	693a      	ldr	r2, [r7, #16]
 8006be0:	4313      	orrs	r3, r2
 8006be2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006be4:	683b      	ldr	r3, [r7, #0]
 8006be6:	699b      	ldr	r3, [r3, #24]
 8006be8:	009b      	lsls	r3, r3, #2
 8006bea:	693a      	ldr	r2, [r7, #16]
 8006bec:	4313      	orrs	r3, r2
 8006bee:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	693a      	ldr	r2, [r7, #16]
 8006bf4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	68fa      	ldr	r2, [r7, #12]
 8006bfa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006bfc:	683b      	ldr	r3, [r7, #0]
 8006bfe:	685a      	ldr	r2, [r3, #4]
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	697a      	ldr	r2, [r7, #20]
 8006c08:	621a      	str	r2, [r3, #32]
}
 8006c0a:	bf00      	nop
 8006c0c:	371c      	adds	r7, #28
 8006c0e:	46bd      	mov	sp, r7
 8006c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c14:	4770      	bx	lr
 8006c16:	bf00      	nop
 8006c18:	40010000 	.word	0x40010000

08006c1c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006c1c:	b480      	push	{r7}
 8006c1e:	b087      	sub	sp, #28
 8006c20:	af00      	add	r7, sp, #0
 8006c22:	6078      	str	r0, [r7, #4]
 8006c24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	6a1b      	ldr	r3, [r3, #32]
 8006c2a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	6a1b      	ldr	r3, [r3, #32]
 8006c36:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	685b      	ldr	r3, [r3, #4]
 8006c3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	69db      	ldr	r3, [r3, #28]
 8006c42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	f023 0303 	bic.w	r3, r3, #3
 8006c52:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006c54:	683b      	ldr	r3, [r7, #0]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	68fa      	ldr	r2, [r7, #12]
 8006c5a:	4313      	orrs	r3, r2
 8006c5c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006c5e:	697b      	ldr	r3, [r7, #20]
 8006c60:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006c64:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006c66:	683b      	ldr	r3, [r7, #0]
 8006c68:	689b      	ldr	r3, [r3, #8]
 8006c6a:	021b      	lsls	r3, r3, #8
 8006c6c:	697a      	ldr	r2, [r7, #20]
 8006c6e:	4313      	orrs	r3, r2
 8006c70:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	4a1d      	ldr	r2, [pc, #116]	; (8006cec <TIM_OC3_SetConfig+0xd0>)
 8006c76:	4293      	cmp	r3, r2
 8006c78:	d10d      	bne.n	8006c96 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006c7a:	697b      	ldr	r3, [r7, #20]
 8006c7c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006c80:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006c82:	683b      	ldr	r3, [r7, #0]
 8006c84:	68db      	ldr	r3, [r3, #12]
 8006c86:	021b      	lsls	r3, r3, #8
 8006c88:	697a      	ldr	r2, [r7, #20]
 8006c8a:	4313      	orrs	r3, r2
 8006c8c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006c8e:	697b      	ldr	r3, [r7, #20]
 8006c90:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006c94:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	4a14      	ldr	r2, [pc, #80]	; (8006cec <TIM_OC3_SetConfig+0xd0>)
 8006c9a:	4293      	cmp	r3, r2
 8006c9c:	d113      	bne.n	8006cc6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006c9e:	693b      	ldr	r3, [r7, #16]
 8006ca0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006ca4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006ca6:	693b      	ldr	r3, [r7, #16]
 8006ca8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006cac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006cae:	683b      	ldr	r3, [r7, #0]
 8006cb0:	695b      	ldr	r3, [r3, #20]
 8006cb2:	011b      	lsls	r3, r3, #4
 8006cb4:	693a      	ldr	r2, [r7, #16]
 8006cb6:	4313      	orrs	r3, r2
 8006cb8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006cba:	683b      	ldr	r3, [r7, #0]
 8006cbc:	699b      	ldr	r3, [r3, #24]
 8006cbe:	011b      	lsls	r3, r3, #4
 8006cc0:	693a      	ldr	r2, [r7, #16]
 8006cc2:	4313      	orrs	r3, r2
 8006cc4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	693a      	ldr	r2, [r7, #16]
 8006cca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	68fa      	ldr	r2, [r7, #12]
 8006cd0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006cd2:	683b      	ldr	r3, [r7, #0]
 8006cd4:	685a      	ldr	r2, [r3, #4]
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	697a      	ldr	r2, [r7, #20]
 8006cde:	621a      	str	r2, [r3, #32]
}
 8006ce0:	bf00      	nop
 8006ce2:	371c      	adds	r7, #28
 8006ce4:	46bd      	mov	sp, r7
 8006ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cea:	4770      	bx	lr
 8006cec:	40010000 	.word	0x40010000

08006cf0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006cf0:	b480      	push	{r7}
 8006cf2:	b087      	sub	sp, #28
 8006cf4:	af00      	add	r7, sp, #0
 8006cf6:	6078      	str	r0, [r7, #4]
 8006cf8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	6a1b      	ldr	r3, [r3, #32]
 8006cfe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	6a1b      	ldr	r3, [r3, #32]
 8006d0a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	685b      	ldr	r3, [r3, #4]
 8006d10:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	69db      	ldr	r3, [r3, #28]
 8006d16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006d26:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006d28:	683b      	ldr	r3, [r7, #0]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	021b      	lsls	r3, r3, #8
 8006d2e:	68fa      	ldr	r2, [r7, #12]
 8006d30:	4313      	orrs	r3, r2
 8006d32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006d34:	693b      	ldr	r3, [r7, #16]
 8006d36:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006d3a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006d3c:	683b      	ldr	r3, [r7, #0]
 8006d3e:	689b      	ldr	r3, [r3, #8]
 8006d40:	031b      	lsls	r3, r3, #12
 8006d42:	693a      	ldr	r2, [r7, #16]
 8006d44:	4313      	orrs	r3, r2
 8006d46:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	4a10      	ldr	r2, [pc, #64]	; (8006d8c <TIM_OC4_SetConfig+0x9c>)
 8006d4c:	4293      	cmp	r3, r2
 8006d4e:	d109      	bne.n	8006d64 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006d50:	697b      	ldr	r3, [r7, #20]
 8006d52:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006d56:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006d58:	683b      	ldr	r3, [r7, #0]
 8006d5a:	695b      	ldr	r3, [r3, #20]
 8006d5c:	019b      	lsls	r3, r3, #6
 8006d5e:	697a      	ldr	r2, [r7, #20]
 8006d60:	4313      	orrs	r3, r2
 8006d62:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	697a      	ldr	r2, [r7, #20]
 8006d68:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	68fa      	ldr	r2, [r7, #12]
 8006d6e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006d70:	683b      	ldr	r3, [r7, #0]
 8006d72:	685a      	ldr	r2, [r3, #4]
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	693a      	ldr	r2, [r7, #16]
 8006d7c:	621a      	str	r2, [r3, #32]
}
 8006d7e:	bf00      	nop
 8006d80:	371c      	adds	r7, #28
 8006d82:	46bd      	mov	sp, r7
 8006d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d88:	4770      	bx	lr
 8006d8a:	bf00      	nop
 8006d8c:	40010000 	.word	0x40010000

08006d90 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006d90:	b480      	push	{r7}
 8006d92:	b087      	sub	sp, #28
 8006d94:	af00      	add	r7, sp, #0
 8006d96:	60f8      	str	r0, [r7, #12]
 8006d98:	60b9      	str	r1, [r7, #8]
 8006d9a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	6a1b      	ldr	r3, [r3, #32]
 8006da0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	6a1b      	ldr	r3, [r3, #32]
 8006da6:	f023 0201 	bic.w	r2, r3, #1
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	699b      	ldr	r3, [r3, #24]
 8006db2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006db4:	693b      	ldr	r3, [r7, #16]
 8006db6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006dba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	011b      	lsls	r3, r3, #4
 8006dc0:	693a      	ldr	r2, [r7, #16]
 8006dc2:	4313      	orrs	r3, r2
 8006dc4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006dc6:	697b      	ldr	r3, [r7, #20]
 8006dc8:	f023 030a 	bic.w	r3, r3, #10
 8006dcc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006dce:	697a      	ldr	r2, [r7, #20]
 8006dd0:	68bb      	ldr	r3, [r7, #8]
 8006dd2:	4313      	orrs	r3, r2
 8006dd4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	693a      	ldr	r2, [r7, #16]
 8006dda:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	697a      	ldr	r2, [r7, #20]
 8006de0:	621a      	str	r2, [r3, #32]
}
 8006de2:	bf00      	nop
 8006de4:	371c      	adds	r7, #28
 8006de6:	46bd      	mov	sp, r7
 8006de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dec:	4770      	bx	lr

08006dee <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006dee:	b480      	push	{r7}
 8006df0:	b087      	sub	sp, #28
 8006df2:	af00      	add	r7, sp, #0
 8006df4:	60f8      	str	r0, [r7, #12]
 8006df6:	60b9      	str	r1, [r7, #8]
 8006df8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	6a1b      	ldr	r3, [r3, #32]
 8006dfe:	f023 0210 	bic.w	r2, r3, #16
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	699b      	ldr	r3, [r3, #24]
 8006e0a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	6a1b      	ldr	r3, [r3, #32]
 8006e10:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006e12:	697b      	ldr	r3, [r7, #20]
 8006e14:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006e18:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	031b      	lsls	r3, r3, #12
 8006e1e:	697a      	ldr	r2, [r7, #20]
 8006e20:	4313      	orrs	r3, r2
 8006e22:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006e24:	693b      	ldr	r3, [r7, #16]
 8006e26:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006e2a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006e2c:	68bb      	ldr	r3, [r7, #8]
 8006e2e:	011b      	lsls	r3, r3, #4
 8006e30:	693a      	ldr	r2, [r7, #16]
 8006e32:	4313      	orrs	r3, r2
 8006e34:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	697a      	ldr	r2, [r7, #20]
 8006e3a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	693a      	ldr	r2, [r7, #16]
 8006e40:	621a      	str	r2, [r3, #32]
}
 8006e42:	bf00      	nop
 8006e44:	371c      	adds	r7, #28
 8006e46:	46bd      	mov	sp, r7
 8006e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e4c:	4770      	bx	lr

08006e4e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006e4e:	b480      	push	{r7}
 8006e50:	b085      	sub	sp, #20
 8006e52:	af00      	add	r7, sp, #0
 8006e54:	6078      	str	r0, [r7, #4]
 8006e56:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	689b      	ldr	r3, [r3, #8]
 8006e5c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e64:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006e66:	683a      	ldr	r2, [r7, #0]
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	4313      	orrs	r3, r2
 8006e6c:	f043 0307 	orr.w	r3, r3, #7
 8006e70:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	68fa      	ldr	r2, [r7, #12]
 8006e76:	609a      	str	r2, [r3, #8]
}
 8006e78:	bf00      	nop
 8006e7a:	3714      	adds	r7, #20
 8006e7c:	46bd      	mov	sp, r7
 8006e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e82:	4770      	bx	lr

08006e84 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006e84:	b480      	push	{r7}
 8006e86:	b087      	sub	sp, #28
 8006e88:	af00      	add	r7, sp, #0
 8006e8a:	60f8      	str	r0, [r7, #12]
 8006e8c:	60b9      	str	r1, [r7, #8]
 8006e8e:	607a      	str	r2, [r7, #4]
 8006e90:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	689b      	ldr	r3, [r3, #8]
 8006e96:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006e98:	697b      	ldr	r3, [r7, #20]
 8006e9a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006e9e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006ea0:	683b      	ldr	r3, [r7, #0]
 8006ea2:	021a      	lsls	r2, r3, #8
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	431a      	orrs	r2, r3
 8006ea8:	68bb      	ldr	r3, [r7, #8]
 8006eaa:	4313      	orrs	r3, r2
 8006eac:	697a      	ldr	r2, [r7, #20]
 8006eae:	4313      	orrs	r3, r2
 8006eb0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	697a      	ldr	r2, [r7, #20]
 8006eb6:	609a      	str	r2, [r3, #8]
}
 8006eb8:	bf00      	nop
 8006eba:	371c      	adds	r7, #28
 8006ebc:	46bd      	mov	sp, r7
 8006ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec2:	4770      	bx	lr

08006ec4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006ec4:	b480      	push	{r7}
 8006ec6:	b087      	sub	sp, #28
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	60f8      	str	r0, [r7, #12]
 8006ecc:	60b9      	str	r1, [r7, #8]
 8006ece:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006ed0:	68bb      	ldr	r3, [r7, #8]
 8006ed2:	f003 031f 	and.w	r3, r3, #31
 8006ed6:	2201      	movs	r2, #1
 8006ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8006edc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	6a1a      	ldr	r2, [r3, #32]
 8006ee2:	697b      	ldr	r3, [r7, #20]
 8006ee4:	43db      	mvns	r3, r3
 8006ee6:	401a      	ands	r2, r3
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	6a1a      	ldr	r2, [r3, #32]
 8006ef0:	68bb      	ldr	r3, [r7, #8]
 8006ef2:	f003 031f 	and.w	r3, r3, #31
 8006ef6:	6879      	ldr	r1, [r7, #4]
 8006ef8:	fa01 f303 	lsl.w	r3, r1, r3
 8006efc:	431a      	orrs	r2, r3
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	621a      	str	r2, [r3, #32]
}
 8006f02:	bf00      	nop
 8006f04:	371c      	adds	r7, #28
 8006f06:	46bd      	mov	sp, r7
 8006f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f0c:	4770      	bx	lr
	...

08006f10 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006f10:	b480      	push	{r7}
 8006f12:	b085      	sub	sp, #20
 8006f14:	af00      	add	r7, sp, #0
 8006f16:	6078      	str	r0, [r7, #4]
 8006f18:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006f20:	2b01      	cmp	r3, #1
 8006f22:	d101      	bne.n	8006f28 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006f24:	2302      	movs	r3, #2
 8006f26:	e050      	b.n	8006fca <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	2201      	movs	r2, #1
 8006f2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	2202      	movs	r2, #2
 8006f34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	685b      	ldr	r3, [r3, #4]
 8006f3e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	689b      	ldr	r3, [r3, #8]
 8006f46:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f4e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006f50:	683b      	ldr	r3, [r7, #0]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	68fa      	ldr	r2, [r7, #12]
 8006f56:	4313      	orrs	r3, r2
 8006f58:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	68fa      	ldr	r2, [r7, #12]
 8006f60:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	4a1c      	ldr	r2, [pc, #112]	; (8006fd8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006f68:	4293      	cmp	r3, r2
 8006f6a:	d018      	beq.n	8006f9e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f74:	d013      	beq.n	8006f9e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	4a18      	ldr	r2, [pc, #96]	; (8006fdc <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006f7c:	4293      	cmp	r3, r2
 8006f7e:	d00e      	beq.n	8006f9e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	4a16      	ldr	r2, [pc, #88]	; (8006fe0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006f86:	4293      	cmp	r3, r2
 8006f88:	d009      	beq.n	8006f9e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	4a15      	ldr	r2, [pc, #84]	; (8006fe4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006f90:	4293      	cmp	r3, r2
 8006f92:	d004      	beq.n	8006f9e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	4a13      	ldr	r2, [pc, #76]	; (8006fe8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8006f9a:	4293      	cmp	r3, r2
 8006f9c:	d10c      	bne.n	8006fb8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006f9e:	68bb      	ldr	r3, [r7, #8]
 8006fa0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006fa4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006fa6:	683b      	ldr	r3, [r7, #0]
 8006fa8:	685b      	ldr	r3, [r3, #4]
 8006faa:	68ba      	ldr	r2, [r7, #8]
 8006fac:	4313      	orrs	r3, r2
 8006fae:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	68ba      	ldr	r2, [r7, #8]
 8006fb6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	2201      	movs	r2, #1
 8006fbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	2200      	movs	r2, #0
 8006fc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006fc8:	2300      	movs	r3, #0
}
 8006fca:	4618      	mov	r0, r3
 8006fcc:	3714      	adds	r7, #20
 8006fce:	46bd      	mov	sp, r7
 8006fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd4:	4770      	bx	lr
 8006fd6:	bf00      	nop
 8006fd8:	40010000 	.word	0x40010000
 8006fdc:	40000400 	.word	0x40000400
 8006fe0:	40000800 	.word	0x40000800
 8006fe4:	40000c00 	.word	0x40000c00
 8006fe8:	40014000 	.word	0x40014000

08006fec <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006fec:	b480      	push	{r7}
 8006fee:	b083      	sub	sp, #12
 8006ff0:	af00      	add	r7, sp, #0
 8006ff2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006ff4:	bf00      	nop
 8006ff6:	370c      	adds	r7, #12
 8006ff8:	46bd      	mov	sp, r7
 8006ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ffe:	4770      	bx	lr

08007000 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007000:	b480      	push	{r7}
 8007002:	b083      	sub	sp, #12
 8007004:	af00      	add	r7, sp, #0
 8007006:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007008:	bf00      	nop
 800700a:	370c      	adds	r7, #12
 800700c:	46bd      	mov	sp, r7
 800700e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007012:	4770      	bx	lr

08007014 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007014:	b580      	push	{r7, lr}
 8007016:	b082      	sub	sp, #8
 8007018:	af00      	add	r7, sp, #0
 800701a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	2b00      	cmp	r3, #0
 8007020:	d101      	bne.n	8007026 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007022:	2301      	movs	r3, #1
 8007024:	e03f      	b.n	80070a6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800702c:	b2db      	uxtb	r3, r3
 800702e:	2b00      	cmp	r3, #0
 8007030:	d106      	bne.n	8007040 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	2200      	movs	r2, #0
 8007036:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800703a:	6878      	ldr	r0, [r7, #4]
 800703c:	f7fc fea8 	bl	8003d90 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	2224      	movs	r2, #36	; 0x24
 8007044:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	68da      	ldr	r2, [r3, #12]
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007056:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007058:	6878      	ldr	r0, [r7, #4]
 800705a:	f000 ff43 	bl	8007ee4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	691a      	ldr	r2, [r3, #16]
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800706c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	695a      	ldr	r2, [r3, #20]
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800707c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	68da      	ldr	r2, [r3, #12]
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800708c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	2200      	movs	r2, #0
 8007092:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	2220      	movs	r2, #32
 8007098:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	2220      	movs	r2, #32
 80070a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80070a4:	2300      	movs	r3, #0
}
 80070a6:	4618      	mov	r0, r3
 80070a8:	3708      	adds	r7, #8
 80070aa:	46bd      	mov	sp, r7
 80070ac:	bd80      	pop	{r7, pc}
	...

080070b0 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80070b0:	b580      	push	{r7, lr}
 80070b2:	b08c      	sub	sp, #48	; 0x30
 80070b4:	af00      	add	r7, sp, #0
 80070b6:	60f8      	str	r0, [r7, #12]
 80070b8:	60b9      	str	r1, [r7, #8]
 80070ba:	4613      	mov	r3, r2
 80070bc:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80070c4:	b2db      	uxtb	r3, r3
 80070c6:	2b20      	cmp	r3, #32
 80070c8:	d165      	bne.n	8007196 <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 80070ca:	68bb      	ldr	r3, [r7, #8]
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d002      	beq.n	80070d6 <HAL_UART_Transmit_DMA+0x26>
 80070d0:	88fb      	ldrh	r3, [r7, #6]
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d101      	bne.n	80070da <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80070d6:	2301      	movs	r3, #1
 80070d8:	e05e      	b.n	8007198 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80070e0:	2b01      	cmp	r3, #1
 80070e2:	d101      	bne.n	80070e8 <HAL_UART_Transmit_DMA+0x38>
 80070e4:	2302      	movs	r3, #2
 80070e6:	e057      	b.n	8007198 <HAL_UART_Transmit_DMA+0xe8>
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	2201      	movs	r2, #1
 80070ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 80070f0:	68ba      	ldr	r2, [r7, #8]
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	88fa      	ldrh	r2, [r7, #6]
 80070fa:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	88fa      	ldrh	r2, [r7, #6]
 8007100:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	2200      	movs	r2, #0
 8007106:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	2221      	movs	r2, #33	; 0x21
 800710c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007114:	4a22      	ldr	r2, [pc, #136]	; (80071a0 <HAL_UART_Transmit_DMA+0xf0>)
 8007116:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800711c:	4a21      	ldr	r2, [pc, #132]	; (80071a4 <HAL_UART_Transmit_DMA+0xf4>)
 800711e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007124:	4a20      	ldr	r2, [pc, #128]	; (80071a8 <HAL_UART_Transmit_DMA+0xf8>)
 8007126:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800712c:	2200      	movs	r2, #0
 800712e:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8007130:	f107 0308 	add.w	r3, r7, #8
 8007134:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800713a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800713c:	6819      	ldr	r1, [r3, #0]
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	3304      	adds	r3, #4
 8007144:	461a      	mov	r2, r3
 8007146:	88fb      	ldrh	r3, [r7, #6]
 8007148:	f7fd fdf2 	bl	8004d30 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007154:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	2200      	movs	r2, #0
 800715a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	3314      	adds	r3, #20
 8007164:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007166:	69bb      	ldr	r3, [r7, #24]
 8007168:	e853 3f00 	ldrex	r3, [r3]
 800716c:	617b      	str	r3, [r7, #20]
   return(result);
 800716e:	697b      	ldr	r3, [r7, #20]
 8007170:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007174:	62bb      	str	r3, [r7, #40]	; 0x28
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	3314      	adds	r3, #20
 800717c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800717e:	627a      	str	r2, [r7, #36]	; 0x24
 8007180:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007182:	6a39      	ldr	r1, [r7, #32]
 8007184:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007186:	e841 2300 	strex	r3, r2, [r1]
 800718a:	61fb      	str	r3, [r7, #28]
   return(result);
 800718c:	69fb      	ldr	r3, [r7, #28]
 800718e:	2b00      	cmp	r3, #0
 8007190:	d1e5      	bne.n	800715e <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 8007192:	2300      	movs	r3, #0
 8007194:	e000      	b.n	8007198 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 8007196:	2302      	movs	r3, #2
  }
}
 8007198:	4618      	mov	r0, r3
 800719a:	3730      	adds	r7, #48	; 0x30
 800719c:	46bd      	mov	sp, r7
 800719e:	bd80      	pop	{r7, pc}
 80071a0:	0800777d 	.word	0x0800777d
 80071a4:	08007817 	.word	0x08007817
 80071a8:	0800798f 	.word	0x0800798f

080071ac <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80071ac:	b580      	push	{r7, lr}
 80071ae:	b084      	sub	sp, #16
 80071b0:	af00      	add	r7, sp, #0
 80071b2:	60f8      	str	r0, [r7, #12]
 80071b4:	60b9      	str	r1, [r7, #8]
 80071b6:	4613      	mov	r3, r2
 80071b8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80071c0:	b2db      	uxtb	r3, r3
 80071c2:	2b20      	cmp	r3, #32
 80071c4:	d11d      	bne.n	8007202 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80071c6:	68bb      	ldr	r3, [r7, #8]
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d002      	beq.n	80071d2 <HAL_UART_Receive_DMA+0x26>
 80071cc:	88fb      	ldrh	r3, [r7, #6]
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d101      	bne.n	80071d6 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80071d2:	2301      	movs	r3, #1
 80071d4:	e016      	b.n	8007204 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80071dc:	2b01      	cmp	r3, #1
 80071de:	d101      	bne.n	80071e4 <HAL_UART_Receive_DMA+0x38>
 80071e0:	2302      	movs	r3, #2
 80071e2:	e00f      	b.n	8007204 <HAL_UART_Receive_DMA+0x58>
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	2201      	movs	r2, #1
 80071e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	2200      	movs	r2, #0
 80071f0:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80071f2:	88fb      	ldrh	r3, [r7, #6]
 80071f4:	461a      	mov	r2, r3
 80071f6:	68b9      	ldr	r1, [r7, #8]
 80071f8:	68f8      	ldr	r0, [r7, #12]
 80071fa:	f000 fc13 	bl	8007a24 <UART_Start_Receive_DMA>
 80071fe:	4603      	mov	r3, r0
 8007200:	e000      	b.n	8007204 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8007202:	2302      	movs	r3, #2
  }
}
 8007204:	4618      	mov	r0, r3
 8007206:	3710      	adds	r7, #16
 8007208:	46bd      	mov	sp, r7
 800720a:	bd80      	pop	{r7, pc}

0800720c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800720c:	b580      	push	{r7, lr}
 800720e:	b0ba      	sub	sp, #232	; 0xe8
 8007210:	af00      	add	r7, sp, #0
 8007212:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	68db      	ldr	r3, [r3, #12]
 8007224:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	695b      	ldr	r3, [r3, #20]
 800722e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8007232:	2300      	movs	r3, #0
 8007234:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8007238:	2300      	movs	r3, #0
 800723a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800723e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007242:	f003 030f 	and.w	r3, r3, #15
 8007246:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800724a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800724e:	2b00      	cmp	r3, #0
 8007250:	d10f      	bne.n	8007272 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007252:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007256:	f003 0320 	and.w	r3, r3, #32
 800725a:	2b00      	cmp	r3, #0
 800725c:	d009      	beq.n	8007272 <HAL_UART_IRQHandler+0x66>
 800725e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007262:	f003 0320 	and.w	r3, r3, #32
 8007266:	2b00      	cmp	r3, #0
 8007268:	d003      	beq.n	8007272 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800726a:	6878      	ldr	r0, [r7, #4]
 800726c:	f000 fd7f 	bl	8007d6e <UART_Receive_IT>
      return;
 8007270:	e256      	b.n	8007720 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8007272:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007276:	2b00      	cmp	r3, #0
 8007278:	f000 80de 	beq.w	8007438 <HAL_UART_IRQHandler+0x22c>
 800727c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007280:	f003 0301 	and.w	r3, r3, #1
 8007284:	2b00      	cmp	r3, #0
 8007286:	d106      	bne.n	8007296 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007288:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800728c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007290:	2b00      	cmp	r3, #0
 8007292:	f000 80d1 	beq.w	8007438 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007296:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800729a:	f003 0301 	and.w	r3, r3, #1
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d00b      	beq.n	80072ba <HAL_UART_IRQHandler+0xae>
 80072a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80072a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d005      	beq.n	80072ba <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072b2:	f043 0201 	orr.w	r2, r3, #1
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80072ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80072be:	f003 0304 	and.w	r3, r3, #4
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d00b      	beq.n	80072de <HAL_UART_IRQHandler+0xd2>
 80072c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80072ca:	f003 0301 	and.w	r3, r3, #1
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d005      	beq.n	80072de <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072d6:	f043 0202 	orr.w	r2, r3, #2
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80072de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80072e2:	f003 0302 	and.w	r3, r3, #2
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d00b      	beq.n	8007302 <HAL_UART_IRQHandler+0xf6>
 80072ea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80072ee:	f003 0301 	and.w	r3, r3, #1
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d005      	beq.n	8007302 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072fa:	f043 0204 	orr.w	r2, r3, #4
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8007302:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007306:	f003 0308 	and.w	r3, r3, #8
 800730a:	2b00      	cmp	r3, #0
 800730c:	d011      	beq.n	8007332 <HAL_UART_IRQHandler+0x126>
 800730e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007312:	f003 0320 	and.w	r3, r3, #32
 8007316:	2b00      	cmp	r3, #0
 8007318:	d105      	bne.n	8007326 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800731a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800731e:	f003 0301 	and.w	r3, r3, #1
 8007322:	2b00      	cmp	r3, #0
 8007324:	d005      	beq.n	8007332 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800732a:	f043 0208 	orr.w	r2, r3, #8
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007336:	2b00      	cmp	r3, #0
 8007338:	f000 81ed 	beq.w	8007716 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800733c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007340:	f003 0320 	and.w	r3, r3, #32
 8007344:	2b00      	cmp	r3, #0
 8007346:	d008      	beq.n	800735a <HAL_UART_IRQHandler+0x14e>
 8007348:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800734c:	f003 0320 	and.w	r3, r3, #32
 8007350:	2b00      	cmp	r3, #0
 8007352:	d002      	beq.n	800735a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007354:	6878      	ldr	r0, [r7, #4]
 8007356:	f000 fd0a 	bl	8007d6e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	695b      	ldr	r3, [r3, #20]
 8007360:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007364:	2b40      	cmp	r3, #64	; 0x40
 8007366:	bf0c      	ite	eq
 8007368:	2301      	moveq	r3, #1
 800736a:	2300      	movne	r3, #0
 800736c:	b2db      	uxtb	r3, r3
 800736e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007376:	f003 0308 	and.w	r3, r3, #8
 800737a:	2b00      	cmp	r3, #0
 800737c:	d103      	bne.n	8007386 <HAL_UART_IRQHandler+0x17a>
 800737e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007382:	2b00      	cmp	r3, #0
 8007384:	d04f      	beq.n	8007426 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007386:	6878      	ldr	r0, [r7, #4]
 8007388:	f000 fc12 	bl	8007bb0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	695b      	ldr	r3, [r3, #20]
 8007392:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007396:	2b40      	cmp	r3, #64	; 0x40
 8007398:	d141      	bne.n	800741e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	3314      	adds	r3, #20
 80073a0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073a4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80073a8:	e853 3f00 	ldrex	r3, [r3]
 80073ac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80073b0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80073b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80073b8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	3314      	adds	r3, #20
 80073c2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80073c6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80073ca:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073ce:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80073d2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80073d6:	e841 2300 	strex	r3, r2, [r1]
 80073da:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80073de:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d1d9      	bne.n	800739a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d013      	beq.n	8007416 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073f2:	4a7d      	ldr	r2, [pc, #500]	; (80075e8 <HAL_UART_IRQHandler+0x3dc>)
 80073f4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073fa:	4618      	mov	r0, r3
 80073fc:	f7fd fd60 	bl	8004ec0 <HAL_DMA_Abort_IT>
 8007400:	4603      	mov	r3, r0
 8007402:	2b00      	cmp	r3, #0
 8007404:	d016      	beq.n	8007434 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800740a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800740c:	687a      	ldr	r2, [r7, #4]
 800740e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007410:	4610      	mov	r0, r2
 8007412:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007414:	e00e      	b.n	8007434 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007416:	6878      	ldr	r0, [r7, #4]
 8007418:	f000 f99a 	bl	8007750 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800741c:	e00a      	b.n	8007434 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800741e:	6878      	ldr	r0, [r7, #4]
 8007420:	f000 f996 	bl	8007750 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007424:	e006      	b.n	8007434 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007426:	6878      	ldr	r0, [r7, #4]
 8007428:	f000 f992 	bl	8007750 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	2200      	movs	r2, #0
 8007430:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8007432:	e170      	b.n	8007716 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007434:	bf00      	nop
    return;
 8007436:	e16e      	b.n	8007716 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800743c:	2b01      	cmp	r3, #1
 800743e:	f040 814a 	bne.w	80076d6 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8007442:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007446:	f003 0310 	and.w	r3, r3, #16
 800744a:	2b00      	cmp	r3, #0
 800744c:	f000 8143 	beq.w	80076d6 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007450:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007454:	f003 0310 	and.w	r3, r3, #16
 8007458:	2b00      	cmp	r3, #0
 800745a:	f000 813c 	beq.w	80076d6 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800745e:	2300      	movs	r3, #0
 8007460:	60bb      	str	r3, [r7, #8]
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	60bb      	str	r3, [r7, #8]
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	685b      	ldr	r3, [r3, #4]
 8007470:	60bb      	str	r3, [r7, #8]
 8007472:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	695b      	ldr	r3, [r3, #20]
 800747a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800747e:	2b40      	cmp	r3, #64	; 0x40
 8007480:	f040 80b4 	bne.w	80075ec <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	685b      	ldr	r3, [r3, #4]
 800748c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007490:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007494:	2b00      	cmp	r3, #0
 8007496:	f000 8140 	beq.w	800771a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800749e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80074a2:	429a      	cmp	r2, r3
 80074a4:	f080 8139 	bcs.w	800771a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80074ae:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074b4:	69db      	ldr	r3, [r3, #28]
 80074b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80074ba:	f000 8088 	beq.w	80075ce <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	330c      	adds	r3, #12
 80074c4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074c8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80074cc:	e853 3f00 	ldrex	r3, [r3]
 80074d0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80074d4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80074d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80074dc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	330c      	adds	r3, #12
 80074e6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80074ea:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80074ee:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074f2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80074f6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80074fa:	e841 2300 	strex	r3, r2, [r1]
 80074fe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007502:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007506:	2b00      	cmp	r3, #0
 8007508:	d1d9      	bne.n	80074be <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	3314      	adds	r3, #20
 8007510:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007512:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007514:	e853 3f00 	ldrex	r3, [r3]
 8007518:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800751a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800751c:	f023 0301 	bic.w	r3, r3, #1
 8007520:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	3314      	adds	r3, #20
 800752a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800752e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007532:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007534:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007536:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800753a:	e841 2300 	strex	r3, r2, [r1]
 800753e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007540:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007542:	2b00      	cmp	r3, #0
 8007544:	d1e1      	bne.n	800750a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	3314      	adds	r3, #20
 800754c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800754e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007550:	e853 3f00 	ldrex	r3, [r3]
 8007554:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007556:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007558:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800755c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	3314      	adds	r3, #20
 8007566:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800756a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800756c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800756e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007570:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007572:	e841 2300 	strex	r3, r2, [r1]
 8007576:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007578:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800757a:	2b00      	cmp	r3, #0
 800757c:	d1e3      	bne.n	8007546 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	2220      	movs	r2, #32
 8007582:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	2200      	movs	r2, #0
 800758a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	330c      	adds	r3, #12
 8007592:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007594:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007596:	e853 3f00 	ldrex	r3, [r3]
 800759a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800759c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800759e:	f023 0310 	bic.w	r3, r3, #16
 80075a2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	330c      	adds	r3, #12
 80075ac:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80075b0:	65ba      	str	r2, [r7, #88]	; 0x58
 80075b2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075b4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80075b6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80075b8:	e841 2300 	strex	r3, r2, [r1]
 80075bc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80075be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d1e3      	bne.n	800758c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075c8:	4618      	mov	r0, r3
 80075ca:	f7fd fc09 	bl	8004de0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80075d6:	b29b      	uxth	r3, r3
 80075d8:	1ad3      	subs	r3, r2, r3
 80075da:	b29b      	uxth	r3, r3
 80075dc:	4619      	mov	r1, r3
 80075de:	6878      	ldr	r0, [r7, #4]
 80075e0:	f000 f8c0 	bl	8007764 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80075e4:	e099      	b.n	800771a <HAL_UART_IRQHandler+0x50e>
 80075e6:	bf00      	nop
 80075e8:	08007c77 	.word	0x08007c77
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80075f4:	b29b      	uxth	r3, r3
 80075f6:	1ad3      	subs	r3, r2, r3
 80075f8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007600:	b29b      	uxth	r3, r3
 8007602:	2b00      	cmp	r3, #0
 8007604:	f000 808b 	beq.w	800771e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8007608:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800760c:	2b00      	cmp	r3, #0
 800760e:	f000 8086 	beq.w	800771e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	330c      	adds	r3, #12
 8007618:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800761a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800761c:	e853 3f00 	ldrex	r3, [r3]
 8007620:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007622:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007624:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007628:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	330c      	adds	r3, #12
 8007632:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8007636:	647a      	str	r2, [r7, #68]	; 0x44
 8007638:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800763a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800763c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800763e:	e841 2300 	strex	r3, r2, [r1]
 8007642:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007644:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007646:	2b00      	cmp	r3, #0
 8007648:	d1e3      	bne.n	8007612 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	3314      	adds	r3, #20
 8007650:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007654:	e853 3f00 	ldrex	r3, [r3]
 8007658:	623b      	str	r3, [r7, #32]
   return(result);
 800765a:	6a3b      	ldr	r3, [r7, #32]
 800765c:	f023 0301 	bic.w	r3, r3, #1
 8007660:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	3314      	adds	r3, #20
 800766a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800766e:	633a      	str	r2, [r7, #48]	; 0x30
 8007670:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007672:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007674:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007676:	e841 2300 	strex	r3, r2, [r1]
 800767a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800767c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800767e:	2b00      	cmp	r3, #0
 8007680:	d1e3      	bne.n	800764a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	2220      	movs	r2, #32
 8007686:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	2200      	movs	r2, #0
 800768e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	330c      	adds	r3, #12
 8007696:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007698:	693b      	ldr	r3, [r7, #16]
 800769a:	e853 3f00 	ldrex	r3, [r3]
 800769e:	60fb      	str	r3, [r7, #12]
   return(result);
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	f023 0310 	bic.w	r3, r3, #16
 80076a6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	330c      	adds	r3, #12
 80076b0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80076b4:	61fa      	str	r2, [r7, #28]
 80076b6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076b8:	69b9      	ldr	r1, [r7, #24]
 80076ba:	69fa      	ldr	r2, [r7, #28]
 80076bc:	e841 2300 	strex	r3, r2, [r1]
 80076c0:	617b      	str	r3, [r7, #20]
   return(result);
 80076c2:	697b      	ldr	r3, [r7, #20]
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d1e3      	bne.n	8007690 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80076c8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80076cc:	4619      	mov	r1, r3
 80076ce:	6878      	ldr	r0, [r7, #4]
 80076d0:	f000 f848 	bl	8007764 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80076d4:	e023      	b.n	800771e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80076d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80076da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d009      	beq.n	80076f6 <HAL_UART_IRQHandler+0x4ea>
 80076e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80076e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d003      	beq.n	80076f6 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80076ee:	6878      	ldr	r0, [r7, #4]
 80076f0:	f000 fad5 	bl	8007c9e <UART_Transmit_IT>
    return;
 80076f4:	e014      	b.n	8007720 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80076f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80076fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d00e      	beq.n	8007720 <HAL_UART_IRQHandler+0x514>
 8007702:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007706:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800770a:	2b00      	cmp	r3, #0
 800770c:	d008      	beq.n	8007720 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800770e:	6878      	ldr	r0, [r7, #4]
 8007710:	f000 fb15 	bl	8007d3e <UART_EndTransmit_IT>
    return;
 8007714:	e004      	b.n	8007720 <HAL_UART_IRQHandler+0x514>
    return;
 8007716:	bf00      	nop
 8007718:	e002      	b.n	8007720 <HAL_UART_IRQHandler+0x514>
      return;
 800771a:	bf00      	nop
 800771c:	e000      	b.n	8007720 <HAL_UART_IRQHandler+0x514>
      return;
 800771e:	bf00      	nop
  }
}
 8007720:	37e8      	adds	r7, #232	; 0xe8
 8007722:	46bd      	mov	sp, r7
 8007724:	bd80      	pop	{r7, pc}
 8007726:	bf00      	nop

08007728 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007728:	b480      	push	{r7}
 800772a:	b083      	sub	sp, #12
 800772c:	af00      	add	r7, sp, #0
 800772e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8007730:	bf00      	nop
 8007732:	370c      	adds	r7, #12
 8007734:	46bd      	mov	sp, r7
 8007736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800773a:	4770      	bx	lr

0800773c <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800773c:	b480      	push	{r7}
 800773e:	b083      	sub	sp, #12
 8007740:	af00      	add	r7, sp, #0
 8007742:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8007744:	bf00      	nop
 8007746:	370c      	adds	r7, #12
 8007748:	46bd      	mov	sp, r7
 800774a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800774e:	4770      	bx	lr

08007750 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007750:	b480      	push	{r7}
 8007752:	b083      	sub	sp, #12
 8007754:	af00      	add	r7, sp, #0
 8007756:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007758:	bf00      	nop
 800775a:	370c      	adds	r7, #12
 800775c:	46bd      	mov	sp, r7
 800775e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007762:	4770      	bx	lr

08007764 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007764:	b480      	push	{r7}
 8007766:	b083      	sub	sp, #12
 8007768:	af00      	add	r7, sp, #0
 800776a:	6078      	str	r0, [r7, #4]
 800776c:	460b      	mov	r3, r1
 800776e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007770:	bf00      	nop
 8007772:	370c      	adds	r7, #12
 8007774:	46bd      	mov	sp, r7
 8007776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800777a:	4770      	bx	lr

0800777c <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800777c:	b580      	push	{r7, lr}
 800777e:	b090      	sub	sp, #64	; 0x40
 8007780:	af00      	add	r7, sp, #0
 8007782:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007788:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007794:	2b00      	cmp	r3, #0
 8007796:	d137      	bne.n	8007808 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8007798:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800779a:	2200      	movs	r2, #0
 800779c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800779e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	3314      	adds	r3, #20
 80077a4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077a8:	e853 3f00 	ldrex	r3, [r3]
 80077ac:	623b      	str	r3, [r7, #32]
   return(result);
 80077ae:	6a3b      	ldr	r3, [r7, #32]
 80077b0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80077b4:	63bb      	str	r3, [r7, #56]	; 0x38
 80077b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	3314      	adds	r3, #20
 80077bc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80077be:	633a      	str	r2, [r7, #48]	; 0x30
 80077c0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077c2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80077c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80077c6:	e841 2300 	strex	r3, r2, [r1]
 80077ca:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80077cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d1e5      	bne.n	800779e <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80077d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	330c      	adds	r3, #12
 80077d8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077da:	693b      	ldr	r3, [r7, #16]
 80077dc:	e853 3f00 	ldrex	r3, [r3]
 80077e0:	60fb      	str	r3, [r7, #12]
   return(result);
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80077e8:	637b      	str	r3, [r7, #52]	; 0x34
 80077ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	330c      	adds	r3, #12
 80077f0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80077f2:	61fa      	str	r2, [r7, #28]
 80077f4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077f6:	69b9      	ldr	r1, [r7, #24]
 80077f8:	69fa      	ldr	r2, [r7, #28]
 80077fa:	e841 2300 	strex	r3, r2, [r1]
 80077fe:	617b      	str	r3, [r7, #20]
   return(result);
 8007800:	697b      	ldr	r3, [r7, #20]
 8007802:	2b00      	cmp	r3, #0
 8007804:	d1e5      	bne.n	80077d2 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007806:	e002      	b.n	800780e <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8007808:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800780a:	f7fa fe7f 	bl	800250c <HAL_UART_TxCpltCallback>
}
 800780e:	bf00      	nop
 8007810:	3740      	adds	r7, #64	; 0x40
 8007812:	46bd      	mov	sp, r7
 8007814:	bd80      	pop	{r7, pc}

08007816 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007816:	b580      	push	{r7, lr}
 8007818:	b084      	sub	sp, #16
 800781a:	af00      	add	r7, sp, #0
 800781c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007822:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8007824:	68f8      	ldr	r0, [r7, #12]
 8007826:	f7ff ff7f 	bl	8007728 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800782a:	bf00      	nop
 800782c:	3710      	adds	r7, #16
 800782e:	46bd      	mov	sp, r7
 8007830:	bd80      	pop	{r7, pc}

08007832 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007832:	b580      	push	{r7, lr}
 8007834:	b09c      	sub	sp, #112	; 0x70
 8007836:	af00      	add	r7, sp, #0
 8007838:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800783e:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800784a:	2b00      	cmp	r3, #0
 800784c:	d172      	bne.n	8007934 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800784e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007850:	2200      	movs	r2, #0
 8007852:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007854:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	330c      	adds	r3, #12
 800785a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800785c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800785e:	e853 3f00 	ldrex	r3, [r3]
 8007862:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007864:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007866:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800786a:	66bb      	str	r3, [r7, #104]	; 0x68
 800786c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	330c      	adds	r3, #12
 8007872:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007874:	65ba      	str	r2, [r7, #88]	; 0x58
 8007876:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007878:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800787a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800787c:	e841 2300 	strex	r3, r2, [r1]
 8007880:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007882:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007884:	2b00      	cmp	r3, #0
 8007886:	d1e5      	bne.n	8007854 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007888:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	3314      	adds	r3, #20
 800788e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007890:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007892:	e853 3f00 	ldrex	r3, [r3]
 8007896:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007898:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800789a:	f023 0301 	bic.w	r3, r3, #1
 800789e:	667b      	str	r3, [r7, #100]	; 0x64
 80078a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	3314      	adds	r3, #20
 80078a6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80078a8:	647a      	str	r2, [r7, #68]	; 0x44
 80078aa:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078ac:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80078ae:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80078b0:	e841 2300 	strex	r3, r2, [r1]
 80078b4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80078b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d1e5      	bne.n	8007888 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80078bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	3314      	adds	r3, #20
 80078c2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078c6:	e853 3f00 	ldrex	r3, [r3]
 80078ca:	623b      	str	r3, [r7, #32]
   return(result);
 80078cc:	6a3b      	ldr	r3, [r7, #32]
 80078ce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80078d2:	663b      	str	r3, [r7, #96]	; 0x60
 80078d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	3314      	adds	r3, #20
 80078da:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80078dc:	633a      	str	r2, [r7, #48]	; 0x30
 80078de:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078e0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80078e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80078e4:	e841 2300 	strex	r3, r2, [r1]
 80078e8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80078ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d1e5      	bne.n	80078bc <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80078f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80078f2:	2220      	movs	r2, #32
 80078f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80078f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80078fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078fc:	2b01      	cmp	r3, #1
 80078fe:	d119      	bne.n	8007934 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007900:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	330c      	adds	r3, #12
 8007906:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007908:	693b      	ldr	r3, [r7, #16]
 800790a:	e853 3f00 	ldrex	r3, [r3]
 800790e:	60fb      	str	r3, [r7, #12]
   return(result);
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	f023 0310 	bic.w	r3, r3, #16
 8007916:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007918:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	330c      	adds	r3, #12
 800791e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007920:	61fa      	str	r2, [r7, #28]
 8007922:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007924:	69b9      	ldr	r1, [r7, #24]
 8007926:	69fa      	ldr	r2, [r7, #28]
 8007928:	e841 2300 	strex	r3, r2, [r1]
 800792c:	617b      	str	r3, [r7, #20]
   return(result);
 800792e:	697b      	ldr	r3, [r7, #20]
 8007930:	2b00      	cmp	r3, #0
 8007932:	d1e5      	bne.n	8007900 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007934:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007936:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007938:	2b01      	cmp	r3, #1
 800793a:	d106      	bne.n	800794a <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800793c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800793e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007940:	4619      	mov	r1, r3
 8007942:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8007944:	f7ff ff0e 	bl	8007764 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007948:	e002      	b.n	8007950 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 800794a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800794c:	f7fa fdf0 	bl	8002530 <HAL_UART_RxCpltCallback>
}
 8007950:	bf00      	nop
 8007952:	3770      	adds	r7, #112	; 0x70
 8007954:	46bd      	mov	sp, r7
 8007956:	bd80      	pop	{r7, pc}

08007958 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007958:	b580      	push	{r7, lr}
 800795a:	b084      	sub	sp, #16
 800795c:	af00      	add	r7, sp, #0
 800795e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007964:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800796a:	2b01      	cmp	r3, #1
 800796c:	d108      	bne.n	8007980 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007972:	085b      	lsrs	r3, r3, #1
 8007974:	b29b      	uxth	r3, r3
 8007976:	4619      	mov	r1, r3
 8007978:	68f8      	ldr	r0, [r7, #12]
 800797a:	f7ff fef3 	bl	8007764 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800797e:	e002      	b.n	8007986 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8007980:	68f8      	ldr	r0, [r7, #12]
 8007982:	f7ff fedb 	bl	800773c <HAL_UART_RxHalfCpltCallback>
}
 8007986:	bf00      	nop
 8007988:	3710      	adds	r7, #16
 800798a:	46bd      	mov	sp, r7
 800798c:	bd80      	pop	{r7, pc}

0800798e <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800798e:	b580      	push	{r7, lr}
 8007990:	b084      	sub	sp, #16
 8007992:	af00      	add	r7, sp, #0
 8007994:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8007996:	2300      	movs	r3, #0
 8007998:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800799e:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80079a0:	68bb      	ldr	r3, [r7, #8]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	695b      	ldr	r3, [r3, #20]
 80079a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80079aa:	2b80      	cmp	r3, #128	; 0x80
 80079ac:	bf0c      	ite	eq
 80079ae:	2301      	moveq	r3, #1
 80079b0:	2300      	movne	r3, #0
 80079b2:	b2db      	uxtb	r3, r3
 80079b4:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80079b6:	68bb      	ldr	r3, [r7, #8]
 80079b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80079bc:	b2db      	uxtb	r3, r3
 80079be:	2b21      	cmp	r3, #33	; 0x21
 80079c0:	d108      	bne.n	80079d4 <UART_DMAError+0x46>
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d005      	beq.n	80079d4 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80079c8:	68bb      	ldr	r3, [r7, #8]
 80079ca:	2200      	movs	r2, #0
 80079cc:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80079ce:	68b8      	ldr	r0, [r7, #8]
 80079d0:	f000 f8c6 	bl	8007b60 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80079d4:	68bb      	ldr	r3, [r7, #8]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	695b      	ldr	r3, [r3, #20]
 80079da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079de:	2b40      	cmp	r3, #64	; 0x40
 80079e0:	bf0c      	ite	eq
 80079e2:	2301      	moveq	r3, #1
 80079e4:	2300      	movne	r3, #0
 80079e6:	b2db      	uxtb	r3, r3
 80079e8:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80079ea:	68bb      	ldr	r3, [r7, #8]
 80079ec:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80079f0:	b2db      	uxtb	r3, r3
 80079f2:	2b22      	cmp	r3, #34	; 0x22
 80079f4:	d108      	bne.n	8007a08 <UART_DMAError+0x7a>
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d005      	beq.n	8007a08 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80079fc:	68bb      	ldr	r3, [r7, #8]
 80079fe:	2200      	movs	r2, #0
 8007a00:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8007a02:	68b8      	ldr	r0, [r7, #8]
 8007a04:	f000 f8d4 	bl	8007bb0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007a08:	68bb      	ldr	r3, [r7, #8]
 8007a0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a0c:	f043 0210 	orr.w	r2, r3, #16
 8007a10:	68bb      	ldr	r3, [r7, #8]
 8007a12:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007a14:	68b8      	ldr	r0, [r7, #8]
 8007a16:	f7ff fe9b 	bl	8007750 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007a1a:	bf00      	nop
 8007a1c:	3710      	adds	r7, #16
 8007a1e:	46bd      	mov	sp, r7
 8007a20:	bd80      	pop	{r7, pc}
	...

08007a24 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007a24:	b580      	push	{r7, lr}
 8007a26:	b098      	sub	sp, #96	; 0x60
 8007a28:	af00      	add	r7, sp, #0
 8007a2a:	60f8      	str	r0, [r7, #12]
 8007a2c:	60b9      	str	r1, [r7, #8]
 8007a2e:	4613      	mov	r3, r2
 8007a30:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8007a32:	68ba      	ldr	r2, [r7, #8]
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	88fa      	ldrh	r2, [r7, #6]
 8007a3c:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	2200      	movs	r2, #0
 8007a42:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	2222      	movs	r2, #34	; 0x22
 8007a48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a50:	4a40      	ldr	r2, [pc, #256]	; (8007b54 <UART_Start_Receive_DMA+0x130>)
 8007a52:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a58:	4a3f      	ldr	r2, [pc, #252]	; (8007b58 <UART_Start_Receive_DMA+0x134>)
 8007a5a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a60:	4a3e      	ldr	r2, [pc, #248]	; (8007b5c <UART_Start_Receive_DMA+0x138>)
 8007a62:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a68:	2200      	movs	r2, #0
 8007a6a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8007a6c:	f107 0308 	add.w	r3, r7, #8
 8007a70:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	3304      	adds	r3, #4
 8007a7c:	4619      	mov	r1, r3
 8007a7e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007a80:	681a      	ldr	r2, [r3, #0]
 8007a82:	88fb      	ldrh	r3, [r7, #6]
 8007a84:	f7fd f954 	bl	8004d30 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8007a88:	2300      	movs	r3, #0
 8007a8a:	613b      	str	r3, [r7, #16]
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	613b      	str	r3, [r7, #16]
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	685b      	ldr	r3, [r3, #4]
 8007a9a:	613b      	str	r3, [r7, #16]
 8007a9c:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	2200      	movs	r2, #0
 8007aa2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	691b      	ldr	r3, [r3, #16]
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d019      	beq.n	8007ae2 <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	330c      	adds	r3, #12
 8007ab4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ab6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007ab8:	e853 3f00 	ldrex	r3, [r3]
 8007abc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007abe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ac0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007ac4:	65bb      	str	r3, [r7, #88]	; 0x58
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	330c      	adds	r3, #12
 8007acc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007ace:	64fa      	str	r2, [r7, #76]	; 0x4c
 8007ad0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ad2:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8007ad4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007ad6:	e841 2300 	strex	r3, r2, [r1]
 8007ada:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8007adc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d1e5      	bne.n	8007aae <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	3314      	adds	r3, #20
 8007ae8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007aea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007aec:	e853 3f00 	ldrex	r3, [r3]
 8007af0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007af2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007af4:	f043 0301 	orr.w	r3, r3, #1
 8007af8:	657b      	str	r3, [r7, #84]	; 0x54
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	3314      	adds	r3, #20
 8007b00:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007b02:	63ba      	str	r2, [r7, #56]	; 0x38
 8007b04:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b06:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007b08:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007b0a:	e841 2300 	strex	r3, r2, [r1]
 8007b0e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007b10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d1e5      	bne.n	8007ae2 <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	3314      	adds	r3, #20
 8007b1c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b1e:	69bb      	ldr	r3, [r7, #24]
 8007b20:	e853 3f00 	ldrex	r3, [r3]
 8007b24:	617b      	str	r3, [r7, #20]
   return(result);
 8007b26:	697b      	ldr	r3, [r7, #20]
 8007b28:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007b2c:	653b      	str	r3, [r7, #80]	; 0x50
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	3314      	adds	r3, #20
 8007b34:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007b36:	627a      	str	r2, [r7, #36]	; 0x24
 8007b38:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b3a:	6a39      	ldr	r1, [r7, #32]
 8007b3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b3e:	e841 2300 	strex	r3, r2, [r1]
 8007b42:	61fb      	str	r3, [r7, #28]
   return(result);
 8007b44:	69fb      	ldr	r3, [r7, #28]
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d1e5      	bne.n	8007b16 <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 8007b4a:	2300      	movs	r3, #0
}
 8007b4c:	4618      	mov	r0, r3
 8007b4e:	3760      	adds	r7, #96	; 0x60
 8007b50:	46bd      	mov	sp, r7
 8007b52:	bd80      	pop	{r7, pc}
 8007b54:	08007833 	.word	0x08007833
 8007b58:	08007959 	.word	0x08007959
 8007b5c:	0800798f 	.word	0x0800798f

08007b60 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007b60:	b480      	push	{r7}
 8007b62:	b089      	sub	sp, #36	; 0x24
 8007b64:	af00      	add	r7, sp, #0
 8007b66:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	330c      	adds	r3, #12
 8007b6e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	e853 3f00 	ldrex	r3, [r3]
 8007b76:	60bb      	str	r3, [r7, #8]
   return(result);
 8007b78:	68bb      	ldr	r3, [r7, #8]
 8007b7a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8007b7e:	61fb      	str	r3, [r7, #28]
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	330c      	adds	r3, #12
 8007b86:	69fa      	ldr	r2, [r7, #28]
 8007b88:	61ba      	str	r2, [r7, #24]
 8007b8a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b8c:	6979      	ldr	r1, [r7, #20]
 8007b8e:	69ba      	ldr	r2, [r7, #24]
 8007b90:	e841 2300 	strex	r3, r2, [r1]
 8007b94:	613b      	str	r3, [r7, #16]
   return(result);
 8007b96:	693b      	ldr	r3, [r7, #16]
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d1e5      	bne.n	8007b68 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	2220      	movs	r2, #32
 8007ba0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8007ba4:	bf00      	nop
 8007ba6:	3724      	adds	r7, #36	; 0x24
 8007ba8:	46bd      	mov	sp, r7
 8007baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bae:	4770      	bx	lr

08007bb0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007bb0:	b480      	push	{r7}
 8007bb2:	b095      	sub	sp, #84	; 0x54
 8007bb4:	af00      	add	r7, sp, #0
 8007bb6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	330c      	adds	r3, #12
 8007bbe:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007bc2:	e853 3f00 	ldrex	r3, [r3]
 8007bc6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007bc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bca:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007bce:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	330c      	adds	r3, #12
 8007bd6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007bd8:	643a      	str	r2, [r7, #64]	; 0x40
 8007bda:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bdc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007bde:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007be0:	e841 2300 	strex	r3, r2, [r1]
 8007be4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007be6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d1e5      	bne.n	8007bb8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	3314      	adds	r3, #20
 8007bf2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bf4:	6a3b      	ldr	r3, [r7, #32]
 8007bf6:	e853 3f00 	ldrex	r3, [r3]
 8007bfa:	61fb      	str	r3, [r7, #28]
   return(result);
 8007bfc:	69fb      	ldr	r3, [r7, #28]
 8007bfe:	f023 0301 	bic.w	r3, r3, #1
 8007c02:	64bb      	str	r3, [r7, #72]	; 0x48
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	3314      	adds	r3, #20
 8007c0a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007c0c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007c0e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c10:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007c12:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007c14:	e841 2300 	strex	r3, r2, [r1]
 8007c18:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d1e5      	bne.n	8007bec <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c24:	2b01      	cmp	r3, #1
 8007c26:	d119      	bne.n	8007c5c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	330c      	adds	r3, #12
 8007c2e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	e853 3f00 	ldrex	r3, [r3]
 8007c36:	60bb      	str	r3, [r7, #8]
   return(result);
 8007c38:	68bb      	ldr	r3, [r7, #8]
 8007c3a:	f023 0310 	bic.w	r3, r3, #16
 8007c3e:	647b      	str	r3, [r7, #68]	; 0x44
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	330c      	adds	r3, #12
 8007c46:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007c48:	61ba      	str	r2, [r7, #24]
 8007c4a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c4c:	6979      	ldr	r1, [r7, #20]
 8007c4e:	69ba      	ldr	r2, [r7, #24]
 8007c50:	e841 2300 	strex	r3, r2, [r1]
 8007c54:	613b      	str	r3, [r7, #16]
   return(result);
 8007c56:	693b      	ldr	r3, [r7, #16]
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d1e5      	bne.n	8007c28 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	2220      	movs	r2, #32
 8007c60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	2200      	movs	r2, #0
 8007c68:	631a      	str	r2, [r3, #48]	; 0x30
}
 8007c6a:	bf00      	nop
 8007c6c:	3754      	adds	r7, #84	; 0x54
 8007c6e:	46bd      	mov	sp, r7
 8007c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c74:	4770      	bx	lr

08007c76 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007c76:	b580      	push	{r7, lr}
 8007c78:	b084      	sub	sp, #16
 8007c7a:	af00      	add	r7, sp, #0
 8007c7c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c82:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	2200      	movs	r2, #0
 8007c88:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	2200      	movs	r2, #0
 8007c8e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007c90:	68f8      	ldr	r0, [r7, #12]
 8007c92:	f7ff fd5d 	bl	8007750 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007c96:	bf00      	nop
 8007c98:	3710      	adds	r7, #16
 8007c9a:	46bd      	mov	sp, r7
 8007c9c:	bd80      	pop	{r7, pc}

08007c9e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007c9e:	b480      	push	{r7}
 8007ca0:	b085      	sub	sp, #20
 8007ca2:	af00      	add	r7, sp, #0
 8007ca4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007cac:	b2db      	uxtb	r3, r3
 8007cae:	2b21      	cmp	r3, #33	; 0x21
 8007cb0:	d13e      	bne.n	8007d30 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	689b      	ldr	r3, [r3, #8]
 8007cb6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007cba:	d114      	bne.n	8007ce6 <UART_Transmit_IT+0x48>
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	691b      	ldr	r3, [r3, #16]
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d110      	bne.n	8007ce6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	6a1b      	ldr	r3, [r3, #32]
 8007cc8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	881b      	ldrh	r3, [r3, #0]
 8007cce:	461a      	mov	r2, r3
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007cd8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	6a1b      	ldr	r3, [r3, #32]
 8007cde:	1c9a      	adds	r2, r3, #2
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	621a      	str	r2, [r3, #32]
 8007ce4:	e008      	b.n	8007cf8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	6a1b      	ldr	r3, [r3, #32]
 8007cea:	1c59      	adds	r1, r3, #1
 8007cec:	687a      	ldr	r2, [r7, #4]
 8007cee:	6211      	str	r1, [r2, #32]
 8007cf0:	781a      	ldrb	r2, [r3, #0]
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007cfc:	b29b      	uxth	r3, r3
 8007cfe:	3b01      	subs	r3, #1
 8007d00:	b29b      	uxth	r3, r3
 8007d02:	687a      	ldr	r2, [r7, #4]
 8007d04:	4619      	mov	r1, r3
 8007d06:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d10f      	bne.n	8007d2c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	68da      	ldr	r2, [r3, #12]
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007d1a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	68da      	ldr	r2, [r3, #12]
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007d2a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007d2c:	2300      	movs	r3, #0
 8007d2e:	e000      	b.n	8007d32 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007d30:	2302      	movs	r3, #2
  }
}
 8007d32:	4618      	mov	r0, r3
 8007d34:	3714      	adds	r7, #20
 8007d36:	46bd      	mov	sp, r7
 8007d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d3c:	4770      	bx	lr

08007d3e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007d3e:	b580      	push	{r7, lr}
 8007d40:	b082      	sub	sp, #8
 8007d42:	af00      	add	r7, sp, #0
 8007d44:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	68da      	ldr	r2, [r3, #12]
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007d54:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	2220      	movs	r2, #32
 8007d5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007d5e:	6878      	ldr	r0, [r7, #4]
 8007d60:	f7fa fbd4 	bl	800250c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007d64:	2300      	movs	r3, #0
}
 8007d66:	4618      	mov	r0, r3
 8007d68:	3708      	adds	r7, #8
 8007d6a:	46bd      	mov	sp, r7
 8007d6c:	bd80      	pop	{r7, pc}

08007d6e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007d6e:	b580      	push	{r7, lr}
 8007d70:	b08c      	sub	sp, #48	; 0x30
 8007d72:	af00      	add	r7, sp, #0
 8007d74:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007d7c:	b2db      	uxtb	r3, r3
 8007d7e:	2b22      	cmp	r3, #34	; 0x22
 8007d80:	f040 80ab 	bne.w	8007eda <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	689b      	ldr	r3, [r3, #8]
 8007d88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d8c:	d117      	bne.n	8007dbe <UART_Receive_IT+0x50>
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	691b      	ldr	r3, [r3, #16]
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d113      	bne.n	8007dbe <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007d96:	2300      	movs	r3, #0
 8007d98:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d9e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	685b      	ldr	r3, [r3, #4]
 8007da6:	b29b      	uxth	r3, r3
 8007da8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007dac:	b29a      	uxth	r2, r3
 8007dae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007db0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007db6:	1c9a      	adds	r2, r3, #2
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	629a      	str	r2, [r3, #40]	; 0x28
 8007dbc:	e026      	b.n	8007e0c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007dc2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8007dc4:	2300      	movs	r3, #0
 8007dc6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	689b      	ldr	r3, [r3, #8]
 8007dcc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007dd0:	d007      	beq.n	8007de2 <UART_Receive_IT+0x74>
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	689b      	ldr	r3, [r3, #8]
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d10a      	bne.n	8007df0 <UART_Receive_IT+0x82>
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	691b      	ldr	r3, [r3, #16]
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d106      	bne.n	8007df0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	685b      	ldr	r3, [r3, #4]
 8007de8:	b2da      	uxtb	r2, r3
 8007dea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007dec:	701a      	strb	r2, [r3, #0]
 8007dee:	e008      	b.n	8007e02 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	685b      	ldr	r3, [r3, #4]
 8007df6:	b2db      	uxtb	r3, r3
 8007df8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007dfc:	b2da      	uxtb	r2, r3
 8007dfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e00:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e06:	1c5a      	adds	r2, r3, #1
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007e10:	b29b      	uxth	r3, r3
 8007e12:	3b01      	subs	r3, #1
 8007e14:	b29b      	uxth	r3, r3
 8007e16:	687a      	ldr	r2, [r7, #4]
 8007e18:	4619      	mov	r1, r3
 8007e1a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d15a      	bne.n	8007ed6 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	68da      	ldr	r2, [r3, #12]
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	f022 0220 	bic.w	r2, r2, #32
 8007e2e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	68da      	ldr	r2, [r3, #12]
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007e3e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	695a      	ldr	r2, [r3, #20]
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	f022 0201 	bic.w	r2, r2, #1
 8007e4e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	2220      	movs	r2, #32
 8007e54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e5c:	2b01      	cmp	r3, #1
 8007e5e:	d135      	bne.n	8007ecc <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	2200      	movs	r2, #0
 8007e64:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	330c      	adds	r3, #12
 8007e6c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e6e:	697b      	ldr	r3, [r7, #20]
 8007e70:	e853 3f00 	ldrex	r3, [r3]
 8007e74:	613b      	str	r3, [r7, #16]
   return(result);
 8007e76:	693b      	ldr	r3, [r7, #16]
 8007e78:	f023 0310 	bic.w	r3, r3, #16
 8007e7c:	627b      	str	r3, [r7, #36]	; 0x24
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	330c      	adds	r3, #12
 8007e84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007e86:	623a      	str	r2, [r7, #32]
 8007e88:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e8a:	69f9      	ldr	r1, [r7, #28]
 8007e8c:	6a3a      	ldr	r2, [r7, #32]
 8007e8e:	e841 2300 	strex	r3, r2, [r1]
 8007e92:	61bb      	str	r3, [r7, #24]
   return(result);
 8007e94:	69bb      	ldr	r3, [r7, #24]
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d1e5      	bne.n	8007e66 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	f003 0310 	and.w	r3, r3, #16
 8007ea4:	2b10      	cmp	r3, #16
 8007ea6:	d10a      	bne.n	8007ebe <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007ea8:	2300      	movs	r3, #0
 8007eaa:	60fb      	str	r3, [r7, #12]
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	60fb      	str	r3, [r7, #12]
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	685b      	ldr	r3, [r3, #4]
 8007eba:	60fb      	str	r3, [r7, #12]
 8007ebc:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007ec2:	4619      	mov	r1, r3
 8007ec4:	6878      	ldr	r0, [r7, #4]
 8007ec6:	f7ff fc4d 	bl	8007764 <HAL_UARTEx_RxEventCallback>
 8007eca:	e002      	b.n	8007ed2 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007ecc:	6878      	ldr	r0, [r7, #4]
 8007ece:	f7fa fb2f 	bl	8002530 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007ed2:	2300      	movs	r3, #0
 8007ed4:	e002      	b.n	8007edc <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8007ed6:	2300      	movs	r3, #0
 8007ed8:	e000      	b.n	8007edc <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8007eda:	2302      	movs	r3, #2
  }
}
 8007edc:	4618      	mov	r0, r3
 8007ede:	3730      	adds	r7, #48	; 0x30
 8007ee0:	46bd      	mov	sp, r7
 8007ee2:	bd80      	pop	{r7, pc}

08007ee4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007ee4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007ee8:	b0c0      	sub	sp, #256	; 0x100
 8007eea:	af00      	add	r7, sp, #0
 8007eec:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007ef0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	691b      	ldr	r3, [r3, #16]
 8007ef8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007efc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f00:	68d9      	ldr	r1, [r3, #12]
 8007f02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f06:	681a      	ldr	r2, [r3, #0]
 8007f08:	ea40 0301 	orr.w	r3, r0, r1
 8007f0c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007f0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f12:	689a      	ldr	r2, [r3, #8]
 8007f14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f18:	691b      	ldr	r3, [r3, #16]
 8007f1a:	431a      	orrs	r2, r3
 8007f1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f20:	695b      	ldr	r3, [r3, #20]
 8007f22:	431a      	orrs	r2, r3
 8007f24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f28:	69db      	ldr	r3, [r3, #28]
 8007f2a:	4313      	orrs	r3, r2
 8007f2c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007f30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	68db      	ldr	r3, [r3, #12]
 8007f38:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007f3c:	f021 010c 	bic.w	r1, r1, #12
 8007f40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f44:	681a      	ldr	r2, [r3, #0]
 8007f46:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007f4a:	430b      	orrs	r3, r1
 8007f4c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007f4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	695b      	ldr	r3, [r3, #20]
 8007f56:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007f5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f5e:	6999      	ldr	r1, [r3, #24]
 8007f60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f64:	681a      	ldr	r2, [r3, #0]
 8007f66:	ea40 0301 	orr.w	r3, r0, r1
 8007f6a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007f6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f70:	681a      	ldr	r2, [r3, #0]
 8007f72:	4b8f      	ldr	r3, [pc, #572]	; (80081b0 <UART_SetConfig+0x2cc>)
 8007f74:	429a      	cmp	r2, r3
 8007f76:	d005      	beq.n	8007f84 <UART_SetConfig+0xa0>
 8007f78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f7c:	681a      	ldr	r2, [r3, #0]
 8007f7e:	4b8d      	ldr	r3, [pc, #564]	; (80081b4 <UART_SetConfig+0x2d0>)
 8007f80:	429a      	cmp	r2, r3
 8007f82:	d104      	bne.n	8007f8e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007f84:	f7fe f83c 	bl	8006000 <HAL_RCC_GetPCLK2Freq>
 8007f88:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8007f8c:	e003      	b.n	8007f96 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007f8e:	f7fe f823 	bl	8005fd8 <HAL_RCC_GetPCLK1Freq>
 8007f92:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007f96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f9a:	69db      	ldr	r3, [r3, #28]
 8007f9c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007fa0:	f040 810c 	bne.w	80081bc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007fa4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007fa8:	2200      	movs	r2, #0
 8007faa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007fae:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8007fb2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8007fb6:	4622      	mov	r2, r4
 8007fb8:	462b      	mov	r3, r5
 8007fba:	1891      	adds	r1, r2, r2
 8007fbc:	65b9      	str	r1, [r7, #88]	; 0x58
 8007fbe:	415b      	adcs	r3, r3
 8007fc0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007fc2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007fc6:	4621      	mov	r1, r4
 8007fc8:	eb12 0801 	adds.w	r8, r2, r1
 8007fcc:	4629      	mov	r1, r5
 8007fce:	eb43 0901 	adc.w	r9, r3, r1
 8007fd2:	f04f 0200 	mov.w	r2, #0
 8007fd6:	f04f 0300 	mov.w	r3, #0
 8007fda:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007fde:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007fe2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007fe6:	4690      	mov	r8, r2
 8007fe8:	4699      	mov	r9, r3
 8007fea:	4623      	mov	r3, r4
 8007fec:	eb18 0303 	adds.w	r3, r8, r3
 8007ff0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007ff4:	462b      	mov	r3, r5
 8007ff6:	eb49 0303 	adc.w	r3, r9, r3
 8007ffa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007ffe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008002:	685b      	ldr	r3, [r3, #4]
 8008004:	2200      	movs	r2, #0
 8008006:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800800a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800800e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8008012:	460b      	mov	r3, r1
 8008014:	18db      	adds	r3, r3, r3
 8008016:	653b      	str	r3, [r7, #80]	; 0x50
 8008018:	4613      	mov	r3, r2
 800801a:	eb42 0303 	adc.w	r3, r2, r3
 800801e:	657b      	str	r3, [r7, #84]	; 0x54
 8008020:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8008024:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8008028:	f7f8 fc68 	bl	80008fc <__aeabi_uldivmod>
 800802c:	4602      	mov	r2, r0
 800802e:	460b      	mov	r3, r1
 8008030:	4b61      	ldr	r3, [pc, #388]	; (80081b8 <UART_SetConfig+0x2d4>)
 8008032:	fba3 2302 	umull	r2, r3, r3, r2
 8008036:	095b      	lsrs	r3, r3, #5
 8008038:	011c      	lsls	r4, r3, #4
 800803a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800803e:	2200      	movs	r2, #0
 8008040:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008044:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8008048:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800804c:	4642      	mov	r2, r8
 800804e:	464b      	mov	r3, r9
 8008050:	1891      	adds	r1, r2, r2
 8008052:	64b9      	str	r1, [r7, #72]	; 0x48
 8008054:	415b      	adcs	r3, r3
 8008056:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008058:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800805c:	4641      	mov	r1, r8
 800805e:	eb12 0a01 	adds.w	sl, r2, r1
 8008062:	4649      	mov	r1, r9
 8008064:	eb43 0b01 	adc.w	fp, r3, r1
 8008068:	f04f 0200 	mov.w	r2, #0
 800806c:	f04f 0300 	mov.w	r3, #0
 8008070:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008074:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008078:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800807c:	4692      	mov	sl, r2
 800807e:	469b      	mov	fp, r3
 8008080:	4643      	mov	r3, r8
 8008082:	eb1a 0303 	adds.w	r3, sl, r3
 8008086:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800808a:	464b      	mov	r3, r9
 800808c:	eb4b 0303 	adc.w	r3, fp, r3
 8008090:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008094:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008098:	685b      	ldr	r3, [r3, #4]
 800809a:	2200      	movs	r2, #0
 800809c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80080a0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80080a4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80080a8:	460b      	mov	r3, r1
 80080aa:	18db      	adds	r3, r3, r3
 80080ac:	643b      	str	r3, [r7, #64]	; 0x40
 80080ae:	4613      	mov	r3, r2
 80080b0:	eb42 0303 	adc.w	r3, r2, r3
 80080b4:	647b      	str	r3, [r7, #68]	; 0x44
 80080b6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80080ba:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80080be:	f7f8 fc1d 	bl	80008fc <__aeabi_uldivmod>
 80080c2:	4602      	mov	r2, r0
 80080c4:	460b      	mov	r3, r1
 80080c6:	4611      	mov	r1, r2
 80080c8:	4b3b      	ldr	r3, [pc, #236]	; (80081b8 <UART_SetConfig+0x2d4>)
 80080ca:	fba3 2301 	umull	r2, r3, r3, r1
 80080ce:	095b      	lsrs	r3, r3, #5
 80080d0:	2264      	movs	r2, #100	; 0x64
 80080d2:	fb02 f303 	mul.w	r3, r2, r3
 80080d6:	1acb      	subs	r3, r1, r3
 80080d8:	00db      	lsls	r3, r3, #3
 80080da:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80080de:	4b36      	ldr	r3, [pc, #216]	; (80081b8 <UART_SetConfig+0x2d4>)
 80080e0:	fba3 2302 	umull	r2, r3, r3, r2
 80080e4:	095b      	lsrs	r3, r3, #5
 80080e6:	005b      	lsls	r3, r3, #1
 80080e8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80080ec:	441c      	add	r4, r3
 80080ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80080f2:	2200      	movs	r2, #0
 80080f4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80080f8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80080fc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8008100:	4642      	mov	r2, r8
 8008102:	464b      	mov	r3, r9
 8008104:	1891      	adds	r1, r2, r2
 8008106:	63b9      	str	r1, [r7, #56]	; 0x38
 8008108:	415b      	adcs	r3, r3
 800810a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800810c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008110:	4641      	mov	r1, r8
 8008112:	1851      	adds	r1, r2, r1
 8008114:	6339      	str	r1, [r7, #48]	; 0x30
 8008116:	4649      	mov	r1, r9
 8008118:	414b      	adcs	r3, r1
 800811a:	637b      	str	r3, [r7, #52]	; 0x34
 800811c:	f04f 0200 	mov.w	r2, #0
 8008120:	f04f 0300 	mov.w	r3, #0
 8008124:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8008128:	4659      	mov	r1, fp
 800812a:	00cb      	lsls	r3, r1, #3
 800812c:	4651      	mov	r1, sl
 800812e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008132:	4651      	mov	r1, sl
 8008134:	00ca      	lsls	r2, r1, #3
 8008136:	4610      	mov	r0, r2
 8008138:	4619      	mov	r1, r3
 800813a:	4603      	mov	r3, r0
 800813c:	4642      	mov	r2, r8
 800813e:	189b      	adds	r3, r3, r2
 8008140:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008144:	464b      	mov	r3, r9
 8008146:	460a      	mov	r2, r1
 8008148:	eb42 0303 	adc.w	r3, r2, r3
 800814c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008150:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008154:	685b      	ldr	r3, [r3, #4]
 8008156:	2200      	movs	r2, #0
 8008158:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800815c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8008160:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8008164:	460b      	mov	r3, r1
 8008166:	18db      	adds	r3, r3, r3
 8008168:	62bb      	str	r3, [r7, #40]	; 0x28
 800816a:	4613      	mov	r3, r2
 800816c:	eb42 0303 	adc.w	r3, r2, r3
 8008170:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008172:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008176:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800817a:	f7f8 fbbf 	bl	80008fc <__aeabi_uldivmod>
 800817e:	4602      	mov	r2, r0
 8008180:	460b      	mov	r3, r1
 8008182:	4b0d      	ldr	r3, [pc, #52]	; (80081b8 <UART_SetConfig+0x2d4>)
 8008184:	fba3 1302 	umull	r1, r3, r3, r2
 8008188:	095b      	lsrs	r3, r3, #5
 800818a:	2164      	movs	r1, #100	; 0x64
 800818c:	fb01 f303 	mul.w	r3, r1, r3
 8008190:	1ad3      	subs	r3, r2, r3
 8008192:	00db      	lsls	r3, r3, #3
 8008194:	3332      	adds	r3, #50	; 0x32
 8008196:	4a08      	ldr	r2, [pc, #32]	; (80081b8 <UART_SetConfig+0x2d4>)
 8008198:	fba2 2303 	umull	r2, r3, r2, r3
 800819c:	095b      	lsrs	r3, r3, #5
 800819e:	f003 0207 	and.w	r2, r3, #7
 80081a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	4422      	add	r2, r4
 80081aa:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80081ac:	e105      	b.n	80083ba <UART_SetConfig+0x4d6>
 80081ae:	bf00      	nop
 80081b0:	40011000 	.word	0x40011000
 80081b4:	40011400 	.word	0x40011400
 80081b8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80081bc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80081c0:	2200      	movs	r2, #0
 80081c2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80081c6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80081ca:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80081ce:	4642      	mov	r2, r8
 80081d0:	464b      	mov	r3, r9
 80081d2:	1891      	adds	r1, r2, r2
 80081d4:	6239      	str	r1, [r7, #32]
 80081d6:	415b      	adcs	r3, r3
 80081d8:	627b      	str	r3, [r7, #36]	; 0x24
 80081da:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80081de:	4641      	mov	r1, r8
 80081e0:	1854      	adds	r4, r2, r1
 80081e2:	4649      	mov	r1, r9
 80081e4:	eb43 0501 	adc.w	r5, r3, r1
 80081e8:	f04f 0200 	mov.w	r2, #0
 80081ec:	f04f 0300 	mov.w	r3, #0
 80081f0:	00eb      	lsls	r3, r5, #3
 80081f2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80081f6:	00e2      	lsls	r2, r4, #3
 80081f8:	4614      	mov	r4, r2
 80081fa:	461d      	mov	r5, r3
 80081fc:	4643      	mov	r3, r8
 80081fe:	18e3      	adds	r3, r4, r3
 8008200:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008204:	464b      	mov	r3, r9
 8008206:	eb45 0303 	adc.w	r3, r5, r3
 800820a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800820e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008212:	685b      	ldr	r3, [r3, #4]
 8008214:	2200      	movs	r2, #0
 8008216:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800821a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800821e:	f04f 0200 	mov.w	r2, #0
 8008222:	f04f 0300 	mov.w	r3, #0
 8008226:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800822a:	4629      	mov	r1, r5
 800822c:	008b      	lsls	r3, r1, #2
 800822e:	4621      	mov	r1, r4
 8008230:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008234:	4621      	mov	r1, r4
 8008236:	008a      	lsls	r2, r1, #2
 8008238:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800823c:	f7f8 fb5e 	bl	80008fc <__aeabi_uldivmod>
 8008240:	4602      	mov	r2, r0
 8008242:	460b      	mov	r3, r1
 8008244:	4b60      	ldr	r3, [pc, #384]	; (80083c8 <UART_SetConfig+0x4e4>)
 8008246:	fba3 2302 	umull	r2, r3, r3, r2
 800824a:	095b      	lsrs	r3, r3, #5
 800824c:	011c      	lsls	r4, r3, #4
 800824e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008252:	2200      	movs	r2, #0
 8008254:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008258:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800825c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8008260:	4642      	mov	r2, r8
 8008262:	464b      	mov	r3, r9
 8008264:	1891      	adds	r1, r2, r2
 8008266:	61b9      	str	r1, [r7, #24]
 8008268:	415b      	adcs	r3, r3
 800826a:	61fb      	str	r3, [r7, #28]
 800826c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008270:	4641      	mov	r1, r8
 8008272:	1851      	adds	r1, r2, r1
 8008274:	6139      	str	r1, [r7, #16]
 8008276:	4649      	mov	r1, r9
 8008278:	414b      	adcs	r3, r1
 800827a:	617b      	str	r3, [r7, #20]
 800827c:	f04f 0200 	mov.w	r2, #0
 8008280:	f04f 0300 	mov.w	r3, #0
 8008284:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008288:	4659      	mov	r1, fp
 800828a:	00cb      	lsls	r3, r1, #3
 800828c:	4651      	mov	r1, sl
 800828e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008292:	4651      	mov	r1, sl
 8008294:	00ca      	lsls	r2, r1, #3
 8008296:	4610      	mov	r0, r2
 8008298:	4619      	mov	r1, r3
 800829a:	4603      	mov	r3, r0
 800829c:	4642      	mov	r2, r8
 800829e:	189b      	adds	r3, r3, r2
 80082a0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80082a4:	464b      	mov	r3, r9
 80082a6:	460a      	mov	r2, r1
 80082a8:	eb42 0303 	adc.w	r3, r2, r3
 80082ac:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80082b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80082b4:	685b      	ldr	r3, [r3, #4]
 80082b6:	2200      	movs	r2, #0
 80082b8:	67bb      	str	r3, [r7, #120]	; 0x78
 80082ba:	67fa      	str	r2, [r7, #124]	; 0x7c
 80082bc:	f04f 0200 	mov.w	r2, #0
 80082c0:	f04f 0300 	mov.w	r3, #0
 80082c4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80082c8:	4649      	mov	r1, r9
 80082ca:	008b      	lsls	r3, r1, #2
 80082cc:	4641      	mov	r1, r8
 80082ce:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80082d2:	4641      	mov	r1, r8
 80082d4:	008a      	lsls	r2, r1, #2
 80082d6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80082da:	f7f8 fb0f 	bl	80008fc <__aeabi_uldivmod>
 80082de:	4602      	mov	r2, r0
 80082e0:	460b      	mov	r3, r1
 80082e2:	4b39      	ldr	r3, [pc, #228]	; (80083c8 <UART_SetConfig+0x4e4>)
 80082e4:	fba3 1302 	umull	r1, r3, r3, r2
 80082e8:	095b      	lsrs	r3, r3, #5
 80082ea:	2164      	movs	r1, #100	; 0x64
 80082ec:	fb01 f303 	mul.w	r3, r1, r3
 80082f0:	1ad3      	subs	r3, r2, r3
 80082f2:	011b      	lsls	r3, r3, #4
 80082f4:	3332      	adds	r3, #50	; 0x32
 80082f6:	4a34      	ldr	r2, [pc, #208]	; (80083c8 <UART_SetConfig+0x4e4>)
 80082f8:	fba2 2303 	umull	r2, r3, r2, r3
 80082fc:	095b      	lsrs	r3, r3, #5
 80082fe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008302:	441c      	add	r4, r3
 8008304:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008308:	2200      	movs	r2, #0
 800830a:	673b      	str	r3, [r7, #112]	; 0x70
 800830c:	677a      	str	r2, [r7, #116]	; 0x74
 800830e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8008312:	4642      	mov	r2, r8
 8008314:	464b      	mov	r3, r9
 8008316:	1891      	adds	r1, r2, r2
 8008318:	60b9      	str	r1, [r7, #8]
 800831a:	415b      	adcs	r3, r3
 800831c:	60fb      	str	r3, [r7, #12]
 800831e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008322:	4641      	mov	r1, r8
 8008324:	1851      	adds	r1, r2, r1
 8008326:	6039      	str	r1, [r7, #0]
 8008328:	4649      	mov	r1, r9
 800832a:	414b      	adcs	r3, r1
 800832c:	607b      	str	r3, [r7, #4]
 800832e:	f04f 0200 	mov.w	r2, #0
 8008332:	f04f 0300 	mov.w	r3, #0
 8008336:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800833a:	4659      	mov	r1, fp
 800833c:	00cb      	lsls	r3, r1, #3
 800833e:	4651      	mov	r1, sl
 8008340:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008344:	4651      	mov	r1, sl
 8008346:	00ca      	lsls	r2, r1, #3
 8008348:	4610      	mov	r0, r2
 800834a:	4619      	mov	r1, r3
 800834c:	4603      	mov	r3, r0
 800834e:	4642      	mov	r2, r8
 8008350:	189b      	adds	r3, r3, r2
 8008352:	66bb      	str	r3, [r7, #104]	; 0x68
 8008354:	464b      	mov	r3, r9
 8008356:	460a      	mov	r2, r1
 8008358:	eb42 0303 	adc.w	r3, r2, r3
 800835c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800835e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008362:	685b      	ldr	r3, [r3, #4]
 8008364:	2200      	movs	r2, #0
 8008366:	663b      	str	r3, [r7, #96]	; 0x60
 8008368:	667a      	str	r2, [r7, #100]	; 0x64
 800836a:	f04f 0200 	mov.w	r2, #0
 800836e:	f04f 0300 	mov.w	r3, #0
 8008372:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8008376:	4649      	mov	r1, r9
 8008378:	008b      	lsls	r3, r1, #2
 800837a:	4641      	mov	r1, r8
 800837c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008380:	4641      	mov	r1, r8
 8008382:	008a      	lsls	r2, r1, #2
 8008384:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8008388:	f7f8 fab8 	bl	80008fc <__aeabi_uldivmod>
 800838c:	4602      	mov	r2, r0
 800838e:	460b      	mov	r3, r1
 8008390:	4b0d      	ldr	r3, [pc, #52]	; (80083c8 <UART_SetConfig+0x4e4>)
 8008392:	fba3 1302 	umull	r1, r3, r3, r2
 8008396:	095b      	lsrs	r3, r3, #5
 8008398:	2164      	movs	r1, #100	; 0x64
 800839a:	fb01 f303 	mul.w	r3, r1, r3
 800839e:	1ad3      	subs	r3, r2, r3
 80083a0:	011b      	lsls	r3, r3, #4
 80083a2:	3332      	adds	r3, #50	; 0x32
 80083a4:	4a08      	ldr	r2, [pc, #32]	; (80083c8 <UART_SetConfig+0x4e4>)
 80083a6:	fba2 2303 	umull	r2, r3, r2, r3
 80083aa:	095b      	lsrs	r3, r3, #5
 80083ac:	f003 020f 	and.w	r2, r3, #15
 80083b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	4422      	add	r2, r4
 80083b8:	609a      	str	r2, [r3, #8]
}
 80083ba:	bf00      	nop
 80083bc:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80083c0:	46bd      	mov	sp, r7
 80083c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80083c6:	bf00      	nop
 80083c8:	51eb851f 	.word	0x51eb851f

080083cc <__NVIC_SetPriority>:
{
 80083cc:	b480      	push	{r7}
 80083ce:	b083      	sub	sp, #12
 80083d0:	af00      	add	r7, sp, #0
 80083d2:	4603      	mov	r3, r0
 80083d4:	6039      	str	r1, [r7, #0]
 80083d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80083d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80083dc:	2b00      	cmp	r3, #0
 80083de:	db0a      	blt.n	80083f6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80083e0:	683b      	ldr	r3, [r7, #0]
 80083e2:	b2da      	uxtb	r2, r3
 80083e4:	490c      	ldr	r1, [pc, #48]	; (8008418 <__NVIC_SetPriority+0x4c>)
 80083e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80083ea:	0112      	lsls	r2, r2, #4
 80083ec:	b2d2      	uxtb	r2, r2
 80083ee:	440b      	add	r3, r1
 80083f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80083f4:	e00a      	b.n	800840c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80083f6:	683b      	ldr	r3, [r7, #0]
 80083f8:	b2da      	uxtb	r2, r3
 80083fa:	4908      	ldr	r1, [pc, #32]	; (800841c <__NVIC_SetPriority+0x50>)
 80083fc:	79fb      	ldrb	r3, [r7, #7]
 80083fe:	f003 030f 	and.w	r3, r3, #15
 8008402:	3b04      	subs	r3, #4
 8008404:	0112      	lsls	r2, r2, #4
 8008406:	b2d2      	uxtb	r2, r2
 8008408:	440b      	add	r3, r1
 800840a:	761a      	strb	r2, [r3, #24]
}
 800840c:	bf00      	nop
 800840e:	370c      	adds	r7, #12
 8008410:	46bd      	mov	sp, r7
 8008412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008416:	4770      	bx	lr
 8008418:	e000e100 	.word	0xe000e100
 800841c:	e000ed00 	.word	0xe000ed00

08008420 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8008420:	b580      	push	{r7, lr}
 8008422:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8008424:	4b05      	ldr	r3, [pc, #20]	; (800843c <SysTick_Handler+0x1c>)
 8008426:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8008428:	f001 fd28 	bl	8009e7c <xTaskGetSchedulerState>
 800842c:	4603      	mov	r3, r0
 800842e:	2b01      	cmp	r3, #1
 8008430:	d001      	beq.n	8008436 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8008432:	f002 fb11 	bl	800aa58 <xPortSysTickHandler>
  }
}
 8008436:	bf00      	nop
 8008438:	bd80      	pop	{r7, pc}
 800843a:	bf00      	nop
 800843c:	e000e010 	.word	0xe000e010

08008440 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8008440:	b580      	push	{r7, lr}
 8008442:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8008444:	2100      	movs	r1, #0
 8008446:	f06f 0004 	mvn.w	r0, #4
 800844a:	f7ff ffbf 	bl	80083cc <__NVIC_SetPriority>
#endif
}
 800844e:	bf00      	nop
 8008450:	bd80      	pop	{r7, pc}
	...

08008454 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8008454:	b480      	push	{r7}
 8008456:	b083      	sub	sp, #12
 8008458:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800845a:	f3ef 8305 	mrs	r3, IPSR
 800845e:	603b      	str	r3, [r7, #0]
  return(result);
 8008460:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008462:	2b00      	cmp	r3, #0
 8008464:	d003      	beq.n	800846e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8008466:	f06f 0305 	mvn.w	r3, #5
 800846a:	607b      	str	r3, [r7, #4]
 800846c:	e00c      	b.n	8008488 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800846e:	4b0a      	ldr	r3, [pc, #40]	; (8008498 <osKernelInitialize+0x44>)
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	2b00      	cmp	r3, #0
 8008474:	d105      	bne.n	8008482 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8008476:	4b08      	ldr	r3, [pc, #32]	; (8008498 <osKernelInitialize+0x44>)
 8008478:	2201      	movs	r2, #1
 800847a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800847c:	2300      	movs	r3, #0
 800847e:	607b      	str	r3, [r7, #4]
 8008480:	e002      	b.n	8008488 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8008482:	f04f 33ff 	mov.w	r3, #4294967295
 8008486:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008488:	687b      	ldr	r3, [r7, #4]
}
 800848a:	4618      	mov	r0, r3
 800848c:	370c      	adds	r7, #12
 800848e:	46bd      	mov	sp, r7
 8008490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008494:	4770      	bx	lr
 8008496:	bf00      	nop
 8008498:	20000d00 	.word	0x20000d00

0800849c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800849c:	b580      	push	{r7, lr}
 800849e:	b082      	sub	sp, #8
 80084a0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80084a2:	f3ef 8305 	mrs	r3, IPSR
 80084a6:	603b      	str	r3, [r7, #0]
  return(result);
 80084a8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d003      	beq.n	80084b6 <osKernelStart+0x1a>
    stat = osErrorISR;
 80084ae:	f06f 0305 	mvn.w	r3, #5
 80084b2:	607b      	str	r3, [r7, #4]
 80084b4:	e010      	b.n	80084d8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80084b6:	4b0b      	ldr	r3, [pc, #44]	; (80084e4 <osKernelStart+0x48>)
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	2b01      	cmp	r3, #1
 80084bc:	d109      	bne.n	80084d2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80084be:	f7ff ffbf 	bl	8008440 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80084c2:	4b08      	ldr	r3, [pc, #32]	; (80084e4 <osKernelStart+0x48>)
 80084c4:	2202      	movs	r2, #2
 80084c6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80084c8:	f001 f87c 	bl	80095c4 <vTaskStartScheduler>
      stat = osOK;
 80084cc:	2300      	movs	r3, #0
 80084ce:	607b      	str	r3, [r7, #4]
 80084d0:	e002      	b.n	80084d8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80084d2:	f04f 33ff 	mov.w	r3, #4294967295
 80084d6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80084d8:	687b      	ldr	r3, [r7, #4]
}
 80084da:	4618      	mov	r0, r3
 80084dc:	3708      	adds	r7, #8
 80084de:	46bd      	mov	sp, r7
 80084e0:	bd80      	pop	{r7, pc}
 80084e2:	bf00      	nop
 80084e4:	20000d00 	.word	0x20000d00

080084e8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80084e8:	b580      	push	{r7, lr}
 80084ea:	b08e      	sub	sp, #56	; 0x38
 80084ec:	af04      	add	r7, sp, #16
 80084ee:	60f8      	str	r0, [r7, #12]
 80084f0:	60b9      	str	r1, [r7, #8]
 80084f2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80084f4:	2300      	movs	r3, #0
 80084f6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80084f8:	f3ef 8305 	mrs	r3, IPSR
 80084fc:	617b      	str	r3, [r7, #20]
  return(result);
 80084fe:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8008500:	2b00      	cmp	r3, #0
 8008502:	d17e      	bne.n	8008602 <osThreadNew+0x11a>
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	2b00      	cmp	r3, #0
 8008508:	d07b      	beq.n	8008602 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800850a:	2380      	movs	r3, #128	; 0x80
 800850c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800850e:	2318      	movs	r3, #24
 8008510:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8008512:	2300      	movs	r3, #0
 8008514:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8008516:	f04f 33ff 	mov.w	r3, #4294967295
 800851a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	2b00      	cmp	r3, #0
 8008520:	d045      	beq.n	80085ae <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	2b00      	cmp	r3, #0
 8008528:	d002      	beq.n	8008530 <osThreadNew+0x48>
        name = attr->name;
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	699b      	ldr	r3, [r3, #24]
 8008534:	2b00      	cmp	r3, #0
 8008536:	d002      	beq.n	800853e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	699b      	ldr	r3, [r3, #24]
 800853c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800853e:	69fb      	ldr	r3, [r7, #28]
 8008540:	2b00      	cmp	r3, #0
 8008542:	d008      	beq.n	8008556 <osThreadNew+0x6e>
 8008544:	69fb      	ldr	r3, [r7, #28]
 8008546:	2b38      	cmp	r3, #56	; 0x38
 8008548:	d805      	bhi.n	8008556 <osThreadNew+0x6e>
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	685b      	ldr	r3, [r3, #4]
 800854e:	f003 0301 	and.w	r3, r3, #1
 8008552:	2b00      	cmp	r3, #0
 8008554:	d001      	beq.n	800855a <osThreadNew+0x72>
        return (NULL);
 8008556:	2300      	movs	r3, #0
 8008558:	e054      	b.n	8008604 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	695b      	ldr	r3, [r3, #20]
 800855e:	2b00      	cmp	r3, #0
 8008560:	d003      	beq.n	800856a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	695b      	ldr	r3, [r3, #20]
 8008566:	089b      	lsrs	r3, r3, #2
 8008568:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	689b      	ldr	r3, [r3, #8]
 800856e:	2b00      	cmp	r3, #0
 8008570:	d00e      	beq.n	8008590 <osThreadNew+0xa8>
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	68db      	ldr	r3, [r3, #12]
 8008576:	2bbb      	cmp	r3, #187	; 0xbb
 8008578:	d90a      	bls.n	8008590 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800857e:	2b00      	cmp	r3, #0
 8008580:	d006      	beq.n	8008590 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	695b      	ldr	r3, [r3, #20]
 8008586:	2b00      	cmp	r3, #0
 8008588:	d002      	beq.n	8008590 <osThreadNew+0xa8>
        mem = 1;
 800858a:	2301      	movs	r3, #1
 800858c:	61bb      	str	r3, [r7, #24]
 800858e:	e010      	b.n	80085b2 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	689b      	ldr	r3, [r3, #8]
 8008594:	2b00      	cmp	r3, #0
 8008596:	d10c      	bne.n	80085b2 <osThreadNew+0xca>
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	68db      	ldr	r3, [r3, #12]
 800859c:	2b00      	cmp	r3, #0
 800859e:	d108      	bne.n	80085b2 <osThreadNew+0xca>
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	691b      	ldr	r3, [r3, #16]
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d104      	bne.n	80085b2 <osThreadNew+0xca>
          mem = 0;
 80085a8:	2300      	movs	r3, #0
 80085aa:	61bb      	str	r3, [r7, #24]
 80085ac:	e001      	b.n	80085b2 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80085ae:	2300      	movs	r3, #0
 80085b0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80085b2:	69bb      	ldr	r3, [r7, #24]
 80085b4:	2b01      	cmp	r3, #1
 80085b6:	d110      	bne.n	80085da <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80085bc:	687a      	ldr	r2, [r7, #4]
 80085be:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80085c0:	9202      	str	r2, [sp, #8]
 80085c2:	9301      	str	r3, [sp, #4]
 80085c4:	69fb      	ldr	r3, [r7, #28]
 80085c6:	9300      	str	r3, [sp, #0]
 80085c8:	68bb      	ldr	r3, [r7, #8]
 80085ca:	6a3a      	ldr	r2, [r7, #32]
 80085cc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80085ce:	68f8      	ldr	r0, [r7, #12]
 80085d0:	f000 fe0c 	bl	80091ec <xTaskCreateStatic>
 80085d4:	4603      	mov	r3, r0
 80085d6:	613b      	str	r3, [r7, #16]
 80085d8:	e013      	b.n	8008602 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80085da:	69bb      	ldr	r3, [r7, #24]
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d110      	bne.n	8008602 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80085e0:	6a3b      	ldr	r3, [r7, #32]
 80085e2:	b29a      	uxth	r2, r3
 80085e4:	f107 0310 	add.w	r3, r7, #16
 80085e8:	9301      	str	r3, [sp, #4]
 80085ea:	69fb      	ldr	r3, [r7, #28]
 80085ec:	9300      	str	r3, [sp, #0]
 80085ee:	68bb      	ldr	r3, [r7, #8]
 80085f0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80085f2:	68f8      	ldr	r0, [r7, #12]
 80085f4:	f000 fe57 	bl	80092a6 <xTaskCreate>
 80085f8:	4603      	mov	r3, r0
 80085fa:	2b01      	cmp	r3, #1
 80085fc:	d001      	beq.n	8008602 <osThreadNew+0x11a>
            hTask = NULL;
 80085fe:	2300      	movs	r3, #0
 8008600:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8008602:	693b      	ldr	r3, [r7, #16]
}
 8008604:	4618      	mov	r0, r3
 8008606:	3728      	adds	r7, #40	; 0x28
 8008608:	46bd      	mov	sp, r7
 800860a:	bd80      	pop	{r7, pc}

0800860c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800860c:	b580      	push	{r7, lr}
 800860e:	b084      	sub	sp, #16
 8008610:	af00      	add	r7, sp, #0
 8008612:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008614:	f3ef 8305 	mrs	r3, IPSR
 8008618:	60bb      	str	r3, [r7, #8]
  return(result);
 800861a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800861c:	2b00      	cmp	r3, #0
 800861e:	d003      	beq.n	8008628 <osDelay+0x1c>
    stat = osErrorISR;
 8008620:	f06f 0305 	mvn.w	r3, #5
 8008624:	60fb      	str	r3, [r7, #12]
 8008626:	e007      	b.n	8008638 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8008628:	2300      	movs	r3, #0
 800862a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	2b00      	cmp	r3, #0
 8008630:	d002      	beq.n	8008638 <osDelay+0x2c>
      vTaskDelay(ticks);
 8008632:	6878      	ldr	r0, [r7, #4]
 8008634:	f000 ff92 	bl	800955c <vTaskDelay>
    }
  }

  return (stat);
 8008638:	68fb      	ldr	r3, [r7, #12]
}
 800863a:	4618      	mov	r0, r3
 800863c:	3710      	adds	r7, #16
 800863e:	46bd      	mov	sp, r7
 8008640:	bd80      	pop	{r7, pc}
	...

08008644 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8008644:	b480      	push	{r7}
 8008646:	b085      	sub	sp, #20
 8008648:	af00      	add	r7, sp, #0
 800864a:	60f8      	str	r0, [r7, #12]
 800864c:	60b9      	str	r1, [r7, #8]
 800864e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	4a07      	ldr	r2, [pc, #28]	; (8008670 <vApplicationGetIdleTaskMemory+0x2c>)
 8008654:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8008656:	68bb      	ldr	r3, [r7, #8]
 8008658:	4a06      	ldr	r2, [pc, #24]	; (8008674 <vApplicationGetIdleTaskMemory+0x30>)
 800865a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	2280      	movs	r2, #128	; 0x80
 8008660:	601a      	str	r2, [r3, #0]
}
 8008662:	bf00      	nop
 8008664:	3714      	adds	r7, #20
 8008666:	46bd      	mov	sp, r7
 8008668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800866c:	4770      	bx	lr
 800866e:	bf00      	nop
 8008670:	20000d04 	.word	0x20000d04
 8008674:	20000dc0 	.word	0x20000dc0

08008678 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8008678:	b480      	push	{r7}
 800867a:	b085      	sub	sp, #20
 800867c:	af00      	add	r7, sp, #0
 800867e:	60f8      	str	r0, [r7, #12]
 8008680:	60b9      	str	r1, [r7, #8]
 8008682:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	4a07      	ldr	r2, [pc, #28]	; (80086a4 <vApplicationGetTimerTaskMemory+0x2c>)
 8008688:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800868a:	68bb      	ldr	r3, [r7, #8]
 800868c:	4a06      	ldr	r2, [pc, #24]	; (80086a8 <vApplicationGetTimerTaskMemory+0x30>)
 800868e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008696:	601a      	str	r2, [r3, #0]
}
 8008698:	bf00      	nop
 800869a:	3714      	adds	r7, #20
 800869c:	46bd      	mov	sp, r7
 800869e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086a2:	4770      	bx	lr
 80086a4:	20000fc0 	.word	0x20000fc0
 80086a8:	2000107c 	.word	0x2000107c

080086ac <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80086ac:	b480      	push	{r7}
 80086ae:	b083      	sub	sp, #12
 80086b0:	af00      	add	r7, sp, #0
 80086b2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	f103 0208 	add.w	r2, r3, #8
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	f04f 32ff 	mov.w	r2, #4294967295
 80086c4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	f103 0208 	add.w	r2, r3, #8
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	f103 0208 	add.w	r2, r3, #8
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	2200      	movs	r2, #0
 80086de:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80086e0:	bf00      	nop
 80086e2:	370c      	adds	r7, #12
 80086e4:	46bd      	mov	sp, r7
 80086e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ea:	4770      	bx	lr

080086ec <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80086ec:	b480      	push	{r7}
 80086ee:	b083      	sub	sp, #12
 80086f0:	af00      	add	r7, sp, #0
 80086f2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	2200      	movs	r2, #0
 80086f8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80086fa:	bf00      	nop
 80086fc:	370c      	adds	r7, #12
 80086fe:	46bd      	mov	sp, r7
 8008700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008704:	4770      	bx	lr

08008706 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008706:	b480      	push	{r7}
 8008708:	b085      	sub	sp, #20
 800870a:	af00      	add	r7, sp, #0
 800870c:	6078      	str	r0, [r7, #4]
 800870e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	685b      	ldr	r3, [r3, #4]
 8008714:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008716:	683b      	ldr	r3, [r7, #0]
 8008718:	68fa      	ldr	r2, [r7, #12]
 800871a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	689a      	ldr	r2, [r3, #8]
 8008720:	683b      	ldr	r3, [r7, #0]
 8008722:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	689b      	ldr	r3, [r3, #8]
 8008728:	683a      	ldr	r2, [r7, #0]
 800872a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	683a      	ldr	r2, [r7, #0]
 8008730:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008732:	683b      	ldr	r3, [r7, #0]
 8008734:	687a      	ldr	r2, [r7, #4]
 8008736:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	1c5a      	adds	r2, r3, #1
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	601a      	str	r2, [r3, #0]
}
 8008742:	bf00      	nop
 8008744:	3714      	adds	r7, #20
 8008746:	46bd      	mov	sp, r7
 8008748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800874c:	4770      	bx	lr

0800874e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800874e:	b480      	push	{r7}
 8008750:	b085      	sub	sp, #20
 8008752:	af00      	add	r7, sp, #0
 8008754:	6078      	str	r0, [r7, #4]
 8008756:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008758:	683b      	ldr	r3, [r7, #0]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800875e:	68bb      	ldr	r3, [r7, #8]
 8008760:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008764:	d103      	bne.n	800876e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	691b      	ldr	r3, [r3, #16]
 800876a:	60fb      	str	r3, [r7, #12]
 800876c:	e00c      	b.n	8008788 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	3308      	adds	r3, #8
 8008772:	60fb      	str	r3, [r7, #12]
 8008774:	e002      	b.n	800877c <vListInsert+0x2e>
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	685b      	ldr	r3, [r3, #4]
 800877a:	60fb      	str	r3, [r7, #12]
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	685b      	ldr	r3, [r3, #4]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	68ba      	ldr	r2, [r7, #8]
 8008784:	429a      	cmp	r2, r3
 8008786:	d2f6      	bcs.n	8008776 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	685a      	ldr	r2, [r3, #4]
 800878c:	683b      	ldr	r3, [r7, #0]
 800878e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008790:	683b      	ldr	r3, [r7, #0]
 8008792:	685b      	ldr	r3, [r3, #4]
 8008794:	683a      	ldr	r2, [r7, #0]
 8008796:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008798:	683b      	ldr	r3, [r7, #0]
 800879a:	68fa      	ldr	r2, [r7, #12]
 800879c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	683a      	ldr	r2, [r7, #0]
 80087a2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80087a4:	683b      	ldr	r3, [r7, #0]
 80087a6:	687a      	ldr	r2, [r7, #4]
 80087a8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	1c5a      	adds	r2, r3, #1
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	601a      	str	r2, [r3, #0]
}
 80087b4:	bf00      	nop
 80087b6:	3714      	adds	r7, #20
 80087b8:	46bd      	mov	sp, r7
 80087ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087be:	4770      	bx	lr

080087c0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80087c0:	b480      	push	{r7}
 80087c2:	b085      	sub	sp, #20
 80087c4:	af00      	add	r7, sp, #0
 80087c6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	691b      	ldr	r3, [r3, #16]
 80087cc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	685b      	ldr	r3, [r3, #4]
 80087d2:	687a      	ldr	r2, [r7, #4]
 80087d4:	6892      	ldr	r2, [r2, #8]
 80087d6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	689b      	ldr	r3, [r3, #8]
 80087dc:	687a      	ldr	r2, [r7, #4]
 80087de:	6852      	ldr	r2, [r2, #4]
 80087e0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	685b      	ldr	r3, [r3, #4]
 80087e6:	687a      	ldr	r2, [r7, #4]
 80087e8:	429a      	cmp	r2, r3
 80087ea:	d103      	bne.n	80087f4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	689a      	ldr	r2, [r3, #8]
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	2200      	movs	r2, #0
 80087f8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	1e5a      	subs	r2, r3, #1
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	681b      	ldr	r3, [r3, #0]
}
 8008808:	4618      	mov	r0, r3
 800880a:	3714      	adds	r7, #20
 800880c:	46bd      	mov	sp, r7
 800880e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008812:	4770      	bx	lr

08008814 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008814:	b580      	push	{r7, lr}
 8008816:	b084      	sub	sp, #16
 8008818:	af00      	add	r7, sp, #0
 800881a:	6078      	str	r0, [r7, #4]
 800881c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	2b00      	cmp	r3, #0
 8008826:	d10a      	bne.n	800883e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008828:	f04f 0350 	mov.w	r3, #80	; 0x50
 800882c:	f383 8811 	msr	BASEPRI, r3
 8008830:	f3bf 8f6f 	isb	sy
 8008834:	f3bf 8f4f 	dsb	sy
 8008838:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800883a:	bf00      	nop
 800883c:	e7fe      	b.n	800883c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800883e:	f002 f879 	bl	800a934 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	681a      	ldr	r2, [r3, #0]
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800884a:	68f9      	ldr	r1, [r7, #12]
 800884c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800884e:	fb01 f303 	mul.w	r3, r1, r3
 8008852:	441a      	add	r2, r3
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	2200      	movs	r2, #0
 800885c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	681a      	ldr	r2, [r3, #0]
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	681a      	ldr	r2, [r3, #0]
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800886e:	3b01      	subs	r3, #1
 8008870:	68f9      	ldr	r1, [r7, #12]
 8008872:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008874:	fb01 f303 	mul.w	r3, r1, r3
 8008878:	441a      	add	r2, r3
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	22ff      	movs	r2, #255	; 0xff
 8008882:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	22ff      	movs	r2, #255	; 0xff
 800888a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800888e:	683b      	ldr	r3, [r7, #0]
 8008890:	2b00      	cmp	r3, #0
 8008892:	d114      	bne.n	80088be <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	691b      	ldr	r3, [r3, #16]
 8008898:	2b00      	cmp	r3, #0
 800889a:	d01a      	beq.n	80088d2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	3310      	adds	r3, #16
 80088a0:	4618      	mov	r0, r3
 80088a2:	f001 f929 	bl	8009af8 <xTaskRemoveFromEventList>
 80088a6:	4603      	mov	r3, r0
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d012      	beq.n	80088d2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80088ac:	4b0c      	ldr	r3, [pc, #48]	; (80088e0 <xQueueGenericReset+0xcc>)
 80088ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80088b2:	601a      	str	r2, [r3, #0]
 80088b4:	f3bf 8f4f 	dsb	sy
 80088b8:	f3bf 8f6f 	isb	sy
 80088bc:	e009      	b.n	80088d2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	3310      	adds	r3, #16
 80088c2:	4618      	mov	r0, r3
 80088c4:	f7ff fef2 	bl	80086ac <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	3324      	adds	r3, #36	; 0x24
 80088cc:	4618      	mov	r0, r3
 80088ce:	f7ff feed 	bl	80086ac <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80088d2:	f002 f85f 	bl	800a994 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80088d6:	2301      	movs	r3, #1
}
 80088d8:	4618      	mov	r0, r3
 80088da:	3710      	adds	r7, #16
 80088dc:	46bd      	mov	sp, r7
 80088de:	bd80      	pop	{r7, pc}
 80088e0:	e000ed04 	.word	0xe000ed04

080088e4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80088e4:	b580      	push	{r7, lr}
 80088e6:	b08e      	sub	sp, #56	; 0x38
 80088e8:	af02      	add	r7, sp, #8
 80088ea:	60f8      	str	r0, [r7, #12]
 80088ec:	60b9      	str	r1, [r7, #8]
 80088ee:	607a      	str	r2, [r7, #4]
 80088f0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d10a      	bne.n	800890e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80088f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088fc:	f383 8811 	msr	BASEPRI, r3
 8008900:	f3bf 8f6f 	isb	sy
 8008904:	f3bf 8f4f 	dsb	sy
 8008908:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800890a:	bf00      	nop
 800890c:	e7fe      	b.n	800890c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800890e:	683b      	ldr	r3, [r7, #0]
 8008910:	2b00      	cmp	r3, #0
 8008912:	d10a      	bne.n	800892a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8008914:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008918:	f383 8811 	msr	BASEPRI, r3
 800891c:	f3bf 8f6f 	isb	sy
 8008920:	f3bf 8f4f 	dsb	sy
 8008924:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008926:	bf00      	nop
 8008928:	e7fe      	b.n	8008928 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	2b00      	cmp	r3, #0
 800892e:	d002      	beq.n	8008936 <xQueueGenericCreateStatic+0x52>
 8008930:	68bb      	ldr	r3, [r7, #8]
 8008932:	2b00      	cmp	r3, #0
 8008934:	d001      	beq.n	800893a <xQueueGenericCreateStatic+0x56>
 8008936:	2301      	movs	r3, #1
 8008938:	e000      	b.n	800893c <xQueueGenericCreateStatic+0x58>
 800893a:	2300      	movs	r3, #0
 800893c:	2b00      	cmp	r3, #0
 800893e:	d10a      	bne.n	8008956 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8008940:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008944:	f383 8811 	msr	BASEPRI, r3
 8008948:	f3bf 8f6f 	isb	sy
 800894c:	f3bf 8f4f 	dsb	sy
 8008950:	623b      	str	r3, [r7, #32]
}
 8008952:	bf00      	nop
 8008954:	e7fe      	b.n	8008954 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	2b00      	cmp	r3, #0
 800895a:	d102      	bne.n	8008962 <xQueueGenericCreateStatic+0x7e>
 800895c:	68bb      	ldr	r3, [r7, #8]
 800895e:	2b00      	cmp	r3, #0
 8008960:	d101      	bne.n	8008966 <xQueueGenericCreateStatic+0x82>
 8008962:	2301      	movs	r3, #1
 8008964:	e000      	b.n	8008968 <xQueueGenericCreateStatic+0x84>
 8008966:	2300      	movs	r3, #0
 8008968:	2b00      	cmp	r3, #0
 800896a:	d10a      	bne.n	8008982 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800896c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008970:	f383 8811 	msr	BASEPRI, r3
 8008974:	f3bf 8f6f 	isb	sy
 8008978:	f3bf 8f4f 	dsb	sy
 800897c:	61fb      	str	r3, [r7, #28]
}
 800897e:	bf00      	nop
 8008980:	e7fe      	b.n	8008980 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008982:	2350      	movs	r3, #80	; 0x50
 8008984:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8008986:	697b      	ldr	r3, [r7, #20]
 8008988:	2b50      	cmp	r3, #80	; 0x50
 800898a:	d00a      	beq.n	80089a2 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800898c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008990:	f383 8811 	msr	BASEPRI, r3
 8008994:	f3bf 8f6f 	isb	sy
 8008998:	f3bf 8f4f 	dsb	sy
 800899c:	61bb      	str	r3, [r7, #24]
}
 800899e:	bf00      	nop
 80089a0:	e7fe      	b.n	80089a0 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80089a2:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80089a4:	683b      	ldr	r3, [r7, #0]
 80089a6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80089a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d00d      	beq.n	80089ca <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80089ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089b0:	2201      	movs	r2, #1
 80089b2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80089b6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80089ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089bc:	9300      	str	r3, [sp, #0]
 80089be:	4613      	mov	r3, r2
 80089c0:	687a      	ldr	r2, [r7, #4]
 80089c2:	68b9      	ldr	r1, [r7, #8]
 80089c4:	68f8      	ldr	r0, [r7, #12]
 80089c6:	f000 f805 	bl	80089d4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80089ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80089cc:	4618      	mov	r0, r3
 80089ce:	3730      	adds	r7, #48	; 0x30
 80089d0:	46bd      	mov	sp, r7
 80089d2:	bd80      	pop	{r7, pc}

080089d4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80089d4:	b580      	push	{r7, lr}
 80089d6:	b084      	sub	sp, #16
 80089d8:	af00      	add	r7, sp, #0
 80089da:	60f8      	str	r0, [r7, #12]
 80089dc:	60b9      	str	r1, [r7, #8]
 80089de:	607a      	str	r2, [r7, #4]
 80089e0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80089e2:	68bb      	ldr	r3, [r7, #8]
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d103      	bne.n	80089f0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80089e8:	69bb      	ldr	r3, [r7, #24]
 80089ea:	69ba      	ldr	r2, [r7, #24]
 80089ec:	601a      	str	r2, [r3, #0]
 80089ee:	e002      	b.n	80089f6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80089f0:	69bb      	ldr	r3, [r7, #24]
 80089f2:	687a      	ldr	r2, [r7, #4]
 80089f4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80089f6:	69bb      	ldr	r3, [r7, #24]
 80089f8:	68fa      	ldr	r2, [r7, #12]
 80089fa:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80089fc:	69bb      	ldr	r3, [r7, #24]
 80089fe:	68ba      	ldr	r2, [r7, #8]
 8008a00:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008a02:	2101      	movs	r1, #1
 8008a04:	69b8      	ldr	r0, [r7, #24]
 8008a06:	f7ff ff05 	bl	8008814 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8008a0a:	69bb      	ldr	r3, [r7, #24]
 8008a0c:	78fa      	ldrb	r2, [r7, #3]
 8008a0e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8008a12:	bf00      	nop
 8008a14:	3710      	adds	r7, #16
 8008a16:	46bd      	mov	sp, r7
 8008a18:	bd80      	pop	{r7, pc}
	...

08008a1c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008a1c:	b580      	push	{r7, lr}
 8008a1e:	b08e      	sub	sp, #56	; 0x38
 8008a20:	af00      	add	r7, sp, #0
 8008a22:	60f8      	str	r0, [r7, #12]
 8008a24:	60b9      	str	r1, [r7, #8]
 8008a26:	607a      	str	r2, [r7, #4]
 8008a28:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008a2a:	2300      	movs	r3, #0
 8008a2c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008a32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d10a      	bne.n	8008a4e <xQueueGenericSend+0x32>
	__asm volatile
 8008a38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a3c:	f383 8811 	msr	BASEPRI, r3
 8008a40:	f3bf 8f6f 	isb	sy
 8008a44:	f3bf 8f4f 	dsb	sy
 8008a48:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008a4a:	bf00      	nop
 8008a4c:	e7fe      	b.n	8008a4c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008a4e:	68bb      	ldr	r3, [r7, #8]
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d103      	bne.n	8008a5c <xQueueGenericSend+0x40>
 8008a54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d101      	bne.n	8008a60 <xQueueGenericSend+0x44>
 8008a5c:	2301      	movs	r3, #1
 8008a5e:	e000      	b.n	8008a62 <xQueueGenericSend+0x46>
 8008a60:	2300      	movs	r3, #0
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d10a      	bne.n	8008a7c <xQueueGenericSend+0x60>
	__asm volatile
 8008a66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a6a:	f383 8811 	msr	BASEPRI, r3
 8008a6e:	f3bf 8f6f 	isb	sy
 8008a72:	f3bf 8f4f 	dsb	sy
 8008a76:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008a78:	bf00      	nop
 8008a7a:	e7fe      	b.n	8008a7a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008a7c:	683b      	ldr	r3, [r7, #0]
 8008a7e:	2b02      	cmp	r3, #2
 8008a80:	d103      	bne.n	8008a8a <xQueueGenericSend+0x6e>
 8008a82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a86:	2b01      	cmp	r3, #1
 8008a88:	d101      	bne.n	8008a8e <xQueueGenericSend+0x72>
 8008a8a:	2301      	movs	r3, #1
 8008a8c:	e000      	b.n	8008a90 <xQueueGenericSend+0x74>
 8008a8e:	2300      	movs	r3, #0
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d10a      	bne.n	8008aaa <xQueueGenericSend+0x8e>
	__asm volatile
 8008a94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a98:	f383 8811 	msr	BASEPRI, r3
 8008a9c:	f3bf 8f6f 	isb	sy
 8008aa0:	f3bf 8f4f 	dsb	sy
 8008aa4:	623b      	str	r3, [r7, #32]
}
 8008aa6:	bf00      	nop
 8008aa8:	e7fe      	b.n	8008aa8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008aaa:	f001 f9e7 	bl	8009e7c <xTaskGetSchedulerState>
 8008aae:	4603      	mov	r3, r0
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d102      	bne.n	8008aba <xQueueGenericSend+0x9e>
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d101      	bne.n	8008abe <xQueueGenericSend+0xa2>
 8008aba:	2301      	movs	r3, #1
 8008abc:	e000      	b.n	8008ac0 <xQueueGenericSend+0xa4>
 8008abe:	2300      	movs	r3, #0
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d10a      	bne.n	8008ada <xQueueGenericSend+0xbe>
	__asm volatile
 8008ac4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ac8:	f383 8811 	msr	BASEPRI, r3
 8008acc:	f3bf 8f6f 	isb	sy
 8008ad0:	f3bf 8f4f 	dsb	sy
 8008ad4:	61fb      	str	r3, [r7, #28]
}
 8008ad6:	bf00      	nop
 8008ad8:	e7fe      	b.n	8008ad8 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008ada:	f001 ff2b 	bl	800a934 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008ade:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ae0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008ae2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ae4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ae6:	429a      	cmp	r2, r3
 8008ae8:	d302      	bcc.n	8008af0 <xQueueGenericSend+0xd4>
 8008aea:	683b      	ldr	r3, [r7, #0]
 8008aec:	2b02      	cmp	r3, #2
 8008aee:	d129      	bne.n	8008b44 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008af0:	683a      	ldr	r2, [r7, #0]
 8008af2:	68b9      	ldr	r1, [r7, #8]
 8008af4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008af6:	f000 fa0b 	bl	8008f10 <prvCopyDataToQueue>
 8008afa:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008afc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008afe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d010      	beq.n	8008b26 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008b04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b06:	3324      	adds	r3, #36	; 0x24
 8008b08:	4618      	mov	r0, r3
 8008b0a:	f000 fff5 	bl	8009af8 <xTaskRemoveFromEventList>
 8008b0e:	4603      	mov	r3, r0
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d013      	beq.n	8008b3c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008b14:	4b3f      	ldr	r3, [pc, #252]	; (8008c14 <xQueueGenericSend+0x1f8>)
 8008b16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008b1a:	601a      	str	r2, [r3, #0]
 8008b1c:	f3bf 8f4f 	dsb	sy
 8008b20:	f3bf 8f6f 	isb	sy
 8008b24:	e00a      	b.n	8008b3c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8008b26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d007      	beq.n	8008b3c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008b2c:	4b39      	ldr	r3, [pc, #228]	; (8008c14 <xQueueGenericSend+0x1f8>)
 8008b2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008b32:	601a      	str	r2, [r3, #0]
 8008b34:	f3bf 8f4f 	dsb	sy
 8008b38:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008b3c:	f001 ff2a 	bl	800a994 <vPortExitCritical>
				return pdPASS;
 8008b40:	2301      	movs	r3, #1
 8008b42:	e063      	b.n	8008c0c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d103      	bne.n	8008b52 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008b4a:	f001 ff23 	bl	800a994 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8008b4e:	2300      	movs	r3, #0
 8008b50:	e05c      	b.n	8008c0c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008b52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d106      	bne.n	8008b66 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008b58:	f107 0314 	add.w	r3, r7, #20
 8008b5c:	4618      	mov	r0, r3
 8008b5e:	f001 f82f 	bl	8009bc0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008b62:	2301      	movs	r3, #1
 8008b64:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008b66:	f001 ff15 	bl	800a994 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008b6a:	f000 fd9b 	bl	80096a4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008b6e:	f001 fee1 	bl	800a934 <vPortEnterCritical>
 8008b72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b74:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008b78:	b25b      	sxtb	r3, r3
 8008b7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b7e:	d103      	bne.n	8008b88 <xQueueGenericSend+0x16c>
 8008b80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b82:	2200      	movs	r2, #0
 8008b84:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008b88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b8a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008b8e:	b25b      	sxtb	r3, r3
 8008b90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b94:	d103      	bne.n	8008b9e <xQueueGenericSend+0x182>
 8008b96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b98:	2200      	movs	r2, #0
 8008b9a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008b9e:	f001 fef9 	bl	800a994 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008ba2:	1d3a      	adds	r2, r7, #4
 8008ba4:	f107 0314 	add.w	r3, r7, #20
 8008ba8:	4611      	mov	r1, r2
 8008baa:	4618      	mov	r0, r3
 8008bac:	f001 f81e 	bl	8009bec <xTaskCheckForTimeOut>
 8008bb0:	4603      	mov	r3, r0
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d124      	bne.n	8008c00 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008bb6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008bb8:	f000 faa2 	bl	8009100 <prvIsQueueFull>
 8008bbc:	4603      	mov	r3, r0
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d018      	beq.n	8008bf4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008bc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bc4:	3310      	adds	r3, #16
 8008bc6:	687a      	ldr	r2, [r7, #4]
 8008bc8:	4611      	mov	r1, r2
 8008bca:	4618      	mov	r0, r3
 8008bcc:	f000 ff44 	bl	8009a58 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008bd0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008bd2:	f000 fa2d 	bl	8009030 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8008bd6:	f000 fd73 	bl	80096c0 <xTaskResumeAll>
 8008bda:	4603      	mov	r3, r0
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	f47f af7c 	bne.w	8008ada <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8008be2:	4b0c      	ldr	r3, [pc, #48]	; (8008c14 <xQueueGenericSend+0x1f8>)
 8008be4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008be8:	601a      	str	r2, [r3, #0]
 8008bea:	f3bf 8f4f 	dsb	sy
 8008bee:	f3bf 8f6f 	isb	sy
 8008bf2:	e772      	b.n	8008ada <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008bf4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008bf6:	f000 fa1b 	bl	8009030 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008bfa:	f000 fd61 	bl	80096c0 <xTaskResumeAll>
 8008bfe:	e76c      	b.n	8008ada <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008c00:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008c02:	f000 fa15 	bl	8009030 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008c06:	f000 fd5b 	bl	80096c0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8008c0a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008c0c:	4618      	mov	r0, r3
 8008c0e:	3738      	adds	r7, #56	; 0x38
 8008c10:	46bd      	mov	sp, r7
 8008c12:	bd80      	pop	{r7, pc}
 8008c14:	e000ed04 	.word	0xe000ed04

08008c18 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008c18:	b580      	push	{r7, lr}
 8008c1a:	b090      	sub	sp, #64	; 0x40
 8008c1c:	af00      	add	r7, sp, #0
 8008c1e:	60f8      	str	r0, [r7, #12]
 8008c20:	60b9      	str	r1, [r7, #8]
 8008c22:	607a      	str	r2, [r7, #4]
 8008c24:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8008c2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d10a      	bne.n	8008c46 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8008c30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c34:	f383 8811 	msr	BASEPRI, r3
 8008c38:	f3bf 8f6f 	isb	sy
 8008c3c:	f3bf 8f4f 	dsb	sy
 8008c40:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008c42:	bf00      	nop
 8008c44:	e7fe      	b.n	8008c44 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008c46:	68bb      	ldr	r3, [r7, #8]
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d103      	bne.n	8008c54 <xQueueGenericSendFromISR+0x3c>
 8008c4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d101      	bne.n	8008c58 <xQueueGenericSendFromISR+0x40>
 8008c54:	2301      	movs	r3, #1
 8008c56:	e000      	b.n	8008c5a <xQueueGenericSendFromISR+0x42>
 8008c58:	2300      	movs	r3, #0
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d10a      	bne.n	8008c74 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8008c5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c62:	f383 8811 	msr	BASEPRI, r3
 8008c66:	f3bf 8f6f 	isb	sy
 8008c6a:	f3bf 8f4f 	dsb	sy
 8008c6e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008c70:	bf00      	nop
 8008c72:	e7fe      	b.n	8008c72 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008c74:	683b      	ldr	r3, [r7, #0]
 8008c76:	2b02      	cmp	r3, #2
 8008c78:	d103      	bne.n	8008c82 <xQueueGenericSendFromISR+0x6a>
 8008c7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c7e:	2b01      	cmp	r3, #1
 8008c80:	d101      	bne.n	8008c86 <xQueueGenericSendFromISR+0x6e>
 8008c82:	2301      	movs	r3, #1
 8008c84:	e000      	b.n	8008c88 <xQueueGenericSendFromISR+0x70>
 8008c86:	2300      	movs	r3, #0
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d10a      	bne.n	8008ca2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8008c8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c90:	f383 8811 	msr	BASEPRI, r3
 8008c94:	f3bf 8f6f 	isb	sy
 8008c98:	f3bf 8f4f 	dsb	sy
 8008c9c:	623b      	str	r3, [r7, #32]
}
 8008c9e:	bf00      	nop
 8008ca0:	e7fe      	b.n	8008ca0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008ca2:	f001 ff29 	bl	800aaf8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008ca6:	f3ef 8211 	mrs	r2, BASEPRI
 8008caa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cae:	f383 8811 	msr	BASEPRI, r3
 8008cb2:	f3bf 8f6f 	isb	sy
 8008cb6:	f3bf 8f4f 	dsb	sy
 8008cba:	61fa      	str	r2, [r7, #28]
 8008cbc:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8008cbe:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008cc0:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008cc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cc4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008cc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008cca:	429a      	cmp	r2, r3
 8008ccc:	d302      	bcc.n	8008cd4 <xQueueGenericSendFromISR+0xbc>
 8008cce:	683b      	ldr	r3, [r7, #0]
 8008cd0:	2b02      	cmp	r3, #2
 8008cd2:	d12f      	bne.n	8008d34 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008cd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cd6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008cda:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008cde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ce0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ce2:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008ce4:	683a      	ldr	r2, [r7, #0]
 8008ce6:	68b9      	ldr	r1, [r7, #8]
 8008ce8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008cea:	f000 f911 	bl	8008f10 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008cee:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8008cf2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008cf6:	d112      	bne.n	8008d1e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008cf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d016      	beq.n	8008d2e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008d00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d02:	3324      	adds	r3, #36	; 0x24
 8008d04:	4618      	mov	r0, r3
 8008d06:	f000 fef7 	bl	8009af8 <xTaskRemoveFromEventList>
 8008d0a:	4603      	mov	r3, r0
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d00e      	beq.n	8008d2e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d00b      	beq.n	8008d2e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	2201      	movs	r2, #1
 8008d1a:	601a      	str	r2, [r3, #0]
 8008d1c:	e007      	b.n	8008d2e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008d1e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8008d22:	3301      	adds	r3, #1
 8008d24:	b2db      	uxtb	r3, r3
 8008d26:	b25a      	sxtb	r2, r3
 8008d28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d2a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8008d2e:	2301      	movs	r3, #1
 8008d30:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8008d32:	e001      	b.n	8008d38 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008d34:	2300      	movs	r3, #0
 8008d36:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008d38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d3a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008d3c:	697b      	ldr	r3, [r7, #20]
 8008d3e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008d42:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008d44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8008d46:	4618      	mov	r0, r3
 8008d48:	3740      	adds	r7, #64	; 0x40
 8008d4a:	46bd      	mov	sp, r7
 8008d4c:	bd80      	pop	{r7, pc}
	...

08008d50 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008d50:	b580      	push	{r7, lr}
 8008d52:	b08c      	sub	sp, #48	; 0x30
 8008d54:	af00      	add	r7, sp, #0
 8008d56:	60f8      	str	r0, [r7, #12]
 8008d58:	60b9      	str	r1, [r7, #8]
 8008d5a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008d5c:	2300      	movs	r3, #0
 8008d5e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008d64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d10a      	bne.n	8008d80 <xQueueReceive+0x30>
	__asm volatile
 8008d6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d6e:	f383 8811 	msr	BASEPRI, r3
 8008d72:	f3bf 8f6f 	isb	sy
 8008d76:	f3bf 8f4f 	dsb	sy
 8008d7a:	623b      	str	r3, [r7, #32]
}
 8008d7c:	bf00      	nop
 8008d7e:	e7fe      	b.n	8008d7e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008d80:	68bb      	ldr	r3, [r7, #8]
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d103      	bne.n	8008d8e <xQueueReceive+0x3e>
 8008d86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d101      	bne.n	8008d92 <xQueueReceive+0x42>
 8008d8e:	2301      	movs	r3, #1
 8008d90:	e000      	b.n	8008d94 <xQueueReceive+0x44>
 8008d92:	2300      	movs	r3, #0
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d10a      	bne.n	8008dae <xQueueReceive+0x5e>
	__asm volatile
 8008d98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d9c:	f383 8811 	msr	BASEPRI, r3
 8008da0:	f3bf 8f6f 	isb	sy
 8008da4:	f3bf 8f4f 	dsb	sy
 8008da8:	61fb      	str	r3, [r7, #28]
}
 8008daa:	bf00      	nop
 8008dac:	e7fe      	b.n	8008dac <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008dae:	f001 f865 	bl	8009e7c <xTaskGetSchedulerState>
 8008db2:	4603      	mov	r3, r0
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d102      	bne.n	8008dbe <xQueueReceive+0x6e>
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d101      	bne.n	8008dc2 <xQueueReceive+0x72>
 8008dbe:	2301      	movs	r3, #1
 8008dc0:	e000      	b.n	8008dc4 <xQueueReceive+0x74>
 8008dc2:	2300      	movs	r3, #0
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d10a      	bne.n	8008dde <xQueueReceive+0x8e>
	__asm volatile
 8008dc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dcc:	f383 8811 	msr	BASEPRI, r3
 8008dd0:	f3bf 8f6f 	isb	sy
 8008dd4:	f3bf 8f4f 	dsb	sy
 8008dd8:	61bb      	str	r3, [r7, #24]
}
 8008dda:	bf00      	nop
 8008ddc:	e7fe      	b.n	8008ddc <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008dde:	f001 fda9 	bl	800a934 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008de2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008de4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008de6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d01f      	beq.n	8008e2e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008dee:	68b9      	ldr	r1, [r7, #8]
 8008df0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008df2:	f000 f8f7 	bl	8008fe4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008df8:	1e5a      	subs	r2, r3, #1
 8008dfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dfc:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008dfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e00:	691b      	ldr	r3, [r3, #16]
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d00f      	beq.n	8008e26 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008e06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e08:	3310      	adds	r3, #16
 8008e0a:	4618      	mov	r0, r3
 8008e0c:	f000 fe74 	bl	8009af8 <xTaskRemoveFromEventList>
 8008e10:	4603      	mov	r3, r0
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d007      	beq.n	8008e26 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008e16:	4b3d      	ldr	r3, [pc, #244]	; (8008f0c <xQueueReceive+0x1bc>)
 8008e18:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008e1c:	601a      	str	r2, [r3, #0]
 8008e1e:	f3bf 8f4f 	dsb	sy
 8008e22:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008e26:	f001 fdb5 	bl	800a994 <vPortExitCritical>
				return pdPASS;
 8008e2a:	2301      	movs	r3, #1
 8008e2c:	e069      	b.n	8008f02 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d103      	bne.n	8008e3c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008e34:	f001 fdae 	bl	800a994 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008e38:	2300      	movs	r3, #0
 8008e3a:	e062      	b.n	8008f02 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008e3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d106      	bne.n	8008e50 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008e42:	f107 0310 	add.w	r3, r7, #16
 8008e46:	4618      	mov	r0, r3
 8008e48:	f000 feba 	bl	8009bc0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008e4c:	2301      	movs	r3, #1
 8008e4e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008e50:	f001 fda0 	bl	800a994 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008e54:	f000 fc26 	bl	80096a4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008e58:	f001 fd6c 	bl	800a934 <vPortEnterCritical>
 8008e5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e5e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008e62:	b25b      	sxtb	r3, r3
 8008e64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e68:	d103      	bne.n	8008e72 <xQueueReceive+0x122>
 8008e6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e6c:	2200      	movs	r2, #0
 8008e6e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008e72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e74:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008e78:	b25b      	sxtb	r3, r3
 8008e7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e7e:	d103      	bne.n	8008e88 <xQueueReceive+0x138>
 8008e80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e82:	2200      	movs	r2, #0
 8008e84:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008e88:	f001 fd84 	bl	800a994 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008e8c:	1d3a      	adds	r2, r7, #4
 8008e8e:	f107 0310 	add.w	r3, r7, #16
 8008e92:	4611      	mov	r1, r2
 8008e94:	4618      	mov	r0, r3
 8008e96:	f000 fea9 	bl	8009bec <xTaskCheckForTimeOut>
 8008e9a:	4603      	mov	r3, r0
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d123      	bne.n	8008ee8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008ea0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008ea2:	f000 f917 	bl	80090d4 <prvIsQueueEmpty>
 8008ea6:	4603      	mov	r3, r0
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d017      	beq.n	8008edc <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008eac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008eae:	3324      	adds	r3, #36	; 0x24
 8008eb0:	687a      	ldr	r2, [r7, #4]
 8008eb2:	4611      	mov	r1, r2
 8008eb4:	4618      	mov	r0, r3
 8008eb6:	f000 fdcf 	bl	8009a58 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008eba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008ebc:	f000 f8b8 	bl	8009030 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008ec0:	f000 fbfe 	bl	80096c0 <xTaskResumeAll>
 8008ec4:	4603      	mov	r3, r0
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d189      	bne.n	8008dde <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8008eca:	4b10      	ldr	r3, [pc, #64]	; (8008f0c <xQueueReceive+0x1bc>)
 8008ecc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008ed0:	601a      	str	r2, [r3, #0]
 8008ed2:	f3bf 8f4f 	dsb	sy
 8008ed6:	f3bf 8f6f 	isb	sy
 8008eda:	e780      	b.n	8008dde <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008edc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008ede:	f000 f8a7 	bl	8009030 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008ee2:	f000 fbed 	bl	80096c0 <xTaskResumeAll>
 8008ee6:	e77a      	b.n	8008dde <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008ee8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008eea:	f000 f8a1 	bl	8009030 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008eee:	f000 fbe7 	bl	80096c0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008ef2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008ef4:	f000 f8ee 	bl	80090d4 <prvIsQueueEmpty>
 8008ef8:	4603      	mov	r3, r0
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	f43f af6f 	beq.w	8008dde <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008f00:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008f02:	4618      	mov	r0, r3
 8008f04:	3730      	adds	r7, #48	; 0x30
 8008f06:	46bd      	mov	sp, r7
 8008f08:	bd80      	pop	{r7, pc}
 8008f0a:	bf00      	nop
 8008f0c:	e000ed04 	.word	0xe000ed04

08008f10 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008f10:	b580      	push	{r7, lr}
 8008f12:	b086      	sub	sp, #24
 8008f14:	af00      	add	r7, sp, #0
 8008f16:	60f8      	str	r0, [r7, #12]
 8008f18:	60b9      	str	r1, [r7, #8]
 8008f1a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008f1c:	2300      	movs	r3, #0
 8008f1e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f24:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d10d      	bne.n	8008f4a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d14d      	bne.n	8008fd2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	689b      	ldr	r3, [r3, #8]
 8008f3a:	4618      	mov	r0, r3
 8008f3c:	f000 ffbc 	bl	8009eb8 <xTaskPriorityDisinherit>
 8008f40:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	2200      	movs	r2, #0
 8008f46:	609a      	str	r2, [r3, #8]
 8008f48:	e043      	b.n	8008fd2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d119      	bne.n	8008f84 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	6858      	ldr	r0, [r3, #4]
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f58:	461a      	mov	r2, r3
 8008f5a:	68b9      	ldr	r1, [r7, #8]
 8008f5c:	f002 fb5e 	bl	800b61c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	685a      	ldr	r2, [r3, #4]
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f68:	441a      	add	r2, r3
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	685a      	ldr	r2, [r3, #4]
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	689b      	ldr	r3, [r3, #8]
 8008f76:	429a      	cmp	r2, r3
 8008f78:	d32b      	bcc.n	8008fd2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	681a      	ldr	r2, [r3, #0]
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	605a      	str	r2, [r3, #4]
 8008f82:	e026      	b.n	8008fd2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	68d8      	ldr	r0, [r3, #12]
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f8c:	461a      	mov	r2, r3
 8008f8e:	68b9      	ldr	r1, [r7, #8]
 8008f90:	f002 fb44 	bl	800b61c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	68da      	ldr	r2, [r3, #12]
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f9c:	425b      	negs	r3, r3
 8008f9e:	441a      	add	r2, r3
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	68da      	ldr	r2, [r3, #12]
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	429a      	cmp	r2, r3
 8008fae:	d207      	bcs.n	8008fc0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	689a      	ldr	r2, [r3, #8]
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fb8:	425b      	negs	r3, r3
 8008fba:	441a      	add	r2, r3
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	2b02      	cmp	r3, #2
 8008fc4:	d105      	bne.n	8008fd2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008fc6:	693b      	ldr	r3, [r7, #16]
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d002      	beq.n	8008fd2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008fcc:	693b      	ldr	r3, [r7, #16]
 8008fce:	3b01      	subs	r3, #1
 8008fd0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008fd2:	693b      	ldr	r3, [r7, #16]
 8008fd4:	1c5a      	adds	r2, r3, #1
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8008fda:	697b      	ldr	r3, [r7, #20]
}
 8008fdc:	4618      	mov	r0, r3
 8008fde:	3718      	adds	r7, #24
 8008fe0:	46bd      	mov	sp, r7
 8008fe2:	bd80      	pop	{r7, pc}

08008fe4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008fe4:	b580      	push	{r7, lr}
 8008fe6:	b082      	sub	sp, #8
 8008fe8:	af00      	add	r7, sp, #0
 8008fea:	6078      	str	r0, [r7, #4]
 8008fec:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d018      	beq.n	8009028 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	68da      	ldr	r2, [r3, #12]
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ffe:	441a      	add	r2, r3
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	68da      	ldr	r2, [r3, #12]
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	689b      	ldr	r3, [r3, #8]
 800900c:	429a      	cmp	r2, r3
 800900e:	d303      	bcc.n	8009018 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	681a      	ldr	r2, [r3, #0]
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	68d9      	ldr	r1, [r3, #12]
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009020:	461a      	mov	r2, r3
 8009022:	6838      	ldr	r0, [r7, #0]
 8009024:	f002 fafa 	bl	800b61c <memcpy>
	}
}
 8009028:	bf00      	nop
 800902a:	3708      	adds	r7, #8
 800902c:	46bd      	mov	sp, r7
 800902e:	bd80      	pop	{r7, pc}

08009030 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8009030:	b580      	push	{r7, lr}
 8009032:	b084      	sub	sp, #16
 8009034:	af00      	add	r7, sp, #0
 8009036:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8009038:	f001 fc7c 	bl	800a934 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009042:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009044:	e011      	b.n	800906a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800904a:	2b00      	cmp	r3, #0
 800904c:	d012      	beq.n	8009074 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	3324      	adds	r3, #36	; 0x24
 8009052:	4618      	mov	r0, r3
 8009054:	f000 fd50 	bl	8009af8 <xTaskRemoveFromEventList>
 8009058:	4603      	mov	r3, r0
 800905a:	2b00      	cmp	r3, #0
 800905c:	d001      	beq.n	8009062 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800905e:	f000 fe27 	bl	8009cb0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8009062:	7bfb      	ldrb	r3, [r7, #15]
 8009064:	3b01      	subs	r3, #1
 8009066:	b2db      	uxtb	r3, r3
 8009068:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800906a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800906e:	2b00      	cmp	r3, #0
 8009070:	dce9      	bgt.n	8009046 <prvUnlockQueue+0x16>
 8009072:	e000      	b.n	8009076 <prvUnlockQueue+0x46>
					break;
 8009074:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	22ff      	movs	r2, #255	; 0xff
 800907a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800907e:	f001 fc89 	bl	800a994 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8009082:	f001 fc57 	bl	800a934 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800908c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800908e:	e011      	b.n	80090b4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	691b      	ldr	r3, [r3, #16]
 8009094:	2b00      	cmp	r3, #0
 8009096:	d012      	beq.n	80090be <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	3310      	adds	r3, #16
 800909c:	4618      	mov	r0, r3
 800909e:	f000 fd2b 	bl	8009af8 <xTaskRemoveFromEventList>
 80090a2:	4603      	mov	r3, r0
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d001      	beq.n	80090ac <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80090a8:	f000 fe02 	bl	8009cb0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80090ac:	7bbb      	ldrb	r3, [r7, #14]
 80090ae:	3b01      	subs	r3, #1
 80090b0:	b2db      	uxtb	r3, r3
 80090b2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80090b4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	dce9      	bgt.n	8009090 <prvUnlockQueue+0x60>
 80090bc:	e000      	b.n	80090c0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80090be:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	22ff      	movs	r2, #255	; 0xff
 80090c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80090c8:	f001 fc64 	bl	800a994 <vPortExitCritical>
}
 80090cc:	bf00      	nop
 80090ce:	3710      	adds	r7, #16
 80090d0:	46bd      	mov	sp, r7
 80090d2:	bd80      	pop	{r7, pc}

080090d4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80090d4:	b580      	push	{r7, lr}
 80090d6:	b084      	sub	sp, #16
 80090d8:	af00      	add	r7, sp, #0
 80090da:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80090dc:	f001 fc2a 	bl	800a934 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d102      	bne.n	80090ee <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80090e8:	2301      	movs	r3, #1
 80090ea:	60fb      	str	r3, [r7, #12]
 80090ec:	e001      	b.n	80090f2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80090ee:	2300      	movs	r3, #0
 80090f0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80090f2:	f001 fc4f 	bl	800a994 <vPortExitCritical>

	return xReturn;
 80090f6:	68fb      	ldr	r3, [r7, #12]
}
 80090f8:	4618      	mov	r0, r3
 80090fa:	3710      	adds	r7, #16
 80090fc:	46bd      	mov	sp, r7
 80090fe:	bd80      	pop	{r7, pc}

08009100 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009100:	b580      	push	{r7, lr}
 8009102:	b084      	sub	sp, #16
 8009104:	af00      	add	r7, sp, #0
 8009106:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009108:	f001 fc14 	bl	800a934 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009114:	429a      	cmp	r2, r3
 8009116:	d102      	bne.n	800911e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8009118:	2301      	movs	r3, #1
 800911a:	60fb      	str	r3, [r7, #12]
 800911c:	e001      	b.n	8009122 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800911e:	2300      	movs	r3, #0
 8009120:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009122:	f001 fc37 	bl	800a994 <vPortExitCritical>

	return xReturn;
 8009126:	68fb      	ldr	r3, [r7, #12]
}
 8009128:	4618      	mov	r0, r3
 800912a:	3710      	adds	r7, #16
 800912c:	46bd      	mov	sp, r7
 800912e:	bd80      	pop	{r7, pc}

08009130 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8009130:	b480      	push	{r7}
 8009132:	b085      	sub	sp, #20
 8009134:	af00      	add	r7, sp, #0
 8009136:	6078      	str	r0, [r7, #4]
 8009138:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800913a:	2300      	movs	r3, #0
 800913c:	60fb      	str	r3, [r7, #12]
 800913e:	e014      	b.n	800916a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8009140:	4a0f      	ldr	r2, [pc, #60]	; (8009180 <vQueueAddToRegistry+0x50>)
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009148:	2b00      	cmp	r3, #0
 800914a:	d10b      	bne.n	8009164 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800914c:	490c      	ldr	r1, [pc, #48]	; (8009180 <vQueueAddToRegistry+0x50>)
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	683a      	ldr	r2, [r7, #0]
 8009152:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8009156:	4a0a      	ldr	r2, [pc, #40]	; (8009180 <vQueueAddToRegistry+0x50>)
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	00db      	lsls	r3, r3, #3
 800915c:	4413      	add	r3, r2
 800915e:	687a      	ldr	r2, [r7, #4]
 8009160:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8009162:	e006      	b.n	8009172 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	3301      	adds	r3, #1
 8009168:	60fb      	str	r3, [r7, #12]
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	2b07      	cmp	r3, #7
 800916e:	d9e7      	bls.n	8009140 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8009170:	bf00      	nop
 8009172:	bf00      	nop
 8009174:	3714      	adds	r7, #20
 8009176:	46bd      	mov	sp, r7
 8009178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800917c:	4770      	bx	lr
 800917e:	bf00      	nop
 8009180:	2000147c 	.word	0x2000147c

08009184 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009184:	b580      	push	{r7, lr}
 8009186:	b086      	sub	sp, #24
 8009188:	af00      	add	r7, sp, #0
 800918a:	60f8      	str	r0, [r7, #12]
 800918c:	60b9      	str	r1, [r7, #8]
 800918e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8009194:	f001 fbce 	bl	800a934 <vPortEnterCritical>
 8009198:	697b      	ldr	r3, [r7, #20]
 800919a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800919e:	b25b      	sxtb	r3, r3
 80091a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091a4:	d103      	bne.n	80091ae <vQueueWaitForMessageRestricted+0x2a>
 80091a6:	697b      	ldr	r3, [r7, #20]
 80091a8:	2200      	movs	r2, #0
 80091aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80091ae:	697b      	ldr	r3, [r7, #20]
 80091b0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80091b4:	b25b      	sxtb	r3, r3
 80091b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091ba:	d103      	bne.n	80091c4 <vQueueWaitForMessageRestricted+0x40>
 80091bc:	697b      	ldr	r3, [r7, #20]
 80091be:	2200      	movs	r2, #0
 80091c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80091c4:	f001 fbe6 	bl	800a994 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80091c8:	697b      	ldr	r3, [r7, #20]
 80091ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d106      	bne.n	80091de <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80091d0:	697b      	ldr	r3, [r7, #20]
 80091d2:	3324      	adds	r3, #36	; 0x24
 80091d4:	687a      	ldr	r2, [r7, #4]
 80091d6:	68b9      	ldr	r1, [r7, #8]
 80091d8:	4618      	mov	r0, r3
 80091da:	f000 fc61 	bl	8009aa0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80091de:	6978      	ldr	r0, [r7, #20]
 80091e0:	f7ff ff26 	bl	8009030 <prvUnlockQueue>
	}
 80091e4:	bf00      	nop
 80091e6:	3718      	adds	r7, #24
 80091e8:	46bd      	mov	sp, r7
 80091ea:	bd80      	pop	{r7, pc}

080091ec <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80091ec:	b580      	push	{r7, lr}
 80091ee:	b08e      	sub	sp, #56	; 0x38
 80091f0:	af04      	add	r7, sp, #16
 80091f2:	60f8      	str	r0, [r7, #12]
 80091f4:	60b9      	str	r1, [r7, #8]
 80091f6:	607a      	str	r2, [r7, #4]
 80091f8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80091fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d10a      	bne.n	8009216 <xTaskCreateStatic+0x2a>
	__asm volatile
 8009200:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009204:	f383 8811 	msr	BASEPRI, r3
 8009208:	f3bf 8f6f 	isb	sy
 800920c:	f3bf 8f4f 	dsb	sy
 8009210:	623b      	str	r3, [r7, #32]
}
 8009212:	bf00      	nop
 8009214:	e7fe      	b.n	8009214 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8009216:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009218:	2b00      	cmp	r3, #0
 800921a:	d10a      	bne.n	8009232 <xTaskCreateStatic+0x46>
	__asm volatile
 800921c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009220:	f383 8811 	msr	BASEPRI, r3
 8009224:	f3bf 8f6f 	isb	sy
 8009228:	f3bf 8f4f 	dsb	sy
 800922c:	61fb      	str	r3, [r7, #28]
}
 800922e:	bf00      	nop
 8009230:	e7fe      	b.n	8009230 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8009232:	23bc      	movs	r3, #188	; 0xbc
 8009234:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009236:	693b      	ldr	r3, [r7, #16]
 8009238:	2bbc      	cmp	r3, #188	; 0xbc
 800923a:	d00a      	beq.n	8009252 <xTaskCreateStatic+0x66>
	__asm volatile
 800923c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009240:	f383 8811 	msr	BASEPRI, r3
 8009244:	f3bf 8f6f 	isb	sy
 8009248:	f3bf 8f4f 	dsb	sy
 800924c:	61bb      	str	r3, [r7, #24]
}
 800924e:	bf00      	nop
 8009250:	e7fe      	b.n	8009250 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8009252:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009254:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009256:	2b00      	cmp	r3, #0
 8009258:	d01e      	beq.n	8009298 <xTaskCreateStatic+0xac>
 800925a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800925c:	2b00      	cmp	r3, #0
 800925e:	d01b      	beq.n	8009298 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009260:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009262:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009266:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009268:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800926a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800926c:	2202      	movs	r2, #2
 800926e:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009272:	2300      	movs	r3, #0
 8009274:	9303      	str	r3, [sp, #12]
 8009276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009278:	9302      	str	r3, [sp, #8]
 800927a:	f107 0314 	add.w	r3, r7, #20
 800927e:	9301      	str	r3, [sp, #4]
 8009280:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009282:	9300      	str	r3, [sp, #0]
 8009284:	683b      	ldr	r3, [r7, #0]
 8009286:	687a      	ldr	r2, [r7, #4]
 8009288:	68b9      	ldr	r1, [r7, #8]
 800928a:	68f8      	ldr	r0, [r7, #12]
 800928c:	f000 f850 	bl	8009330 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009290:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009292:	f000 f8f3 	bl	800947c <prvAddNewTaskToReadyList>
 8009296:	e001      	b.n	800929c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8009298:	2300      	movs	r3, #0
 800929a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800929c:	697b      	ldr	r3, [r7, #20]
	}
 800929e:	4618      	mov	r0, r3
 80092a0:	3728      	adds	r7, #40	; 0x28
 80092a2:	46bd      	mov	sp, r7
 80092a4:	bd80      	pop	{r7, pc}

080092a6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80092a6:	b580      	push	{r7, lr}
 80092a8:	b08c      	sub	sp, #48	; 0x30
 80092aa:	af04      	add	r7, sp, #16
 80092ac:	60f8      	str	r0, [r7, #12]
 80092ae:	60b9      	str	r1, [r7, #8]
 80092b0:	603b      	str	r3, [r7, #0]
 80092b2:	4613      	mov	r3, r2
 80092b4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80092b6:	88fb      	ldrh	r3, [r7, #6]
 80092b8:	009b      	lsls	r3, r3, #2
 80092ba:	4618      	mov	r0, r3
 80092bc:	f001 fc5c 	bl	800ab78 <pvPortMalloc>
 80092c0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80092c2:	697b      	ldr	r3, [r7, #20]
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d00e      	beq.n	80092e6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80092c8:	20bc      	movs	r0, #188	; 0xbc
 80092ca:	f001 fc55 	bl	800ab78 <pvPortMalloc>
 80092ce:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80092d0:	69fb      	ldr	r3, [r7, #28]
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d003      	beq.n	80092de <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80092d6:	69fb      	ldr	r3, [r7, #28]
 80092d8:	697a      	ldr	r2, [r7, #20]
 80092da:	631a      	str	r2, [r3, #48]	; 0x30
 80092dc:	e005      	b.n	80092ea <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80092de:	6978      	ldr	r0, [r7, #20]
 80092e0:	f001 fd16 	bl	800ad10 <vPortFree>
 80092e4:	e001      	b.n	80092ea <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80092e6:	2300      	movs	r3, #0
 80092e8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80092ea:	69fb      	ldr	r3, [r7, #28]
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d017      	beq.n	8009320 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80092f0:	69fb      	ldr	r3, [r7, #28]
 80092f2:	2200      	movs	r2, #0
 80092f4:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80092f8:	88fa      	ldrh	r2, [r7, #6]
 80092fa:	2300      	movs	r3, #0
 80092fc:	9303      	str	r3, [sp, #12]
 80092fe:	69fb      	ldr	r3, [r7, #28]
 8009300:	9302      	str	r3, [sp, #8]
 8009302:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009304:	9301      	str	r3, [sp, #4]
 8009306:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009308:	9300      	str	r3, [sp, #0]
 800930a:	683b      	ldr	r3, [r7, #0]
 800930c:	68b9      	ldr	r1, [r7, #8]
 800930e:	68f8      	ldr	r0, [r7, #12]
 8009310:	f000 f80e 	bl	8009330 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009314:	69f8      	ldr	r0, [r7, #28]
 8009316:	f000 f8b1 	bl	800947c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800931a:	2301      	movs	r3, #1
 800931c:	61bb      	str	r3, [r7, #24]
 800931e:	e002      	b.n	8009326 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009320:	f04f 33ff 	mov.w	r3, #4294967295
 8009324:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009326:	69bb      	ldr	r3, [r7, #24]
	}
 8009328:	4618      	mov	r0, r3
 800932a:	3720      	adds	r7, #32
 800932c:	46bd      	mov	sp, r7
 800932e:	bd80      	pop	{r7, pc}

08009330 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009330:	b580      	push	{r7, lr}
 8009332:	b088      	sub	sp, #32
 8009334:	af00      	add	r7, sp, #0
 8009336:	60f8      	str	r0, [r7, #12]
 8009338:	60b9      	str	r1, [r7, #8]
 800933a:	607a      	str	r2, [r7, #4]
 800933c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800933e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009340:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	009b      	lsls	r3, r3, #2
 8009346:	461a      	mov	r2, r3
 8009348:	21a5      	movs	r1, #165	; 0xa5
 800934a:	f002 f98f 	bl	800b66c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800934e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009350:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009358:	3b01      	subs	r3, #1
 800935a:	009b      	lsls	r3, r3, #2
 800935c:	4413      	add	r3, r2
 800935e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009360:	69bb      	ldr	r3, [r7, #24]
 8009362:	f023 0307 	bic.w	r3, r3, #7
 8009366:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009368:	69bb      	ldr	r3, [r7, #24]
 800936a:	f003 0307 	and.w	r3, r3, #7
 800936e:	2b00      	cmp	r3, #0
 8009370:	d00a      	beq.n	8009388 <prvInitialiseNewTask+0x58>
	__asm volatile
 8009372:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009376:	f383 8811 	msr	BASEPRI, r3
 800937a:	f3bf 8f6f 	isb	sy
 800937e:	f3bf 8f4f 	dsb	sy
 8009382:	617b      	str	r3, [r7, #20]
}
 8009384:	bf00      	nop
 8009386:	e7fe      	b.n	8009386 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8009388:	68bb      	ldr	r3, [r7, #8]
 800938a:	2b00      	cmp	r3, #0
 800938c:	d01f      	beq.n	80093ce <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800938e:	2300      	movs	r3, #0
 8009390:	61fb      	str	r3, [r7, #28]
 8009392:	e012      	b.n	80093ba <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009394:	68ba      	ldr	r2, [r7, #8]
 8009396:	69fb      	ldr	r3, [r7, #28]
 8009398:	4413      	add	r3, r2
 800939a:	7819      	ldrb	r1, [r3, #0]
 800939c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800939e:	69fb      	ldr	r3, [r7, #28]
 80093a0:	4413      	add	r3, r2
 80093a2:	3334      	adds	r3, #52	; 0x34
 80093a4:	460a      	mov	r2, r1
 80093a6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80093a8:	68ba      	ldr	r2, [r7, #8]
 80093aa:	69fb      	ldr	r3, [r7, #28]
 80093ac:	4413      	add	r3, r2
 80093ae:	781b      	ldrb	r3, [r3, #0]
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d006      	beq.n	80093c2 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80093b4:	69fb      	ldr	r3, [r7, #28]
 80093b6:	3301      	adds	r3, #1
 80093b8:	61fb      	str	r3, [r7, #28]
 80093ba:	69fb      	ldr	r3, [r7, #28]
 80093bc:	2b0f      	cmp	r3, #15
 80093be:	d9e9      	bls.n	8009394 <prvInitialiseNewTask+0x64>
 80093c0:	e000      	b.n	80093c4 <prvInitialiseNewTask+0x94>
			{
				break;
 80093c2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80093c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093c6:	2200      	movs	r2, #0
 80093c8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80093cc:	e003      	b.n	80093d6 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80093ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093d0:	2200      	movs	r2, #0
 80093d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80093d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093d8:	2b37      	cmp	r3, #55	; 0x37
 80093da:	d901      	bls.n	80093e0 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80093dc:	2337      	movs	r3, #55	; 0x37
 80093de:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80093e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093e2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80093e4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80093e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093e8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80093ea:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80093ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093ee:	2200      	movs	r2, #0
 80093f0:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80093f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093f4:	3304      	adds	r3, #4
 80093f6:	4618      	mov	r0, r3
 80093f8:	f7ff f978 	bl	80086ec <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80093fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093fe:	3318      	adds	r3, #24
 8009400:	4618      	mov	r0, r3
 8009402:	f7ff f973 	bl	80086ec <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009406:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009408:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800940a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800940c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800940e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009412:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009414:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009416:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009418:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800941a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800941c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800941e:	2200      	movs	r2, #0
 8009420:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009424:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009426:	2200      	movs	r2, #0
 8009428:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800942c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800942e:	3354      	adds	r3, #84	; 0x54
 8009430:	2260      	movs	r2, #96	; 0x60
 8009432:	2100      	movs	r1, #0
 8009434:	4618      	mov	r0, r3
 8009436:	f002 f919 	bl	800b66c <memset>
 800943a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800943c:	4a0c      	ldr	r2, [pc, #48]	; (8009470 <prvInitialiseNewTask+0x140>)
 800943e:	659a      	str	r2, [r3, #88]	; 0x58
 8009440:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009442:	4a0c      	ldr	r2, [pc, #48]	; (8009474 <prvInitialiseNewTask+0x144>)
 8009444:	65da      	str	r2, [r3, #92]	; 0x5c
 8009446:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009448:	4a0b      	ldr	r2, [pc, #44]	; (8009478 <prvInitialiseNewTask+0x148>)
 800944a:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800944c:	683a      	ldr	r2, [r7, #0]
 800944e:	68f9      	ldr	r1, [r7, #12]
 8009450:	69b8      	ldr	r0, [r7, #24]
 8009452:	f001 f941 	bl	800a6d8 <pxPortInitialiseStack>
 8009456:	4602      	mov	r2, r0
 8009458:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800945a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800945c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800945e:	2b00      	cmp	r3, #0
 8009460:	d002      	beq.n	8009468 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009462:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009464:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009466:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009468:	bf00      	nop
 800946a:	3720      	adds	r7, #32
 800946c:	46bd      	mov	sp, r7
 800946e:	bd80      	pop	{r7, pc}
 8009470:	0800c70c 	.word	0x0800c70c
 8009474:	0800c72c 	.word	0x0800c72c
 8009478:	0800c6ec 	.word	0x0800c6ec

0800947c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800947c:	b580      	push	{r7, lr}
 800947e:	b082      	sub	sp, #8
 8009480:	af00      	add	r7, sp, #0
 8009482:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009484:	f001 fa56 	bl	800a934 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009488:	4b2d      	ldr	r3, [pc, #180]	; (8009540 <prvAddNewTaskToReadyList+0xc4>)
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	3301      	adds	r3, #1
 800948e:	4a2c      	ldr	r2, [pc, #176]	; (8009540 <prvAddNewTaskToReadyList+0xc4>)
 8009490:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009492:	4b2c      	ldr	r3, [pc, #176]	; (8009544 <prvAddNewTaskToReadyList+0xc8>)
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	2b00      	cmp	r3, #0
 8009498:	d109      	bne.n	80094ae <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800949a:	4a2a      	ldr	r2, [pc, #168]	; (8009544 <prvAddNewTaskToReadyList+0xc8>)
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80094a0:	4b27      	ldr	r3, [pc, #156]	; (8009540 <prvAddNewTaskToReadyList+0xc4>)
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	2b01      	cmp	r3, #1
 80094a6:	d110      	bne.n	80094ca <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80094a8:	f000 fc26 	bl	8009cf8 <prvInitialiseTaskLists>
 80094ac:	e00d      	b.n	80094ca <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80094ae:	4b26      	ldr	r3, [pc, #152]	; (8009548 <prvAddNewTaskToReadyList+0xcc>)
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d109      	bne.n	80094ca <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80094b6:	4b23      	ldr	r3, [pc, #140]	; (8009544 <prvAddNewTaskToReadyList+0xc8>)
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094c0:	429a      	cmp	r2, r3
 80094c2:	d802      	bhi.n	80094ca <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80094c4:	4a1f      	ldr	r2, [pc, #124]	; (8009544 <prvAddNewTaskToReadyList+0xc8>)
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80094ca:	4b20      	ldr	r3, [pc, #128]	; (800954c <prvAddNewTaskToReadyList+0xd0>)
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	3301      	adds	r3, #1
 80094d0:	4a1e      	ldr	r2, [pc, #120]	; (800954c <prvAddNewTaskToReadyList+0xd0>)
 80094d2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80094d4:	4b1d      	ldr	r3, [pc, #116]	; (800954c <prvAddNewTaskToReadyList+0xd0>)
 80094d6:	681a      	ldr	r2, [r3, #0]
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80094e0:	4b1b      	ldr	r3, [pc, #108]	; (8009550 <prvAddNewTaskToReadyList+0xd4>)
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	429a      	cmp	r2, r3
 80094e6:	d903      	bls.n	80094f0 <prvAddNewTaskToReadyList+0x74>
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094ec:	4a18      	ldr	r2, [pc, #96]	; (8009550 <prvAddNewTaskToReadyList+0xd4>)
 80094ee:	6013      	str	r3, [r2, #0]
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80094f4:	4613      	mov	r3, r2
 80094f6:	009b      	lsls	r3, r3, #2
 80094f8:	4413      	add	r3, r2
 80094fa:	009b      	lsls	r3, r3, #2
 80094fc:	4a15      	ldr	r2, [pc, #84]	; (8009554 <prvAddNewTaskToReadyList+0xd8>)
 80094fe:	441a      	add	r2, r3
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	3304      	adds	r3, #4
 8009504:	4619      	mov	r1, r3
 8009506:	4610      	mov	r0, r2
 8009508:	f7ff f8fd 	bl	8008706 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800950c:	f001 fa42 	bl	800a994 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009510:	4b0d      	ldr	r3, [pc, #52]	; (8009548 <prvAddNewTaskToReadyList+0xcc>)
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	2b00      	cmp	r3, #0
 8009516:	d00e      	beq.n	8009536 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009518:	4b0a      	ldr	r3, [pc, #40]	; (8009544 <prvAddNewTaskToReadyList+0xc8>)
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009522:	429a      	cmp	r2, r3
 8009524:	d207      	bcs.n	8009536 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009526:	4b0c      	ldr	r3, [pc, #48]	; (8009558 <prvAddNewTaskToReadyList+0xdc>)
 8009528:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800952c:	601a      	str	r2, [r3, #0]
 800952e:	f3bf 8f4f 	dsb	sy
 8009532:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009536:	bf00      	nop
 8009538:	3708      	adds	r7, #8
 800953a:	46bd      	mov	sp, r7
 800953c:	bd80      	pop	{r7, pc}
 800953e:	bf00      	nop
 8009540:	20001990 	.word	0x20001990
 8009544:	200014bc 	.word	0x200014bc
 8009548:	2000199c 	.word	0x2000199c
 800954c:	200019ac 	.word	0x200019ac
 8009550:	20001998 	.word	0x20001998
 8009554:	200014c0 	.word	0x200014c0
 8009558:	e000ed04 	.word	0xe000ed04

0800955c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800955c:	b580      	push	{r7, lr}
 800955e:	b084      	sub	sp, #16
 8009560:	af00      	add	r7, sp, #0
 8009562:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009564:	2300      	movs	r3, #0
 8009566:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	2b00      	cmp	r3, #0
 800956c:	d017      	beq.n	800959e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800956e:	4b13      	ldr	r3, [pc, #76]	; (80095bc <vTaskDelay+0x60>)
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	2b00      	cmp	r3, #0
 8009574:	d00a      	beq.n	800958c <vTaskDelay+0x30>
	__asm volatile
 8009576:	f04f 0350 	mov.w	r3, #80	; 0x50
 800957a:	f383 8811 	msr	BASEPRI, r3
 800957e:	f3bf 8f6f 	isb	sy
 8009582:	f3bf 8f4f 	dsb	sy
 8009586:	60bb      	str	r3, [r7, #8]
}
 8009588:	bf00      	nop
 800958a:	e7fe      	b.n	800958a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800958c:	f000 f88a 	bl	80096a4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009590:	2100      	movs	r1, #0
 8009592:	6878      	ldr	r0, [r7, #4]
 8009594:	f000 fcfe 	bl	8009f94 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8009598:	f000 f892 	bl	80096c0 <xTaskResumeAll>
 800959c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	d107      	bne.n	80095b4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80095a4:	4b06      	ldr	r3, [pc, #24]	; (80095c0 <vTaskDelay+0x64>)
 80095a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80095aa:	601a      	str	r2, [r3, #0]
 80095ac:	f3bf 8f4f 	dsb	sy
 80095b0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80095b4:	bf00      	nop
 80095b6:	3710      	adds	r7, #16
 80095b8:	46bd      	mov	sp, r7
 80095ba:	bd80      	pop	{r7, pc}
 80095bc:	200019b8 	.word	0x200019b8
 80095c0:	e000ed04 	.word	0xe000ed04

080095c4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80095c4:	b580      	push	{r7, lr}
 80095c6:	b08a      	sub	sp, #40	; 0x28
 80095c8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80095ca:	2300      	movs	r3, #0
 80095cc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80095ce:	2300      	movs	r3, #0
 80095d0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80095d2:	463a      	mov	r2, r7
 80095d4:	1d39      	adds	r1, r7, #4
 80095d6:	f107 0308 	add.w	r3, r7, #8
 80095da:	4618      	mov	r0, r3
 80095dc:	f7ff f832 	bl	8008644 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80095e0:	6839      	ldr	r1, [r7, #0]
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	68ba      	ldr	r2, [r7, #8]
 80095e6:	9202      	str	r2, [sp, #8]
 80095e8:	9301      	str	r3, [sp, #4]
 80095ea:	2300      	movs	r3, #0
 80095ec:	9300      	str	r3, [sp, #0]
 80095ee:	2300      	movs	r3, #0
 80095f0:	460a      	mov	r2, r1
 80095f2:	4924      	ldr	r1, [pc, #144]	; (8009684 <vTaskStartScheduler+0xc0>)
 80095f4:	4824      	ldr	r0, [pc, #144]	; (8009688 <vTaskStartScheduler+0xc4>)
 80095f6:	f7ff fdf9 	bl	80091ec <xTaskCreateStatic>
 80095fa:	4603      	mov	r3, r0
 80095fc:	4a23      	ldr	r2, [pc, #140]	; (800968c <vTaskStartScheduler+0xc8>)
 80095fe:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009600:	4b22      	ldr	r3, [pc, #136]	; (800968c <vTaskStartScheduler+0xc8>)
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	2b00      	cmp	r3, #0
 8009606:	d002      	beq.n	800960e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009608:	2301      	movs	r3, #1
 800960a:	617b      	str	r3, [r7, #20]
 800960c:	e001      	b.n	8009612 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800960e:	2300      	movs	r3, #0
 8009610:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8009612:	697b      	ldr	r3, [r7, #20]
 8009614:	2b01      	cmp	r3, #1
 8009616:	d102      	bne.n	800961e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8009618:	f000 fd10 	bl	800a03c <xTimerCreateTimerTask>
 800961c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800961e:	697b      	ldr	r3, [r7, #20]
 8009620:	2b01      	cmp	r3, #1
 8009622:	d11b      	bne.n	800965c <vTaskStartScheduler+0x98>
	__asm volatile
 8009624:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009628:	f383 8811 	msr	BASEPRI, r3
 800962c:	f3bf 8f6f 	isb	sy
 8009630:	f3bf 8f4f 	dsb	sy
 8009634:	613b      	str	r3, [r7, #16]
}
 8009636:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009638:	4b15      	ldr	r3, [pc, #84]	; (8009690 <vTaskStartScheduler+0xcc>)
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	3354      	adds	r3, #84	; 0x54
 800963e:	4a15      	ldr	r2, [pc, #84]	; (8009694 <vTaskStartScheduler+0xd0>)
 8009640:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009642:	4b15      	ldr	r3, [pc, #84]	; (8009698 <vTaskStartScheduler+0xd4>)
 8009644:	f04f 32ff 	mov.w	r2, #4294967295
 8009648:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800964a:	4b14      	ldr	r3, [pc, #80]	; (800969c <vTaskStartScheduler+0xd8>)
 800964c:	2201      	movs	r2, #1
 800964e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009650:	4b13      	ldr	r3, [pc, #76]	; (80096a0 <vTaskStartScheduler+0xdc>)
 8009652:	2200      	movs	r2, #0
 8009654:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009656:	f001 f8cb 	bl	800a7f0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800965a:	e00e      	b.n	800967a <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800965c:	697b      	ldr	r3, [r7, #20]
 800965e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009662:	d10a      	bne.n	800967a <vTaskStartScheduler+0xb6>
	__asm volatile
 8009664:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009668:	f383 8811 	msr	BASEPRI, r3
 800966c:	f3bf 8f6f 	isb	sy
 8009670:	f3bf 8f4f 	dsb	sy
 8009674:	60fb      	str	r3, [r7, #12]
}
 8009676:	bf00      	nop
 8009678:	e7fe      	b.n	8009678 <vTaskStartScheduler+0xb4>
}
 800967a:	bf00      	nop
 800967c:	3718      	adds	r7, #24
 800967e:	46bd      	mov	sp, r7
 8009680:	bd80      	pop	{r7, pc}
 8009682:	bf00      	nop
 8009684:	0800c338 	.word	0x0800c338
 8009688:	08009cc9 	.word	0x08009cc9
 800968c:	200019b4 	.word	0x200019b4
 8009690:	200014bc 	.word	0x200014bc
 8009694:	20000014 	.word	0x20000014
 8009698:	200019b0 	.word	0x200019b0
 800969c:	2000199c 	.word	0x2000199c
 80096a0:	20001994 	.word	0x20001994

080096a4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80096a4:	b480      	push	{r7}
 80096a6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80096a8:	4b04      	ldr	r3, [pc, #16]	; (80096bc <vTaskSuspendAll+0x18>)
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	3301      	adds	r3, #1
 80096ae:	4a03      	ldr	r2, [pc, #12]	; (80096bc <vTaskSuspendAll+0x18>)
 80096b0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80096b2:	bf00      	nop
 80096b4:	46bd      	mov	sp, r7
 80096b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ba:	4770      	bx	lr
 80096bc:	200019b8 	.word	0x200019b8

080096c0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80096c0:	b580      	push	{r7, lr}
 80096c2:	b084      	sub	sp, #16
 80096c4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80096c6:	2300      	movs	r3, #0
 80096c8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80096ca:	2300      	movs	r3, #0
 80096cc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80096ce:	4b42      	ldr	r3, [pc, #264]	; (80097d8 <xTaskResumeAll+0x118>)
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	d10a      	bne.n	80096ec <xTaskResumeAll+0x2c>
	__asm volatile
 80096d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096da:	f383 8811 	msr	BASEPRI, r3
 80096de:	f3bf 8f6f 	isb	sy
 80096e2:	f3bf 8f4f 	dsb	sy
 80096e6:	603b      	str	r3, [r7, #0]
}
 80096e8:	bf00      	nop
 80096ea:	e7fe      	b.n	80096ea <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80096ec:	f001 f922 	bl	800a934 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80096f0:	4b39      	ldr	r3, [pc, #228]	; (80097d8 <xTaskResumeAll+0x118>)
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	3b01      	subs	r3, #1
 80096f6:	4a38      	ldr	r2, [pc, #224]	; (80097d8 <xTaskResumeAll+0x118>)
 80096f8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80096fa:	4b37      	ldr	r3, [pc, #220]	; (80097d8 <xTaskResumeAll+0x118>)
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d162      	bne.n	80097c8 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009702:	4b36      	ldr	r3, [pc, #216]	; (80097dc <xTaskResumeAll+0x11c>)
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	2b00      	cmp	r3, #0
 8009708:	d05e      	beq.n	80097c8 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800970a:	e02f      	b.n	800976c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800970c:	4b34      	ldr	r3, [pc, #208]	; (80097e0 <xTaskResumeAll+0x120>)
 800970e:	68db      	ldr	r3, [r3, #12]
 8009710:	68db      	ldr	r3, [r3, #12]
 8009712:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009714:	68fb      	ldr	r3, [r7, #12]
 8009716:	3318      	adds	r3, #24
 8009718:	4618      	mov	r0, r3
 800971a:	f7ff f851 	bl	80087c0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800971e:	68fb      	ldr	r3, [r7, #12]
 8009720:	3304      	adds	r3, #4
 8009722:	4618      	mov	r0, r3
 8009724:	f7ff f84c 	bl	80087c0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800972c:	4b2d      	ldr	r3, [pc, #180]	; (80097e4 <xTaskResumeAll+0x124>)
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	429a      	cmp	r2, r3
 8009732:	d903      	bls.n	800973c <xTaskResumeAll+0x7c>
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009738:	4a2a      	ldr	r2, [pc, #168]	; (80097e4 <xTaskResumeAll+0x124>)
 800973a:	6013      	str	r3, [r2, #0]
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009740:	4613      	mov	r3, r2
 8009742:	009b      	lsls	r3, r3, #2
 8009744:	4413      	add	r3, r2
 8009746:	009b      	lsls	r3, r3, #2
 8009748:	4a27      	ldr	r2, [pc, #156]	; (80097e8 <xTaskResumeAll+0x128>)
 800974a:	441a      	add	r2, r3
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	3304      	adds	r3, #4
 8009750:	4619      	mov	r1, r3
 8009752:	4610      	mov	r0, r2
 8009754:	f7fe ffd7 	bl	8008706 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800975c:	4b23      	ldr	r3, [pc, #140]	; (80097ec <xTaskResumeAll+0x12c>)
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009762:	429a      	cmp	r2, r3
 8009764:	d302      	bcc.n	800976c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8009766:	4b22      	ldr	r3, [pc, #136]	; (80097f0 <xTaskResumeAll+0x130>)
 8009768:	2201      	movs	r2, #1
 800976a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800976c:	4b1c      	ldr	r3, [pc, #112]	; (80097e0 <xTaskResumeAll+0x120>)
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	2b00      	cmp	r3, #0
 8009772:	d1cb      	bne.n	800970c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	2b00      	cmp	r3, #0
 8009778:	d001      	beq.n	800977e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800977a:	f000 fb5f 	bl	8009e3c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800977e:	4b1d      	ldr	r3, [pc, #116]	; (80097f4 <xTaskResumeAll+0x134>)
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	2b00      	cmp	r3, #0
 8009788:	d010      	beq.n	80097ac <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800978a:	f000 f847 	bl	800981c <xTaskIncrementTick>
 800978e:	4603      	mov	r3, r0
 8009790:	2b00      	cmp	r3, #0
 8009792:	d002      	beq.n	800979a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8009794:	4b16      	ldr	r3, [pc, #88]	; (80097f0 <xTaskResumeAll+0x130>)
 8009796:	2201      	movs	r2, #1
 8009798:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	3b01      	subs	r3, #1
 800979e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	d1f1      	bne.n	800978a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80097a6:	4b13      	ldr	r3, [pc, #76]	; (80097f4 <xTaskResumeAll+0x134>)
 80097a8:	2200      	movs	r2, #0
 80097aa:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80097ac:	4b10      	ldr	r3, [pc, #64]	; (80097f0 <xTaskResumeAll+0x130>)
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	d009      	beq.n	80097c8 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80097b4:	2301      	movs	r3, #1
 80097b6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80097b8:	4b0f      	ldr	r3, [pc, #60]	; (80097f8 <xTaskResumeAll+0x138>)
 80097ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80097be:	601a      	str	r2, [r3, #0]
 80097c0:	f3bf 8f4f 	dsb	sy
 80097c4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80097c8:	f001 f8e4 	bl	800a994 <vPortExitCritical>

	return xAlreadyYielded;
 80097cc:	68bb      	ldr	r3, [r7, #8]
}
 80097ce:	4618      	mov	r0, r3
 80097d0:	3710      	adds	r7, #16
 80097d2:	46bd      	mov	sp, r7
 80097d4:	bd80      	pop	{r7, pc}
 80097d6:	bf00      	nop
 80097d8:	200019b8 	.word	0x200019b8
 80097dc:	20001990 	.word	0x20001990
 80097e0:	20001950 	.word	0x20001950
 80097e4:	20001998 	.word	0x20001998
 80097e8:	200014c0 	.word	0x200014c0
 80097ec:	200014bc 	.word	0x200014bc
 80097f0:	200019a4 	.word	0x200019a4
 80097f4:	200019a0 	.word	0x200019a0
 80097f8:	e000ed04 	.word	0xe000ed04

080097fc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80097fc:	b480      	push	{r7}
 80097fe:	b083      	sub	sp, #12
 8009800:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8009802:	4b05      	ldr	r3, [pc, #20]	; (8009818 <xTaskGetTickCount+0x1c>)
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009808:	687b      	ldr	r3, [r7, #4]
}
 800980a:	4618      	mov	r0, r3
 800980c:	370c      	adds	r7, #12
 800980e:	46bd      	mov	sp, r7
 8009810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009814:	4770      	bx	lr
 8009816:	bf00      	nop
 8009818:	20001994 	.word	0x20001994

0800981c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800981c:	b580      	push	{r7, lr}
 800981e:	b086      	sub	sp, #24
 8009820:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009822:	2300      	movs	r3, #0
 8009824:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009826:	4b4f      	ldr	r3, [pc, #316]	; (8009964 <xTaskIncrementTick+0x148>)
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	2b00      	cmp	r3, #0
 800982c:	f040 808f 	bne.w	800994e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009830:	4b4d      	ldr	r3, [pc, #308]	; (8009968 <xTaskIncrementTick+0x14c>)
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	3301      	adds	r3, #1
 8009836:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009838:	4a4b      	ldr	r2, [pc, #300]	; (8009968 <xTaskIncrementTick+0x14c>)
 800983a:	693b      	ldr	r3, [r7, #16]
 800983c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800983e:	693b      	ldr	r3, [r7, #16]
 8009840:	2b00      	cmp	r3, #0
 8009842:	d120      	bne.n	8009886 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8009844:	4b49      	ldr	r3, [pc, #292]	; (800996c <xTaskIncrementTick+0x150>)
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	2b00      	cmp	r3, #0
 800984c:	d00a      	beq.n	8009864 <xTaskIncrementTick+0x48>
	__asm volatile
 800984e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009852:	f383 8811 	msr	BASEPRI, r3
 8009856:	f3bf 8f6f 	isb	sy
 800985a:	f3bf 8f4f 	dsb	sy
 800985e:	603b      	str	r3, [r7, #0]
}
 8009860:	bf00      	nop
 8009862:	e7fe      	b.n	8009862 <xTaskIncrementTick+0x46>
 8009864:	4b41      	ldr	r3, [pc, #260]	; (800996c <xTaskIncrementTick+0x150>)
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	60fb      	str	r3, [r7, #12]
 800986a:	4b41      	ldr	r3, [pc, #260]	; (8009970 <xTaskIncrementTick+0x154>)
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	4a3f      	ldr	r2, [pc, #252]	; (800996c <xTaskIncrementTick+0x150>)
 8009870:	6013      	str	r3, [r2, #0]
 8009872:	4a3f      	ldr	r2, [pc, #252]	; (8009970 <xTaskIncrementTick+0x154>)
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	6013      	str	r3, [r2, #0]
 8009878:	4b3e      	ldr	r3, [pc, #248]	; (8009974 <xTaskIncrementTick+0x158>)
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	3301      	adds	r3, #1
 800987e:	4a3d      	ldr	r2, [pc, #244]	; (8009974 <xTaskIncrementTick+0x158>)
 8009880:	6013      	str	r3, [r2, #0]
 8009882:	f000 fadb 	bl	8009e3c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009886:	4b3c      	ldr	r3, [pc, #240]	; (8009978 <xTaskIncrementTick+0x15c>)
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	693a      	ldr	r2, [r7, #16]
 800988c:	429a      	cmp	r2, r3
 800988e:	d349      	bcc.n	8009924 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009890:	4b36      	ldr	r3, [pc, #216]	; (800996c <xTaskIncrementTick+0x150>)
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	2b00      	cmp	r3, #0
 8009898:	d104      	bne.n	80098a4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800989a:	4b37      	ldr	r3, [pc, #220]	; (8009978 <xTaskIncrementTick+0x15c>)
 800989c:	f04f 32ff 	mov.w	r2, #4294967295
 80098a0:	601a      	str	r2, [r3, #0]
					break;
 80098a2:	e03f      	b.n	8009924 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80098a4:	4b31      	ldr	r3, [pc, #196]	; (800996c <xTaskIncrementTick+0x150>)
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	68db      	ldr	r3, [r3, #12]
 80098aa:	68db      	ldr	r3, [r3, #12]
 80098ac:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80098ae:	68bb      	ldr	r3, [r7, #8]
 80098b0:	685b      	ldr	r3, [r3, #4]
 80098b2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80098b4:	693a      	ldr	r2, [r7, #16]
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	429a      	cmp	r2, r3
 80098ba:	d203      	bcs.n	80098c4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80098bc:	4a2e      	ldr	r2, [pc, #184]	; (8009978 <xTaskIncrementTick+0x15c>)
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80098c2:	e02f      	b.n	8009924 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80098c4:	68bb      	ldr	r3, [r7, #8]
 80098c6:	3304      	adds	r3, #4
 80098c8:	4618      	mov	r0, r3
 80098ca:	f7fe ff79 	bl	80087c0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80098ce:	68bb      	ldr	r3, [r7, #8]
 80098d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	d004      	beq.n	80098e0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80098d6:	68bb      	ldr	r3, [r7, #8]
 80098d8:	3318      	adds	r3, #24
 80098da:	4618      	mov	r0, r3
 80098dc:	f7fe ff70 	bl	80087c0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80098e0:	68bb      	ldr	r3, [r7, #8]
 80098e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80098e4:	4b25      	ldr	r3, [pc, #148]	; (800997c <xTaskIncrementTick+0x160>)
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	429a      	cmp	r2, r3
 80098ea:	d903      	bls.n	80098f4 <xTaskIncrementTick+0xd8>
 80098ec:	68bb      	ldr	r3, [r7, #8]
 80098ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098f0:	4a22      	ldr	r2, [pc, #136]	; (800997c <xTaskIncrementTick+0x160>)
 80098f2:	6013      	str	r3, [r2, #0]
 80098f4:	68bb      	ldr	r3, [r7, #8]
 80098f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80098f8:	4613      	mov	r3, r2
 80098fa:	009b      	lsls	r3, r3, #2
 80098fc:	4413      	add	r3, r2
 80098fe:	009b      	lsls	r3, r3, #2
 8009900:	4a1f      	ldr	r2, [pc, #124]	; (8009980 <xTaskIncrementTick+0x164>)
 8009902:	441a      	add	r2, r3
 8009904:	68bb      	ldr	r3, [r7, #8]
 8009906:	3304      	adds	r3, #4
 8009908:	4619      	mov	r1, r3
 800990a:	4610      	mov	r0, r2
 800990c:	f7fe fefb 	bl	8008706 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009910:	68bb      	ldr	r3, [r7, #8]
 8009912:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009914:	4b1b      	ldr	r3, [pc, #108]	; (8009984 <xTaskIncrementTick+0x168>)
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800991a:	429a      	cmp	r2, r3
 800991c:	d3b8      	bcc.n	8009890 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800991e:	2301      	movs	r3, #1
 8009920:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009922:	e7b5      	b.n	8009890 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009924:	4b17      	ldr	r3, [pc, #92]	; (8009984 <xTaskIncrementTick+0x168>)
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800992a:	4915      	ldr	r1, [pc, #84]	; (8009980 <xTaskIncrementTick+0x164>)
 800992c:	4613      	mov	r3, r2
 800992e:	009b      	lsls	r3, r3, #2
 8009930:	4413      	add	r3, r2
 8009932:	009b      	lsls	r3, r3, #2
 8009934:	440b      	add	r3, r1
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	2b01      	cmp	r3, #1
 800993a:	d901      	bls.n	8009940 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800993c:	2301      	movs	r3, #1
 800993e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8009940:	4b11      	ldr	r3, [pc, #68]	; (8009988 <xTaskIncrementTick+0x16c>)
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	2b00      	cmp	r3, #0
 8009946:	d007      	beq.n	8009958 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8009948:	2301      	movs	r3, #1
 800994a:	617b      	str	r3, [r7, #20]
 800994c:	e004      	b.n	8009958 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800994e:	4b0f      	ldr	r3, [pc, #60]	; (800998c <xTaskIncrementTick+0x170>)
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	3301      	adds	r3, #1
 8009954:	4a0d      	ldr	r2, [pc, #52]	; (800998c <xTaskIncrementTick+0x170>)
 8009956:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8009958:	697b      	ldr	r3, [r7, #20]
}
 800995a:	4618      	mov	r0, r3
 800995c:	3718      	adds	r7, #24
 800995e:	46bd      	mov	sp, r7
 8009960:	bd80      	pop	{r7, pc}
 8009962:	bf00      	nop
 8009964:	200019b8 	.word	0x200019b8
 8009968:	20001994 	.word	0x20001994
 800996c:	20001948 	.word	0x20001948
 8009970:	2000194c 	.word	0x2000194c
 8009974:	200019a8 	.word	0x200019a8
 8009978:	200019b0 	.word	0x200019b0
 800997c:	20001998 	.word	0x20001998
 8009980:	200014c0 	.word	0x200014c0
 8009984:	200014bc 	.word	0x200014bc
 8009988:	200019a4 	.word	0x200019a4
 800998c:	200019a0 	.word	0x200019a0

08009990 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009990:	b480      	push	{r7}
 8009992:	b085      	sub	sp, #20
 8009994:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009996:	4b2a      	ldr	r3, [pc, #168]	; (8009a40 <vTaskSwitchContext+0xb0>)
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	2b00      	cmp	r3, #0
 800999c:	d003      	beq.n	80099a6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800999e:	4b29      	ldr	r3, [pc, #164]	; (8009a44 <vTaskSwitchContext+0xb4>)
 80099a0:	2201      	movs	r2, #1
 80099a2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80099a4:	e046      	b.n	8009a34 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 80099a6:	4b27      	ldr	r3, [pc, #156]	; (8009a44 <vTaskSwitchContext+0xb4>)
 80099a8:	2200      	movs	r2, #0
 80099aa:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80099ac:	4b26      	ldr	r3, [pc, #152]	; (8009a48 <vTaskSwitchContext+0xb8>)
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	60fb      	str	r3, [r7, #12]
 80099b2:	e010      	b.n	80099d6 <vTaskSwitchContext+0x46>
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	d10a      	bne.n	80099d0 <vTaskSwitchContext+0x40>
	__asm volatile
 80099ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099be:	f383 8811 	msr	BASEPRI, r3
 80099c2:	f3bf 8f6f 	isb	sy
 80099c6:	f3bf 8f4f 	dsb	sy
 80099ca:	607b      	str	r3, [r7, #4]
}
 80099cc:	bf00      	nop
 80099ce:	e7fe      	b.n	80099ce <vTaskSwitchContext+0x3e>
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	3b01      	subs	r3, #1
 80099d4:	60fb      	str	r3, [r7, #12]
 80099d6:	491d      	ldr	r1, [pc, #116]	; (8009a4c <vTaskSwitchContext+0xbc>)
 80099d8:	68fa      	ldr	r2, [r7, #12]
 80099da:	4613      	mov	r3, r2
 80099dc:	009b      	lsls	r3, r3, #2
 80099de:	4413      	add	r3, r2
 80099e0:	009b      	lsls	r3, r3, #2
 80099e2:	440b      	add	r3, r1
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	d0e4      	beq.n	80099b4 <vTaskSwitchContext+0x24>
 80099ea:	68fa      	ldr	r2, [r7, #12]
 80099ec:	4613      	mov	r3, r2
 80099ee:	009b      	lsls	r3, r3, #2
 80099f0:	4413      	add	r3, r2
 80099f2:	009b      	lsls	r3, r3, #2
 80099f4:	4a15      	ldr	r2, [pc, #84]	; (8009a4c <vTaskSwitchContext+0xbc>)
 80099f6:	4413      	add	r3, r2
 80099f8:	60bb      	str	r3, [r7, #8]
 80099fa:	68bb      	ldr	r3, [r7, #8]
 80099fc:	685b      	ldr	r3, [r3, #4]
 80099fe:	685a      	ldr	r2, [r3, #4]
 8009a00:	68bb      	ldr	r3, [r7, #8]
 8009a02:	605a      	str	r2, [r3, #4]
 8009a04:	68bb      	ldr	r3, [r7, #8]
 8009a06:	685a      	ldr	r2, [r3, #4]
 8009a08:	68bb      	ldr	r3, [r7, #8]
 8009a0a:	3308      	adds	r3, #8
 8009a0c:	429a      	cmp	r2, r3
 8009a0e:	d104      	bne.n	8009a1a <vTaskSwitchContext+0x8a>
 8009a10:	68bb      	ldr	r3, [r7, #8]
 8009a12:	685b      	ldr	r3, [r3, #4]
 8009a14:	685a      	ldr	r2, [r3, #4]
 8009a16:	68bb      	ldr	r3, [r7, #8]
 8009a18:	605a      	str	r2, [r3, #4]
 8009a1a:	68bb      	ldr	r3, [r7, #8]
 8009a1c:	685b      	ldr	r3, [r3, #4]
 8009a1e:	68db      	ldr	r3, [r3, #12]
 8009a20:	4a0b      	ldr	r2, [pc, #44]	; (8009a50 <vTaskSwitchContext+0xc0>)
 8009a22:	6013      	str	r3, [r2, #0]
 8009a24:	4a08      	ldr	r2, [pc, #32]	; (8009a48 <vTaskSwitchContext+0xb8>)
 8009a26:	68fb      	ldr	r3, [r7, #12]
 8009a28:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009a2a:	4b09      	ldr	r3, [pc, #36]	; (8009a50 <vTaskSwitchContext+0xc0>)
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	3354      	adds	r3, #84	; 0x54
 8009a30:	4a08      	ldr	r2, [pc, #32]	; (8009a54 <vTaskSwitchContext+0xc4>)
 8009a32:	6013      	str	r3, [r2, #0]
}
 8009a34:	bf00      	nop
 8009a36:	3714      	adds	r7, #20
 8009a38:	46bd      	mov	sp, r7
 8009a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a3e:	4770      	bx	lr
 8009a40:	200019b8 	.word	0x200019b8
 8009a44:	200019a4 	.word	0x200019a4
 8009a48:	20001998 	.word	0x20001998
 8009a4c:	200014c0 	.word	0x200014c0
 8009a50:	200014bc 	.word	0x200014bc
 8009a54:	20000014 	.word	0x20000014

08009a58 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009a58:	b580      	push	{r7, lr}
 8009a5a:	b084      	sub	sp, #16
 8009a5c:	af00      	add	r7, sp, #0
 8009a5e:	6078      	str	r0, [r7, #4]
 8009a60:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	d10a      	bne.n	8009a7e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8009a68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a6c:	f383 8811 	msr	BASEPRI, r3
 8009a70:	f3bf 8f6f 	isb	sy
 8009a74:	f3bf 8f4f 	dsb	sy
 8009a78:	60fb      	str	r3, [r7, #12]
}
 8009a7a:	bf00      	nop
 8009a7c:	e7fe      	b.n	8009a7c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009a7e:	4b07      	ldr	r3, [pc, #28]	; (8009a9c <vTaskPlaceOnEventList+0x44>)
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	3318      	adds	r3, #24
 8009a84:	4619      	mov	r1, r3
 8009a86:	6878      	ldr	r0, [r7, #4]
 8009a88:	f7fe fe61 	bl	800874e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009a8c:	2101      	movs	r1, #1
 8009a8e:	6838      	ldr	r0, [r7, #0]
 8009a90:	f000 fa80 	bl	8009f94 <prvAddCurrentTaskToDelayedList>
}
 8009a94:	bf00      	nop
 8009a96:	3710      	adds	r7, #16
 8009a98:	46bd      	mov	sp, r7
 8009a9a:	bd80      	pop	{r7, pc}
 8009a9c:	200014bc 	.word	0x200014bc

08009aa0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009aa0:	b580      	push	{r7, lr}
 8009aa2:	b086      	sub	sp, #24
 8009aa4:	af00      	add	r7, sp, #0
 8009aa6:	60f8      	str	r0, [r7, #12]
 8009aa8:	60b9      	str	r1, [r7, #8]
 8009aaa:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8009aac:	68fb      	ldr	r3, [r7, #12]
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d10a      	bne.n	8009ac8 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8009ab2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ab6:	f383 8811 	msr	BASEPRI, r3
 8009aba:	f3bf 8f6f 	isb	sy
 8009abe:	f3bf 8f4f 	dsb	sy
 8009ac2:	617b      	str	r3, [r7, #20]
}
 8009ac4:	bf00      	nop
 8009ac6:	e7fe      	b.n	8009ac6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009ac8:	4b0a      	ldr	r3, [pc, #40]	; (8009af4 <vTaskPlaceOnEventListRestricted+0x54>)
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	3318      	adds	r3, #24
 8009ace:	4619      	mov	r1, r3
 8009ad0:	68f8      	ldr	r0, [r7, #12]
 8009ad2:	f7fe fe18 	bl	8008706 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	d002      	beq.n	8009ae2 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8009adc:	f04f 33ff 	mov.w	r3, #4294967295
 8009ae0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009ae2:	6879      	ldr	r1, [r7, #4]
 8009ae4:	68b8      	ldr	r0, [r7, #8]
 8009ae6:	f000 fa55 	bl	8009f94 <prvAddCurrentTaskToDelayedList>
	}
 8009aea:	bf00      	nop
 8009aec:	3718      	adds	r7, #24
 8009aee:	46bd      	mov	sp, r7
 8009af0:	bd80      	pop	{r7, pc}
 8009af2:	bf00      	nop
 8009af4:	200014bc 	.word	0x200014bc

08009af8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009af8:	b580      	push	{r7, lr}
 8009afa:	b086      	sub	sp, #24
 8009afc:	af00      	add	r7, sp, #0
 8009afe:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	68db      	ldr	r3, [r3, #12]
 8009b04:	68db      	ldr	r3, [r3, #12]
 8009b06:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009b08:	693b      	ldr	r3, [r7, #16]
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	d10a      	bne.n	8009b24 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8009b0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b12:	f383 8811 	msr	BASEPRI, r3
 8009b16:	f3bf 8f6f 	isb	sy
 8009b1a:	f3bf 8f4f 	dsb	sy
 8009b1e:	60fb      	str	r3, [r7, #12]
}
 8009b20:	bf00      	nop
 8009b22:	e7fe      	b.n	8009b22 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009b24:	693b      	ldr	r3, [r7, #16]
 8009b26:	3318      	adds	r3, #24
 8009b28:	4618      	mov	r0, r3
 8009b2a:	f7fe fe49 	bl	80087c0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009b2e:	4b1e      	ldr	r3, [pc, #120]	; (8009ba8 <xTaskRemoveFromEventList+0xb0>)
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	d11d      	bne.n	8009b72 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009b36:	693b      	ldr	r3, [r7, #16]
 8009b38:	3304      	adds	r3, #4
 8009b3a:	4618      	mov	r0, r3
 8009b3c:	f7fe fe40 	bl	80087c0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009b40:	693b      	ldr	r3, [r7, #16]
 8009b42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b44:	4b19      	ldr	r3, [pc, #100]	; (8009bac <xTaskRemoveFromEventList+0xb4>)
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	429a      	cmp	r2, r3
 8009b4a:	d903      	bls.n	8009b54 <xTaskRemoveFromEventList+0x5c>
 8009b4c:	693b      	ldr	r3, [r7, #16]
 8009b4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b50:	4a16      	ldr	r2, [pc, #88]	; (8009bac <xTaskRemoveFromEventList+0xb4>)
 8009b52:	6013      	str	r3, [r2, #0]
 8009b54:	693b      	ldr	r3, [r7, #16]
 8009b56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b58:	4613      	mov	r3, r2
 8009b5a:	009b      	lsls	r3, r3, #2
 8009b5c:	4413      	add	r3, r2
 8009b5e:	009b      	lsls	r3, r3, #2
 8009b60:	4a13      	ldr	r2, [pc, #76]	; (8009bb0 <xTaskRemoveFromEventList+0xb8>)
 8009b62:	441a      	add	r2, r3
 8009b64:	693b      	ldr	r3, [r7, #16]
 8009b66:	3304      	adds	r3, #4
 8009b68:	4619      	mov	r1, r3
 8009b6a:	4610      	mov	r0, r2
 8009b6c:	f7fe fdcb 	bl	8008706 <vListInsertEnd>
 8009b70:	e005      	b.n	8009b7e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009b72:	693b      	ldr	r3, [r7, #16]
 8009b74:	3318      	adds	r3, #24
 8009b76:	4619      	mov	r1, r3
 8009b78:	480e      	ldr	r0, [pc, #56]	; (8009bb4 <xTaskRemoveFromEventList+0xbc>)
 8009b7a:	f7fe fdc4 	bl	8008706 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009b7e:	693b      	ldr	r3, [r7, #16]
 8009b80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b82:	4b0d      	ldr	r3, [pc, #52]	; (8009bb8 <xTaskRemoveFromEventList+0xc0>)
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b88:	429a      	cmp	r2, r3
 8009b8a:	d905      	bls.n	8009b98 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009b8c:	2301      	movs	r3, #1
 8009b8e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009b90:	4b0a      	ldr	r3, [pc, #40]	; (8009bbc <xTaskRemoveFromEventList+0xc4>)
 8009b92:	2201      	movs	r2, #1
 8009b94:	601a      	str	r2, [r3, #0]
 8009b96:	e001      	b.n	8009b9c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8009b98:	2300      	movs	r3, #0
 8009b9a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009b9c:	697b      	ldr	r3, [r7, #20]
}
 8009b9e:	4618      	mov	r0, r3
 8009ba0:	3718      	adds	r7, #24
 8009ba2:	46bd      	mov	sp, r7
 8009ba4:	bd80      	pop	{r7, pc}
 8009ba6:	bf00      	nop
 8009ba8:	200019b8 	.word	0x200019b8
 8009bac:	20001998 	.word	0x20001998
 8009bb0:	200014c0 	.word	0x200014c0
 8009bb4:	20001950 	.word	0x20001950
 8009bb8:	200014bc 	.word	0x200014bc
 8009bbc:	200019a4 	.word	0x200019a4

08009bc0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009bc0:	b480      	push	{r7}
 8009bc2:	b083      	sub	sp, #12
 8009bc4:	af00      	add	r7, sp, #0
 8009bc6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009bc8:	4b06      	ldr	r3, [pc, #24]	; (8009be4 <vTaskInternalSetTimeOutState+0x24>)
 8009bca:	681a      	ldr	r2, [r3, #0]
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009bd0:	4b05      	ldr	r3, [pc, #20]	; (8009be8 <vTaskInternalSetTimeOutState+0x28>)
 8009bd2:	681a      	ldr	r2, [r3, #0]
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	605a      	str	r2, [r3, #4]
}
 8009bd8:	bf00      	nop
 8009bda:	370c      	adds	r7, #12
 8009bdc:	46bd      	mov	sp, r7
 8009bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009be2:	4770      	bx	lr
 8009be4:	200019a8 	.word	0x200019a8
 8009be8:	20001994 	.word	0x20001994

08009bec <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009bec:	b580      	push	{r7, lr}
 8009bee:	b088      	sub	sp, #32
 8009bf0:	af00      	add	r7, sp, #0
 8009bf2:	6078      	str	r0, [r7, #4]
 8009bf4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d10a      	bne.n	8009c12 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8009bfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c00:	f383 8811 	msr	BASEPRI, r3
 8009c04:	f3bf 8f6f 	isb	sy
 8009c08:	f3bf 8f4f 	dsb	sy
 8009c0c:	613b      	str	r3, [r7, #16]
}
 8009c0e:	bf00      	nop
 8009c10:	e7fe      	b.n	8009c10 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8009c12:	683b      	ldr	r3, [r7, #0]
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	d10a      	bne.n	8009c2e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8009c18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c1c:	f383 8811 	msr	BASEPRI, r3
 8009c20:	f3bf 8f6f 	isb	sy
 8009c24:	f3bf 8f4f 	dsb	sy
 8009c28:	60fb      	str	r3, [r7, #12]
}
 8009c2a:	bf00      	nop
 8009c2c:	e7fe      	b.n	8009c2c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8009c2e:	f000 fe81 	bl	800a934 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009c32:	4b1d      	ldr	r3, [pc, #116]	; (8009ca8 <xTaskCheckForTimeOut+0xbc>)
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	685b      	ldr	r3, [r3, #4]
 8009c3c:	69ba      	ldr	r2, [r7, #24]
 8009c3e:	1ad3      	subs	r3, r2, r3
 8009c40:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009c42:	683b      	ldr	r3, [r7, #0]
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c4a:	d102      	bne.n	8009c52 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009c4c:	2300      	movs	r3, #0
 8009c4e:	61fb      	str	r3, [r7, #28]
 8009c50:	e023      	b.n	8009c9a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	681a      	ldr	r2, [r3, #0]
 8009c56:	4b15      	ldr	r3, [pc, #84]	; (8009cac <xTaskCheckForTimeOut+0xc0>)
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	429a      	cmp	r2, r3
 8009c5c:	d007      	beq.n	8009c6e <xTaskCheckForTimeOut+0x82>
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	685b      	ldr	r3, [r3, #4]
 8009c62:	69ba      	ldr	r2, [r7, #24]
 8009c64:	429a      	cmp	r2, r3
 8009c66:	d302      	bcc.n	8009c6e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009c68:	2301      	movs	r3, #1
 8009c6a:	61fb      	str	r3, [r7, #28]
 8009c6c:	e015      	b.n	8009c9a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009c6e:	683b      	ldr	r3, [r7, #0]
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	697a      	ldr	r2, [r7, #20]
 8009c74:	429a      	cmp	r2, r3
 8009c76:	d20b      	bcs.n	8009c90 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009c78:	683b      	ldr	r3, [r7, #0]
 8009c7a:	681a      	ldr	r2, [r3, #0]
 8009c7c:	697b      	ldr	r3, [r7, #20]
 8009c7e:	1ad2      	subs	r2, r2, r3
 8009c80:	683b      	ldr	r3, [r7, #0]
 8009c82:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009c84:	6878      	ldr	r0, [r7, #4]
 8009c86:	f7ff ff9b 	bl	8009bc0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009c8a:	2300      	movs	r3, #0
 8009c8c:	61fb      	str	r3, [r7, #28]
 8009c8e:	e004      	b.n	8009c9a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8009c90:	683b      	ldr	r3, [r7, #0]
 8009c92:	2200      	movs	r2, #0
 8009c94:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009c96:	2301      	movs	r3, #1
 8009c98:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009c9a:	f000 fe7b 	bl	800a994 <vPortExitCritical>

	return xReturn;
 8009c9e:	69fb      	ldr	r3, [r7, #28]
}
 8009ca0:	4618      	mov	r0, r3
 8009ca2:	3720      	adds	r7, #32
 8009ca4:	46bd      	mov	sp, r7
 8009ca6:	bd80      	pop	{r7, pc}
 8009ca8:	20001994 	.word	0x20001994
 8009cac:	200019a8 	.word	0x200019a8

08009cb0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009cb0:	b480      	push	{r7}
 8009cb2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009cb4:	4b03      	ldr	r3, [pc, #12]	; (8009cc4 <vTaskMissedYield+0x14>)
 8009cb6:	2201      	movs	r2, #1
 8009cb8:	601a      	str	r2, [r3, #0]
}
 8009cba:	bf00      	nop
 8009cbc:	46bd      	mov	sp, r7
 8009cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cc2:	4770      	bx	lr
 8009cc4:	200019a4 	.word	0x200019a4

08009cc8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009cc8:	b580      	push	{r7, lr}
 8009cca:	b082      	sub	sp, #8
 8009ccc:	af00      	add	r7, sp, #0
 8009cce:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009cd0:	f000 f852 	bl	8009d78 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009cd4:	4b06      	ldr	r3, [pc, #24]	; (8009cf0 <prvIdleTask+0x28>)
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	2b01      	cmp	r3, #1
 8009cda:	d9f9      	bls.n	8009cd0 <prvIdleTask+0x8>
			{
				taskYIELD();
 8009cdc:	4b05      	ldr	r3, [pc, #20]	; (8009cf4 <prvIdleTask+0x2c>)
 8009cde:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009ce2:	601a      	str	r2, [r3, #0]
 8009ce4:	f3bf 8f4f 	dsb	sy
 8009ce8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009cec:	e7f0      	b.n	8009cd0 <prvIdleTask+0x8>
 8009cee:	bf00      	nop
 8009cf0:	200014c0 	.word	0x200014c0
 8009cf4:	e000ed04 	.word	0xe000ed04

08009cf8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009cf8:	b580      	push	{r7, lr}
 8009cfa:	b082      	sub	sp, #8
 8009cfc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009cfe:	2300      	movs	r3, #0
 8009d00:	607b      	str	r3, [r7, #4]
 8009d02:	e00c      	b.n	8009d1e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009d04:	687a      	ldr	r2, [r7, #4]
 8009d06:	4613      	mov	r3, r2
 8009d08:	009b      	lsls	r3, r3, #2
 8009d0a:	4413      	add	r3, r2
 8009d0c:	009b      	lsls	r3, r3, #2
 8009d0e:	4a12      	ldr	r2, [pc, #72]	; (8009d58 <prvInitialiseTaskLists+0x60>)
 8009d10:	4413      	add	r3, r2
 8009d12:	4618      	mov	r0, r3
 8009d14:	f7fe fcca 	bl	80086ac <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	3301      	adds	r3, #1
 8009d1c:	607b      	str	r3, [r7, #4]
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	2b37      	cmp	r3, #55	; 0x37
 8009d22:	d9ef      	bls.n	8009d04 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009d24:	480d      	ldr	r0, [pc, #52]	; (8009d5c <prvInitialiseTaskLists+0x64>)
 8009d26:	f7fe fcc1 	bl	80086ac <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009d2a:	480d      	ldr	r0, [pc, #52]	; (8009d60 <prvInitialiseTaskLists+0x68>)
 8009d2c:	f7fe fcbe 	bl	80086ac <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009d30:	480c      	ldr	r0, [pc, #48]	; (8009d64 <prvInitialiseTaskLists+0x6c>)
 8009d32:	f7fe fcbb 	bl	80086ac <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009d36:	480c      	ldr	r0, [pc, #48]	; (8009d68 <prvInitialiseTaskLists+0x70>)
 8009d38:	f7fe fcb8 	bl	80086ac <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009d3c:	480b      	ldr	r0, [pc, #44]	; (8009d6c <prvInitialiseTaskLists+0x74>)
 8009d3e:	f7fe fcb5 	bl	80086ac <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009d42:	4b0b      	ldr	r3, [pc, #44]	; (8009d70 <prvInitialiseTaskLists+0x78>)
 8009d44:	4a05      	ldr	r2, [pc, #20]	; (8009d5c <prvInitialiseTaskLists+0x64>)
 8009d46:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009d48:	4b0a      	ldr	r3, [pc, #40]	; (8009d74 <prvInitialiseTaskLists+0x7c>)
 8009d4a:	4a05      	ldr	r2, [pc, #20]	; (8009d60 <prvInitialiseTaskLists+0x68>)
 8009d4c:	601a      	str	r2, [r3, #0]
}
 8009d4e:	bf00      	nop
 8009d50:	3708      	adds	r7, #8
 8009d52:	46bd      	mov	sp, r7
 8009d54:	bd80      	pop	{r7, pc}
 8009d56:	bf00      	nop
 8009d58:	200014c0 	.word	0x200014c0
 8009d5c:	20001920 	.word	0x20001920
 8009d60:	20001934 	.word	0x20001934
 8009d64:	20001950 	.word	0x20001950
 8009d68:	20001964 	.word	0x20001964
 8009d6c:	2000197c 	.word	0x2000197c
 8009d70:	20001948 	.word	0x20001948
 8009d74:	2000194c 	.word	0x2000194c

08009d78 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009d78:	b580      	push	{r7, lr}
 8009d7a:	b082      	sub	sp, #8
 8009d7c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009d7e:	e019      	b.n	8009db4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009d80:	f000 fdd8 	bl	800a934 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009d84:	4b10      	ldr	r3, [pc, #64]	; (8009dc8 <prvCheckTasksWaitingTermination+0x50>)
 8009d86:	68db      	ldr	r3, [r3, #12]
 8009d88:	68db      	ldr	r3, [r3, #12]
 8009d8a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	3304      	adds	r3, #4
 8009d90:	4618      	mov	r0, r3
 8009d92:	f7fe fd15 	bl	80087c0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009d96:	4b0d      	ldr	r3, [pc, #52]	; (8009dcc <prvCheckTasksWaitingTermination+0x54>)
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	3b01      	subs	r3, #1
 8009d9c:	4a0b      	ldr	r2, [pc, #44]	; (8009dcc <prvCheckTasksWaitingTermination+0x54>)
 8009d9e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009da0:	4b0b      	ldr	r3, [pc, #44]	; (8009dd0 <prvCheckTasksWaitingTermination+0x58>)
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	3b01      	subs	r3, #1
 8009da6:	4a0a      	ldr	r2, [pc, #40]	; (8009dd0 <prvCheckTasksWaitingTermination+0x58>)
 8009da8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009daa:	f000 fdf3 	bl	800a994 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009dae:	6878      	ldr	r0, [r7, #4]
 8009db0:	f000 f810 	bl	8009dd4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009db4:	4b06      	ldr	r3, [pc, #24]	; (8009dd0 <prvCheckTasksWaitingTermination+0x58>)
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	d1e1      	bne.n	8009d80 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009dbc:	bf00      	nop
 8009dbe:	bf00      	nop
 8009dc0:	3708      	adds	r7, #8
 8009dc2:	46bd      	mov	sp, r7
 8009dc4:	bd80      	pop	{r7, pc}
 8009dc6:	bf00      	nop
 8009dc8:	20001964 	.word	0x20001964
 8009dcc:	20001990 	.word	0x20001990
 8009dd0:	20001978 	.word	0x20001978

08009dd4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009dd4:	b580      	push	{r7, lr}
 8009dd6:	b084      	sub	sp, #16
 8009dd8:	af00      	add	r7, sp, #0
 8009dda:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	3354      	adds	r3, #84	; 0x54
 8009de0:	4618      	mov	r0, r3
 8009de2:	f001 fd41 	bl	800b868 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	d108      	bne.n	8009e02 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009df4:	4618      	mov	r0, r3
 8009df6:	f000 ff8b 	bl	800ad10 <vPortFree>
				vPortFree( pxTCB );
 8009dfa:	6878      	ldr	r0, [r7, #4]
 8009dfc:	f000 ff88 	bl	800ad10 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009e00:	e018      	b.n	8009e34 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8009e08:	2b01      	cmp	r3, #1
 8009e0a:	d103      	bne.n	8009e14 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8009e0c:	6878      	ldr	r0, [r7, #4]
 8009e0e:	f000 ff7f 	bl	800ad10 <vPortFree>
	}
 8009e12:	e00f      	b.n	8009e34 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8009e1a:	2b02      	cmp	r3, #2
 8009e1c:	d00a      	beq.n	8009e34 <prvDeleteTCB+0x60>
	__asm volatile
 8009e1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e22:	f383 8811 	msr	BASEPRI, r3
 8009e26:	f3bf 8f6f 	isb	sy
 8009e2a:	f3bf 8f4f 	dsb	sy
 8009e2e:	60fb      	str	r3, [r7, #12]
}
 8009e30:	bf00      	nop
 8009e32:	e7fe      	b.n	8009e32 <prvDeleteTCB+0x5e>
	}
 8009e34:	bf00      	nop
 8009e36:	3710      	adds	r7, #16
 8009e38:	46bd      	mov	sp, r7
 8009e3a:	bd80      	pop	{r7, pc}

08009e3c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009e3c:	b480      	push	{r7}
 8009e3e:	b083      	sub	sp, #12
 8009e40:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009e42:	4b0c      	ldr	r3, [pc, #48]	; (8009e74 <prvResetNextTaskUnblockTime+0x38>)
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d104      	bne.n	8009e56 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009e4c:	4b0a      	ldr	r3, [pc, #40]	; (8009e78 <prvResetNextTaskUnblockTime+0x3c>)
 8009e4e:	f04f 32ff 	mov.w	r2, #4294967295
 8009e52:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009e54:	e008      	b.n	8009e68 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009e56:	4b07      	ldr	r3, [pc, #28]	; (8009e74 <prvResetNextTaskUnblockTime+0x38>)
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	68db      	ldr	r3, [r3, #12]
 8009e5c:	68db      	ldr	r3, [r3, #12]
 8009e5e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	685b      	ldr	r3, [r3, #4]
 8009e64:	4a04      	ldr	r2, [pc, #16]	; (8009e78 <prvResetNextTaskUnblockTime+0x3c>)
 8009e66:	6013      	str	r3, [r2, #0]
}
 8009e68:	bf00      	nop
 8009e6a:	370c      	adds	r7, #12
 8009e6c:	46bd      	mov	sp, r7
 8009e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e72:	4770      	bx	lr
 8009e74:	20001948 	.word	0x20001948
 8009e78:	200019b0 	.word	0x200019b0

08009e7c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009e7c:	b480      	push	{r7}
 8009e7e:	b083      	sub	sp, #12
 8009e80:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009e82:	4b0b      	ldr	r3, [pc, #44]	; (8009eb0 <xTaskGetSchedulerState+0x34>)
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	d102      	bne.n	8009e90 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009e8a:	2301      	movs	r3, #1
 8009e8c:	607b      	str	r3, [r7, #4]
 8009e8e:	e008      	b.n	8009ea2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009e90:	4b08      	ldr	r3, [pc, #32]	; (8009eb4 <xTaskGetSchedulerState+0x38>)
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	d102      	bne.n	8009e9e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009e98:	2302      	movs	r3, #2
 8009e9a:	607b      	str	r3, [r7, #4]
 8009e9c:	e001      	b.n	8009ea2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009e9e:	2300      	movs	r3, #0
 8009ea0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009ea2:	687b      	ldr	r3, [r7, #4]
	}
 8009ea4:	4618      	mov	r0, r3
 8009ea6:	370c      	adds	r7, #12
 8009ea8:	46bd      	mov	sp, r7
 8009eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eae:	4770      	bx	lr
 8009eb0:	2000199c 	.word	0x2000199c
 8009eb4:	200019b8 	.word	0x200019b8

08009eb8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009eb8:	b580      	push	{r7, lr}
 8009eba:	b086      	sub	sp, #24
 8009ebc:	af00      	add	r7, sp, #0
 8009ebe:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009ec4:	2300      	movs	r3, #0
 8009ec6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d056      	beq.n	8009f7c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009ece:	4b2e      	ldr	r3, [pc, #184]	; (8009f88 <xTaskPriorityDisinherit+0xd0>)
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	693a      	ldr	r2, [r7, #16]
 8009ed4:	429a      	cmp	r2, r3
 8009ed6:	d00a      	beq.n	8009eee <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8009ed8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009edc:	f383 8811 	msr	BASEPRI, r3
 8009ee0:	f3bf 8f6f 	isb	sy
 8009ee4:	f3bf 8f4f 	dsb	sy
 8009ee8:	60fb      	str	r3, [r7, #12]
}
 8009eea:	bf00      	nop
 8009eec:	e7fe      	b.n	8009eec <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8009eee:	693b      	ldr	r3, [r7, #16]
 8009ef0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	d10a      	bne.n	8009f0c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8009ef6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009efa:	f383 8811 	msr	BASEPRI, r3
 8009efe:	f3bf 8f6f 	isb	sy
 8009f02:	f3bf 8f4f 	dsb	sy
 8009f06:	60bb      	str	r3, [r7, #8]
}
 8009f08:	bf00      	nop
 8009f0a:	e7fe      	b.n	8009f0a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8009f0c:	693b      	ldr	r3, [r7, #16]
 8009f0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009f10:	1e5a      	subs	r2, r3, #1
 8009f12:	693b      	ldr	r3, [r7, #16]
 8009f14:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009f16:	693b      	ldr	r3, [r7, #16]
 8009f18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f1a:	693b      	ldr	r3, [r7, #16]
 8009f1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009f1e:	429a      	cmp	r2, r3
 8009f20:	d02c      	beq.n	8009f7c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009f22:	693b      	ldr	r3, [r7, #16]
 8009f24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	d128      	bne.n	8009f7c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009f2a:	693b      	ldr	r3, [r7, #16]
 8009f2c:	3304      	adds	r3, #4
 8009f2e:	4618      	mov	r0, r3
 8009f30:	f7fe fc46 	bl	80087c0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009f34:	693b      	ldr	r3, [r7, #16]
 8009f36:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009f38:	693b      	ldr	r3, [r7, #16]
 8009f3a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009f3c:	693b      	ldr	r3, [r7, #16]
 8009f3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f40:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009f44:	693b      	ldr	r3, [r7, #16]
 8009f46:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009f48:	693b      	ldr	r3, [r7, #16]
 8009f4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f4c:	4b0f      	ldr	r3, [pc, #60]	; (8009f8c <xTaskPriorityDisinherit+0xd4>)
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	429a      	cmp	r2, r3
 8009f52:	d903      	bls.n	8009f5c <xTaskPriorityDisinherit+0xa4>
 8009f54:	693b      	ldr	r3, [r7, #16]
 8009f56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f58:	4a0c      	ldr	r2, [pc, #48]	; (8009f8c <xTaskPriorityDisinherit+0xd4>)
 8009f5a:	6013      	str	r3, [r2, #0]
 8009f5c:	693b      	ldr	r3, [r7, #16]
 8009f5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f60:	4613      	mov	r3, r2
 8009f62:	009b      	lsls	r3, r3, #2
 8009f64:	4413      	add	r3, r2
 8009f66:	009b      	lsls	r3, r3, #2
 8009f68:	4a09      	ldr	r2, [pc, #36]	; (8009f90 <xTaskPriorityDisinherit+0xd8>)
 8009f6a:	441a      	add	r2, r3
 8009f6c:	693b      	ldr	r3, [r7, #16]
 8009f6e:	3304      	adds	r3, #4
 8009f70:	4619      	mov	r1, r3
 8009f72:	4610      	mov	r0, r2
 8009f74:	f7fe fbc7 	bl	8008706 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009f78:	2301      	movs	r3, #1
 8009f7a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009f7c:	697b      	ldr	r3, [r7, #20]
	}
 8009f7e:	4618      	mov	r0, r3
 8009f80:	3718      	adds	r7, #24
 8009f82:	46bd      	mov	sp, r7
 8009f84:	bd80      	pop	{r7, pc}
 8009f86:	bf00      	nop
 8009f88:	200014bc 	.word	0x200014bc
 8009f8c:	20001998 	.word	0x20001998
 8009f90:	200014c0 	.word	0x200014c0

08009f94 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009f94:	b580      	push	{r7, lr}
 8009f96:	b084      	sub	sp, #16
 8009f98:	af00      	add	r7, sp, #0
 8009f9a:	6078      	str	r0, [r7, #4]
 8009f9c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009f9e:	4b21      	ldr	r3, [pc, #132]	; (800a024 <prvAddCurrentTaskToDelayedList+0x90>)
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009fa4:	4b20      	ldr	r3, [pc, #128]	; (800a028 <prvAddCurrentTaskToDelayedList+0x94>)
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	3304      	adds	r3, #4
 8009faa:	4618      	mov	r0, r3
 8009fac:	f7fe fc08 	bl	80087c0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009fb6:	d10a      	bne.n	8009fce <prvAddCurrentTaskToDelayedList+0x3a>
 8009fb8:	683b      	ldr	r3, [r7, #0]
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	d007      	beq.n	8009fce <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009fbe:	4b1a      	ldr	r3, [pc, #104]	; (800a028 <prvAddCurrentTaskToDelayedList+0x94>)
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	3304      	adds	r3, #4
 8009fc4:	4619      	mov	r1, r3
 8009fc6:	4819      	ldr	r0, [pc, #100]	; (800a02c <prvAddCurrentTaskToDelayedList+0x98>)
 8009fc8:	f7fe fb9d 	bl	8008706 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009fcc:	e026      	b.n	800a01c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009fce:	68fa      	ldr	r2, [r7, #12]
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	4413      	add	r3, r2
 8009fd4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009fd6:	4b14      	ldr	r3, [pc, #80]	; (800a028 <prvAddCurrentTaskToDelayedList+0x94>)
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	68ba      	ldr	r2, [r7, #8]
 8009fdc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009fde:	68ba      	ldr	r2, [r7, #8]
 8009fe0:	68fb      	ldr	r3, [r7, #12]
 8009fe2:	429a      	cmp	r2, r3
 8009fe4:	d209      	bcs.n	8009ffa <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009fe6:	4b12      	ldr	r3, [pc, #72]	; (800a030 <prvAddCurrentTaskToDelayedList+0x9c>)
 8009fe8:	681a      	ldr	r2, [r3, #0]
 8009fea:	4b0f      	ldr	r3, [pc, #60]	; (800a028 <prvAddCurrentTaskToDelayedList+0x94>)
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	3304      	adds	r3, #4
 8009ff0:	4619      	mov	r1, r3
 8009ff2:	4610      	mov	r0, r2
 8009ff4:	f7fe fbab 	bl	800874e <vListInsert>
}
 8009ff8:	e010      	b.n	800a01c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009ffa:	4b0e      	ldr	r3, [pc, #56]	; (800a034 <prvAddCurrentTaskToDelayedList+0xa0>)
 8009ffc:	681a      	ldr	r2, [r3, #0]
 8009ffe:	4b0a      	ldr	r3, [pc, #40]	; (800a028 <prvAddCurrentTaskToDelayedList+0x94>)
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	3304      	adds	r3, #4
 800a004:	4619      	mov	r1, r3
 800a006:	4610      	mov	r0, r2
 800a008:	f7fe fba1 	bl	800874e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a00c:	4b0a      	ldr	r3, [pc, #40]	; (800a038 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	68ba      	ldr	r2, [r7, #8]
 800a012:	429a      	cmp	r2, r3
 800a014:	d202      	bcs.n	800a01c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800a016:	4a08      	ldr	r2, [pc, #32]	; (800a038 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a018:	68bb      	ldr	r3, [r7, #8]
 800a01a:	6013      	str	r3, [r2, #0]
}
 800a01c:	bf00      	nop
 800a01e:	3710      	adds	r7, #16
 800a020:	46bd      	mov	sp, r7
 800a022:	bd80      	pop	{r7, pc}
 800a024:	20001994 	.word	0x20001994
 800a028:	200014bc 	.word	0x200014bc
 800a02c:	2000197c 	.word	0x2000197c
 800a030:	2000194c 	.word	0x2000194c
 800a034:	20001948 	.word	0x20001948
 800a038:	200019b0 	.word	0x200019b0

0800a03c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800a03c:	b580      	push	{r7, lr}
 800a03e:	b08a      	sub	sp, #40	; 0x28
 800a040:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800a042:	2300      	movs	r3, #0
 800a044:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800a046:	f000 fb07 	bl	800a658 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800a04a:	4b1c      	ldr	r3, [pc, #112]	; (800a0bc <xTimerCreateTimerTask+0x80>)
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	2b00      	cmp	r3, #0
 800a050:	d021      	beq.n	800a096 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800a052:	2300      	movs	r3, #0
 800a054:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800a056:	2300      	movs	r3, #0
 800a058:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800a05a:	1d3a      	adds	r2, r7, #4
 800a05c:	f107 0108 	add.w	r1, r7, #8
 800a060:	f107 030c 	add.w	r3, r7, #12
 800a064:	4618      	mov	r0, r3
 800a066:	f7fe fb07 	bl	8008678 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800a06a:	6879      	ldr	r1, [r7, #4]
 800a06c:	68bb      	ldr	r3, [r7, #8]
 800a06e:	68fa      	ldr	r2, [r7, #12]
 800a070:	9202      	str	r2, [sp, #8]
 800a072:	9301      	str	r3, [sp, #4]
 800a074:	2302      	movs	r3, #2
 800a076:	9300      	str	r3, [sp, #0]
 800a078:	2300      	movs	r3, #0
 800a07a:	460a      	mov	r2, r1
 800a07c:	4910      	ldr	r1, [pc, #64]	; (800a0c0 <xTimerCreateTimerTask+0x84>)
 800a07e:	4811      	ldr	r0, [pc, #68]	; (800a0c4 <xTimerCreateTimerTask+0x88>)
 800a080:	f7ff f8b4 	bl	80091ec <xTaskCreateStatic>
 800a084:	4603      	mov	r3, r0
 800a086:	4a10      	ldr	r2, [pc, #64]	; (800a0c8 <xTimerCreateTimerTask+0x8c>)
 800a088:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800a08a:	4b0f      	ldr	r3, [pc, #60]	; (800a0c8 <xTimerCreateTimerTask+0x8c>)
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	2b00      	cmp	r3, #0
 800a090:	d001      	beq.n	800a096 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800a092:	2301      	movs	r3, #1
 800a094:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800a096:	697b      	ldr	r3, [r7, #20]
 800a098:	2b00      	cmp	r3, #0
 800a09a:	d10a      	bne.n	800a0b2 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800a09c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0a0:	f383 8811 	msr	BASEPRI, r3
 800a0a4:	f3bf 8f6f 	isb	sy
 800a0a8:	f3bf 8f4f 	dsb	sy
 800a0ac:	613b      	str	r3, [r7, #16]
}
 800a0ae:	bf00      	nop
 800a0b0:	e7fe      	b.n	800a0b0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800a0b2:	697b      	ldr	r3, [r7, #20]
}
 800a0b4:	4618      	mov	r0, r3
 800a0b6:	3718      	adds	r7, #24
 800a0b8:	46bd      	mov	sp, r7
 800a0ba:	bd80      	pop	{r7, pc}
 800a0bc:	200019ec 	.word	0x200019ec
 800a0c0:	0800c340 	.word	0x0800c340
 800a0c4:	0800a201 	.word	0x0800a201
 800a0c8:	200019f0 	.word	0x200019f0

0800a0cc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800a0cc:	b580      	push	{r7, lr}
 800a0ce:	b08a      	sub	sp, #40	; 0x28
 800a0d0:	af00      	add	r7, sp, #0
 800a0d2:	60f8      	str	r0, [r7, #12]
 800a0d4:	60b9      	str	r1, [r7, #8]
 800a0d6:	607a      	str	r2, [r7, #4]
 800a0d8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800a0da:	2300      	movs	r3, #0
 800a0dc:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800a0de:	68fb      	ldr	r3, [r7, #12]
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	d10a      	bne.n	800a0fa <xTimerGenericCommand+0x2e>
	__asm volatile
 800a0e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0e8:	f383 8811 	msr	BASEPRI, r3
 800a0ec:	f3bf 8f6f 	isb	sy
 800a0f0:	f3bf 8f4f 	dsb	sy
 800a0f4:	623b      	str	r3, [r7, #32]
}
 800a0f6:	bf00      	nop
 800a0f8:	e7fe      	b.n	800a0f8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800a0fa:	4b1a      	ldr	r3, [pc, #104]	; (800a164 <xTimerGenericCommand+0x98>)
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	d02a      	beq.n	800a158 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800a102:	68bb      	ldr	r3, [r7, #8]
 800a104:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800a10a:	68fb      	ldr	r3, [r7, #12]
 800a10c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800a10e:	68bb      	ldr	r3, [r7, #8]
 800a110:	2b05      	cmp	r3, #5
 800a112:	dc18      	bgt.n	800a146 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800a114:	f7ff feb2 	bl	8009e7c <xTaskGetSchedulerState>
 800a118:	4603      	mov	r3, r0
 800a11a:	2b02      	cmp	r3, #2
 800a11c:	d109      	bne.n	800a132 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800a11e:	4b11      	ldr	r3, [pc, #68]	; (800a164 <xTimerGenericCommand+0x98>)
 800a120:	6818      	ldr	r0, [r3, #0]
 800a122:	f107 0110 	add.w	r1, r7, #16
 800a126:	2300      	movs	r3, #0
 800a128:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a12a:	f7fe fc77 	bl	8008a1c <xQueueGenericSend>
 800a12e:	6278      	str	r0, [r7, #36]	; 0x24
 800a130:	e012      	b.n	800a158 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800a132:	4b0c      	ldr	r3, [pc, #48]	; (800a164 <xTimerGenericCommand+0x98>)
 800a134:	6818      	ldr	r0, [r3, #0]
 800a136:	f107 0110 	add.w	r1, r7, #16
 800a13a:	2300      	movs	r3, #0
 800a13c:	2200      	movs	r2, #0
 800a13e:	f7fe fc6d 	bl	8008a1c <xQueueGenericSend>
 800a142:	6278      	str	r0, [r7, #36]	; 0x24
 800a144:	e008      	b.n	800a158 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800a146:	4b07      	ldr	r3, [pc, #28]	; (800a164 <xTimerGenericCommand+0x98>)
 800a148:	6818      	ldr	r0, [r3, #0]
 800a14a:	f107 0110 	add.w	r1, r7, #16
 800a14e:	2300      	movs	r3, #0
 800a150:	683a      	ldr	r2, [r7, #0]
 800a152:	f7fe fd61 	bl	8008c18 <xQueueGenericSendFromISR>
 800a156:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800a158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a15a:	4618      	mov	r0, r3
 800a15c:	3728      	adds	r7, #40	; 0x28
 800a15e:	46bd      	mov	sp, r7
 800a160:	bd80      	pop	{r7, pc}
 800a162:	bf00      	nop
 800a164:	200019ec 	.word	0x200019ec

0800a168 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800a168:	b580      	push	{r7, lr}
 800a16a:	b088      	sub	sp, #32
 800a16c:	af02      	add	r7, sp, #8
 800a16e:	6078      	str	r0, [r7, #4]
 800a170:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a172:	4b22      	ldr	r3, [pc, #136]	; (800a1fc <prvProcessExpiredTimer+0x94>)
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	68db      	ldr	r3, [r3, #12]
 800a178:	68db      	ldr	r3, [r3, #12]
 800a17a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a17c:	697b      	ldr	r3, [r7, #20]
 800a17e:	3304      	adds	r3, #4
 800a180:	4618      	mov	r0, r3
 800a182:	f7fe fb1d 	bl	80087c0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a186:	697b      	ldr	r3, [r7, #20]
 800a188:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a18c:	f003 0304 	and.w	r3, r3, #4
 800a190:	2b00      	cmp	r3, #0
 800a192:	d022      	beq.n	800a1da <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800a194:	697b      	ldr	r3, [r7, #20]
 800a196:	699a      	ldr	r2, [r3, #24]
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	18d1      	adds	r1, r2, r3
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	683a      	ldr	r2, [r7, #0]
 800a1a0:	6978      	ldr	r0, [r7, #20]
 800a1a2:	f000 f8d1 	bl	800a348 <prvInsertTimerInActiveList>
 800a1a6:	4603      	mov	r3, r0
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d01f      	beq.n	800a1ec <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a1ac:	2300      	movs	r3, #0
 800a1ae:	9300      	str	r3, [sp, #0]
 800a1b0:	2300      	movs	r3, #0
 800a1b2:	687a      	ldr	r2, [r7, #4]
 800a1b4:	2100      	movs	r1, #0
 800a1b6:	6978      	ldr	r0, [r7, #20]
 800a1b8:	f7ff ff88 	bl	800a0cc <xTimerGenericCommand>
 800a1bc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800a1be:	693b      	ldr	r3, [r7, #16]
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	d113      	bne.n	800a1ec <prvProcessExpiredTimer+0x84>
	__asm volatile
 800a1c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1c8:	f383 8811 	msr	BASEPRI, r3
 800a1cc:	f3bf 8f6f 	isb	sy
 800a1d0:	f3bf 8f4f 	dsb	sy
 800a1d4:	60fb      	str	r3, [r7, #12]
}
 800a1d6:	bf00      	nop
 800a1d8:	e7fe      	b.n	800a1d8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a1da:	697b      	ldr	r3, [r7, #20]
 800a1dc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a1e0:	f023 0301 	bic.w	r3, r3, #1
 800a1e4:	b2da      	uxtb	r2, r3
 800a1e6:	697b      	ldr	r3, [r7, #20]
 800a1e8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a1ec:	697b      	ldr	r3, [r7, #20]
 800a1ee:	6a1b      	ldr	r3, [r3, #32]
 800a1f0:	6978      	ldr	r0, [r7, #20]
 800a1f2:	4798      	blx	r3
}
 800a1f4:	bf00      	nop
 800a1f6:	3718      	adds	r7, #24
 800a1f8:	46bd      	mov	sp, r7
 800a1fa:	bd80      	pop	{r7, pc}
 800a1fc:	200019e4 	.word	0x200019e4

0800a200 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800a200:	b580      	push	{r7, lr}
 800a202:	b084      	sub	sp, #16
 800a204:	af00      	add	r7, sp, #0
 800a206:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a208:	f107 0308 	add.w	r3, r7, #8
 800a20c:	4618      	mov	r0, r3
 800a20e:	f000 f857 	bl	800a2c0 <prvGetNextExpireTime>
 800a212:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800a214:	68bb      	ldr	r3, [r7, #8]
 800a216:	4619      	mov	r1, r3
 800a218:	68f8      	ldr	r0, [r7, #12]
 800a21a:	f000 f803 	bl	800a224 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800a21e:	f000 f8d5 	bl	800a3cc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a222:	e7f1      	b.n	800a208 <prvTimerTask+0x8>

0800a224 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800a224:	b580      	push	{r7, lr}
 800a226:	b084      	sub	sp, #16
 800a228:	af00      	add	r7, sp, #0
 800a22a:	6078      	str	r0, [r7, #4]
 800a22c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800a22e:	f7ff fa39 	bl	80096a4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a232:	f107 0308 	add.w	r3, r7, #8
 800a236:	4618      	mov	r0, r3
 800a238:	f000 f866 	bl	800a308 <prvSampleTimeNow>
 800a23c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800a23e:	68bb      	ldr	r3, [r7, #8]
 800a240:	2b00      	cmp	r3, #0
 800a242:	d130      	bne.n	800a2a6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800a244:	683b      	ldr	r3, [r7, #0]
 800a246:	2b00      	cmp	r3, #0
 800a248:	d10a      	bne.n	800a260 <prvProcessTimerOrBlockTask+0x3c>
 800a24a:	687a      	ldr	r2, [r7, #4]
 800a24c:	68fb      	ldr	r3, [r7, #12]
 800a24e:	429a      	cmp	r2, r3
 800a250:	d806      	bhi.n	800a260 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800a252:	f7ff fa35 	bl	80096c0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800a256:	68f9      	ldr	r1, [r7, #12]
 800a258:	6878      	ldr	r0, [r7, #4]
 800a25a:	f7ff ff85 	bl	800a168 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800a25e:	e024      	b.n	800a2aa <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800a260:	683b      	ldr	r3, [r7, #0]
 800a262:	2b00      	cmp	r3, #0
 800a264:	d008      	beq.n	800a278 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800a266:	4b13      	ldr	r3, [pc, #76]	; (800a2b4 <prvProcessTimerOrBlockTask+0x90>)
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	d101      	bne.n	800a274 <prvProcessTimerOrBlockTask+0x50>
 800a270:	2301      	movs	r3, #1
 800a272:	e000      	b.n	800a276 <prvProcessTimerOrBlockTask+0x52>
 800a274:	2300      	movs	r3, #0
 800a276:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800a278:	4b0f      	ldr	r3, [pc, #60]	; (800a2b8 <prvProcessTimerOrBlockTask+0x94>)
 800a27a:	6818      	ldr	r0, [r3, #0]
 800a27c:	687a      	ldr	r2, [r7, #4]
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	1ad3      	subs	r3, r2, r3
 800a282:	683a      	ldr	r2, [r7, #0]
 800a284:	4619      	mov	r1, r3
 800a286:	f7fe ff7d 	bl	8009184 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800a28a:	f7ff fa19 	bl	80096c0 <xTaskResumeAll>
 800a28e:	4603      	mov	r3, r0
 800a290:	2b00      	cmp	r3, #0
 800a292:	d10a      	bne.n	800a2aa <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800a294:	4b09      	ldr	r3, [pc, #36]	; (800a2bc <prvProcessTimerOrBlockTask+0x98>)
 800a296:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a29a:	601a      	str	r2, [r3, #0]
 800a29c:	f3bf 8f4f 	dsb	sy
 800a2a0:	f3bf 8f6f 	isb	sy
}
 800a2a4:	e001      	b.n	800a2aa <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800a2a6:	f7ff fa0b 	bl	80096c0 <xTaskResumeAll>
}
 800a2aa:	bf00      	nop
 800a2ac:	3710      	adds	r7, #16
 800a2ae:	46bd      	mov	sp, r7
 800a2b0:	bd80      	pop	{r7, pc}
 800a2b2:	bf00      	nop
 800a2b4:	200019e8 	.word	0x200019e8
 800a2b8:	200019ec 	.word	0x200019ec
 800a2bc:	e000ed04 	.word	0xe000ed04

0800a2c0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800a2c0:	b480      	push	{r7}
 800a2c2:	b085      	sub	sp, #20
 800a2c4:	af00      	add	r7, sp, #0
 800a2c6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a2c8:	4b0e      	ldr	r3, [pc, #56]	; (800a304 <prvGetNextExpireTime+0x44>)
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	d101      	bne.n	800a2d6 <prvGetNextExpireTime+0x16>
 800a2d2:	2201      	movs	r2, #1
 800a2d4:	e000      	b.n	800a2d8 <prvGetNextExpireTime+0x18>
 800a2d6:	2200      	movs	r2, #0
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	d105      	bne.n	800a2f0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a2e4:	4b07      	ldr	r3, [pc, #28]	; (800a304 <prvGetNextExpireTime+0x44>)
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	68db      	ldr	r3, [r3, #12]
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	60fb      	str	r3, [r7, #12]
 800a2ee:	e001      	b.n	800a2f4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800a2f0:	2300      	movs	r3, #0
 800a2f2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800a2f4:	68fb      	ldr	r3, [r7, #12]
}
 800a2f6:	4618      	mov	r0, r3
 800a2f8:	3714      	adds	r7, #20
 800a2fa:	46bd      	mov	sp, r7
 800a2fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a300:	4770      	bx	lr
 800a302:	bf00      	nop
 800a304:	200019e4 	.word	0x200019e4

0800a308 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800a308:	b580      	push	{r7, lr}
 800a30a:	b084      	sub	sp, #16
 800a30c:	af00      	add	r7, sp, #0
 800a30e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800a310:	f7ff fa74 	bl	80097fc <xTaskGetTickCount>
 800a314:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800a316:	4b0b      	ldr	r3, [pc, #44]	; (800a344 <prvSampleTimeNow+0x3c>)
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	68fa      	ldr	r2, [r7, #12]
 800a31c:	429a      	cmp	r2, r3
 800a31e:	d205      	bcs.n	800a32c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800a320:	f000 f936 	bl	800a590 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	2201      	movs	r2, #1
 800a328:	601a      	str	r2, [r3, #0]
 800a32a:	e002      	b.n	800a332 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	2200      	movs	r2, #0
 800a330:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800a332:	4a04      	ldr	r2, [pc, #16]	; (800a344 <prvSampleTimeNow+0x3c>)
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800a338:	68fb      	ldr	r3, [r7, #12]
}
 800a33a:	4618      	mov	r0, r3
 800a33c:	3710      	adds	r7, #16
 800a33e:	46bd      	mov	sp, r7
 800a340:	bd80      	pop	{r7, pc}
 800a342:	bf00      	nop
 800a344:	200019f4 	.word	0x200019f4

0800a348 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800a348:	b580      	push	{r7, lr}
 800a34a:	b086      	sub	sp, #24
 800a34c:	af00      	add	r7, sp, #0
 800a34e:	60f8      	str	r0, [r7, #12]
 800a350:	60b9      	str	r1, [r7, #8]
 800a352:	607a      	str	r2, [r7, #4]
 800a354:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800a356:	2300      	movs	r3, #0
 800a358:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a35a:	68fb      	ldr	r3, [r7, #12]
 800a35c:	68ba      	ldr	r2, [r7, #8]
 800a35e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a360:	68fb      	ldr	r3, [r7, #12]
 800a362:	68fa      	ldr	r2, [r7, #12]
 800a364:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800a366:	68ba      	ldr	r2, [r7, #8]
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	429a      	cmp	r2, r3
 800a36c:	d812      	bhi.n	800a394 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a36e:	687a      	ldr	r2, [r7, #4]
 800a370:	683b      	ldr	r3, [r7, #0]
 800a372:	1ad2      	subs	r2, r2, r3
 800a374:	68fb      	ldr	r3, [r7, #12]
 800a376:	699b      	ldr	r3, [r3, #24]
 800a378:	429a      	cmp	r2, r3
 800a37a:	d302      	bcc.n	800a382 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800a37c:	2301      	movs	r3, #1
 800a37e:	617b      	str	r3, [r7, #20]
 800a380:	e01b      	b.n	800a3ba <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a382:	4b10      	ldr	r3, [pc, #64]	; (800a3c4 <prvInsertTimerInActiveList+0x7c>)
 800a384:	681a      	ldr	r2, [r3, #0]
 800a386:	68fb      	ldr	r3, [r7, #12]
 800a388:	3304      	adds	r3, #4
 800a38a:	4619      	mov	r1, r3
 800a38c:	4610      	mov	r0, r2
 800a38e:	f7fe f9de 	bl	800874e <vListInsert>
 800a392:	e012      	b.n	800a3ba <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a394:	687a      	ldr	r2, [r7, #4]
 800a396:	683b      	ldr	r3, [r7, #0]
 800a398:	429a      	cmp	r2, r3
 800a39a:	d206      	bcs.n	800a3aa <prvInsertTimerInActiveList+0x62>
 800a39c:	68ba      	ldr	r2, [r7, #8]
 800a39e:	683b      	ldr	r3, [r7, #0]
 800a3a0:	429a      	cmp	r2, r3
 800a3a2:	d302      	bcc.n	800a3aa <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800a3a4:	2301      	movs	r3, #1
 800a3a6:	617b      	str	r3, [r7, #20]
 800a3a8:	e007      	b.n	800a3ba <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a3aa:	4b07      	ldr	r3, [pc, #28]	; (800a3c8 <prvInsertTimerInActiveList+0x80>)
 800a3ac:	681a      	ldr	r2, [r3, #0]
 800a3ae:	68fb      	ldr	r3, [r7, #12]
 800a3b0:	3304      	adds	r3, #4
 800a3b2:	4619      	mov	r1, r3
 800a3b4:	4610      	mov	r0, r2
 800a3b6:	f7fe f9ca 	bl	800874e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800a3ba:	697b      	ldr	r3, [r7, #20]
}
 800a3bc:	4618      	mov	r0, r3
 800a3be:	3718      	adds	r7, #24
 800a3c0:	46bd      	mov	sp, r7
 800a3c2:	bd80      	pop	{r7, pc}
 800a3c4:	200019e8 	.word	0x200019e8
 800a3c8:	200019e4 	.word	0x200019e4

0800a3cc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800a3cc:	b580      	push	{r7, lr}
 800a3ce:	b08e      	sub	sp, #56	; 0x38
 800a3d0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a3d2:	e0ca      	b.n	800a56a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	da18      	bge.n	800a40c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800a3da:	1d3b      	adds	r3, r7, #4
 800a3dc:	3304      	adds	r3, #4
 800a3de:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800a3e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3e2:	2b00      	cmp	r3, #0
 800a3e4:	d10a      	bne.n	800a3fc <prvProcessReceivedCommands+0x30>
	__asm volatile
 800a3e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3ea:	f383 8811 	msr	BASEPRI, r3
 800a3ee:	f3bf 8f6f 	isb	sy
 800a3f2:	f3bf 8f4f 	dsb	sy
 800a3f6:	61fb      	str	r3, [r7, #28]
}
 800a3f8:	bf00      	nop
 800a3fa:	e7fe      	b.n	800a3fa <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800a3fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a402:	6850      	ldr	r0, [r2, #4]
 800a404:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a406:	6892      	ldr	r2, [r2, #8]
 800a408:	4611      	mov	r1, r2
 800a40a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	2b00      	cmp	r3, #0
 800a410:	f2c0 80aa 	blt.w	800a568 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800a414:	68fb      	ldr	r3, [r7, #12]
 800a416:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800a418:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a41a:	695b      	ldr	r3, [r3, #20]
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	d004      	beq.n	800a42a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a420:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a422:	3304      	adds	r3, #4
 800a424:	4618      	mov	r0, r3
 800a426:	f7fe f9cb 	bl	80087c0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a42a:	463b      	mov	r3, r7
 800a42c:	4618      	mov	r0, r3
 800a42e:	f7ff ff6b 	bl	800a308 <prvSampleTimeNow>
 800a432:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	2b09      	cmp	r3, #9
 800a438:	f200 8097 	bhi.w	800a56a <prvProcessReceivedCommands+0x19e>
 800a43c:	a201      	add	r2, pc, #4	; (adr r2, 800a444 <prvProcessReceivedCommands+0x78>)
 800a43e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a442:	bf00      	nop
 800a444:	0800a46d 	.word	0x0800a46d
 800a448:	0800a46d 	.word	0x0800a46d
 800a44c:	0800a46d 	.word	0x0800a46d
 800a450:	0800a4e1 	.word	0x0800a4e1
 800a454:	0800a4f5 	.word	0x0800a4f5
 800a458:	0800a53f 	.word	0x0800a53f
 800a45c:	0800a46d 	.word	0x0800a46d
 800a460:	0800a46d 	.word	0x0800a46d
 800a464:	0800a4e1 	.word	0x0800a4e1
 800a468:	0800a4f5 	.word	0x0800a4f5
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a46c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a46e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a472:	f043 0301 	orr.w	r3, r3, #1
 800a476:	b2da      	uxtb	r2, r3
 800a478:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a47a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a47e:	68ba      	ldr	r2, [r7, #8]
 800a480:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a482:	699b      	ldr	r3, [r3, #24]
 800a484:	18d1      	adds	r1, r2, r3
 800a486:	68bb      	ldr	r3, [r7, #8]
 800a488:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a48a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a48c:	f7ff ff5c 	bl	800a348 <prvInsertTimerInActiveList>
 800a490:	4603      	mov	r3, r0
 800a492:	2b00      	cmp	r3, #0
 800a494:	d069      	beq.n	800a56a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a496:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a498:	6a1b      	ldr	r3, [r3, #32]
 800a49a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a49c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a49e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4a0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a4a4:	f003 0304 	and.w	r3, r3, #4
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	d05e      	beq.n	800a56a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800a4ac:	68ba      	ldr	r2, [r7, #8]
 800a4ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4b0:	699b      	ldr	r3, [r3, #24]
 800a4b2:	441a      	add	r2, r3
 800a4b4:	2300      	movs	r3, #0
 800a4b6:	9300      	str	r3, [sp, #0]
 800a4b8:	2300      	movs	r3, #0
 800a4ba:	2100      	movs	r1, #0
 800a4bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a4be:	f7ff fe05 	bl	800a0cc <xTimerGenericCommand>
 800a4c2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800a4c4:	6a3b      	ldr	r3, [r7, #32]
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	d14f      	bne.n	800a56a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800a4ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4ce:	f383 8811 	msr	BASEPRI, r3
 800a4d2:	f3bf 8f6f 	isb	sy
 800a4d6:	f3bf 8f4f 	dsb	sy
 800a4da:	61bb      	str	r3, [r7, #24]
}
 800a4dc:	bf00      	nop
 800a4de:	e7fe      	b.n	800a4de <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a4e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4e2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a4e6:	f023 0301 	bic.w	r3, r3, #1
 800a4ea:	b2da      	uxtb	r2, r3
 800a4ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4ee:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800a4f2:	e03a      	b.n	800a56a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a4f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4f6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a4fa:	f043 0301 	orr.w	r3, r3, #1
 800a4fe:	b2da      	uxtb	r2, r3
 800a500:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a502:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800a506:	68ba      	ldr	r2, [r7, #8]
 800a508:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a50a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800a50c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a50e:	699b      	ldr	r3, [r3, #24]
 800a510:	2b00      	cmp	r3, #0
 800a512:	d10a      	bne.n	800a52a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800a514:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a518:	f383 8811 	msr	BASEPRI, r3
 800a51c:	f3bf 8f6f 	isb	sy
 800a520:	f3bf 8f4f 	dsb	sy
 800a524:	617b      	str	r3, [r7, #20]
}
 800a526:	bf00      	nop
 800a528:	e7fe      	b.n	800a528 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a52a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a52c:	699a      	ldr	r2, [r3, #24]
 800a52e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a530:	18d1      	adds	r1, r2, r3
 800a532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a534:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a536:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a538:	f7ff ff06 	bl	800a348 <prvInsertTimerInActiveList>
					break;
 800a53c:	e015      	b.n	800a56a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800a53e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a540:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a544:	f003 0302 	and.w	r3, r3, #2
 800a548:	2b00      	cmp	r3, #0
 800a54a:	d103      	bne.n	800a554 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800a54c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a54e:	f000 fbdf 	bl	800ad10 <vPortFree>
 800a552:	e00a      	b.n	800a56a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a554:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a556:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a55a:	f023 0301 	bic.w	r3, r3, #1
 800a55e:	b2da      	uxtb	r2, r3
 800a560:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a562:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800a566:	e000      	b.n	800a56a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800a568:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a56a:	4b08      	ldr	r3, [pc, #32]	; (800a58c <prvProcessReceivedCommands+0x1c0>)
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	1d39      	adds	r1, r7, #4
 800a570:	2200      	movs	r2, #0
 800a572:	4618      	mov	r0, r3
 800a574:	f7fe fbec 	bl	8008d50 <xQueueReceive>
 800a578:	4603      	mov	r3, r0
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	f47f af2a 	bne.w	800a3d4 <prvProcessReceivedCommands+0x8>
	}
}
 800a580:	bf00      	nop
 800a582:	bf00      	nop
 800a584:	3730      	adds	r7, #48	; 0x30
 800a586:	46bd      	mov	sp, r7
 800a588:	bd80      	pop	{r7, pc}
 800a58a:	bf00      	nop
 800a58c:	200019ec 	.word	0x200019ec

0800a590 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800a590:	b580      	push	{r7, lr}
 800a592:	b088      	sub	sp, #32
 800a594:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a596:	e048      	b.n	800a62a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a598:	4b2d      	ldr	r3, [pc, #180]	; (800a650 <prvSwitchTimerLists+0xc0>)
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	68db      	ldr	r3, [r3, #12]
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a5a2:	4b2b      	ldr	r3, [pc, #172]	; (800a650 <prvSwitchTimerLists+0xc0>)
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	68db      	ldr	r3, [r3, #12]
 800a5a8:	68db      	ldr	r3, [r3, #12]
 800a5aa:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a5ac:	68fb      	ldr	r3, [r7, #12]
 800a5ae:	3304      	adds	r3, #4
 800a5b0:	4618      	mov	r0, r3
 800a5b2:	f7fe f905 	bl	80087c0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a5b6:	68fb      	ldr	r3, [r7, #12]
 800a5b8:	6a1b      	ldr	r3, [r3, #32]
 800a5ba:	68f8      	ldr	r0, [r7, #12]
 800a5bc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a5be:	68fb      	ldr	r3, [r7, #12]
 800a5c0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a5c4:	f003 0304 	and.w	r3, r3, #4
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	d02e      	beq.n	800a62a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a5cc:	68fb      	ldr	r3, [r7, #12]
 800a5ce:	699b      	ldr	r3, [r3, #24]
 800a5d0:	693a      	ldr	r2, [r7, #16]
 800a5d2:	4413      	add	r3, r2
 800a5d4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800a5d6:	68ba      	ldr	r2, [r7, #8]
 800a5d8:	693b      	ldr	r3, [r7, #16]
 800a5da:	429a      	cmp	r2, r3
 800a5dc:	d90e      	bls.n	800a5fc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800a5de:	68fb      	ldr	r3, [r7, #12]
 800a5e0:	68ba      	ldr	r2, [r7, #8]
 800a5e2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a5e4:	68fb      	ldr	r3, [r7, #12]
 800a5e6:	68fa      	ldr	r2, [r7, #12]
 800a5e8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a5ea:	4b19      	ldr	r3, [pc, #100]	; (800a650 <prvSwitchTimerLists+0xc0>)
 800a5ec:	681a      	ldr	r2, [r3, #0]
 800a5ee:	68fb      	ldr	r3, [r7, #12]
 800a5f0:	3304      	adds	r3, #4
 800a5f2:	4619      	mov	r1, r3
 800a5f4:	4610      	mov	r0, r2
 800a5f6:	f7fe f8aa 	bl	800874e <vListInsert>
 800a5fa:	e016      	b.n	800a62a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a5fc:	2300      	movs	r3, #0
 800a5fe:	9300      	str	r3, [sp, #0]
 800a600:	2300      	movs	r3, #0
 800a602:	693a      	ldr	r2, [r7, #16]
 800a604:	2100      	movs	r1, #0
 800a606:	68f8      	ldr	r0, [r7, #12]
 800a608:	f7ff fd60 	bl	800a0cc <xTimerGenericCommand>
 800a60c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	2b00      	cmp	r3, #0
 800a612:	d10a      	bne.n	800a62a <prvSwitchTimerLists+0x9a>
	__asm volatile
 800a614:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a618:	f383 8811 	msr	BASEPRI, r3
 800a61c:	f3bf 8f6f 	isb	sy
 800a620:	f3bf 8f4f 	dsb	sy
 800a624:	603b      	str	r3, [r7, #0]
}
 800a626:	bf00      	nop
 800a628:	e7fe      	b.n	800a628 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a62a:	4b09      	ldr	r3, [pc, #36]	; (800a650 <prvSwitchTimerLists+0xc0>)
 800a62c:	681b      	ldr	r3, [r3, #0]
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	2b00      	cmp	r3, #0
 800a632:	d1b1      	bne.n	800a598 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800a634:	4b06      	ldr	r3, [pc, #24]	; (800a650 <prvSwitchTimerLists+0xc0>)
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800a63a:	4b06      	ldr	r3, [pc, #24]	; (800a654 <prvSwitchTimerLists+0xc4>)
 800a63c:	681b      	ldr	r3, [r3, #0]
 800a63e:	4a04      	ldr	r2, [pc, #16]	; (800a650 <prvSwitchTimerLists+0xc0>)
 800a640:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800a642:	4a04      	ldr	r2, [pc, #16]	; (800a654 <prvSwitchTimerLists+0xc4>)
 800a644:	697b      	ldr	r3, [r7, #20]
 800a646:	6013      	str	r3, [r2, #0]
}
 800a648:	bf00      	nop
 800a64a:	3718      	adds	r7, #24
 800a64c:	46bd      	mov	sp, r7
 800a64e:	bd80      	pop	{r7, pc}
 800a650:	200019e4 	.word	0x200019e4
 800a654:	200019e8 	.word	0x200019e8

0800a658 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800a658:	b580      	push	{r7, lr}
 800a65a:	b082      	sub	sp, #8
 800a65c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800a65e:	f000 f969 	bl	800a934 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800a662:	4b15      	ldr	r3, [pc, #84]	; (800a6b8 <prvCheckForValidListAndQueue+0x60>)
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	2b00      	cmp	r3, #0
 800a668:	d120      	bne.n	800a6ac <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800a66a:	4814      	ldr	r0, [pc, #80]	; (800a6bc <prvCheckForValidListAndQueue+0x64>)
 800a66c:	f7fe f81e 	bl	80086ac <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a670:	4813      	ldr	r0, [pc, #76]	; (800a6c0 <prvCheckForValidListAndQueue+0x68>)
 800a672:	f7fe f81b 	bl	80086ac <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a676:	4b13      	ldr	r3, [pc, #76]	; (800a6c4 <prvCheckForValidListAndQueue+0x6c>)
 800a678:	4a10      	ldr	r2, [pc, #64]	; (800a6bc <prvCheckForValidListAndQueue+0x64>)
 800a67a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a67c:	4b12      	ldr	r3, [pc, #72]	; (800a6c8 <prvCheckForValidListAndQueue+0x70>)
 800a67e:	4a10      	ldr	r2, [pc, #64]	; (800a6c0 <prvCheckForValidListAndQueue+0x68>)
 800a680:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a682:	2300      	movs	r3, #0
 800a684:	9300      	str	r3, [sp, #0]
 800a686:	4b11      	ldr	r3, [pc, #68]	; (800a6cc <prvCheckForValidListAndQueue+0x74>)
 800a688:	4a11      	ldr	r2, [pc, #68]	; (800a6d0 <prvCheckForValidListAndQueue+0x78>)
 800a68a:	2110      	movs	r1, #16
 800a68c:	200a      	movs	r0, #10
 800a68e:	f7fe f929 	bl	80088e4 <xQueueGenericCreateStatic>
 800a692:	4603      	mov	r3, r0
 800a694:	4a08      	ldr	r2, [pc, #32]	; (800a6b8 <prvCheckForValidListAndQueue+0x60>)
 800a696:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800a698:	4b07      	ldr	r3, [pc, #28]	; (800a6b8 <prvCheckForValidListAndQueue+0x60>)
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	2b00      	cmp	r3, #0
 800a69e:	d005      	beq.n	800a6ac <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a6a0:	4b05      	ldr	r3, [pc, #20]	; (800a6b8 <prvCheckForValidListAndQueue+0x60>)
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	490b      	ldr	r1, [pc, #44]	; (800a6d4 <prvCheckForValidListAndQueue+0x7c>)
 800a6a6:	4618      	mov	r0, r3
 800a6a8:	f7fe fd42 	bl	8009130 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a6ac:	f000 f972 	bl	800a994 <vPortExitCritical>
}
 800a6b0:	bf00      	nop
 800a6b2:	46bd      	mov	sp, r7
 800a6b4:	bd80      	pop	{r7, pc}
 800a6b6:	bf00      	nop
 800a6b8:	200019ec 	.word	0x200019ec
 800a6bc:	200019bc 	.word	0x200019bc
 800a6c0:	200019d0 	.word	0x200019d0
 800a6c4:	200019e4 	.word	0x200019e4
 800a6c8:	200019e8 	.word	0x200019e8
 800a6cc:	20001a98 	.word	0x20001a98
 800a6d0:	200019f8 	.word	0x200019f8
 800a6d4:	0800c348 	.word	0x0800c348

0800a6d8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a6d8:	b480      	push	{r7}
 800a6da:	b085      	sub	sp, #20
 800a6dc:	af00      	add	r7, sp, #0
 800a6de:	60f8      	str	r0, [r7, #12]
 800a6e0:	60b9      	str	r1, [r7, #8]
 800a6e2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a6e4:	68fb      	ldr	r3, [r7, #12]
 800a6e6:	3b04      	subs	r3, #4
 800a6e8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a6ea:	68fb      	ldr	r3, [r7, #12]
 800a6ec:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800a6f0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a6f2:	68fb      	ldr	r3, [r7, #12]
 800a6f4:	3b04      	subs	r3, #4
 800a6f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a6f8:	68bb      	ldr	r3, [r7, #8]
 800a6fa:	f023 0201 	bic.w	r2, r3, #1
 800a6fe:	68fb      	ldr	r3, [r7, #12]
 800a700:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a702:	68fb      	ldr	r3, [r7, #12]
 800a704:	3b04      	subs	r3, #4
 800a706:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a708:	4a0c      	ldr	r2, [pc, #48]	; (800a73c <pxPortInitialiseStack+0x64>)
 800a70a:	68fb      	ldr	r3, [r7, #12]
 800a70c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a70e:	68fb      	ldr	r3, [r7, #12]
 800a710:	3b14      	subs	r3, #20
 800a712:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a714:	687a      	ldr	r2, [r7, #4]
 800a716:	68fb      	ldr	r3, [r7, #12]
 800a718:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a71a:	68fb      	ldr	r3, [r7, #12]
 800a71c:	3b04      	subs	r3, #4
 800a71e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a720:	68fb      	ldr	r3, [r7, #12]
 800a722:	f06f 0202 	mvn.w	r2, #2
 800a726:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a728:	68fb      	ldr	r3, [r7, #12]
 800a72a:	3b20      	subs	r3, #32
 800a72c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a72e:	68fb      	ldr	r3, [r7, #12]
}
 800a730:	4618      	mov	r0, r3
 800a732:	3714      	adds	r7, #20
 800a734:	46bd      	mov	sp, r7
 800a736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a73a:	4770      	bx	lr
 800a73c:	0800a741 	.word	0x0800a741

0800a740 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a740:	b480      	push	{r7}
 800a742:	b085      	sub	sp, #20
 800a744:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a746:	2300      	movs	r3, #0
 800a748:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a74a:	4b12      	ldr	r3, [pc, #72]	; (800a794 <prvTaskExitError+0x54>)
 800a74c:	681b      	ldr	r3, [r3, #0]
 800a74e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a752:	d00a      	beq.n	800a76a <prvTaskExitError+0x2a>
	__asm volatile
 800a754:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a758:	f383 8811 	msr	BASEPRI, r3
 800a75c:	f3bf 8f6f 	isb	sy
 800a760:	f3bf 8f4f 	dsb	sy
 800a764:	60fb      	str	r3, [r7, #12]
}
 800a766:	bf00      	nop
 800a768:	e7fe      	b.n	800a768 <prvTaskExitError+0x28>
	__asm volatile
 800a76a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a76e:	f383 8811 	msr	BASEPRI, r3
 800a772:	f3bf 8f6f 	isb	sy
 800a776:	f3bf 8f4f 	dsb	sy
 800a77a:	60bb      	str	r3, [r7, #8]
}
 800a77c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a77e:	bf00      	nop
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	2b00      	cmp	r3, #0
 800a784:	d0fc      	beq.n	800a780 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a786:	bf00      	nop
 800a788:	bf00      	nop
 800a78a:	3714      	adds	r7, #20
 800a78c:	46bd      	mov	sp, r7
 800a78e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a792:	4770      	bx	lr
 800a794:	2000000c 	.word	0x2000000c
	...

0800a7a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a7a0:	4b07      	ldr	r3, [pc, #28]	; (800a7c0 <pxCurrentTCBConst2>)
 800a7a2:	6819      	ldr	r1, [r3, #0]
 800a7a4:	6808      	ldr	r0, [r1, #0]
 800a7a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a7aa:	f380 8809 	msr	PSP, r0
 800a7ae:	f3bf 8f6f 	isb	sy
 800a7b2:	f04f 0000 	mov.w	r0, #0
 800a7b6:	f380 8811 	msr	BASEPRI, r0
 800a7ba:	4770      	bx	lr
 800a7bc:	f3af 8000 	nop.w

0800a7c0 <pxCurrentTCBConst2>:
 800a7c0:	200014bc 	.word	0x200014bc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a7c4:	bf00      	nop
 800a7c6:	bf00      	nop

0800a7c8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a7c8:	4808      	ldr	r0, [pc, #32]	; (800a7ec <prvPortStartFirstTask+0x24>)
 800a7ca:	6800      	ldr	r0, [r0, #0]
 800a7cc:	6800      	ldr	r0, [r0, #0]
 800a7ce:	f380 8808 	msr	MSP, r0
 800a7d2:	f04f 0000 	mov.w	r0, #0
 800a7d6:	f380 8814 	msr	CONTROL, r0
 800a7da:	b662      	cpsie	i
 800a7dc:	b661      	cpsie	f
 800a7de:	f3bf 8f4f 	dsb	sy
 800a7e2:	f3bf 8f6f 	isb	sy
 800a7e6:	df00      	svc	0
 800a7e8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a7ea:	bf00      	nop
 800a7ec:	e000ed08 	.word	0xe000ed08

0800a7f0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a7f0:	b580      	push	{r7, lr}
 800a7f2:	b086      	sub	sp, #24
 800a7f4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a7f6:	4b46      	ldr	r3, [pc, #280]	; (800a910 <xPortStartScheduler+0x120>)
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	4a46      	ldr	r2, [pc, #280]	; (800a914 <xPortStartScheduler+0x124>)
 800a7fc:	4293      	cmp	r3, r2
 800a7fe:	d10a      	bne.n	800a816 <xPortStartScheduler+0x26>
	__asm volatile
 800a800:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a804:	f383 8811 	msr	BASEPRI, r3
 800a808:	f3bf 8f6f 	isb	sy
 800a80c:	f3bf 8f4f 	dsb	sy
 800a810:	613b      	str	r3, [r7, #16]
}
 800a812:	bf00      	nop
 800a814:	e7fe      	b.n	800a814 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a816:	4b3e      	ldr	r3, [pc, #248]	; (800a910 <xPortStartScheduler+0x120>)
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	4a3f      	ldr	r2, [pc, #252]	; (800a918 <xPortStartScheduler+0x128>)
 800a81c:	4293      	cmp	r3, r2
 800a81e:	d10a      	bne.n	800a836 <xPortStartScheduler+0x46>
	__asm volatile
 800a820:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a824:	f383 8811 	msr	BASEPRI, r3
 800a828:	f3bf 8f6f 	isb	sy
 800a82c:	f3bf 8f4f 	dsb	sy
 800a830:	60fb      	str	r3, [r7, #12]
}
 800a832:	bf00      	nop
 800a834:	e7fe      	b.n	800a834 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a836:	4b39      	ldr	r3, [pc, #228]	; (800a91c <xPortStartScheduler+0x12c>)
 800a838:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a83a:	697b      	ldr	r3, [r7, #20]
 800a83c:	781b      	ldrb	r3, [r3, #0]
 800a83e:	b2db      	uxtb	r3, r3
 800a840:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a842:	697b      	ldr	r3, [r7, #20]
 800a844:	22ff      	movs	r2, #255	; 0xff
 800a846:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a848:	697b      	ldr	r3, [r7, #20]
 800a84a:	781b      	ldrb	r3, [r3, #0]
 800a84c:	b2db      	uxtb	r3, r3
 800a84e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a850:	78fb      	ldrb	r3, [r7, #3]
 800a852:	b2db      	uxtb	r3, r3
 800a854:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a858:	b2da      	uxtb	r2, r3
 800a85a:	4b31      	ldr	r3, [pc, #196]	; (800a920 <xPortStartScheduler+0x130>)
 800a85c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a85e:	4b31      	ldr	r3, [pc, #196]	; (800a924 <xPortStartScheduler+0x134>)
 800a860:	2207      	movs	r2, #7
 800a862:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a864:	e009      	b.n	800a87a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800a866:	4b2f      	ldr	r3, [pc, #188]	; (800a924 <xPortStartScheduler+0x134>)
 800a868:	681b      	ldr	r3, [r3, #0]
 800a86a:	3b01      	subs	r3, #1
 800a86c:	4a2d      	ldr	r2, [pc, #180]	; (800a924 <xPortStartScheduler+0x134>)
 800a86e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a870:	78fb      	ldrb	r3, [r7, #3]
 800a872:	b2db      	uxtb	r3, r3
 800a874:	005b      	lsls	r3, r3, #1
 800a876:	b2db      	uxtb	r3, r3
 800a878:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a87a:	78fb      	ldrb	r3, [r7, #3]
 800a87c:	b2db      	uxtb	r3, r3
 800a87e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a882:	2b80      	cmp	r3, #128	; 0x80
 800a884:	d0ef      	beq.n	800a866 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a886:	4b27      	ldr	r3, [pc, #156]	; (800a924 <xPortStartScheduler+0x134>)
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	f1c3 0307 	rsb	r3, r3, #7
 800a88e:	2b04      	cmp	r3, #4
 800a890:	d00a      	beq.n	800a8a8 <xPortStartScheduler+0xb8>
	__asm volatile
 800a892:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a896:	f383 8811 	msr	BASEPRI, r3
 800a89a:	f3bf 8f6f 	isb	sy
 800a89e:	f3bf 8f4f 	dsb	sy
 800a8a2:	60bb      	str	r3, [r7, #8]
}
 800a8a4:	bf00      	nop
 800a8a6:	e7fe      	b.n	800a8a6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a8a8:	4b1e      	ldr	r3, [pc, #120]	; (800a924 <xPortStartScheduler+0x134>)
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	021b      	lsls	r3, r3, #8
 800a8ae:	4a1d      	ldr	r2, [pc, #116]	; (800a924 <xPortStartScheduler+0x134>)
 800a8b0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a8b2:	4b1c      	ldr	r3, [pc, #112]	; (800a924 <xPortStartScheduler+0x134>)
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a8ba:	4a1a      	ldr	r2, [pc, #104]	; (800a924 <xPortStartScheduler+0x134>)
 800a8bc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	b2da      	uxtb	r2, r3
 800a8c2:	697b      	ldr	r3, [r7, #20]
 800a8c4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a8c6:	4b18      	ldr	r3, [pc, #96]	; (800a928 <xPortStartScheduler+0x138>)
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	4a17      	ldr	r2, [pc, #92]	; (800a928 <xPortStartScheduler+0x138>)
 800a8cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a8d0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a8d2:	4b15      	ldr	r3, [pc, #84]	; (800a928 <xPortStartScheduler+0x138>)
 800a8d4:	681b      	ldr	r3, [r3, #0]
 800a8d6:	4a14      	ldr	r2, [pc, #80]	; (800a928 <xPortStartScheduler+0x138>)
 800a8d8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800a8dc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a8de:	f000 f8dd 	bl	800aa9c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a8e2:	4b12      	ldr	r3, [pc, #72]	; (800a92c <xPortStartScheduler+0x13c>)
 800a8e4:	2200      	movs	r2, #0
 800a8e6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a8e8:	f000 f8fc 	bl	800aae4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a8ec:	4b10      	ldr	r3, [pc, #64]	; (800a930 <xPortStartScheduler+0x140>)
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	4a0f      	ldr	r2, [pc, #60]	; (800a930 <xPortStartScheduler+0x140>)
 800a8f2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800a8f6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a8f8:	f7ff ff66 	bl	800a7c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a8fc:	f7ff f848 	bl	8009990 <vTaskSwitchContext>
	prvTaskExitError();
 800a900:	f7ff ff1e 	bl	800a740 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a904:	2300      	movs	r3, #0
}
 800a906:	4618      	mov	r0, r3
 800a908:	3718      	adds	r7, #24
 800a90a:	46bd      	mov	sp, r7
 800a90c:	bd80      	pop	{r7, pc}
 800a90e:	bf00      	nop
 800a910:	e000ed00 	.word	0xe000ed00
 800a914:	410fc271 	.word	0x410fc271
 800a918:	410fc270 	.word	0x410fc270
 800a91c:	e000e400 	.word	0xe000e400
 800a920:	20001ae8 	.word	0x20001ae8
 800a924:	20001aec 	.word	0x20001aec
 800a928:	e000ed20 	.word	0xe000ed20
 800a92c:	2000000c 	.word	0x2000000c
 800a930:	e000ef34 	.word	0xe000ef34

0800a934 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a934:	b480      	push	{r7}
 800a936:	b083      	sub	sp, #12
 800a938:	af00      	add	r7, sp, #0
	__asm volatile
 800a93a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a93e:	f383 8811 	msr	BASEPRI, r3
 800a942:	f3bf 8f6f 	isb	sy
 800a946:	f3bf 8f4f 	dsb	sy
 800a94a:	607b      	str	r3, [r7, #4]
}
 800a94c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a94e:	4b0f      	ldr	r3, [pc, #60]	; (800a98c <vPortEnterCritical+0x58>)
 800a950:	681b      	ldr	r3, [r3, #0]
 800a952:	3301      	adds	r3, #1
 800a954:	4a0d      	ldr	r2, [pc, #52]	; (800a98c <vPortEnterCritical+0x58>)
 800a956:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a958:	4b0c      	ldr	r3, [pc, #48]	; (800a98c <vPortEnterCritical+0x58>)
 800a95a:	681b      	ldr	r3, [r3, #0]
 800a95c:	2b01      	cmp	r3, #1
 800a95e:	d10f      	bne.n	800a980 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a960:	4b0b      	ldr	r3, [pc, #44]	; (800a990 <vPortEnterCritical+0x5c>)
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	b2db      	uxtb	r3, r3
 800a966:	2b00      	cmp	r3, #0
 800a968:	d00a      	beq.n	800a980 <vPortEnterCritical+0x4c>
	__asm volatile
 800a96a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a96e:	f383 8811 	msr	BASEPRI, r3
 800a972:	f3bf 8f6f 	isb	sy
 800a976:	f3bf 8f4f 	dsb	sy
 800a97a:	603b      	str	r3, [r7, #0]
}
 800a97c:	bf00      	nop
 800a97e:	e7fe      	b.n	800a97e <vPortEnterCritical+0x4a>
	}
}
 800a980:	bf00      	nop
 800a982:	370c      	adds	r7, #12
 800a984:	46bd      	mov	sp, r7
 800a986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a98a:	4770      	bx	lr
 800a98c:	2000000c 	.word	0x2000000c
 800a990:	e000ed04 	.word	0xe000ed04

0800a994 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a994:	b480      	push	{r7}
 800a996:	b083      	sub	sp, #12
 800a998:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a99a:	4b12      	ldr	r3, [pc, #72]	; (800a9e4 <vPortExitCritical+0x50>)
 800a99c:	681b      	ldr	r3, [r3, #0]
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	d10a      	bne.n	800a9b8 <vPortExitCritical+0x24>
	__asm volatile
 800a9a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9a6:	f383 8811 	msr	BASEPRI, r3
 800a9aa:	f3bf 8f6f 	isb	sy
 800a9ae:	f3bf 8f4f 	dsb	sy
 800a9b2:	607b      	str	r3, [r7, #4]
}
 800a9b4:	bf00      	nop
 800a9b6:	e7fe      	b.n	800a9b6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800a9b8:	4b0a      	ldr	r3, [pc, #40]	; (800a9e4 <vPortExitCritical+0x50>)
 800a9ba:	681b      	ldr	r3, [r3, #0]
 800a9bc:	3b01      	subs	r3, #1
 800a9be:	4a09      	ldr	r2, [pc, #36]	; (800a9e4 <vPortExitCritical+0x50>)
 800a9c0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a9c2:	4b08      	ldr	r3, [pc, #32]	; (800a9e4 <vPortExitCritical+0x50>)
 800a9c4:	681b      	ldr	r3, [r3, #0]
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	d105      	bne.n	800a9d6 <vPortExitCritical+0x42>
 800a9ca:	2300      	movs	r3, #0
 800a9cc:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a9ce:	683b      	ldr	r3, [r7, #0]
 800a9d0:	f383 8811 	msr	BASEPRI, r3
}
 800a9d4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a9d6:	bf00      	nop
 800a9d8:	370c      	adds	r7, #12
 800a9da:	46bd      	mov	sp, r7
 800a9dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9e0:	4770      	bx	lr
 800a9e2:	bf00      	nop
 800a9e4:	2000000c 	.word	0x2000000c
	...

0800a9f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a9f0:	f3ef 8009 	mrs	r0, PSP
 800a9f4:	f3bf 8f6f 	isb	sy
 800a9f8:	4b15      	ldr	r3, [pc, #84]	; (800aa50 <pxCurrentTCBConst>)
 800a9fa:	681a      	ldr	r2, [r3, #0]
 800a9fc:	f01e 0f10 	tst.w	lr, #16
 800aa00:	bf08      	it	eq
 800aa02:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800aa06:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa0a:	6010      	str	r0, [r2, #0]
 800aa0c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800aa10:	f04f 0050 	mov.w	r0, #80	; 0x50
 800aa14:	f380 8811 	msr	BASEPRI, r0
 800aa18:	f3bf 8f4f 	dsb	sy
 800aa1c:	f3bf 8f6f 	isb	sy
 800aa20:	f7fe ffb6 	bl	8009990 <vTaskSwitchContext>
 800aa24:	f04f 0000 	mov.w	r0, #0
 800aa28:	f380 8811 	msr	BASEPRI, r0
 800aa2c:	bc09      	pop	{r0, r3}
 800aa2e:	6819      	ldr	r1, [r3, #0]
 800aa30:	6808      	ldr	r0, [r1, #0]
 800aa32:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa36:	f01e 0f10 	tst.w	lr, #16
 800aa3a:	bf08      	it	eq
 800aa3c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800aa40:	f380 8809 	msr	PSP, r0
 800aa44:	f3bf 8f6f 	isb	sy
 800aa48:	4770      	bx	lr
 800aa4a:	bf00      	nop
 800aa4c:	f3af 8000 	nop.w

0800aa50 <pxCurrentTCBConst>:
 800aa50:	200014bc 	.word	0x200014bc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800aa54:	bf00      	nop
 800aa56:	bf00      	nop

0800aa58 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800aa58:	b580      	push	{r7, lr}
 800aa5a:	b082      	sub	sp, #8
 800aa5c:	af00      	add	r7, sp, #0
	__asm volatile
 800aa5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa62:	f383 8811 	msr	BASEPRI, r3
 800aa66:	f3bf 8f6f 	isb	sy
 800aa6a:	f3bf 8f4f 	dsb	sy
 800aa6e:	607b      	str	r3, [r7, #4]
}
 800aa70:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800aa72:	f7fe fed3 	bl	800981c <xTaskIncrementTick>
 800aa76:	4603      	mov	r3, r0
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	d003      	beq.n	800aa84 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800aa7c:	4b06      	ldr	r3, [pc, #24]	; (800aa98 <xPortSysTickHandler+0x40>)
 800aa7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aa82:	601a      	str	r2, [r3, #0]
 800aa84:	2300      	movs	r3, #0
 800aa86:	603b      	str	r3, [r7, #0]
	__asm volatile
 800aa88:	683b      	ldr	r3, [r7, #0]
 800aa8a:	f383 8811 	msr	BASEPRI, r3
}
 800aa8e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800aa90:	bf00      	nop
 800aa92:	3708      	adds	r7, #8
 800aa94:	46bd      	mov	sp, r7
 800aa96:	bd80      	pop	{r7, pc}
 800aa98:	e000ed04 	.word	0xe000ed04

0800aa9c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800aa9c:	b480      	push	{r7}
 800aa9e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800aaa0:	4b0b      	ldr	r3, [pc, #44]	; (800aad0 <vPortSetupTimerInterrupt+0x34>)
 800aaa2:	2200      	movs	r2, #0
 800aaa4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800aaa6:	4b0b      	ldr	r3, [pc, #44]	; (800aad4 <vPortSetupTimerInterrupt+0x38>)
 800aaa8:	2200      	movs	r2, #0
 800aaaa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800aaac:	4b0a      	ldr	r3, [pc, #40]	; (800aad8 <vPortSetupTimerInterrupt+0x3c>)
 800aaae:	681b      	ldr	r3, [r3, #0]
 800aab0:	4a0a      	ldr	r2, [pc, #40]	; (800aadc <vPortSetupTimerInterrupt+0x40>)
 800aab2:	fba2 2303 	umull	r2, r3, r2, r3
 800aab6:	099b      	lsrs	r3, r3, #6
 800aab8:	4a09      	ldr	r2, [pc, #36]	; (800aae0 <vPortSetupTimerInterrupt+0x44>)
 800aaba:	3b01      	subs	r3, #1
 800aabc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800aabe:	4b04      	ldr	r3, [pc, #16]	; (800aad0 <vPortSetupTimerInterrupt+0x34>)
 800aac0:	2207      	movs	r2, #7
 800aac2:	601a      	str	r2, [r3, #0]
}
 800aac4:	bf00      	nop
 800aac6:	46bd      	mov	sp, r7
 800aac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aacc:	4770      	bx	lr
 800aace:	bf00      	nop
 800aad0:	e000e010 	.word	0xe000e010
 800aad4:	e000e018 	.word	0xe000e018
 800aad8:	20000000 	.word	0x20000000
 800aadc:	10624dd3 	.word	0x10624dd3
 800aae0:	e000e014 	.word	0xe000e014

0800aae4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800aae4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800aaf4 <vPortEnableVFP+0x10>
 800aae8:	6801      	ldr	r1, [r0, #0]
 800aaea:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800aaee:	6001      	str	r1, [r0, #0]
 800aaf0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800aaf2:	bf00      	nop
 800aaf4:	e000ed88 	.word	0xe000ed88

0800aaf8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800aaf8:	b480      	push	{r7}
 800aafa:	b085      	sub	sp, #20
 800aafc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800aafe:	f3ef 8305 	mrs	r3, IPSR
 800ab02:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800ab04:	68fb      	ldr	r3, [r7, #12]
 800ab06:	2b0f      	cmp	r3, #15
 800ab08:	d914      	bls.n	800ab34 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800ab0a:	4a17      	ldr	r2, [pc, #92]	; (800ab68 <vPortValidateInterruptPriority+0x70>)
 800ab0c:	68fb      	ldr	r3, [r7, #12]
 800ab0e:	4413      	add	r3, r2
 800ab10:	781b      	ldrb	r3, [r3, #0]
 800ab12:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800ab14:	4b15      	ldr	r3, [pc, #84]	; (800ab6c <vPortValidateInterruptPriority+0x74>)
 800ab16:	781b      	ldrb	r3, [r3, #0]
 800ab18:	7afa      	ldrb	r2, [r7, #11]
 800ab1a:	429a      	cmp	r2, r3
 800ab1c:	d20a      	bcs.n	800ab34 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800ab1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab22:	f383 8811 	msr	BASEPRI, r3
 800ab26:	f3bf 8f6f 	isb	sy
 800ab2a:	f3bf 8f4f 	dsb	sy
 800ab2e:	607b      	str	r3, [r7, #4]
}
 800ab30:	bf00      	nop
 800ab32:	e7fe      	b.n	800ab32 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800ab34:	4b0e      	ldr	r3, [pc, #56]	; (800ab70 <vPortValidateInterruptPriority+0x78>)
 800ab36:	681b      	ldr	r3, [r3, #0]
 800ab38:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800ab3c:	4b0d      	ldr	r3, [pc, #52]	; (800ab74 <vPortValidateInterruptPriority+0x7c>)
 800ab3e:	681b      	ldr	r3, [r3, #0]
 800ab40:	429a      	cmp	r2, r3
 800ab42:	d90a      	bls.n	800ab5a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800ab44:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab48:	f383 8811 	msr	BASEPRI, r3
 800ab4c:	f3bf 8f6f 	isb	sy
 800ab50:	f3bf 8f4f 	dsb	sy
 800ab54:	603b      	str	r3, [r7, #0]
}
 800ab56:	bf00      	nop
 800ab58:	e7fe      	b.n	800ab58 <vPortValidateInterruptPriority+0x60>
	}
 800ab5a:	bf00      	nop
 800ab5c:	3714      	adds	r7, #20
 800ab5e:	46bd      	mov	sp, r7
 800ab60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab64:	4770      	bx	lr
 800ab66:	bf00      	nop
 800ab68:	e000e3f0 	.word	0xe000e3f0
 800ab6c:	20001ae8 	.word	0x20001ae8
 800ab70:	e000ed0c 	.word	0xe000ed0c
 800ab74:	20001aec 	.word	0x20001aec

0800ab78 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800ab78:	b580      	push	{r7, lr}
 800ab7a:	b08a      	sub	sp, #40	; 0x28
 800ab7c:	af00      	add	r7, sp, #0
 800ab7e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800ab80:	2300      	movs	r3, #0
 800ab82:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800ab84:	f7fe fd8e 	bl	80096a4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800ab88:	4b5b      	ldr	r3, [pc, #364]	; (800acf8 <pvPortMalloc+0x180>)
 800ab8a:	681b      	ldr	r3, [r3, #0]
 800ab8c:	2b00      	cmp	r3, #0
 800ab8e:	d101      	bne.n	800ab94 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800ab90:	f000 f920 	bl	800add4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800ab94:	4b59      	ldr	r3, [pc, #356]	; (800acfc <pvPortMalloc+0x184>)
 800ab96:	681a      	ldr	r2, [r3, #0]
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	4013      	ands	r3, r2
 800ab9c:	2b00      	cmp	r3, #0
 800ab9e:	f040 8093 	bne.w	800acc8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	2b00      	cmp	r3, #0
 800aba6:	d01d      	beq.n	800abe4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800aba8:	2208      	movs	r2, #8
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	4413      	add	r3, r2
 800abae:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	f003 0307 	and.w	r3, r3, #7
 800abb6:	2b00      	cmp	r3, #0
 800abb8:	d014      	beq.n	800abe4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	f023 0307 	bic.w	r3, r3, #7
 800abc0:	3308      	adds	r3, #8
 800abc2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	f003 0307 	and.w	r3, r3, #7
 800abca:	2b00      	cmp	r3, #0
 800abcc:	d00a      	beq.n	800abe4 <pvPortMalloc+0x6c>
	__asm volatile
 800abce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abd2:	f383 8811 	msr	BASEPRI, r3
 800abd6:	f3bf 8f6f 	isb	sy
 800abda:	f3bf 8f4f 	dsb	sy
 800abde:	617b      	str	r3, [r7, #20]
}
 800abe0:	bf00      	nop
 800abe2:	e7fe      	b.n	800abe2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	d06e      	beq.n	800acc8 <pvPortMalloc+0x150>
 800abea:	4b45      	ldr	r3, [pc, #276]	; (800ad00 <pvPortMalloc+0x188>)
 800abec:	681b      	ldr	r3, [r3, #0]
 800abee:	687a      	ldr	r2, [r7, #4]
 800abf0:	429a      	cmp	r2, r3
 800abf2:	d869      	bhi.n	800acc8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800abf4:	4b43      	ldr	r3, [pc, #268]	; (800ad04 <pvPortMalloc+0x18c>)
 800abf6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800abf8:	4b42      	ldr	r3, [pc, #264]	; (800ad04 <pvPortMalloc+0x18c>)
 800abfa:	681b      	ldr	r3, [r3, #0]
 800abfc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800abfe:	e004      	b.n	800ac0a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800ac00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac02:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800ac04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac06:	681b      	ldr	r3, [r3, #0]
 800ac08:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ac0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac0c:	685b      	ldr	r3, [r3, #4]
 800ac0e:	687a      	ldr	r2, [r7, #4]
 800ac10:	429a      	cmp	r2, r3
 800ac12:	d903      	bls.n	800ac1c <pvPortMalloc+0xa4>
 800ac14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac16:	681b      	ldr	r3, [r3, #0]
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	d1f1      	bne.n	800ac00 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800ac1c:	4b36      	ldr	r3, [pc, #216]	; (800acf8 <pvPortMalloc+0x180>)
 800ac1e:	681b      	ldr	r3, [r3, #0]
 800ac20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ac22:	429a      	cmp	r2, r3
 800ac24:	d050      	beq.n	800acc8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800ac26:	6a3b      	ldr	r3, [r7, #32]
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	2208      	movs	r2, #8
 800ac2c:	4413      	add	r3, r2
 800ac2e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800ac30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac32:	681a      	ldr	r2, [r3, #0]
 800ac34:	6a3b      	ldr	r3, [r7, #32]
 800ac36:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800ac38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac3a:	685a      	ldr	r2, [r3, #4]
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	1ad2      	subs	r2, r2, r3
 800ac40:	2308      	movs	r3, #8
 800ac42:	005b      	lsls	r3, r3, #1
 800ac44:	429a      	cmp	r2, r3
 800ac46:	d91f      	bls.n	800ac88 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800ac48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	4413      	add	r3, r2
 800ac4e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ac50:	69bb      	ldr	r3, [r7, #24]
 800ac52:	f003 0307 	and.w	r3, r3, #7
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	d00a      	beq.n	800ac70 <pvPortMalloc+0xf8>
	__asm volatile
 800ac5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac5e:	f383 8811 	msr	BASEPRI, r3
 800ac62:	f3bf 8f6f 	isb	sy
 800ac66:	f3bf 8f4f 	dsb	sy
 800ac6a:	613b      	str	r3, [r7, #16]
}
 800ac6c:	bf00      	nop
 800ac6e:	e7fe      	b.n	800ac6e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800ac70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac72:	685a      	ldr	r2, [r3, #4]
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	1ad2      	subs	r2, r2, r3
 800ac78:	69bb      	ldr	r3, [r7, #24]
 800ac7a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800ac7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac7e:	687a      	ldr	r2, [r7, #4]
 800ac80:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800ac82:	69b8      	ldr	r0, [r7, #24]
 800ac84:	f000 f908 	bl	800ae98 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800ac88:	4b1d      	ldr	r3, [pc, #116]	; (800ad00 <pvPortMalloc+0x188>)
 800ac8a:	681a      	ldr	r2, [r3, #0]
 800ac8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac8e:	685b      	ldr	r3, [r3, #4]
 800ac90:	1ad3      	subs	r3, r2, r3
 800ac92:	4a1b      	ldr	r2, [pc, #108]	; (800ad00 <pvPortMalloc+0x188>)
 800ac94:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800ac96:	4b1a      	ldr	r3, [pc, #104]	; (800ad00 <pvPortMalloc+0x188>)
 800ac98:	681a      	ldr	r2, [r3, #0]
 800ac9a:	4b1b      	ldr	r3, [pc, #108]	; (800ad08 <pvPortMalloc+0x190>)
 800ac9c:	681b      	ldr	r3, [r3, #0]
 800ac9e:	429a      	cmp	r2, r3
 800aca0:	d203      	bcs.n	800acaa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800aca2:	4b17      	ldr	r3, [pc, #92]	; (800ad00 <pvPortMalloc+0x188>)
 800aca4:	681b      	ldr	r3, [r3, #0]
 800aca6:	4a18      	ldr	r2, [pc, #96]	; (800ad08 <pvPortMalloc+0x190>)
 800aca8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800acaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acac:	685a      	ldr	r2, [r3, #4]
 800acae:	4b13      	ldr	r3, [pc, #76]	; (800acfc <pvPortMalloc+0x184>)
 800acb0:	681b      	ldr	r3, [r3, #0]
 800acb2:	431a      	orrs	r2, r3
 800acb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acb6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800acb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acba:	2200      	movs	r2, #0
 800acbc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800acbe:	4b13      	ldr	r3, [pc, #76]	; (800ad0c <pvPortMalloc+0x194>)
 800acc0:	681b      	ldr	r3, [r3, #0]
 800acc2:	3301      	adds	r3, #1
 800acc4:	4a11      	ldr	r2, [pc, #68]	; (800ad0c <pvPortMalloc+0x194>)
 800acc6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800acc8:	f7fe fcfa 	bl	80096c0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800accc:	69fb      	ldr	r3, [r7, #28]
 800acce:	f003 0307 	and.w	r3, r3, #7
 800acd2:	2b00      	cmp	r3, #0
 800acd4:	d00a      	beq.n	800acec <pvPortMalloc+0x174>
	__asm volatile
 800acd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acda:	f383 8811 	msr	BASEPRI, r3
 800acde:	f3bf 8f6f 	isb	sy
 800ace2:	f3bf 8f4f 	dsb	sy
 800ace6:	60fb      	str	r3, [r7, #12]
}
 800ace8:	bf00      	nop
 800acea:	e7fe      	b.n	800acea <pvPortMalloc+0x172>
	return pvReturn;
 800acec:	69fb      	ldr	r3, [r7, #28]
}
 800acee:	4618      	mov	r0, r3
 800acf0:	3728      	adds	r7, #40	; 0x28
 800acf2:	46bd      	mov	sp, r7
 800acf4:	bd80      	pop	{r7, pc}
 800acf6:	bf00      	nop
 800acf8:	200056f8 	.word	0x200056f8
 800acfc:	2000570c 	.word	0x2000570c
 800ad00:	200056fc 	.word	0x200056fc
 800ad04:	200056f0 	.word	0x200056f0
 800ad08:	20005700 	.word	0x20005700
 800ad0c:	20005704 	.word	0x20005704

0800ad10 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800ad10:	b580      	push	{r7, lr}
 800ad12:	b086      	sub	sp, #24
 800ad14:	af00      	add	r7, sp, #0
 800ad16:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	d04d      	beq.n	800adbe <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800ad22:	2308      	movs	r3, #8
 800ad24:	425b      	negs	r3, r3
 800ad26:	697a      	ldr	r2, [r7, #20]
 800ad28:	4413      	add	r3, r2
 800ad2a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800ad2c:	697b      	ldr	r3, [r7, #20]
 800ad2e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800ad30:	693b      	ldr	r3, [r7, #16]
 800ad32:	685a      	ldr	r2, [r3, #4]
 800ad34:	4b24      	ldr	r3, [pc, #144]	; (800adc8 <vPortFree+0xb8>)
 800ad36:	681b      	ldr	r3, [r3, #0]
 800ad38:	4013      	ands	r3, r2
 800ad3a:	2b00      	cmp	r3, #0
 800ad3c:	d10a      	bne.n	800ad54 <vPortFree+0x44>
	__asm volatile
 800ad3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad42:	f383 8811 	msr	BASEPRI, r3
 800ad46:	f3bf 8f6f 	isb	sy
 800ad4a:	f3bf 8f4f 	dsb	sy
 800ad4e:	60fb      	str	r3, [r7, #12]
}
 800ad50:	bf00      	nop
 800ad52:	e7fe      	b.n	800ad52 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800ad54:	693b      	ldr	r3, [r7, #16]
 800ad56:	681b      	ldr	r3, [r3, #0]
 800ad58:	2b00      	cmp	r3, #0
 800ad5a:	d00a      	beq.n	800ad72 <vPortFree+0x62>
	__asm volatile
 800ad5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad60:	f383 8811 	msr	BASEPRI, r3
 800ad64:	f3bf 8f6f 	isb	sy
 800ad68:	f3bf 8f4f 	dsb	sy
 800ad6c:	60bb      	str	r3, [r7, #8]
}
 800ad6e:	bf00      	nop
 800ad70:	e7fe      	b.n	800ad70 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800ad72:	693b      	ldr	r3, [r7, #16]
 800ad74:	685a      	ldr	r2, [r3, #4]
 800ad76:	4b14      	ldr	r3, [pc, #80]	; (800adc8 <vPortFree+0xb8>)
 800ad78:	681b      	ldr	r3, [r3, #0]
 800ad7a:	4013      	ands	r3, r2
 800ad7c:	2b00      	cmp	r3, #0
 800ad7e:	d01e      	beq.n	800adbe <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800ad80:	693b      	ldr	r3, [r7, #16]
 800ad82:	681b      	ldr	r3, [r3, #0]
 800ad84:	2b00      	cmp	r3, #0
 800ad86:	d11a      	bne.n	800adbe <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800ad88:	693b      	ldr	r3, [r7, #16]
 800ad8a:	685a      	ldr	r2, [r3, #4]
 800ad8c:	4b0e      	ldr	r3, [pc, #56]	; (800adc8 <vPortFree+0xb8>)
 800ad8e:	681b      	ldr	r3, [r3, #0]
 800ad90:	43db      	mvns	r3, r3
 800ad92:	401a      	ands	r2, r3
 800ad94:	693b      	ldr	r3, [r7, #16]
 800ad96:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800ad98:	f7fe fc84 	bl	80096a4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800ad9c:	693b      	ldr	r3, [r7, #16]
 800ad9e:	685a      	ldr	r2, [r3, #4]
 800ada0:	4b0a      	ldr	r3, [pc, #40]	; (800adcc <vPortFree+0xbc>)
 800ada2:	681b      	ldr	r3, [r3, #0]
 800ada4:	4413      	add	r3, r2
 800ada6:	4a09      	ldr	r2, [pc, #36]	; (800adcc <vPortFree+0xbc>)
 800ada8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800adaa:	6938      	ldr	r0, [r7, #16]
 800adac:	f000 f874 	bl	800ae98 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800adb0:	4b07      	ldr	r3, [pc, #28]	; (800add0 <vPortFree+0xc0>)
 800adb2:	681b      	ldr	r3, [r3, #0]
 800adb4:	3301      	adds	r3, #1
 800adb6:	4a06      	ldr	r2, [pc, #24]	; (800add0 <vPortFree+0xc0>)
 800adb8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800adba:	f7fe fc81 	bl	80096c0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800adbe:	bf00      	nop
 800adc0:	3718      	adds	r7, #24
 800adc2:	46bd      	mov	sp, r7
 800adc4:	bd80      	pop	{r7, pc}
 800adc6:	bf00      	nop
 800adc8:	2000570c 	.word	0x2000570c
 800adcc:	200056fc 	.word	0x200056fc
 800add0:	20005708 	.word	0x20005708

0800add4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800add4:	b480      	push	{r7}
 800add6:	b085      	sub	sp, #20
 800add8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800adda:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800adde:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800ade0:	4b27      	ldr	r3, [pc, #156]	; (800ae80 <prvHeapInit+0xac>)
 800ade2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800ade4:	68fb      	ldr	r3, [r7, #12]
 800ade6:	f003 0307 	and.w	r3, r3, #7
 800adea:	2b00      	cmp	r3, #0
 800adec:	d00c      	beq.n	800ae08 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800adee:	68fb      	ldr	r3, [r7, #12]
 800adf0:	3307      	adds	r3, #7
 800adf2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800adf4:	68fb      	ldr	r3, [r7, #12]
 800adf6:	f023 0307 	bic.w	r3, r3, #7
 800adfa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800adfc:	68ba      	ldr	r2, [r7, #8]
 800adfe:	68fb      	ldr	r3, [r7, #12]
 800ae00:	1ad3      	subs	r3, r2, r3
 800ae02:	4a1f      	ldr	r2, [pc, #124]	; (800ae80 <prvHeapInit+0xac>)
 800ae04:	4413      	add	r3, r2
 800ae06:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800ae08:	68fb      	ldr	r3, [r7, #12]
 800ae0a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800ae0c:	4a1d      	ldr	r2, [pc, #116]	; (800ae84 <prvHeapInit+0xb0>)
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800ae12:	4b1c      	ldr	r3, [pc, #112]	; (800ae84 <prvHeapInit+0xb0>)
 800ae14:	2200      	movs	r2, #0
 800ae16:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	68ba      	ldr	r2, [r7, #8]
 800ae1c:	4413      	add	r3, r2
 800ae1e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800ae20:	2208      	movs	r2, #8
 800ae22:	68fb      	ldr	r3, [r7, #12]
 800ae24:	1a9b      	subs	r3, r3, r2
 800ae26:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ae28:	68fb      	ldr	r3, [r7, #12]
 800ae2a:	f023 0307 	bic.w	r3, r3, #7
 800ae2e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800ae30:	68fb      	ldr	r3, [r7, #12]
 800ae32:	4a15      	ldr	r2, [pc, #84]	; (800ae88 <prvHeapInit+0xb4>)
 800ae34:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800ae36:	4b14      	ldr	r3, [pc, #80]	; (800ae88 <prvHeapInit+0xb4>)
 800ae38:	681b      	ldr	r3, [r3, #0]
 800ae3a:	2200      	movs	r2, #0
 800ae3c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800ae3e:	4b12      	ldr	r3, [pc, #72]	; (800ae88 <prvHeapInit+0xb4>)
 800ae40:	681b      	ldr	r3, [r3, #0]
 800ae42:	2200      	movs	r2, #0
 800ae44:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800ae4a:	683b      	ldr	r3, [r7, #0]
 800ae4c:	68fa      	ldr	r2, [r7, #12]
 800ae4e:	1ad2      	subs	r2, r2, r3
 800ae50:	683b      	ldr	r3, [r7, #0]
 800ae52:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800ae54:	4b0c      	ldr	r3, [pc, #48]	; (800ae88 <prvHeapInit+0xb4>)
 800ae56:	681a      	ldr	r2, [r3, #0]
 800ae58:	683b      	ldr	r3, [r7, #0]
 800ae5a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ae5c:	683b      	ldr	r3, [r7, #0]
 800ae5e:	685b      	ldr	r3, [r3, #4]
 800ae60:	4a0a      	ldr	r2, [pc, #40]	; (800ae8c <prvHeapInit+0xb8>)
 800ae62:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ae64:	683b      	ldr	r3, [r7, #0]
 800ae66:	685b      	ldr	r3, [r3, #4]
 800ae68:	4a09      	ldr	r2, [pc, #36]	; (800ae90 <prvHeapInit+0xbc>)
 800ae6a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800ae6c:	4b09      	ldr	r3, [pc, #36]	; (800ae94 <prvHeapInit+0xc0>)
 800ae6e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800ae72:	601a      	str	r2, [r3, #0]
}
 800ae74:	bf00      	nop
 800ae76:	3714      	adds	r7, #20
 800ae78:	46bd      	mov	sp, r7
 800ae7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae7e:	4770      	bx	lr
 800ae80:	20001af0 	.word	0x20001af0
 800ae84:	200056f0 	.word	0x200056f0
 800ae88:	200056f8 	.word	0x200056f8
 800ae8c:	20005700 	.word	0x20005700
 800ae90:	200056fc 	.word	0x200056fc
 800ae94:	2000570c 	.word	0x2000570c

0800ae98 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800ae98:	b480      	push	{r7}
 800ae9a:	b085      	sub	sp, #20
 800ae9c:	af00      	add	r7, sp, #0
 800ae9e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800aea0:	4b28      	ldr	r3, [pc, #160]	; (800af44 <prvInsertBlockIntoFreeList+0xac>)
 800aea2:	60fb      	str	r3, [r7, #12]
 800aea4:	e002      	b.n	800aeac <prvInsertBlockIntoFreeList+0x14>
 800aea6:	68fb      	ldr	r3, [r7, #12]
 800aea8:	681b      	ldr	r3, [r3, #0]
 800aeaa:	60fb      	str	r3, [r7, #12]
 800aeac:	68fb      	ldr	r3, [r7, #12]
 800aeae:	681b      	ldr	r3, [r3, #0]
 800aeb0:	687a      	ldr	r2, [r7, #4]
 800aeb2:	429a      	cmp	r2, r3
 800aeb4:	d8f7      	bhi.n	800aea6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800aeb6:	68fb      	ldr	r3, [r7, #12]
 800aeb8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800aeba:	68fb      	ldr	r3, [r7, #12]
 800aebc:	685b      	ldr	r3, [r3, #4]
 800aebe:	68ba      	ldr	r2, [r7, #8]
 800aec0:	4413      	add	r3, r2
 800aec2:	687a      	ldr	r2, [r7, #4]
 800aec4:	429a      	cmp	r2, r3
 800aec6:	d108      	bne.n	800aeda <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800aec8:	68fb      	ldr	r3, [r7, #12]
 800aeca:	685a      	ldr	r2, [r3, #4]
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	685b      	ldr	r3, [r3, #4]
 800aed0:	441a      	add	r2, r3
 800aed2:	68fb      	ldr	r3, [r7, #12]
 800aed4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800aed6:	68fb      	ldr	r3, [r7, #12]
 800aed8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	685b      	ldr	r3, [r3, #4]
 800aee2:	68ba      	ldr	r2, [r7, #8]
 800aee4:	441a      	add	r2, r3
 800aee6:	68fb      	ldr	r3, [r7, #12]
 800aee8:	681b      	ldr	r3, [r3, #0]
 800aeea:	429a      	cmp	r2, r3
 800aeec:	d118      	bne.n	800af20 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800aeee:	68fb      	ldr	r3, [r7, #12]
 800aef0:	681a      	ldr	r2, [r3, #0]
 800aef2:	4b15      	ldr	r3, [pc, #84]	; (800af48 <prvInsertBlockIntoFreeList+0xb0>)
 800aef4:	681b      	ldr	r3, [r3, #0]
 800aef6:	429a      	cmp	r2, r3
 800aef8:	d00d      	beq.n	800af16 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	685a      	ldr	r2, [r3, #4]
 800aefe:	68fb      	ldr	r3, [r7, #12]
 800af00:	681b      	ldr	r3, [r3, #0]
 800af02:	685b      	ldr	r3, [r3, #4]
 800af04:	441a      	add	r2, r3
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800af0a:	68fb      	ldr	r3, [r7, #12]
 800af0c:	681b      	ldr	r3, [r3, #0]
 800af0e:	681a      	ldr	r2, [r3, #0]
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	601a      	str	r2, [r3, #0]
 800af14:	e008      	b.n	800af28 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800af16:	4b0c      	ldr	r3, [pc, #48]	; (800af48 <prvInsertBlockIntoFreeList+0xb0>)
 800af18:	681a      	ldr	r2, [r3, #0]
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	601a      	str	r2, [r3, #0]
 800af1e:	e003      	b.n	800af28 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800af20:	68fb      	ldr	r3, [r7, #12]
 800af22:	681a      	ldr	r2, [r3, #0]
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800af28:	68fa      	ldr	r2, [r7, #12]
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	429a      	cmp	r2, r3
 800af2e:	d002      	beq.n	800af36 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800af30:	68fb      	ldr	r3, [r7, #12]
 800af32:	687a      	ldr	r2, [r7, #4]
 800af34:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800af36:	bf00      	nop
 800af38:	3714      	adds	r7, #20
 800af3a:	46bd      	mov	sp, r7
 800af3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af40:	4770      	bx	lr
 800af42:	bf00      	nop
 800af44:	200056f0 	.word	0x200056f0
 800af48:	200056f8 	.word	0x200056f8

0800af4c <__cxa_pure_virtual>:
 800af4c:	b508      	push	{r3, lr}
 800af4e:	f000 fb03 	bl	800b558 <_ZSt9terminatev>

0800af52 <_ZNSaIcEC1Ev>:
 800af52:	4770      	bx	lr

0800af54 <_ZNSaIcED1Ev>:
 800af54:	4770      	bx	lr

0800af56 <_ZSt17__throw_bad_allocv>:
 800af56:	b508      	push	{r3, lr}
 800af58:	f000 fb1c 	bl	800b594 <abort>

0800af5c <_ZSt19__throw_logic_errorPKc>:
 800af5c:	b508      	push	{r3, lr}
 800af5e:	f000 fb19 	bl	800b594 <abort>

0800af62 <_ZSt20__throw_length_errorPKc>:
 800af62:	b508      	push	{r3, lr}
 800af64:	f000 fb16 	bl	800b594 <abort>

0800af68 <_ZSt24__throw_out_of_range_fmtPKcz>:
 800af68:	b40f      	push	{r0, r1, r2, r3}
 800af6a:	b580      	push	{r7, lr}
 800af6c:	b084      	sub	sp, #16
 800af6e:	af00      	add	r7, sp, #0
 800af70:	f107 0418 	add.w	r4, r7, #24
 800af74:	f854 2b04 	ldr.w	r2, [r4], #4
 800af78:	607a      	str	r2, [r7, #4]
 800af7a:	4610      	mov	r0, r2
 800af7c:	f7f5 f980 	bl	8000280 <strlen>
 800af80:	f200 2307 	addw	r3, r0, #519	; 0x207
 800af84:	f023 0307 	bic.w	r3, r3, #7
 800af88:	ebad 0d03 	sub.w	sp, sp, r3
 800af8c:	f500 7100 	add.w	r1, r0, #512	; 0x200
 800af90:	687a      	ldr	r2, [r7, #4]
 800af92:	60fc      	str	r4, [r7, #12]
 800af94:	4623      	mov	r3, r4
 800af96:	4668      	mov	r0, sp
 800af98:	f000 f854 	bl	800b044 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list>
 800af9c:	f000 fafa 	bl	800b594 <abort>

0800afa0 <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_>:
 800afa0:	b580      	push	{r7, lr}
 800afa2:	b09c      	sub	sp, #112	; 0x70
 800afa4:	4606      	mov	r6, r0
 800afa6:	af00      	add	r7, sp, #0
 800afa8:	460c      	mov	r4, r1
 800afaa:	1ba4      	subs	r4, r4, r6
 800afac:	490e      	ldr	r1, [pc, #56]	; (800afe8 <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_+0x48>)
 800afae:	2269      	movs	r2, #105	; 0x69
 800afb0:	1d38      	adds	r0, r7, #4
 800afb2:	f000 fb33 	bl	800b61c <memcpy>
 800afb6:	f104 0370 	add.w	r3, r4, #112	; 0x70
 800afba:	f023 0307 	bic.w	r3, r3, #7
 800afbe:	ebad 0d03 	sub.w	sp, sp, r3
 800afc2:	466d      	mov	r5, sp
 800afc4:	2268      	movs	r2, #104	; 0x68
 800afc6:	1d39      	adds	r1, r7, #4
 800afc8:	4628      	mov	r0, r5
 800afca:	f000 fb27 	bl	800b61c <memcpy>
 800afce:	4622      	mov	r2, r4
 800afd0:	4631      	mov	r1, r6
 800afd2:	f105 0068 	add.w	r0, r5, #104	; 0x68
 800afd6:	442c      	add	r4, r5
 800afd8:	f000 fb20 	bl	800b61c <memcpy>
 800afdc:	2300      	movs	r3, #0
 800afde:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
 800afe2:	4628      	mov	r0, r5
 800afe4:	f7ff ffba 	bl	800af5c <_ZSt19__throw_logic_errorPKc>
 800afe8:	0800c5b8 	.word	0x0800c5b8

0800afec <_ZN9__gnu_cxx15__concat_size_tEPcjj>:
 800afec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aff0:	af00      	add	r7, sp, #0
 800aff2:	b084      	sub	sp, #16
 800aff4:	466d      	mov	r5, sp
 800aff6:	f105 040c 	add.w	r4, r5, #12
 800affa:	f8df 8044 	ldr.w	r8, [pc, #68]	; 800b040 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x54>
 800affe:	4623      	mov	r3, r4
 800b000:	f04f 0c0a 	mov.w	ip, #10
 800b004:	fbb2 f6fc 	udiv	r6, r2, ip
 800b008:	fb0c 2e16 	mls	lr, ip, r6, r2
 800b00c:	f818 e00e 	ldrb.w	lr, [r8, lr]
 800b010:	f803 ed01 	strb.w	lr, [r3, #-1]!
 800b014:	4696      	mov	lr, r2
 800b016:	f1be 0f09 	cmp.w	lr, #9
 800b01a:	4632      	mov	r2, r6
 800b01c:	d8f2      	bhi.n	800b004 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x18>
 800b01e:	1ae4      	subs	r4, r4, r3
 800b020:	428c      	cmp	r4, r1
 800b022:	d809      	bhi.n	800b038 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x4c>
 800b024:	f1c4 030c 	rsb	r3, r4, #12
 800b028:	4622      	mov	r2, r4
 800b02a:	18e9      	adds	r1, r5, r3
 800b02c:	f000 faf6 	bl	800b61c <memcpy>
 800b030:	4620      	mov	r0, r4
 800b032:	46bd      	mov	sp, r7
 800b034:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b038:	f04f 34ff 	mov.w	r4, #4294967295
 800b03c:	e7f8      	b.n	800b030 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x44>
 800b03e:	bf00      	nop
 800b040:	0800c621 	.word	0x0800c621

0800b044 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list>:
 800b044:	3901      	subs	r1, #1
 800b046:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b04a:	4607      	mov	r7, r0
 800b04c:	4615      	mov	r5, r2
 800b04e:	eb00 0801 	add.w	r8, r0, r1
 800b052:	4604      	mov	r4, r0
 800b054:	782a      	ldrb	r2, [r5, #0]
 800b056:	b392      	cbz	r2, 800b0be <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x7a>
 800b058:	4544      	cmp	r4, r8
 800b05a:	d22a      	bcs.n	800b0b2 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x6e>
 800b05c:	2a25      	cmp	r2, #37	; 0x25
 800b05e:	d107      	bne.n	800b070 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2c>
 800b060:	786a      	ldrb	r2, [r5, #1]
 800b062:	2a73      	cmp	r2, #115	; 0x73
 800b064:	d009      	beq.n	800b07a <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x36>
 800b066:	2a7a      	cmp	r2, #122	; 0x7a
 800b068:	d012      	beq.n	800b090 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x4c>
 800b06a:	2a25      	cmp	r2, #37	; 0x25
 800b06c:	d100      	bne.n	800b070 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2c>
 800b06e:	3501      	adds	r5, #1
 800b070:	f815 2b01 	ldrb.w	r2, [r5], #1
 800b074:	f804 2b01 	strb.w	r2, [r4], #1
 800b078:	e7ec      	b.n	800b054 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x10>
 800b07a:	f853 2b04 	ldr.w	r2, [r3], #4
 800b07e:	3a01      	subs	r2, #1
 800b080:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 800b084:	b1c9      	cbz	r1, 800b0ba <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x76>
 800b086:	4544      	cmp	r4, r8
 800b088:	d013      	beq.n	800b0b2 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x6e>
 800b08a:	f804 1b01 	strb.w	r1, [r4], #1
 800b08e:	e7f7      	b.n	800b080 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x3c>
 800b090:	78aa      	ldrb	r2, [r5, #2]
 800b092:	2a75      	cmp	r2, #117	; 0x75
 800b094:	d1ec      	bne.n	800b070 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2c>
 800b096:	461e      	mov	r6, r3
 800b098:	eba8 0104 	sub.w	r1, r8, r4
 800b09c:	f856 2b04 	ldr.w	r2, [r6], #4
 800b0a0:	4620      	mov	r0, r4
 800b0a2:	f7ff ffa3 	bl	800afec <_ZN9__gnu_cxx15__concat_size_tEPcjj>
 800b0a6:	2800      	cmp	r0, #0
 800b0a8:	dd03      	ble.n	800b0b2 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x6e>
 800b0aa:	4404      	add	r4, r0
 800b0ac:	3503      	adds	r5, #3
 800b0ae:	4633      	mov	r3, r6
 800b0b0:	e7d0      	b.n	800b054 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x10>
 800b0b2:	4621      	mov	r1, r4
 800b0b4:	4638      	mov	r0, r7
 800b0b6:	f7ff ff73 	bl	800afa0 <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_>
 800b0ba:	3502      	adds	r5, #2
 800b0bc:	e7ca      	b.n	800b054 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x10>
 800b0be:	7022      	strb	r2, [r4, #0]
 800b0c0:	1be0      	subs	r0, r4, r7
 800b0c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800b0c6 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>:
 800b0c6:	b10a      	cbz	r2, 800b0cc <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0+0x6>
 800b0c8:	f000 baa8 	b.w	800b61c <memcpy>
 800b0cc:	4770      	bx	lr

0800b0ce <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEPc>:
 800b0ce:	6001      	str	r1, [r0, #0]
 800b0d0:	4770      	bx	lr

0800b0d2 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>:
 800b0d2:	6800      	ldr	r0, [r0, #0]
 800b0d4:	4770      	bx	lr

0800b0d6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_local_dataEv>:
 800b0d6:	3008      	adds	r0, #8
 800b0d8:	4770      	bx	lr

0800b0da <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_capacityEj>:
 800b0da:	6081      	str	r1, [r0, #8]
 800b0dc:	4770      	bx	lr

0800b0de <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_set_lengthEj>:
 800b0de:	6803      	ldr	r3, [r0, #0]
 800b0e0:	6041      	str	r1, [r0, #4]
 800b0e2:	2200      	movs	r2, #0
 800b0e4:	545a      	strb	r2, [r3, r1]
 800b0e6:	4770      	bx	lr

0800b0e8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
 800b0e8:	b508      	push	{r3, lr}
 800b0ea:	680b      	ldr	r3, [r1, #0]
 800b0ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b0f0:	d302      	bcc.n	800b0f8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x10>
 800b0f2:	480d      	ldr	r0, [pc, #52]	; (800b128 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x40>)
 800b0f4:	f7ff ff35 	bl	800af62 <_ZSt20__throw_length_errorPKc>
 800b0f8:	4293      	cmp	r3, r2
 800b0fa:	d90b      	bls.n	800b114 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 800b0fc:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
 800b100:	ea4f 0042 	mov.w	r0, r2, lsl #1
 800b104:	d206      	bcs.n	800b114 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 800b106:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800b10a:	bf2a      	itet	cs
 800b10c:	f06f 4340 	mvncs.w	r3, #3221225472	; 0xc0000000
 800b110:	6008      	strcc	r0, [r1, #0]
 800b112:	600b      	strcs	r3, [r1, #0]
 800b114:	6808      	ldr	r0, [r1, #0]
 800b116:	3001      	adds	r0, #1
 800b118:	d501      	bpl.n	800b11e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x36>
 800b11a:	f7ff ff1c 	bl	800af56 <_ZSt17__throw_bad_allocv>
 800b11e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800b122:	f000 ba1e 	b.w	800b562 <_Znwj>
 800b126:	bf00      	nop
 800b128:	0800c62c 	.word	0x0800c62c

0800b12c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
 800b12c:	f850 3b08 	ldr.w	r3, [r0], #8
 800b130:	4283      	cmp	r3, r0
 800b132:	d002      	beq.n	800b13a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0xe>
 800b134:	4618      	mov	r0, r3
 800b136:	f000 ba00 	b.w	800b53a <_ZdlPv>
 800b13a:	4770      	bx	lr

0800b13c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc>:
 800b13c:	b508      	push	{r3, lr}
 800b13e:	4603      	mov	r3, r0
 800b140:	4608      	mov	r0, r1
 800b142:	685b      	ldr	r3, [r3, #4]
 800b144:	4298      	cmp	r0, r3
 800b146:	4611      	mov	r1, r2
 800b148:	d903      	bls.n	800b152 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc+0x16>
 800b14a:	4602      	mov	r2, r0
 800b14c:	4801      	ldr	r0, [pc, #4]	; (800b154 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc+0x18>)
 800b14e:	f7ff ff0b 	bl	800af68 <_ZSt24__throw_out_of_range_fmtPKcz>
 800b152:	bd08      	pop	{r3, pc}
 800b154:	0800c644 	.word	0x0800c644

0800b158 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>:
 800b158:	6840      	ldr	r0, [r0, #4]
 800b15a:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 800b15e:	3901      	subs	r1, #1
 800b160:	1a09      	subs	r1, r1, r0
 800b162:	4291      	cmp	r1, r2
 800b164:	b508      	push	{r3, lr}
 800b166:	d202      	bcs.n	800b16e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc+0x16>
 800b168:	4618      	mov	r0, r3
 800b16a:	f7ff fefa 	bl	800af62 <_ZSt20__throw_length_errorPKc>
 800b16e:	bd08      	pop	{r3, pc}

0800b170 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc>:
 800b170:	6803      	ldr	r3, [r0, #0]
 800b172:	428b      	cmp	r3, r1
 800b174:	d806      	bhi.n	800b184 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc+0x14>
 800b176:	6840      	ldr	r0, [r0, #4]
 800b178:	4418      	add	r0, r3
 800b17a:	4281      	cmp	r1, r0
 800b17c:	bf94      	ite	ls
 800b17e:	2000      	movls	r0, #0
 800b180:	2001      	movhi	r0, #1
 800b182:	4770      	bx	lr
 800b184:	2001      	movs	r0, #1
 800b186:	4770      	bx	lr

0800b188 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>:
 800b188:	2a01      	cmp	r2, #1
 800b18a:	b410      	push	{r4}
 800b18c:	d104      	bne.n	800b198 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0x10>
 800b18e:	780a      	ldrb	r2, [r1, #0]
 800b190:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b194:	7002      	strb	r2, [r0, #0]
 800b196:	4770      	bx	lr
 800b198:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b19c:	f7ff bf93 	b.w	800b0c6 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>

0800b1a0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>:
 800b1a0:	2a01      	cmp	r2, #1
 800b1a2:	b430      	push	{r4, r5}
 800b1a4:	d103      	bne.n	800b1ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj+0xe>
 800b1a6:	780b      	ldrb	r3, [r1, #0]
 800b1a8:	7003      	strb	r3, [r0, #0]
 800b1aa:	bc30      	pop	{r4, r5}
 800b1ac:	4770      	bx	lr
 800b1ae:	2a00      	cmp	r2, #0
 800b1b0:	d0fb      	beq.n	800b1aa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj+0xa>
 800b1b2:	bc30      	pop	{r4, r5}
 800b1b4:	f000 ba40 	b.w	800b638 <memmove>

0800b1b8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>:
 800b1b8:	b508      	push	{r3, lr}
 800b1ba:	1a52      	subs	r2, r2, r1
 800b1bc:	f7ff ffe4 	bl	800b188 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 800b1c0:	bd08      	pop	{r3, pc}

0800b1c2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>:
 800b1c2:	b508      	push	{r3, lr}
 800b1c4:	1a52      	subs	r2, r2, r1
 800b1c6:	f7ff ffdf 	bl	800b188 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 800b1ca:	bd08      	pop	{r3, pc}

0800b1cc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>:
 800b1cc:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 800b1d0:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800b1d2:	461f      	mov	r7, r3
 800b1d4:	6843      	ldr	r3, [r0, #4]
 800b1d6:	eb01 0802 	add.w	r8, r1, r2
 800b1da:	1ab2      	subs	r2, r6, r2
 800b1dc:	441a      	add	r2, r3
 800b1de:	eba3 0908 	sub.w	r9, r3, r8
 800b1e2:	4603      	mov	r3, r0
 800b1e4:	9201      	str	r2, [sp, #4]
 800b1e6:	f853 2b08 	ldr.w	r2, [r3], #8
 800b1ea:	429a      	cmp	r2, r3
 800b1ec:	bf18      	it	ne
 800b1ee:	6882      	ldrne	r2, [r0, #8]
 800b1f0:	460d      	mov	r5, r1
 800b1f2:	bf08      	it	eq
 800b1f4:	220f      	moveq	r2, #15
 800b1f6:	a901      	add	r1, sp, #4
 800b1f8:	4604      	mov	r4, r0
 800b1fa:	f7ff ff75 	bl	800b0e8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 800b1fe:	4682      	mov	sl, r0
 800b200:	b11d      	cbz	r5, 800b20a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x3e>
 800b202:	6821      	ldr	r1, [r4, #0]
 800b204:	462a      	mov	r2, r5
 800b206:	f7ff ffbf 	bl	800b188 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 800b20a:	b137      	cbz	r7, 800b21a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x4e>
 800b20c:	b12e      	cbz	r6, 800b21a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x4e>
 800b20e:	4632      	mov	r2, r6
 800b210:	4639      	mov	r1, r7
 800b212:	eb0a 0005 	add.w	r0, sl, r5
 800b216:	f7ff ffb7 	bl	800b188 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 800b21a:	f1b9 0f00 	cmp.w	r9, #0
 800b21e:	d007      	beq.n	800b230 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x64>
 800b220:	6821      	ldr	r1, [r4, #0]
 800b222:	4435      	add	r5, r6
 800b224:	464a      	mov	r2, r9
 800b226:	4441      	add	r1, r8
 800b228:	eb0a 0005 	add.w	r0, sl, r5
 800b22c:	f7ff ffac 	bl	800b188 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 800b230:	4620      	mov	r0, r4
 800b232:	f7ff ff7b 	bl	800b12c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 800b236:	9b01      	ldr	r3, [sp, #4]
 800b238:	f8c4 a000 	str.w	sl, [r4]
 800b23c:	60a3      	str	r3, [r4, #8]
 800b23e:	b002      	add	sp, #8
 800b240:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800b244 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>:
 800b244:	b570      	push	{r4, r5, r6, lr}
 800b246:	4604      	mov	r4, r0
 800b248:	460e      	mov	r6, r1
 800b24a:	3008      	adds	r0, #8
 800b24c:	6020      	str	r0, [r4, #0]
 800b24e:	f856 3b08 	ldr.w	r3, [r6], #8
 800b252:	429e      	cmp	r6, r3
 800b254:	460d      	mov	r5, r1
 800b256:	d10b      	bne.n	800b270 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_+0x2c>
 800b258:	2210      	movs	r2, #16
 800b25a:	4631      	mov	r1, r6
 800b25c:	f7ff ff33 	bl	800b0c6 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>
 800b260:	686b      	ldr	r3, [r5, #4]
 800b262:	6063      	str	r3, [r4, #4]
 800b264:	2300      	movs	r3, #0
 800b266:	602e      	str	r6, [r5, #0]
 800b268:	606b      	str	r3, [r5, #4]
 800b26a:	722b      	strb	r3, [r5, #8]
 800b26c:	4620      	mov	r0, r4
 800b26e:	bd70      	pop	{r4, r5, r6, pc}
 800b270:	6023      	str	r3, [r4, #0]
 800b272:	688b      	ldr	r3, [r1, #8]
 800b274:	60a3      	str	r3, [r4, #8]
 800b276:	e7f3      	b.n	800b260 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_+0x1c>

0800b278 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>:
 800b278:	b510      	push	{r4, lr}
 800b27a:	4604      	mov	r4, r0
 800b27c:	f7ff ff56 	bl	800b12c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 800b280:	4620      	mov	r0, r4
 800b282:	bd10      	pop	{r4, pc}

0800b284 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>:
 800b284:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b286:	460d      	mov	r5, r1
 800b288:	f851 3b08 	ldr.w	r3, [r1], #8
 800b28c:	686a      	ldr	r2, [r5, #4]
 800b28e:	4299      	cmp	r1, r3
 800b290:	4604      	mov	r4, r0
 800b292:	6800      	ldr	r0, [r0, #0]
 800b294:	d10d      	bne.n	800b2b2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x2e>
 800b296:	b10a      	cbz	r2, 800b29c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x18>
 800b298:	f7ff ff76 	bl	800b188 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 800b29c:	686b      	ldr	r3, [r5, #4]
 800b29e:	6822      	ldr	r2, [r4, #0]
 800b2a0:	6063      	str	r3, [r4, #4]
 800b2a2:	2100      	movs	r1, #0
 800b2a4:	54d1      	strb	r1, [r2, r3]
 800b2a6:	682a      	ldr	r2, [r5, #0]
 800b2a8:	2300      	movs	r3, #0
 800b2aa:	606b      	str	r3, [r5, #4]
 800b2ac:	7013      	strb	r3, [r2, #0]
 800b2ae:	4620      	mov	r0, r4
 800b2b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b2b2:	e9c4 3200 	strd	r3, r2, [r4]
 800b2b6:	f104 0708 	add.w	r7, r4, #8
 800b2ba:	42b8      	cmp	r0, r7
 800b2bc:	68ab      	ldr	r3, [r5, #8]
 800b2be:	bf18      	it	ne
 800b2c0:	68a6      	ldrne	r6, [r4, #8]
 800b2c2:	60a3      	str	r3, [r4, #8]
 800b2c4:	bf08      	it	eq
 800b2c6:	2000      	moveq	r0, #0
 800b2c8:	b110      	cbz	r0, 800b2d0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x4c>
 800b2ca:	6028      	str	r0, [r5, #0]
 800b2cc:	60ae      	str	r6, [r5, #8]
 800b2ce:	e7ea      	b.n	800b2a6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x22>
 800b2d0:	6029      	str	r1, [r5, #0]
 800b2d2:	e7e8      	b.n	800b2a6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x22>

0800b2d4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>:
 800b2d4:	6800      	ldr	r0, [r0, #0]
 800b2d6:	4408      	add	r0, r1
 800b2d8:	4770      	bx	lr
	...

0800b2dc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj>:
 800b2dc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b2e0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b2e2:	4614      	mov	r4, r2
 800b2e4:	4680      	mov	r8, r0
 800b2e6:	462a      	mov	r2, r5
 800b2e8:	4689      	mov	r9, r1
 800b2ea:	461f      	mov	r7, r3
 800b2ec:	4621      	mov	r1, r4
 800b2ee:	4b39      	ldr	r3, [pc, #228]	; (800b3d4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xf8>)
 800b2f0:	f7ff ff32 	bl	800b158 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>
 800b2f4:	4642      	mov	r2, r8
 800b2f6:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800b2fa:	f852 6b08 	ldr.w	r6, [r2], #8
 800b2fe:	4296      	cmp	r6, r2
 800b300:	bf18      	it	ne
 800b302:	f8d8 2008 	ldrne.w	r2, [r8, #8]
 800b306:	eba5 0b04 	sub.w	fp, r5, r4
 800b30a:	eb03 0a0b 	add.w	sl, r3, fp
 800b30e:	bf08      	it	eq
 800b310:	220f      	moveq	r2, #15
 800b312:	4552      	cmp	r2, sl
 800b314:	d351      	bcc.n	800b3ba <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xde>
 800b316:	444e      	add	r6, r9
 800b318:	4639      	mov	r1, r7
 800b31a:	44a1      	add	r9, r4
 800b31c:	4640      	mov	r0, r8
 800b31e:	eba3 0909 	sub.w	r9, r3, r9
 800b322:	f7ff ff25 	bl	800b170 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc>
 800b326:	b180      	cbz	r0, 800b34a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x6e>
 800b328:	f1b9 0f00 	cmp.w	r9, #0
 800b32c:	d006      	beq.n	800b33c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x60>
 800b32e:	42ac      	cmp	r4, r5
 800b330:	d004      	beq.n	800b33c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x60>
 800b332:	464a      	mov	r2, r9
 800b334:	1931      	adds	r1, r6, r4
 800b336:	1970      	adds	r0, r6, r5
 800b338:	f7ff ff32 	bl	800b1a0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 800b33c:	b315      	cbz	r5, 800b384 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa8>
 800b33e:	462a      	mov	r2, r5
 800b340:	4639      	mov	r1, r7
 800b342:	4630      	mov	r0, r6
 800b344:	f7ff ff20 	bl	800b188 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 800b348:	e01c      	b.n	800b384 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa8>
 800b34a:	b135      	cbz	r5, 800b35a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x7e>
 800b34c:	42ac      	cmp	r4, r5
 800b34e:	d33c      	bcc.n	800b3ca <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xee>
 800b350:	462a      	mov	r2, r5
 800b352:	4639      	mov	r1, r7
 800b354:	4630      	mov	r0, r6
 800b356:	f7ff ff23 	bl	800b1a0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 800b35a:	f1b9 0f00 	cmp.w	r9, #0
 800b35e:	d011      	beq.n	800b384 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa8>
 800b360:	42ac      	cmp	r4, r5
 800b362:	d00f      	beq.n	800b384 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa8>
 800b364:	464a      	mov	r2, r9
 800b366:	1931      	adds	r1, r6, r4
 800b368:	1970      	adds	r0, r6, r5
 800b36a:	f7ff ff19 	bl	800b1a0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 800b36e:	42ac      	cmp	r4, r5
 800b370:	d208      	bcs.n	800b384 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa8>
 800b372:	4434      	add	r4, r6
 800b374:	197b      	adds	r3, r7, r5
 800b376:	429c      	cmp	r4, r3
 800b378:	d30f      	bcc.n	800b39a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xbe>
 800b37a:	462a      	mov	r2, r5
 800b37c:	4639      	mov	r1, r7
 800b37e:	4630      	mov	r0, r6
 800b380:	f7ff ff0e 	bl	800b1a0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 800b384:	f8d8 3000 	ldr.w	r3, [r8]
 800b388:	f8c8 a004 	str.w	sl, [r8, #4]
 800b38c:	2200      	movs	r2, #0
 800b38e:	4640      	mov	r0, r8
 800b390:	f803 200a 	strb.w	r2, [r3, sl]
 800b394:	b003      	add	sp, #12
 800b396:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b39a:	42bc      	cmp	r4, r7
 800b39c:	d803      	bhi.n	800b3a6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xca>
 800b39e:	462a      	mov	r2, r5
 800b3a0:	eb07 010b 	add.w	r1, r7, fp
 800b3a4:	e7cd      	b.n	800b342 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x66>
 800b3a6:	1be4      	subs	r4, r4, r7
 800b3a8:	4622      	mov	r2, r4
 800b3aa:	4639      	mov	r1, r7
 800b3ac:	4630      	mov	r0, r6
 800b3ae:	f7ff fef7 	bl	800b1a0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 800b3b2:	1b2a      	subs	r2, r5, r4
 800b3b4:	1971      	adds	r1, r6, r5
 800b3b6:	1930      	adds	r0, r6, r4
 800b3b8:	e7c4      	b.n	800b344 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x68>
 800b3ba:	9500      	str	r5, [sp, #0]
 800b3bc:	463b      	mov	r3, r7
 800b3be:	4622      	mov	r2, r4
 800b3c0:	4649      	mov	r1, r9
 800b3c2:	4640      	mov	r0, r8
 800b3c4:	f7ff ff02 	bl	800b1cc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>
 800b3c8:	e7dc      	b.n	800b384 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa8>
 800b3ca:	f1b9 0f00 	cmp.w	r9, #0
 800b3ce:	d0d0      	beq.n	800b372 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x96>
 800b3d0:	e7c8      	b.n	800b364 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x88>
 800b3d2:	bf00      	nop
 800b3d4:	0800c691 	.word	0x0800c691

0800b3d8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6assignEPKc>:
 800b3d8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b3da:	4604      	mov	r4, r0
 800b3dc:	4608      	mov	r0, r1
 800b3de:	9103      	str	r1, [sp, #12]
 800b3e0:	f7f4 ff4e 	bl	8000280 <strlen>
 800b3e4:	9b03      	ldr	r3, [sp, #12]
 800b3e6:	9000      	str	r0, [sp, #0]
 800b3e8:	6862      	ldr	r2, [r4, #4]
 800b3ea:	2100      	movs	r1, #0
 800b3ec:	4620      	mov	r0, r4
 800b3ee:	f7ff ff75 	bl	800b2dc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj>
 800b3f2:	b004      	add	sp, #16
 800b3f4:	bd10      	pop	{r4, pc}

0800b3f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>:
 800b3f6:	b508      	push	{r3, lr}
 800b3f8:	f7ff ffee 	bl	800b3d8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6assignEPKc>
 800b3fc:	bd08      	pop	{r3, pc}
	...

0800b400 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7replaceEjjPKcj>:
 800b400:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800b402:	4604      	mov	r4, r0
 800b404:	4615      	mov	r5, r2
 800b406:	4a09      	ldr	r2, [pc, #36]	; (800b42c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7replaceEjjPKcj+0x2c>)
 800b408:	9303      	str	r3, [sp, #12]
 800b40a:	460e      	mov	r6, r1
 800b40c:	f7ff fe96 	bl	800b13c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc>
 800b410:	6862      	ldr	r2, [r4, #4]
 800b412:	9b03      	ldr	r3, [sp, #12]
 800b414:	1b92      	subs	r2, r2, r6
 800b416:	4601      	mov	r1, r0
 800b418:	42aa      	cmp	r2, r5
 800b41a:	9808      	ldr	r0, [sp, #32]
 800b41c:	9000      	str	r0, [sp, #0]
 800b41e:	bf28      	it	cs
 800b420:	462a      	movcs	r2, r5
 800b422:	4620      	mov	r0, r4
 800b424:	f7ff ff5a 	bl	800b2dc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj>
 800b428:	b004      	add	sp, #16
 800b42a:	bd70      	pop	{r4, r5, r6, pc}
 800b42c:	0800c67b 	.word	0x0800c67b

0800b430 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6insertEjPKc>:
 800b430:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b432:	4604      	mov	r4, r0
 800b434:	4610      	mov	r0, r2
 800b436:	9103      	str	r1, [sp, #12]
 800b438:	9202      	str	r2, [sp, #8]
 800b43a:	f7f4 ff21 	bl	8000280 <strlen>
 800b43e:	9b02      	ldr	r3, [sp, #8]
 800b440:	9000      	str	r0, [sp, #0]
 800b442:	9903      	ldr	r1, [sp, #12]
 800b444:	2200      	movs	r2, #0
 800b446:	4620      	mov	r0, r4
 800b448:	f7ff ffda 	bl	800b400 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7replaceEjjPKcj>
 800b44c:	b004      	add	sp, #16
 800b44e:	bd10      	pop	{r4, pc}

0800b450 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj>:
 800b450:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b452:	4604      	mov	r4, r0
 800b454:	4623      	mov	r3, r4
 800b456:	6840      	ldr	r0, [r0, #4]
 800b458:	f853 6b08 	ldr.w	r6, [r3], #8
 800b45c:	429e      	cmp	r6, r3
 800b45e:	bf18      	it	ne
 800b460:	68a3      	ldrne	r3, [r4, #8]
 800b462:	eb00 0502 	add.w	r5, r0, r2
 800b466:	bf08      	it	eq
 800b468:	230f      	moveq	r3, #15
 800b46a:	429d      	cmp	r5, r3
 800b46c:	d80a      	bhi.n	800b484 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x34>
 800b46e:	b112      	cbz	r2, 800b476 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x26>
 800b470:	4430      	add	r0, r6
 800b472:	f7ff fe89 	bl	800b188 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 800b476:	6823      	ldr	r3, [r4, #0]
 800b478:	6065      	str	r5, [r4, #4]
 800b47a:	2200      	movs	r2, #0
 800b47c:	4620      	mov	r0, r4
 800b47e:	555a      	strb	r2, [r3, r5]
 800b480:	b002      	add	sp, #8
 800b482:	bd70      	pop	{r4, r5, r6, pc}
 800b484:	9200      	str	r2, [sp, #0]
 800b486:	460b      	mov	r3, r1
 800b488:	2200      	movs	r2, #0
 800b48a:	4601      	mov	r1, r0
 800b48c:	4620      	mov	r0, r4
 800b48e:	f7ff fe9d 	bl	800b1cc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>
 800b492:	e7f0      	b.n	800b476 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x26>

0800b494 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc>:
 800b494:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b496:	4604      	mov	r4, r0
 800b498:	4608      	mov	r0, r1
 800b49a:	460d      	mov	r5, r1
 800b49c:	f7f4 fef0 	bl	8000280 <strlen>
 800b4a0:	4b06      	ldr	r3, [pc, #24]	; (800b4bc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc+0x28>)
 800b4a2:	9001      	str	r0, [sp, #4]
 800b4a4:	4602      	mov	r2, r0
 800b4a6:	2100      	movs	r1, #0
 800b4a8:	4620      	mov	r0, r4
 800b4aa:	f7ff fe55 	bl	800b158 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>
 800b4ae:	9a01      	ldr	r2, [sp, #4]
 800b4b0:	4629      	mov	r1, r5
 800b4b2:	4620      	mov	r0, r4
 800b4b4:	f7ff ffcc 	bl	800b450 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj>
 800b4b8:	b003      	add	sp, #12
 800b4ba:	bd30      	pop	{r4, r5, pc}
 800b4bc:	0800c6aa 	.word	0x0800c6aa

0800b4c0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>:
 800b4c0:	6800      	ldr	r0, [r0, #0]
 800b4c2:	4770      	bx	lr

0800b4c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderC1EPcRKS3_>:
 800b4c4:	6001      	str	r1, [r0, #0]
 800b4c6:	4770      	bx	lr

0800b4c8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>:
 800b4c8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b4ca:	4604      	mov	r4, r0
 800b4cc:	4616      	mov	r6, r2
 800b4ce:	460d      	mov	r5, r1
 800b4d0:	b919      	cbnz	r1, 800b4da <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
 800b4d2:	b112      	cbz	r2, 800b4da <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
 800b4d4:	480d      	ldr	r0, [pc, #52]	; (800b50c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x44>)
 800b4d6:	f7ff fd41 	bl	800af5c <_ZSt19__throw_logic_errorPKc>
 800b4da:	1b73      	subs	r3, r6, r5
 800b4dc:	2b0f      	cmp	r3, #15
 800b4de:	9301      	str	r3, [sp, #4]
 800b4e0:	d907      	bls.n	800b4f2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x2a>
 800b4e2:	2200      	movs	r2, #0
 800b4e4:	a901      	add	r1, sp, #4
 800b4e6:	4620      	mov	r0, r4
 800b4e8:	f7ff fdfe 	bl	800b0e8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 800b4ec:	9b01      	ldr	r3, [sp, #4]
 800b4ee:	6020      	str	r0, [r4, #0]
 800b4f0:	60a3      	str	r3, [r4, #8]
 800b4f2:	4632      	mov	r2, r6
 800b4f4:	4629      	mov	r1, r5
 800b4f6:	6820      	ldr	r0, [r4, #0]
 800b4f8:	f7ff fe63 	bl	800b1c2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>
 800b4fc:	9b01      	ldr	r3, [sp, #4]
 800b4fe:	6822      	ldr	r2, [r4, #0]
 800b500:	6063      	str	r3, [r4, #4]
 800b502:	2100      	movs	r1, #0
 800b504:	54d1      	strb	r1, [r2, r3]
 800b506:	b002      	add	sp, #8
 800b508:	bd70      	pop	{r4, r5, r6, pc}
 800b50a:	bf00      	nop
 800b50c:	0800c6bf 	.word	0x0800c6bf

0800b510 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>:
 800b510:	b538      	push	{r3, r4, r5, lr}
 800b512:	f100 0308 	add.w	r3, r0, #8
 800b516:	4604      	mov	r4, r0
 800b518:	6003      	str	r3, [r0, #0]
 800b51a:	460d      	mov	r5, r1
 800b51c:	b159      	cbz	r1, 800b536 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x26>
 800b51e:	4608      	mov	r0, r1
 800b520:	f7f4 feae 	bl	8000280 <strlen>
 800b524:	182a      	adds	r2, r5, r0
 800b526:	4620      	mov	r0, r4
 800b528:	f04f 0300 	mov.w	r3, #0
 800b52c:	4629      	mov	r1, r5
 800b52e:	f7ff ffcb 	bl	800b4c8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>
 800b532:	4620      	mov	r0, r4
 800b534:	bd38      	pop	{r3, r4, r5, pc}
 800b536:	2201      	movs	r2, #1
 800b538:	e7f5      	b.n	800b526 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x16>

0800b53a <_ZdlPv>:
 800b53a:	f000 b867 	b.w	800b60c <free>

0800b53e <_ZN10__cxxabiv111__terminateEPFvvE>:
 800b53e:	b508      	push	{r3, lr}
 800b540:	4780      	blx	r0
 800b542:	f000 f827 	bl	800b594 <abort>
	...

0800b548 <_ZSt13get_terminatev>:
 800b548:	4b02      	ldr	r3, [pc, #8]	; (800b554 <_ZSt13get_terminatev+0xc>)
 800b54a:	6818      	ldr	r0, [r3, #0]
 800b54c:	f3bf 8f5b 	dmb	ish
 800b550:	4770      	bx	lr
 800b552:	bf00      	nop
 800b554:	20000010 	.word	0x20000010

0800b558 <_ZSt9terminatev>:
 800b558:	b508      	push	{r3, lr}
 800b55a:	f7ff fff5 	bl	800b548 <_ZSt13get_terminatev>
 800b55e:	f7ff ffee 	bl	800b53e <_ZN10__cxxabiv111__terminateEPFvvE>

0800b562 <_Znwj>:
 800b562:	2801      	cmp	r0, #1
 800b564:	bf38      	it	cc
 800b566:	2001      	movcc	r0, #1
 800b568:	b510      	push	{r4, lr}
 800b56a:	4604      	mov	r4, r0
 800b56c:	4620      	mov	r0, r4
 800b56e:	f000 f845 	bl	800b5fc <malloc>
 800b572:	b930      	cbnz	r0, 800b582 <_Znwj+0x20>
 800b574:	f000 f806 	bl	800b584 <_ZSt15get_new_handlerv>
 800b578:	b908      	cbnz	r0, 800b57e <_Znwj+0x1c>
 800b57a:	f000 f80b 	bl	800b594 <abort>
 800b57e:	4780      	blx	r0
 800b580:	e7f4      	b.n	800b56c <_Znwj+0xa>
 800b582:	bd10      	pop	{r4, pc}

0800b584 <_ZSt15get_new_handlerv>:
 800b584:	4b02      	ldr	r3, [pc, #8]	; (800b590 <_ZSt15get_new_handlerv+0xc>)
 800b586:	6818      	ldr	r0, [r3, #0]
 800b588:	f3bf 8f5b 	dmb	ish
 800b58c:	4770      	bx	lr
 800b58e:	bf00      	nop
 800b590:	20005710 	.word	0x20005710

0800b594 <abort>:
 800b594:	b508      	push	{r3, lr}
 800b596:	2006      	movs	r0, #6
 800b598:	f000 f9fa 	bl	800b990 <raise>
 800b59c:	2001      	movs	r0, #1
 800b59e:	f7f8 fd87 	bl	80040b0 <_exit>
	...

0800b5a4 <__errno>:
 800b5a4:	4b01      	ldr	r3, [pc, #4]	; (800b5ac <__errno+0x8>)
 800b5a6:	6818      	ldr	r0, [r3, #0]
 800b5a8:	4770      	bx	lr
 800b5aa:	bf00      	nop
 800b5ac:	20000014 	.word	0x20000014

0800b5b0 <__libc_init_array>:
 800b5b0:	b570      	push	{r4, r5, r6, lr}
 800b5b2:	4d0d      	ldr	r5, [pc, #52]	; (800b5e8 <__libc_init_array+0x38>)
 800b5b4:	4c0d      	ldr	r4, [pc, #52]	; (800b5ec <__libc_init_array+0x3c>)
 800b5b6:	1b64      	subs	r4, r4, r5
 800b5b8:	10a4      	asrs	r4, r4, #2
 800b5ba:	2600      	movs	r6, #0
 800b5bc:	42a6      	cmp	r6, r4
 800b5be:	d109      	bne.n	800b5d4 <__libc_init_array+0x24>
 800b5c0:	4d0b      	ldr	r5, [pc, #44]	; (800b5f0 <__libc_init_array+0x40>)
 800b5c2:	4c0c      	ldr	r4, [pc, #48]	; (800b5f4 <__libc_init_array+0x44>)
 800b5c4:	f000 fd6c 	bl	800c0a0 <_init>
 800b5c8:	1b64      	subs	r4, r4, r5
 800b5ca:	10a4      	asrs	r4, r4, #2
 800b5cc:	2600      	movs	r6, #0
 800b5ce:	42a6      	cmp	r6, r4
 800b5d0:	d105      	bne.n	800b5de <__libc_init_array+0x2e>
 800b5d2:	bd70      	pop	{r4, r5, r6, pc}
 800b5d4:	f855 3b04 	ldr.w	r3, [r5], #4
 800b5d8:	4798      	blx	r3
 800b5da:	3601      	adds	r6, #1
 800b5dc:	e7ee      	b.n	800b5bc <__libc_init_array+0xc>
 800b5de:	f855 3b04 	ldr.w	r3, [r5], #4
 800b5e2:	4798      	blx	r3
 800b5e4:	3601      	adds	r6, #1
 800b5e6:	e7f2      	b.n	800b5ce <__libc_init_array+0x1e>
 800b5e8:	0800c788 	.word	0x0800c788
 800b5ec:	0800c788 	.word	0x0800c788
 800b5f0:	0800c788 	.word	0x0800c788
 800b5f4:	0800c790 	.word	0x0800c790

0800b5f8 <__retarget_lock_acquire_recursive>:
 800b5f8:	4770      	bx	lr

0800b5fa <__retarget_lock_release_recursive>:
 800b5fa:	4770      	bx	lr

0800b5fc <malloc>:
 800b5fc:	4b02      	ldr	r3, [pc, #8]	; (800b608 <malloc+0xc>)
 800b5fe:	4601      	mov	r1, r0
 800b600:	6818      	ldr	r0, [r3, #0]
 800b602:	f000 b8a7 	b.w	800b754 <_malloc_r>
 800b606:	bf00      	nop
 800b608:	20000014 	.word	0x20000014

0800b60c <free>:
 800b60c:	4b02      	ldr	r3, [pc, #8]	; (800b618 <free+0xc>)
 800b60e:	4601      	mov	r1, r0
 800b610:	6818      	ldr	r0, [r3, #0]
 800b612:	f000 b833 	b.w	800b67c <_free_r>
 800b616:	bf00      	nop
 800b618:	20000014 	.word	0x20000014

0800b61c <memcpy>:
 800b61c:	440a      	add	r2, r1
 800b61e:	4291      	cmp	r1, r2
 800b620:	f100 33ff 	add.w	r3, r0, #4294967295
 800b624:	d100      	bne.n	800b628 <memcpy+0xc>
 800b626:	4770      	bx	lr
 800b628:	b510      	push	{r4, lr}
 800b62a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b62e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b632:	4291      	cmp	r1, r2
 800b634:	d1f9      	bne.n	800b62a <memcpy+0xe>
 800b636:	bd10      	pop	{r4, pc}

0800b638 <memmove>:
 800b638:	4288      	cmp	r0, r1
 800b63a:	b510      	push	{r4, lr}
 800b63c:	eb01 0402 	add.w	r4, r1, r2
 800b640:	d902      	bls.n	800b648 <memmove+0x10>
 800b642:	4284      	cmp	r4, r0
 800b644:	4623      	mov	r3, r4
 800b646:	d807      	bhi.n	800b658 <memmove+0x20>
 800b648:	1e43      	subs	r3, r0, #1
 800b64a:	42a1      	cmp	r1, r4
 800b64c:	d008      	beq.n	800b660 <memmove+0x28>
 800b64e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b652:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b656:	e7f8      	b.n	800b64a <memmove+0x12>
 800b658:	4402      	add	r2, r0
 800b65a:	4601      	mov	r1, r0
 800b65c:	428a      	cmp	r2, r1
 800b65e:	d100      	bne.n	800b662 <memmove+0x2a>
 800b660:	bd10      	pop	{r4, pc}
 800b662:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b666:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b66a:	e7f7      	b.n	800b65c <memmove+0x24>

0800b66c <memset>:
 800b66c:	4402      	add	r2, r0
 800b66e:	4603      	mov	r3, r0
 800b670:	4293      	cmp	r3, r2
 800b672:	d100      	bne.n	800b676 <memset+0xa>
 800b674:	4770      	bx	lr
 800b676:	f803 1b01 	strb.w	r1, [r3], #1
 800b67a:	e7f9      	b.n	800b670 <memset+0x4>

0800b67c <_free_r>:
 800b67c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b67e:	2900      	cmp	r1, #0
 800b680:	d044      	beq.n	800b70c <_free_r+0x90>
 800b682:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b686:	9001      	str	r0, [sp, #4]
 800b688:	2b00      	cmp	r3, #0
 800b68a:	f1a1 0404 	sub.w	r4, r1, #4
 800b68e:	bfb8      	it	lt
 800b690:	18e4      	addlt	r4, r4, r3
 800b692:	f000 f9d3 	bl	800ba3c <__malloc_lock>
 800b696:	4a1e      	ldr	r2, [pc, #120]	; (800b710 <_free_r+0x94>)
 800b698:	9801      	ldr	r0, [sp, #4]
 800b69a:	6813      	ldr	r3, [r2, #0]
 800b69c:	b933      	cbnz	r3, 800b6ac <_free_r+0x30>
 800b69e:	6063      	str	r3, [r4, #4]
 800b6a0:	6014      	str	r4, [r2, #0]
 800b6a2:	b003      	add	sp, #12
 800b6a4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b6a8:	f000 b9ce 	b.w	800ba48 <__malloc_unlock>
 800b6ac:	42a3      	cmp	r3, r4
 800b6ae:	d908      	bls.n	800b6c2 <_free_r+0x46>
 800b6b0:	6825      	ldr	r5, [r4, #0]
 800b6b2:	1961      	adds	r1, r4, r5
 800b6b4:	428b      	cmp	r3, r1
 800b6b6:	bf01      	itttt	eq
 800b6b8:	6819      	ldreq	r1, [r3, #0]
 800b6ba:	685b      	ldreq	r3, [r3, #4]
 800b6bc:	1949      	addeq	r1, r1, r5
 800b6be:	6021      	streq	r1, [r4, #0]
 800b6c0:	e7ed      	b.n	800b69e <_free_r+0x22>
 800b6c2:	461a      	mov	r2, r3
 800b6c4:	685b      	ldr	r3, [r3, #4]
 800b6c6:	b10b      	cbz	r3, 800b6cc <_free_r+0x50>
 800b6c8:	42a3      	cmp	r3, r4
 800b6ca:	d9fa      	bls.n	800b6c2 <_free_r+0x46>
 800b6cc:	6811      	ldr	r1, [r2, #0]
 800b6ce:	1855      	adds	r5, r2, r1
 800b6d0:	42a5      	cmp	r5, r4
 800b6d2:	d10b      	bne.n	800b6ec <_free_r+0x70>
 800b6d4:	6824      	ldr	r4, [r4, #0]
 800b6d6:	4421      	add	r1, r4
 800b6d8:	1854      	adds	r4, r2, r1
 800b6da:	42a3      	cmp	r3, r4
 800b6dc:	6011      	str	r1, [r2, #0]
 800b6de:	d1e0      	bne.n	800b6a2 <_free_r+0x26>
 800b6e0:	681c      	ldr	r4, [r3, #0]
 800b6e2:	685b      	ldr	r3, [r3, #4]
 800b6e4:	6053      	str	r3, [r2, #4]
 800b6e6:	4421      	add	r1, r4
 800b6e8:	6011      	str	r1, [r2, #0]
 800b6ea:	e7da      	b.n	800b6a2 <_free_r+0x26>
 800b6ec:	d902      	bls.n	800b6f4 <_free_r+0x78>
 800b6ee:	230c      	movs	r3, #12
 800b6f0:	6003      	str	r3, [r0, #0]
 800b6f2:	e7d6      	b.n	800b6a2 <_free_r+0x26>
 800b6f4:	6825      	ldr	r5, [r4, #0]
 800b6f6:	1961      	adds	r1, r4, r5
 800b6f8:	428b      	cmp	r3, r1
 800b6fa:	bf04      	itt	eq
 800b6fc:	6819      	ldreq	r1, [r3, #0]
 800b6fe:	685b      	ldreq	r3, [r3, #4]
 800b700:	6063      	str	r3, [r4, #4]
 800b702:	bf04      	itt	eq
 800b704:	1949      	addeq	r1, r1, r5
 800b706:	6021      	streq	r1, [r4, #0]
 800b708:	6054      	str	r4, [r2, #4]
 800b70a:	e7ca      	b.n	800b6a2 <_free_r+0x26>
 800b70c:	b003      	add	sp, #12
 800b70e:	bd30      	pop	{r4, r5, pc}
 800b710:	20005718 	.word	0x20005718

0800b714 <sbrk_aligned>:
 800b714:	b570      	push	{r4, r5, r6, lr}
 800b716:	4e0e      	ldr	r6, [pc, #56]	; (800b750 <sbrk_aligned+0x3c>)
 800b718:	460c      	mov	r4, r1
 800b71a:	6831      	ldr	r1, [r6, #0]
 800b71c:	4605      	mov	r5, r0
 800b71e:	b911      	cbnz	r1, 800b726 <sbrk_aligned+0x12>
 800b720:	f000 f8fe 	bl	800b920 <_sbrk_r>
 800b724:	6030      	str	r0, [r6, #0]
 800b726:	4621      	mov	r1, r4
 800b728:	4628      	mov	r0, r5
 800b72a:	f000 f8f9 	bl	800b920 <_sbrk_r>
 800b72e:	1c43      	adds	r3, r0, #1
 800b730:	d00a      	beq.n	800b748 <sbrk_aligned+0x34>
 800b732:	1cc4      	adds	r4, r0, #3
 800b734:	f024 0403 	bic.w	r4, r4, #3
 800b738:	42a0      	cmp	r0, r4
 800b73a:	d007      	beq.n	800b74c <sbrk_aligned+0x38>
 800b73c:	1a21      	subs	r1, r4, r0
 800b73e:	4628      	mov	r0, r5
 800b740:	f000 f8ee 	bl	800b920 <_sbrk_r>
 800b744:	3001      	adds	r0, #1
 800b746:	d101      	bne.n	800b74c <sbrk_aligned+0x38>
 800b748:	f04f 34ff 	mov.w	r4, #4294967295
 800b74c:	4620      	mov	r0, r4
 800b74e:	bd70      	pop	{r4, r5, r6, pc}
 800b750:	2000571c 	.word	0x2000571c

0800b754 <_malloc_r>:
 800b754:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b758:	1ccd      	adds	r5, r1, #3
 800b75a:	f025 0503 	bic.w	r5, r5, #3
 800b75e:	3508      	adds	r5, #8
 800b760:	2d0c      	cmp	r5, #12
 800b762:	bf38      	it	cc
 800b764:	250c      	movcc	r5, #12
 800b766:	2d00      	cmp	r5, #0
 800b768:	4607      	mov	r7, r0
 800b76a:	db01      	blt.n	800b770 <_malloc_r+0x1c>
 800b76c:	42a9      	cmp	r1, r5
 800b76e:	d905      	bls.n	800b77c <_malloc_r+0x28>
 800b770:	230c      	movs	r3, #12
 800b772:	603b      	str	r3, [r7, #0]
 800b774:	2600      	movs	r6, #0
 800b776:	4630      	mov	r0, r6
 800b778:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b77c:	4e2e      	ldr	r6, [pc, #184]	; (800b838 <_malloc_r+0xe4>)
 800b77e:	f000 f95d 	bl	800ba3c <__malloc_lock>
 800b782:	6833      	ldr	r3, [r6, #0]
 800b784:	461c      	mov	r4, r3
 800b786:	bb34      	cbnz	r4, 800b7d6 <_malloc_r+0x82>
 800b788:	4629      	mov	r1, r5
 800b78a:	4638      	mov	r0, r7
 800b78c:	f7ff ffc2 	bl	800b714 <sbrk_aligned>
 800b790:	1c43      	adds	r3, r0, #1
 800b792:	4604      	mov	r4, r0
 800b794:	d14d      	bne.n	800b832 <_malloc_r+0xde>
 800b796:	6834      	ldr	r4, [r6, #0]
 800b798:	4626      	mov	r6, r4
 800b79a:	2e00      	cmp	r6, #0
 800b79c:	d140      	bne.n	800b820 <_malloc_r+0xcc>
 800b79e:	6823      	ldr	r3, [r4, #0]
 800b7a0:	4631      	mov	r1, r6
 800b7a2:	4638      	mov	r0, r7
 800b7a4:	eb04 0803 	add.w	r8, r4, r3
 800b7a8:	f000 f8ba 	bl	800b920 <_sbrk_r>
 800b7ac:	4580      	cmp	r8, r0
 800b7ae:	d13a      	bne.n	800b826 <_malloc_r+0xd2>
 800b7b0:	6821      	ldr	r1, [r4, #0]
 800b7b2:	3503      	adds	r5, #3
 800b7b4:	1a6d      	subs	r5, r5, r1
 800b7b6:	f025 0503 	bic.w	r5, r5, #3
 800b7ba:	3508      	adds	r5, #8
 800b7bc:	2d0c      	cmp	r5, #12
 800b7be:	bf38      	it	cc
 800b7c0:	250c      	movcc	r5, #12
 800b7c2:	4629      	mov	r1, r5
 800b7c4:	4638      	mov	r0, r7
 800b7c6:	f7ff ffa5 	bl	800b714 <sbrk_aligned>
 800b7ca:	3001      	adds	r0, #1
 800b7cc:	d02b      	beq.n	800b826 <_malloc_r+0xd2>
 800b7ce:	6823      	ldr	r3, [r4, #0]
 800b7d0:	442b      	add	r3, r5
 800b7d2:	6023      	str	r3, [r4, #0]
 800b7d4:	e00e      	b.n	800b7f4 <_malloc_r+0xa0>
 800b7d6:	6822      	ldr	r2, [r4, #0]
 800b7d8:	1b52      	subs	r2, r2, r5
 800b7da:	d41e      	bmi.n	800b81a <_malloc_r+0xc6>
 800b7dc:	2a0b      	cmp	r2, #11
 800b7de:	d916      	bls.n	800b80e <_malloc_r+0xba>
 800b7e0:	1961      	adds	r1, r4, r5
 800b7e2:	42a3      	cmp	r3, r4
 800b7e4:	6025      	str	r5, [r4, #0]
 800b7e6:	bf18      	it	ne
 800b7e8:	6059      	strne	r1, [r3, #4]
 800b7ea:	6863      	ldr	r3, [r4, #4]
 800b7ec:	bf08      	it	eq
 800b7ee:	6031      	streq	r1, [r6, #0]
 800b7f0:	5162      	str	r2, [r4, r5]
 800b7f2:	604b      	str	r3, [r1, #4]
 800b7f4:	4638      	mov	r0, r7
 800b7f6:	f104 060b 	add.w	r6, r4, #11
 800b7fa:	f000 f925 	bl	800ba48 <__malloc_unlock>
 800b7fe:	f026 0607 	bic.w	r6, r6, #7
 800b802:	1d23      	adds	r3, r4, #4
 800b804:	1af2      	subs	r2, r6, r3
 800b806:	d0b6      	beq.n	800b776 <_malloc_r+0x22>
 800b808:	1b9b      	subs	r3, r3, r6
 800b80a:	50a3      	str	r3, [r4, r2]
 800b80c:	e7b3      	b.n	800b776 <_malloc_r+0x22>
 800b80e:	6862      	ldr	r2, [r4, #4]
 800b810:	42a3      	cmp	r3, r4
 800b812:	bf0c      	ite	eq
 800b814:	6032      	streq	r2, [r6, #0]
 800b816:	605a      	strne	r2, [r3, #4]
 800b818:	e7ec      	b.n	800b7f4 <_malloc_r+0xa0>
 800b81a:	4623      	mov	r3, r4
 800b81c:	6864      	ldr	r4, [r4, #4]
 800b81e:	e7b2      	b.n	800b786 <_malloc_r+0x32>
 800b820:	4634      	mov	r4, r6
 800b822:	6876      	ldr	r6, [r6, #4]
 800b824:	e7b9      	b.n	800b79a <_malloc_r+0x46>
 800b826:	230c      	movs	r3, #12
 800b828:	603b      	str	r3, [r7, #0]
 800b82a:	4638      	mov	r0, r7
 800b82c:	f000 f90c 	bl	800ba48 <__malloc_unlock>
 800b830:	e7a1      	b.n	800b776 <_malloc_r+0x22>
 800b832:	6025      	str	r5, [r4, #0]
 800b834:	e7de      	b.n	800b7f4 <_malloc_r+0xa0>
 800b836:	bf00      	nop
 800b838:	20005718 	.word	0x20005718

0800b83c <realloc>:
 800b83c:	4b02      	ldr	r3, [pc, #8]	; (800b848 <realloc+0xc>)
 800b83e:	460a      	mov	r2, r1
 800b840:	4601      	mov	r1, r0
 800b842:	6818      	ldr	r0, [r3, #0]
 800b844:	f000 b906 	b.w	800ba54 <_realloc_r>
 800b848:	20000014 	.word	0x20000014

0800b84c <cleanup_glue>:
 800b84c:	b538      	push	{r3, r4, r5, lr}
 800b84e:	460c      	mov	r4, r1
 800b850:	6809      	ldr	r1, [r1, #0]
 800b852:	4605      	mov	r5, r0
 800b854:	b109      	cbz	r1, 800b85a <cleanup_glue+0xe>
 800b856:	f7ff fff9 	bl	800b84c <cleanup_glue>
 800b85a:	4621      	mov	r1, r4
 800b85c:	4628      	mov	r0, r5
 800b85e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b862:	f7ff bf0b 	b.w	800b67c <_free_r>
	...

0800b868 <_reclaim_reent>:
 800b868:	4b2c      	ldr	r3, [pc, #176]	; (800b91c <_reclaim_reent+0xb4>)
 800b86a:	681b      	ldr	r3, [r3, #0]
 800b86c:	4283      	cmp	r3, r0
 800b86e:	b570      	push	{r4, r5, r6, lr}
 800b870:	4604      	mov	r4, r0
 800b872:	d051      	beq.n	800b918 <_reclaim_reent+0xb0>
 800b874:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800b876:	b143      	cbz	r3, 800b88a <_reclaim_reent+0x22>
 800b878:	68db      	ldr	r3, [r3, #12]
 800b87a:	2b00      	cmp	r3, #0
 800b87c:	d14a      	bne.n	800b914 <_reclaim_reent+0xac>
 800b87e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b880:	6819      	ldr	r1, [r3, #0]
 800b882:	b111      	cbz	r1, 800b88a <_reclaim_reent+0x22>
 800b884:	4620      	mov	r0, r4
 800b886:	f7ff fef9 	bl	800b67c <_free_r>
 800b88a:	6961      	ldr	r1, [r4, #20]
 800b88c:	b111      	cbz	r1, 800b894 <_reclaim_reent+0x2c>
 800b88e:	4620      	mov	r0, r4
 800b890:	f7ff fef4 	bl	800b67c <_free_r>
 800b894:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800b896:	b111      	cbz	r1, 800b89e <_reclaim_reent+0x36>
 800b898:	4620      	mov	r0, r4
 800b89a:	f7ff feef 	bl	800b67c <_free_r>
 800b89e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800b8a0:	b111      	cbz	r1, 800b8a8 <_reclaim_reent+0x40>
 800b8a2:	4620      	mov	r0, r4
 800b8a4:	f7ff feea 	bl	800b67c <_free_r>
 800b8a8:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800b8aa:	b111      	cbz	r1, 800b8b2 <_reclaim_reent+0x4a>
 800b8ac:	4620      	mov	r0, r4
 800b8ae:	f7ff fee5 	bl	800b67c <_free_r>
 800b8b2:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800b8b4:	b111      	cbz	r1, 800b8bc <_reclaim_reent+0x54>
 800b8b6:	4620      	mov	r0, r4
 800b8b8:	f7ff fee0 	bl	800b67c <_free_r>
 800b8bc:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800b8be:	b111      	cbz	r1, 800b8c6 <_reclaim_reent+0x5e>
 800b8c0:	4620      	mov	r0, r4
 800b8c2:	f7ff fedb 	bl	800b67c <_free_r>
 800b8c6:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800b8c8:	b111      	cbz	r1, 800b8d0 <_reclaim_reent+0x68>
 800b8ca:	4620      	mov	r0, r4
 800b8cc:	f7ff fed6 	bl	800b67c <_free_r>
 800b8d0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b8d2:	b111      	cbz	r1, 800b8da <_reclaim_reent+0x72>
 800b8d4:	4620      	mov	r0, r4
 800b8d6:	f7ff fed1 	bl	800b67c <_free_r>
 800b8da:	69a3      	ldr	r3, [r4, #24]
 800b8dc:	b1e3      	cbz	r3, 800b918 <_reclaim_reent+0xb0>
 800b8de:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800b8e0:	4620      	mov	r0, r4
 800b8e2:	4798      	blx	r3
 800b8e4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800b8e6:	b1b9      	cbz	r1, 800b918 <_reclaim_reent+0xb0>
 800b8e8:	4620      	mov	r0, r4
 800b8ea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b8ee:	f7ff bfad 	b.w	800b84c <cleanup_glue>
 800b8f2:	5949      	ldr	r1, [r1, r5]
 800b8f4:	b941      	cbnz	r1, 800b908 <_reclaim_reent+0xa0>
 800b8f6:	3504      	adds	r5, #4
 800b8f8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b8fa:	2d80      	cmp	r5, #128	; 0x80
 800b8fc:	68d9      	ldr	r1, [r3, #12]
 800b8fe:	d1f8      	bne.n	800b8f2 <_reclaim_reent+0x8a>
 800b900:	4620      	mov	r0, r4
 800b902:	f7ff febb 	bl	800b67c <_free_r>
 800b906:	e7ba      	b.n	800b87e <_reclaim_reent+0x16>
 800b908:	680e      	ldr	r6, [r1, #0]
 800b90a:	4620      	mov	r0, r4
 800b90c:	f7ff feb6 	bl	800b67c <_free_r>
 800b910:	4631      	mov	r1, r6
 800b912:	e7ef      	b.n	800b8f4 <_reclaim_reent+0x8c>
 800b914:	2500      	movs	r5, #0
 800b916:	e7ef      	b.n	800b8f8 <_reclaim_reent+0x90>
 800b918:	bd70      	pop	{r4, r5, r6, pc}
 800b91a:	bf00      	nop
 800b91c:	20000014 	.word	0x20000014

0800b920 <_sbrk_r>:
 800b920:	b538      	push	{r3, r4, r5, lr}
 800b922:	4d06      	ldr	r5, [pc, #24]	; (800b93c <_sbrk_r+0x1c>)
 800b924:	2300      	movs	r3, #0
 800b926:	4604      	mov	r4, r0
 800b928:	4608      	mov	r0, r1
 800b92a:	602b      	str	r3, [r5, #0]
 800b92c:	f7f8 fbca 	bl	80040c4 <_sbrk>
 800b930:	1c43      	adds	r3, r0, #1
 800b932:	d102      	bne.n	800b93a <_sbrk_r+0x1a>
 800b934:	682b      	ldr	r3, [r5, #0]
 800b936:	b103      	cbz	r3, 800b93a <_sbrk_r+0x1a>
 800b938:	6023      	str	r3, [r4, #0]
 800b93a:	bd38      	pop	{r3, r4, r5, pc}
 800b93c:	20005720 	.word	0x20005720

0800b940 <_raise_r>:
 800b940:	291f      	cmp	r1, #31
 800b942:	b538      	push	{r3, r4, r5, lr}
 800b944:	4604      	mov	r4, r0
 800b946:	460d      	mov	r5, r1
 800b948:	d904      	bls.n	800b954 <_raise_r+0x14>
 800b94a:	2316      	movs	r3, #22
 800b94c:	6003      	str	r3, [r0, #0]
 800b94e:	f04f 30ff 	mov.w	r0, #4294967295
 800b952:	bd38      	pop	{r3, r4, r5, pc}
 800b954:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b956:	b112      	cbz	r2, 800b95e <_raise_r+0x1e>
 800b958:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b95c:	b94b      	cbnz	r3, 800b972 <_raise_r+0x32>
 800b95e:	4620      	mov	r0, r4
 800b960:	f000 f830 	bl	800b9c4 <_getpid_r>
 800b964:	462a      	mov	r2, r5
 800b966:	4601      	mov	r1, r0
 800b968:	4620      	mov	r0, r4
 800b96a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b96e:	f000 b817 	b.w	800b9a0 <_kill_r>
 800b972:	2b01      	cmp	r3, #1
 800b974:	d00a      	beq.n	800b98c <_raise_r+0x4c>
 800b976:	1c59      	adds	r1, r3, #1
 800b978:	d103      	bne.n	800b982 <_raise_r+0x42>
 800b97a:	2316      	movs	r3, #22
 800b97c:	6003      	str	r3, [r0, #0]
 800b97e:	2001      	movs	r0, #1
 800b980:	e7e7      	b.n	800b952 <_raise_r+0x12>
 800b982:	2400      	movs	r4, #0
 800b984:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b988:	4628      	mov	r0, r5
 800b98a:	4798      	blx	r3
 800b98c:	2000      	movs	r0, #0
 800b98e:	e7e0      	b.n	800b952 <_raise_r+0x12>

0800b990 <raise>:
 800b990:	4b02      	ldr	r3, [pc, #8]	; (800b99c <raise+0xc>)
 800b992:	4601      	mov	r1, r0
 800b994:	6818      	ldr	r0, [r3, #0]
 800b996:	f7ff bfd3 	b.w	800b940 <_raise_r>
 800b99a:	bf00      	nop
 800b99c:	20000014 	.word	0x20000014

0800b9a0 <_kill_r>:
 800b9a0:	b538      	push	{r3, r4, r5, lr}
 800b9a2:	4d07      	ldr	r5, [pc, #28]	; (800b9c0 <_kill_r+0x20>)
 800b9a4:	2300      	movs	r3, #0
 800b9a6:	4604      	mov	r4, r0
 800b9a8:	4608      	mov	r0, r1
 800b9aa:	4611      	mov	r1, r2
 800b9ac:	602b      	str	r3, [r5, #0]
 800b9ae:	f7f8 fb6f 	bl	8004090 <_kill>
 800b9b2:	1c43      	adds	r3, r0, #1
 800b9b4:	d102      	bne.n	800b9bc <_kill_r+0x1c>
 800b9b6:	682b      	ldr	r3, [r5, #0]
 800b9b8:	b103      	cbz	r3, 800b9bc <_kill_r+0x1c>
 800b9ba:	6023      	str	r3, [r4, #0]
 800b9bc:	bd38      	pop	{r3, r4, r5, pc}
 800b9be:	bf00      	nop
 800b9c0:	20005720 	.word	0x20005720

0800b9c4 <_getpid_r>:
 800b9c4:	f7f8 bb5c 	b.w	8004080 <_getpid>

0800b9c8 <_vsniprintf_r>:
 800b9c8:	b530      	push	{r4, r5, lr}
 800b9ca:	4614      	mov	r4, r2
 800b9cc:	2c00      	cmp	r4, #0
 800b9ce:	b09b      	sub	sp, #108	; 0x6c
 800b9d0:	4605      	mov	r5, r0
 800b9d2:	461a      	mov	r2, r3
 800b9d4:	da05      	bge.n	800b9e2 <_vsniprintf_r+0x1a>
 800b9d6:	238b      	movs	r3, #139	; 0x8b
 800b9d8:	6003      	str	r3, [r0, #0]
 800b9da:	f04f 30ff 	mov.w	r0, #4294967295
 800b9de:	b01b      	add	sp, #108	; 0x6c
 800b9e0:	bd30      	pop	{r4, r5, pc}
 800b9e2:	f44f 7302 	mov.w	r3, #520	; 0x208
 800b9e6:	f8ad 300c 	strh.w	r3, [sp, #12]
 800b9ea:	bf14      	ite	ne
 800b9ec:	f104 33ff 	addne.w	r3, r4, #4294967295
 800b9f0:	4623      	moveq	r3, r4
 800b9f2:	9302      	str	r3, [sp, #8]
 800b9f4:	9305      	str	r3, [sp, #20]
 800b9f6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b9fa:	9100      	str	r1, [sp, #0]
 800b9fc:	9104      	str	r1, [sp, #16]
 800b9fe:	f8ad 300e 	strh.w	r3, [sp, #14]
 800ba02:	4669      	mov	r1, sp
 800ba04:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800ba06:	f000 f8af 	bl	800bb68 <_svfiprintf_r>
 800ba0a:	1c43      	adds	r3, r0, #1
 800ba0c:	bfbc      	itt	lt
 800ba0e:	238b      	movlt	r3, #139	; 0x8b
 800ba10:	602b      	strlt	r3, [r5, #0]
 800ba12:	2c00      	cmp	r4, #0
 800ba14:	d0e3      	beq.n	800b9de <_vsniprintf_r+0x16>
 800ba16:	9b00      	ldr	r3, [sp, #0]
 800ba18:	2200      	movs	r2, #0
 800ba1a:	701a      	strb	r2, [r3, #0]
 800ba1c:	e7df      	b.n	800b9de <_vsniprintf_r+0x16>
	...

0800ba20 <vsniprintf>:
 800ba20:	b507      	push	{r0, r1, r2, lr}
 800ba22:	9300      	str	r3, [sp, #0]
 800ba24:	4613      	mov	r3, r2
 800ba26:	460a      	mov	r2, r1
 800ba28:	4601      	mov	r1, r0
 800ba2a:	4803      	ldr	r0, [pc, #12]	; (800ba38 <vsniprintf+0x18>)
 800ba2c:	6800      	ldr	r0, [r0, #0]
 800ba2e:	f7ff ffcb 	bl	800b9c8 <_vsniprintf_r>
 800ba32:	b003      	add	sp, #12
 800ba34:	f85d fb04 	ldr.w	pc, [sp], #4
 800ba38:	20000014 	.word	0x20000014

0800ba3c <__malloc_lock>:
 800ba3c:	4801      	ldr	r0, [pc, #4]	; (800ba44 <__malloc_lock+0x8>)
 800ba3e:	f7ff bddb 	b.w	800b5f8 <__retarget_lock_acquire_recursive>
 800ba42:	bf00      	nop
 800ba44:	20005714 	.word	0x20005714

0800ba48 <__malloc_unlock>:
 800ba48:	4801      	ldr	r0, [pc, #4]	; (800ba50 <__malloc_unlock+0x8>)
 800ba4a:	f7ff bdd6 	b.w	800b5fa <__retarget_lock_release_recursive>
 800ba4e:	bf00      	nop
 800ba50:	20005714 	.word	0x20005714

0800ba54 <_realloc_r>:
 800ba54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ba58:	4680      	mov	r8, r0
 800ba5a:	4614      	mov	r4, r2
 800ba5c:	460e      	mov	r6, r1
 800ba5e:	b921      	cbnz	r1, 800ba6a <_realloc_r+0x16>
 800ba60:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ba64:	4611      	mov	r1, r2
 800ba66:	f7ff be75 	b.w	800b754 <_malloc_r>
 800ba6a:	b92a      	cbnz	r2, 800ba78 <_realloc_r+0x24>
 800ba6c:	f7ff fe06 	bl	800b67c <_free_r>
 800ba70:	4625      	mov	r5, r4
 800ba72:	4628      	mov	r0, r5
 800ba74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ba78:	f000 fb0a 	bl	800c090 <_malloc_usable_size_r>
 800ba7c:	4284      	cmp	r4, r0
 800ba7e:	4607      	mov	r7, r0
 800ba80:	d802      	bhi.n	800ba88 <_realloc_r+0x34>
 800ba82:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ba86:	d812      	bhi.n	800baae <_realloc_r+0x5a>
 800ba88:	4621      	mov	r1, r4
 800ba8a:	4640      	mov	r0, r8
 800ba8c:	f7ff fe62 	bl	800b754 <_malloc_r>
 800ba90:	4605      	mov	r5, r0
 800ba92:	2800      	cmp	r0, #0
 800ba94:	d0ed      	beq.n	800ba72 <_realloc_r+0x1e>
 800ba96:	42bc      	cmp	r4, r7
 800ba98:	4622      	mov	r2, r4
 800ba9a:	4631      	mov	r1, r6
 800ba9c:	bf28      	it	cs
 800ba9e:	463a      	movcs	r2, r7
 800baa0:	f7ff fdbc 	bl	800b61c <memcpy>
 800baa4:	4631      	mov	r1, r6
 800baa6:	4640      	mov	r0, r8
 800baa8:	f7ff fde8 	bl	800b67c <_free_r>
 800baac:	e7e1      	b.n	800ba72 <_realloc_r+0x1e>
 800baae:	4635      	mov	r5, r6
 800bab0:	e7df      	b.n	800ba72 <_realloc_r+0x1e>

0800bab2 <__ssputs_r>:
 800bab2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bab6:	688e      	ldr	r6, [r1, #8]
 800bab8:	429e      	cmp	r6, r3
 800baba:	4682      	mov	sl, r0
 800babc:	460c      	mov	r4, r1
 800babe:	4690      	mov	r8, r2
 800bac0:	461f      	mov	r7, r3
 800bac2:	d838      	bhi.n	800bb36 <__ssputs_r+0x84>
 800bac4:	898a      	ldrh	r2, [r1, #12]
 800bac6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800baca:	d032      	beq.n	800bb32 <__ssputs_r+0x80>
 800bacc:	6825      	ldr	r5, [r4, #0]
 800bace:	6909      	ldr	r1, [r1, #16]
 800bad0:	eba5 0901 	sub.w	r9, r5, r1
 800bad4:	6965      	ldr	r5, [r4, #20]
 800bad6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800bada:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800bade:	3301      	adds	r3, #1
 800bae0:	444b      	add	r3, r9
 800bae2:	106d      	asrs	r5, r5, #1
 800bae4:	429d      	cmp	r5, r3
 800bae6:	bf38      	it	cc
 800bae8:	461d      	movcc	r5, r3
 800baea:	0553      	lsls	r3, r2, #21
 800baec:	d531      	bpl.n	800bb52 <__ssputs_r+0xa0>
 800baee:	4629      	mov	r1, r5
 800baf0:	f7ff fe30 	bl	800b754 <_malloc_r>
 800baf4:	4606      	mov	r6, r0
 800baf6:	b950      	cbnz	r0, 800bb0e <__ssputs_r+0x5c>
 800baf8:	230c      	movs	r3, #12
 800bafa:	f8ca 3000 	str.w	r3, [sl]
 800bafe:	89a3      	ldrh	r3, [r4, #12]
 800bb00:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bb04:	81a3      	strh	r3, [r4, #12]
 800bb06:	f04f 30ff 	mov.w	r0, #4294967295
 800bb0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bb0e:	6921      	ldr	r1, [r4, #16]
 800bb10:	464a      	mov	r2, r9
 800bb12:	f7ff fd83 	bl	800b61c <memcpy>
 800bb16:	89a3      	ldrh	r3, [r4, #12]
 800bb18:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800bb1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bb20:	81a3      	strh	r3, [r4, #12]
 800bb22:	6126      	str	r6, [r4, #16]
 800bb24:	6165      	str	r5, [r4, #20]
 800bb26:	444e      	add	r6, r9
 800bb28:	eba5 0509 	sub.w	r5, r5, r9
 800bb2c:	6026      	str	r6, [r4, #0]
 800bb2e:	60a5      	str	r5, [r4, #8]
 800bb30:	463e      	mov	r6, r7
 800bb32:	42be      	cmp	r6, r7
 800bb34:	d900      	bls.n	800bb38 <__ssputs_r+0x86>
 800bb36:	463e      	mov	r6, r7
 800bb38:	6820      	ldr	r0, [r4, #0]
 800bb3a:	4632      	mov	r2, r6
 800bb3c:	4641      	mov	r1, r8
 800bb3e:	f7ff fd7b 	bl	800b638 <memmove>
 800bb42:	68a3      	ldr	r3, [r4, #8]
 800bb44:	1b9b      	subs	r3, r3, r6
 800bb46:	60a3      	str	r3, [r4, #8]
 800bb48:	6823      	ldr	r3, [r4, #0]
 800bb4a:	4433      	add	r3, r6
 800bb4c:	6023      	str	r3, [r4, #0]
 800bb4e:	2000      	movs	r0, #0
 800bb50:	e7db      	b.n	800bb0a <__ssputs_r+0x58>
 800bb52:	462a      	mov	r2, r5
 800bb54:	f7ff ff7e 	bl	800ba54 <_realloc_r>
 800bb58:	4606      	mov	r6, r0
 800bb5a:	2800      	cmp	r0, #0
 800bb5c:	d1e1      	bne.n	800bb22 <__ssputs_r+0x70>
 800bb5e:	6921      	ldr	r1, [r4, #16]
 800bb60:	4650      	mov	r0, sl
 800bb62:	f7ff fd8b 	bl	800b67c <_free_r>
 800bb66:	e7c7      	b.n	800baf8 <__ssputs_r+0x46>

0800bb68 <_svfiprintf_r>:
 800bb68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb6c:	4698      	mov	r8, r3
 800bb6e:	898b      	ldrh	r3, [r1, #12]
 800bb70:	061b      	lsls	r3, r3, #24
 800bb72:	b09d      	sub	sp, #116	; 0x74
 800bb74:	4607      	mov	r7, r0
 800bb76:	460d      	mov	r5, r1
 800bb78:	4614      	mov	r4, r2
 800bb7a:	d50e      	bpl.n	800bb9a <_svfiprintf_r+0x32>
 800bb7c:	690b      	ldr	r3, [r1, #16]
 800bb7e:	b963      	cbnz	r3, 800bb9a <_svfiprintf_r+0x32>
 800bb80:	2140      	movs	r1, #64	; 0x40
 800bb82:	f7ff fde7 	bl	800b754 <_malloc_r>
 800bb86:	6028      	str	r0, [r5, #0]
 800bb88:	6128      	str	r0, [r5, #16]
 800bb8a:	b920      	cbnz	r0, 800bb96 <_svfiprintf_r+0x2e>
 800bb8c:	230c      	movs	r3, #12
 800bb8e:	603b      	str	r3, [r7, #0]
 800bb90:	f04f 30ff 	mov.w	r0, #4294967295
 800bb94:	e0d1      	b.n	800bd3a <_svfiprintf_r+0x1d2>
 800bb96:	2340      	movs	r3, #64	; 0x40
 800bb98:	616b      	str	r3, [r5, #20]
 800bb9a:	2300      	movs	r3, #0
 800bb9c:	9309      	str	r3, [sp, #36]	; 0x24
 800bb9e:	2320      	movs	r3, #32
 800bba0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bba4:	f8cd 800c 	str.w	r8, [sp, #12]
 800bba8:	2330      	movs	r3, #48	; 0x30
 800bbaa:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800bd54 <_svfiprintf_r+0x1ec>
 800bbae:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bbb2:	f04f 0901 	mov.w	r9, #1
 800bbb6:	4623      	mov	r3, r4
 800bbb8:	469a      	mov	sl, r3
 800bbba:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bbbe:	b10a      	cbz	r2, 800bbc4 <_svfiprintf_r+0x5c>
 800bbc0:	2a25      	cmp	r2, #37	; 0x25
 800bbc2:	d1f9      	bne.n	800bbb8 <_svfiprintf_r+0x50>
 800bbc4:	ebba 0b04 	subs.w	fp, sl, r4
 800bbc8:	d00b      	beq.n	800bbe2 <_svfiprintf_r+0x7a>
 800bbca:	465b      	mov	r3, fp
 800bbcc:	4622      	mov	r2, r4
 800bbce:	4629      	mov	r1, r5
 800bbd0:	4638      	mov	r0, r7
 800bbd2:	f7ff ff6e 	bl	800bab2 <__ssputs_r>
 800bbd6:	3001      	adds	r0, #1
 800bbd8:	f000 80aa 	beq.w	800bd30 <_svfiprintf_r+0x1c8>
 800bbdc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bbde:	445a      	add	r2, fp
 800bbe0:	9209      	str	r2, [sp, #36]	; 0x24
 800bbe2:	f89a 3000 	ldrb.w	r3, [sl]
 800bbe6:	2b00      	cmp	r3, #0
 800bbe8:	f000 80a2 	beq.w	800bd30 <_svfiprintf_r+0x1c8>
 800bbec:	2300      	movs	r3, #0
 800bbee:	f04f 32ff 	mov.w	r2, #4294967295
 800bbf2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bbf6:	f10a 0a01 	add.w	sl, sl, #1
 800bbfa:	9304      	str	r3, [sp, #16]
 800bbfc:	9307      	str	r3, [sp, #28]
 800bbfe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bc02:	931a      	str	r3, [sp, #104]	; 0x68
 800bc04:	4654      	mov	r4, sl
 800bc06:	2205      	movs	r2, #5
 800bc08:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bc0c:	4851      	ldr	r0, [pc, #324]	; (800bd54 <_svfiprintf_r+0x1ec>)
 800bc0e:	f7f4 fae7 	bl	80001e0 <memchr>
 800bc12:	9a04      	ldr	r2, [sp, #16]
 800bc14:	b9d8      	cbnz	r0, 800bc4e <_svfiprintf_r+0xe6>
 800bc16:	06d0      	lsls	r0, r2, #27
 800bc18:	bf44      	itt	mi
 800bc1a:	2320      	movmi	r3, #32
 800bc1c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bc20:	0711      	lsls	r1, r2, #28
 800bc22:	bf44      	itt	mi
 800bc24:	232b      	movmi	r3, #43	; 0x2b
 800bc26:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bc2a:	f89a 3000 	ldrb.w	r3, [sl]
 800bc2e:	2b2a      	cmp	r3, #42	; 0x2a
 800bc30:	d015      	beq.n	800bc5e <_svfiprintf_r+0xf6>
 800bc32:	9a07      	ldr	r2, [sp, #28]
 800bc34:	4654      	mov	r4, sl
 800bc36:	2000      	movs	r0, #0
 800bc38:	f04f 0c0a 	mov.w	ip, #10
 800bc3c:	4621      	mov	r1, r4
 800bc3e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bc42:	3b30      	subs	r3, #48	; 0x30
 800bc44:	2b09      	cmp	r3, #9
 800bc46:	d94e      	bls.n	800bce6 <_svfiprintf_r+0x17e>
 800bc48:	b1b0      	cbz	r0, 800bc78 <_svfiprintf_r+0x110>
 800bc4a:	9207      	str	r2, [sp, #28]
 800bc4c:	e014      	b.n	800bc78 <_svfiprintf_r+0x110>
 800bc4e:	eba0 0308 	sub.w	r3, r0, r8
 800bc52:	fa09 f303 	lsl.w	r3, r9, r3
 800bc56:	4313      	orrs	r3, r2
 800bc58:	9304      	str	r3, [sp, #16]
 800bc5a:	46a2      	mov	sl, r4
 800bc5c:	e7d2      	b.n	800bc04 <_svfiprintf_r+0x9c>
 800bc5e:	9b03      	ldr	r3, [sp, #12]
 800bc60:	1d19      	adds	r1, r3, #4
 800bc62:	681b      	ldr	r3, [r3, #0]
 800bc64:	9103      	str	r1, [sp, #12]
 800bc66:	2b00      	cmp	r3, #0
 800bc68:	bfbb      	ittet	lt
 800bc6a:	425b      	neglt	r3, r3
 800bc6c:	f042 0202 	orrlt.w	r2, r2, #2
 800bc70:	9307      	strge	r3, [sp, #28]
 800bc72:	9307      	strlt	r3, [sp, #28]
 800bc74:	bfb8      	it	lt
 800bc76:	9204      	strlt	r2, [sp, #16]
 800bc78:	7823      	ldrb	r3, [r4, #0]
 800bc7a:	2b2e      	cmp	r3, #46	; 0x2e
 800bc7c:	d10c      	bne.n	800bc98 <_svfiprintf_r+0x130>
 800bc7e:	7863      	ldrb	r3, [r4, #1]
 800bc80:	2b2a      	cmp	r3, #42	; 0x2a
 800bc82:	d135      	bne.n	800bcf0 <_svfiprintf_r+0x188>
 800bc84:	9b03      	ldr	r3, [sp, #12]
 800bc86:	1d1a      	adds	r2, r3, #4
 800bc88:	681b      	ldr	r3, [r3, #0]
 800bc8a:	9203      	str	r2, [sp, #12]
 800bc8c:	2b00      	cmp	r3, #0
 800bc8e:	bfb8      	it	lt
 800bc90:	f04f 33ff 	movlt.w	r3, #4294967295
 800bc94:	3402      	adds	r4, #2
 800bc96:	9305      	str	r3, [sp, #20]
 800bc98:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800bd64 <_svfiprintf_r+0x1fc>
 800bc9c:	7821      	ldrb	r1, [r4, #0]
 800bc9e:	2203      	movs	r2, #3
 800bca0:	4650      	mov	r0, sl
 800bca2:	f7f4 fa9d 	bl	80001e0 <memchr>
 800bca6:	b140      	cbz	r0, 800bcba <_svfiprintf_r+0x152>
 800bca8:	2340      	movs	r3, #64	; 0x40
 800bcaa:	eba0 000a 	sub.w	r0, r0, sl
 800bcae:	fa03 f000 	lsl.w	r0, r3, r0
 800bcb2:	9b04      	ldr	r3, [sp, #16]
 800bcb4:	4303      	orrs	r3, r0
 800bcb6:	3401      	adds	r4, #1
 800bcb8:	9304      	str	r3, [sp, #16]
 800bcba:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bcbe:	4826      	ldr	r0, [pc, #152]	; (800bd58 <_svfiprintf_r+0x1f0>)
 800bcc0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bcc4:	2206      	movs	r2, #6
 800bcc6:	f7f4 fa8b 	bl	80001e0 <memchr>
 800bcca:	2800      	cmp	r0, #0
 800bccc:	d038      	beq.n	800bd40 <_svfiprintf_r+0x1d8>
 800bcce:	4b23      	ldr	r3, [pc, #140]	; (800bd5c <_svfiprintf_r+0x1f4>)
 800bcd0:	bb1b      	cbnz	r3, 800bd1a <_svfiprintf_r+0x1b2>
 800bcd2:	9b03      	ldr	r3, [sp, #12]
 800bcd4:	3307      	adds	r3, #7
 800bcd6:	f023 0307 	bic.w	r3, r3, #7
 800bcda:	3308      	adds	r3, #8
 800bcdc:	9303      	str	r3, [sp, #12]
 800bcde:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bce0:	4433      	add	r3, r6
 800bce2:	9309      	str	r3, [sp, #36]	; 0x24
 800bce4:	e767      	b.n	800bbb6 <_svfiprintf_r+0x4e>
 800bce6:	fb0c 3202 	mla	r2, ip, r2, r3
 800bcea:	460c      	mov	r4, r1
 800bcec:	2001      	movs	r0, #1
 800bcee:	e7a5      	b.n	800bc3c <_svfiprintf_r+0xd4>
 800bcf0:	2300      	movs	r3, #0
 800bcf2:	3401      	adds	r4, #1
 800bcf4:	9305      	str	r3, [sp, #20]
 800bcf6:	4619      	mov	r1, r3
 800bcf8:	f04f 0c0a 	mov.w	ip, #10
 800bcfc:	4620      	mov	r0, r4
 800bcfe:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bd02:	3a30      	subs	r2, #48	; 0x30
 800bd04:	2a09      	cmp	r2, #9
 800bd06:	d903      	bls.n	800bd10 <_svfiprintf_r+0x1a8>
 800bd08:	2b00      	cmp	r3, #0
 800bd0a:	d0c5      	beq.n	800bc98 <_svfiprintf_r+0x130>
 800bd0c:	9105      	str	r1, [sp, #20]
 800bd0e:	e7c3      	b.n	800bc98 <_svfiprintf_r+0x130>
 800bd10:	fb0c 2101 	mla	r1, ip, r1, r2
 800bd14:	4604      	mov	r4, r0
 800bd16:	2301      	movs	r3, #1
 800bd18:	e7f0      	b.n	800bcfc <_svfiprintf_r+0x194>
 800bd1a:	ab03      	add	r3, sp, #12
 800bd1c:	9300      	str	r3, [sp, #0]
 800bd1e:	462a      	mov	r2, r5
 800bd20:	4b0f      	ldr	r3, [pc, #60]	; (800bd60 <_svfiprintf_r+0x1f8>)
 800bd22:	a904      	add	r1, sp, #16
 800bd24:	4638      	mov	r0, r7
 800bd26:	f3af 8000 	nop.w
 800bd2a:	1c42      	adds	r2, r0, #1
 800bd2c:	4606      	mov	r6, r0
 800bd2e:	d1d6      	bne.n	800bcde <_svfiprintf_r+0x176>
 800bd30:	89ab      	ldrh	r3, [r5, #12]
 800bd32:	065b      	lsls	r3, r3, #25
 800bd34:	f53f af2c 	bmi.w	800bb90 <_svfiprintf_r+0x28>
 800bd38:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bd3a:	b01d      	add	sp, #116	; 0x74
 800bd3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd40:	ab03      	add	r3, sp, #12
 800bd42:	9300      	str	r3, [sp, #0]
 800bd44:	462a      	mov	r2, r5
 800bd46:	4b06      	ldr	r3, [pc, #24]	; (800bd60 <_svfiprintf_r+0x1f8>)
 800bd48:	a904      	add	r1, sp, #16
 800bd4a:	4638      	mov	r0, r7
 800bd4c:	f000 f87a 	bl	800be44 <_printf_i>
 800bd50:	e7eb      	b.n	800bd2a <_svfiprintf_r+0x1c2>
 800bd52:	bf00      	nop
 800bd54:	0800c74c 	.word	0x0800c74c
 800bd58:	0800c756 	.word	0x0800c756
 800bd5c:	00000000 	.word	0x00000000
 800bd60:	0800bab3 	.word	0x0800bab3
 800bd64:	0800c752 	.word	0x0800c752

0800bd68 <_printf_common>:
 800bd68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bd6c:	4616      	mov	r6, r2
 800bd6e:	4699      	mov	r9, r3
 800bd70:	688a      	ldr	r2, [r1, #8]
 800bd72:	690b      	ldr	r3, [r1, #16]
 800bd74:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800bd78:	4293      	cmp	r3, r2
 800bd7a:	bfb8      	it	lt
 800bd7c:	4613      	movlt	r3, r2
 800bd7e:	6033      	str	r3, [r6, #0]
 800bd80:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800bd84:	4607      	mov	r7, r0
 800bd86:	460c      	mov	r4, r1
 800bd88:	b10a      	cbz	r2, 800bd8e <_printf_common+0x26>
 800bd8a:	3301      	adds	r3, #1
 800bd8c:	6033      	str	r3, [r6, #0]
 800bd8e:	6823      	ldr	r3, [r4, #0]
 800bd90:	0699      	lsls	r1, r3, #26
 800bd92:	bf42      	ittt	mi
 800bd94:	6833      	ldrmi	r3, [r6, #0]
 800bd96:	3302      	addmi	r3, #2
 800bd98:	6033      	strmi	r3, [r6, #0]
 800bd9a:	6825      	ldr	r5, [r4, #0]
 800bd9c:	f015 0506 	ands.w	r5, r5, #6
 800bda0:	d106      	bne.n	800bdb0 <_printf_common+0x48>
 800bda2:	f104 0a19 	add.w	sl, r4, #25
 800bda6:	68e3      	ldr	r3, [r4, #12]
 800bda8:	6832      	ldr	r2, [r6, #0]
 800bdaa:	1a9b      	subs	r3, r3, r2
 800bdac:	42ab      	cmp	r3, r5
 800bdae:	dc26      	bgt.n	800bdfe <_printf_common+0x96>
 800bdb0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800bdb4:	1e13      	subs	r3, r2, #0
 800bdb6:	6822      	ldr	r2, [r4, #0]
 800bdb8:	bf18      	it	ne
 800bdba:	2301      	movne	r3, #1
 800bdbc:	0692      	lsls	r2, r2, #26
 800bdbe:	d42b      	bmi.n	800be18 <_printf_common+0xb0>
 800bdc0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800bdc4:	4649      	mov	r1, r9
 800bdc6:	4638      	mov	r0, r7
 800bdc8:	47c0      	blx	r8
 800bdca:	3001      	adds	r0, #1
 800bdcc:	d01e      	beq.n	800be0c <_printf_common+0xa4>
 800bdce:	6823      	ldr	r3, [r4, #0]
 800bdd0:	68e5      	ldr	r5, [r4, #12]
 800bdd2:	6832      	ldr	r2, [r6, #0]
 800bdd4:	f003 0306 	and.w	r3, r3, #6
 800bdd8:	2b04      	cmp	r3, #4
 800bdda:	bf08      	it	eq
 800bddc:	1aad      	subeq	r5, r5, r2
 800bdde:	68a3      	ldr	r3, [r4, #8]
 800bde0:	6922      	ldr	r2, [r4, #16]
 800bde2:	bf0c      	ite	eq
 800bde4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bde8:	2500      	movne	r5, #0
 800bdea:	4293      	cmp	r3, r2
 800bdec:	bfc4      	itt	gt
 800bdee:	1a9b      	subgt	r3, r3, r2
 800bdf0:	18ed      	addgt	r5, r5, r3
 800bdf2:	2600      	movs	r6, #0
 800bdf4:	341a      	adds	r4, #26
 800bdf6:	42b5      	cmp	r5, r6
 800bdf8:	d11a      	bne.n	800be30 <_printf_common+0xc8>
 800bdfa:	2000      	movs	r0, #0
 800bdfc:	e008      	b.n	800be10 <_printf_common+0xa8>
 800bdfe:	2301      	movs	r3, #1
 800be00:	4652      	mov	r2, sl
 800be02:	4649      	mov	r1, r9
 800be04:	4638      	mov	r0, r7
 800be06:	47c0      	blx	r8
 800be08:	3001      	adds	r0, #1
 800be0a:	d103      	bne.n	800be14 <_printf_common+0xac>
 800be0c:	f04f 30ff 	mov.w	r0, #4294967295
 800be10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800be14:	3501      	adds	r5, #1
 800be16:	e7c6      	b.n	800bda6 <_printf_common+0x3e>
 800be18:	18e1      	adds	r1, r4, r3
 800be1a:	1c5a      	adds	r2, r3, #1
 800be1c:	2030      	movs	r0, #48	; 0x30
 800be1e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800be22:	4422      	add	r2, r4
 800be24:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800be28:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800be2c:	3302      	adds	r3, #2
 800be2e:	e7c7      	b.n	800bdc0 <_printf_common+0x58>
 800be30:	2301      	movs	r3, #1
 800be32:	4622      	mov	r2, r4
 800be34:	4649      	mov	r1, r9
 800be36:	4638      	mov	r0, r7
 800be38:	47c0      	blx	r8
 800be3a:	3001      	adds	r0, #1
 800be3c:	d0e6      	beq.n	800be0c <_printf_common+0xa4>
 800be3e:	3601      	adds	r6, #1
 800be40:	e7d9      	b.n	800bdf6 <_printf_common+0x8e>
	...

0800be44 <_printf_i>:
 800be44:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800be48:	7e0f      	ldrb	r7, [r1, #24]
 800be4a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800be4c:	2f78      	cmp	r7, #120	; 0x78
 800be4e:	4691      	mov	r9, r2
 800be50:	4680      	mov	r8, r0
 800be52:	460c      	mov	r4, r1
 800be54:	469a      	mov	sl, r3
 800be56:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800be5a:	d807      	bhi.n	800be6c <_printf_i+0x28>
 800be5c:	2f62      	cmp	r7, #98	; 0x62
 800be5e:	d80a      	bhi.n	800be76 <_printf_i+0x32>
 800be60:	2f00      	cmp	r7, #0
 800be62:	f000 80d8 	beq.w	800c016 <_printf_i+0x1d2>
 800be66:	2f58      	cmp	r7, #88	; 0x58
 800be68:	f000 80a3 	beq.w	800bfb2 <_printf_i+0x16e>
 800be6c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800be70:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800be74:	e03a      	b.n	800beec <_printf_i+0xa8>
 800be76:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800be7a:	2b15      	cmp	r3, #21
 800be7c:	d8f6      	bhi.n	800be6c <_printf_i+0x28>
 800be7e:	a101      	add	r1, pc, #4	; (adr r1, 800be84 <_printf_i+0x40>)
 800be80:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800be84:	0800bedd 	.word	0x0800bedd
 800be88:	0800bef1 	.word	0x0800bef1
 800be8c:	0800be6d 	.word	0x0800be6d
 800be90:	0800be6d 	.word	0x0800be6d
 800be94:	0800be6d 	.word	0x0800be6d
 800be98:	0800be6d 	.word	0x0800be6d
 800be9c:	0800bef1 	.word	0x0800bef1
 800bea0:	0800be6d 	.word	0x0800be6d
 800bea4:	0800be6d 	.word	0x0800be6d
 800bea8:	0800be6d 	.word	0x0800be6d
 800beac:	0800be6d 	.word	0x0800be6d
 800beb0:	0800bffd 	.word	0x0800bffd
 800beb4:	0800bf21 	.word	0x0800bf21
 800beb8:	0800bfdf 	.word	0x0800bfdf
 800bebc:	0800be6d 	.word	0x0800be6d
 800bec0:	0800be6d 	.word	0x0800be6d
 800bec4:	0800c01f 	.word	0x0800c01f
 800bec8:	0800be6d 	.word	0x0800be6d
 800becc:	0800bf21 	.word	0x0800bf21
 800bed0:	0800be6d 	.word	0x0800be6d
 800bed4:	0800be6d 	.word	0x0800be6d
 800bed8:	0800bfe7 	.word	0x0800bfe7
 800bedc:	682b      	ldr	r3, [r5, #0]
 800bede:	1d1a      	adds	r2, r3, #4
 800bee0:	681b      	ldr	r3, [r3, #0]
 800bee2:	602a      	str	r2, [r5, #0]
 800bee4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bee8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800beec:	2301      	movs	r3, #1
 800beee:	e0a3      	b.n	800c038 <_printf_i+0x1f4>
 800bef0:	6820      	ldr	r0, [r4, #0]
 800bef2:	6829      	ldr	r1, [r5, #0]
 800bef4:	0606      	lsls	r6, r0, #24
 800bef6:	f101 0304 	add.w	r3, r1, #4
 800befa:	d50a      	bpl.n	800bf12 <_printf_i+0xce>
 800befc:	680e      	ldr	r6, [r1, #0]
 800befe:	602b      	str	r3, [r5, #0]
 800bf00:	2e00      	cmp	r6, #0
 800bf02:	da03      	bge.n	800bf0c <_printf_i+0xc8>
 800bf04:	232d      	movs	r3, #45	; 0x2d
 800bf06:	4276      	negs	r6, r6
 800bf08:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bf0c:	485e      	ldr	r0, [pc, #376]	; (800c088 <_printf_i+0x244>)
 800bf0e:	230a      	movs	r3, #10
 800bf10:	e019      	b.n	800bf46 <_printf_i+0x102>
 800bf12:	680e      	ldr	r6, [r1, #0]
 800bf14:	602b      	str	r3, [r5, #0]
 800bf16:	f010 0f40 	tst.w	r0, #64	; 0x40
 800bf1a:	bf18      	it	ne
 800bf1c:	b236      	sxthne	r6, r6
 800bf1e:	e7ef      	b.n	800bf00 <_printf_i+0xbc>
 800bf20:	682b      	ldr	r3, [r5, #0]
 800bf22:	6820      	ldr	r0, [r4, #0]
 800bf24:	1d19      	adds	r1, r3, #4
 800bf26:	6029      	str	r1, [r5, #0]
 800bf28:	0601      	lsls	r1, r0, #24
 800bf2a:	d501      	bpl.n	800bf30 <_printf_i+0xec>
 800bf2c:	681e      	ldr	r6, [r3, #0]
 800bf2e:	e002      	b.n	800bf36 <_printf_i+0xf2>
 800bf30:	0646      	lsls	r6, r0, #25
 800bf32:	d5fb      	bpl.n	800bf2c <_printf_i+0xe8>
 800bf34:	881e      	ldrh	r6, [r3, #0]
 800bf36:	4854      	ldr	r0, [pc, #336]	; (800c088 <_printf_i+0x244>)
 800bf38:	2f6f      	cmp	r7, #111	; 0x6f
 800bf3a:	bf0c      	ite	eq
 800bf3c:	2308      	moveq	r3, #8
 800bf3e:	230a      	movne	r3, #10
 800bf40:	2100      	movs	r1, #0
 800bf42:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800bf46:	6865      	ldr	r5, [r4, #4]
 800bf48:	60a5      	str	r5, [r4, #8]
 800bf4a:	2d00      	cmp	r5, #0
 800bf4c:	bfa2      	ittt	ge
 800bf4e:	6821      	ldrge	r1, [r4, #0]
 800bf50:	f021 0104 	bicge.w	r1, r1, #4
 800bf54:	6021      	strge	r1, [r4, #0]
 800bf56:	b90e      	cbnz	r6, 800bf5c <_printf_i+0x118>
 800bf58:	2d00      	cmp	r5, #0
 800bf5a:	d04d      	beq.n	800bff8 <_printf_i+0x1b4>
 800bf5c:	4615      	mov	r5, r2
 800bf5e:	fbb6 f1f3 	udiv	r1, r6, r3
 800bf62:	fb03 6711 	mls	r7, r3, r1, r6
 800bf66:	5dc7      	ldrb	r7, [r0, r7]
 800bf68:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800bf6c:	4637      	mov	r7, r6
 800bf6e:	42bb      	cmp	r3, r7
 800bf70:	460e      	mov	r6, r1
 800bf72:	d9f4      	bls.n	800bf5e <_printf_i+0x11a>
 800bf74:	2b08      	cmp	r3, #8
 800bf76:	d10b      	bne.n	800bf90 <_printf_i+0x14c>
 800bf78:	6823      	ldr	r3, [r4, #0]
 800bf7a:	07de      	lsls	r6, r3, #31
 800bf7c:	d508      	bpl.n	800bf90 <_printf_i+0x14c>
 800bf7e:	6923      	ldr	r3, [r4, #16]
 800bf80:	6861      	ldr	r1, [r4, #4]
 800bf82:	4299      	cmp	r1, r3
 800bf84:	bfde      	ittt	le
 800bf86:	2330      	movle	r3, #48	; 0x30
 800bf88:	f805 3c01 	strble.w	r3, [r5, #-1]
 800bf8c:	f105 35ff 	addle.w	r5, r5, #4294967295
 800bf90:	1b52      	subs	r2, r2, r5
 800bf92:	6122      	str	r2, [r4, #16]
 800bf94:	f8cd a000 	str.w	sl, [sp]
 800bf98:	464b      	mov	r3, r9
 800bf9a:	aa03      	add	r2, sp, #12
 800bf9c:	4621      	mov	r1, r4
 800bf9e:	4640      	mov	r0, r8
 800bfa0:	f7ff fee2 	bl	800bd68 <_printf_common>
 800bfa4:	3001      	adds	r0, #1
 800bfa6:	d14c      	bne.n	800c042 <_printf_i+0x1fe>
 800bfa8:	f04f 30ff 	mov.w	r0, #4294967295
 800bfac:	b004      	add	sp, #16
 800bfae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bfb2:	4835      	ldr	r0, [pc, #212]	; (800c088 <_printf_i+0x244>)
 800bfb4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800bfb8:	6829      	ldr	r1, [r5, #0]
 800bfba:	6823      	ldr	r3, [r4, #0]
 800bfbc:	f851 6b04 	ldr.w	r6, [r1], #4
 800bfc0:	6029      	str	r1, [r5, #0]
 800bfc2:	061d      	lsls	r5, r3, #24
 800bfc4:	d514      	bpl.n	800bff0 <_printf_i+0x1ac>
 800bfc6:	07df      	lsls	r7, r3, #31
 800bfc8:	bf44      	itt	mi
 800bfca:	f043 0320 	orrmi.w	r3, r3, #32
 800bfce:	6023      	strmi	r3, [r4, #0]
 800bfd0:	b91e      	cbnz	r6, 800bfda <_printf_i+0x196>
 800bfd2:	6823      	ldr	r3, [r4, #0]
 800bfd4:	f023 0320 	bic.w	r3, r3, #32
 800bfd8:	6023      	str	r3, [r4, #0]
 800bfda:	2310      	movs	r3, #16
 800bfdc:	e7b0      	b.n	800bf40 <_printf_i+0xfc>
 800bfde:	6823      	ldr	r3, [r4, #0]
 800bfe0:	f043 0320 	orr.w	r3, r3, #32
 800bfe4:	6023      	str	r3, [r4, #0]
 800bfe6:	2378      	movs	r3, #120	; 0x78
 800bfe8:	4828      	ldr	r0, [pc, #160]	; (800c08c <_printf_i+0x248>)
 800bfea:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800bfee:	e7e3      	b.n	800bfb8 <_printf_i+0x174>
 800bff0:	0659      	lsls	r1, r3, #25
 800bff2:	bf48      	it	mi
 800bff4:	b2b6      	uxthmi	r6, r6
 800bff6:	e7e6      	b.n	800bfc6 <_printf_i+0x182>
 800bff8:	4615      	mov	r5, r2
 800bffa:	e7bb      	b.n	800bf74 <_printf_i+0x130>
 800bffc:	682b      	ldr	r3, [r5, #0]
 800bffe:	6826      	ldr	r6, [r4, #0]
 800c000:	6961      	ldr	r1, [r4, #20]
 800c002:	1d18      	adds	r0, r3, #4
 800c004:	6028      	str	r0, [r5, #0]
 800c006:	0635      	lsls	r5, r6, #24
 800c008:	681b      	ldr	r3, [r3, #0]
 800c00a:	d501      	bpl.n	800c010 <_printf_i+0x1cc>
 800c00c:	6019      	str	r1, [r3, #0]
 800c00e:	e002      	b.n	800c016 <_printf_i+0x1d2>
 800c010:	0670      	lsls	r0, r6, #25
 800c012:	d5fb      	bpl.n	800c00c <_printf_i+0x1c8>
 800c014:	8019      	strh	r1, [r3, #0]
 800c016:	2300      	movs	r3, #0
 800c018:	6123      	str	r3, [r4, #16]
 800c01a:	4615      	mov	r5, r2
 800c01c:	e7ba      	b.n	800bf94 <_printf_i+0x150>
 800c01e:	682b      	ldr	r3, [r5, #0]
 800c020:	1d1a      	adds	r2, r3, #4
 800c022:	602a      	str	r2, [r5, #0]
 800c024:	681d      	ldr	r5, [r3, #0]
 800c026:	6862      	ldr	r2, [r4, #4]
 800c028:	2100      	movs	r1, #0
 800c02a:	4628      	mov	r0, r5
 800c02c:	f7f4 f8d8 	bl	80001e0 <memchr>
 800c030:	b108      	cbz	r0, 800c036 <_printf_i+0x1f2>
 800c032:	1b40      	subs	r0, r0, r5
 800c034:	6060      	str	r0, [r4, #4]
 800c036:	6863      	ldr	r3, [r4, #4]
 800c038:	6123      	str	r3, [r4, #16]
 800c03a:	2300      	movs	r3, #0
 800c03c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c040:	e7a8      	b.n	800bf94 <_printf_i+0x150>
 800c042:	6923      	ldr	r3, [r4, #16]
 800c044:	462a      	mov	r2, r5
 800c046:	4649      	mov	r1, r9
 800c048:	4640      	mov	r0, r8
 800c04a:	47d0      	blx	sl
 800c04c:	3001      	adds	r0, #1
 800c04e:	d0ab      	beq.n	800bfa8 <_printf_i+0x164>
 800c050:	6823      	ldr	r3, [r4, #0]
 800c052:	079b      	lsls	r3, r3, #30
 800c054:	d413      	bmi.n	800c07e <_printf_i+0x23a>
 800c056:	68e0      	ldr	r0, [r4, #12]
 800c058:	9b03      	ldr	r3, [sp, #12]
 800c05a:	4298      	cmp	r0, r3
 800c05c:	bfb8      	it	lt
 800c05e:	4618      	movlt	r0, r3
 800c060:	e7a4      	b.n	800bfac <_printf_i+0x168>
 800c062:	2301      	movs	r3, #1
 800c064:	4632      	mov	r2, r6
 800c066:	4649      	mov	r1, r9
 800c068:	4640      	mov	r0, r8
 800c06a:	47d0      	blx	sl
 800c06c:	3001      	adds	r0, #1
 800c06e:	d09b      	beq.n	800bfa8 <_printf_i+0x164>
 800c070:	3501      	adds	r5, #1
 800c072:	68e3      	ldr	r3, [r4, #12]
 800c074:	9903      	ldr	r1, [sp, #12]
 800c076:	1a5b      	subs	r3, r3, r1
 800c078:	42ab      	cmp	r3, r5
 800c07a:	dcf2      	bgt.n	800c062 <_printf_i+0x21e>
 800c07c:	e7eb      	b.n	800c056 <_printf_i+0x212>
 800c07e:	2500      	movs	r5, #0
 800c080:	f104 0619 	add.w	r6, r4, #25
 800c084:	e7f5      	b.n	800c072 <_printf_i+0x22e>
 800c086:	bf00      	nop
 800c088:	0800c75d 	.word	0x0800c75d
 800c08c:	0800c76e 	.word	0x0800c76e

0800c090 <_malloc_usable_size_r>:
 800c090:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c094:	1f18      	subs	r0, r3, #4
 800c096:	2b00      	cmp	r3, #0
 800c098:	bfbc      	itt	lt
 800c09a:	580b      	ldrlt	r3, [r1, r0]
 800c09c:	18c0      	addlt	r0, r0, r3
 800c09e:	4770      	bx	lr

0800c0a0 <_init>:
 800c0a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c0a2:	bf00      	nop
 800c0a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c0a6:	bc08      	pop	{r3}
 800c0a8:	469e      	mov	lr, r3
 800c0aa:	4770      	bx	lr

0800c0ac <_fini>:
 800c0ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c0ae:	bf00      	nop
 800c0b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c0b2:	bc08      	pop	{r3}
 800c0b4:	469e      	mov	lr, r3
 800c0b6:	4770      	bx	lr
